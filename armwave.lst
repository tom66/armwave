   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 70 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 14D04DE2 		sub	sp, sp, #20	@,,
 249              		.cfi_def_cfa_offset 56
 250              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 251              		.loc 1 70 40 view .LVU32
 252 00a4 8C419FE5 		ldr	r4, .L27	@ tmp286,
 253              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 254              		.loc 1 63 1 view .LVU33
 255 00a8 01C0A0E1 		mov	ip, r1	@ height, height
 256 00ac 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 257              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 258              		.loc 1 70 63 view .LVU34
 259 00b0 403094E5 		ldr	r3, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 260              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  71:armwave.c     **** 
  72:armwave.c     ****     // roll through each waveform
  73:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 261              		.loc 1 73 5 view .LVU35
 262 00b4 381094E5 		ldr	r1, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 263              	.LVL7:
 264              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 265              		.loc 1 70 40 view .LVU36
 266 00b8 042094E5 		ldr	r2, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 267              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
 268              		.loc 1 73 5 view .LVU37
 269 00bc 000051E3 		cmp	r1, #0	@ g_armwave_state.waves,
 270              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 271              		.loc 1 70 63 view .LVU38
 272 00c0 93000BE0 		mul	fp, r3, r0	@ _4, g_armwave_state.bitdepth_height, slice_y
 273              	.LVL8:
 274              		.loc 1 73 5 is_stmt 1 view .LVU39
 275              		.loc 1 73 5 is_stmt 0 view .LVU40
 276 00c4 590000DA 		ble	.L11		@,
 277 00c8 00005CE3 		cmp	ip, #0	@ height,
 278 00cc 5700000A 		beq	.L11		@,
 279 00d0 043040E2 		sub	r3, r0, #4	@ tmp287, slice_y,
 280 00d4 0C308DE5 		str	r3, [sp, #12]	@ tmp287, %sfp
 281              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
 282              		.loc 1 73 11 view .LVU41
 283 00d8 0030A0E3 		mov	r3, #0	@ w,
 284 00dc 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 285              	.LVL9:
 286              	.L18:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 287              		.loc 1 74 9 is_stmt 1 view .LVU42
  75:armwave.c     **** 
  76:armwave.c     ****         // roll through y and render the slice into the out buffer
  77:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  78:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 288              		.loc 1 78 9 view .LVU43
 289              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 74 64 is_stmt 0 view .LVU44
 291 00e0 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 292 00e4 08C09DE5 		ldr	ip, [sp, #8]	@ w, %sfp
 293 00e8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp287, %sfp
 294 00ec 140094E5 		ldr	r0, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 295 00f0 93EC23E0 		mla	r3, r3, ip, lr	@ tmp209, g_armwave_state.wave_stride, w, tmp287
 296              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
 297              		.loc 1 78 16 view .LVU45
 298 00f4 0010A0E3 		mov	r1, #0	@ yy,
 299 00f8 03A080E0 		add	r10, r0, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp209
 300              	.LVL10:
 301              	.L17:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 302              		.loc 1 79 13 is_stmt 1 view .LVU46
  80:armwave.c     **** 
  81:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  82:armwave.c     ****                 scale_value = word & 0xff;
  83:armwave.c     ****                 
  84:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  85:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  86:armwave.c     ****                     continue;
  87:armwave.c     **** 
  88:armwave.c     ****                 // Keep math in integer where possible using the compound X multiplier and a shift 
  89:armwave.c     ****                 // of X to 1/256 but this should not be an ultimate issue.
  90:armwave.c     ****                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cmp_x_bitdepth_sca
 303              		.loc 1 90 17 view .LVU47
  91:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 304              		.loc 1 91 17 view .LVU48
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 90 17 view .LVU49
 306              		.loc 1 91 17 view .LVU50
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 307              		.loc 1 90 17 view .LVU51
 308              		.loc 1 91 17 view .LVU52
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 309              		.loc 1 90 17 view .LVU53
 310              		.loc 1 91 17 view .LVU54
 311              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + yy);
  79:armwave.c     **** 
 312              		.loc 1 79 18 is_stmt 0 view .LVU55
 313 00fc 0430BAE5 		ldr	r3, [r10, #4]!	@ word, MEM[base: _164, offset: 0B]
 314              	.LVL11:
  81:armwave.c     ****                 scale_value = word & 0xff;
 315              		.loc 1 81 13 is_stmt 1 view .LVU56
  82:armwave.c     ****                 
 316              		.loc 1 82 17 view .LVU57
  85:armwave.c     ****                     continue;
 317              		.loc 1 85 17 view .LVU58
 318              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 319              		.loc 1 90 64 is_stmt 0 view .LVU59
 320 0100 019081E2 		add	r9, r1, #1	@ tmp237, yy,
 321              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 322              		.loc 1 85 20 view .LVU60
 323 0104 FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 324 0108 0150A003 		moveq	r5, #1	@ tmp212,
 325 010c 0050A013 		movne	r5, #0	@ tmp212,
 326              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 327              		.loc 1 85 19 view .LVU61
 328 0110 FF0056E3 		cmp	r6, #255	@ scale_value,
 329 0114 01508503 		orreq	r5, r5, #1	@,, tmp217, tmp212
 330 0118 000055E3 		cmp	r5, #0	@ tmp217,
 331              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 332              		.loc 1 90 64 view .LVU62
 333 011c 028081E2 		add	r8, r1, #2	@ tmp256, yy,
 334 0120 037081E2 		add	r7, r1, #3	@ tmp273, yy,
 335              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
 336              		.loc 1 91 47 view .LVU63
 337 0124 0BE086E0 		add	lr, r6, fp	@ tmp222, scale_value, _4
 338              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****                 word >>= 8;
 339              		.loc 1 92 22 view .LVU64
 340 0128 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 341 012c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 342              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 343              		.loc 1 85 19 view .LVU65
 344 0130 3400001A 		bne	.L20		@,
 345              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 346              		.loc 1 90 64 view .LVU66
 347 0134 246094E5 		ldr	r6, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 348              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 349              		.loc 1 85 20 view .LVU67
 350 0138 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 351              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 352              		.loc 1 91 47 view .LVU68
 353 013c 0B508CE0 		add	r5, ip, fp	@ tmp241, scale_value, _4
 354              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 355              		.loc 1 90 64 view .LVU69
 356 0140 960106E0 		mul	r6, r6, r1	@ tmp219, g_armwave_state.cmp_x_bitdepth_scale, yy
 357 0144 00608DE5 		str	r6, [sp]	@ tmp219, %sfp
 358              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 359              		.loc 1 85 20 view .LVU70
 360 0148 0160A003 		moveq	r6, #1	@ tmp230,
 361 014c 0060A013 		movne	r6, #0	@ tmp230,
 362              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 363              		.loc 1 85 19 view .LVU71
 364 0150 FF005CE3 		cmp	ip, #255	@ scale_value,
 365 0154 06C0A011 		movne	ip, r6	@, tmp235, tmp230
 366 0158 01C08603 		orreq	ip, r6, #1	@,, tmp235, tmp230
 367              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 368              		.loc 1 91 47 view .LVU72
 369 015c 00609DE5 		ldr	r6, [sp]	@ tmp219, %sfp
 370              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 371              		.loc 1 85 19 view .LVU73
 372 0160 00005CE3 		cmp	ip, #0	@ tmp235,
 373              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 374              		.loc 1 91 47 view .LVU74
 375 0164 26E48EE0 		add	lr, lr, r6, lsr #8	@ tmp223, tmp222, tmp219,
 376 0168 0EC0D2E7 		ldrb	ip, [r2, lr]	@ zero_extendqisi2	@ *_70, *_70
 377 016c 01C08CE2 		add	ip, ip, #1	@ tmp226, *_70,
 378 0170 0EC0C2E7 		strb	ip, [r2, lr]	@ tmp226, *_70
 379              	.LVL12:
 380              		.loc 1 92 17 is_stmt 1 view .LVU75
  82:armwave.c     ****                 
 381              		.loc 1 82 17 view .LVU76
  85:armwave.c     ****                     continue;
 382              		.loc 1 85 17 view .LVU77
 383              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 384              		.loc 1 85 19 is_stmt 0 view .LVU78
 385 0174 2300001A 		bne	.L20		@,
 386              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 387              		.loc 1 90 64 view .LVU79
 388 0178 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 389              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 390              		.loc 1 85 20 view .LVU80
 391 017c FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 392              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 393              		.loc 1 91 47 view .LVU81
 394 0180 0BC080E0 		add	ip, r0, fp	@ tmp260, scale_value, _4
 395              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 396              		.loc 1 90 64 view .LVU82
 397 0184 9E0909E0 		mul	r9, lr, r9	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, tmp237
 398              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 399              		.loc 1 85 20 view .LVU83
 400 0188 01E0A003 		moveq	lr, #1	@ tmp249,
 401 018c 00E0A013 		movne	lr, #0	@ tmp249,
 402              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 403              		.loc 1 91 47 view .LVU84
 404 0190 295485E0 		add	r5, r5, r9, lsr #8	@ tmp242, tmp241, tmp238,
 405              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 406              		.loc 1 85 19 view .LVU85
 407 0194 FF0050E3 		cmp	r0, #255	@ scale_value,
 408 0198 0E00A011 		movne	r0, lr	@, tmp254, tmp249
 409 019c 01008E03 		orreq	r0, lr, #1	@,, tmp254, tmp249
 410 01a0 000050E3 		cmp	r0, #0	@ tmp254,
 411              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 412              		.loc 1 91 47 view .LVU86
 413 01a4 0500D2E7 		ldrb	r0, [r2, r5]	@ zero_extendqisi2	@ *_98, *_98
 414 01a8 010080E2 		add	r0, r0, #1	@ tmp245, *_98,
 415 01ac 0500C2E7 		strb	r0, [r2, r5]	@ tmp245, *_98
 416              		.loc 1 92 17 is_stmt 1 view .LVU87
 417              	.LVL13:
  82:armwave.c     ****                 
 418              		.loc 1 82 17 view .LVU88
  85:armwave.c     ****                     continue;
 419              		.loc 1 85 17 view .LVU89
 420              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 421              		.loc 1 85 19 is_stmt 0 view .LVU90
 422 01b0 1400001A 		bne	.L20		@,
 423              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 424              		.loc 1 90 64 view .LVU91
 425 01b4 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 426              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 427              		.loc 1 85 20 view .LVU92
 428 01b8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 429              	.LVL14:
 430              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 431              		.loc 1 91 47 view .LVU93
 432 01bc 03008BE0 		add	r0, fp, r3	@ tmp278, _4, word
 433              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 434              		.loc 1 90 64 view .LVU94
 435 01c0 9E0808E0 		mul	r8, lr, r8	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, tmp256
 436              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 437              		.loc 1 85 20 view .LVU95
 438 01c4 01E0A003 		moveq	lr, #1	@ tmp267,
 439 01c8 00E0A013 		movne	lr, #0	@ tmp267,
 440              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 441              		.loc 1 91 47 view .LVU96
 442 01cc 28848CE0 		add	r8, ip, r8, lsr #8	@ tmp261, tmp260, tmp257,
 443              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 444              		.loc 1 85 19 view .LVU97
 445 01d0 FF0053E3 		cmp	r3, #255	@ word,
 446 01d4 0E30A011 		movne	r3, lr	@, tmp272, tmp267
 447 01d8 01308E03 		orreq	r3, lr, #1	@,, tmp272, tmp267
 448 01dc 000053E3 		cmp	r3, #0	@ tmp272,
 449              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 450              		.loc 1 91 47 view .LVU98
 451 01e0 0830D2E7 		ldrb	r3, [r2, r8]	@ zero_extendqisi2	@ *_126, *_126
 452 01e4 013083E2 		add	r3, r3, #1	@ tmp264, *_126,
 453 01e8 0830C2E7 		strb	r3, [r2, r8]	@ tmp264, *_126
 454              		.loc 1 92 17 is_stmt 1 view .LVU99
 455              	.LVL15:
  82:armwave.c     ****                 
 456              		.loc 1 82 17 view .LVU100
  85:armwave.c     ****                     continue;
 457              		.loc 1 85 17 view .LVU101
 458              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 459              		.loc 1 85 19 is_stmt 0 view .LVU102
 460 01ec 0500001A 		bne	.L20		@,
 461              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 462              		.loc 1 90 64 view .LVU103
 463 01f0 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 464 01f4 930703E0 		mul	r3, r3, r7	@ tmp275, g_armwave_state.cmp_x_bitdepth_scale, tmp273
 465              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 466              		.loc 1 91 47 view .LVU104
 467 01f8 233480E0 		add	r3, r0, r3, lsr #8	@ tmp279, tmp278, tmp275,
 468 01fc 0300D2E7 		ldrb	r0, [r2, r3]	@ zero_extendqisi2	@ *_154, *_154
 469 0200 010080E2 		add	r0, r0, #1	@ tmp282, *_154,
 470 0204 0300C2E7 		strb	r0, [r2, r3]	@ tmp282, *_154
 471              		.loc 1 92 17 is_stmt 1 view .LVU105
 472              	.LVL16:
 473              	.L20:
 474              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 475              		.loc 1 78 9 is_stmt 0 view .LVU106
 476 0208 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 477              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 478              		.loc 1 78 37 view .LVU107
 479 020c 041081E2 		add	r1, r1, #4	@ yy, yy,
 480              	.LVL17:
 481              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 482              		.loc 1 78 9 view .LVU108
 483 0210 010053E1 		cmp	r3, r1	@ height, yy
 484 0214 B8FFFF8A 		bhi	.L17		@,
 485              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 486              		.loc 1 73 44 view .LVU109
 487 0218 08109DE5 		ldr	r1, [sp, #8]	@ w, %sfp
 488              	.LVL18:
 489              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 490              		.loc 1 73 5 view .LVU110
 491 021c 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 492              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 493              		.loc 1 73 44 view .LVU111
 494 0220 011081E2 		add	r1, r1, #1	@ w, w,
 495              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 496              		.loc 1 73 5 view .LVU112
 497 0224 030051E1 		cmp	r1, r3	@ w, g_armwave_state.waves
 498              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 499              		.loc 1 73 44 view .LVU113
 500 0228 08108DE5 		str	r1, [sp, #8]	@ w, %sfp
 501              	.LVL19:
 502              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 503              		.loc 1 73 5 view .LVU114
 504 022c ABFFFFBA 		blt	.L18		@,
 505              	.LVL20:
 506              	.L11:
 507              	@ armwave.c:96: }
  93:armwave.c     ****             }
  94:armwave.c     ****         }
  95:armwave.c     ****     }
  96:armwave.c     **** }
 508              		.loc 1 96 1 view .LVU115
 509 0230 14D08DE2 		add	sp, sp, #20	@,,
 510              		.cfi_def_cfa_offset 36
 511              		@ sp needed	@
 512 0234 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 513              	.LVL21:
 514              	.L28:
 515              		.loc 1 96 1 view .LVU116
 516              		.align	2
 517              	.L27:
 518 0238 00000000 		.word	g_armwave_state
 519              		.cfi_endproc
 520              	.LFE59:
 522              		.align	2
 523              		.global	armwave_fill_pixbuf_scaled
 524              		.syntax unified
 525              		.arm
 526              		.fpu vfp
 528              	armwave_fill_pixbuf_scaled:
 529              	.LVL22:
 530              	.LFB60:
  97:armwave.c     **** 
  98:armwave.c     **** #if 0
  99:armwave.c     **** /*
 100:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 101:armwave.c     ****  */
 102:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 103:armwave.c     **** {
 104:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 105:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 106:armwave.c     ****     uint8_t r, g, b, value;
 107:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 108:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 109:armwave.c     ****     uint32_t offset;
 110:armwave.c     **** 
 111:armwave.c     ****     assert(out_buffer != NULL);
 112:armwave.c     **** 
 113:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 114:armwave.c     **** 
 115:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 116:armwave.c     **** 
 117:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 118:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 119:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 120:armwave.c     ****         // most normal waveforms.
 121:armwave.c     ****         wave_word = *base_32ptr++;
 122:armwave.c     **** 
 123:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 124:armwave.c     ****             for(i = 0; i < 4; i++) {
 125:armwave.c     ****                 value = wave_word & 0xff;
 126:armwave.c     ****                 wave_word >>= 8;
 127:armwave.c     **** 
 128:armwave.c     ****                 if(value != 0) {
 129:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 130:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 131:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 132:armwave.c     **** 
 133:armwave.c     ****                     r = MIN(rr, 255);
 134:armwave.c     ****                     g = MIN(gg, 255);
 135:armwave.c     ****                     b = MIN(bb, 255);
 136:armwave.c     **** 
 137:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 138:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 139:armwave.c     **** 
 140:armwave.c     ****                     // Is there a better way?
 141:armwave.c     ****                     nsub = n + i;
 142:armwave.c     ****                     xx = nsub & 0xff;
 143:armwave.c     ****                     yy = nsub >> 8;
 144:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 145:armwave.c     ****                     *(out_buffer_base + offset) = word;
 146:armwave.c     ****                 }
 147:armwave.c     ****             }
 148:armwave.c     ****         } 
 149:armwave.c     ****     }
 150:armwave.c     **** }
 151:armwave.c     **** #endif
 152:armwave.c     **** 
 153:armwave.c     **** /*
 154:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 155:armwave.c     ****  * Rows are repeated as necessary.
 156:armwave.c     ****  */
 157:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 158:armwave.c     **** {
 531              		.loc 1 158 1 is_stmt 1 view -0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 8
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 159:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 535              		.loc 1 159 5 view .LVU118
 160:armwave.c     ****     // uint32_t ysub;
 161:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 536              		.loc 1 161 5 view .LVU119
 162:armwave.c     ****     uint8_t r, g, b, value; 
 537              		.loc 1 162 5 view .LVU120
 163:armwave.c     ****     // uint8_t row;
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 538              		.loc 1 164 5 view .LVU121
 539              	@ armwave.c:158: {
 158:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 540              		.loc 1 158 1 is_stmt 0 view .LVU122
 541 023c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 542              		.cfi_def_cfa_offset 36
 543              		.cfi_offset 4, -36
 544              		.cfi_offset 5, -32
 545              		.cfi_offset 6, -28
 546              		.cfi_offset 7, -24
 547              		.cfi_offset 8, -20
 548              		.cfi_offset 9, -16
 549              		.cfi_offset 10, -12
 550              		.cfi_offset 11, -8
 551              		.cfi_offset 14, -4
 552              	@ armwave.c:168:     assert(out_buffer != NULL);
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 166:armwave.c     ****     uint32_t offset;
 167:armwave.c     **** 
 168:armwave.c     ****     assert(out_buffer != NULL);
 553              		.loc 1 168 5 view .LVU123
 554 0240 000050E3 		cmp	r0, #0	@ out_buffer
 555              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 556              		.loc 1 164 15 view .LVU124
 557 0244 44619FE5 		ldr	r6, .L51	@ tmp203,
 558              	@ armwave.c:158: {
 158:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 559              		.loc 1 158 1 view .LVU125
 560 0248 0CD04DE2 		sub	sp, sp, #12	@,,
 561              		.cfi_def_cfa_offset 48
 562              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 563              		.loc 1 164 15 view .LVU126
 564 024c 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 565              	.LVL23:
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 566              		.loc 1 165 5 is_stmt 1 view .LVU127
 166:armwave.c     **** 
 567              		.loc 1 166 5 view .LVU128
 568              		.loc 1 168 5 view .LVU129
 569 0250 4900000A 		beq	.L48		@,
 169:armwave.c     **** 
 170:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 570              		.loc 1 170 5 view .LVU130
 571              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 572              		.loc 1 170 10 is_stmt 0 view .LVU131
 573 0254 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 574 0258 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 575              	.LVL24:
 171:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 172:armwave.c     **** 
 173:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 576              		.loc 1 173 5 is_stmt 1 view .LVU132
 577              		.loc 1 173 5 is_stmt 0 view .LVU133
 578 025c 000058E3 		cmp	r8, #0	@ npix,
 579 0260 0C0000DA 		ble	.L29		@,
 580              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 175:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 176:armwave.c     ****         // most normal waveforms.
 177:armwave.c     ****         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 179:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 182:armwave.c     ****                 wave_word >>= 8;
 183:armwave.c     **** 
 184:armwave.c     ****                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 581              		.loc 1 186 52 view .LVU134
 582 0264 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 583              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 584              		.loc 1 185 52 view .LVU135
 585 0268 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 586              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 189:armwave.c     ****                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 192:armwave.c     **** 
 193:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 194:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 196:armwave.c     ****                     // Do line scaling as necessary.
 197:armwave.c     ****                     /*
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                     */
 207:armwave.c     **** 
 208:armwave.c     ****                     nsub = n + w;
 209:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 587              		.loc 1 209 57 view .LVU136
 588 026c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 589              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 590              		.loc 1 186 52 view .LVU137
 591 0270 00308DE5 		str	r3, [sp]	@ _10, %sfp
 592              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 593              		.loc 1 187 52 view .LVU138
 594 0274 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 595              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 596              		.loc 1 173 11 view .LVU139
 597 0278 0010A0E3 		mov	r1, #0	@ n,
 598              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 599              		.loc 1 187 52 view .LVU140
 600 027c 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 601              	.LVL25:
 602              	.L36:
 177:armwave.c     **** 
 603              		.loc 1 177 9 is_stmt 1 view .LVU141
 604              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 605              		.loc 1 177 19 is_stmt 0 view .LVU142
 606 0280 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 607              	.LVL26:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 608              		.loc 1 179 9 is_stmt 1 view .LVU143
 609              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 610              		.loc 1 179 11 is_stmt 0 view .LVU144
 611 0284 000053E3 		cmp	r3, #0	@ wave_word,
 612 0288 0400001A 		bne	.L49		@,
 613              	.L32:
 614              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 615              		.loc 1 173 28 view .LVU145
 616 028c 041081E2 		add	r1, r1, #4	@ n, n,
 617              	.LVL27:
 618              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 619              		.loc 1 173 5 view .LVU146
 620 0290 010058E1 		cmp	r8, r1	@ npix, n
 621 0294 F9FFFFCA 		bgt	.L36		@,
 622              	.LVL28:
 623              	.L29:
 624              	@ armwave.c:221: }
 210:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 211:armwave.c     ****                     xx = (nsub >> 8);
 212:armwave.c     **** 
 213:armwave.c     ****                     for(y = yy; y < ye; y++) {
 214:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 215:armwave.c     ****                         *(out_buffer_base + offset) = word;
 216:armwave.c     ****                     }
 217:armwave.c     ****                 }
 218:armwave.c     ****             }
 219:armwave.c     ****         }
 220:armwave.c     ****     }
 221:armwave.c     **** }
 625              		.loc 1 221 1 view .LVU147
 626 0298 0CD08DE2 		add	sp, sp, #12	@,,
 627              		.cfi_remember_state
 628              		.cfi_def_cfa_offset 36
 629              		@ sp needed	@
 630 029c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 631              	.LVL29:
 632              	.L49:
 633              		.cfi_restore_state
 634              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 635              		.loc 1 184 19 view .LVU148
 636 02a0 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 637              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 638              		.loc 1 180 19 view .LVU149
 639 02a4 0070A0E3 		mov	r7, #0	@ w,
 640              	.LVL30:
 181:armwave.c     ****                 wave_word >>= 8;
 641              		.loc 1 181 17 is_stmt 1 view .LVU150
 182:armwave.c     **** 
 642              		.loc 1 182 17 view .LVU151
 643              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 644              		.loc 1 182 27 is_stmt 0 view .LVU152
 645 02a8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 646              	.LVL31:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 647              		.loc 1 184 17 is_stmt 1 view .LVU153
 648              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 649              		.loc 1 184 19 is_stmt 0 view .LVU154
 650 02ac 0500001A 		bne	.L50		@,
 651              	.L33:
 652              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 653              		.loc 1 180 32 view .LVU155
 654 02b0 017087E2 		add	r7, r7, #1	@ w, w,
 655              	.LVL32:
 656              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 657              		.loc 1 180 13 view .LVU156
 658 02b4 040057E3 		cmp	r7, #4	@ w,
 659 02b8 F3FFFF0A 		beq	.L32		@,
 181:armwave.c     ****                 wave_word >>= 8;
 660              		.loc 1 181 17 is_stmt 1 view .LVU157
 661              	.LVL33:
 182:armwave.c     **** 
 662              		.loc 1 182 17 view .LVU158
 663              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 664              		.loc 1 184 19 is_stmt 0 view .LVU159
 665 02bc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 666              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 667              		.loc 1 182 27 view .LVU160
 668 02c0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 669              	.LVL34:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 670              		.loc 1 184 17 is_stmt 1 view .LVU161
 671              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 672              		.loc 1 184 19 is_stmt 0 view .LVU162
 673 02c4 F9FFFF0A 		beq	.L33		@,
 674              	.L50:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 675              		.loc 1 185 21 is_stmt 1 view .LVU163
 676              	.LVL35:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 677              		.loc 1 186 21 view .LVU164
 187:armwave.c     **** 
 678              		.loc 1 187 21 view .LVU165
 189:armwave.c     ****                     g = MIN(gg, 255);
 679              		.loc 1 189 21 view .LVU166
 190:armwave.c     ****                     b = MIN(bb, 255);
 680              		.loc 1 190 21 view .LVU167
 191:armwave.c     **** 
 681              		.loc 1 191 21 view .LVU168
 194:armwave.c     **** 
 682              		.loc 1 194 21 view .LVU169
 683              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 684              		.loc 1 187 55 is_stmt 0 view .LVU170
 685 02c8 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 686 02cc 075081E0 		add	r5, r1, r7	@ _120, n, w
 687 02d0 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 688              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 689              		.loc 1 209 32 view .LVU171
 690 02d4 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 691              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 692              		.loc 1 210 41 view .LVU172
 693 02d8 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 694              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 695              		.loc 1 209 40 view .LVU173
 696 02dc 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 697              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 698              		.loc 1 210 41 view .LVU174
 699 02e0 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 700              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 701              		.loc 1 186 55 view .LVU175
 702 02e4 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 703              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 704              		.loc 1 187 24 view .LVU176
 705 02e8 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 706              	.LVL36:
 707              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 708              		.loc 1 209 40 view .LVU177
 709 02ec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 710              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 711              		.loc 1 210 46 view .LVU178
 712 02f0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 713              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 714              		.loc 1 186 55 view .LVU179
 715 02f4 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 716              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 717              		.loc 1 185 55 view .LVU180
 718 02f8 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 719              	.LVL37:
 720              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 721              		.loc 1 191 25 view .LVU181
 722 02fc FF005AE3 		cmp	r10, #255	@ bb,
 723              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 724              		.loc 1 186 24 view .LVU182
 725 0300 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 726              	.LVL38:
 727              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 728              		.loc 1 209 40 view .LVU183
 729 0304 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 730              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 731              		.loc 1 210 46 view .LVU184
 732 0308 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 733              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 734              		.loc 1 185 24 view .LVU185
 735 030c 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 736              	.LVL39:
 737              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 738              		.loc 1 191 25 view .LVU186
 739 0310 FFA0A0A3 		movge	r10, #255	@ bb,
 740              	.LVL40:
 741              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 742              		.loc 1 190 25 view .LVU187
 743 0314 FF0054E3 		cmp	r4, #255	@ gg,
 744 0318 FF40A0A3 		movge	r4, #255	@ gg,
 745              	.LVL41:
 746              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 747              		.loc 1 189 25 view .LVU188
 748 031c FF005CE3 		cmp	ip, #255	@ rr,
 749              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 750              		.loc 1 194 56 view .LVU189
 751 0320 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 752              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 753              		.loc 1 209 24 view .LVU190
 754 0324 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 755              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 189 25 view .LVU191
 757 0328 FFC0A0A3 		movge	ip, #255	@ rr,
 758              	.LVL42:
 759              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 760              		.loc 1 194 44 view .LVU192
 761 032c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 762 0330 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 763              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 764              		.loc 1 194 56 view .LVU193
 765 0334 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 766              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 767              		.loc 1 194 51 view .LVU194
 768 0338 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 769              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 770              		.loc 1 194 62 view .LVU195
 771 033c 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 772 0340 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 773              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 774              		.loc 1 209 24 view .LVU196
 775 0344 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 776              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 777              		.loc 1 210 24 view .LVU197
 778 0348 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 779              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 780              		.loc 1 194 26 view .LVU198
 781 034c FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 782              	.LVL43:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 783              		.loc 1 208 21 is_stmt 1 view .LVU199
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 784              		.loc 1 209 21 view .LVU200
 210:armwave.c     ****                     xx = (nsub >> 8);
 785              		.loc 1 210 21 view .LVU201
 786              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 787              		.loc 1 211 32 is_stmt 0 view .LVU202
 788 0350 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 789              	.LVL44:
 790              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 791              		.loc 1 210 24 view .LVU203
 792 0354 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 793              	.LVL45:
 211:armwave.c     **** 
 794              		.loc 1 211 21 is_stmt 1 view .LVU204
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 795              		.loc 1 213 21 view .LVU205
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 796              		.loc 1 213 21 is_stmt 0 view .LVU206
 797 0358 090052E1 		cmp	r2, r9	@ yy, ye
 798 035c D3FFFF2A 		bcs	.L33		@,
 799              	.LVL46:
 800              	.L34:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 801              		.loc 1 214 25 is_stmt 1 discriminator 3 view .LVU207
 215:armwave.c     ****                     }
 802              		.loc 1 215 25 discriminator 3 view .LVU208
 803              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 804              		.loc 1 214 43 is_stmt 0 discriminator 3 view .LVU209
 805 0360 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 806              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 807              		.loc 1 215 43 discriminator 3 view .LVU210
 808 0364 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 809              	.LVL47:
 810              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 811              		.loc 1 213 42 discriminator 3 view .LVU211
 812 0368 012082E2 		add	r2, r2, #1	@ yy, yy,
 813              	.LVL48:
 814              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 815              		.loc 1 213 21 discriminator 3 view .LVU212
 816 036c 020059E1 		cmp	r9, r2	@ ye, yy
 817              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 818              		.loc 1 215 53 discriminator 3 view .LVU213
 819 0370 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 820              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 821              		.loc 1 213 21 discriminator 3 view .LVU214
 822 0374 F9FFFF1A 		bne	.L34		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 823              		.loc 1 213 21 discriminator 3 view .LVU215
 824 0378 CCFFFFEA 		b	.L33		@
 825              	.LVL49:
 826              	.L48:
 168:armwave.c     **** 
 827              		.loc 1 168 5 is_stmt 1 discriminator 1 view .LVU216
 828 037c 10309FE5 		ldr	r3, .L51+4	@,
 829 0380 A820A0E3 		mov	r2, #168	@,
 830 0384 0C109FE5 		ldr	r1, .L51+8	@,
 831 0388 0C009FE5 		ldr	r0, .L51+12	@,
 832              	.LVL50:
 168:armwave.c     **** 
 833              		.loc 1 168 5 is_stmt 0 discriminator 1 view .LVU217
 834 038c FEFFFFEB 		bl	__assert_fail		@
 835              	.LVL51:
 836              	.L52:
 168:armwave.c     **** 
 837              		.loc 1 168 5 discriminator 1 view .LVU218
 838              		.align	2
 839              	.L51:
 840 0390 00000000 		.word	g_armwave_state
 841 0394 00000000 		.word	.LANCHOR0
 842 0398 20000000 		.word	.LC2
 843 039c 2C000000 		.word	.LC3
 844              		.cfi_endproc
 845              	.LFE60:
 847              		.align	2
 848              		.global	armwave_setup_render
 849              		.syntax unified
 850              		.arm
 851              		.fpu vfp
 853              	armwave_setup_render:
 854              	.LVL52:
 855              	.LFB61:
 222:armwave.c     **** 
 223:armwave.c     **** /*
 224:armwave.c     ****  * Setup the renderer with passed parameters.
 225:armwave.c     ****  */
 226:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 227:armwave.c     **** {
 856              		.loc 1 227 1 is_stmt 1 view -0
 857              		.cfi_startproc
 858              		@ args = 12, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 228:armwave.c     ****     uint32_t length, xx;
 860              		.loc 1 228 5 view .LVU220
 229:armwave.c     ****     float points_per_pixel;
 861              		.loc 1 229 5 view .LVU221
 230:armwave.c     **** 
 231:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 862              		.loc 1 231 5 view .LVU222
 863              	@ armwave.c:227: {
 227:armwave.c     ****     uint32_t length, xx;
 864              		.loc 1 227 1 is_stmt 0 view .LVU223
 865 03a0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 866              		.cfi_def_cfa_offset 32
 867              		.cfi_offset 4, -32
 868              		.cfi_offset 5, -28
 869              		.cfi_offset 6, -24
 870              		.cfi_offset 7, -20
 871              		.cfi_offset 8, -16
 872              		.cfi_offset 9, -12
 873              		.cfi_offset 10, -8
 874              		.cfi_offset 14, -4
 875 03a4 028B2DED 		vpush.64	{d8}	@
 876              		.cfi_def_cfa_offset 40
 877              		.cfi_offset 80, -40
 878              		.cfi_offset 81, -36
 879 03a8 0050A0E1 		mov	r5, r0	@ start_point, start_point
 880 03ac 0190A0E1 		mov	r9, r1	@ end_point, end_point
 881 03b0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 882 03b4 10D04DE2 		sub	sp, sp, #16	@,,
 883              		.cfi_def_cfa_offset 56
 884              	@ armwave.c:227: {
 227:armwave.c     ****     uint32_t length, xx;
 885              		.loc 1 227 1 view .LVU224
 886 03b8 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 887 03bc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 888 03c0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 889              	@ armwave.c:231:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 890              		.loc 1 231 5 view .LVU225
 891 03c4 00308DE5 		str	r3, [sp]	@ wave_stride,
 892 03c8 F460CDE1 		strd	r6, [sp, #4]	@,,
 893 03cc 0230A0E1 		mov	r3, r2	@, waves_max
 894              	.LVL53:
 895              		.loc 1 231 5 view .LVU226
 896 03d0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 897 03d4 0120A0E1 		mov	r2, r1	@, end_point
 898              	.LVL54:
 899              		.loc 1 231 5 view .LVU227
 900 03d8 0010A0E1 		mov	r1, r0	@, start_point
 901              	.LVL55:
 902              		.loc 1 231 5 view .LVU228
 903 03dc 9C019FE5 		ldr	r0, .L67+8	@,
 904              	.LVL56:
 905              		.loc 1 231 5 view .LVU229
 906 03e0 FEFFFFEB 		bl	printf		@
 907              	.LVL57:
 232:armwave.c     **** 
 233:armwave.c     ****     // TODO these asserts should instead raise PyExc
 234:armwave.c     ****     assert(start_point < end_point);
 908              		.loc 1 234 5 is_stmt 1 view .LVU230
 909 03e4 090055E1 		cmp	r5, r9	@ start_point, end_point
 910 03e8 5300002A 		bcs	.L64		@,
 235:armwave.c     **** 
 236:armwave.c     ****     /*
 237:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 238:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 239:armwave.c     **** 
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 911              		.loc 1 256 5 view .LVU231
 912              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 913              		.loc 1 257 49 is_stmt 0 view .LVU232
 914 03ec 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 915 03f0 607A9FED 		vldr.32	s14, .L67	@ tmp168,
 916              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 917              		.loc 1 256 29 view .LVU233
 918 03f4 88419FE5 		ldr	r4, .L67+12	@ tmp224,
 919              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 920              		.loc 1 262 42 view .LVU234
 921 03f8 970601E0 		mul	r1, r7, r6	@ tmp176, target_height, target_width
 922              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 923              		.loc 1 257 49 view .LVU235
 924 03fc 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp167, target_height
 925              	@ armwave.c:264:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 264:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 926              		.loc 1 264 68 view .LVU236
 927 0400 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 928              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 929              		.loc 1 263 37 view .LVU237
 930 0404 010CA0E3 		mov	r0, #256	@ tmp178,
 931              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 <<
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 << AM_XCOORD_MULT_S
 932              		.loc 1 270 42 view .LVU238
 933 0408 0128A0E3 		mov	r2, #65536	@ tmp184,
 934              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 935              		.loc 1 262 26 view .LVU239
 936 040c 541084E5 		str	r1, [r4, #84]	@ tmp176, g_armwave_state.size
 937              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 938              		.loc 1 263 37 view .LVU240
 939 0410 400084E5 		str	r0, [r4, #64]	@ tmp178, g_armwave_state.bitdepth_height
 940              	@ armwave.c:272:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 271:armwave.c     **** 
 272:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 941              		.loc 1 272 5 view .LVU241
 942 0414 0310A0E1 		mov	r1, r3	@, _10
 943              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 944              		.loc 1 267 45 view .LVU242
 945 0418 055049E0 		sub	r5, r9, r5	@ _12, end_point, start_point
 946              	.LVL58:
 947              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 948              		.loc 1 257 49 view .LVU243
 949 041c 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp167, tmp168
 950              	@ armwave.c:272:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 951              		.loc 1 272 5 view .LVU244
 952 0420 60019FE5 		ldr	r0, .L67+16	@,
 953              	@ armwave.c:264:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 954              		.loc 1 264 34 view .LVU245
 955 0424 503084E5 		str	r3, [r4, #80]	@ _10, g_armwave_state.ch_buff_size
 956              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 957              		.loc 1 256 29 view .LVU246
 958 0428 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 959              		.loc 1 257 5 is_stmt 1 view .LVU247
 960              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 961              		.loc 1 259 33 is_stmt 0 view .LVU248
 962 042c 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 963              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 964              		.loc 1 260 31 view .LVU249
 965 0430 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 966              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 967              		.loc 1 261 27 view .LVU250
 968 0434 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 969              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 970              		.loc 1 266 35 view .LVU251
 971 0438 F865C4E1 		strd	r6, [r4, #88]	@, tmp224,
 972              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 973              		.loc 1 267 33 view .LVU252
 974 043c 4C5084E5 		str	r5, [r4, #76]	@ _12, g_armwave_state.wave_length
 975              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 <<
 270:armwave.c     **** 
 976              		.loc 1 270 42 view .LVU253
 977 0440 242084E5 		str	r2, [r4, #36]	@ tmp184, g_armwave_state.cmp_x_bitdepth_scale
 978              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 979              		.loc 1 258 30 view .LVU254
 980 0444 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp171, _3
 981              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 982              		.loc 1 257 33 view .LVU255
 983 0448 0A7AC4ED 		vstr.32	s15, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 984              		.loc 1 258 5 is_stmt 1 view .LVU256
 985              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 986              		.loc 1 258 30 is_stmt 0 view .LVU257
 987 044c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp171, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 988              		.loc 1 259 5 is_stmt 1 view .LVU258
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 989              		.loc 1 260 5 view .LVU259
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 990              		.loc 1 261 5 view .LVU260
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 991              		.loc 1 262 5 view .LVU261
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 992              		.loc 1 263 5 view .LVU262
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 993              		.loc 1 264 5 view .LVU263
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 994              		.loc 1 265 5 view .LVU264
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 995              		.loc 1 266 5 view .LVU265
 267:armwave.c     **** 
 996              		.loc 1 267 5 view .LVU266
 270:armwave.c     **** 
 997              		.loc 1 270 5 view .LVU267
 998              		.loc 1 272 5 view .LVU268
 999 0450 FEFFFFEB 		bl	printf		@
 1000              	.LVL59:
 273:armwave.c     **** 
 274:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 275:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 276:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 277:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1001              		.loc 1 277 5 view .LVU269
 1002              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer != NULL)
 278:armwave.c     **** 
 279:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1003              		.loc 1 279 23 is_stmt 0 view .LVU270
 1004 0454 040094E5 		ldr	r0, [r4, #4]	@ _14, g_armwave_state.ch1_buffer
 1005              	@ armwave.c:277:     g_armwave_state.slice_height = 64;  
 277:armwave.c     **** 
 1006              		.loc 1 277 34 view .LVU271
 1007 0458 4030A0E3 		mov	r3, #64	@ tmp187,
 1008              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer != NULL)
 1009              		.loc 1 279 7 view .LVU272
 1010 045c 000050E3 		cmp	r0, #0	@ _14,
 1011              	@ armwave.c:277:     g_armwave_state.slice_height = 64;  
 277:armwave.c     **** 
 1012              		.loc 1 277 34 view .LVU273
 1013 0460 443084E5 		str	r3, [r4, #68]	@ tmp187, g_armwave_state.slice_height
 1014              		.loc 1 279 5 is_stmt 1 view .LVU274
 1015              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer != NULL)
 1016              		.loc 1 279 7 is_stmt 0 view .LVU275
 1017 0464 0000000A 		beq	.L55		@,
 280:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1018              		.loc 1 280 9 is_stmt 1 view .LVU276
 1019 0468 FEFFFFEB 		bl	free		@
 1020              	.LVL60:
 1021              	.L55:
 281:armwave.c     **** 
 282:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1022              		.loc 1 282 5 view .LVU277
 1023              	@ armwave.c:282:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1024              		.loc 1 282 34 is_stmt 0 view .LVU278
 1025 046c 0110A0E3 		mov	r1, #1	@,
 1026 0470 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1027 0474 FEFFFFEB 		bl	calloc		@
 1028              	.LVL61:
 1029              	@ armwave.c:284:     assert(g_armwave_state.ch1_buffer != NULL);
 283:armwave.c     **** 
 284:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1030              		.loc 1 284 5 view .LVU279
 1031 0478 000050E3 		cmp	r0, #0	@ _17,
 1032              	@ armwave.c:282:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 282:armwave.c     **** 
 1033              		.loc 1 282 34 view .LVU280
 1034 047c 0070A0E1 		mov	r7, r0	@ _17,
 1035              	@ armwave.c:282:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 282:armwave.c     **** 
 1036              		.loc 1 282 32 view .LVU281
 1037 0480 040084E5 		str	r0, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 1038              		.loc 1 284 5 is_stmt 1 view .LVU282
 1039 0484 3600000A 		beq	.L65		@,
 285:armwave.c     **** 
 286:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 287:armwave.c     ****     length = end_point - start_point;
 1040              		.loc 1 287 5 view .LVU283
 1041              	.LVL62:
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1042              		.loc 1 288 5 view .LVU284
 1043              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 1044              		.loc 1 288 34 is_stmt 0 view .LVU285
 1045 0488 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1046              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 1047              		.loc 1 288 22 view .LVU286
 1048 048c 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 1049              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 290:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1050              		.loc 1 290 40 view .LVU287
 1051 0490 8500A0E1 		lsl	r0, r5, #1	@, _12,
 1052              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1053              		.loc 1 288 34 view .LVU288
 1054 0494 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp198, target_width
 1055              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1056              		.loc 1 288 22 view .LVU289
 1057 0498 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp197, _12
 1058              	@ armwave.c:289:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1059              		.loc 1 289 60 view .LVU290
 1060 049c 117AD4ED 		vldr.32	s15, [r4, #68]	@ int	@ tmp230, g_armwave_state.slice_height
 1061 04a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, tmp230
 1062              	@ armwave.c:288:     points_per_pixel = length / ((float)(target_width));
 288:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1063              		.loc 1 288 22 view .LVU291
 1064 04a4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp197, tmp198
 1065              	.LVL63:
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1066              		.loc 1 289 5 is_stmt 1 view .LVU292
 1067              	@ armwave.c:289:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1068              		.loc 1 289 60 is_stmt 0 view .LVU293
 1069 04a8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp203, tmp201, points_per_pixel
 1070              	@ armwave.c:289:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 289:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1071              		.loc 1 289 41 view .LVU294
 1072 04ac E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp204, tmp203
 1073 04b0 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp204, g_armwave_state.slice_record_height
 1074              		.loc 1 290 5 is_stmt 1 view .LVU295
 1075              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1076              		.loc 1 290 40 is_stmt 0 view .LVU296
 1077 04b4 FEFFFFEB 		bl	malloc		@
 1078              	.LVL64:
 1079              	@ armwave.c:292:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 291:armwave.c     **** 
 292:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1080              		.loc 1 292 5 view .LVU297
 1081 04b8 000050E3 		cmp	r0, #0	@ _25,
 1082              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290:armwave.c     **** 
 1083              		.loc 1 290 40 view .LVU298
 1084 04bc 0060A0E1 		mov	r6, r0	@ _25,
 1085              	@ armwave.c:290:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290:armwave.c     **** 
 1086              		.loc 1 290 38 view .LVU299
 1087 04c0 840084E5 		str	r0, [r4, #132]	@ _25, g_armwave_state.xcoord_to_xpixel
 1088              		.loc 1 292 5 is_stmt 1 view .LVU300
 1089 04c4 2100000A 		beq	.L66		@,
 1090              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 293:armwave.c     **** 
 294:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 295:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1091              		.loc 1 295 54 is_stmt 0 view .LVU301
 1092 04c8 2B7ADFED 		vldr.32	s15, .L67+4	@ tmp212,
 1093 04cc 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _25,
 1094              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1095              		.loc 1 294 12 view .LVU302
 1096 04d0 0030A0E3 		mov	r3, #0	@ xx,
 1097              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1098              		.loc 1 295 54 view .LVU303
 1099 04d4 887A87EE 		vdiv.f32	s14, s15, s16	@ _26, tmp212, points_per_pixel
 1100              	.L58:
 1101              	.LVL65:
 1102              		.loc 1 295 9 is_stmt 1 discriminator 3 view .LVU304
 1103              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1104              		.loc 1 295 74 is_stmt 0 discriminator 3 view .LVU305
 1105 04d8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1106              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1107              		.loc 1 294 32 discriminator 3 view .LVU306
 1108 04dc 013083E2 		add	r3, r3, #1	@ xx, xx,
 1109              	.LVL66:
 1110              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1111              		.loc 1 294 5 discriminator 3 view .LVU307
 1112 04e0 030055E1 		cmp	r5, r3	@ _12, xx
 1113              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1114              		.loc 1 295 74 discriminator 3 view .LVU308
 1115 04e4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp213, xx
 1116 04e8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp214, tmp213, _26
 1117              	@ armwave.c:295:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1118              		.loc 1 295 46 discriminator 3 view .LVU309
 1119 04ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp215, tmp214
 1120 04f0 902A17EE 		vmov	r2, s15	@ int	@ tmp215, tmp215
 1121 04f4 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp215, MEM[base: _95, offset: 0B]
 1122              	@ armwave.c:294:     for(xx = 0; xx < length; xx++) {
 294:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1123              		.loc 1 294 5 discriminator 3 view .LVU310
 1124 04f8 F6FFFF1A 		bne	.L58		@,
 296:armwave.c     **** 
 297:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 298:armwave.c     ****     }
 299:armwave.c     **** 
 300:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1125              		.loc 1 300 5 is_stmt 1 view .LVU311
 1126              	@ armwave.c:300:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1127              		.loc 1 300 34 is_stmt 0 view .LVU312
 1128 04fc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1129 0500 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1130 0504 FEFFFFEB 		bl	malloc		@
 1131              	.LVL67:
 1132              	@ armwave.c:302:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 301:armwave.c     **** 
 302:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1133              		.loc 1 302 5 view .LVU313
 1134 0508 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1135 050c 0620A0E1 		mov	r2, r6	@, _25
 1136 0510 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1137 0514 0710A0E1 		mov	r1, r7	@, _17
 1138              	@ armwave.c:300:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 300:armwave.c     **** 
 1139              		.loc 1 300 34 view .LVU314
 1140 0518 00C0A0E1 		mov	ip, r0	@ tmp219,
 1141              	@ armwave.c:302:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1142              		.loc 1 302 5 view .LVU315
 1143 051c 0030A0E1 		mov	r3, r0	@, tmp219
 1144 0520 64009FE5 		ldr	r0, .L67+20	@,
 1145              	@ armwave.c:300:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 300:armwave.c     **** 
 1146              		.loc 1 300 32 view .LVU316
 1147 0524 68C084E5 		str	ip, [r4, #104]	@ tmp219, g_armwave_state.out_pixbuf
 1148              		.loc 1 302 5 is_stmt 1 view .LVU317
 1149 0528 FEFFFFEB 		bl	printf		@
 1150              	.LVL68:
 303:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 304:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 305:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 306:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 307:armwave.c     **** 
 308:armwave.c     ****     malloc_stats();
 1151              		.loc 1 308 5 view .LVU318
 1152              	@ armwave.c:309: }
 309:armwave.c     **** }
 1153              		.loc 1 309 1 is_stmt 0 view .LVU319
 1154 052c 10D08DE2 		add	sp, sp, #16	@,,
 1155              		.cfi_remember_state
 1156              		.cfi_def_cfa_offset 40
 1157              		@ sp needed	@
 1158 0530 028BBDEC 		vldm	sp!, {d8}	@
 1159              		.cfi_restore 80
 1160              		.cfi_restore 81
 1161              		.cfi_def_cfa_offset 32
 1162              	.LVL69:
 1163              		.loc 1 309 1 view .LVU320
 1164 0534 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1165              		.cfi_restore 14
 1166              		.cfi_restore 10
 1167              		.cfi_restore 9
 1168              		.cfi_restore 8
 1169              		.cfi_restore 7
 1170              		.cfi_restore 6
 1171              		.cfi_restore 5
 1172              		.cfi_restore 4
 1173              		.cfi_def_cfa_offset 0
 1174              	.LVL70:
 1175              	@ armwave.c:308:     malloc_stats();
 308:armwave.c     **** }
 1176              		.loc 1 308 5 view .LVU321
 1177 0538 FEFFFFEA 		b	malloc_stats		@
 1178              	.LVL71:
 1179              	.L64:
 1180              		.cfi_restore_state
 234:armwave.c     **** 
 1181              		.loc 1 234 5 is_stmt 1 discriminator 1 view .LVU322
 1182 053c 4C309FE5 		ldr	r3, .L67+24	@,
 1183 0540 EA20A0E3 		mov	r2, #234	@,
 1184 0544 48109FE5 		ldr	r1, .L67+28	@,
 1185 0548 48009FE5 		ldr	r0, .L67+32	@,
 1186 054c FEFFFFEB 		bl	__assert_fail		@
 1187              	.LVL72:
 1188              	.L66:
 292:armwave.c     **** 
 1189              		.loc 1 292 5 discriminator 1 view .LVU323
 1190 0550 38309FE5 		ldr	r3, .L67+24	@,
 1191 0554 492FA0E3 		mov	r2, #292	@,
 1192 0558 34109FE5 		ldr	r1, .L67+28	@,
 1193 055c 38009FE5 		ldr	r0, .L67+36	@,
 1194 0560 FEFFFFEB 		bl	__assert_fail		@
 1195              	.LVL73:
 1196              	.L65:
 284:armwave.c     **** 
 1197              		.loc 1 284 5 discriminator 1 view .LVU324
 1198 0564 24309FE5 		ldr	r3, .L67+24	@,
 1199 0568 472FA0E3 		mov	r2, #284	@,
 1200 056c 20109FE5 		ldr	r1, .L67+28	@,
 1201 0570 28009FE5 		ldr	r0, .L67+40	@,
 1202 0574 FEFFFFEB 		bl	__assert_fail		@
 1203              	.LVL74:
 1204              	.L68:
 1205              		.align	2
 1206              	.L67:
 1207 0578 00007F43 		.word	1132396544
 1208 057c 0000803F 		.word	1065353216
 1209 0580 40000000 		.word	.LC4
 1210 0584 00000000 		.word	g_armwave_state
 1211 0588 84000000 		.word	.LC6
 1212 058c E8000000 		.word	.LC9
 1213 0590 1C000000 		.word	.LANCHOR0+28
 1214 0594 20000000 		.word	.LC2
 1215 0598 6C000000 		.word	.LC5
 1216 059c BC000000 		.word	.LC8
 1217 05a0 98000000 		.word	.LC7
 1218              		.cfi_endproc
 1219              	.LFE61:
 1221              		.align	2
 1222              		.global	armwave_set_wave_pointer
 1223              		.syntax unified
 1224              		.arm
 1225              		.fpu vfp
 1227              	armwave_set_wave_pointer:
 1228              	.LVL75:
 1229              	.LFB62:
 310:armwave.c     **** 
 311:armwave.c     **** /*
 312:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 313:armwave.c     ****  * in the future.
 314:armwave.c     ****  */
 315:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 316:armwave.c     **** {
 1230              		.loc 1 316 1 view -0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 317:armwave.c     ****     assert(wave_buffer != NULL);
 1234              		.loc 1 317 5 view .LVU326
 1235 05a4 000050E3 		cmp	r0, #0	@ wave_buffer
 1236              		.loc 1 317 5 is_stmt 0 view .LVU327
 1237 05a8 0200000A 		beq	.L74		@,
 318:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1238              		.loc 1 318 5 is_stmt 1 view .LVU328
 1239              	@ armwave.c:318:     g_armwave_state.wave_buffer = wave_buffer;
 1240              		.loc 1 318 33 is_stmt 0 view .LVU329
 1241 05ac 1C309FE5 		ldr	r3, .L75	@ tmp116,
 1242 05b0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1243 05b4 1EFF2FE1 		bx	lr	@
 1244              	.L74:
 317:armwave.c     ****     assert(wave_buffer != NULL);
 1245              		.loc 1 317 5 is_stmt 1 discriminator 1 view .LVU330
 1246              	@ armwave.c:316: {
 316:armwave.c     ****     assert(wave_buffer != NULL);
 1247              		.loc 1 316 1 is_stmt 0 discriminator 1 view .LVU331
 1248 05b8 10402DE9 		push	{r4, lr}	@
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 4, -8
 1251              		.cfi_offset 14, -4
 1252              	@ armwave.c:317:     assert(wave_buffer != NULL);
 317:armwave.c     ****     assert(wave_buffer != NULL);
 1253              		.loc 1 317 5 discriminator 1 view .LVU332
 1254 05bc 10309FE5 		ldr	r3, .L75+4	@,
 1255 05c0 10209FE5 		ldr	r2, .L75+8	@,
 1256 05c4 10109FE5 		ldr	r1, .L75+12	@,
 1257 05c8 10009FE5 		ldr	r0, .L75+16	@,
 1258              	.LVL76:
 317:armwave.c     ****     assert(wave_buffer != NULL);
 1259              		.loc 1 317 5 discriminator 1 view .LVU333
 1260 05cc FEFFFFEB 		bl	__assert_fail		@
 1261              	.LVL77:
 1262              	.L76:
 1263              		.align	2
 1264              	.L75:
 1265 05d0 00000000 		.word	g_armwave_state
 1266 05d4 34000000 		.word	.LANCHOR0+52
 1267 05d8 3D010000 		.word	317
 1268 05dc 20000000 		.word	.LC2
 1269 05e0 0C010000 		.word	.LC10
 1270              		.cfi_endproc
 1271              	.LFE62:
 1273              		.align	2
 1274              		.global	armwave_set_wave_pointer_as_testbuf
 1275              		.syntax unified
 1276              		.arm
 1277              		.fpu vfp
 1279              	armwave_set_wave_pointer_as_testbuf:
 1280              	.LVL78:
 1281              	.LFB63:
 319:armwave.c     **** }
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 323:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 326:armwave.c     **** {
 1282              		.loc 1 326 1 is_stmt 1 view -0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 1286              		@ link register save eliminated.
 327:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1287              		.loc 1 327 5 view .LVU335
 1288              	@ armwave.c:327:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1289              		.loc 1 327 29 is_stmt 0 view .LVU336
 1290 05e4 24309FE5 		ldr	r3, .L80	@ tmp117,
 1291              	@ armwave.c:327:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1292              		.loc 1 327 7 view .LVU337
 1293 05e8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1294 05ec 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1295 05f0 0400003A 		bcc	.L79		@,
 328:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 329:armwave.c     ****         return;
 330:armwave.c     ****     }
 331:armwave.c     **** 
 332:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1296              		.loc 1 332 5 is_stmt 1 view .LVU338
 1297              	@ armwave.c:332:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1298              		.loc 1 332 111 is_stmt 0 view .LVU339
 1299 05f4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1300              	@ armwave.c:332:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1301              		.loc 1 332 68 view .LVU340
 1302 05f8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1303 05fc 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1304              	.LVL79:
 1305              	@ armwave.c:332:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1306              		.loc 1 332 33 view .LVU341
 1307 0600 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1308              	@ armwave.c:333: }
 333:armwave.c     **** }
 1309              		.loc 1 333 1 view .LVU342
 1310 0604 1EFF2FE1 		bx	lr	@
 1311              	.LVL80:
 1312              	.L79:
 328:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1313              		.loc 1 328 9 is_stmt 1 view .LVU343
 1314 0608 04009FE5 		ldr	r0, .L80+4	@,
 1315              	.LVL81:
 328:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1316              		.loc 1 328 9 is_stmt 0 view .LVU344
 1317 060c FEFFFFEA 		b	puts		@
 1318              	.LVL82:
 1319              	.L81:
 1320              		.align	2
 1321              	.L80:
 1322 0610 00000000 		.word	g_armwave_state
 1323 0614 20010000 		.word	.LC11
 1324              		.cfi_endproc
 1325              	.LFE63:
 1327              		.align	2
 1328              		.global	armwave_set_wave_pointer_u32
 1329              		.syntax unified
 1330              		.arm
 1331              		.fpu vfp
 1333              	armwave_set_wave_pointer_u32:
 1334              	.LVL83:
 1335              	.LFB64:
 334:armwave.c     **** 
 335:armwave.c     **** /*
 336:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 337:armwave.c     ****  * disjointed buffers in the future.
 338:armwave.c     ****  */
 339:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 340:armwave.c     **** {
 1336              		.loc 1 340 1 is_stmt 1 view -0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 341:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1340              		.loc 1 341 5 view .LVU346
 1341 0618 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1342              		.loc 1 341 5 is_stmt 0 view .LVU347
 1343 061c 0200000A 		beq	.L87		@,
 342:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1344              		.loc 1 342 5 is_stmt 1 view .LVU348
 1345              	@ armwave.c:342:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1346              		.loc 1 342 33 is_stmt 0 view .LVU349
 1347 0620 1C309FE5 		ldr	r3, .L88	@ tmp117,
 1348 0624 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1349 0628 1EFF2FE1 		bx	lr	@
 1350              	.L87:
 341:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1351              		.loc 1 341 5 is_stmt 1 discriminator 1 view .LVU350
 1352              	@ armwave.c:340: {
 340:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1353              		.loc 1 340 1 is_stmt 0 discriminator 1 view .LVU351
 1354 062c 10402DE9 		push	{r4, lr}	@
 1355              		.cfi_def_cfa_offset 8
 1356              		.cfi_offset 4, -8
 1357              		.cfi_offset 14, -4
 1358              	@ armwave.c:341:     assert(wave_buffer_ptr != 0);
 341:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1359              		.loc 1 341 5 discriminator 1 view .LVU352
 1360 0630 10309FE5 		ldr	r3, .L88+4	@,
 1361 0634 10209FE5 		ldr	r2, .L88+8	@,
 1362 0638 10109FE5 		ldr	r1, .L88+12	@,
 1363 063c 10009FE5 		ldr	r0, .L88+16	@,
 1364              	.LVL84:
 341:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1365              		.loc 1 341 5 discriminator 1 view .LVU353
 1366 0640 FEFFFFEB 		bl	__assert_fail		@
 1367              	.LVL85:
 1368              	.L89:
 1369              		.align	2
 1370              	.L88:
 1371 0644 00000000 		.word	g_armwave_state
 1372 0648 50000000 		.word	.LANCHOR0+80
 1373 064c 55010000 		.word	341
 1374 0650 20000000 		.word	.LC2
 1375 0654 5C010000 		.word	.LC12
 1376              		.cfi_endproc
 1377              	.LFE64:
 1379              		.align	2
 1380              		.global	armwave_clear_buffer
 1381              		.syntax unified
 1382              		.arm
 1383              		.fpu vfp
 1385              	armwave_clear_buffer:
 1386              	.LVL86:
 1387              	.LFB65:
 343:armwave.c     **** }
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 347:armwave.c     ****  */
 348:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 349:armwave.c     **** {
 1388              		.loc 1 349 1 is_stmt 1 view -0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392              		@ link register save eliminated.
 350:armwave.c     ****     // Flags ignored, only one buffer cleared
 351:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1393              		.loc 1 351 5 view .LVU355
 1394              	@ armwave.c:351:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1395              		.loc 1 351 58 is_stmt 0 view .LVU356
 1396 0658 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1397              	@ armwave.c:351:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1398              		.loc 1 351 5 view .LVU357
 1399 065c 0010A0E3 		mov	r1, #0	@,
 1400 0660 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1401 0664 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1402              	.LVL87:
 1403              		.loc 1 351 5 view .LVU358
 1404 0668 FEFFFFEA 		b	memset		@
 1405              	.LVL88:
 1406              	.L92:
 1407              		.align	2
 1408              	.L91:
 1409 066c 00000000 		.word	g_armwave_state
 1410              		.cfi_endproc
 1411              	.LFE65:
 1413              		.align	2
 1414              		.global	armwave_set_channel_colour
 1415              		.syntax unified
 1416              		.arm
 1417              		.fpu vfp
 1419              	armwave_set_channel_colour:
 1420              	.LVL89:
 1421              	.LFB66:
 352:armwave.c     **** }
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 356:armwave.c     ****  */
 357:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 358:armwave.c     **** {
 1422              		.loc 1 358 1 is_stmt 1 view -0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
 359:armwave.c     ****     // Only 1ch supported for now
 360:armwave.c     ****     switch(ch) {
 1427              		.loc 1 360 5 view .LVU360
 1428 0670 010050E3 		cmp	r0, #1	@ ch,
 361:armwave.c     ****         case 1:
 362:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1429              		.loc 1 362 13 view .LVU361
 1430              	@ armwave.c:362:             g_armwave_state.ch1_color.r = r;
 1431              		.loc 1 362 41 is_stmt 0 view .LVU362
 1432 0674 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1433              	.LVL90:
 1434              		.loc 1 362 41 view .LVU363
 1435 0678 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 363:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1436              		.loc 1 363 13 is_stmt 1 view .LVU364
 1437              	@ armwave.c:363:             g_armwave_state.ch1_color.g = g;
 1438              		.loc 1 363 41 is_stmt 0 view .LVU365
 1439 067c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 364:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1440              		.loc 1 364 13 is_stmt 1 view .LVU366
 1441              	@ armwave.c:364:             g_armwave_state.ch1_color.b = b;
 1442              		.loc 1 364 41 is_stmt 0 view .LVU367
 1443 0680 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 365:armwave.c     ****             break;
 1444              		.loc 1 365 13 is_stmt 1 view .LVU368
 1445              	@ armwave.c:367: }
 366:armwave.c     ****     }
 367:armwave.c     **** }
 1446              		.loc 1 367 1 is_stmt 0 view .LVU369
 1447 0684 1EFF2FE1 		bx	lr	@
 1448              	.L96:
 1449              		.align	2
 1450              	.L95:
 1451 0688 00000000 		.word	g_armwave_state
 1452              		.cfi_endproc
 1453              	.LFE66:
 1455              		.align	2
 1456              		.global	armwave_dump_ppm_debug
 1457              		.syntax unified
 1458              		.arm
 1459              		.fpu vfp
 1461              	armwave_dump_ppm_debug:
 1462              	.LVL91:
 1463              	.LFB67:
 368:armwave.c     **** 
 369:armwave.c     **** /*
 370:armwave.c     ****  * Dump a ppm of a buffer to a file.
 371:armwave.c     ****  */
 372:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 373:armwave.c     **** {
 1464              		.loc 1 373 1 is_stmt 1 view -0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 374:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1468              		.loc 1 374 5 view .LVU371
 1469              	@ armwave.c:373: {
 373:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1470              		.loc 1 373 1 is_stmt 0 view .LVU372
 1471 068c 0130A0E1 		mov	r3, r1	@ fn, fn
 1472 0690 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1473              		.cfi_def_cfa_offset 28
 1474              		.cfi_offset 4, -28
 1475              		.cfi_offset 5, -24
 1476              		.cfi_offset 6, -20
 1477              		.cfi_offset 7, -16
 1478              		.cfi_offset 8, -12
 1479              		.cfi_offset 9, -8
 1480              		.cfi_offset 14, -4
 1481 0694 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1482 0698 0CD04DE2 		sub	sp, sp, #12	@,,
 1483              		.cfi_def_cfa_offset 40
 1484              	@ armwave.c:374:     FILE *fp = fopen(fn, "wb");
 1485              		.loc 1 374 16 view .LVU373
 1486 069c C4109FE5 		ldr	r1, .L105	@,
 1487              	.LVL92:
 1488              		.loc 1 374 16 view .LVU374
 1489 06a0 0300A0E1 		mov	r0, r3	@, fn
 1490              	.LVL93:
 1491              		.loc 1 374 16 view .LVU375
 1492 06a4 FEFFFFEB 		bl	fopen64		@
 1493              	.LVL94:
 1494              	@ armwave.c:381:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 375:armwave.c     ****     uint32_t data;
 376:armwave.c     ****     int xx, yy;
 377:armwave.c     **** 
 378:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 379:armwave.c     **** 
 380:armwave.c     ****     fputs("P3\n", fp);
 381:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1495              		.loc 1 381 5 view .LVU376
 1496 06a8 BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1497              	@ armwave.c:380:     fputs("P3\n", fp);
 380:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1498              		.loc 1 380 5 view .LVU377
 1499 06ac 0320A0E3 		mov	r2, #3	@,
 1500 06b0 0110A0E3 		mov	r1, #1	@,
 1501              	@ armwave.c:374:     FILE *fp = fopen(fn, "wb");
 374:armwave.c     ****     uint32_t data;
 1502              		.loc 1 374 16 view .LVU378
 1503 06b4 0070A0E1 		mov	r7, r0	@ fp,
 1504              	.LVL95:
 375:armwave.c     ****     uint32_t data;
 1505              		.loc 1 375 5 is_stmt 1 view .LVU379
 376:armwave.c     **** 
 1506              		.loc 1 376 5 view .LVU380
 380:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1507              		.loc 1 380 5 view .LVU381
 1508 06b8 0030A0E1 		mov	r3, r0	@, fp
 1509 06bc AC009FE5 		ldr	r0, .L105+8	@,
 1510              	.LVL96:
 380:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1511              		.loc 1 380 5 is_stmt 0 view .LVU382
 1512 06c0 FEFFFFEB 		bl	fwrite		@
 1513              	.LVL97:
 1514              		.loc 1 381 5 is_stmt 1 view .LVU383
 1515 06c4 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1516 06c8 A4109FE5 		ldr	r1, .L105+12	@,
 1517 06cc 0700A0E1 		mov	r0, r7	@, fp
 1518 06d0 FEFFFFEB 		bl	fprintf		@
 1519              	.LVL98:
 382:armwave.c     ****     fputs("255\n", fp);
 1520              		.loc 1 382 5 view .LVU384
 1521 06d4 0420A0E3 		mov	r2, #4	@,
 1522 06d8 0730A0E1 		mov	r3, r7	@, fp
 1523 06dc 0110A0E3 		mov	r1, #1	@,
 1524 06e0 90009FE5 		ldr	r0, .L105+16	@,
 1525 06e4 FEFFFFEB 		bl	fwrite		@
 1526              	.LVL99:
 383:armwave.c     **** 
 384:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1527              		.loc 1 384 5 view .LVU385
 1528              	@ armwave.c:384:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1529              		.loc 1 384 37 is_stmt 0 view .LVU386
 1530 06e8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1531              	@ armwave.c:384:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1532              		.loc 1 384 5 view .LVU387
 1533 06ec 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1534 06f0 180000DA 		ble	.L98		@,
 1535 06f4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1536              	@ armwave.c:389:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 387:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 388:armwave.c     **** 
 389:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1537              		.loc 1 389 13 view .LVU388
 1538 06f8 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1539              	@ armwave.c:384:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1540              		.loc 1 384 12 view .LVU389
 1541 06fc 0050A0E3 		mov	r5, #0	@ yy,
 1542              	.LVL100:
 1543              	.L99:
 1544              	@ armwave.c:385:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1545              		.loc 1 385 9 view .LVU390
 1546 0700 000053E3 		cmp	r3, #0	@ _13,
 1547              	@ armwave.c:385:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1548              		.loc 1 385 16 view .LVU391
 1549 0704 0040A0C3 		movgt	r4, #0	@ xx,
 1550              	@ armwave.c:385:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1551              		.loc 1 385 9 view .LVU392
 1552 0708 0F0000DA 		ble	.L101		@,
 1553              	.LVL101:
 1554              	.L100:
 386:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1555              		.loc 1 386 13 is_stmt 1 discriminator 3 view .LVU393
 1556              	@ armwave.c:386:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 386:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1557              		.loc 1 386 29 is_stmt 0 discriminator 3 view .LVU394
 1558 070c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1559              	@ armwave.c:389:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1560              		.loc 1 389 13 discriminator 3 view .LVU395
 1561 0710 0910A0E1 		mov	r1, r9	@, tmp152
 1562 0714 0700A0E1 		mov	r0, r7	@, fp
 1563              	@ armwave.c:386:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 386:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1564              		.loc 1 386 18 discriminator 3 view .LVU396
 1565 0718 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1566              	.LVL102:
 1567              		.loc 1 389 13 is_stmt 1 discriminator 3 view .LVU397
 1568              	@ armwave.c:385:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1569              		.loc 1 385 58 is_stmt 0 discriminator 3 view .LVU398
 1570 071c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1571              	.LVL103:
 1572              	@ armwave.c:389:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1573              		.loc 1 389 81 discriminator 3 view .LVU399
 1574 0720 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1575              	@ armwave.c:389:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1576              		.loc 1 389 61 discriminator 3 view .LVU400
 1577 0724 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1578              	@ armwave.c:389:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1579              		.loc 1 389 13 discriminator 3 view .LVU401
 1580 0728 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1581 072c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1582 0730 00C08DE5 		str	ip, [sp]	@ tmp147,
 1583 0734 7220EFE6 		uxtb	r2, r2	@, data
 1584              	.LVL104:
 1585              		.loc 1 389 13 discriminator 3 view .LVU402
 1586 0738 FEFFFFEB 		bl	fprintf		@
 1587              	.LVL105:
 1588              	@ armwave.c:385:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1589              		.loc 1 385 41 discriminator 3 view .LVU403
 1590 073c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1591              	@ armwave.c:385:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1592              		.loc 1 385 9 discriminator 3 view .LVU404
 1593 0740 040053E1 		cmp	r3, r4	@ _13, xx
 1594 0744 F0FFFFCA 		bgt	.L100		@,
 1595 0748 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1596              	.LVL106:
 1597              	.L101:
 1598              	@ armwave.c:384:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1599              		.loc 1 384 55 discriminator 2 view .LVU405
 1600 074c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1601              	.LVL107:
 1602              	@ armwave.c:384:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 384:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1603              		.loc 1 384 5 discriminator 2 view .LVU406
 1604 0750 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1605 0754 E9FFFFBA 		blt	.L99		@,
 1606              	.LVL108:
 1607              	.L98:
 390:armwave.c     ****         }
 391:armwave.c     ****     }
 392:armwave.c     **** 
 393:armwave.c     ****     fclose(fp);
 1608              		.loc 1 393 5 is_stmt 1 view .LVU407
 1609 0758 0700A0E1 		mov	r0, r7	@, fp
 1610              	@ armwave.c:394: }
 394:armwave.c     **** }
 1611              		.loc 1 394 1 is_stmt 0 view .LVU408
 1612 075c 0CD08DE2 		add	sp, sp, #12	@,,
 1613              		.cfi_def_cfa_offset 28
 1614              		@ sp needed	@
 1615 0760 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1616              		.cfi_restore 14
 1617              		.cfi_restore 9
 1618              		.cfi_restore 8
 1619              		.cfi_restore 7
 1620              		.cfi_restore 6
 1621              		.cfi_restore 5
 1622              		.cfi_restore 4
 1623              		.cfi_def_cfa_offset 0
 1624              	.LVL109:
 1625              	@ armwave.c:393:     fclose(fp);
 393:armwave.c     **** }
 1626              		.loc 1 393 5 view .LVU409
 1627 0764 FEFFFFEA 		b	fclose		@
 1628              	.LVL110:
 1629              	.L106:
 393:armwave.c     **** }
 1630              		.loc 1 393 5 view .LVU410
 1631              		.align	2
 1632              	.L105:
 1633 0768 74010000 		.word	.LC13
 1634 076c 00000000 		.word	g_armwave_state
 1635 0770 78010000 		.word	.LC14
 1636 0774 7C010000 		.word	.LC15
 1637 0778 84010000 		.word	.LC16
 1638 077c 8C010000 		.word	.LC17
 1639              		.cfi_endproc
 1640              	.LFE67:
 1642              		.align	2
 1643              		.global	armwave_test_init
 1644              		.syntax unified
 1645              		.arm
 1646              		.fpu vfp
 1648              	armwave_test_init:
 1649              	.LVL111:
 1650              	.LFB68:
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Initialise some test functionry.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 400:armwave.c     **** {
 1651              		.loc 1 400 1 is_stmt 1 view -0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 0
 1654              		@ frame_needed = 0, uses_anonymous_args = 0
 401:armwave.c     ****     test_create_gamma();
 1655              		.loc 1 401 5 view .LVU412
 1656              	.LBB12:
 1657              	.LBI12:
  34:armwave.c     **** {
 1658              		.loc 1 34 6 view .LVU413
  34:armwave.c     **** {
 1659              		.loc 1 34 6 is_stmt 0 view .LVU414
 1660              	.LBE12:
 1661              	@ armwave.c:400: {
 400:armwave.c     ****     test_create_gamma();
 1662              		.loc 1 400 1 view .LVU415
 1663 0780 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1664              		.cfi_def_cfa_offset 32
 1665              		.cfi_offset 4, -32
 1666              		.cfi_offset 5, -28
 1667              		.cfi_offset 6, -24
 1668              		.cfi_offset 7, -20
 1669              		.cfi_offset 8, -16
 1670              		.cfi_offset 9, -12
 1671              		.cfi_offset 10, -8
 1672              		.cfi_offset 14, -4
 1673 0784 068B2DED 		vpush.64	{d8, d9, d10}	@
 1674              		.cfi_def_cfa_offset 56
 1675              		.cfi_offset 80, -56
 1676              		.cfi_offset 81, -52
 1677              		.cfi_offset 82, -48
 1678              		.cfi_offset 83, -44
 1679              		.cfi_offset 84, -40
 1680              		.cfi_offset 85, -36
 1681 0788 BC409FE5 		ldr	r4, .L111+20	@ ivtmp.79,
 1682              	.LBB15:
 1683              	.LBB13:
 1684              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1685              		.loc 1 40 32 view .LVU416
 1686 078c 2DAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1687              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1688              		.loc 1 40 26 view .LVU417
 1689 0790 289B9FED 		vldr.64	d9, .L111	@ tmp151,
 1690              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1691              		.loc 1 40 49 view .LVU418
 1692 0794 298B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1693 0798 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1694              	.LBE13:
 1695              	.LBE15:
 1696              	@ armwave.c:400: {
 400:armwave.c     ****     test_create_gamma();
 1697              		.loc 1 400 1 view .LVU419
 1698 079c 10D04DE2 		sub	sp, sp, #16	@,,
 1699              		.cfi_def_cfa_offset 72
 1700              	@ armwave.c:400: {
 400:armwave.c     ****     test_create_gamma();
 1701              		.loc 1 400 1 view .LVU420
 1702 07a0 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1703 07a4 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1704 07a8 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1705 07ac 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1706 07b0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1707 07b4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1708              	.LVL112:
 1709              	.L108:
 1710              	.LBB16:
 1711              	.LBB14:
  40:armwave.c     ****     }
 1712              		.loc 1 40 9 is_stmt 1 view .LVU421
 1713              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1714              		.loc 1 40 32 is_stmt 0 view .LVU422
 1715 07b8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1716              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1717              		.loc 1 40 26 view .LVU423
 1718 07bc 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1719              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1720              		.loc 1 40 32 view .LVU424
 1721 07c0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1722 07c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1723 07c8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1724              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1725              		.loc 1 40 26 view .LVU425
 1726 07cc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1727 07d0 FEFFFFEB 		bl	pow		@
 1728              	.LVL113:
 1729              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1730              		.loc 1 40 49 view .LVU426
 1731 07d4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1732              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1733              		.loc 1 40 24 view .LVU427
 1734 07d8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1735 07dc 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1736 07e0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1737              	.LVL114:
 1738              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1739              		.loc 1 39 5 view .LVU428
 1740 07e4 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1741 07e8 F2FFFF1A 		bne	.L108		@,
 1742              	.LVL115:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1743              		.loc 1 39 5 view .LVU429
 1744              	.LBE14:
 1745              	.LBE16:
 402:armwave.c     **** 
 403:armwave.c     ****     // make ch1 yellowish by default
 404:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1746              		.loc 1 404 5 is_stmt 1 view .LVU430
 1747              	.LBB17:
 1748              	.LBI17:
 357:armwave.c     **** {
 1749              		.loc 1 357 6 view .LVU431
 1750              	.LBB18:
 360:armwave.c     ****         case 1:
 1751              		.loc 1 360 5 view .LVU432
 362:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1752              		.loc 1 362 13 view .LVU433
 363:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1753              		.loc 1 363 13 view .LVU434
 1754              	@ armwave.c:362:             g_armwave_state.ch1_color.r = r;
 362:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1755              		.loc 1 362 41 is_stmt 0 view .LVU435
 1756 07ec 5CC09FE5 		ldr	ip, .L111+24	@ tmp142,
 1757 07f0 5C409FE5 		ldr	r4, .L111+28	@ tmp143,
 1758              	.LBE18:
 1759              	.LBE17:
 1760              	@ armwave.c:406:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 405:armwave.c     **** 
 406:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1761              		.loc 1 406 5 view .LVU436
 1762 07f4 0000A0E3 		mov	r0, #0	@ tmp147,
 1763              	.LBB22:
 1764              	.LBB19:
 1765              	@ armwave.c:364:             g_armwave_state.ch1_color.b = b;
 364:armwave.c     ****             break;
 1766              		.loc 1 364 41 view .LVU437
 1767 07f8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1768              	.LBE19:
 1769              	.LBE22:
 1770              	@ armwave.c:406:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1771              		.loc 1 406 5 view .LVU438
 1772 07fc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1773 0800 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1774 0804 00808DE5 		str	r8, [sp]	@ render_width,
 1775 0808 0610A0E1 		mov	r1, r6	@, tmp3
 1776 080c 0720A0E1 		mov	r2, r7	@, nwaves
 1777              	.LBB23:
 1778              	.LBB20:
 1779              	@ armwave.c:362:             g_armwave_state.ch1_color.r = r;
 362:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1780              		.loc 1 362 41 view .LVU439
 1781 0810 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 364:armwave.c     ****             break;
 1782              		.loc 1 364 13 is_stmt 1 view .LVU440
 1783              	.LBE20:
 1784              	.LBE23:
 1785              	@ armwave.c:406:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1786              		.loc 1 406 5 is_stmt 0 view .LVU441
 1787 0814 0630A0E1 		mov	r3, r6	@, wave_size
 1788              	.LBB24:
 1789              	.LBB21:
 1790              	@ armwave.c:364:             g_armwave_state.ch1_color.b = b;
 364:armwave.c     ****             break;
 1791              		.loc 1 364 41 view .LVU442
 1792 0818 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 365:armwave.c     ****     }
 1793              		.loc 1 365 13 is_stmt 1 view .LVU443
 1794              	.LVL116:
 365:armwave.c     ****     }
 1795              		.loc 1 365 13 is_stmt 0 view .LVU444
 1796              	.LBE21:
 1797              	.LBE24:
 1798              		.loc 1 406 5 is_stmt 1 view .LVU445
 1799 081c FEFFFFEB 		bl	armwave_setup_render		@
 1800              	.LVL117:
 407:armwave.c     **** 
 408:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1801              		.loc 1 408 5 view .LVU446
 1802 0820 30109FE5 		ldr	r1, .L111+32	@,
 1803 0824 30009FE5 		ldr	r0, .L111+36	@,
 1804              	@ armwave.c:409: }
 409:armwave.c     **** }
 1805              		.loc 1 409 1 is_stmt 0 view .LVU447
 1806 0828 10D08DE2 		add	sp, sp, #16	@,,
 1807              		.cfi_def_cfa_offset 56
 1808              		@ sp needed	@
 1809 082c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1810              		.cfi_restore 84
 1811              		.cfi_restore 85
 1812              		.cfi_restore 82
 1813              		.cfi_restore 83
 1814              		.cfi_restore 80
 1815              		.cfi_restore 81
 1816              		.cfi_def_cfa_offset 32
 1817 0830 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1818              		.cfi_restore 14
 1819              		.cfi_restore 10
 1820              		.cfi_restore 9
 1821              		.cfi_restore 8
 1822              		.cfi_restore 7
 1823              		.cfi_restore 6
 1824              		.cfi_restore 5
 1825              		.cfi_restore 4
 1826              		.cfi_def_cfa_offset 0
 1827              	.LVL118:
 1828              	@ armwave.c:408:     printf("armwave version: %s\n", ARMWAVE_VER);
 408:armwave.c     **** }
 1829              		.loc 1 408 5 view .LVU448
 1830 0834 FEFFFFEA 		b	printf		@
 1831              	.LVL119:
 1832              	.L112:
 1833              		.align	3
 1834              	.L111:
 1835 0838 000000C0 		.word	-1073741824
 1836 083c CCCCEC3F 		.word	1072483532
 1837 0840 00000000 		.word	0
 1838 0844 00E06F40 		.word	1081073664
 1839 0848 00007F43 		.word	1132396544
 1840 084c FFFFFFFF 		.word	gamma_table-1
 1841 0850 00000000 		.word	g_armwave_state
 1842 0854 F609F406 		.word	116656630
 1843 0858 00000000 		.word	.LC0
 1844 085c 08000000 		.word	.LC1
 1845              		.cfi_endproc
 1846              	.LFE68:
 1848              		.global	__aeabi_idiv
 1849              		.align	2
 1850              		.global	armwave_test_generate
 1851              		.syntax unified
 1852              		.arm
 1853              		.fpu vfp
 1855              	armwave_test_generate:
 1856              	.LFB69:
 410:armwave.c     **** 
 411:armwave.c     **** /*
 412:armwave.c     ****  * Fill buffers with test funtionry.
 413:armwave.c     ****  */
 414:armwave.c     **** void armwave_test_generate()
 415:armwave.c     **** {
 1857              		.loc 1 415 1 is_stmt 1 view -0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 32
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 416:armwave.c     ****     uint32_t yy;
 1861              		.loc 1 416 5 view .LVU450
 417:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1862              		.loc 1 417 5 view .LVU451
 1863              	@ armwave.c:415: {
 415:armwave.c     ****     uint32_t yy;
 1864              		.loc 1 415 1 is_stmt 0 view .LVU452
 1865 0860 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1866              		.cfi_def_cfa_offset 36
 1867              		.cfi_offset 4, -36
 1868              		.cfi_offset 5, -32
 1869              		.cfi_offset 6, -28
 1870              		.cfi_offset 7, -24
 1871              		.cfi_offset 8, -20
 1872              		.cfi_offset 9, -16
 1873              		.cfi_offset 10, -12
 1874              		.cfi_offset 11, -8
 1875              		.cfi_offset 14, -4
 1876 0864 24D04DE2 		sub	sp, sp, #36	@,,
 1877              		.cfi_def_cfa_offset 72
 1878              	@ armwave.c:417:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1879              		.loc 1 417 38 view .LVU453
 1880 0868 3C929FE5 		ldr	r9, .L132	@ tmp316,
 1881              	@ armwave.c:419:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 418:armwave.c     **** 
 419:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1882              		.loc 1 419 5 view .LVU454
 1883 086c 0010A0E3 		mov	r1, #0	@,
 1884              	@ armwave.c:417:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 417:armwave.c     **** 
 1885              		.loc 1 417 14 view .LVU455
 1886 0870 583099E5 		ldr	r3, [r9, #88]	@ xx_rem, g_armwave_state.target_width
 1887              	@ armwave.c:419:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1888              		.loc 1 419 5 view .LVU456
 1889 0874 502099E5 		ldr	r2, [r9, #80]	@, g_armwave_state.ch_buff_size
 1890 0878 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 1891              	@ armwave.c:417:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 417:armwave.c     **** 
 1892              		.loc 1 417 14 view .LVU457
 1893 087c 10308DE5 		str	r3, [sp, #16]	@ xx_rem, %sfp
 1894              	.LVL120:
 1895              		.loc 1 419 5 is_stmt 1 view .LVU458
 1896 0880 FEFFFFEB 		bl	memset		@
 1897              	.LVL121:
 420:armwave.c     **** 
 421:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 1898              		.loc 1 421 5 view .LVU459
 1899              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1900              		.loc 1 421 38 is_stmt 0 view .LVU460
 1901 0884 584099E5 		ldr	r4, [r9, #88]	@ prephitmp_231, g_armwave_state.target_width
 1902              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1903              		.loc 1 421 69 view .LVU461
 1904 0888 446099E5 		ldr	r6, [r9, #68]	@ _44, g_armwave_state.slice_height
 1905              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1906              		.loc 1 421 52 view .LVU462
 1907 088c 0400A0E1 		mov	r0, r4	@, prephitmp_231
 1908 0890 0610A0E1 		mov	r1, r6	@, _44
 1909 0894 FEFFFFEB 		bl	__aeabi_idiv		@
 1910              	.LVL122:
 1911              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1912              		.loc 1 421 5 view .LVU463
 1913 0898 000050E3 		cmp	r0, #0	@ tmp226
 1914 089c 7D00000A 		beq	.L124		@,
 1915 08a0 385099E5 		ldr	r5, [r9, #56]	@ prephitmp_240, g_armwave_state.waves
 1916              	@ armwave.c:417:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 417:armwave.c     **** 
 1917              		.loc 1 417 53 view .LVU464
 1918 08a4 0030A0E3 		mov	r3, #0	@ ypos,
 1919 08a8 14308DE5 		str	r3, [sp, #20]	@ ypos, %sfp
 1920              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1921              		.loc 1 421 12 view .LVU465
 1922 08ac 0C308DE5 		str	r3, [sp, #12]	@ yy, %sfp
 1923              	.LVL123:
 1924              	.L122:
 422:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 423:armwave.c     **** 
 424:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1925              		.loc 1 424 9 is_stmt 1 discriminator 3 view .LVU466
 1926 08b0 0C309DE5 		ldr	r3, [sp, #12]	@ yy, %sfp
 1927              	.LBB27:
 1928              	.LBB28:
 1929              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 1930              		.loc 1 70 63 is_stmt 0 discriminator 3 view .LVU467
 1931 08b4 402099E5 		ldr	r2, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1932              	.LBE28:
 1933              	.LBE27:
 1934              	@ armwave.c:424:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1935              		.loc 1 424 9 discriminator 3 view .LVU468
 1936 08b8 481099E5 		ldr	r1, [r9, #72]	@ _9, g_armwave_state.slice_record_height
 1937 08bc 930603E0 		mul	r3, r3, r6	@ _7, yy, _44
 1938              	.LBB31:
 1939              	.LBB29:
 1940              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1941              		.loc 1 73 5 discriminator 3 view .LVU469
 1942 08c0 000055E3 		cmp	r5, #0	@ prephitmp_240,
 1943              	.LBE29:
 1944              	.LBE31:
 1945              	@ armwave.c:424:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1946              		.loc 1 424 9 discriminator 3 view .LVU470
 1947 08c4 08108DE5 		str	r1, [sp, #8]	@ _9, %sfp
 1948              	.LVL124:
 1949              	.LBB32:
 1950              	.LBI27:
  62:armwave.c     **** {
 1951              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU471
 1952              	.LBB30:
  64:armwave.c     ****     uint32_t value, word;
 1953              		.loc 1 64 5 discriminator 3 view .LVU472
  65:armwave.c     ****     uint8_t *wave_base;
 1954              		.loc 1 65 5 discriminator 3 view .LVU473
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1955              		.loc 1 66 5 discriminator 3 view .LVU474
  67:armwave.c     ****     uint8_t *write_buffer;
 1956              		.loc 1 67 5 discriminator 3 view .LVU475
  68:armwave.c     **** 
 1957              		.loc 1 68 5 discriminator 3 view .LVU476
  70:armwave.c     **** 
 1958              		.loc 1 70 5 discriminator 3 view .LVU477
 1959              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 1960              		.loc 1 70 63 is_stmt 0 discriminator 3 view .LVU478
 1961 08c8 920307E0 		mul	r7, r2, r3	@ _32, g_armwave_state.bitdepth_height, _7
 1962              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 1963              		.loc 1 70 40 discriminator 3 view .LVU479
 1964 08cc 042099E5 		ldr	r2, [r9, #4]	@ _29, g_armwave_state.ch1_buffer
 1965              	.LVL125:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1966              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU480
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1967              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU481
 1968 08d0 5D0000DA 		ble	.L115		@,
 1969              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1970              		.loc 1 73 11 view .LVU482
 1971 08d4 00A0A0E3 		mov	r10, #0	@ w,
 1972 08d8 0780A0E1 		mov	r8, r7	@ _32, _32
 1973 08dc 043043E2 		sub	r3, r3, #4	@ _41, _7,
 1974              	.LVL126:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1975              		.loc 1 73 11 view .LVU483
 1976 08e0 18308DE5 		str	r3, [sp, #24]	@ _41, %sfp
 1977              	.LVL127:
 1978              	.L121:
  74:armwave.c     **** 
 1979              		.loc 1 74 9 is_stmt 1 view .LVU484
 1980              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1981              		.loc 1 78 9 is_stmt 0 view .LVU485
 1982 08e4 08109DE5 		ldr	r1, [sp, #8]	@ _9, %sfp
 1983              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 1984              		.loc 1 74 64 view .LVU486
 1985 08e8 343099E5 		ldr	r3, [r9, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1986              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1987              		.loc 1 78 9 view .LVU487
 1988 08ec 000051E3 		cmp	r1, #0	@ _9,
 1989              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 1990              		.loc 1 74 36 view .LVU488
 1991 08f0 141099E5 		ldr	r1, [r9, #20]	@ _33, g_armwave_state.wave_buffer
 1992              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 1993              		.loc 1 74 64 view .LVU489
 1994 08f4 930A03E0 		mul	r3, r3, r10	@ _37, g_armwave_state.wave_stride, w
 1995              	.LVL128:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1996              		.loc 1 78 9 is_stmt 1 view .LVU490
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1997              		.loc 1 78 9 is_stmt 0 view .LVU491
 1998 08f8 4E00000A 		beq	.L116		@,
 1999 08fc 18009DE5 		ldr	r0, [sp, #24]	@ _41, %sfp
 2000 0900 003083E0 		add	r3, r3, r0	@ tmp235, _37, _41
 2001              	.LVL129:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2002              		.loc 1 78 9 view .LVU492
 2003 0904 033081E0 		add	r3, r1, r3	@ ivtmp.85, _33, tmp235
 2004              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2005              		.loc 1 78 16 view .LVU493
 2006 0908 0010A0E3 		mov	r1, #0	@ yy,
 2007              	.LVL130:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2008              		.loc 1 78 16 view .LVU494
 2009 090c 04308DE5 		str	r3, [sp, #4]	@ ivtmp.85, %sfp
 2010              	.LVL131:
 2011              	.L120:
  79:armwave.c     **** 
 2012              		.loc 1 79 13 is_stmt 1 view .LVU495
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2013              		.loc 1 90 17 view .LVU496
  91:armwave.c     ****                 word >>= 8;
 2014              		.loc 1 91 17 view .LVU497
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2015              		.loc 1 90 17 view .LVU498
  91:armwave.c     ****                 word >>= 8;
 2016              		.loc 1 91 17 view .LVU499
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2017              		.loc 1 90 17 view .LVU500
  91:armwave.c     ****                 word >>= 8;
 2018              		.loc 1 91 17 view .LVU501
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2019              		.loc 1 90 17 view .LVU502
  91:armwave.c     ****                 word >>= 8;
 2020              		.loc 1 91 17 view .LVU503
 2021              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + yy);
  79:armwave.c     **** 
 2022              		.loc 1 79 18 is_stmt 0 view .LVU504
 2023 0910 04009DE5 		ldr	r0, [sp, #4]	@ ivtmp.85, %sfp
 2024              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2025              		.loc 1 90 64 view .LVU505
 2026 0914 033081E2 		add	r3, r1, #3	@ tmp299, yy,
 2027 0918 1C308DE5 		str	r3, [sp, #28]	@ tmp299, %sfp
 2028              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + yy);
  79:armwave.c     **** 
 2029              		.loc 1 79 18 view .LVU506
 2030 091c 0430B0E5 		ldr	r3, [r0, #4]!	@ word, MEM[base: _265, offset: 0B]
 2031              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2032              		.loc 1 90 64 view .LVU507
 2033 0920 01B081E2 		add	fp, r1, #1	@ tmp262, yy,
 2034              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2035              		.loc 1 85 20 view .LVU508
 2036 0924 FF5013E2 		ands	r5, r3, #255	@ scale_value, word,
 2037 0928 01E0A003 		moveq	lr, #1	@ tmp237,
 2038 092c 00E0A013 		movne	lr, #0	@ tmp237,
 2039              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2040              		.loc 1 85 19 view .LVU509
 2041 0930 FF0055E3 		cmp	r5, #255	@ scale_value,
 2042 0934 01E08E03 		orreq	lr, lr, #1	@,, tmp242, tmp237
 2043 0938 00005EE3 		cmp	lr, #0	@ tmp242,
 2044              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + yy);
  79:armwave.c     **** 
 2045              		.loc 1 79 18 view .LVU510
 2046 093c 04008DE5 		str	r0, [sp, #4]	@ ivtmp.85, %sfp
 2047              	.LVL132:
  81:armwave.c     ****                 scale_value = word & 0xff;
 2048              		.loc 1 81 13 is_stmt 1 view .LVU511
  82:armwave.c     ****                 
 2049              		.loc 1 82 17 view .LVU512
  85:armwave.c     ****                     continue;
 2050              		.loc 1 85 17 view .LVU513
 2051              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2052              		.loc 1 90 64 is_stmt 0 view .LVU514
 2053 0940 027081E2 		add	r7, r1, #2	@ tmp281, yy,
 2054              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2055              		.loc 1 91 47 view .LVU515
 2056 0944 084085E0 		add	r4, r5, r8	@ tmp247, scale_value, _32
 2057              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****             }
 2058              		.loc 1 92 22 view .LVU516
 2059 0948 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 2060 094c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 2061              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2062              		.loc 1 85 19 view .LVU517
 2063 0950 3300001A 		bne	.L123		@,
 2064              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2065              		.loc 1 90 64 view .LVU518
 2066 0954 246099E5 		ldr	r6, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2067              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2068              		.loc 1 85 20 view .LVU519
 2069 0958 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 2070 095c 0150A003 		moveq	r5, #1	@ tmp255,
 2071              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2072              		.loc 1 90 64 view .LVU520
 2073 0960 960106E0 		mul	r6, r6, r1	@ tmp244, g_armwave_state.cmp_x_bitdepth_scale, yy
 2074              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2075              		.loc 1 85 20 view .LVU521
 2076 0964 0050A013 		movne	r5, #0	@ tmp255,
 2077              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2078              		.loc 1 91 47 view .LVU522
 2079 0968 08E08CE0 		add	lr, ip, r8	@ tmp266, scale_value, _32
 2080 096c 264484E0 		add	r4, r4, r6, lsr #8	@ tmp248, tmp247, tmp244,
 2081              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2082              		.loc 1 85 19 view .LVU523
 2083 0970 FF005CE3 		cmp	ip, #255	@ scale_value,
 2084 0974 05C0A011 		movne	ip, r5	@, tmp260, tmp255
 2085 0978 01C08503 		orreq	ip, r5, #1	@,, tmp260, tmp255
 2086 097c 00005CE3 		cmp	ip, #0	@ tmp260,
 2087              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2088              		.loc 1 91 47 view .LVU524
 2089 0980 04C0D2E7 		ldrb	ip, [r2, r4]	@ zero_extendqisi2	@ *_94, *_94
 2090 0984 01C08CE2 		add	ip, ip, #1	@ tmp251, *_94,
 2091 0988 04C0C2E7 		strb	ip, [r2, r4]	@ tmp251, *_94
 2092              	.LVL133:
  92:armwave.c     ****             }
 2093              		.loc 1 92 17 is_stmt 1 view .LVU525
  82:armwave.c     ****                 
 2094              		.loc 1 82 17 view .LVU526
  85:armwave.c     ****                     continue;
 2095              		.loc 1 85 17 view .LVU527
 2096              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2097              		.loc 1 85 19 is_stmt 0 view .LVU528
 2098 098c 2400001A 		bne	.L123		@,
 2099              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2100              		.loc 1 90 64 view .LVU529
 2101 0990 244099E5 		ldr	r4, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2102              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2103              		.loc 1 85 20 view .LVU530
 2104 0994 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 2105              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2106              		.loc 1 91 47 view .LVU531
 2107 0998 08C080E0 		add	ip, r0, r8	@ tmp285, scale_value, _32
 2108              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2109              		.loc 1 90 64 view .LVU532
 2110 099c 940B0BE0 		mul	fp, r4, fp	@ tmp263, g_armwave_state.cmp_x_bitdepth_scale, tmp262
 2111              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2112              		.loc 1 85 20 view .LVU533
 2113 09a0 0140A003 		moveq	r4, #1	@ tmp274,
 2114 09a4 0040A013 		movne	r4, #0	@ tmp274,
 2115              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2116              		.loc 1 91 47 view .LVU534
 2117 09a8 2BE48EE0 		add	lr, lr, fp, lsr #8	@ tmp267, tmp266, tmp263,
 2118              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2119              		.loc 1 85 19 view .LVU535
 2120 09ac FF0050E3 		cmp	r0, #255	@ scale_value,
 2121 09b0 0400A011 		movne	r0, r4	@, tmp279, tmp274
 2122 09b4 01008403 		orreq	r0, r4, #1	@,, tmp279, tmp274
 2123 09b8 000050E3 		cmp	r0, #0	@ tmp279,
 2124              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2125              		.loc 1 91 47 view .LVU536
 2126 09bc 0E00D2E7 		ldrb	r0, [r2, lr]	@ zero_extendqisi2	@ *_122, *_122
 2127 09c0 010080E2 		add	r0, r0, #1	@ tmp270, *_122,
 2128 09c4 0E00C2E7 		strb	r0, [r2, lr]	@ tmp270, *_122
  92:armwave.c     ****             }
 2129              		.loc 1 92 17 is_stmt 1 view .LVU537
 2130              	.LVL134:
  82:armwave.c     ****                 
 2131              		.loc 1 82 17 view .LVU538
  85:armwave.c     ****                     continue;
 2132              		.loc 1 85 17 view .LVU539
 2133              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2134              		.loc 1 85 19 is_stmt 0 view .LVU540
 2135 09c8 1500001A 		bne	.L123		@,
 2136              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2137              		.loc 1 90 64 view .LVU541
 2138 09cc 24E099E5 		ldr	lr, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2139              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2140              		.loc 1 85 20 view .LVU542
 2141 09d0 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2142              	.LVL135:
 2143              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2144              		.loc 1 91 47 view .LVU543
 2145 09d4 030088E0 		add	r0, r8, r3	@ tmp303, _32, word
 2146              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2147              		.loc 1 90 64 view .LVU544
 2148 09d8 9E0707E0 		mul	r7, lr, r7	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 2149              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2150              		.loc 1 85 20 view .LVU545
 2151 09dc 01E0A003 		moveq	lr, #1	@ tmp292,
 2152 09e0 00E0A013 		movne	lr, #0	@ tmp292,
 2153              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2154              		.loc 1 91 47 view .LVU546
 2155 09e4 27748CE0 		add	r7, ip, r7, lsr #8	@ tmp286, tmp285, tmp282,
 2156              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2157              		.loc 1 85 19 view .LVU547
 2158 09e8 FF0053E3 		cmp	r3, #255	@ word,
 2159 09ec 0E30A011 		movne	r3, lr	@, tmp297, tmp292
 2160 09f0 01308E03 		orreq	r3, lr, #1	@,, tmp297, tmp292
 2161 09f4 000053E3 		cmp	r3, #0	@ tmp297,
 2162              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2163              		.loc 1 91 47 view .LVU548
 2164 09f8 0730D2E7 		ldrb	r3, [r2, r7]	@ zero_extendqisi2	@ *_150, *_150
 2165 09fc 013083E2 		add	r3, r3, #1	@ tmp289, *_150,
 2166 0a00 0730C2E7 		strb	r3, [r2, r7]	@ tmp289, *_150
  92:armwave.c     ****             }
 2167              		.loc 1 92 17 is_stmt 1 view .LVU549
 2168              	.LVL136:
  82:armwave.c     ****                 
 2169              		.loc 1 82 17 view .LVU550
  85:armwave.c     ****                     continue;
 2170              		.loc 1 85 17 view .LVU551
 2171              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2172              		.loc 1 85 19 is_stmt 0 view .LVU552
 2173 0a04 0600001A 		bne	.L123		@,
 2174              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2175              		.loc 1 90 64 view .LVU553
 2176 0a08 243099E5 		ldr	r3, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2177 0a0c 03C081E2 		add	ip, r1, #3	@ tmp299, yy,
 2178 0a10 930C03E0 		mul	r3, r3, ip	@ tmp300, g_armwave_state.cmp_x_bitdepth_scale, tmp299
 2179              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2180              		.loc 1 91 47 view .LVU554
 2181 0a14 233480E0 		add	r3, r0, r3, lsr #8	@ tmp304, tmp303, tmp300,
 2182 0a18 0300D2E7 		ldrb	r0, [r2, r3]	@ zero_extendqisi2	@ *_178, *_178
 2183 0a1c 010080E2 		add	r0, r0, #1	@ tmp307, *_178,
 2184 0a20 0300C2E7 		strb	r0, [r2, r3]	@ tmp307, *_178
  92:armwave.c     ****             }
 2185              		.loc 1 92 17 is_stmt 1 view .LVU555
 2186              	.LVL137:
 2187              	.L123:
 2188              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2189              		.loc 1 78 9 is_stmt 0 view .LVU556
 2190 0a24 08309DE5 		ldr	r3, [sp, #8]	@ _9, %sfp
 2191              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2192              		.loc 1 78 37 view .LVU557
 2193 0a28 041081E2 		add	r1, r1, #4	@ yy, yy,
 2194              	.LVL138:
 2195              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2196              		.loc 1 78 9 view .LVU558
 2197 0a2c 010053E1 		cmp	r3, r1	@ _9, yy
 2198 0a30 B6FFFF8A 		bhi	.L120		@,
 2199 0a34 385099E5 		ldr	r5, [r9, #56]	@ prephitmp_240, g_armwave_state.waves
 2200              	.LVL139:
 2201              	.L116:
 2202              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2203              		.loc 1 73 44 view .LVU559
 2204 0a38 01A08AE2 		add	r10, r10, #1	@ w, w,
 2205              	.LVL140:
 2206              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2207              		.loc 1 73 5 view .LVU560
 2208 0a3c 05005AE1 		cmp	r10, r5	@ w, prephitmp_240
 2209 0a40 A7FFFFBA 		blt	.L121		@,
 2210 0a44 446099E5 		ldr	r6, [r9, #68]	@ _44, g_armwave_state.slice_height
 2211 0a48 584099E5 		ldr	r4, [r9, #88]	@ prephitmp_231, g_armwave_state.target_width
 2212              	.LVL141:
 2213              	.L115:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2214              		.loc 1 73 5 view .LVU561
 2215              	.LBE30:
 2216              	.LBE32:
 425:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2217              		.loc 1 425 9 is_stmt 1 discriminator 3 view .LVU562
 2218              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 421:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2219              		.loc 1 421 52 is_stmt 0 discriminator 3 view .LVU563
 2220 0a4c 0610A0E1 		mov	r1, r6	@, _44
 2221 0a50 0400A0E1 		mov	r0, r4	@, prephitmp_231
 2222 0a54 FEFFFFEB 		bl	__aeabi_idiv		@
 2223              	.LVL142:
 2224              	@ armwave.c:425:         xx_rem -= g_armwave_state.slice_height;
 2225              		.loc 1 425 16 discriminator 3 view .LVU564
 2226 0a58 10209DE5 		ldr	r2, [sp, #16]	@ xx_rem, %sfp
 2227              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 421:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2228              		.loc 1 421 87 discriminator 3 view .LVU565
 2229 0a5c 0C309DE5 		ldr	r3, [sp, #12]	@ yy, %sfp
 2230              	@ armwave.c:425:         xx_rem -= g_armwave_state.slice_height;
 2231              		.loc 1 425 16 discriminator 3 view .LVU566
 2232 0a60 062042E0 		sub	r2, r2, r6	@ xx_rem, xx_rem, _44
 2233 0a64 10208DE5 		str	r2, [sp, #16]	@ xx_rem, %sfp
 2234              	.LVL143:
 426:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2235              		.loc 1 426 9 is_stmt 1 discriminator 3 view .LVU567
 2236              	@ armwave.c:426:         ypos += g_armwave_state.slice_height;
 2237              		.loc 1 426 14 is_stmt 0 discriminator 3 view .LVU568
 2238 0a68 14209DE5 		ldr	r2, [sp, #20]	@ ypos, %sfp
 2239              	.LVL144:
 2240              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 421:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2241              		.loc 1 421 87 discriminator 3 view .LVU569
 2242 0a6c 013083E2 		add	r3, r3, #1	@ yy, yy,
 2243              	@ armwave.c:426:         ypos += g_armwave_state.slice_height;
 2244              		.loc 1 426 14 discriminator 3 view .LVU570
 2245 0a70 062082E0 		add	r2, r2, r6	@ ypos, ypos, _44
 2246              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 421:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2247              		.loc 1 421 87 discriminator 3 view .LVU571
 2248 0a74 0C308DE5 		str	r3, [sp, #12]	@ yy, %sfp
 2249              	.LVL145:
 2250              	@ armwave.c:426:         ypos += g_armwave_state.slice_height;
 2251              		.loc 1 426 14 discriminator 3 view .LVU572
 2252 0a78 14208DE5 		str	r2, [sp, #20]	@ ypos, %sfp
 2253              	.LVL146:
 2254              	@ armwave.c:421:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 421:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2255              		.loc 1 421 5 discriminator 3 view .LVU573
 2256 0a7c 030050E1 		cmp	r0, r3	@, yy
 2257 0a80 8AFFFF8A 		bhi	.L122		@,
 2258 0a84 0200A0E1 		mov	r0, r2	@, ypos
 427:armwave.c     ****     }
 428:armwave.c     **** 
 429:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2259              		.loc 1 429 5 is_stmt 1 view .LVU574
 2260 0a88 10109DE5 		ldr	r1, [sp, #16]	@, %sfp
 2261              	@ armwave.c:430: }
 430:armwave.c     **** }
 2262              		.loc 1 430 1 is_stmt 0 view .LVU575
 2263 0a8c 24D08DE2 		add	sp, sp, #36	@,,
 2264              		.cfi_remember_state
 2265              		.cfi_def_cfa_offset 36
 2266              		@ sp needed	@
 2267 0a90 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2268              		.cfi_restore 14
 2269              		.cfi_restore 11
 2270              		.cfi_restore 10
 2271              		.cfi_restore 9
 2272              		.cfi_restore 8
 2273              		.cfi_restore 7
 2274              		.cfi_restore 6
 2275              		.cfi_restore 5
 2276              		.cfi_restore 4
 2277              		.cfi_def_cfa_offset 0
 2278              	@ armwave.c:429:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 429:armwave.c     **** }
 2279              		.loc 1 429 5 view .LVU576
 2280 0a94 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2281              	.LVL147:
 2282              	.L124:
 2283              		.cfi_restore_state
 2284              	@ armwave.c:417:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 417:armwave.c     **** 
 2285              		.loc 1 417 53 view .LVU577
 2286 0a98 14008DE5 		str	r0, [sp, #20]	@ tmp226, %sfp
 429:armwave.c     **** }
 2287              		.loc 1 429 5 is_stmt 1 view .LVU578
 2288 0a9c 10109DE5 		ldr	r1, [sp, #16]	@, %sfp
 2289              	@ armwave.c:430: }
 2290              		.loc 1 430 1 is_stmt 0 view .LVU579
 2291 0aa0 24D08DE2 		add	sp, sp, #36	@,,
 2292              		.cfi_def_cfa_offset 36
 2293              		@ sp needed	@
 2294 0aa4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2295              		.cfi_restore 14
 2296              		.cfi_restore 11
 2297              		.cfi_restore 10
 2298              		.cfi_restore 9
 2299              		.cfi_restore 8
 2300              		.cfi_restore 7
 2301              		.cfi_restore 6
 2302              		.cfi_restore 5
 2303              		.cfi_restore 4
 2304              		.cfi_def_cfa_offset 0
 2305              	@ armwave.c:429:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 429:armwave.c     **** }
 2306              		.loc 1 429 5 view .LVU580
 2307 0aa8 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2308              	.LVL148:
 2309              	.L133:
 2310              		.align	2
 2311              	.L132:
 2312 0aac 00000000 		.word	g_armwave_state
 2313              		.cfi_endproc
 2314              	.LFE69:
 2316              		.align	2
 2317              		.global	armwave_test_fill_outbuf
 2318              		.syntax unified
 2319              		.arm
 2320              		.fpu vfp
 2322              	armwave_test_fill_outbuf:
 2323              	.LFB70:
 431:armwave.c     **** 
 432:armwave.c     **** /*
 433:armwave.c     ****  * Render image to the local allocated buffer.
 434:armwave.c     ****  */
 435:armwave.c     **** void armwave_test_fill_outbuf()
 436:armwave.c     **** {
 2324              		.loc 1 436 1 is_stmt 1 view -0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 8
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 437:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2328              		.loc 1 437 5 view .LVU582
 2329 0ab0 50C19FE5 		ldr	ip, .L155	@ tmp204,
 2330              	@ armwave.c:436: {
 436:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2331              		.loc 1 436 1 is_stmt 0 view .LVU583
 2332 0ab4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2333              		.cfi_def_cfa_offset 36
 2334              		.cfi_offset 4, -36
 2335              		.cfi_offset 5, -32
 2336              		.cfi_offset 6, -28
 2337              		.cfi_offset 7, -24
 2338              		.cfi_offset 8, -20
 2339              		.cfi_offset 9, -16
 2340              		.cfi_offset 10, -12
 2341              		.cfi_offset 11, -8
 2342              		.cfi_offset 14, -4
 2343 0ab8 0CD04DE2 		sub	sp, sp, #12	@,,
 2344              		.cfi_def_cfa_offset 48
 2345              	@ armwave.c:437:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2346              		.loc 1 437 5 view .LVU584
 2347 0abc 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2348              	.LVL149:
 2349              	.LBB35:
 2350              	.LBI35:
 157:armwave.c     **** {
 2351              		.loc 1 157 6 is_stmt 1 view .LVU585
 2352              	.LBB36:
 159:armwave.c     ****     // uint32_t ysub;
 2353              		.loc 1 159 5 view .LVU586
 161:armwave.c     ****     uint8_t r, g, b, value; 
 2354              		.loc 1 161 5 view .LVU587
 162:armwave.c     ****     // uint8_t row;
 2355              		.loc 1 162 5 view .LVU588
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2356              		.loc 1 164 5 view .LVU589
 2357              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2358              		.loc 1 164 15 is_stmt 0 view .LVU590
 2359 0ac0 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2360              	.LVL150:
 165:armwave.c     ****     uint32_t offset;
 2361              		.loc 1 165 5 is_stmt 1 view .LVU591
 166:armwave.c     **** 
 2362              		.loc 1 166 5 view .LVU592
 168:armwave.c     **** 
 2363              		.loc 1 168 5 view .LVU593
 2364 0ac4 000058E3 		cmp	r8, #0	@ _1,
 2365 0ac8 4900000A 		beq	.L153		@,
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2366              		.loc 1 170 5 view .LVU594
 2367              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2368              		.loc 1 170 10 is_stmt 0 view .LVU595
 2369 0acc 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2370 0ad0 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2371              	.LVL151:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2372              		.loc 1 173 5 is_stmt 1 view .LVU596
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2373              		.loc 1 173 5 is_stmt 0 view .LVU597
 2374 0ad4 000057E3 		cmp	r7, #0	@ npix,
 2375 0ad8 0A0000DA 		ble	.L134		@,
 2376              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2377              		.loc 1 185 52 view .LVU598
 2378 0adc FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2379              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2380              		.loc 1 186 52 view .LVU599
 2381 0ae0 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2382              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2383              		.loc 1 187 52 view .LVU600
 2384 0ae4 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2385              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2386              		.loc 1 209 57 view .LVU601
 2387 0ae8 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2388              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2389              		.loc 1 173 11 view .LVU602
 2390 0aec 00E0A0E3 		mov	lr, #0	@ n,
 2391              	.LVL152:
 2392              	.L141:
 177:armwave.c     **** 
 2393              		.loc 1 177 9 is_stmt 1 view .LVU603
 2394              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 2395              		.loc 1 177 19 is_stmt 0 view .LVU604
 2396 0af0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2397              	.LVL153:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2398              		.loc 1 179 9 is_stmt 1 view .LVU605
 2399              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2400              		.loc 1 179 11 is_stmt 0 view .LVU606
 2401 0af4 000050E3 		cmp	r0, #0	@ wave_word,
 2402 0af8 0400001A 		bne	.L150		@,
 2403 0afc 04E08EE2 		add	lr, lr, #4	@ n, n,
 2404              	.L137:
 2405              	.LVL154:
 2406              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2407              		.loc 1 173 5 view .LVU607
 2408 0b00 0E0057E1 		cmp	r7, lr	@ npix, n
 2409 0b04 F9FFFFCA 		bgt	.L141		@,
 2410              	.LVL155:
 2411              	.L134:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2412              		.loc 1 173 5 view .LVU608
 2413              	.LBE36:
 2414              	.LBE35:
 2415              	@ armwave.c:438: }
 438:armwave.c     **** }
 2416              		.loc 1 438 1 view .LVU609
 2417 0b08 0CD08DE2 		add	sp, sp, #12	@,,
 2418              		.cfi_remember_state
 2419              		.cfi_def_cfa_offset 36
 2420              		@ sp needed	@
 2421 0b0c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2422              	.LVL156:
 2423              	.L150:
 2424              		.cfi_restore_state
 2425              	.LBB38:
 2426              	.LBB37:
 2427              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2428              		.loc 1 184 19 view .LVU610
 2429 0b10 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2430              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2431              		.loc 1 179 11 view .LVU611
 2432 0b14 0E60A0E1 		mov	r6, lr	@ ivtmp.102, n
 2433              	.LVL157:
 181:armwave.c     ****                 wave_word >>= 8;
 2434              		.loc 1 181 17 is_stmt 1 view .LVU612
 182:armwave.c     **** 
 2435              		.loc 1 182 17 view .LVU613
 2436              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2437              		.loc 1 182 27 is_stmt 0 view .LVU614
 2438 0b18 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2439              	.LVL158:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2440              		.loc 1 184 17 is_stmt 1 view .LVU615
 2441 0b1c 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.102,
 2442              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2443              		.loc 1 184 19 is_stmt 0 view .LVU616
 2444 0b20 0500001A 		bne	.L154		@,
 2445              	.LVL159:
 2446              	.L138:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2447              		.loc 1 184 19 view .LVU617
 2448 0b24 016086E2 		add	r6, r6, #1	@ ivtmp.102, ivtmp.102,
 2449              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 2450              		.loc 1 180 13 view .LVU618
 2451 0b28 06005EE1 		cmp	lr, r6	@ n, ivtmp.102
 2452 0b2c F3FFFF0A 		beq	.L137		@,
 181:armwave.c     ****                 wave_word >>= 8;
 2453              		.loc 1 181 17 is_stmt 1 view .LVU619
 2454              	.LVL160:
 182:armwave.c     **** 
 2455              		.loc 1 182 17 view .LVU620
 2456              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2457              		.loc 1 184 19 is_stmt 0 view .LVU621
 2458 0b30 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2459              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2460              		.loc 1 182 27 view .LVU622
 2461 0b34 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2462              	.LVL161:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2463              		.loc 1 184 17 is_stmt 1 view .LVU623
 2464              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2465              		.loc 1 184 19 is_stmt 0 view .LVU624
 2466 0b38 F9FFFF0A 		beq	.L138		@,
 2467              	.L154:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2468              		.loc 1 185 21 is_stmt 1 view .LVU625
 2469              	.LVL162:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2470              		.loc 1 186 21 view .LVU626
 187:armwave.c     **** 
 2471              		.loc 1 187 21 view .LVU627
 189:armwave.c     ****                     g = MIN(gg, 255);
 2472              		.loc 1 189 21 view .LVU628
 190:armwave.c     ****                     b = MIN(bb, 255);
 2473              		.loc 1 190 21 view .LVU629
 191:armwave.c     **** 
 2474              		.loc 1 191 21 view .LVU630
 194:armwave.c     **** 
 2475              		.loc 1 194 21 view .LVU631
 2476              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2477              		.loc 1 209 32 is_stmt 0 view .LVU632
 2478 0b3c 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.102
 2479              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2480              		.loc 1 210 41 view .LVU633
 2481 0b40 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2482              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2483              		.loc 1 209 40 view .LVU634
 2484 0b44 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2485              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2486              		.loc 1 210 41 view .LVU635
 2487 0b48 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2488              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2489              		.loc 1 187 55 view .LVU636
 2490 0b4c 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2491              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2492              		.loc 1 209 40 view .LVU637
 2493 0b50 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2494              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2495              		.loc 1 210 46 view .LVU638
 2496 0b54 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2497              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2498              		.loc 1 186 55 view .LVU639
 2499 0b58 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2500              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2501              		.loc 1 187 24 view .LVU640
 2502 0b5c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2503              	.LVL163:
 2504              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2505              		.loc 1 191 25 view .LVU641
 2506 0b60 FF0053E3 		cmp	r3, #255	@ bb,
 2507              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2508              		.loc 1 186 24 view .LVU642
 2509 0b64 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2510              	.LVL164:
 2511              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2512              		.loc 1 191 25 view .LVU643
 2513 0b68 FF30A0A3 		movge	r3, #255	@ bb,
 2514              	.LVL165:
 2515              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2516              		.loc 1 209 40 view .LVU644
 2517 0b6c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2518              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2519              		.loc 1 210 46 view .LVU645
 2520 0b70 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2521              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 2522              		.loc 1 190 25 view .LVU646
 2523 0b74 FF0052E3 		cmp	r2, #255	@ gg,
 2524 0b78 FF20A0A3 		movge	r2, #255	@ gg,
 2525              	.LVL166:
 2526              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2527              		.loc 1 185 55 view .LVU647
 2528 0b7c 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2529              	.LVL167:
 2530              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2531              		.loc 1 194 56 view .LVU648
 2532 0b80 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2533              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2534              		.loc 1 194 44 view .LVU649
 2535 0b84 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2536              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2537              		.loc 1 209 24 view .LVU650
 2538 0b88 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2539              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2540              		.loc 1 185 24 view .LVU651
 2541 0b8c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2542              	.LVL168:
 2543              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2544              		.loc 1 194 56 view .LVU652
 2545 0b90 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2546              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2547              		.loc 1 194 44 view .LVU653
 2548 0b94 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2549              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2550              		.loc 1 189 25 view .LVU654
 2551 0b98 FF0051E3 		cmp	r1, #255	@ rr,
 2552              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2553              		.loc 1 194 51 view .LVU655
 2554 0b9c 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2555              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2556              		.loc 1 189 25 view .LVU656
 2557 0ba0 FF10A0A3 		movge	r1, #255	@ rr,
 2558              	.LVL169:
 2559              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2560              		.loc 1 209 24 view .LVU657
 2561 0ba4 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2562              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2563              		.loc 1 210 24 view .LVU658
 2564 0ba8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2565              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2566              		.loc 1 194 62 view .LVU659
 2567 0bac 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2568 0bb0 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2569              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2570              		.loc 1 194 26 view .LVU660
 2571 0bb4 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2572              	.LVL170:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2573              		.loc 1 208 21 is_stmt 1 view .LVU661
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2574              		.loc 1 209 21 view .LVU662
 210:armwave.c     ****                     xx = (nsub >> 8);
 2575              		.loc 1 210 21 view .LVU663
 211:armwave.c     **** 
 2576              		.loc 1 211 21 view .LVU664
 2577              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 2578              		.loc 1 211 32 is_stmt 0 view .LVU665
 2579 0bb8 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.102,
 2580              	.LVL171:
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2581              		.loc 1 213 21 is_stmt 1 view .LVU666
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2582              		.loc 1 213 21 is_stmt 0 view .LVU667
 2583 0bbc 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2584              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2585              		.loc 1 210 24 view .LVU668
 2586 0bc0 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2587              	.LVL172:
 2588              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2589              		.loc 1 213 21 view .LVU669
 2590 0bc4 020054E1 		cmp	r4, r2	@ yy, ye
 2591 0bc8 D5FFFF2A 		bcs	.L138		@,
 2592 0bcc 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2593              	.LVL173:
 2594              	.L139:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2595              		.loc 1 214 25 is_stmt 1 view .LVU670
 215:armwave.c     ****                     }
 2596              		.loc 1 215 25 view .LVU671
 2597              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2598              		.loc 1 214 43 is_stmt 0 view .LVU672
 2599 0bd0 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2600              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2601              		.loc 1 213 21 view .LVU673
 2602 0bd4 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2603              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2604              		.loc 1 215 43 view .LVU674
 2605 0bd8 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2606              	.LVL174:
 2607              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2608              		.loc 1 213 42 view .LVU675
 2609 0bdc 014084E2 		add	r4, r4, #1	@ yy, yy,
 2610              	.LVL175:
 2611              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2612              		.loc 1 213 21 view .LVU676
 2613 0be0 040050E1 		cmp	r0, r4	@ ye, yy
 2614              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2615              		.loc 1 215 53 view .LVU677
 2616 0be4 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2617              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2618              		.loc 1 213 21 view .LVU678
 2619 0be8 F8FFFF1A 		bne	.L139		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2620              		.loc 1 213 21 view .LVU679
 2621 0bec 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2622 0bf0 CBFFFFEA 		b	.L138		@
 2623              	.LVL176:
 2624              	.L153:
 168:armwave.c     **** 
 2625              		.loc 1 168 5 is_stmt 1 view .LVU680
 2626 0bf4 10309FE5 		ldr	r3, .L155+4	@,
 2627 0bf8 A820A0E3 		mov	r2, #168	@,
 2628 0bfc 0C109FE5 		ldr	r1, .L155+8	@,
 2629 0c00 0C009FE5 		ldr	r0, .L155+12	@,
 2630 0c04 FEFFFFEB 		bl	__assert_fail		@
 2631              	.LVL177:
 2632              	.L156:
 2633              		.align	2
 2634              	.L155:
 2635 0c08 00000000 		.word	g_armwave_state
 2636 0c0c 00000000 		.word	.LANCHOR0
 2637 0c10 20000000 		.word	.LC2
 2638 0c14 2C000000 		.word	.LC3
 2639              	.LBE37:
 2640              	.LBE38:
 2641              		.cfi_endproc
 2642              	.LFE70:
 2644              		.align	2
 2645              		.global	armwave_test_dump_buffer_to_ppm
 2646              		.syntax unified
 2647              		.arm
 2648              		.fpu vfp
 2650              	armwave_test_dump_buffer_to_ppm:
 2651              	.LVL178:
 2652              	.LFB71:
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 444:armwave.c     **** {
 2653              		.loc 1 444 1 view -0
 2654              		.cfi_startproc
 2655              		@ args = 0, pretend = 0, frame = 0
 2656              		@ frame_needed = 0, uses_anonymous_args = 0
 2657              		@ link register save eliminated.
 445:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2658              		.loc 1 445 5 view .LVU682
 2659 0c18 08309FE5 		ldr	r3, .L158	@ tmp112,
 2660 0c1c 0010A0E1 		mov	r1, r0	@, fn
 2661 0c20 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2662              	.LVL179:
 2663              		.loc 1 445 5 is_stmt 0 view .LVU683
 2664 0c24 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2665              	.LVL180:
 2666              	.L159:
 2667              		.loc 1 445 5 view .LVU684
 2668              		.align	2
 2669              	.L158:
 2670 0c28 00000000 		.word	g_armwave_state
 2671              		.cfi_endproc
 2672              	.LFE71:
 2674              		.align	2
 2675              		.global	armwave_test_fill_gdkbuf
 2676              		.syntax unified
 2677              		.arm
 2678              		.fpu vfp
 2680              	armwave_test_fill_gdkbuf:
 2681              	.LVL181:
 2682              	.LFB72:
 446:armwave.c     **** }
 447:armwave.c     **** 
 448:armwave.c     **** /*
 449:armwave.c     ****  * Render GDK buffer with test funtionry.
 450:armwave.c     ****  */
 451:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 452:armwave.c     **** {
 2683              		.loc 1 452 1 is_stmt 1 view -0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 8
 2686              		@ frame_needed = 0, uses_anonymous_args = 0
 453:armwave.c     ****     //PyObject *mv;
 454:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 455:armwave.c     **** 
 456:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 457:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2687              		.loc 1 457 5 view .LVU686
 2688              	@ armwave.c:457:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2689              		.loc 1 457 11 is_stmt 0 view .LVU687
 2690 0c2c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2691              	@ armwave.c:452: {
 452:armwave.c     ****     //PyObject *mv;
 2692              		.loc 1 452 1 view .LVU688
 2693 0c30 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2694              		.cfi_def_cfa_offset 36
 2695              		.cfi_offset 4, -36
 2696              		.cfi_offset 5, -32
 2697              		.cfi_offset 6, -28
 2698              		.cfi_offset 7, -24
 2699              		.cfi_offset 8, -20
 2700              		.cfi_offset 9, -16
 2701              		.cfi_offset 10, -12
 2702              		.cfi_offset 11, -8
 2703              		.cfi_offset 14, -4
 2704 0c34 0CD04DE2 		sub	sp, sp, #12	@,,
 2705              		.cfi_def_cfa_offset 48
 2706              	.LBB41:
 2707              	.LBB42:
 2708              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2709              		.loc 1 164 15 view .LVU689
 2710 0c38 48519FE5 		ldr	r5, .L181	@ tmp206,
 2711              	.LBE42:
 2712              	.LBE41:
 2713              	@ armwave.c:457:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2714              		.loc 1 457 11 view .LVU690
 2715 0c3c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2716              	.LVL182:
 458:armwave.c     ****     
 459:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 460:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2717              		.loc 1 460 5 is_stmt 1 view .LVU691
 2718              	.LBB45:
 2719              	.LBI41:
 157:armwave.c     **** {
 2720              		.loc 1 157 6 view .LVU692
 2721              	.LBB43:
 159:armwave.c     ****     // uint32_t ysub;
 2722              		.loc 1 159 5 view .LVU693
 161:armwave.c     ****     uint8_t r, g, b, value; 
 2723              		.loc 1 161 5 view .LVU694
 162:armwave.c     ****     // uint8_t row;
 2724              		.loc 1 162 5 view .LVU695
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2725              		.loc 1 164 5 view .LVU696
 2726              	@ armwave.c:168:     assert(out_buffer != NULL);
 168:armwave.c     **** 
 2727              		.loc 1 168 5 is_stmt 0 view .LVU697
 2728 0c40 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2729              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2730              		.loc 1 164 15 view .LVU698
 2731 0c44 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2732              	.LVL183:
 165:armwave.c     ****     uint32_t offset;
 2733              		.loc 1 165 5 is_stmt 1 view .LVU699
 166:armwave.c     **** 
 2734              		.loc 1 166 5 view .LVU700
 168:armwave.c     **** 
 2735              		.loc 1 168 5 view .LVU701
 2736 0c48 4900000A 		beq	.L179		@,
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2737              		.loc 1 170 5 view .LVU702
 2738              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2739              		.loc 1 170 10 is_stmt 0 view .LVU703
 2740 0c4c 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2741 0c50 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2742              	.LVL184:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2743              		.loc 1 173 5 is_stmt 1 view .LVU704
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2744              		.loc 1 173 5 is_stmt 0 view .LVU705
 2745 0c54 000057E3 		cmp	r7, #0	@ npix,
 2746 0c58 0A0000DA 		ble	.L160		@,
 2747              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2748              		.loc 1 185 52 view .LVU706
 2749 0c5c FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2750              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2751              		.loc 1 186 52 view .LVU707
 2752 0c60 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2753              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2754              		.loc 1 187 52 view .LVU708
 2755 0c64 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2756              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2757              		.loc 1 209 57 view .LVU709
 2758 0c68 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2759              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2760              		.loc 1 173 11 view .LVU710
 2761 0c6c 00C0A0E3 		mov	ip, #0	@ n,
 2762              	.LVL185:
 2763              	.L167:
 177:armwave.c     **** 
 2764              		.loc 1 177 9 is_stmt 1 view .LVU711
 2765              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 2766              		.loc 1 177 19 is_stmt 0 view .LVU712
 2767 0c70 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2768              	.LVL186:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2769              		.loc 1 179 9 is_stmt 1 view .LVU713
 2770              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2771              		.loc 1 179 11 is_stmt 0 view .LVU714
 2772 0c74 000050E3 		cmp	r0, #0	@ wave_word,
 2773 0c78 0400001A 		bne	.L176		@,
 2774 0c7c 04C08CE2 		add	ip, ip, #4	@ n, n,
 2775              	.L163:
 2776              	.LVL187:
 2777              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2778              		.loc 1 173 5 view .LVU715
 2779 0c80 0C0057E1 		cmp	r7, ip	@ npix, n
 2780 0c84 F9FFFFCA 		bgt	.L167		@,
 2781              	.LVL188:
 2782              	.L160:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2783              		.loc 1 173 5 view .LVU716
 2784              	.LBE43:
 2785              	.LBE45:
 2786              	@ armwave.c:461: }
 461:armwave.c     **** }
 2787              		.loc 1 461 1 view .LVU717
 2788 0c88 0CD08DE2 		add	sp, sp, #12	@,,
 2789              		.cfi_remember_state
 2790              		.cfi_def_cfa_offset 36
 2791              		@ sp needed	@
 2792 0c8c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2793              	.LVL189:
 2794              	.L176:
 2795              		.cfi_restore_state
 2796              	.LBB46:
 2797              	.LBB44:
 2798              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2799              		.loc 1 184 19 view .LVU718
 2800 0c90 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2801              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2802              		.loc 1 179 11 view .LVU719
 2803 0c94 0C60A0E1 		mov	r6, ip	@ ivtmp.118, n
 2804              	.LVL190:
 181:armwave.c     ****                 wave_word >>= 8;
 2805              		.loc 1 181 17 is_stmt 1 view .LVU720
 182:armwave.c     **** 
 2806              		.loc 1 182 17 view .LVU721
 2807              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2808              		.loc 1 182 27 is_stmt 0 view .LVU722
 2809 0c98 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2810              	.LVL191:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2811              		.loc 1 184 17 is_stmt 1 view .LVU723
 2812 0c9c 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.118,
 2813              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2814              		.loc 1 184 19 is_stmt 0 view .LVU724
 2815 0ca0 0500001A 		bne	.L180		@,
 2816              	.LVL192:
 2817              	.L164:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2818              		.loc 1 184 19 view .LVU725
 2819 0ca4 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2820              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 2821              		.loc 1 180 13 view .LVU726
 2822 0ca8 06005CE1 		cmp	ip, r6	@ n, ivtmp.118
 2823 0cac F3FFFF0A 		beq	.L163		@,
 181:armwave.c     ****                 wave_word >>= 8;
 2824              		.loc 1 181 17 is_stmt 1 view .LVU727
 2825              	.LVL193:
 182:armwave.c     **** 
 2826              		.loc 1 182 17 view .LVU728
 2827              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2828              		.loc 1 184 19 is_stmt 0 view .LVU729
 2829 0cb0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2830              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2831              		.loc 1 182 27 view .LVU730
 2832 0cb4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2833              	.LVL194:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2834              		.loc 1 184 17 is_stmt 1 view .LVU731
 2835              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2836              		.loc 1 184 19 is_stmt 0 view .LVU732
 2837 0cb8 F9FFFF0A 		beq	.L164		@,
 2838              	.L180:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2839              		.loc 1 185 21 is_stmt 1 view .LVU733
 2840              	.LVL195:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2841              		.loc 1 186 21 view .LVU734
 187:armwave.c     **** 
 2842              		.loc 1 187 21 view .LVU735
 189:armwave.c     ****                     g = MIN(gg, 255);
 2843              		.loc 1 189 21 view .LVU736
 190:armwave.c     ****                     b = MIN(bb, 255);
 2844              		.loc 1 190 21 view .LVU737
 191:armwave.c     **** 
 2845              		.loc 1 191 21 view .LVU738
 194:armwave.c     **** 
 2846              		.loc 1 194 21 view .LVU739
 2847              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2848              		.loc 1 209 32 is_stmt 0 view .LVU740
 2849 0cbc 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.118
 2850              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2851              		.loc 1 210 41 view .LVU741
 2852 0cc0 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2853              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2854              		.loc 1 209 40 view .LVU742
 2855 0cc4 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2856              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2857              		.loc 1 210 41 view .LVU743
 2858 0cc8 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2859              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2860              		.loc 1 187 55 view .LVU744
 2861 0ccc 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2862              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2863              		.loc 1 209 40 view .LVU745
 2864 0cd0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2865              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2866              		.loc 1 210 46 view .LVU746
 2867 0cd4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2868              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2869              		.loc 1 186 55 view .LVU747
 2870 0cd8 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2871              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2872              		.loc 1 187 24 view .LVU748
 2873 0cdc 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2874              	.LVL196:
 2875              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2876              		.loc 1 191 25 view .LVU749
 2877 0ce0 FF0053E3 		cmp	r3, #255	@ bb,
 2878              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2879              		.loc 1 186 24 view .LVU750
 2880 0ce4 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2881              	.LVL197:
 2882              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2883              		.loc 1 191 25 view .LVU751
 2884 0ce8 FF30A0A3 		movge	r3, #255	@ bb,
 2885              	.LVL198:
 2886              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2887              		.loc 1 209 40 view .LVU752
 2888 0cec A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2889              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2890              		.loc 1 210 46 view .LVU753
 2891 0cf0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2892              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 2893              		.loc 1 190 25 view .LVU754
 2894 0cf4 FF0052E3 		cmp	r2, #255	@ gg,
 2895 0cf8 FF20A0A3 		movge	r2, #255	@ gg,
 2896              	.LVL199:
 2897              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2898              		.loc 1 185 55 view .LVU755
 2899 0cfc 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2900              	.LVL200:
 2901              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2902              		.loc 1 194 56 view .LVU756
 2903 0d00 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2904              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2905              		.loc 1 194 44 view .LVU757
 2906 0d04 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2907              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2908              		.loc 1 209 24 view .LVU758
 2909 0d08 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2910              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2911              		.loc 1 185 24 view .LVU759
 2912 0d0c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2913              	.LVL201:
 2914              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2915              		.loc 1 194 56 view .LVU760
 2916 0d10 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2917              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2918              		.loc 1 194 44 view .LVU761
 2919 0d14 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2920              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2921              		.loc 1 189 25 view .LVU762
 2922 0d18 FF0051E3 		cmp	r1, #255	@ rr,
 2923              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2924              		.loc 1 194 51 view .LVU763
 2925 0d1c 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2926              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2927              		.loc 1 189 25 view .LVU764
 2928 0d20 FF10A0A3 		movge	r1, #255	@ rr,
 2929              	.LVL202:
 2930              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2931              		.loc 1 209 24 view .LVU765
 2932 0d24 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2933              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2934              		.loc 1 210 24 view .LVU766
 2935 0d28 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2936              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2937              		.loc 1 194 62 view .LVU767
 2938 0d2c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2939 0d30 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2940              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2941              		.loc 1 194 26 view .LVU768
 2942 0d34 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2943              	.LVL203:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2944              		.loc 1 208 21 is_stmt 1 view .LVU769
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2945              		.loc 1 209 21 view .LVU770
 210:armwave.c     ****                     xx = (nsub >> 8);
 2946              		.loc 1 210 21 view .LVU771
 211:armwave.c     **** 
 2947              		.loc 1 211 21 view .LVU772
 2948              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 2949              		.loc 1 211 32 is_stmt 0 view .LVU773
 2950 0d38 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.118,
 2951              	.LVL204:
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2952              		.loc 1 213 21 is_stmt 1 view .LVU774
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2953              		.loc 1 213 21 is_stmt 0 view .LVU775
 2954 0d3c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2955              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2956              		.loc 1 210 24 view .LVU776
 2957 0d40 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2958              	.LVL205:
 2959              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2960              		.loc 1 213 21 view .LVU777
 2961 0d44 02005EE1 		cmp	lr, r2	@ yy, ye
 2962 0d48 D5FFFF2A 		bcs	.L164		@,
 2963 0d4c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2964              	.LVL206:
 2965              	.L165:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2966              		.loc 1 214 25 is_stmt 1 view .LVU778
 215:armwave.c     ****                     }
 2967              		.loc 1 215 25 view .LVU779
 2968              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2969              		.loc 1 214 43 is_stmt 0 view .LVU780
 2970 0d50 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2971              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2972              		.loc 1 213 21 view .LVU781
 2973 0d54 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2974              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2975              		.loc 1 215 43 view .LVU782
 2976 0d58 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2977              	.LVL207:
 2978              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2979              		.loc 1 213 42 view .LVU783
 2980 0d5c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2981              	.LVL208:
 2982              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2983              		.loc 1 213 21 view .LVU784
 2984 0d60 0E0050E1 		cmp	r0, lr	@ ye, yy
 2985              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2986              		.loc 1 215 53 view .LVU785
 2987 0d64 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2988              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2989              		.loc 1 213 21 view .LVU786
 2990 0d68 F8FFFF1A 		bne	.L165		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2991              		.loc 1 213 21 view .LVU787
 2992 0d6c 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2993 0d70 CBFFFFEA 		b	.L164		@
 2994              	.LVL209:
 2995              	.L179:
 168:armwave.c     **** 
 2996              		.loc 1 168 5 is_stmt 1 view .LVU788
 2997 0d74 10309FE5 		ldr	r3, .L181+4	@,
 2998 0d78 A820A0E3 		mov	r2, #168	@,
 2999 0d7c 0C109FE5 		ldr	r1, .L181+8	@,
 3000 0d80 0C009FE5 		ldr	r0, .L181+12	@,
 3001              	.LVL210:
 168:armwave.c     **** 
 3002              		.loc 1 168 5 is_stmt 0 view .LVU789
 3003 0d84 FEFFFFEB 		bl	__assert_fail		@
 3004              	.LVL211:
 3005              	.L182:
 3006              		.align	2
 3007              	.L181:
 3008 0d88 00000000 		.word	g_armwave_state
 3009 0d8c 00000000 		.word	.LANCHOR0
 3010 0d90 20000000 		.word	.LC2
 3011 0d94 2C000000 		.word	.LC3
 3012              	.LBE44:
 3013              	.LBE46:
 3014              		.cfi_endproc
 3015              	.LFE72:
 3017              		.align	2
 3018              		.global	armwave_test_buffer_alloc
 3019              		.syntax unified
 3020              		.arm
 3021              		.fpu vfp
 3023              	armwave_test_buffer_alloc:
 3024              	.LVL212:
 3025              	.LFB73:
 462:armwave.c     **** 
 463:armwave.c     **** /*
 464:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 465:armwave.c     ****  */
 466:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 467:armwave.c     **** {
 3026              		.loc 1 467 1 is_stmt 1 view -0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 0, uses_anonymous_args = 0
 468:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3030              		.loc 1 468 5 view .LVU791
 3031              	@ armwave.c:467: {
 467:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3032              		.loc 1 467 1 is_stmt 0 view .LVU792
 3033 0d98 70402DE9 		push	{r4, r5, r6, lr}	@
 3034              		.cfi_def_cfa_offset 16
 3035              		.cfi_offset 4, -16
 3036              		.cfi_offset 5, -12
 3037              		.cfi_offset 6, -8
 3038              		.cfi_offset 14, -4
 3039              	@ armwave.c:467: {
 467:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3040              		.loc 1 467 1 view .LVU793
 3041 0d9c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3042              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer != NULL) {
 3043              		.loc 1 468 23 view .LVU794
 3044 0da0 44409FE5 		ldr	r4, .L190	@ tmp128,
 3045 0da4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3046              	.LVL213:
 3047              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer != NULL) {
 3048              		.loc 1 468 7 view .LVU795
 3049 0da8 000050E3 		cmp	r0, #0	@ _1,
 3050 0dac 0000000A 		beq	.L184		@,
 469:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3051              		.loc 1 469 9 is_stmt 1 view .LVU796
 3052 0db0 FEFFFFEB 		bl	free		@
 3053              	.LVL214:
 3054              	.L184:
 470:armwave.c     ****     }
 471:armwave.c     **** 
 472:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 473:armwave.c     **** 
 474:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3055              		.loc 1 474 5 view .LVU797
 3056              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3057              		.loc 1 474 75 is_stmt 0 view .LVU798
 3058 0db4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3059 0db8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3060              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3061              		.loc 1 474 40 view .LVU799
 3062 0dbc 0610A0E1 		mov	r1, r6	@, nsets
 3063              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3064              		.loc 1 474 75 view .LVU800
 3065 0dc0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3066              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3067              		.loc 1 474 40 view .LVU801
 3068 0dc4 0500A0E1 		mov	r0, r5	@, _4
 3069 0dc8 FEFFFFEB 		bl	calloc		@
 3070              	.LVL215:
 3071              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer == NULL) {
 475:armwave.c     **** 
 476:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3072              		.loc 1 476 7 view .LVU802
 3073 0dcc 000050E3 		cmp	r0, #0	@ tmp124,
 3074              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 474:armwave.c     **** 
 3075              		.loc 1 474 38 view .LVU803
 3076 0dd0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3077              		.loc 1 476 5 is_stmt 1 view .LVU804
 3078              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer == NULL) {
 3079              		.loc 1 476 7 is_stmt 0 view .LVU805
 3080 0dd4 7080BD18 		popne	{r4, r5, r6, pc}	@
 477:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3081              		.loc 1 477 9 is_stmt 1 view .LVU806
 3082 0dd8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3083 0ddc 0620A0E1 		mov	r2, r6	@, nsets
 3084 0de0 08009FE5 		ldr	r0, .L190+4	@,
 3085              	@ armwave.c:481: }
 478:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 479:armwave.c     ****         return;
 480:armwave.c     ****     }
 481:armwave.c     **** }
 3086              		.loc 1 481 1 is_stmt 0 view .LVU807
 3087 0de4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3088              		.cfi_restore 14
 3089              		.cfi_restore 6
 3090              		.cfi_restore 5
 3091              		.cfi_restore 4
 3092              		.cfi_def_cfa_offset 0
 3093              	.LVL216:
 3094              	@ armwave.c:477:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 477:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3095              		.loc 1 477 9 view .LVU808
 3096 0de8 FEFFFFEA 		b	printf		@
 3097              	.LVL217:
 3098              	.L191:
 477:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3099              		.loc 1 477 9 view .LVU809
 3100              		.align	2
 3101              	.L190:
 3102 0dec 00000000 		.word	g_armwave_state
 3103 0df0 9C010000 		.word	.LC18
 3104              		.cfi_endproc
 3105              	.LFE73:
 3107              		.align	2
 3108              		.global	armwave_fill_pixbuf_into_pybuffer
 3109              		.syntax unified
 3110              		.arm
 3111              		.fpu vfp
 3113              	armwave_fill_pixbuf_into_pybuffer:
 3114              	.LVL218:
 3115              	.LFB74:
 482:armwave.c     **** 
 483:armwave.c     **** /*
 484:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 485:armwave.c     ****  */
 486:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 487:armwave.c     **** {
 3116              		.loc 1 487 1 is_stmt 1 view -0
 3117              		.cfi_startproc
 3118              		@ args = 0, pretend = 0, frame = 48
 3119              		@ frame_needed = 0, uses_anonymous_args = 0
 488:armwave.c     ****     Py_buffer buffer;
 3120              		.loc 1 488 5 view .LVU811
 489:armwave.c     ****     int ret;
 3121              		.loc 1 489 5 view .LVU812
 490:armwave.c     **** 
 491:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 492:armwave.c     **** 
 493:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3122              		.loc 1 493 5 view .LVU813
 3123              	@ armwave.c:487: {
 487:armwave.c     ****     Py_buffer buffer;
 3124              		.loc 1 487 1 is_stmt 0 view .LVU814
 3125 0df4 04E02DE5 		str	lr, [sp, #-4]!	@,
 3126              		.cfi_def_cfa_offset 4
 3127              		.cfi_offset 14, -4
 3128 0df8 34D04DE2 		sub	sp, sp, #52	@,,
 3129              		.cfi_def_cfa_offset 56
 3130              	@ armwave.c:493:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3131              		.loc 1 493 11 view .LVU815
 3132 0dfc 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3133 0e00 0120A0E3 		mov	r2, #1	@,
 3134 0e04 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3135              	.LVL219:
 494:armwave.c     **** 
 495:armwave.c     ****     if(ret != 0) {
 3136              		.loc 1 495 5 is_stmt 1 view .LVU816
 3137              	@ armwave.c:495:     if(ret != 0) {
 3138              		.loc 1 495 7 is_stmt 0 view .LVU817
 3139 0e08 000050E3 		cmp	r0, #0	@,
 3140 0e0c 0A00001A 		bne	.L196		@,
 496:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 497:armwave.c     ****         Py_RETURN_FALSE;
 498:armwave.c     ****     }
 499:armwave.c     **** 
 500:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 501:armwave.c     **** 
 502:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3141              		.loc 1 502 5 is_stmt 1 view .LVU818
 3142 0e10 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3143              	.LVL220:
 3144              		.loc 1 502 5 is_stmt 0 view .LVU819
 3145 0e14 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3146              	.LVL221:
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 504:armwave.c     **** 
 505:armwave.c     ****     PyBuffer_Release(&buffer);
 3147              		.loc 1 505 5 is_stmt 1 view .LVU820
 3148 0e18 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3149 0e1c FEFFFFEB 		bl	PyBuffer_Release		@
 3150              	.LVL222:
 506:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 507:armwave.c     **** 
 508:armwave.c     ****     Py_RETURN_TRUE;
 3151              		.loc 1 508 5 view .LVU821
 3152              	.LBB47:
 3153              	.LBI47:
 3154              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3155              		.loc 2 456 20 view .LVU822
 3156              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3157              		.loc 2 458 21 view .LVU823
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3158              		.loc 2 459 5 view .LVU824
 3159              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3160              		.loc 2 459 18 is_stmt 0 view .LVU825
 3161 0e20 38309FE5 		ldr	r3, .L197	@ tmp126,
 3162              	.LBE48:
 3163              	.LBE47:
 3164              	@ armwave.c:508:     Py_RETURN_TRUE;
 3165              		.loc 1 508 5 view .LVU826
 3166 0e24 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3167              	.LBB50:
 3168              	.LBB49:
 3169              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3170              		.loc 2 459 18 view .LVU827
 3171 0e28 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3172 0e2c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3173 0e30 002083E5 		str	r2, [r3]	@ tmp128,
 3174              	.LBE49:
 3175              	.LBE50:
 3176              	@ armwave.c:509: }
 509:armwave.c     **** }
 3177              		.loc 1 509 1 view .LVU828
 3178 0e34 34D08DE2 		add	sp, sp, #52	@,,
 3179              		.cfi_remember_state
 3180              		.cfi_def_cfa_offset 4
 3181              		@ sp needed	@
 3182 0e38 04F09DE4 		ldr	pc, [sp], #4	@
 3183              	.LVL223:
 3184              	.L196:
 3185              		.cfi_restore_state
 496:armwave.c     ****         Py_RETURN_FALSE;
 3186              		.loc 1 496 9 is_stmt 1 view .LVU829
 3187 0e3c 20009FE5 		ldr	r0, .L197+4	@,
 3188              	.LVL224:
 496:armwave.c     ****         Py_RETURN_FALSE;
 3189              		.loc 1 496 9 is_stmt 0 view .LVU830
 3190 0e40 FEFFFFEB 		bl	puts		@
 3191              	.LVL225:
 497:armwave.c     ****     }
 3192              		.loc 1 497 9 is_stmt 1 view .LVU831
 3193              	.LBB51:
 3194              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3195              		.loc 2 456 20 view .LVU832
 3196              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3197              		.loc 2 458 21 view .LVU833
 3198              		.loc 2 459 5 view .LVU834
 3199              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3200              		.loc 2 459 18 is_stmt 0 view .LVU835
 3201 0e44 1C309FE5 		ldr	r3, .L197+8	@ tmp120,
 3202              	.LBE52:
 3203              	.LBE51:
 3204              	@ armwave.c:497:         Py_RETURN_FALSE;
 497:armwave.c     ****     }
 3205              		.loc 1 497 9 view .LVU836
 3206 0e48 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3207              	.LBB54:
 3208              	.LBB53:
 3209              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3210              		.loc 2 459 18 view .LVU837
 3211 0e4c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3212 0e50 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3213 0e54 002083E5 		str	r2, [r3]	@ tmp122,
 3214              	.LBE53:
 3215              	.LBE54:
 3216              	@ armwave.c:509: }
 3217              		.loc 1 509 1 view .LVU838
 3218 0e58 34D08DE2 		add	sp, sp, #52	@,,
 3219              		.cfi_def_cfa_offset 4
 3220              		@ sp needed	@
 3221 0e5c 04F09DE4 		ldr	pc, [sp], #4	@
 3222              	.L198:
 3223              		.align	2
 3224              	.L197:
 3225 0e60 00000000 		.word	_Py_TrueStruct
 3226 0e64 F0010000 		.word	.LC19
 3227 0e68 00000000 		.word	_Py_FalseStruct
 3228              		.cfi_endproc
 3229              	.LFE74:
 3231              		.align	2
 3232              		.global	armwave_test_create_am_sine
 3233              		.syntax unified
 3234              		.arm
 3235              		.fpu vfp
 3237              	armwave_test_create_am_sine:
 3238              	.LVL226:
 3239              	.LFB75:
 510:armwave.c     **** 
 511:armwave.c     **** /*
 512:armwave.c     ****  * Make a test AM waveform for render tests.
 513:armwave.c     ****  *
 514:armwave.c     ****  * @param   mod                     modulation depth
 515:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 516:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 517:armwave.c     ****  */
 518:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 519:armwave.c     **** {
 3240              		.loc 1 519 1 is_stmt 1 view -0
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 8
 3243              		@ frame_needed = 0, uses_anonymous_args = 0
 520:armwave.c     ****     float v, noise, xnoise, mod_val;
 3244              		.loc 1 520 5 view .LVU840
 521:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3245              		.loc 1 521 5 view .LVU841
 3246              	@ armwave.c:519: {
 519:armwave.c     ****     float v, noise, xnoise, mod_val;
 3247              		.loc 1 519 1 is_stmt 0 view .LVU842
 3248 0e6c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3249              		.cfi_def_cfa_offset 32
 3250              		.cfi_offset 4, -32
 3251              		.cfi_offset 5, -28
 3252              		.cfi_offset 6, -24
 3253              		.cfi_offset 7, -20
 3254              		.cfi_offset 8, -16
 3255              		.cfi_offset 9, -12
 3256              		.cfi_offset 10, -8
 3257              		.cfi_offset 14, -4
 3258              	@ armwave.c:521:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3259              		.loc 1 521 38 view .LVU843
 3260 0e70 7A7A9FED 		vldr.32	s14, .L230	@ tmp180,
 3261              	@ armwave.c:521:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3262              		.loc 1 521 55 view .LVU844
 3263 0e74 00529FE5 		ldr	r5, .L230+28	@ tmp250,
 3264              	@ armwave.c:519: {
 519:armwave.c     ****     float v, noise, xnoise, mod_val;
 3265              		.loc 1 519 1 view .LVU845
 3266 0e78 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3267              		.cfi_def_cfa_offset 80
 3268              		.cfi_offset 80, -80
 3269              		.cfi_offset 81, -76
 3270              		.cfi_offset 82, -72
 3271              		.cfi_offset 83, -68
 3272              		.cfi_offset 84, -64
 3273              		.cfi_offset 85, -60
 3274              		.cfi_offset 86, -56
 3275              		.cfi_offset 87, -52
 3276              		.cfi_offset 88, -48
 3277              		.cfi_offset 89, -44
 3278              		.cfi_offset 90, -40
 3279              		.cfi_offset 91, -36
 3280 0e7c 0090A0E1 		mov	r9, r0	@ sets, sets
 3281              	@ armwave.c:521:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3282              		.loc 1 521 38 view .LVU846
 3283 0e80 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3284              	@ armwave.c:525:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 522:armwave.c     ****     int s, set_offset = 0;
 523:armwave.c     ****     int w, x;
 524:armwave.c     **** 
 525:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3285              		.loc 1 525 70 view .LVU847
 3286 0e84 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3287 0e88 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3288              	.LBB57:
 3289              	.LBB58:
 3290              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer != NULL) {
 468:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3291              		.loc 1 468 23 view .LVU848
 3292 0e8c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3293              	.LVL227:
 468:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3294              		.loc 1 468 23 view .LVU849
 3295              	.LBE58:
 3296              	.LBE57:
 3297              	@ armwave.c:521:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 521:armwave.c     ****     int s, set_offset = 0;
 3298              		.loc 1 521 38 view .LVU850
 3299 0e90 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3300              	@ armwave.c:525:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3301              		.loc 1 525 70 view .LVU851
 3302 0e94 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3303              	@ armwave.c:519: {
 519:armwave.c     ****     float v, noise, xnoise, mod_val;
 3304              		.loc 1 519 1 view .LVU852
 3305 0e98 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3306              	.LBB62:
 3307              	.LBB59:
 3308              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer != NULL) {
 468:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3309              		.loc 1 468 7 view .LVU853
 3310 0e9c 000050E3 		cmp	r0, #0	@ _82,
 3311              	.LBE59:
 3312              	.LBE62:
 3313              	@ armwave.c:519: {
 519:armwave.c     ****     float v, noise, xnoise, mod_val;
 3314              		.loc 1 519 1 view .LVU854
 3315 0ea0 08D04DE2 		sub	sp, sp, #8	@,,
 3316              		.cfi_def_cfa_offset 88
 3317              	@ armwave.c:526:     g_armwave_state.test_wave_buffer_nsets = sets;
 526:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3318              		.loc 1 526 44 view .LVU855
 3319 0ea4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3320              	@ armwave.c:525:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 525:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3321              		.loc 1 525 45 view .LVU856
 3322 0ea8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3323              	@ armwave.c:521:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 521:armwave.c     ****     int s, set_offset = 0;
 3324              		.loc 1 521 38 view .LVU857
 3325 0eac 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3326              	@ armwave.c:521:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 521:armwave.c     ****     int s, set_offset = 0;
 3327              		.loc 1 521 11 view .LVU858
 3328 0eb0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3329              	.LVL228:
 522:armwave.c     ****     int w, x;
 3330              		.loc 1 522 5 is_stmt 1 view .LVU859
 523:armwave.c     **** 
 3331              		.loc 1 523 5 view .LVU860
 525:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3332              		.loc 1 525 5 view .LVU861
 3333              		.loc 1 526 5 view .LVU862
 527:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3334              		.loc 1 527 5 view .LVU863
 3335              	.LBB63:
 3336              	.LBI57:
 466:armwave.c     **** {
 3337              		.loc 1 466 6 view .LVU864
 3338              	.LBB60:
 468:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3339              		.loc 1 468 5 view .LVU865
 3340              	@ armwave.c:468:     if(g_armwave_state.test_wave_buffer != NULL) {
 468:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3341              		.loc 1 468 7 is_stmt 0 view .LVU866
 3342 0eb4 0000000A 		beq	.L200		@,
 469:armwave.c     ****     }
 3343              		.loc 1 469 9 is_stmt 1 view .LVU867
 3344 0eb8 FEFFFFEB 		bl	free		@
 3345              	.LVL229:
 3346              	.L200:
 474:armwave.c     **** 
 3347              		.loc 1 474 5 view .LVU868
 3348              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 474:armwave.c     **** 
 3349              		.loc 1 474 75 is_stmt 0 view .LVU869
 3350 0ebc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3351 0ec0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3352              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 474:armwave.c     **** 
 3353              		.loc 1 474 40 view .LVU870
 3354 0ec4 0910A0E1 		mov	r1, r9	@, sets
 3355              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 474:armwave.c     **** 
 3356              		.loc 1 474 75 view .LVU871
 3357 0ec8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3358              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 474:armwave.c     **** 
 3359              		.loc 1 474 40 view .LVU872
 3360 0ecc 0400A0E1 		mov	r0, r4	@, _85
 3361 0ed0 FEFFFFEB 		bl	calloc		@
 3362              	.LVL230:
 3363              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer == NULL) {
 476:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3364              		.loc 1 476 7 view .LVU873
 3365 0ed4 000050E3 		cmp	r0, #0	@ tmp191,
 3366              	@ armwave.c:474:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 474:armwave.c     **** 
 3367              		.loc 1 474 38 view .LVU874
 3368 0ed8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 476:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3369              		.loc 1 476 5 is_stmt 1 view .LVU875
 3370              	@ armwave.c:476:     if(g_armwave_state.test_wave_buffer == NULL) {
 476:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3371              		.loc 1 476 7 is_stmt 0 view .LVU876
 3372 0edc 5A00000A 		beq	.L229		@,
 3373              	.L201:
 3374              	.LVL231:
 476:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3375              		.loc 1 476 7 view .LVU877
 3376              	.LBE60:
 3377              	.LBE63:
 3378              	@ armwave.c:529:     for(s = 0; s < sets; s++) {
 528:armwave.c     **** 
 529:armwave.c     ****     for(s = 0; s < sets; s++) {
 3379              		.loc 1 529 5 discriminator 1 view .LVU878
 3380 0ee0 000059E3 		cmp	r9, #0	@ sets,
 3381 0ee4 550000DA 		ble	.L199		@,
 3382              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 530:armwave.c     ****         printf("Calculating test set %d\n", s);
 531:armwave.c     ****     
 532:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 533:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 534:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 535:armwave.c     **** 
 536:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 537:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 538:armwave.c     ****                 noise *= noise;
 539:armwave.c     ****                 noise *= noise;
 540:armwave.c     ****                 noise *= noise;
 541:armwave.c     **** 
 542:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 543:armwave.c     ****                     noise = -noise;
 544:armwave.c     **** 
 545:armwave.c     ****                 noise += 1.0f;
 546:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 547:armwave.c     **** 
 548:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3383              		.loc 1 548 45 view .LVU879
 3384 0ee8 5C8A9FED 		vldr.32	s16, .L230	@ tmp258,
 3385              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 549:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 550:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 551:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3386              		.loc 1 551 104 view .LVU880
 3387 0eec 5CCA9FED 		vldr.32	s24, .L230+4	@ tmp259,
 3388              	@ armwave.c:529:     for(s = 0; s < sets; s++) {
 529:armwave.c     ****         printf("Calculating test set %d\n", s);
 3389              		.loc 1 529 5 view .LVU881
 3390 0ef0 0070A0E3 		mov	r7, #0	@ set_offset,
 3391              	@ armwave.c:530:         printf("Calculating test set %d\n", s);
 530:armwave.c     ****         printf("Calculating test set %d\n", s);
 3392              		.loc 1 530 9 view .LVU882
 3393 0ef4 84A19FE5 		ldr	r10, .L230+32	@ tmp257,
 3394              	@ armwave.c:529:     for(s = 0; s < sets; s++) {
 529:armwave.c     ****         printf("Calculating test set %d\n", s);
 3395              		.loc 1 529 5 view .LVU883
 3396 0ef8 0780A0E1 		mov	r8, r7	@ s, set_offset
 3397              	.LVL232:
 3398              	.L202:
 530:armwave.c     ****         printf("Calculating test set %d\n", s);
 3399              		.loc 1 530 9 is_stmt 1 view .LVU884
 3400 0efc 0810A0E1 		mov	r1, r8	@, s
 3401 0f00 0A00A0E1 		mov	r0, r10	@, tmp257
 3402 0f04 FEFFFFEB 		bl	printf		@
 3403              	.LVL233:
 532:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3404              		.loc 1 532 9 view .LVU885
 3405              	@ armwave.c:532:         for(w = 0; w < g_armwave_state.waves; w++) {
 532:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3406              		.loc 1 532 39 is_stmt 0 view .LVU886
 3407 0f08 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3408              	@ armwave.c:532:         for(w = 0; w < g_armwave_state.waves; w++) {
 532:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3409              		.loc 1 532 9 view .LVU887
 3410 0f0c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3411 0f10 450000DA 		ble	.L203		@,
 3412              	@ armwave.c:534:             mod_val = 0.5f + (_1_waves_mod * w);
 534:armwave.c     **** 
 3413              		.loc 1 534 21 view .LVU888
 3414 0f14 53CADFED 		vldr.32	s25, .L230+8	@ tmp200,
 3415              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3416              		.loc 1 548 33 view .LVU889
 3417 0f18 53BA9FED 		vldr.32	s22, .L230+12	@ tmp253,
 3418              	@ armwave.c:546:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 546:armwave.c     **** 
 3419              		.loc 1 546 24 view .LVU890
 3420 0f1c 53AADFED 		vldr.32	s21, .L230+16	@ tmp254,
 3421 0f20 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3422              	@ armwave.c:532:         for(w = 0; w < g_armwave_state.waves; w++) {
 532:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3423              		.loc 1 532 15 view .LVU891
 3424 0f24 0060A0E3 		mov	r6, #0	@ w,
 3425              	.LVL234:
 3426              	.L210:
 534:armwave.c     **** 
 3427              		.loc 1 534 13 is_stmt 1 view .LVU892
 3428              	@ armwave.c:534:             mod_val = 0.5f + (_1_waves_mod * w);
 534:armwave.c     **** 
 3429              		.loc 1 534 21 is_stmt 0 view .LVU893
 3430 0f28 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3431 0f2c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3432              	@ armwave.c:536:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3433              		.loc 1 536 13 view .LVU894
 3434 0f30 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3435              	@ armwave.c:534:             mod_val = 0.5f + (_1_waves_mod * w);
 534:armwave.c     **** 
 3436              		.loc 1 534 21 view .LVU895
 3437 0f34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3438 0f38 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3439              	.LVL235:
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3440              		.loc 1 536 13 is_stmt 1 view .LVU896
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3441              		.loc 1 536 13 is_stmt 0 view .LVU897
 3442 0f3c 370000DA 		ble	.L204		@,
 3443 0f40 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3444              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3445              		.loc 1 551 113 view .LVU898
 3446 0f44 4AAA9FED 		vldr.32	s20, .L230+20	@ tmp229,
 3447 0f48 4A8ADFED 		vldr.32	s17, .L230+24	@ tmp230,
 3448              	@ armwave.c:536:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3449              		.loc 1 536 19 view .LVU899
 3450 0f4c 0040A0E3 		mov	r4, #0	@ x,
 3451              	.LVL236:
 3452              	.L209:
 537:armwave.c     ****                 noise *= noise;
 3453              		.loc 1 537 17 is_stmt 1 view .LVU900
 3454              	@ armwave.c:537:                 noise  = ((rand() & 0xffff) * noise_fraction);
 537:armwave.c     ****                 noise *= noise;
 3455              		.loc 1 537 28 is_stmt 0 view .LVU901
 3456 0f50 FEFFFFEB 		bl	rand		@
 3457              	.LVL237:
 3458              	@ armwave.c:537:                 noise  = ((rand() & 0xffff) * noise_fraction);
 537:armwave.c     ****                 noise *= noise;
 3459              		.loc 1 537 35 view .LVU902
 3460 0f54 7000FFE6 		uxth	r0, r0	@ tmp201,
 3461              	@ armwave.c:537:                 noise  = ((rand() & 0xffff) * noise_fraction);
 537:armwave.c     ****                 noise *= noise;
 3462              		.loc 1 537 45 view .LVU903
 3463 0f58 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3464 0f5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3465              	@ armwave.c:537:                 noise  = ((rand() & 0xffff) * noise_fraction);
 537:armwave.c     ****                 noise *= noise;
 3466              		.loc 1 537 24 view .LVU904
 3467 0f60 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3468              	.LVL238:
 538:armwave.c     ****                 noise *= noise;
 3469              		.loc 1 538 17 is_stmt 1 view .LVU905
 3470              	@ armwave.c:538:                 noise *= noise;
 538:armwave.c     ****                 noise *= noise;
 3471              		.loc 1 538 23 is_stmt 0 view .LVU906
 3472 0f64 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3473              	.LVL239:
 539:armwave.c     ****                 noise *= noise;
 3474              		.loc 1 539 17 is_stmt 1 view .LVU907
 3475              	@ armwave.c:539:                 noise *= noise;
 539:armwave.c     ****                 noise *= noise;
 3476              		.loc 1 539 23 is_stmt 0 view .LVU908
 3477 0f68 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3478              	.LVL240:
 540:armwave.c     **** 
 3479              		.loc 1 540 17 is_stmt 1 view .LVU909
 3480              	@ armwave.c:540:                 noise *= noise;
 540:armwave.c     **** 
 3481              		.loc 1 540 23 is_stmt 0 view .LVU910
 3482 0f6c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3483              	.LVL241:
 542:armwave.c     ****                     noise = -noise;
 3484              		.loc 1 542 17 is_stmt 1 view .LVU911
 3485              	@ armwave.c:542:                 if((rand() & 0xffff) > 0x7fff)
 542:armwave.c     ****                     noise = -noise;
 3486              		.loc 1 542 21 is_stmt 0 view .LVU912
 3487 0f70 FEFFFFEB 		bl	rand		@
 3488              	.LVL242:
 543:armwave.c     **** 
 3489              		.loc 1 543 21 is_stmt 1 view .LVU913
 3490              	@ armwave.c:542:                 if((rand() & 0xffff) > 0x7fff)
 542:armwave.c     ****                     noise = -noise;
 3491              		.loc 1 542 19 is_stmt 0 view .LVU914
 3492 0f74 020910E3 		tst	r0, #32768	@,
 3493              	@ armwave.c:543:                     noise = -noise;
 543:armwave.c     **** 
 3494              		.loc 1 543 27 view .LVU915
 3495 0f78 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3496              	.LVL243:
 545:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3497              		.loc 1 545 17 is_stmt 1 view .LVU916
 546:armwave.c     **** 
 3498              		.loc 1 546 17 view .LVU917
 3499              	@ armwave.c:546:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 546:armwave.c     **** 
 3500              		.loc 1 546 27 is_stmt 0 view .LVU918
 3501 0f7c FEFFFFEB 		bl	rand		@
 3502              	.LVL244:
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3503              		.loc 1 548 17 is_stmt 1 view .LVU919
 3504              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3505              		.loc 1 548 45 is_stmt 0 view .LVU920
 3506 0f80 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3507              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3508              		.loc 1 548 33 view .LVU921
 3509 0f84 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3510              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3511              		.loc 1 548 45 view .LVU922
 3512 0f88 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3513              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3514              		.loc 1 548 33 view .LVU923
 3515 0f8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3516              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3517              		.loc 1 548 45 view .LVU924
 3518 0f90 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3519              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3520              		.loc 1 548 33 view .LVU925
 3521 0f94 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3522              	@ armwave.c:546:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 546:armwave.c     **** 
 3523              		.loc 1 546 34 view .LVU926
 3524 0f98 7000FFE6 		uxth	r0, r0	@ tmp214,
 3525              	.LVL245:
 3526              	@ armwave.c:546:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 546:armwave.c     **** 
 3527              		.loc 1 546 44 view .LVU927
 3528 0f9c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3529 0fa0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3530              	@ armwave.c:546:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 546:armwave.c     **** 
 3531              		.loc 1 546 24 view .LVU928
 3532 0fa4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3533              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3534              		.loc 1 548 77 view .LVU929
 3535 0fa8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3536              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3537              		.loc 1 548 22 view .LVU930
 3538 0fac C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3539 0fb0 FEFFFFEB 		bl	sin		@
 3540              	.LVL246:
 3541              		.loc 1 551 17 is_stmt 1 view .LVU931
 3542              	@ armwave.c:545:                 noise += 1.0f;
 545:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3543              		.loc 1 545 23 is_stmt 0 view .LVU932
 3544 0fb4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3545              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3546              		.loc 1 551 104 view .LVU933
 3547 0fb8 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3548              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3549              		.loc 1 548 98 view .LVU934
 3550 0fbc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3551              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3552              		.loc 1 548 87 view .LVU935
 3553 0fc0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3554              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3555              		.loc 1 548 98 view .LVU936
 3556 0fc4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3557              	@ armwave.c:548:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 548:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3558              		.loc 1 548 19 view .LVU937
 3559 0fc8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3560              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3561              		.loc 1 551 113 view .LVU938
 3562 0fcc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3563 0fd0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3564 0fd4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3565 0fd8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3566 0fdc 050000DA 		ble	.L206		@,
 3567              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3568              		.loc 1 551 104 discriminator 1 view .LVU939
 3569 0fe0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3570 0fe4 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3571 0fe8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3572 0fec E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3573 0ff0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3574 0ff4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3575              	.L206:
 3576              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3577              		.loc 1 551 57 discriminator 12 view .LVU940
 3578 0ff8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3579              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3580              		.loc 1 551 102 discriminator 12 view .LVU941
 3581 0ffc 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3582 1000 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3583 1004 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3584              	@ armwave.c:536:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3585              		.loc 1 536 58 discriminator 12 view .LVU942
 3586 1008 014084E2 		add	r4, r4, #1	@ x, x,
 3587              	.LVL247:
 3588              	@ armwave.c:551:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3589              		.loc 1 551 102 discriminator 12 view .LVU943
 3590 100c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3591              	@ armwave.c:536:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3592              		.loc 1 536 43 discriminator 12 view .LVU944
 3593 1010 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3594              	@ armwave.c:536:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 536:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3595              		.loc 1 536 13 discriminator 12 view .LVU945
 3596 1014 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3597 1018 CCFFFFCA 		bgt	.L209		@,
 3598 101c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3599              	.LVL248:
 3600              	.L204:
 3601              	@ armwave.c:532:         for(w = 0; w < g_armwave_state.waves; w++) {
 532:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3602              		.loc 1 532 48 discriminator 2 view .LVU946
 3603 1020 016086E2 		add	r6, r6, #1	@ w, w,
 3604              	.LVL249:
 3605              	@ armwave.c:532:         for(w = 0; w < g_armwave_state.waves; w++) {
 532:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3606              		.loc 1 532 9 discriminator 2 view .LVU947
 3607 1024 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3608 1028 BEFFFFBA 		blt	.L210		@,
 3609              	.LVL250:
 3610              	.L203:
 552:armwave.c     ****             }
 553:armwave.c     ****         }
 554:armwave.c     **** 
 555:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3611              		.loc 1 555 9 is_stmt 1 discriminator 2 view .LVU948
 3612              	@ armwave.c:555:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3613              		.loc 1 555 46 is_stmt 0 discriminator 2 view .LVU949
 3614 102c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3615              	@ armwave.c:529:     for(s = 0; s < sets; s++) {
 529:armwave.c     ****         printf("Calculating test set %d\n", s);
 3616              		.loc 1 529 27 discriminator 2 view .LVU950
 3617 1030 018088E2 		add	r8, r8, #1	@ s, s,
 3618              	.LVL251:
 3619              	@ armwave.c:529:     for(s = 0; s < sets; s++) {
 529:armwave.c     ****         printf("Calculating test set %d\n", s);
 3620              		.loc 1 529 5 discriminator 2 view .LVU951
 3621 1034 080059E1 		cmp	r9, r8	@ sets, s
 3622              	@ armwave.c:555:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3623              		.loc 1 555 20 discriminator 2 view .LVU952
 3624 1038 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3625              	.LVL252:
 3626              	@ armwave.c:529:     for(s = 0; s < sets; s++) {
 529:armwave.c     ****         printf("Calculating test set %d\n", s);
 3627              		.loc 1 529 5 discriminator 2 view .LVU953
 3628 103c AEFFFF1A 		bne	.L202		@,
 3629              	.LVL253:
 3630              	.L199:
 3631              	@ armwave.c:557: }
 556:armwave.c     ****     }
 557:armwave.c     **** }
 3632              		.loc 1 557 1 view .LVU954
 3633 1040 08D08DE2 		add	sp, sp, #8	@,,
 3634              		.cfi_remember_state
 3635              		.cfi_def_cfa_offset 80
 3636              		@ sp needed	@
 3637 1044 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3638              		.cfi_restore 90
 3639              		.cfi_restore 91
 3640              		.cfi_restore 88
 3641              		.cfi_restore 89
 3642              		.cfi_restore 86
 3643              		.cfi_restore 87
 3644              		.cfi_restore 84
 3645              		.cfi_restore 85
 3646              		.cfi_restore 82
 3647              		.cfi_restore 83
 3648              		.cfi_restore 80
 3649              		.cfi_restore 81
 3650              		.cfi_def_cfa_offset 32
 3651              	.LVL254:
 3652              		.loc 1 557 1 view .LVU955
 3653 1048 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3654              	.LVL255:
 3655              	.L229:
 3656              		.cfi_restore_state
 3657              	.LBB64:
 3658              	.LBB61:
 477:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3659              		.loc 1 477 9 is_stmt 1 view .LVU956
 3660 104c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3661 1050 0920A0E1 		mov	r2, r9	@, sets
 3662 1054 28009FE5 		ldr	r0, .L230+36	@,
 3663 1058 FEFFFFEB 		bl	printf		@
 3664              	.LVL256:
 479:armwave.c     ****     }
 3665              		.loc 1 479 9 view .LVU957
 3666 105c 9FFFFFEA 		b	.L201		@
 3667              	.L231:
 3668              		.align	2
 3669              	.L230:
 3670 1060 0000803F 		.word	1065353216
 3671 1064 00007F43 		.word	1132396544
 3672 1068 0000003F 		.word	1056964608
 3673 106c C3F5C840 		.word	1086911939
 3674 1070 38FFC74A 		.word	1254620984
 3675 1074 0000FE42 		.word	1123942400
 3676 1078 00000043 		.word	1124073472
 3677 107c 00000000 		.word	g_armwave_state
 3678 1080 44020000 		.word	.LC20
 3679 1084 9C010000 		.word	.LC18
 3680              	.LBE61:
 3681              	.LBE64:
 3682              		.cfi_endproc
 3683              	.LFE75:
 3685              		.align	2
 3686              		.global	armwave_cleanup
 3687              		.syntax unified
 3688              		.arm
 3689              		.fpu vfp
 3691              	armwave_cleanup:
 3692              	.LFB76:
 558:armwave.c     **** 
 559:armwave.c     **** /*
 560:armwave.c     ****  * Make a test square waveform.
 561:armwave.c     ****  *
 562:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 563:armwave.c     ****  */
 564:armwave.c     **** #if 0
 565:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 566:armwave.c     **** {
 567:armwave.c     ****     uint8_t v;
 568:armwave.c     ****     float noise, xnoise;
 569:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 570:armwave.c     ****     int w, x;
 571:armwave.c     **** 
 572:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 573:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 574:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 575:armwave.c     ****             noise *= noise;
 576:armwave.c     ****             noise *= noise;
 577:armwave.c     ****             noise *= noise;
 578:armwave.c     **** 
 579:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 580:armwave.c     ****                 noise = -noise;
 581:armwave.c     **** 
 582:armwave.c     ****             //noise += 1.0f;
 583:armwave.c     **** 
 584:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 585:armwave.c     ****                 new_level = 0.2f;
 586:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 587:armwave.c     ****                 new_level = 0.8f;
 588:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 589:armwave.c     ****                 new_level = 0.2f;
 590:armwave.c     ****             } else {
 591:armwave.c     ****                 new_level = 0.8f;
 592:armwave.c     ****             }
 593:armwave.c     **** 
 594:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 595:armwave.c     **** 
 596:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 597:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 598:armwave.c     ****         }
 599:armwave.c     ****     }
 600:armwave.c     **** }
 601:armwave.c     **** #endif
 602:armwave.c     **** 
 603:armwave.c     **** /*
 604:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 605:armwave.c     ****  */
 606:armwave.c     **** void armwave_cleanup()
 607:armwave.c     **** {
 3693              		.loc 1 607 1 view -0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 0
 3696              		@ frame_needed = 0, uses_anonymous_args = 0
 608:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3697              		.loc 1 608 5 view .LVU959
 3698              	@ armwave.c:607: {
 607:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3699              		.loc 1 607 1 is_stmt 0 view .LVU960
 3700 1088 10402DE9 		push	{r4, lr}	@
 3701              		.cfi_def_cfa_offset 8
 3702              		.cfi_offset 4, -8
 3703              		.cfi_offset 14, -4
 3704              	@ armwave.c:608:     free(g_armwave_state.out_pixbuf);
 3705              		.loc 1 608 25 view .LVU961
 3706 108c 34409FE5 		ldr	r4, .L234	@ tmp114,
 3707              	@ armwave.c:608:     free(g_armwave_state.out_pixbuf);
 3708              		.loc 1 608 5 view .LVU962
 3709 1090 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3710 1094 FEFFFFEB 		bl	free		@
 3711              	.LVL257:
 609:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3712              		.loc 1 609 5 is_stmt 1 view .LVU963
 3713 1098 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3714 109c FEFFFFEB 		bl	free		@
 3715              	.LVL258:
 610:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3716              		.loc 1 610 5 view .LVU964
 3717 10a0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3718 10a4 FEFFFFEB 		bl	free		@
 3719              	.LVL259:
 611:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3720              		.loc 1 611 5 view .LVU965
 3721 10a8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3722 10ac FEFFFFEB 		bl	free		@
 3723              	.LVL260:
 612:armwave.c     **** 
 613:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3724              		.loc 1 613 5 view .LVU966
 3725              	@ armwave.c:613:     g_armwave_state.out_pixbuf = NULL;
 3726              		.loc 1 613 32 is_stmt 0 view .LVU967
 3727 10b0 0030A0E3 		mov	r3, #0	@ tmp123,
 3728 10b4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 614:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3729              		.loc 1 614 5 is_stmt 1 view .LVU968
 3730              	@ armwave.c:614:     g_armwave_state.ch1_buffer = NULL;
 3731              		.loc 1 614 32 is_stmt 0 view .LVU969
 3732 10b8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 615:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3733              		.loc 1 615 5 is_stmt 1 view .LVU970
 3734              	@ armwave.c:615:     g_armwave_state.xcoord_to_xpixel = NULL;
 3735              		.loc 1 615 38 is_stmt 0 view .LVU971
 3736 10bc 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 616:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3737              		.loc 1 616 5 is_stmt 1 view .LVU972
 3738              	@ armwave.c:616:     g_armwave_state.test_wave_buffer = NULL;
 3739              		.loc 1 616 38 is_stmt 0 view .LVU973
 3740 10c0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3741              	@ armwave.c:617: }
 617:armwave.c     **** }
 3742              		.loc 1 617 1 view .LVU974
 3743 10c4 1080BDE8 		pop	{r4, pc}	@
 3744              	.L235:
 3745              		.align	2
 3746              	.L234:
 3747 10c8 00000000 		.word	g_armwave_state
 3748              		.cfi_endproc
 3749              	.LFE76:
 3751              		.comm	gamma_table,256,4
 3752              		.comm	g_armwave_state,136,4
 3753              		.section	.rodata
 3754              		.align	2
 3755              		.set	.LANCHOR0,. + 0
 3758              	__PRETTY_FUNCTION__.17095:
 3759 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3759      6176655F 
 3759      66696C6C 
 3759      5F706978 
 3759      6275665F 
 3760 001b 00       		.space	1
 3763              	__PRETTY_FUNCTION__.17117:
 3764 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3764      6176655F 
 3764      73657475 
 3764      705F7265 
 3764      6E646572 
 3765 0031 000000   		.space	3
 3768              	__PRETTY_FUNCTION__.17124:
 3769 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3769      6176655F 
 3769      7365745F 
 3769      77617665 
 3769      5F706F69 
 3770 004d 000000   		.space	3
 3773              	__PRETTY_FUNCTION__.17131:
 3774 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3774      6176655F 
 3774      7365745F 
 3774      77617665 
 3774      5F706F69 
 3775              		.section	.rodata.str1.4,"aMS",%progbits,1
 3776              		.align	2
 3777              	.LC0:
 3778 0000 76302E30 		.ascii	"v0.0.1\000"
 3778      2E3100
 3779 0007 00       		.space	1
 3780              	.LC1:
 3781 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3781      61766520 
 3781      76657273 
 3781      696F6E3A 
 3781      2025730A 
 3782 001d 000000   		.space	3
 3783              	.LC2:
 3784 0020 61726D77 		.ascii	"armwave.c\000"
 3784      6176652E 
 3784      6300
 3785 002a 0000     		.space	2
 3786              	.LC3:
 3787 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3787      62756666 
 3787      65722021 
 3787      3D204E55 
 3787      4C4C00
 3788 003f 00       		.space	1
 3789              	.LC4:
 3790 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3790      20653D25 
 3790      6420773D 
 3790      25642077 
 3790      733D2564 
 3791              	.LC5:
 3792 006c 73746172 		.ascii	"start_point < end_point\000"
 3792      745F706F 
 3792      696E7420 
 3792      3C20656E 
 3792      645F706F 
 3793              	.LC6:
 3794 0084 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 3794      7566665F 
 3794      73697A65 
 3794      3D25640A 
 3794      00
 3795 0095 000000   		.space	3
 3796              	.LC7:
 3797 0098 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3797      6D776176 
 3797      655F7374 
 3797      6174652E 
 3797      6368315F 
 3798 00bb 00       		.space	1
 3799              	.LC8:
 3800 00bc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3800      6D776176 
 3800      655F7374 
 3800      6174652E 
 3800      78636F6F 
 3801 00e5 000000   		.space	3
 3802              	.LC9:
 3803 00e8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3803      3A203078 
 3803      25303878 
 3803      20307825 
 3803      30387820 
 3804              	.LC10:
 3805 010c 77617665 		.ascii	"wave_buffer != NULL\000"
 3805      5F627566 
 3805      66657220 
 3805      213D204E 
 3805      554C4C00 
 3806              	.LC11:
 3807 0120 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3807      6176655F 
 3807      7365745F 
 3807      77617665 
 3807      5F706F69 
 3808 0153 78636565 		.ascii	"xceeded\000"
 3808      64656400 
 3809 015b 00       		.space	1
 3810              	.LC12:
 3811 015c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3811      5F627566 
 3811      6665725F 
 3811      70747220 
 3811      213D2030 
 3812 0171 000000   		.space	3
 3813              	.LC13:
 3814 0174 776200   		.ascii	"wb\000"
 3815 0177 00       		.space	1
 3816              	.LC14:
 3817 0178 50330A00 		.ascii	"P3\012\000"
 3818              	.LC15:
 3819 017c 25642025 		.ascii	"%d %d\012\000"
 3819      640A00
 3820 0183 00       		.space	1
 3821              	.LC16:
 3822 0184 3235350A 		.ascii	"255\012\000"
 3822      00
 3823 0189 000000   		.space	3
 3824              	.LC17:
 3825 018c 25336420 		.ascii	"%3d %3d %3d\012\000"
 3825      25336420 
 3825      2533640A 
 3825      00
 3826 0199 000000   		.space	3
 3827              	.LC18:
 3828 019c 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3828      6176655F 
 3828      74657374 
 3828      5F627566 
 3828      6665725F 
 3829 01cf 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3829      20627566 
 3829      66657220 
 3829      28256420 
 3829      62797465 
 3830              	.LC19:
 3831 01f0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3831      6176655F 
 3831      66696C6C 
 3831      5F706978 
 3831      6275665F 
 3832 0223 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3832      20666169 
 3832      6C65642C 
 3832      20726574 
 3832      75726E69 
 3833 0242 0000     		.space	2
 3834              	.LC20:
 3835 0244 43616C63 		.ascii	"Calculating test set %d\012\000"
 3835      756C6174 
 3835      696E6720 
 3835      74657374 
 3835      20736574 
 3836              		.text
 3837              	.Letext0:
 3838              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3839              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3840              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3841              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3842              		.file 7 "/usr/include/stdio.h"
 3843              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3844              		.file 9 "/usr/include/errno.h"
 3845              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3846              		.file 11 "/usr/include/unistd.h"
 3847              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3848              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3849              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3850              		.file 15 "/usr/include/math.h"
 3851              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3852              		.file 17 "/usr/include/time.h"
 3853              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3854              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3855              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3856              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3857              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3858              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3859              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3860              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3861              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3862              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3863              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3864              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3865              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3866              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3867              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3868              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3869              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3870              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3871              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3872              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3873              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3874              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3875              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3876              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3877              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3878              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3879              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3880              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3881              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3882              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3883              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3884              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3885              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3886              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3887              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3888              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3889              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3890              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3891              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3892              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3893              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3894              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3895              		.file 60 "/usr/local/include/python3.8/context.h"
 3896              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3897              		.file 62 "/usr/local/include/python3.8/code.h"
 3898              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3899              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3900              		.file 65 "/usr/local/include/python3.8/import.h"
 3901              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3902              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3903              		.file 68 "/usr/include/malloc.h"
 3904              		.file 69 "armwave.h"
 3905              		.file 70 "/usr/include/stdlib.h"
 3906              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3907              		.file 72 "/usr/include/assert.h"
 3908              		.file 73 "<built-in>"
 3909              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
