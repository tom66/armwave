   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0150A0E1 		mov	r5, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 54619FE5 		ldr	r6, .L21	@ tmp191,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241096E5 		ldr	r1, [r6, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403096E5 		ldr	r3, [r6, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044096E5 		ldr	r4, [r6, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp194, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 21008DE9 		stmib	sp, {r0, r5}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp195, tmp194,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp196, _5, tmp195
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 24019FE5 		ldr	r0, .L21+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp196,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp201, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp201,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141096E5 		ldr	r1, [r6, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383096E5 		ldr	r3, [r6, #56]	@ _91, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _91,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _91, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3B0000DA 		ble	.L11		@,
 317              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 318              		.loc 1 80 81 view .LVU52
 319 0108 343096E5 		ldr	r3, [r6, #52]	@ _15, g_armwave_state.wave_stride
 320 010c 000055E3 		cmp	r5, #0	@ height,
 321              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 322              		.loc 1 80 36 view .LVU53
 323 0110 14B096E5 		ldr	fp, [r6, #20]	@ _14, g_armwave_state.wave_buffer
 324              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 325              		.loc 1 103 51 view .LVU54
 326 0114 24E096E5 		ldr	lr, [r6, #36]	@ _64, g_armwave_state.cmp_x_bitdepth_scale
 327              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 328              		.loc 1 80 81 view .LVU55
 329 0118 24308DE5 		str	r3, [sp, #36]	@ _15, %sfp
 330              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 331              		.loc 1 103 116 view .LVU56
 332 011c 406096E5 		ldr	r6, [r6, #64]	@ _68, g_armwave_state.bitdepth_height
 333 0120 3400000A 		beq	.L11		@,
 334 0124 07B08BE0 		add	fp, fp, r7	@ ivtmp.49, _14, slice_y
 335 0128 00A06BE2 		rsb	r10, fp, #0	@ ivtmp.50, ivtmp.49
 336              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 337              		.loc 1 79 11 view .LVU57
 338 012c 0030A0E3 		mov	r3, #0	@ w,
 339 0130 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 340              	.LVL11:
 341              	.L14:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 342              		.loc 1 80 9 is_stmt 1 view .LVU58
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 343              		.loc 1 84 9 view .LVU59
 344              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 345              		.loc 1 79 11 is_stmt 0 view .LVU60
 346 0134 0B80A0E1 		mov	r8, fp	@ ivtmp.42, ivtmp.49
 347 0138 0030A0E3 		mov	r3, #0	@ ivtmp.43,
 348              	.LVL12:
 349              	.L13:
  87:armwave.c     **** 
 350              		.loc 1 87 13 is_stmt 1 view .LVU61
 351              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 352              		.loc 1 87 18 is_stmt 0 view .LVU62
 353 013c 041098E4 		ldr	r1, [r8], #4	@ word, MEM[base: _260, offset: 0B]
 354              	.LVL13:
  89:armwave.c     ****                 scale_value = word & 0xff;
 355              		.loc 1 89 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 356              		.loc 1 90 17 view .LVU64
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 357              		.loc 1 102 17 view .LVU65
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 107 17 view .LVU66
 359              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 360              		.loc 1 103 74 is_stmt 0 view .LVU67
 361 0140 23C8A0E1 		lsr	ip, r3, #16	@ tmp207, ivtmp.43,
 362              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 363              		.loc 1 103 34 view .LVU68
 364 0144 03308EE0 		add	r3, lr, r3	@ _89, _64, ivtmp.43
 365              	.LVL14:
 366              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 367              		.loc 1 90 29 view .LVU69
 368 0148 7120EFE6 		uxtb	r2, r1	@ scale_value, word
 369              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 107 47 view .LVU70
 371 014c 962C2CE0 		mla	ip, r6, ip, r2	@ tmp210, _68, tmp207, scale_value
 372              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 373              		.loc 1 108 22 view .LVU71
 374 0150 2124A0E1 		lsr	r2, r1, #8	@ word, word,
 375              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 376              		.loc 1 103 74 view .LVU72
 377 0154 2308A0E1 		lsr	r0, r3, #16	@ tmp215, _89,
 378              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 379              		.loc 1 90 29 view .LVU73
 380 0158 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 381              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 382              		.loc 1 107 47 view .LVU74
 383 015c 8CC0A0E1 		lsl	ip, ip, #1	@ tmp211, tmp210,
 384 0160 962020E0 		mla	r0, r6, r0, r2	@ tmp219, _68, tmp215, scale_value
 385              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 386              		.loc 1 103 34 view .LVU75
 387 0164 03308EE0 		add	r3, lr, r3	@ _113, _64, _89
 388              	@ armwave.c:108:                 word >>= 8;
 389              		.loc 1 108 22 view .LVU76
 390 0168 2128A0E1 		lsr	r2, r1, #16	@ word, word,
 391              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 392              		.loc 1 107 47 view .LVU77
 393 016c BC7094E1 		ldrh	r7, [r4, ip]	@ *_73, *_73
 394              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 395              		.loc 1 103 74 view .LVU78
 396 0170 2398A0E1 		lsr	r9, r3, #16	@ tmp224, _113,
 397              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 398              		.loc 1 90 29 view .LVU79
 399 0174 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 400              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 401              		.loc 1 107 47 view .LVU80
 402 0178 8000A0E1 		lsl	r0, r0, #1	@ tmp220, tmp219,
 403              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 404              		.loc 1 103 34 view .LVU81
 405 017c 03308EE0 		add	r3, lr, r3	@ _137, _64, _113
 406              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 407              		.loc 1 107 47 view .LVU82
 408 0180 962922E0 		mla	r2, r6, r9, r2	@ tmp228, _68, tmp224, scale_value
 409 0184 017087E2 		add	r7, r7, #1	@ tmp214, *_73,
 410 0188 BC7084E1 		strh	r7, [r4, ip]	@ movhi	@ tmp214, *_73
 411              		.loc 1 108 17 is_stmt 1 view .LVU83
 412              	.LVL15:
  90:armwave.c     ****                 
 413              		.loc 1 90 17 view .LVU84
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 414              		.loc 1 102 17 view .LVU85
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 17 view .LVU86
 416              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 417              		.loc 1 103 74 is_stmt 0 view .LVU87
 418 018c 2378A0E1 		lsr	r7, r3, #16	@ tmp233, _137,
 419              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 420              		.loc 1 107 47 view .LVU88
 421 0190 B0C094E1 		ldrh	ip, [r4, r0]	@ *_97, *_97
 422              	@ armwave.c:108:                 word >>= 8;
 423              		.loc 1 108 22 view .LVU89
 424 0194 211CA0E1 		lsr	r1, r1, #24	@ word, word,
 425              	.LVL16:
 426              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 427              		.loc 1 107 47 view .LVU90
 428 0198 8220A0E1 		lsl	r2, r2, #1	@ tmp229, tmp228,
 429 019c 961721E0 		mla	r1, r6, r7, r1	@ tmp236, _68, tmp233, word
 430 01a0 01C08CE2 		add	ip, ip, #1	@ tmp223, *_97,
 431 01a4 B0C084E1 		strh	ip, [r4, r0]	@ movhi	@ tmp223, *_97
 432              		.loc 1 108 17 is_stmt 1 view .LVU91
 433              	.LVL17:
  90:armwave.c     ****                 
 434              		.loc 1 90 17 view .LVU92
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 435              		.loc 1 102 17 view .LVU93
 107:armwave.c     ****                 word >>= 8;
 436              		.loc 1 107 17 view .LVU94
 437              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 438              		.loc 1 107 47 is_stmt 0 view .LVU95
 439 01a8 B20094E1 		ldrh	r0, [r4, r2]	@ *_121, *_121
 440 01ac 8110A0E1 		lsl	r1, r1, #1	@ tmp237, tmp236,
 441 01b0 03308EE0 		add	r3, lr, r3	@ ivtmp.43, _64, _137
 442 01b4 010080E2 		add	r0, r0, #1	@ tmp232, *_121,
 443 01b8 B20084E1 		strh	r0, [r4, r2]	@ movhi	@ tmp232, *_121
 444              		.loc 1 108 17 is_stmt 1 view .LVU96
 445              	.LVL18:
  90:armwave.c     ****                 
 446              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 447              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 448              		.loc 1 107 17 view .LVU99
 449              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 450              		.loc 1 107 47 is_stmt 0 view .LVU100
 451 01bc B12094E1 		ldrh	r2, [r4, r1]	@ *_145, *_145
 452              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 453              		.loc 1 84 9 view .LVU101
 454 01c0 08008AE0 		add	r0, r10, r8	@ tmp241, ivtmp.50, ivtmp.42
 455 01c4 000055E1 		cmp	r5, r0	@ height, tmp241
 456              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 457              		.loc 1 107 47 view .LVU102
 458 01c8 012082E2 		add	r2, r2, #1	@ tmp240, *_145,
 459 01cc B12084E1 		strh	r2, [r4, r1]	@ movhi	@ tmp240, *_145
 460              		.loc 1 108 17 is_stmt 1 view .LVU103
 461              	.LVL19:
 462              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 463              		.loc 1 84 9 is_stmt 0 view .LVU104
 464 01d0 D9FFFF8A 		bhi	.L13		@,
 465              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 466              		.loc 1 79 44 view .LVU105
 467 01d4 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 468              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 469              		.loc 1 79 5 view .LVU106
 470 01d8 20209DE5 		ldr	r2, [sp, #32]	@ _91, %sfp
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 view .LVU107
 473 01dc 013083E2 		add	r3, r3, #1	@ w, w,
 474 01e0 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 475              	.LVL20:
 476              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 477              		.loc 1 79 5 view .LVU108
 478 01e4 020053E1 		cmp	r3, r2	@ w, _91
 479 01e8 24309DE5 		ldr	r3, [sp, #36]	@ _15, %sfp
 480              	.LVL21:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 481              		.loc 1 79 5 view .LVU109
 482 01ec 03B08BE0 		add	fp, fp, r3	@ ivtmp.49, ivtmp.49, _15
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 view .LVU110
 484 01f0 03A04AE0 		sub	r10, r10, r3	@ ivtmp.50, ivtmp.50, _15
 485 01f4 CEFFFF1A 		bne	.L14		@,
 486              	.LVL22:
 487              	.L11:
 488              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 489              		.loc 1 112 1 view .LVU111
 490 01f8 2CD08DE2 		add	sp, sp, #44	@,,
 491              		.cfi_def_cfa_offset 36
 492              		@ sp needed	@
 493 01fc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 494              	.LVL23:
 495              	.L22:
 496              		.loc 1 112 1 view .LVU112
 497              		.align	2
 498              	.L21:
 499 0200 00000000 		.word	g_armwave_state
 500 0204 20000000 		.word	.LC2
 501              		.cfi_endproc
 502              	.LFE59:
 504              		.align	2
 505              		.global	armwave_fill_pixbuf_scaled
 506              		.syntax unified
 507              		.arm
 508              		.fpu vfp
 510              	armwave_fill_pixbuf_scaled:
 511              	.LVL24:
 512              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 513              		.loc 1 119 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 517              		.loc 1 120 5 view .LVU114
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 518              		.loc 1 122 5 view .LVU115
 123:armwave.c     ****     uint8_t r, g, b;
 519              		.loc 1 123 5 view .LVU116
 124:armwave.c     ****     int value; 
 520              		.loc 1 124 5 view .LVU117
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 521              		.loc 1 126 5 view .LVU118
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 522              		.loc 1 127 5 view .LVU119
 128:armwave.c     ****     uint32_t offset;
 523              		.loc 1 128 5 view .LVU120
 129:armwave.c     **** 
 130:armwave.c     ****     if(out_buffer == NULL)
 524              		.loc 1 130 5 view .LVU121
 525              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 526              		.loc 1 119 1 is_stmt 0 view .LVU122
 527 0208 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 528              		.cfi_def_cfa_offset 36
 529              		.cfi_offset 4, -36
 530              		.cfi_offset 5, -32
 531              		.cfi_offset 6, -28
 532              		.cfi_offset 7, -24
 533              		.cfi_offset 8, -20
 534              		.cfi_offset 9, -16
 535              		.cfi_offset 10, -12
 536              		.cfi_offset 11, -8
 537              		.cfi_offset 14, -4
 538              	@ armwave.c:130:     if(out_buffer == NULL)
 539              		.loc 1 130 7 view .LVU123
 540 020c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 541              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 542              		.loc 1 119 1 view .LVU124
 543 0210 0CD04DE2 		sub	sp, sp, #12	@,,
 544              		.cfi_def_cfa_offset 48
 545              	@ armwave.c:130:     if(out_buffer == NULL)
 546              		.loc 1 130 7 view .LVU125
 547 0214 1A00000A 		beq	.L23		@,
 548              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 549              		.loc 1 126 15 view .LVU126
 550 0218 54519FE5 		ldr	r5, .L44	@ tmp221,
 551              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     ****         return;
 132:armwave.c     **** 
 133:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 134:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 552              		.loc 1 134 5 view .LVU127
 553 021c 0010A0E3 		mov	r1, #0	@,
 554              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 555              		.loc 1 134 59 view .LVU128
 556 0220 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 557 0224 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 558              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 559              		.loc 1 126 15 view .LVU129
 560 0228 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 561              		.loc 1 134 5 is_stmt 1 view .LVU130
 562              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 563              		.loc 1 134 59 is_stmt 0 view .LVU131
 564 022c 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 565              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 566              		.loc 1 134 5 view .LVU132
 567 0230 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 568 0234 FEFFFFEB 		bl	memset		@
 569              	.LVL25:
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 570              		.loc 1 136 5 is_stmt 1 view .LVU133
 571              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 572              		.loc 1 136 10 is_stmt 0 view .LVU134
 573 0238 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 574 023c 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 575 0240 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 576              	.LVL26:
 137:armwave.c     ****     
 138:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 577              		.loc 1 138 5 is_stmt 1 view .LVU135
 578              		.loc 1 138 5 is_stmt 0 view .LVU136
 579 0244 000050E3 		cmp	r0, #0	@ npix,
 580 0248 0D0000DA 		ble	.L23		@,
 581              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 139:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 140:armwave.c     ****         wave_word = *base_32ptr++;
 141:armwave.c     **** 
 142:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 143:armwave.c     ****             for(w = 0; w < 2; w++) {
 144:armwave.c     ****                 value = wave_word & 0xffff;
 145:armwave.c     ****                 wave_word >>= 16;
 146:armwave.c     **** 
 147:armwave.c     ****                 if(value != 0) {
 148:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 149:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 582              		.loc 1 149 52 view .LVU137
 583 024c FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 584              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 585              		.loc 1 148 52 view .LVU138
 586 0250 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 587              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 151:armwave.c     **** 
 152:armwave.c     ****                     r = MIN(rr, 255);
 153:armwave.c     ****                     g = MIN(gg, 255);
 154:armwave.c     ****                     b = MIN(bb, 255);
 155:armwave.c     **** 
 156:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 157:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 158:armwave.c     **** 
 159:armwave.c     ****                     // Plot the pixels
 160:armwave.c     ****                     nsub = n + w;
 161:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 588              		.loc 1 161 57 view .LVU139
 589 0254 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 590              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 591              		.loc 1 149 52 view .LVU140
 592 0258 00308DE5 		str	r3, [sp]	@ _16, %sfp
 593              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 594              		.loc 1 150 52 view .LVU141
 595 025c F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 596 0260 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 597              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 598              		.loc 1 138 11 view .LVU142
 599 0264 0030A0E3 		mov	r3, #0	@ n,
 600              	.LVL27:
 601              	.L29:
 140:armwave.c     **** 
 602              		.loc 1 140 9 is_stmt 1 view .LVU143
 603              	@ armwave.c:140:         wave_word = *base_32ptr++;
 140:armwave.c     **** 
 604              		.loc 1 140 19 is_stmt 0 view .LVU144
 605 0268 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 606              	.LVL28:
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 607              		.loc 1 142 9 is_stmt 1 view .LVU145
 608              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 609              		.loc 1 142 11 is_stmt 0 view .LVU146
 610 026c 000052E3 		cmp	r2, #0	@ wave_word,
 611              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 612              		.loc 1 143 19 view .LVU147
 613 0270 0080A013 		movne	r8, #0	@ w,
 614              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 615              		.loc 1 142 11 view .LVU148
 616 0274 0400001A 		bne	.L28		@,
 617              	.L25:
 618              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 619              		.loc 1 138 28 view .LVU149
 620 0278 023083E2 		add	r3, r3, #2	@ n, n,
 621              	.LVL29:
 622              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 623              		.loc 1 138 5 view .LVU150
 624 027c 030050E1 		cmp	r0, r3	@ npix, n
 625 0280 F8FFFFCA 		bgt	.L29		@,
 626              	.LVL30:
 627              	.L23:
 628              	@ armwave.c:173: }
 162:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     xx = (nsub >> 8) / 2;
 164:armwave.c     **** 
 165:armwave.c     ****                     for(y = yy; y < ye; y++) {
 166:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 167:armwave.c     ****                         *(out_buffer_base + offset) = word;
 168:armwave.c     ****                     }
 169:armwave.c     ****                 }
 170:armwave.c     ****             }
 171:armwave.c     ****         }
 172:armwave.c     ****     }
 173:armwave.c     **** }
 629              		.loc 1 173 1 view .LVU151
 630 0284 0CD08DE2 		add	sp, sp, #12	@,,
 631              		.cfi_remember_state
 632              		.cfi_def_cfa_offset 36
 633              		@ sp needed	@
 634 0288 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 635              	.LVL31:
 636              	.L28:
 637              		.cfi_restore_state
 144:armwave.c     ****                 wave_word >>= 16;
 638              		.loc 1 144 17 is_stmt 1 view .LVU152
 639              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 640              		.loc 1 144 23 is_stmt 0 view .LVU153
 641 028c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 642              	.LVL32:
 145:armwave.c     **** 
 643              		.loc 1 145 17 is_stmt 1 view .LVU154
 644              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 645              		.loc 1 147 19 is_stmt 0 view .LVU155
 646 0290 000059E3 		cmp	r9, #0	@ value,
 647              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 648              		.loc 1 145 27 view .LVU156
 649 0294 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 650              	.LVL33:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 651              		.loc 1 147 17 is_stmt 1 view .LVU157
 652              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 653              		.loc 1 147 19 is_stmt 0 view .LVU158
 654 0298 0600001A 		bne	.L43		@,
 655              	.LVL34:
 656              	.L26:
 657              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 658              		.loc 1 143 13 view .LVU159
 659 029c 010058E3 		cmp	r8, #1	@ w,
 660 02a0 F4FFFF0A 		beq	.L25		@,
 661              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 662              		.loc 1 144 23 view .LVU160
 663 02a4 7290FFE6 		uxth	r9, r2	@ value, wave_word
 664              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 665              		.loc 1 147 19 view .LVU161
 666 02a8 000059E3 		cmp	r9, #0	@ value,
 667 02ac 0180A0E3 		mov	r8, #1	@ w,
 668              	.LVL35:
 144:armwave.c     ****                 wave_word >>= 16;
 669              		.loc 1 144 17 is_stmt 1 view .LVU162
 145:armwave.c     **** 
 670              		.loc 1 145 17 view .LVU163
 671              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 672              		.loc 1 145 27 is_stmt 0 view .LVU164
 673 02b0 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 674              	.LVL36:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 147 17 is_stmt 1 view .LVU165
 676              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 147 19 is_stmt 0 view .LVU166
 678 02b4 F8FFFF0A 		beq	.L26		@,
 679              	.L43:
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 680              		.loc 1 148 21 is_stmt 1 view .LVU167
 681              	.LVL37:
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 682              		.loc 1 149 21 view .LVU168
 150:armwave.c     **** 
 683              		.loc 1 150 21 view .LVU169
 152:armwave.c     ****                     g = MIN(gg, 255);
 684              		.loc 1 152 21 view .LVU170
 153:armwave.c     ****                     b = MIN(bb, 255);
 685              		.loc 1 153 21 view .LVU171
 154:armwave.c     **** 
 686              		.loc 1 154 21 view .LVU172
 157:armwave.c     **** 
 687              		.loc 1 157 21 view .LVU173
 688              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 689              		.loc 1 150 55 is_stmt 0 view .LVU174
 690 02b8 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 691 02bc 08E083E0 		add	lr, r3, r8	@ _130, n, w
 692 02c0 99010CE0 		mul	ip, r9, r1	@ tmp195, value, _19
 693              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 161 32 view .LVU175
 695 02c4 7E10EFE6 		uxtb	r1, lr	@ _31, _130
 696              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 697              		.loc 1 162 41 view .LVU176
 698 02c8 017081E2 		add	r7, r1, #1	@ tmp210, _31,
 699              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 700              		.loc 1 161 40 view .LVU177
 701 02cc 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 702              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 703              		.loc 1 162 41 view .LVU178
 704 02d0 107A07EE 		vmov	s14, r7	@ int	@ tmp210, tmp210
 705              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 706              		.loc 1 149 55 view .LVU179
 707 02d4 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 708              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 709              		.loc 1 150 24 view .LVU180
 710 02d8 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp195,
 711              	.LVL38:
 712              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 713              		.loc 1 161 40 view .LVU181
 714 02dc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp208, _31
 715              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 716              		.loc 1 162 46 view .LVU182
 717 02e0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp211, tmp210
 718              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 719              		.loc 1 149 55 view .LVU183
 720 02e4 99010AE0 		mul	r10, r9, r1	@ tmp199, value, _16
 721              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 722              		.loc 1 148 55 view .LVU184
 723 02e8 990B09E0 		mul	r9, r9, fp	@ tmp205, value, _13
 724              	.LVL39:
 725              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 726              		.loc 1 154 25 view .LVU185
 727 02ec FF005CE3 		cmp	ip, #255	@ bb,
 728              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 729              		.loc 1 149 24 view .LVU186
 730 02f0 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp199,
 731              	.LVL40:
 732              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 733              		.loc 1 161 40 view .LVU187
 734 02f4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp209, tmp208, _33
 735              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 736              		.loc 1 162 46 view .LVU188
 737 02f8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp212, tmp211, _33
 738              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 739              		.loc 1 154 25 view .LVU189
 740 02fc FFC0A0A3 		movge	ip, #255	@ bb,
 741              	.LVL41:
 742              	@ armwave.c:153:                     g = MIN(gg, 255);
 153:armwave.c     ****                     b = MIN(bb, 255);
 743              		.loc 1 153 25 view .LVU190
 744 0300 FF005AE3 		cmp	r10, #255	@ gg,
 745 0304 FFA0A0A3 		movge	r10, #255	@ gg,
 746              	.LVL42:
 747              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 748              		.loc 1 148 24 view .LVU191
 749 0308 4994A0E1 		asr	r9, r9, #8	@ rr, tmp205,
 750              	.LVL43:
 751              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 752              		.loc 1 152 25 view .LVU192
 753 030c FF0059E3 		cmp	r9, #255	@ rr,
 754              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 755              		.loc 1 157 56 view .LVU193
 756 0310 0AA4A0E1 		lsl	r10, r10, #8	@ tmp200, gg,
 757              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 161 24 view .LVU194
 759 0314 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp209
 760              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 761              		.loc 1 152 25 view .LVU195
 762 0318 FF90A0A3 		movge	r9, #255	@ rr,
 763              	.LVL44:
 764              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 765              		.loc 1 163 32 view .LVU196
 766 031c 4EE4A0E1 		asr	lr, lr, #8	@ tmp213, _130,
 767              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 768              		.loc 1 157 44 view .LVU197
 769 0320 0CC8A0E1 		lsl	ip, ip, #16	@ tmp196, bb,
 770              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 771              		.loc 1 157 56 view .LVU198
 772 0324 7AA0FFE6 		uxth	r10, r10	@ tmp201, tmp200
 773              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 774              		.loc 1 157 44 view .LVU199
 775 0328 FFC80CE2 		and	ip, ip, #16711680	@ tmp197, tmp196,
 776              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 777              		.loc 1 157 51 view .LVU200
 778 032c 0AC08CE1 		orr	ip, ip, r10	@ tmp203, tmp197, tmp201
 779              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 780              		.loc 1 157 62 view .LVU201
 781 0330 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 782              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 783              		.loc 1 161 24 view .LVU202
 784 0334 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 785              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 786              		.loc 1 162 24 view .LVU203
 787 0338 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp212
 788              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 789              		.loc 1 163 38 view .LVU204
 790 033c AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp215, tmp213, tmp213,
 791              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 792              		.loc 1 157 62 view .LVU205
 793 0340 0AC08CE1 		orr	ip, ip, r10	@ tmp207, tmp203, rr
 794              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 795              		.loc 1 157 26 view .LVU206
 796 0344 FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp207,
 797              	.LVL45:
 160:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 798              		.loc 1 160 21 is_stmt 1 view .LVU207
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 161 21 view .LVU208
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 800              		.loc 1 162 21 view .LVU209
 801              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 802              		.loc 1 163 38 is_stmt 0 view .LVU210
 803 0348 C990A0E1 		asr	r9, r9, #1	@ xx, tmp215,
 804              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 805              		.loc 1 162 24 view .LVU211
 806 034c 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 807              	.LVL46:
 163:armwave.c     **** 
 808              		.loc 1 163 21 is_stmt 1 view .LVU212
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 809              		.loc 1 165 21 view .LVU213
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 165 21 is_stmt 0 view .LVU214
 811 0350 070051E1 		cmp	r1, r7	@ yy, ye
 812 0354 D0FFFF2A 		bcs	.L26		@,
 813              	.LVL47:
 814              	.L27:
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 815              		.loc 1 166 25 is_stmt 1 discriminator 3 view .LVU215
 167:armwave.c     ****                     }
 816              		.loc 1 167 25 discriminator 3 view .LVU216
 817              	@ armwave.c:166:                         offset = (xx + (y * g_armwave_state.target_width)); 
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 818              		.loc 1 166 43 is_stmt 0 discriminator 3 view .LVU217
 819 0358 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 820              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 821              		.loc 1 167 43 discriminator 3 view .LVU218
 822 035c 9C912CE0 		mla	ip, ip, r1, r9	@ tmp220, g_armwave_state.target_width, yy, xx
 823              	.LVL48:
 824              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 825              		.loc 1 165 42 discriminator 3 view .LVU219
 826 0360 011081E2 		add	r1, r1, #1	@ yy, yy,
 827              	.LVL49:
 828              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 829              		.loc 1 165 21 discriminator 3 view .LVU220
 830 0364 010057E1 		cmp	r7, r1	@ ye, yy
 831              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 832              		.loc 1 167 53 discriminator 3 view .LVU221
 833 0368 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 834              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 835              		.loc 1 165 21 discriminator 3 view .LVU222
 836 036c F9FFFF1A 		bne	.L27		@,
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 837              		.loc 1 165 21 discriminator 3 view .LVU223
 838 0370 C9FFFFEA 		b	.L26		@
 839              	.L45:
 840              		.align	2
 841              	.L44:
 842 0374 00000000 		.word	g_armwave_state
 843              		.cfi_endproc
 844              	.LFE60:
 846              		.global	__aeabi_idiv
 847              		.align	2
 848              		.global	armwave_generate
 849              		.syntax unified
 850              		.arm
 851              		.fpu vfp
 853              	armwave_generate:
 854              	.LFB61:
 174:armwave.c     **** 
 175:armwave.c     **** /*
 176:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 177:armwave.c     ****  */
 178:armwave.c     **** void armwave_generate()
 179:armwave.c     **** {
 855              		.loc 1 179 1 is_stmt 1 view -0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 180:armwave.c     ****     uint32_t yy;
 859              		.loc 1 180 5 view .LVU225
 181:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 860              		.loc 1 181 5 view .LVU226
 861              	.LVL50:
 182:armwave.c     **** 
 183:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 862              		.loc 1 183 5 view .LVU227
 863              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 864              		.loc 1 179 1 is_stmt 0 view .LVU228
 865 0378 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 866              		.cfi_def_cfa_offset 20
 867              		.cfi_offset 4, -20
 868              		.cfi_offset 5, -16
 869              		.cfi_offset 6, -12
 870              		.cfi_offset 7, -8
 871              		.cfi_offset 14, -4
 872              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 873              		.loc 1 183 5 view .LVU229
 874 037c 0010A0E3 		mov	r1, #0	@,
 875              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 876              		.loc 1 183 58 view .LVU230
 877 0380 84509FE5 		ldr	r5, .L54	@ tmp154,
 878              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 879              		.loc 1 179 1 view .LVU231
 880 0384 0CD04DE2 		sub	sp, sp, #12	@,,
 881              		.cfi_def_cfa_offset 32
 882              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 883              		.loc 1 183 5 view .LVU232
 884 0388 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 885 038c 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 886 0390 FEFFFFEB 		bl	memset		@
 887              	.LVL51:
 184:armwave.c     **** 
 185:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 888              		.loc 1 185 5 is_stmt 1 view .LVU233
 889              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 890              		.loc 1 185 68 is_stmt 0 view .LVU234
 891 0394 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 892              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 893              		.loc 1 185 51 view .LVU235
 894 0398 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 895 039c 0610A0E1 		mov	r1, r6	@, _13
 896 03a0 FEFFFFEB 		bl	__aeabi_idiv		@
 897              	.LVL52:
 898              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 899              		.loc 1 185 5 view .LVU236
 900 03a4 000050E3 		cmp	r0, #0	@,
 901 03a8 1500000A 		beq	.L46		@,
 902              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 186:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 187:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 903              		.loc 1 187 9 view .LVU237
 904 03ac 5C709FE5 		ldr	r7, .L54+4	@ tmp155,
 905              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 906              		.loc 1 185 12 view .LVU238
 907 03b0 0040A0E3 		mov	r4, #0	@ yy,
 908              	.LVL53:
 909              	.L48:
 910              		.loc 1 187 9 is_stmt 1 discriminator 3 view .LVU239
 911 03b4 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 912              	@ armwave.c:189:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 188:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 189:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 913              		.loc 1 189 48 is_stmt 0 discriminator 3 view .LVU240
 914 03b8 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 915              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 187:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 916              		.loc 1 187 9 discriminator 3 view .LVU241
 917 03bc 0630A0E1 		mov	r3, r6	@, _13
 918 03c0 0120A0E1 		mov	r2, r1	@, _5
 919              	@ armwave.c:189:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 920              		.loc 1 189 48 discriminator 3 view .LVU242
 921 03c4 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 922              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 187:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 923              		.loc 1 187 9 discriminator 3 view .LVU243
 924 03c8 0700A0E1 		mov	r0, r7	@, tmp155
 925 03cc 0410A0E1 		mov	r1, r4	@, yy
 926 03d0 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 927 03d4 00C08DE5 		str	ip, [sp]	@ tmp145,
 928 03d8 FEFFFFEB 		bl	printf		@
 929              	.LVL54:
 190:armwave.c     **** 
 191:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 930              		.loc 1 191 9 is_stmt 1 discriminator 3 view .LVU244
 931              	@ armwave.c:191:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 932              		.loc 1 191 62 is_stmt 0 discriminator 3 view .LVU245
 933 03dc 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 934              	@ armwave.c:191:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 935              		.loc 1 191 9 discriminator 3 view .LVU246
 936 03e0 940100E0 		mul	r0, r4, r1	@, yy,
 937 03e4 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 938              	.LVL55:
 192:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 939              		.loc 1 192 9 is_stmt 1 discriminator 3 view .LVU247
 193:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 940              		.loc 1 193 9 discriminator 3 view .LVU248
 941              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 942              		.loc 1 185 68 is_stmt 0 discriminator 3 view .LVU249
 943 03e8 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 944              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 945              		.loc 1 185 51 discriminator 3 view .LVU250
 946 03ec 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 947 03f0 0610A0E1 		mov	r1, r6	@, _13
 948 03f4 FEFFFFEB 		bl	__aeabi_idiv		@
 949              	.LVL56:
 950              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 951              		.loc 1 185 86 discriminator 3 view .LVU251
 952 03f8 014084E2 		add	r4, r4, #1	@ yy, yy,
 953              	.LVL57:
 954              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 955              		.loc 1 185 5 discriminator 3 view .LVU252
 956 03fc 040050E1 		cmp	r0, r4	@, yy
 957 0400 EBFFFF8A 		bhi	.L48		@,
 958              	.LVL58:
 959              	.L46:
 960              	@ armwave.c:202: }
 194:armwave.c     ****     }
 195:armwave.c     **** 
 196:armwave.c     ****     /*
 197:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 198:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 199:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 200:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 201:armwave.c     ****     */
 202:armwave.c     **** }
 961              		.loc 1 202 1 view .LVU253
 962 0404 0CD08DE2 		add	sp, sp, #12	@,,
 963              		.cfi_def_cfa_offset 20
 964              		@ sp needed	@
 965 0408 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 966              	.L55:
 967              		.align	2
 968              	.L54:
 969 040c 00000000 		.word	g_armwave_state
 970 0410 78000000 		.word	.LC3
 971              		.cfi_endproc
 972              	.LFE61:
 974              		.align	2
 975              		.global	armwave_setup_render
 976              		.syntax unified
 977              		.arm
 978              		.fpu vfp
 980              	armwave_setup_render:
 981              	.LVL59:
 982              	.LFB62:
 203:armwave.c     **** 
 204:armwave.c     **** /*
 205:armwave.c     ****  * Setup the renderer with passed parameters.
 206:armwave.c     ****  */
 207:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 208:armwave.c     **** {
 983              		.loc 1 208 1 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 12, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 209:armwave.c     ****     uint32_t length, xx;
 987              		.loc 1 209 5 view .LVU255
 210:armwave.c     ****     float points_per_pixel;
 988              		.loc 1 210 5 view .LVU256
 211:armwave.c     **** 
 212:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 989              		.loc 1 212 5 view .LVU257
 990              	@ armwave.c:208: {
 208:armwave.c     ****     uint32_t length, xx;
 991              		.loc 1 208 1 is_stmt 0 view .LVU258
 992 0414 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 993              		.cfi_def_cfa_offset 28
 994              		.cfi_offset 4, -28
 995              		.cfi_offset 5, -24
 996              		.cfi_offset 6, -20
 997              		.cfi_offset 7, -16
 998              		.cfi_offset 8, -12
 999              		.cfi_offset 9, -8
 1000              		.cfi_offset 14, -4
 1001 0418 14D04DE2 		sub	sp, sp, #20	@,,
 1002              		.cfi_def_cfa_offset 48
 1003              	@ armwave.c:208: {
 208:armwave.c     ****     uint32_t length, xx;
 1004              		.loc 1 208 1 view .LVU259
 1005 041c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1006 0420 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1007 0424 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1008 0428 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1009              	@ armwave.c:212:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1010              		.loc 1 212 5 view .LVU260
 1011 042c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1012              	@ armwave.c:208: {
 208:armwave.c     ****     uint32_t length, xx;
 1013              		.loc 1 208 1 view .LVU261
 1014 0430 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1015 0434 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1016              	@ armwave.c:212:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1017              		.loc 1 212 5 view .LVU262
 1018 0438 F460CDE1 		strd	r6, [sp, #4]	@,,
 1019 043c 0230A0E1 		mov	r3, r2	@, waves_max
 1020              	.LVL60:
 1021              		.loc 1 212 5 view .LVU263
 1022 0440 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1023 0444 0120A0E1 		mov	r2, r1	@, end_point
 1024              	.LVL61:
 1025              		.loc 1 212 5 view .LVU264
 1026 0448 0010A0E1 		mov	r1, r0	@, start_point
 1027              	.LVL62:
 1028              		.loc 1 212 5 view .LVU265
 1029 044c 8C019FE5 		ldr	r0, .L66+12	@,
 1030              	.LVL63:
 1031              		.loc 1 212 5 view .LVU266
 1032 0450 FEFFFFEB 		bl	printf		@
 1033              	.LVL64:
 213:armwave.c     **** 
 214:armwave.c     ****     // TODO these asserts should instead raise PyExc
 215:armwave.c     ****     assert(start_point < end_point);
 1034              		.loc 1 215 5 is_stmt 1 view .LVU267
 1035 0454 050054E1 		cmp	r4, r5	@ start_point, end_point
 1036 0458 5100002A 		bcs	.L64		@,
 216:armwave.c     **** 
 217:armwave.c     ****     /*
 218:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 219:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 220:armwave.c     ****     if(target_height == 256) {
 221:armwave.c     ****         g_armwave_state.row_shift = 8;
 222:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 223:armwave.c     ****     } else if(target_height == 512) {
 224:armwave.c     ****         g_armwave_state.row_shift = 9;
 225:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 226:armwave.c     ****     } else if(target_height == 1024) {
 227:armwave.c     ****         g_armwave_state.row_shift = 10;
 228:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 229:armwave.c     ****     } else if(target_height == 2048) {
 230:armwave.c     ****         g_armwave_state.row_shift = 11;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 232:armwave.c     ****     }
 233:armwave.c     ****     */
 234:armwave.c     **** 
 235:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 236:armwave.c     ****     g_armwave_state.xstride = target_height;
 1037              		.loc 1 236 5 view .LVU268
 1038              	@ armwave.c:247:     g_armwave_state.wave_length = end_point - start_point;
 237:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 238:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 239:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 240:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 241:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 242:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 243:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 244:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 245:armwave.c     ****     g_armwave_state.target_width = target_width;
 246:armwave.c     ****     g_armwave_state.target_height = target_height;
 247:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1039              		.loc 1 247 45 is_stmt 0 view .LVU269
 1040 045c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1041              	.LVL65:
 1042              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 248:armwave.c     **** 
 249:armwave.c     ****     // Calculate compound scaler
 250:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 251:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1043              		.loc 1 251 48 view .LVU270
 1044 0460 5B5A9FED 		vldr.32	s10, .L66	@ tmp187,
 1045 0464 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1046              	@ armwave.c:237:     g_armwave_state.vscale_frac = target_height / 255.0f;
 237:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1047              		.loc 1 237 49 view .LVU271
 1048 0468 5A7A9FED 		vldr.32	s14, .L66+4	@ tmp165,
 1049              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1050              		.loc 1 251 81 view .LVU272
 1051 046c 5A6A9FED 		vldr.32	s12, .L66+8	@ tmp191,
 1052              	@ armwave.c:244:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 244:armwave.c     ****     g_armwave_state.target_width = target_width;
 1053              		.loc 1 244 90 view .LVU273
 1054 0470 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1055              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1056              		.loc 1 251 48 view .LVU274
 1057 0474 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1058              	@ armwave.c:237:     g_armwave_state.vscale_frac = target_height / 255.0f;
 237:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1059              		.loc 1 237 49 view .LVU275
 1060 0478 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1061              	@ armwave.c:236:     g_armwave_state.xstride = target_height;
 236:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1062              		.loc 1 236 29 view .LVU276
 1063 047c 60419FE5 		ldr	r4, .L66+16	@ tmp222,
 1064              	.LVL66:
 1065              	@ armwave.c:242:     g_armwave_state.size = target_height * target_width;
 242:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1066              		.loc 1 242 42 view .LVU277
 1067 0480 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1068              	@ armwave.c:237:     g_armwave_state.vscale_frac = target_height / 255.0f;
 237:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1069              		.loc 1 237 49 view .LVU278
 1070 0484 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1071              	@ armwave.c:244:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 244:armwave.c     ****     g_armwave_state.target_width = target_width;
 1072              		.loc 1 244 95 view .LVU279
 1073 0488 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1074              	@ armwave.c:253:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 252:armwave.c     **** 
 253:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1075              		.loc 1 253 5 view .LVU280
 1076 048c 0128A0E3 		mov	r2, #65536	@ tmp194,
 1077              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 251:armwave.c     **** 
 1078              		.loc 1 251 48 view .LVU281
 1079 0490 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1080              	@ armwave.c:253:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1081              		.loc 1 253 5 view .LVU282
 1082 0494 04508DE5 		str	r5, [sp, #4]	@ _13,
 1083 0498 00608DE5 		str	r6, [sp]	@ target_width,
 1084              	@ armwave.c:244:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 244:armwave.c     ****     g_armwave_state.target_width = target_width;
 1085              		.loc 1 244 95 view .LVU283
 1086 049c 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1087              	@ armwave.c:236:     g_armwave_state.xstride = target_height;
 236:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1088              		.loc 1 236 29 view .LVU284
 1089 04a0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 237:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1090              		.loc 1 237 5 is_stmt 1 view .LVU285
 1091              	@ armwave.c:239:     g_armwave_state.wave_stride = wave_stride;
 239:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1092              		.loc 1 239 33 is_stmt 0 view .LVU286
 1093 04a4 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1094              	@ armwave.c:240:     g_armwave_state.waves_max = waves_max;
 240:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1095              		.loc 1 240 31 view .LVU287
 1096 04a8 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1097              	@ armwave.c:241:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 241:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1098              		.loc 1 241 27 view .LVU288
 1099 04ac 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1100              	@ armwave.c:246:     g_armwave_state.target_height = target_height;
 246:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1101              		.loc 1 246 35 view .LVU289
 1102 04b0 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1103              	@ armwave.c:253:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1104              		.loc 1 253 5 view .LVU290
 1105 04b4 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1106              	@ armwave.c:243:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 243:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1107              		.loc 1 243 37 view .LVU291
 1108 04b8 022CA0E3 		mov	r2, #512	@ tmp175,
 1109              	@ armwave.c:242:     g_armwave_state.size = target_height * target_width;
 242:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1110              		.loc 1 242 26 view .LVU292
 1111 04bc 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1112              	@ armwave.c:243:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 243:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1113              		.loc 1 243 37 view .LVU293
 1114 04c0 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1115              	@ armwave.c:253:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1116              		.loc 1 253 5 view .LVU294
 1117 04c4 0310A0E1 		mov	r1, r3	@, tmp180
 1118              	@ armwave.c:244:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 244:armwave.c     ****     g_armwave_state.target_width = target_width;
 1119              		.loc 1 244 34 view .LVU295
 1120 04c8 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1121              	@ armwave.c:237:     g_armwave_state.vscale_frac = target_height / 255.0f;
 237:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1122              		.loc 1 237 49 view .LVU296
 1123 04cc 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1124              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 251:armwave.c     **** 
 1125              		.loc 1 251 40 view .LVU297
 1126 04d0 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1127              	@ armwave.c:247:     g_armwave_state.wave_length = end_point - start_point;
 247:armwave.c     **** 
 1128              		.loc 1 247 33 view .LVU298
 1129 04d4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1130              	@ armwave.c:253:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1131              		.loc 1 253 5 view .LVU299
 1132 04d8 08019FE5 		ldr	r0, .L66+20	@,
 1133              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 251:armwave.c     **** 
 1134              		.loc 1 251 40 view .LVU300
 1135 04dc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1136 04e0 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1137              	@ armwave.c:238:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 238:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1138              		.loc 1 238 30 view .LVU301
 1139 04e4 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1140              	@ armwave.c:237:     g_armwave_state.vscale_frac = target_height / 255.0f;
 237:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1141              		.loc 1 237 33 view .LVU302
 1142 04e8 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 238:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1143              		.loc 1 238 5 is_stmt 1 view .LVU303
 1144              	@ armwave.c:251:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 251:armwave.c     **** 
 1145              		.loc 1 251 81 is_stmt 0 view .LVU304
 1146 04ec 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1147              	@ armwave.c:238:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 238:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1148              		.loc 1 238 30 view .LVU305
 1149 04f0 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 239:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1150              		.loc 1 239 5 is_stmt 1 view .LVU306
 240:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1151              		.loc 1 240 5 view .LVU307
 241:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1152              		.loc 1 241 5 view .LVU308
 242:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1153              		.loc 1 242 5 view .LVU309
 243:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1154              		.loc 1 243 5 view .LVU310
 244:armwave.c     ****     g_armwave_state.target_width = target_width;
 1155              		.loc 1 244 5 view .LVU311
 245:armwave.c     ****     g_armwave_state.target_height = target_height;
 1156              		.loc 1 245 5 view .LVU312
 246:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1157              		.loc 1 246 5 view .LVU313
 247:armwave.c     **** 
 1158              		.loc 1 247 5 view .LVU314
 250:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1159              		.loc 1 250 5 view .LVU315
 1160              	@ armwave.c:250:     g_armwave_state.cmp_x_bitdepth_scale = \
 250:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1161              		.loc 1 250 42 is_stmt 0 view .LVU316
 1162 04f4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1163 04f8 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1164              	@ armwave.c:253:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1165              		.loc 1 253 5 view .LVU317
 1166 04fc 903A17EE 		vmov	r3, s15	@ int	@, _20
 1167              	@ armwave.c:250:     g_armwave_state.cmp_x_bitdepth_scale = \
 250:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1168              		.loc 1 250 42 view .LVU318
 1169 0500 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1170              		.loc 1 253 5 is_stmt 1 view .LVU319
 1171 0504 0C20A0E1 		mov	r2, ip	@, tmp3
 1172 0508 FEFFFFEB 		bl	printf		@
 1173              	.LVL67:
 254:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 255:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 256:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 257:armwave.c     **** 
 258:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 259:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 260:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 261:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1174              		.loc 1 261 5 view .LVU320
 1175              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 262:armwave.c     **** 
 263:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1176              		.loc 1 263 23 is_stmt 0 view .LVU321
 1177 050c 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1178              	@ armwave.c:261:     g_armwave_state.slice_height = 64; // 64;  
 261:armwave.c     **** 
 1179              		.loc 1 261 34 view .LVU322
 1180 0510 4030A0E3 		mov	r3, #64	@ tmp196,
 1181              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1182              		.loc 1 263 7 view .LVU323
 1183 0514 000050E3 		cmp	r0, #0	@ _21,
 1184              	@ armwave.c:261:     g_armwave_state.slice_height = 64; // 64;  
 261:armwave.c     **** 
 1185              		.loc 1 261 34 view .LVU324
 1186 0518 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1187              		.loc 1 263 5 is_stmt 1 view .LVU325
 1188              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1189              		.loc 1 263 7 is_stmt 0 view .LVU326
 1190 051c 0000000A 		beq	.L58		@,
 264:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1191              		.loc 1 264 9 is_stmt 1 view .LVU327
 1192 0520 FEFFFFEB 		bl	free		@
 1193              	.LVL68:
 1194              	.L58:
 265:armwave.c     **** 
 266:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1195              		.loc 1 266 5 view .LVU328
 1196              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1197              		.loc 1 266 56 is_stmt 0 view .LVU329
 1198 0524 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1199              	.LVL69:
 1200              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1201              		.loc 1 266 34 view .LVU330
 1202 0528 0110A0E3 		mov	r1, #1	@,
 1203 052c 0800A0E1 		mov	r0, r8	@, _22
 1204 0530 FEFFFFEB 		bl	calloc		@
 1205              	.LVL70:
 1206              	@ armwave.c:268:     if(g_armwave_state.ch1_buffer == NULL) {
 267:armwave.c     **** 
 268:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1207              		.loc 1 268 7 view .LVU331
 1208 0534 000050E3 		cmp	r0, #0	@ tmp199,
 1209              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 266:armwave.c     **** 
 1210              		.loc 1 266 34 view .LVU332
 1211 0538 0070A0E1 		mov	r7, r0	@ tmp199,
 1212              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 266:armwave.c     **** 
 1213              		.loc 1 266 32 view .LVU333
 1214 053c 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1215              		.loc 1 268 5 is_stmt 1 view .LVU334
 1216              	@ armwave.c:268:     if(g_armwave_state.ch1_buffer == NULL) {
 1217              		.loc 1 268 7 is_stmt 0 view .LVU335
 1218 0540 1C00000A 		beq	.L65		@,
 269:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 270:armwave.c     ****         exit(-1);
 271:armwave.c     ****     }
 272:armwave.c     **** 
 273:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 274:armwave.c     ****     length = end_point - start_point;
 1219              		.loc 1 274 5 is_stmt 1 view .LVU336
 1220              	.LVL71:
 275:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1221              		.loc 1 275 5 view .LVU337
 276:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1222              		.loc 1 276 5 view .LVU338
 1223              	@ armwave.c:275:     points_per_pixel = length / ((float)(target_width));
 275:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1224              		.loc 1 275 31 is_stmt 0 view .LVU339
 1225 0544 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1226              	@ armwave.c:275:     points_per_pixel = length / ((float)(target_width));
 275:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1227              		.loc 1 275 34 view .LVU340
 1228 0548 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1229              	@ armwave.c:276:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1230              		.loc 1 276 60 view .LVU341
 1231 054c 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1232              	@ armwave.c:290:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 277:armwave.c     **** 
 278:armwave.c     ****     /*
 279:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 280:armwave.c     **** 
 281:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 282:armwave.c     **** 
 283:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 284:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 285:armwave.c     **** 
 286:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 287:armwave.c     ****     }
 288:armwave.c     ****     */
 289:armwave.c     **** 
 290:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1233              		.loc 1 290 34 view .LVU342
 1234 0550 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1235              	@ armwave.c:275:     points_per_pixel = length / ((float)(target_width));
 275:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1236              		.loc 1 275 31 view .LVU343
 1237 0554 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1238              	@ armwave.c:275:     points_per_pixel = length / ((float)(target_width));
 275:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1239              		.loc 1 275 34 view .LVU344
 1240 0558 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1241              	@ armwave.c:276:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 276:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1242              		.loc 1 276 60 view .LVU345
 1243 055c E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1244              	@ armwave.c:290:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1245              		.loc 1 290 34 view .LVU346
 1246 0560 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1247              	@ armwave.c:275:     points_per_pixel = length / ((float)(target_width));
 275:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1248              		.loc 1 275 22 view .LVU347
 1249 0564 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1250              	.LVL72:
 1251              	@ armwave.c:276:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 276:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1252              		.loc 1 276 60 view .LVU348
 1253 0568 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1254              	@ armwave.c:276:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 276:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1255              		.loc 1 276 41 view .LVU349
 1256 056c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1257 0570 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1258              		.loc 1 290 5 is_stmt 1 view .LVU350
 1259              	@ armwave.c:290:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1260              		.loc 1 290 34 is_stmt 0 view .LVU351
 1261 0574 FEFFFFEB 		bl	malloc		@
 1262              	.LVL73:
 1263              	@ armwave.c:292:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 291:armwave.c     **** 
 292:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1264              		.loc 1 292 5 view .LVU352
 1265 0578 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1266 057c 0710A0E1 		mov	r1, r7	@, tmp199
 1267 0580 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1268 0584 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1269              	@ armwave.c:290:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 290:armwave.c     **** 
 1270              		.loc 1 290 34 view .LVU353
 1271 0588 00C0A0E1 		mov	ip, r0	@ tmp215,
 1272              	@ armwave.c:292:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1273              		.loc 1 292 5 view .LVU354
 1274 058c 0030A0E1 		mov	r3, r0	@, tmp215
 1275              	@ armwave.c:290:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 290:armwave.c     **** 
 1276              		.loc 1 290 32 view .LVU355
 1277 0590 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1278              		.loc 1 292 5 is_stmt 1 view .LVU356
 1279 0594 50009FE5 		ldr	r0, .L66+24	@,
 1280              	@ armwave.c:299: }
 293:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 294:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 295:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 296:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 297:armwave.c     **** 
 298:armwave.c     ****      //malloc_stats();
 299:armwave.c     **** }
 1281              		.loc 1 299 1 is_stmt 0 view .LVU357
 1282 0598 14D08DE2 		add	sp, sp, #20	@,,
 1283              		.cfi_remember_state
 1284              		.cfi_def_cfa_offset 28
 1285              		@ sp needed	@
 1286 059c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1287              		.cfi_restore 14
 1288              		.cfi_restore 9
 1289              		.cfi_restore 8
 1290              		.cfi_restore 7
 1291              		.cfi_restore 6
 1292              		.cfi_restore 5
 1293              		.cfi_restore 4
 1294              		.cfi_def_cfa_offset 0
 1295              	.LVL74:
 1296              	@ armwave.c:292:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 292:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1297              		.loc 1 292 5 view .LVU358
 1298 05a0 FEFFFFEA 		b	printf		@
 1299              	.LVL75:
 1300              	.L64:
 1301              		.cfi_restore_state
 215:armwave.c     **** 
 1302              		.loc 1 215 5 is_stmt 1 discriminator 1 view .LVU359
 1303 05a4 44309FE5 		ldr	r3, .L66+28	@,
 1304 05a8 D720A0E3 		mov	r2, #215	@,
 1305 05ac 40109FE5 		ldr	r1, .L66+32	@,
 1306 05b0 40009FE5 		ldr	r0, .L66+36	@,
 1307 05b4 FEFFFFEB 		bl	__assert_fail		@
 1308              	.LVL76:
 1309              	.L65:
 269:armwave.c     ****         exit(-1);
 1310              		.loc 1 269 9 view .LVU360
 1311 05b8 3C309FE5 		ldr	r3, .L66+40	@ tmp202,
 1312 05bc 0820A0E1 		mov	r2, r8	@, _22
 1313 05c0 38109FE5 		ldr	r1, .L66+44	@,
 1314 05c4 000093E5 		ldr	r0, [r3]	@, stderr
 1315 05c8 FEFFFFEB 		bl	fprintf		@
 1316              	.LVL77:
 270:armwave.c     ****     }
 1317              		.loc 1 270 9 view .LVU361
 1318 05cc 0000E0E3 		mvn	r0, #0	@,
 1319 05d0 FEFFFFEB 		bl	exit		@
 1320              	.LVL78:
 1321              	.L67:
 1322              		.align	2
 1323              	.L66:
 1324 05d4 0000803F 		.word	1065353216
 1325 05d8 00007F43 		.word	1132396544
 1326 05dc 00008047 		.word	1199570944
 1327 05e0 AC000000 		.word	.LC4
 1328 05e4 00000000 		.word	g_armwave_state
 1329 05e8 FC000000 		.word	.LC7
 1330 05ec A0010000 		.word	.LC9
 1331 05f0 00000000 		.word	.LANCHOR0
 1332 05f4 D8000000 		.word	.LC5
 1333 05f8 E4000000 		.word	.LC6
 1334 05fc 00000000 		.word	stderr
 1335 0600 5C010000 		.word	.LC8
 1336              		.cfi_endproc
 1337              	.LFE62:
 1339              		.align	2
 1340              		.global	armwave_set_wave_pointer
 1341              		.syntax unified
 1342              		.arm
 1343              		.fpu vfp
 1345              	armwave_set_wave_pointer:
 1346              	.LVL79:
 1347              	.LFB63:
 300:armwave.c     **** 
 301:armwave.c     **** /*
 302:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 303:armwave.c     ****  * in the future.
 304:armwave.c     ****  */
 305:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 306:armwave.c     **** {
 1348              		.loc 1 306 1 view -0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 0
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
 307:armwave.c     ****     assert(wave_buffer != NULL);
 1352              		.loc 1 307 5 view .LVU363
 1353 0604 000050E3 		cmp	r0, #0	@ wave_buffer
 1354              		.loc 1 307 5 is_stmt 0 view .LVU364
 1355 0608 0200000A 		beq	.L73		@,
 308:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1356              		.loc 1 308 5 is_stmt 1 view .LVU365
 1357              	@ armwave.c:308:     g_armwave_state.wave_buffer = wave_buffer;
 1358              		.loc 1 308 33 is_stmt 0 view .LVU366
 1359 060c 1C309FE5 		ldr	r3, .L74	@ tmp116,
 1360 0610 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1361 0614 1EFF2FE1 		bx	lr	@
 1362              	.L73:
 307:armwave.c     ****     assert(wave_buffer != NULL);
 1363              		.loc 1 307 5 is_stmt 1 discriminator 1 view .LVU367
 1364              	@ armwave.c:306: {
 306:armwave.c     ****     assert(wave_buffer != NULL);
 1365              		.loc 1 306 1 is_stmt 0 discriminator 1 view .LVU368
 1366 0618 10402DE9 		push	{r4, lr}	@
 1367              		.cfi_def_cfa_offset 8
 1368              		.cfi_offset 4, -8
 1369              		.cfi_offset 14, -4
 1370              	@ armwave.c:307:     assert(wave_buffer != NULL);
 307:armwave.c     ****     assert(wave_buffer != NULL);
 1371              		.loc 1 307 5 discriminator 1 view .LVU369
 1372 061c 10309FE5 		ldr	r3, .L74+4	@,
 1373 0620 10209FE5 		ldr	r2, .L74+8	@,
 1374 0624 10109FE5 		ldr	r1, .L74+12	@,
 1375 0628 10009FE5 		ldr	r0, .L74+16	@,
 1376              	.LVL80:
 307:armwave.c     ****     assert(wave_buffer != NULL);
 1377              		.loc 1 307 5 discriminator 1 view .LVU370
 1378 062c FEFFFFEB 		bl	__assert_fail		@
 1379              	.LVL81:
 1380              	.L75:
 1381              		.align	2
 1382              	.L74:
 1383 0630 00000000 		.word	g_armwave_state
 1384 0634 18000000 		.word	.LANCHOR0+24
 1385 0638 33010000 		.word	307
 1386 063c D8000000 		.word	.LC5
 1387 0640 C4010000 		.word	.LC10
 1388              		.cfi_endproc
 1389              	.LFE63:
 1391              		.align	2
 1392              		.global	armwave_set_wave_pointer_as_testbuf
 1393              		.syntax unified
 1394              		.arm
 1395              		.fpu vfp
 1397              	armwave_set_wave_pointer_as_testbuf:
 1398              	.LVL82:
 1399              	.LFB64:
 309:armwave.c     **** }
 310:armwave.c     **** 
 311:armwave.c     **** /*
 312:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 313:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 314:armwave.c     ****  */
 315:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 316:armwave.c     **** {
 1400              		.loc 1 316 1 is_stmt 1 view -0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 1404              		@ link register save eliminated.
 317:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1405              		.loc 1 317 5 view .LVU372
 1406              	@ armwave.c:317:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1407              		.loc 1 317 29 is_stmt 0 view .LVU373
 1408 0644 24309FE5 		ldr	r3, .L79	@ tmp117,
 1409              	@ armwave.c:317:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1410              		.loc 1 317 7 view .LVU374
 1411 0648 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1412 064c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1413 0650 0400003A 		bcc	.L78		@,
 318:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 319:armwave.c     ****         return;
 320:armwave.c     ****     }
 321:armwave.c     **** 
 322:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1414              		.loc 1 322 5 is_stmt 1 view .LVU375
 1415              	@ armwave.c:322:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1416              		.loc 1 322 111 is_stmt 0 view .LVU376
 1417 0654 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1418              	@ armwave.c:322:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1419              		.loc 1 322 68 view .LVU377
 1420 0658 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1421 065c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1422              	.LVL83:
 1423              	@ armwave.c:322:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1424              		.loc 1 322 33 view .LVU378
 1425 0660 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1426              	@ armwave.c:323: }
 323:armwave.c     **** }
 1427              		.loc 1 323 1 view .LVU379
 1428 0664 1EFF2FE1 		bx	lr	@
 1429              	.LVL84:
 1430              	.L78:
 318:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1431              		.loc 1 318 9 is_stmt 1 view .LVU380
 1432 0668 04009FE5 		ldr	r0, .L79+4	@,
 1433              	.LVL85:
 318:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1434              		.loc 1 318 9 is_stmt 0 view .LVU381
 1435 066c FEFFFFEA 		b	puts		@
 1436              	.LVL86:
 1437              	.L80:
 1438              		.align	2
 1439              	.L79:
 1440 0670 00000000 		.word	g_armwave_state
 1441 0674 D8010000 		.word	.LC11
 1442              		.cfi_endproc
 1443              	.LFE64:
 1445              		.align	2
 1446              		.global	armwave_set_wave_pointer_u32
 1447              		.syntax unified
 1448              		.arm
 1449              		.fpu vfp
 1451              	armwave_set_wave_pointer_u32:
 1452              	.LVL87:
 1453              	.LFB65:
 324:armwave.c     **** 
 325:armwave.c     **** /*
 326:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 327:armwave.c     ****  * disjointed buffers in the future.
 328:armwave.c     ****  */
 329:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 330:armwave.c     **** {
 1454              		.loc 1 330 1 is_stmt 1 view -0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 331:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1458              		.loc 1 331 5 view .LVU383
 1459 0678 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1460              		.loc 1 331 5 is_stmt 0 view .LVU384
 1461 067c 0200000A 		beq	.L86		@,
 332:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1462              		.loc 1 332 5 is_stmt 1 view .LVU385
 1463              	@ armwave.c:332:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1464              		.loc 1 332 33 is_stmt 0 view .LVU386
 1465 0680 1C309FE5 		ldr	r3, .L87	@ tmp117,
 1466 0684 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1467 0688 1EFF2FE1 		bx	lr	@
 1468              	.L86:
 331:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1469              		.loc 1 331 5 is_stmt 1 discriminator 1 view .LVU387
 1470              	@ armwave.c:330: {
 330:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1471              		.loc 1 330 1 is_stmt 0 discriminator 1 view .LVU388
 1472 068c 10402DE9 		push	{r4, lr}	@
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 4, -8
 1475              		.cfi_offset 14, -4
 1476              	@ armwave.c:331:     assert(wave_buffer_ptr != 0);
 331:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1477              		.loc 1 331 5 discriminator 1 view .LVU389
 1478 0690 10309FE5 		ldr	r3, .L87+4	@,
 1479 0694 10209FE5 		ldr	r2, .L87+8	@,
 1480 0698 10109FE5 		ldr	r1, .L87+12	@,
 1481 069c 10009FE5 		ldr	r0, .L87+16	@,
 1482              	.LVL88:
 331:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1483              		.loc 1 331 5 discriminator 1 view .LVU390
 1484 06a0 FEFFFFEB 		bl	__assert_fail		@
 1485              	.LVL89:
 1486              	.L88:
 1487              		.align	2
 1488              	.L87:
 1489 06a4 00000000 		.word	g_armwave_state
 1490 06a8 34000000 		.word	.LANCHOR0+52
 1491 06ac 4B010000 		.word	331
 1492 06b0 D8000000 		.word	.LC5
 1493 06b4 14020000 		.word	.LC12
 1494              		.cfi_endproc
 1495              	.LFE65:
 1497              		.align	2
 1498              		.global	armwave_clear_buffer
 1499              		.syntax unified
 1500              		.arm
 1501              		.fpu vfp
 1503              	armwave_clear_buffer:
 1504              	.LVL90:
 1505              	.LFB66:
 333:armwave.c     **** }
 334:armwave.c     **** 
 335:armwave.c     **** /*
 336:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 337:armwave.c     ****  */
 338:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 339:armwave.c     **** {
 1506              		.loc 1 339 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 340:armwave.c     ****     // Flags ignored, only one buffer cleared
 341:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1511              		.loc 1 341 5 view .LVU392
 1512              	@ armwave.c:341:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1513              		.loc 1 341 58 is_stmt 0 view .LVU393
 1514 06b8 0C309FE5 		ldr	r3, .L90	@ tmp114,
 1515              	@ armwave.c:341:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1516              		.loc 1 341 5 view .LVU394
 1517 06bc 0010A0E3 		mov	r1, #0	@,
 1518 06c0 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1519 06c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1520              	.LVL91:
 1521              		.loc 1 341 5 view .LVU395
 1522 06c8 FEFFFFEA 		b	memset		@
 1523              	.LVL92:
 1524              	.L91:
 1525              		.align	2
 1526              	.L90:
 1527 06cc 00000000 		.word	g_armwave_state
 1528              		.cfi_endproc
 1529              	.LFE66:
 1531              		.align	2
 1532              		.global	armwave_set_channel_colour
 1533              		.syntax unified
 1534              		.arm
 1535              		.fpu vfp
 1537              	armwave_set_channel_colour:
 1538              	.LVL93:
 1539              	.LFB67:
 342:armwave.c     **** }
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 348:armwave.c     **** {
 1540              		.loc 1 348 1 is_stmt 1 view -0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              		@ link register save eliminated.
 349:armwave.c     ****     // Only 1ch supported for now
 350:armwave.c     ****     switch(ch) {
 1545              		.loc 1 350 5 view .LVU397
 1546 06d0 010050E3 		cmp	r0, #1	@ ch,
 351:armwave.c     ****         case 1:
 352:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1547              		.loc 1 352 13 view .LVU398
 1548              	@ armwave.c:352:             g_armwave_state.ch1_color.r = r;
 1549              		.loc 1 352 41 is_stmt 0 view .LVU399
 1550 06d4 0C009F05 		ldreq	r0, .L94	@ tmp117,
 1551              	.LVL94:
 1552              		.loc 1 352 41 view .LVU400
 1553 06d8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 353:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1554              		.loc 1 353 13 is_stmt 1 view .LVU401
 1555              	@ armwave.c:353:             g_armwave_state.ch1_color.g = g;
 1556              		.loc 1 353 41 is_stmt 0 view .LVU402
 1557 06dc BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 354:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1558              		.loc 1 354 13 is_stmt 1 view .LVU403
 1559              	@ armwave.c:354:             g_armwave_state.ch1_color.b = b;
 1560              		.loc 1 354 41 is_stmt 0 view .LVU404
 1561 06e0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 355:armwave.c     ****             break;
 1562              		.loc 1 355 13 is_stmt 1 view .LVU405
 1563              	@ armwave.c:357: }
 356:armwave.c     ****     }
 357:armwave.c     **** }
 1564              		.loc 1 357 1 is_stmt 0 view .LVU406
 1565 06e4 1EFF2FE1 		bx	lr	@
 1566              	.L95:
 1567              		.align	2
 1568              	.L94:
 1569 06e8 00000000 		.word	g_armwave_state
 1570              		.cfi_endproc
 1571              	.LFE67:
 1573              		.align	2
 1574              		.global	armwave_dump_ppm_debug
 1575              		.syntax unified
 1576              		.arm
 1577              		.fpu vfp
 1579              	armwave_dump_ppm_debug:
 1580              	.LVL95:
 1581              	.LFB68:
 358:armwave.c     **** 
 359:armwave.c     **** /*
 360:armwave.c     ****  * Dump a ppm of a buffer to a file.
 361:armwave.c     ****  */
 362:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 363:armwave.c     **** {
 1582              		.loc 1 363 1 is_stmt 1 view -0
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 0
 1585              		@ frame_needed = 0, uses_anonymous_args = 0
 364:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1586              		.loc 1 364 5 view .LVU408
 1587              	@ armwave.c:363: {
 363:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1588              		.loc 1 363 1 is_stmt 0 view .LVU409
 1589 06ec 0130A0E1 		mov	r3, r1	@ fn, fn
 1590 06f0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1591              		.cfi_def_cfa_offset 28
 1592              		.cfi_offset 4, -28
 1593              		.cfi_offset 5, -24
 1594              		.cfi_offset 6, -20
 1595              		.cfi_offset 7, -16
 1596              		.cfi_offset 8, -12
 1597              		.cfi_offset 9, -8
 1598              		.cfi_offset 14, -4
 1599 06f4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1600 06f8 0CD04DE2 		sub	sp, sp, #12	@,,
 1601              		.cfi_def_cfa_offset 40
 1602              	@ armwave.c:364:     FILE *fp = fopen(fn, "wb");
 1603              		.loc 1 364 16 view .LVU410
 1604 06fc C4109FE5 		ldr	r1, .L104	@,
 1605              	.LVL96:
 1606              		.loc 1 364 16 view .LVU411
 1607 0700 0300A0E1 		mov	r0, r3	@, fn
 1608              	.LVL97:
 1609              		.loc 1 364 16 view .LVU412
 1610 0704 FEFFFFEB 		bl	fopen64		@
 1611              	.LVL98:
 1612              	@ armwave.c:371:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 365:armwave.c     ****     uint32_t data;
 366:armwave.c     ****     int xx, yy;
 367:armwave.c     **** 
 368:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 369:armwave.c     **** 
 370:armwave.c     ****     fputs("P3\n", fp);
 371:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1613              		.loc 1 371 5 view .LVU413
 1614 0708 BC609FE5 		ldr	r6, .L104+4	@ tmp150,
 1615              	@ armwave.c:370:     fputs("P3\n", fp);
 370:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1616              		.loc 1 370 5 view .LVU414
 1617 070c 0320A0E3 		mov	r2, #3	@,
 1618 0710 0110A0E3 		mov	r1, #1	@,
 1619              	@ armwave.c:364:     FILE *fp = fopen(fn, "wb");
 364:armwave.c     ****     uint32_t data;
 1620              		.loc 1 364 16 view .LVU415
 1621 0714 0070A0E1 		mov	r7, r0	@ fp,
 1622              	.LVL99:
 365:armwave.c     ****     uint32_t data;
 1623              		.loc 1 365 5 is_stmt 1 view .LVU416
 366:armwave.c     **** 
 1624              		.loc 1 366 5 view .LVU417
 370:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1625              		.loc 1 370 5 view .LVU418
 1626 0718 0030A0E1 		mov	r3, r0	@, fp
 1627 071c AC009FE5 		ldr	r0, .L104+8	@,
 1628              	.LVL100:
 370:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1629              		.loc 1 370 5 is_stmt 0 view .LVU419
 1630 0720 FEFFFFEB 		bl	fwrite		@
 1631              	.LVL101:
 1632              		.loc 1 371 5 is_stmt 1 view .LVU420
 1633 0724 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1634 0728 A4109FE5 		ldr	r1, .L104+12	@,
 1635 072c 0700A0E1 		mov	r0, r7	@, fp
 1636 0730 FEFFFFEB 		bl	fprintf		@
 1637              	.LVL102:
 372:armwave.c     ****     fputs("255\n", fp);
 1638              		.loc 1 372 5 view .LVU421
 1639 0734 0420A0E3 		mov	r2, #4	@,
 1640 0738 0730A0E1 		mov	r3, r7	@, fp
 1641 073c 0110A0E3 		mov	r1, #1	@,
 1642 0740 90009FE5 		ldr	r0, .L104+16	@,
 1643 0744 FEFFFFEB 		bl	fwrite		@
 1644              	.LVL103:
 373:armwave.c     **** 
 374:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1645              		.loc 1 374 5 view .LVU422
 1646              	@ armwave.c:374:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1647              		.loc 1 374 37 is_stmt 0 view .LVU423
 1648 0748 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1649              	@ armwave.c:374:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1650              		.loc 1 374 5 view .LVU424
 1651 074c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1652 0750 180000DA 		ble	.L97		@,
 1653 0754 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1654              	@ armwave.c:379:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 376:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 377:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 378:armwave.c     **** 
 379:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1655              		.loc 1 379 13 view .LVU425
 1656 0758 7C909FE5 		ldr	r9, .L104+20	@ tmp152,
 1657              	@ armwave.c:374:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 374:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1658              		.loc 1 374 12 view .LVU426
 1659 075c 0050A0E3 		mov	r5, #0	@ yy,
 1660              	.LVL104:
 1661              	.L98:
 1662              	@ armwave.c:375:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1663              		.loc 1 375 9 view .LVU427
 1664 0760 000053E3 		cmp	r3, #0	@ _13,
 1665              	@ armwave.c:375:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1666              		.loc 1 375 16 view .LVU428
 1667 0764 0040A0C3 		movgt	r4, #0	@ xx,
 1668              	@ armwave.c:375:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1669              		.loc 1 375 9 view .LVU429
 1670 0768 0F0000DA 		ble	.L100		@,
 1671              	.LVL105:
 1672              	.L99:
 376:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1673              		.loc 1 376 13 is_stmt 1 discriminator 3 view .LVU430
 1674              	@ armwave.c:376:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 376:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1675              		.loc 1 376 29 is_stmt 0 discriminator 3 view .LVU431
 1676 076c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1677              	@ armwave.c:379:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1678              		.loc 1 379 13 discriminator 3 view .LVU432
 1679 0770 0910A0E1 		mov	r1, r9	@, tmp152
 1680 0774 0700A0E1 		mov	r0, r7	@, fp
 1681              	@ armwave.c:376:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 376:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1682              		.loc 1 376 18 discriminator 3 view .LVU433
 1683 0778 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1684              	.LVL106:
 1685              		.loc 1 379 13 is_stmt 1 discriminator 3 view .LVU434
 1686              	@ armwave.c:375:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1687              		.loc 1 375 58 is_stmt 0 discriminator 3 view .LVU435
 1688 077c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1689              	.LVL107:
 1690              	@ armwave.c:379:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1691              		.loc 1 379 81 discriminator 3 view .LVU436
 1692 0780 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1693              	@ armwave.c:379:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1694              		.loc 1 379 61 discriminator 3 view .LVU437
 1695 0784 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1696              	@ armwave.c:379:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1697              		.loc 1 379 13 discriminator 3 view .LVU438
 1698 0788 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1699 078c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1700 0790 00C08DE5 		str	ip, [sp]	@ tmp147,
 1701 0794 7220EFE6 		uxtb	r2, r2	@, data
 1702              	.LVL108:
 1703              		.loc 1 379 13 discriminator 3 view .LVU439
 1704 0798 FEFFFFEB 		bl	fprintf		@
 1705              	.LVL109:
 1706              	@ armwave.c:375:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1707              		.loc 1 375 41 discriminator 3 view .LVU440
 1708 079c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1709              	@ armwave.c:375:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 375:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1710              		.loc 1 375 9 discriminator 3 view .LVU441
 1711 07a0 040053E1 		cmp	r3, r4	@ _13, xx
 1712 07a4 F0FFFFCA 		bgt	.L99		@,
 1713 07a8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1714              	.LVL110:
 1715              	.L100:
 1716              	@ armwave.c:374:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 374:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1717              		.loc 1 374 55 discriminator 2 view .LVU442
 1718 07ac 015085E2 		add	r5, r5, #1	@ yy, yy,
 1719              	.LVL111:
 1720              	@ armwave.c:374:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 374:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1721              		.loc 1 374 5 discriminator 2 view .LVU443
 1722 07b0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1723 07b4 E9FFFFBA 		blt	.L98		@,
 1724              	.LVL112:
 1725              	.L97:
 380:armwave.c     ****         }
 381:armwave.c     ****     }
 382:armwave.c     **** 
 383:armwave.c     ****     fclose(fp);
 1726              		.loc 1 383 5 is_stmt 1 view .LVU444
 1727 07b8 0700A0E1 		mov	r0, r7	@, fp
 1728              	@ armwave.c:384: }
 384:armwave.c     **** }
 1729              		.loc 1 384 1 is_stmt 0 view .LVU445
 1730 07bc 0CD08DE2 		add	sp, sp, #12	@,,
 1731              		.cfi_def_cfa_offset 28
 1732              		@ sp needed	@
 1733 07c0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1734              		.cfi_restore 14
 1735              		.cfi_restore 9
 1736              		.cfi_restore 8
 1737              		.cfi_restore 7
 1738              		.cfi_restore 6
 1739              		.cfi_restore 5
 1740              		.cfi_restore 4
 1741              		.cfi_def_cfa_offset 0
 1742              	.LVL113:
 1743              	@ armwave.c:383:     fclose(fp);
 383:armwave.c     **** }
 1744              		.loc 1 383 5 view .LVU446
 1745 07c4 FEFFFFEA 		b	fclose		@
 1746              	.LVL114:
 1747              	.L105:
 383:armwave.c     **** }
 1748              		.loc 1 383 5 view .LVU447
 1749              		.align	2
 1750              	.L104:
 1751 07c8 2C020000 		.word	.LC13
 1752 07cc 00000000 		.word	g_armwave_state
 1753 07d0 30020000 		.word	.LC14
 1754 07d4 34020000 		.word	.LC15
 1755 07d8 3C020000 		.word	.LC16
 1756 07dc 44020000 		.word	.LC17
 1757              		.cfi_endproc
 1758              	.LFE68:
 1760              		.align	2
 1761              		.global	armwave_test_init
 1762              		.syntax unified
 1763              		.arm
 1764              		.fpu vfp
 1766              	armwave_test_init:
 1767              	.LVL115:
 1768              	.LFB69:
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Initialise some test functionry.
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 390:armwave.c     **** {
 1769              		.loc 1 390 1 is_stmt 1 view -0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 391:armwave.c     ****     test_create_gamma();
 1773              		.loc 1 391 5 view .LVU449
 1774              	.LBB12:
 1775              	.LBI12:
  34:armwave.c     **** {
 1776              		.loc 1 34 6 view .LVU450
  34:armwave.c     **** {
 1777              		.loc 1 34 6 is_stmt 0 view .LVU451
 1778              	.LBE12:
 1779              	@ armwave.c:390: {
 390:armwave.c     ****     test_create_gamma();
 1780              		.loc 1 390 1 view .LVU452
 1781 07e0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1782              		.cfi_def_cfa_offset 32
 1783              		.cfi_offset 4, -32
 1784              		.cfi_offset 5, -28
 1785              		.cfi_offset 6, -24
 1786              		.cfi_offset 7, -20
 1787              		.cfi_offset 8, -16
 1788              		.cfi_offset 9, -12
 1789              		.cfi_offset 10, -8
 1790              		.cfi_offset 14, -4
 1791 07e4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1792              		.cfi_def_cfa_offset 56
 1793              		.cfi_offset 80, -56
 1794              		.cfi_offset 81, -52
 1795              		.cfi_offset 82, -48
 1796              		.cfi_offset 83, -44
 1797              		.cfi_offset 84, -40
 1798              		.cfi_offset 85, -36
 1799 07e8 BC409FE5 		ldr	r4, .L110+20	@ ivtmp.82,
 1800              	.LBB15:
 1801              	.LBB13:
 1802              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1803              		.loc 1 40 32 view .LVU453
 1804 07ec 2DAA9FED 		vldr.32	s20, .L110+16	@ tmp136,
 1805              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1806              		.loc 1 40 26 view .LVU454
 1807 07f0 289B9FED 		vldr.64	d9, .L110	@ tmp151,
 1808              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1809              		.loc 1 40 49 view .LVU455
 1810 07f4 298B9FED 		vldr.64	d8, .L110+8	@ tmp139,
 1811 07f8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 1812              	.LBE13:
 1813              	.LBE15:
 1814              	@ armwave.c:390: {
 390:armwave.c     ****     test_create_gamma();
 1815              		.loc 1 390 1 view .LVU456
 1816 07fc 10D04DE2 		sub	sp, sp, #16	@,,
 1817              		.cfi_def_cfa_offset 72
 1818              	@ armwave.c:390: {
 390:armwave.c     ****     test_create_gamma();
 1819              		.loc 1 390 1 view .LVU457
 1820 0800 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1821 0804 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1822 0808 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1823 080c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1824 0810 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 1825 0814 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1826              	.LVL116:
 1827              	.L107:
 1828              	.LBB16:
 1829              	.LBB14:
  40:armwave.c     ****     }
 1830              		.loc 1 40 9 is_stmt 1 view .LVU458
 1831              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1832              		.loc 1 40 32 is_stmt 0 view .LVU459
 1833 0818 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 1834              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1835              		.loc 1 40 26 view .LVU460
 1836 081c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1837              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1838              		.loc 1 40 32 view .LVU461
 1839 0820 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1840 0824 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1841 0828 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1842              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1843              		.loc 1 40 26 view .LVU462
 1844 082c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1845 0830 FEFFFFEB 		bl	pow		@
 1846              	.LVL117:
 1847              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1848              		.loc 1 40 49 view .LVU463
 1849 0834 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1850              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1851              		.loc 1 40 24 view .LVU464
 1852 0838 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1853 083c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1854 0840 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1855              	.LVL118:
 1856              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1857              		.loc 1 39 5 view .LVU465
 1858 0844 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 1859 0848 F2FFFF1A 		bne	.L107		@,
 1860              	.LVL119:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1861              		.loc 1 39 5 view .LVU466
 1862              	.LBE14:
 1863              	.LBE16:
 392:armwave.c     **** 
 393:armwave.c     ****     // make ch1 yellowish by default
 394:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1864              		.loc 1 394 5 is_stmt 1 view .LVU467
 1865              	.LBB17:
 1866              	.LBI17:
 347:armwave.c     **** {
 1867              		.loc 1 347 6 view .LVU468
 1868              	.LBB18:
 350:armwave.c     ****         case 1:
 1869              		.loc 1 350 5 view .LVU469
 352:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1870              		.loc 1 352 13 view .LVU470
 353:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1871              		.loc 1 353 13 view .LVU471
 1872              	@ armwave.c:352:             g_armwave_state.ch1_color.r = r;
 352:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1873              		.loc 1 352 41 is_stmt 0 view .LVU472
 1874 084c 5CC09FE5 		ldr	ip, .L110+24	@ tmp142,
 1875 0850 5C409FE5 		ldr	r4, .L110+28	@ tmp143,
 1876              	.LBE18:
 1877              	.LBE17:
 1878              	@ armwave.c:396:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 395:armwave.c     **** 
 396:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1879              		.loc 1 396 5 view .LVU473
 1880 0854 0000A0E3 		mov	r0, #0	@ tmp147,
 1881              	.LBB22:
 1882              	.LBB19:
 1883              	@ armwave.c:354:             g_armwave_state.ch1_color.b = b;
 354:armwave.c     ****             break;
 1884              		.loc 1 354 41 view .LVU474
 1885 0858 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1886              	.LBE19:
 1887              	.LBE22:
 1888              	@ armwave.c:396:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1889              		.loc 1 396 5 view .LVU475
 1890 085c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1891 0860 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1892 0864 00808DE5 		str	r8, [sp]	@ render_width,
 1893 0868 0610A0E1 		mov	r1, r6	@, tmp3
 1894 086c 0720A0E1 		mov	r2, r7	@, nwaves
 1895              	.LBB23:
 1896              	.LBB20:
 1897              	@ armwave.c:352:             g_armwave_state.ch1_color.r = r;
 352:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1898              		.loc 1 352 41 view .LVU476
 1899 0870 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 354:armwave.c     ****             break;
 1900              		.loc 1 354 13 is_stmt 1 view .LVU477
 1901              	.LBE20:
 1902              	.LBE23:
 1903              	@ armwave.c:396:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1904              		.loc 1 396 5 is_stmt 0 view .LVU478
 1905 0874 0630A0E1 		mov	r3, r6	@, wave_size
 1906              	.LBB24:
 1907              	.LBB21:
 1908              	@ armwave.c:354:             g_armwave_state.ch1_color.b = b;
 354:armwave.c     ****             break;
 1909              		.loc 1 354 41 view .LVU479
 1910 0878 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 355:armwave.c     ****     }
 1911              		.loc 1 355 13 is_stmt 1 view .LVU480
 1912              	.LVL120:
 355:armwave.c     ****     }
 1913              		.loc 1 355 13 is_stmt 0 view .LVU481
 1914              	.LBE21:
 1915              	.LBE24:
 1916              		.loc 1 396 5 is_stmt 1 view .LVU482
 1917 087c FEFFFFEB 		bl	armwave_setup_render		@
 1918              	.LVL121:
 397:armwave.c     **** 
 398:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1919              		.loc 1 398 5 view .LVU483
 1920 0880 30109FE5 		ldr	r1, .L110+32	@,
 1921 0884 30009FE5 		ldr	r0, .L110+36	@,
 1922              	@ armwave.c:399: }
 399:armwave.c     **** }
 1923              		.loc 1 399 1 is_stmt 0 view .LVU484
 1924 0888 10D08DE2 		add	sp, sp, #16	@,,
 1925              		.cfi_def_cfa_offset 56
 1926              		@ sp needed	@
 1927 088c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1928              		.cfi_restore 84
 1929              		.cfi_restore 85
 1930              		.cfi_restore 82
 1931              		.cfi_restore 83
 1932              		.cfi_restore 80
 1933              		.cfi_restore 81
 1934              		.cfi_def_cfa_offset 32
 1935 0890 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1936              		.cfi_restore 14
 1937              		.cfi_restore 10
 1938              		.cfi_restore 9
 1939              		.cfi_restore 8
 1940              		.cfi_restore 7
 1941              		.cfi_restore 6
 1942              		.cfi_restore 5
 1943              		.cfi_restore 4
 1944              		.cfi_def_cfa_offset 0
 1945              	.LVL122:
 1946              	@ armwave.c:398:     printf("armwave version: %s\n", ARMWAVE_VER);
 398:armwave.c     **** }
 1947              		.loc 1 398 5 view .LVU485
 1948 0894 FEFFFFEA 		b	printf		@
 1949              	.LVL123:
 1950              	.L111:
 1951              		.align	3
 1952              	.L110:
 1953 0898 000000C0 		.word	-1073741824
 1954 089c CCCCEC3F 		.word	1072483532
 1955 08a0 00000000 		.word	0
 1956 08a4 00E06F40 		.word	1081073664
 1957 08a8 00007F43 		.word	1132396544
 1958 08ac FFFFFFFF 		.word	gamma_table-1
 1959 08b0 00000000 		.word	g_armwave_state
 1960 08b4 F609F406 		.word	116656630
 1961 08b8 00000000 		.word	.LC0
 1962 08bc 08000000 		.word	.LC1
 1963              		.cfi_endproc
 1964              	.LFE69:
 1966              		.align	2
 1967              		.global	armwave_test_fill_outbuf
 1968              		.syntax unified
 1969              		.arm
 1970              		.fpu vfp
 1972              	armwave_test_fill_outbuf:
 1973              	.LFB70:
 400:armwave.c     **** 
 401:armwave.c     **** /*
 402:armwave.c     ****  * Render image to the local allocated buffer.
 403:armwave.c     ****  */
 404:armwave.c     **** void armwave_test_fill_outbuf()
 405:armwave.c     **** {
 1974              		.loc 1 405 1 is_stmt 1 view -0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		@ link register save eliminated.
 406:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1979              		.loc 1 406 5 view .LVU487
 1980 08c0 04309FE5 		ldr	r3, .L113	@ tmp111,
 1981 08c4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 1982 08c8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 1983              	.LVL124:
 1984              	.L114:
 1985              		.align	2
 1986              	.L113:
 1987 08cc 00000000 		.word	g_armwave_state
 1988              		.cfi_endproc
 1989              	.LFE70:
 1991              		.align	2
 1992              		.global	armwave_test_dump_buffer_to_ppm
 1993              		.syntax unified
 1994              		.arm
 1995              		.fpu vfp
 1997              	armwave_test_dump_buffer_to_ppm:
 1998              	.LVL125:
 1999              	.LFB71:
 407:armwave.c     **** }
 408:armwave.c     **** 
 409:armwave.c     **** /*
 410:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 411:armwave.c     ****  */
 412:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 413:armwave.c     **** {
 2000              		.loc 1 413 1 view -0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              		@ link register save eliminated.
 414:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2005              		.loc 1 414 5 view .LVU489
 2006 08d0 08309FE5 		ldr	r3, .L116	@ tmp112,
 2007 08d4 0010A0E1 		mov	r1, r0	@, fn
 2008 08d8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2009              	.LVL126:
 2010              		.loc 1 414 5 is_stmt 0 view .LVU490
 2011 08dc FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2012              	.LVL127:
 2013              	.L117:
 2014              		.loc 1 414 5 view .LVU491
 2015              		.align	2
 2016              	.L116:
 2017 08e0 00000000 		.word	g_armwave_state
 2018              		.cfi_endproc
 2019              	.LFE71:
 2021              		.align	2
 2022              		.global	armwave_test_fill_gdkbuf
 2023              		.syntax unified
 2024              		.arm
 2025              		.fpu vfp
 2027              	armwave_test_fill_gdkbuf:
 2028              	.LVL128:
 2029              	.LFB72:
 415:armwave.c     **** }
 416:armwave.c     **** 
 417:armwave.c     **** /*
 418:armwave.c     ****  * Render GDK buffer with test funtionry.
 419:armwave.c     ****  */
 420:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 421:armwave.c     **** {
 2030              		.loc 1 421 1 is_stmt 1 view -0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 0
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              		@ link register save eliminated.
 422:armwave.c     ****     //PyObject *mv;
 423:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 424:armwave.c     **** 
 425:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 426:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2035              		.loc 1 426 5 view .LVU493
 427:armwave.c     ****     
 428:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 429:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2036              		.loc 1 429 5 view .LVU494
 2037              	@ armwave.c:426:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 426:armwave.c     ****     
 2038              		.loc 1 426 11 is_stmt 0 view .LVU495
 2039 08e4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2040              	@ armwave.c:429:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2041              		.loc 1 429 5 view .LVU496
 2042 08e8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2043              	.LVL129:
 2044              		.loc 1 429 5 view .LVU497
 2045 08ec FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2046              	.LVL130:
 2047              		.loc 1 429 5 view .LVU498
 2048              		.cfi_endproc
 2049              	.LFE72:
 2051              		.align	2
 2052              		.global	armwave_test_buffer_alloc
 2053              		.syntax unified
 2054              		.arm
 2055              		.fpu vfp
 2057              	armwave_test_buffer_alloc:
 2058              	.LVL131:
 2059              	.LFB73:
 430:armwave.c     **** }
 431:armwave.c     **** 
 432:armwave.c     **** /*
 433:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 434:armwave.c     ****  */
 435:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 436:armwave.c     **** {
 2060              		.loc 1 436 1 is_stmt 1 view -0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 0
 2063              		@ frame_needed = 0, uses_anonymous_args = 0
 437:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2064              		.loc 1 437 5 view .LVU500
 2065              	@ armwave.c:436: {
 436:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2066              		.loc 1 436 1 is_stmt 0 view .LVU501
 2067 08f0 70402DE9 		push	{r4, r5, r6, lr}	@
 2068              		.cfi_def_cfa_offset 16
 2069              		.cfi_offset 4, -16
 2070              		.cfi_offset 5, -12
 2071              		.cfi_offset 6, -8
 2072              		.cfi_offset 14, -4
 2073              	@ armwave.c:436: {
 436:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2074              		.loc 1 436 1 view .LVU502
 2075 08f4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2076              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer != NULL) {
 2077              		.loc 1 437 23 view .LVU503
 2078 08f8 44409FE5 		ldr	r4, .L126	@ tmp128,
 2079 08fc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2080              	.LVL132:
 2081              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer != NULL) {
 2082              		.loc 1 437 7 view .LVU504
 2083 0900 000050E3 		cmp	r0, #0	@ _1,
 2084 0904 0000000A 		beq	.L120		@,
 438:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2085              		.loc 1 438 9 is_stmt 1 view .LVU505
 2086 0908 FEFFFFEB 		bl	free		@
 2087              	.LVL133:
 2088              	.L120:
 439:armwave.c     ****     }
 440:armwave.c     **** 
 441:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 442:armwave.c     **** 
 443:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2089              		.loc 1 443 5 view .LVU506
 2090              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2091              		.loc 1 443 75 is_stmt 0 view .LVU507
 2092 090c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2093 0910 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2094              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2095              		.loc 1 443 40 view .LVU508
 2096 0914 0610A0E1 		mov	r1, r6	@, nsets
 2097              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2098              		.loc 1 443 75 view .LVU509
 2099 0918 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2100              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2101              		.loc 1 443 40 view .LVU510
 2102 091c 0500A0E1 		mov	r0, r5	@, _4
 2103 0920 FEFFFFEB 		bl	calloc		@
 2104              	.LVL134:
 2105              	@ armwave.c:445:     if(g_armwave_state.test_wave_buffer == NULL) {
 444:armwave.c     **** 
 445:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2106              		.loc 1 445 7 view .LVU511
 2107 0924 000050E3 		cmp	r0, #0	@ tmp124,
 2108              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 443:armwave.c     **** 
 2109              		.loc 1 443 38 view .LVU512
 2110 0928 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2111              		.loc 1 445 5 is_stmt 1 view .LVU513
 2112              	@ armwave.c:445:     if(g_armwave_state.test_wave_buffer == NULL) {
 2113              		.loc 1 445 7 is_stmt 0 view .LVU514
 2114 092c 7080BD18 		popne	{r4, r5, r6, pc}	@
 446:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2115              		.loc 1 446 9 is_stmt 1 view .LVU515
 2116 0930 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2117 0934 0620A0E1 		mov	r2, r6	@, nsets
 2118 0938 08009FE5 		ldr	r0, .L126+4	@,
 2119              	@ armwave.c:450: }
 447:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 448:armwave.c     ****         return;
 449:armwave.c     ****     }
 450:armwave.c     **** }
 2120              		.loc 1 450 1 is_stmt 0 view .LVU516
 2121 093c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2122              		.cfi_restore 14
 2123              		.cfi_restore 6
 2124              		.cfi_restore 5
 2125              		.cfi_restore 4
 2126              		.cfi_def_cfa_offset 0
 2127              	.LVL135:
 2128              	@ armwave.c:446:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 446:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2129              		.loc 1 446 9 view .LVU517
 2130 0940 FEFFFFEA 		b	printf		@
 2131              	.LVL136:
 2132              	.L127:
 446:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2133              		.loc 1 446 9 view .LVU518
 2134              		.align	2
 2135              	.L126:
 2136 0944 00000000 		.word	g_armwave_state
 2137 0948 54020000 		.word	.LC18
 2138              		.cfi_endproc
 2139              	.LFE73:
 2141              		.align	2
 2142              		.global	armwave_fill_pixbuf_into_pybuffer
 2143              		.syntax unified
 2144              		.arm
 2145              		.fpu vfp
 2147              	armwave_fill_pixbuf_into_pybuffer:
 2148              	.LVL137:
 2149              	.LFB74:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 454:armwave.c     ****  */
 455:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 456:armwave.c     **** {
 2150              		.loc 1 456 1 is_stmt 1 view -0
 2151              		.cfi_startproc
 2152              		@ args = 0, pretend = 0, frame = 48
 2153              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     Py_buffer buffer;
 2154              		.loc 1 457 5 view .LVU520
 458:armwave.c     ****     int ret;
 2155              		.loc 1 458 5 view .LVU521
 459:armwave.c     **** 
 460:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 461:armwave.c     **** 
 462:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2156              		.loc 1 462 5 view .LVU522
 2157              	@ armwave.c:456: {
 456:armwave.c     ****     Py_buffer buffer;
 2158              		.loc 1 456 1 is_stmt 0 view .LVU523
 2159 094c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2160              		.cfi_def_cfa_offset 4
 2161              		.cfi_offset 14, -4
 2162 0950 34D04DE2 		sub	sp, sp, #52	@,,
 2163              		.cfi_def_cfa_offset 56
 2164              	@ armwave.c:462:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2165              		.loc 1 462 11 view .LVU524
 2166 0954 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2167 0958 0120A0E3 		mov	r2, #1	@,
 2168 095c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2169              	.LVL138:
 463:armwave.c     **** 
 464:armwave.c     ****     if(ret != 0) {
 2170              		.loc 1 464 5 is_stmt 1 view .LVU525
 2171              	@ armwave.c:464:     if(ret != 0) {
 2172              		.loc 1 464 7 is_stmt 0 view .LVU526
 2173 0960 000050E3 		cmp	r0, #0	@,
 2174 0964 0A00001A 		bne	.L132		@,
 465:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 466:armwave.c     ****         Py_RETURN_FALSE;
 467:armwave.c     ****     }
 468:armwave.c     **** 
 469:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 470:armwave.c     **** 
 471:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2175              		.loc 1 471 5 is_stmt 1 view .LVU527
 2176 0968 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2177              	.LVL139:
 2178              		.loc 1 471 5 is_stmt 0 view .LVU528
 2179 096c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2180              	.LVL140:
 472:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 473:armwave.c     **** 
 474:armwave.c     ****     PyBuffer_Release(&buffer);
 2181              		.loc 1 474 5 is_stmt 1 view .LVU529
 2182 0970 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2183 0974 FEFFFFEB 		bl	PyBuffer_Release		@
 2184              	.LVL141:
 475:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 476:armwave.c     **** 
 477:armwave.c     ****     Py_RETURN_TRUE;
 2185              		.loc 1 477 5 view .LVU530
 2186              	.LBB25:
 2187              	.LBI25:
 2188              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2189              		.loc 2 456 20 view .LVU531
 2190              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2191              		.loc 2 458 21 view .LVU532
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2192              		.loc 2 459 5 view .LVU533
 2193              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2194              		.loc 2 459 18 is_stmt 0 view .LVU534
 2195 0978 38309FE5 		ldr	r3, .L133	@ tmp126,
 2196              	.LBE26:
 2197              	.LBE25:
 2198              	@ armwave.c:477:     Py_RETURN_TRUE;
 2199              		.loc 1 477 5 view .LVU535
 2200 097c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2201              	.LBB28:
 2202              	.LBB27:
 2203              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2204              		.loc 2 459 18 view .LVU536
 2205 0980 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2206 0984 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2207 0988 002083E5 		str	r2, [r3]	@ tmp128,
 2208              	.LBE27:
 2209              	.LBE28:
 2210              	@ armwave.c:478: }
 478:armwave.c     **** }
 2211              		.loc 1 478 1 view .LVU537
 2212 098c 34D08DE2 		add	sp, sp, #52	@,,
 2213              		.cfi_remember_state
 2214              		.cfi_def_cfa_offset 4
 2215              		@ sp needed	@
 2216 0990 04F09DE4 		ldr	pc, [sp], #4	@
 2217              	.LVL142:
 2218              	.L132:
 2219              		.cfi_restore_state
 465:armwave.c     ****         Py_RETURN_FALSE;
 2220              		.loc 1 465 9 is_stmt 1 view .LVU538
 2221 0994 20009FE5 		ldr	r0, .L133+4	@,
 2222              	.LVL143:
 465:armwave.c     ****         Py_RETURN_FALSE;
 2223              		.loc 1 465 9 is_stmt 0 view .LVU539
 2224 0998 FEFFFFEB 		bl	puts		@
 2225              	.LVL144:
 466:armwave.c     ****     }
 2226              		.loc 1 466 9 is_stmt 1 view .LVU540
 2227              	.LBB29:
 2228              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2229              		.loc 2 456 20 view .LVU541
 2230              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2231              		.loc 2 458 21 view .LVU542
 2232              		.loc 2 459 5 view .LVU543
 2233              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2234              		.loc 2 459 18 is_stmt 0 view .LVU544
 2235 099c 1C309FE5 		ldr	r3, .L133+8	@ tmp120,
 2236              	.LBE30:
 2237              	.LBE29:
 2238              	@ armwave.c:466:         Py_RETURN_FALSE;
 466:armwave.c     ****     }
 2239              		.loc 1 466 9 view .LVU545
 2240 09a0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2241              	.LBB32:
 2242              	.LBB31:
 2243              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2244              		.loc 2 459 18 view .LVU546
 2245 09a4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2246 09a8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2247 09ac 002083E5 		str	r2, [r3]	@ tmp122,
 2248              	.LBE31:
 2249              	.LBE32:
 2250              	@ armwave.c:478: }
 2251              		.loc 1 478 1 view .LVU547
 2252 09b0 34D08DE2 		add	sp, sp, #52	@,,
 2253              		.cfi_def_cfa_offset 4
 2254              		@ sp needed	@
 2255 09b4 04F09DE4 		ldr	pc, [sp], #4	@
 2256              	.L134:
 2257              		.align	2
 2258              	.L133:
 2259 09b8 00000000 		.word	_Py_TrueStruct
 2260 09bc A8020000 		.word	.LC19
 2261 09c0 00000000 		.word	_Py_FalseStruct
 2262              		.cfi_endproc
 2263              	.LFE74:
 2265              		.align	2
 2266              		.global	armwave_test_create_am_sine
 2267              		.syntax unified
 2268              		.arm
 2269              		.fpu vfp
 2271              	armwave_test_create_am_sine:
 2272              	.LVL145:
 2273              	.LFB75:
 479:armwave.c     **** 
 480:armwave.c     **** /*
 481:armwave.c     ****  * Make a test AM waveform for render tests.
 482:armwave.c     ****  *
 483:armwave.c     ****  * @param   mod                     modulation depth
 484:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 485:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 488:armwave.c     **** {
 2274              		.loc 1 488 1 is_stmt 1 view -0
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 8
 2277              		@ frame_needed = 0, uses_anonymous_args = 0
 489:armwave.c     ****     float v, noise, xnoise, mod_val;
 2278              		.loc 1 489 5 view .LVU549
 490:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2279              		.loc 1 490 5 view .LVU550
 2280              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 2281              		.loc 1 488 1 is_stmt 0 view .LVU551
 2282 09c4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2283              		.cfi_def_cfa_offset 32
 2284              		.cfi_offset 4, -32
 2285              		.cfi_offset 5, -28
 2286              		.cfi_offset 6, -24
 2287              		.cfi_offset 7, -20
 2288              		.cfi_offset 8, -16
 2289              		.cfi_offset 9, -12
 2290              		.cfi_offset 10, -8
 2291              		.cfi_offset 14, -4
 2292              	@ armwave.c:490:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2293              		.loc 1 490 38 view .LVU552
 2294 09c8 7A7A9FED 		vldr.32	s14, .L166	@ tmp180,
 2295              	@ armwave.c:490:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2296              		.loc 1 490 55 view .LVU553
 2297 09cc 00529FE5 		ldr	r5, .L166+28	@ tmp250,
 2298              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 2299              		.loc 1 488 1 view .LVU554
 2300 09d0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2301              		.cfi_def_cfa_offset 80
 2302              		.cfi_offset 80, -80
 2303              		.cfi_offset 81, -76
 2304              		.cfi_offset 82, -72
 2305              		.cfi_offset 83, -68
 2306              		.cfi_offset 84, -64
 2307              		.cfi_offset 85, -60
 2308              		.cfi_offset 86, -56
 2309              		.cfi_offset 87, -52
 2310              		.cfi_offset 88, -48
 2311              		.cfi_offset 89, -44
 2312              		.cfi_offset 90, -40
 2313              		.cfi_offset 91, -36
 2314 09d4 0090A0E1 		mov	r9, r0	@ sets, sets
 2315              	@ armwave.c:490:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2316              		.loc 1 490 38 view .LVU555
 2317 09d8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2318              	@ armwave.c:494:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 491:armwave.c     ****     int s, set_offset = 0;
 492:armwave.c     ****     int w, x;
 493:armwave.c     **** 
 494:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2319              		.loc 1 494 70 view .LVU556
 2320 09dc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2321 09e0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2322              	.LBB35:
 2323              	.LBB36:
 2324              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer != NULL) {
 437:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2325              		.loc 1 437 23 view .LVU557
 2326 09e4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2327              	.LVL146:
 437:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2328              		.loc 1 437 23 view .LVU558
 2329              	.LBE36:
 2330              	.LBE35:
 2331              	@ armwave.c:490:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 490:armwave.c     ****     int s, set_offset = 0;
 2332              		.loc 1 490 38 view .LVU559
 2333 09e8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2334              	@ armwave.c:494:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2335              		.loc 1 494 70 view .LVU560
 2336 09ec 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2337              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 2338              		.loc 1 488 1 view .LVU561
 2339 09f0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2340              	.LBB40:
 2341              	.LBB37:
 2342              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer != NULL) {
 437:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2343              		.loc 1 437 7 view .LVU562
 2344 09f4 000050E3 		cmp	r0, #0	@ _82,
 2345              	.LBE37:
 2346              	.LBE40:
 2347              	@ armwave.c:488: {
 488:armwave.c     ****     float v, noise, xnoise, mod_val;
 2348              		.loc 1 488 1 view .LVU563
 2349 09f8 08D04DE2 		sub	sp, sp, #8	@,,
 2350              		.cfi_def_cfa_offset 88
 2351              	@ armwave.c:495:     g_armwave_state.test_wave_buffer_nsets = sets;
 495:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2352              		.loc 1 495 44 view .LVU564
 2353 09fc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2354              	@ armwave.c:494:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 494:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2355              		.loc 1 494 45 view .LVU565
 2356 0a00 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2357              	@ armwave.c:490:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 490:armwave.c     ****     int s, set_offset = 0;
 2358              		.loc 1 490 38 view .LVU566
 2359 0a04 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2360              	@ armwave.c:490:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 490:armwave.c     ****     int s, set_offset = 0;
 2361              		.loc 1 490 11 view .LVU567
 2362 0a08 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2363              	.LVL147:
 491:armwave.c     ****     int w, x;
 2364              		.loc 1 491 5 is_stmt 1 view .LVU568
 492:armwave.c     **** 
 2365              		.loc 1 492 5 view .LVU569
 494:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2366              		.loc 1 494 5 view .LVU570
 2367              		.loc 1 495 5 view .LVU571
 496:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2368              		.loc 1 496 5 view .LVU572
 2369              	.LBB41:
 2370              	.LBI35:
 435:armwave.c     **** {
 2371              		.loc 1 435 6 view .LVU573
 2372              	.LBB38:
 437:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2373              		.loc 1 437 5 view .LVU574
 2374              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer != NULL) {
 437:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2375              		.loc 1 437 7 is_stmt 0 view .LVU575
 2376 0a0c 0000000A 		beq	.L136		@,
 438:armwave.c     ****     }
 2377              		.loc 1 438 9 is_stmt 1 view .LVU576
 2378 0a10 FEFFFFEB 		bl	free		@
 2379              	.LVL148:
 2380              	.L136:
 443:armwave.c     **** 
 2381              		.loc 1 443 5 view .LVU577
 2382              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 443:armwave.c     **** 
 2383              		.loc 1 443 75 is_stmt 0 view .LVU578
 2384 0a14 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2385 0a18 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2386              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 443:armwave.c     **** 
 2387              		.loc 1 443 40 view .LVU579
 2388 0a1c 0910A0E1 		mov	r1, r9	@, sets
 2389              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 443:armwave.c     **** 
 2390              		.loc 1 443 75 view .LVU580
 2391 0a20 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2392              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 443:armwave.c     **** 
 2393              		.loc 1 443 40 view .LVU581
 2394 0a24 0400A0E1 		mov	r0, r4	@, _85
 2395 0a28 FEFFFFEB 		bl	calloc		@
 2396              	.LVL149:
 2397              	@ armwave.c:445:     if(g_armwave_state.test_wave_buffer == NULL) {
 445:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2398              		.loc 1 445 7 view .LVU582
 2399 0a2c 000050E3 		cmp	r0, #0	@ tmp191,
 2400              	@ armwave.c:443:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 443:armwave.c     **** 
 2401              		.loc 1 443 38 view .LVU583
 2402 0a30 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 445:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2403              		.loc 1 445 5 is_stmt 1 view .LVU584
 2404              	@ armwave.c:445:     if(g_armwave_state.test_wave_buffer == NULL) {
 445:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2405              		.loc 1 445 7 is_stmt 0 view .LVU585
 2406 0a34 5A00000A 		beq	.L165		@,
 2407              	.L137:
 2408              	.LVL150:
 445:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2409              		.loc 1 445 7 view .LVU586
 2410              	.LBE38:
 2411              	.LBE41:
 2412              	@ armwave.c:498:     for(s = 0; s < sets; s++) {
 497:armwave.c     **** 
 498:armwave.c     ****     for(s = 0; s < sets; s++) {
 2413              		.loc 1 498 5 discriminator 1 view .LVU587
 2414 0a38 000059E3 		cmp	r9, #0	@ sets,
 2415 0a3c 550000DA 		ble	.L135		@,
 2416              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 499:armwave.c     ****         printf("Calculating test set %d\n", s);
 500:armwave.c     ****     
 501:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 502:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 503:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 504:armwave.c     **** 
 505:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 506:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 507:armwave.c     ****                 noise *= noise;
 508:armwave.c     ****                 noise *= noise;
 509:armwave.c     ****                 noise *= noise;
 510:armwave.c     **** 
 511:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 512:armwave.c     ****                     noise = -noise;
 513:armwave.c     **** 
 514:armwave.c     ****                 noise += 1.0f;
 515:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 516:armwave.c     **** 
 517:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2417              		.loc 1 517 45 view .LVU588
 2418 0a40 5C8A9FED 		vldr.32	s16, .L166	@ tmp258,
 2419              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 518:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 519:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 520:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2420              		.loc 1 520 104 view .LVU589
 2421 0a44 5CCA9FED 		vldr.32	s24, .L166+4	@ tmp259,
 2422              	@ armwave.c:498:     for(s = 0; s < sets; s++) {
 498:armwave.c     ****         printf("Calculating test set %d\n", s);
 2423              		.loc 1 498 5 view .LVU590
 2424 0a48 0070A0E3 		mov	r7, #0	@ set_offset,
 2425              	@ armwave.c:499:         printf("Calculating test set %d\n", s);
 499:armwave.c     ****         printf("Calculating test set %d\n", s);
 2426              		.loc 1 499 9 view .LVU591
 2427 0a4c 84A19FE5 		ldr	r10, .L166+32	@ tmp257,
 2428              	@ armwave.c:498:     for(s = 0; s < sets; s++) {
 498:armwave.c     ****         printf("Calculating test set %d\n", s);
 2429              		.loc 1 498 5 view .LVU592
 2430 0a50 0780A0E1 		mov	r8, r7	@ s, set_offset
 2431              	.LVL151:
 2432              	.L138:
 499:armwave.c     ****         printf("Calculating test set %d\n", s);
 2433              		.loc 1 499 9 is_stmt 1 view .LVU593
 2434 0a54 0810A0E1 		mov	r1, r8	@, s
 2435 0a58 0A00A0E1 		mov	r0, r10	@, tmp257
 2436 0a5c FEFFFFEB 		bl	printf		@
 2437              	.LVL152:
 501:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2438              		.loc 1 501 9 view .LVU594
 2439              	@ armwave.c:501:         for(w = 0; w < g_armwave_state.waves; w++) {
 501:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2440              		.loc 1 501 39 is_stmt 0 view .LVU595
 2441 0a60 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2442              	@ armwave.c:501:         for(w = 0; w < g_armwave_state.waves; w++) {
 501:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2443              		.loc 1 501 9 view .LVU596
 2444 0a64 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2445 0a68 450000DA 		ble	.L139		@,
 2446              	@ armwave.c:503:             mod_val = 0.5f + (_1_waves_mod * w);
 503:armwave.c     **** 
 2447              		.loc 1 503 21 view .LVU597
 2448 0a6c 53CADFED 		vldr.32	s25, .L166+8	@ tmp200,
 2449              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2450              		.loc 1 517 33 view .LVU598
 2451 0a70 53BA9FED 		vldr.32	s22, .L166+12	@ tmp253,
 2452              	@ armwave.c:515:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 515:armwave.c     **** 
 2453              		.loc 1 515 24 view .LVU599
 2454 0a74 53AADFED 		vldr.32	s21, .L166+16	@ tmp254,
 2455 0a78 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2456              	@ armwave.c:501:         for(w = 0; w < g_armwave_state.waves; w++) {
 501:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2457              		.loc 1 501 15 view .LVU600
 2458 0a7c 0060A0E3 		mov	r6, #0	@ w,
 2459              	.LVL153:
 2460              	.L146:
 503:armwave.c     **** 
 2461              		.loc 1 503 13 is_stmt 1 view .LVU601
 2462              	@ armwave.c:503:             mod_val = 0.5f + (_1_waves_mod * w);
 503:armwave.c     **** 
 2463              		.loc 1 503 21 is_stmt 0 view .LVU602
 2464 0a80 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2465 0a84 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2466              	@ armwave.c:505:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2467              		.loc 1 505 13 view .LVU603
 2468 0a88 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2469              	@ armwave.c:503:             mod_val = 0.5f + (_1_waves_mod * w);
 503:armwave.c     **** 
 2470              		.loc 1 503 21 view .LVU604
 2471 0a8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2472 0a90 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2473              	.LVL154:
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2474              		.loc 1 505 13 is_stmt 1 view .LVU605
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2475              		.loc 1 505 13 is_stmt 0 view .LVU606
 2476 0a94 370000DA 		ble	.L140		@,
 2477 0a98 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2478              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2479              		.loc 1 520 113 view .LVU607
 2480 0a9c 4AAA9FED 		vldr.32	s20, .L166+20	@ tmp229,
 2481 0aa0 4A8ADFED 		vldr.32	s17, .L166+24	@ tmp230,
 2482              	@ armwave.c:505:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2483              		.loc 1 505 19 view .LVU608
 2484 0aa4 0040A0E3 		mov	r4, #0	@ x,
 2485              	.LVL155:
 2486              	.L145:
 506:armwave.c     ****                 noise *= noise;
 2487              		.loc 1 506 17 is_stmt 1 view .LVU609
 2488              	@ armwave.c:506:                 noise  = ((rand() & 0xffff) * noise_fraction);
 506:armwave.c     ****                 noise *= noise;
 2489              		.loc 1 506 28 is_stmt 0 view .LVU610
 2490 0aa8 FEFFFFEB 		bl	rand		@
 2491              	.LVL156:
 2492              	@ armwave.c:506:                 noise  = ((rand() & 0xffff) * noise_fraction);
 506:armwave.c     ****                 noise *= noise;
 2493              		.loc 1 506 35 view .LVU611
 2494 0aac 7000FFE6 		uxth	r0, r0	@ tmp201,
 2495              	@ armwave.c:506:                 noise  = ((rand() & 0xffff) * noise_fraction);
 506:armwave.c     ****                 noise *= noise;
 2496              		.loc 1 506 45 view .LVU612
 2497 0ab0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2498 0ab4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2499              	@ armwave.c:506:                 noise  = ((rand() & 0xffff) * noise_fraction);
 506:armwave.c     ****                 noise *= noise;
 2500              		.loc 1 506 24 view .LVU613
 2501 0ab8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2502              	.LVL157:
 507:armwave.c     ****                 noise *= noise;
 2503              		.loc 1 507 17 is_stmt 1 view .LVU614
 2504              	@ armwave.c:507:                 noise *= noise;
 507:armwave.c     ****                 noise *= noise;
 2505              		.loc 1 507 23 is_stmt 0 view .LVU615
 2506 0abc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2507              	.LVL158:
 508:armwave.c     ****                 noise *= noise;
 2508              		.loc 1 508 17 is_stmt 1 view .LVU616
 2509              	@ armwave.c:508:                 noise *= noise;
 508:armwave.c     ****                 noise *= noise;
 2510              		.loc 1 508 23 is_stmt 0 view .LVU617
 2511 0ac0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2512              	.LVL159:
 509:armwave.c     **** 
 2513              		.loc 1 509 17 is_stmt 1 view .LVU618
 2514              	@ armwave.c:509:                 noise *= noise;
 509:armwave.c     **** 
 2515              		.loc 1 509 23 is_stmt 0 view .LVU619
 2516 0ac4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2517              	.LVL160:
 511:armwave.c     ****                     noise = -noise;
 2518              		.loc 1 511 17 is_stmt 1 view .LVU620
 2519              	@ armwave.c:511:                 if((rand() & 0xffff) > 0x7fff)
 511:armwave.c     ****                     noise = -noise;
 2520              		.loc 1 511 21 is_stmt 0 view .LVU621
 2521 0ac8 FEFFFFEB 		bl	rand		@
 2522              	.LVL161:
 512:armwave.c     **** 
 2523              		.loc 1 512 21 is_stmt 1 view .LVU622
 2524              	@ armwave.c:511:                 if((rand() & 0xffff) > 0x7fff)
 511:armwave.c     ****                     noise = -noise;
 2525              		.loc 1 511 19 is_stmt 0 view .LVU623
 2526 0acc 020910E3 		tst	r0, #32768	@,
 2527              	@ armwave.c:512:                     noise = -noise;
 512:armwave.c     **** 
 2528              		.loc 1 512 27 view .LVU624
 2529 0ad0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2530              	.LVL162:
 514:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2531              		.loc 1 514 17 is_stmt 1 view .LVU625
 515:armwave.c     **** 
 2532              		.loc 1 515 17 view .LVU626
 2533              	@ armwave.c:515:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 515:armwave.c     **** 
 2534              		.loc 1 515 27 is_stmt 0 view .LVU627
 2535 0ad4 FEFFFFEB 		bl	rand		@
 2536              	.LVL163:
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2537              		.loc 1 517 17 is_stmt 1 view .LVU628
 2538              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2539              		.loc 1 517 45 is_stmt 0 view .LVU629
 2540 0ad8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2541              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2542              		.loc 1 517 33 view .LVU630
 2543 0adc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2544              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2545              		.loc 1 517 45 view .LVU631
 2546 0ae0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2547              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2548              		.loc 1 517 33 view .LVU632
 2549 0ae4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2550              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2551              		.loc 1 517 45 view .LVU633
 2552 0ae8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2553              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2554              		.loc 1 517 33 view .LVU634
 2555 0aec 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2556              	@ armwave.c:515:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 515:armwave.c     **** 
 2557              		.loc 1 515 34 view .LVU635
 2558 0af0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2559              	.LVL164:
 2560              	@ armwave.c:515:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 515:armwave.c     **** 
 2561              		.loc 1 515 44 view .LVU636
 2562 0af4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2563 0af8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2564              	@ armwave.c:515:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 515:armwave.c     **** 
 2565              		.loc 1 515 24 view .LVU637
 2566 0afc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2567              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2568              		.loc 1 517 77 view .LVU638
 2569 0b00 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2570              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2571              		.loc 1 517 22 view .LVU639
 2572 0b04 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2573 0b08 FEFFFFEB 		bl	sin		@
 2574              	.LVL165:
 2575              		.loc 1 520 17 is_stmt 1 view .LVU640
 2576              	@ armwave.c:514:                 noise += 1.0f;
 514:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2577              		.loc 1 514 23 is_stmt 0 view .LVU641
 2578 0b0c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2579              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2580              		.loc 1 520 104 view .LVU642
 2581 0b10 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 2582              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2583              		.loc 1 517 98 view .LVU643
 2584 0b14 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2585              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2586              		.loc 1 517 87 view .LVU644
 2587 0b18 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2588              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2589              		.loc 1 517 98 view .LVU645
 2590 0b1c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2591              	@ armwave.c:517:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2592              		.loc 1 517 19 view .LVU646
 2593 0b20 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2594              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2595              		.loc 1 520 113 view .LVU647
 2596 0b24 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2597 0b28 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2598 0b2c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2599 0b30 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2600 0b34 050000DA 		ble	.L142		@,
 2601              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2602              		.loc 1 520 104 discriminator 1 view .LVU648
 2603 0b38 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2604 0b3c FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 2605 0b40 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2606 0b44 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2607 0b48 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2608 0b4c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 2609              	.L142:
 2610              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2611              		.loc 1 520 57 discriminator 12 view .LVU649
 2612 0b50 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2613              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2614              		.loc 1 520 102 discriminator 12 view .LVU650
 2615 0b54 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2616 0b58 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2617 0b5c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2618              	@ armwave.c:505:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2619              		.loc 1 505 58 discriminator 12 view .LVU651
 2620 0b60 014084E2 		add	r4, r4, #1	@ x, x,
 2621              	.LVL166:
 2622              	@ armwave.c:520:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2623              		.loc 1 520 102 discriminator 12 view .LVU652
 2624 0b64 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 2625              	@ armwave.c:505:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2626              		.loc 1 505 43 discriminator 12 view .LVU653
 2627 0b68 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2628              	@ armwave.c:505:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 505:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2629              		.loc 1 505 13 discriminator 12 view .LVU654
 2630 0b6c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2631 0b70 CCFFFFCA 		bgt	.L145		@,
 2632 0b74 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2633              	.LVL167:
 2634              	.L140:
 2635              	@ armwave.c:501:         for(w = 0; w < g_armwave_state.waves; w++) {
 501:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2636              		.loc 1 501 48 discriminator 2 view .LVU655
 2637 0b78 016086E2 		add	r6, r6, #1	@ w, w,
 2638              	.LVL168:
 2639              	@ armwave.c:501:         for(w = 0; w < g_armwave_state.waves; w++) {
 501:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2640              		.loc 1 501 9 discriminator 2 view .LVU656
 2641 0b7c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2642 0b80 BEFFFFBA 		blt	.L146		@,
 2643              	.LVL169:
 2644              	.L139:
 521:armwave.c     ****             }
 522:armwave.c     ****         }
 523:armwave.c     **** 
 524:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2645              		.loc 1 524 9 is_stmt 1 discriminator 2 view .LVU657
 2646              	@ armwave.c:524:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2647              		.loc 1 524 46 is_stmt 0 discriminator 2 view .LVU658
 2648 0b84 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2649              	@ armwave.c:498:     for(s = 0; s < sets; s++) {
 498:armwave.c     ****         printf("Calculating test set %d\n", s);
 2650              		.loc 1 498 27 discriminator 2 view .LVU659
 2651 0b88 018088E2 		add	r8, r8, #1	@ s, s,
 2652              	.LVL170:
 2653              	@ armwave.c:498:     for(s = 0; s < sets; s++) {
 498:armwave.c     ****         printf("Calculating test set %d\n", s);
 2654              		.loc 1 498 5 discriminator 2 view .LVU660
 2655 0b8c 080059E1 		cmp	r9, r8	@ sets, s
 2656              	@ armwave.c:524:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2657              		.loc 1 524 20 discriminator 2 view .LVU661
 2658 0b90 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2659              	.LVL171:
 2660              	@ armwave.c:498:     for(s = 0; s < sets; s++) {
 498:armwave.c     ****         printf("Calculating test set %d\n", s);
 2661              		.loc 1 498 5 discriminator 2 view .LVU662
 2662 0b94 AEFFFF1A 		bne	.L138		@,
 2663              	.LVL172:
 2664              	.L135:
 2665              	@ armwave.c:526: }
 525:armwave.c     ****     }
 526:armwave.c     **** }
 2666              		.loc 1 526 1 view .LVU663
 2667 0b98 08D08DE2 		add	sp, sp, #8	@,,
 2668              		.cfi_remember_state
 2669              		.cfi_def_cfa_offset 80
 2670              		@ sp needed	@
 2671 0b9c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2672              		.cfi_restore 90
 2673              		.cfi_restore 91
 2674              		.cfi_restore 88
 2675              		.cfi_restore 89
 2676              		.cfi_restore 86
 2677              		.cfi_restore 87
 2678              		.cfi_restore 84
 2679              		.cfi_restore 85
 2680              		.cfi_restore 82
 2681              		.cfi_restore 83
 2682              		.cfi_restore 80
 2683              		.cfi_restore 81
 2684              		.cfi_def_cfa_offset 32
 2685              	.LVL173:
 2686              		.loc 1 526 1 view .LVU664
 2687 0ba0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2688              	.LVL174:
 2689              	.L165:
 2690              		.cfi_restore_state
 2691              	.LBB42:
 2692              	.LBB39:
 446:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2693              		.loc 1 446 9 is_stmt 1 view .LVU665
 2694 0ba4 940901E0 		mul	r1, r4, r9	@, _85, sets
 2695 0ba8 0920A0E1 		mov	r2, r9	@, sets
 2696 0bac 28009FE5 		ldr	r0, .L166+36	@,
 2697 0bb0 FEFFFFEB 		bl	printf		@
 2698              	.LVL175:
 448:armwave.c     ****     }
 2699              		.loc 1 448 9 view .LVU666
 2700 0bb4 9FFFFFEA 		b	.L137		@
 2701              	.L167:
 2702              		.align	2
 2703              	.L166:
 2704 0bb8 0000803F 		.word	1065353216
 2705 0bbc 00007F43 		.word	1132396544
 2706 0bc0 0000003F 		.word	1056964608
 2707 0bc4 C3F5C840 		.word	1086911939
 2708 0bc8 38FFC74A 		.word	1254620984
 2709 0bcc 0000FE42 		.word	1123942400
 2710 0bd0 00000043 		.word	1124073472
 2711 0bd4 00000000 		.word	g_armwave_state
 2712 0bd8 FC020000 		.word	.LC20
 2713 0bdc 54020000 		.word	.LC18
 2714              	.LBE39:
 2715              	.LBE42:
 2716              		.cfi_endproc
 2717              	.LFE75:
 2719              		.align	2
 2720              		.global	armwave_cleanup
 2721              		.syntax unified
 2722              		.arm
 2723              		.fpu vfp
 2725              	armwave_cleanup:
 2726              	.LFB76:
 527:armwave.c     **** 
 528:armwave.c     **** /*
 529:armwave.c     ****  * Make a test square waveform.
 530:armwave.c     ****  *
 531:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 532:armwave.c     ****  */
 533:armwave.c     **** #if 0
 534:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 535:armwave.c     **** {
 536:armwave.c     ****     uint8_t v;
 537:armwave.c     ****     float noise, xnoise;
 538:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 539:armwave.c     ****     int w, x;
 540:armwave.c     **** 
 541:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 542:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****             noise *= noise;
 545:armwave.c     ****             noise *= noise;
 546:armwave.c     ****             noise *= noise;
 547:armwave.c     **** 
 548:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 549:armwave.c     ****                 noise = -noise;
 550:armwave.c     **** 
 551:armwave.c     ****             //noise += 1.0f;
 552:armwave.c     **** 
 553:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 554:armwave.c     ****                 new_level = 0.2f;
 555:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 556:armwave.c     ****                 new_level = 0.8f;
 557:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 558:armwave.c     ****                 new_level = 0.2f;
 559:armwave.c     ****             } else {
 560:armwave.c     ****                 new_level = 0.8f;
 561:armwave.c     ****             }
 562:armwave.c     **** 
 563:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 564:armwave.c     **** 
 565:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 566:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 567:armwave.c     ****         }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 570:armwave.c     **** #endif
 571:armwave.c     **** 
 572:armwave.c     **** /*
 573:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 574:armwave.c     ****  */
 575:armwave.c     **** void armwave_cleanup()
 576:armwave.c     **** {
 2727              		.loc 1 576 1 view -0
 2728              		.cfi_startproc
 2729              		@ args = 0, pretend = 0, frame = 0
 2730              		@ frame_needed = 0, uses_anonymous_args = 0
 577:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2731              		.loc 1 577 5 view .LVU668
 2732              	@ armwave.c:576: {
 576:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2733              		.loc 1 576 1 is_stmt 0 view .LVU669
 2734 0be0 10402DE9 		push	{r4, lr}	@
 2735              		.cfi_def_cfa_offset 8
 2736              		.cfi_offset 4, -8
 2737              		.cfi_offset 14, -4
 2738              	@ armwave.c:577:     free(g_armwave_state.out_pixbuf);
 2739              		.loc 1 577 25 view .LVU670
 2740 0be4 34409FE5 		ldr	r4, .L170	@ tmp114,
 2741              	@ armwave.c:577:     free(g_armwave_state.out_pixbuf);
 2742              		.loc 1 577 5 view .LVU671
 2743 0be8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2744 0bec FEFFFFEB 		bl	free		@
 2745              	.LVL176:
 578:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2746              		.loc 1 578 5 is_stmt 1 view .LVU672
 2747 0bf0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2748 0bf4 FEFFFFEB 		bl	free		@
 2749              	.LVL177:
 579:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2750              		.loc 1 579 5 view .LVU673
 2751 0bf8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2752 0bfc FEFFFFEB 		bl	free		@
 2753              	.LVL178:
 580:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2754              		.loc 1 580 5 view .LVU674
 2755 0c00 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2756 0c04 FEFFFFEB 		bl	free		@
 2757              	.LVL179:
 581:armwave.c     **** 
 582:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2758              		.loc 1 582 5 view .LVU675
 2759              	@ armwave.c:582:     g_armwave_state.out_pixbuf = NULL;
 2760              		.loc 1 582 32 is_stmt 0 view .LVU676
 2761 0c08 0030A0E3 		mov	r3, #0	@ tmp123,
 2762 0c0c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 583:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2763              		.loc 1 583 5 is_stmt 1 view .LVU677
 2764              	@ armwave.c:583:     g_armwave_state.ch1_buffer = NULL;
 2765              		.loc 1 583 32 is_stmt 0 view .LVU678
 2766 0c10 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 584:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2767              		.loc 1 584 5 is_stmt 1 view .LVU679
 2768              	@ armwave.c:584:     g_armwave_state.xcoord_to_xpixel = NULL;
 2769              		.loc 1 584 38 is_stmt 0 view .LVU680
 2770 0c14 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 585:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2771              		.loc 1 585 5 is_stmt 1 view .LVU681
 2772              	@ armwave.c:585:     g_armwave_state.test_wave_buffer = NULL;
 2773              		.loc 1 585 38 is_stmt 0 view .LVU682
 2774 0c18 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2775              	@ armwave.c:586: }
 586:armwave.c     **** }
 2776              		.loc 1 586 1 view .LVU683
 2777 0c1c 1080BDE8 		pop	{r4, pc}	@
 2778              	.L171:
 2779              		.align	2
 2780              	.L170:
 2781 0c20 00000000 		.word	g_armwave_state
 2782              		.cfi_endproc
 2783              	.LFE76:
 2785              		.comm	gamma_table,256,4
 2786              		.comm	g_armwave_state,136,4
 2787              		.section	.rodata
 2788              		.align	2
 2789              		.set	.LANCHOR0,. + 0
 2792              	__PRETTY_FUNCTION__.17124:
 2793 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2793      6176655F 
 2793      73657475 
 2793      705F7265 
 2793      6E646572 
 2794 0015 000000   		.space	3
 2797              	__PRETTY_FUNCTION__.17128:
 2798 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2798      6176655F 
 2798      7365745F 
 2798      77617665 
 2798      5F706F69 
 2799 0031 000000   		.space	3
 2802              	__PRETTY_FUNCTION__.17135:
 2803 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2803      6176655F 
 2803      7365745F 
 2803      77617665 
 2803      5F706F69 
 2804              		.section	.rodata.str1.4,"aMS",%progbits,1
 2805              		.align	2
 2806              	.LC0:
 2807 0000 76302E30 		.ascii	"v0.0.1\000"
 2807      2E3100
 2808 0007 00       		.space	1
 2809              	.LC1:
 2810 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2810      61766520 
 2810      76657273 
 2810      696F6E3A 
 2810      2025730A 
 2811 001d 000000   		.space	3
 2812              	.LC2:
 2813 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2813      78253038 
 2813      7820623D 
 2813      30782530 
 2813      38782063 
 2814 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2814      25642073 
 2814      63616C65 
 2814      3D256420 
 2814      62697464 
 2815 0077 00       		.space	1
 2816              	.LC3:
 2817 0078 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2817      6176655F 
 2817      67656E65 
 2817      72617465 
 2817      3A20736C 
 2818 00a9 00       		.ascii	"\000"
 2819 00aa 0000     		.space	2
 2820              	.LC4:
 2821 00ac 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2821      20653D25 
 2821      6420773D 
 2821      25642077 
 2821      733D2564 
 2822              	.LC5:
 2823 00d8 61726D77 		.ascii	"armwave.c\000"
 2823      6176652E 
 2823      6300
 2824 00e2 0000     		.space	2
 2825              	.LC6:
 2826 00e4 73746172 		.ascii	"start_point < end_point\000"
 2826      745F706F 
 2826      696E7420 
 2826      3C20656E 
 2826      645F706F 
 2827              	.LC7:
 2828 00fc 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2828      7566665F 
 2828      73697A65 
 2828      3D25642C 
 2828      20636D70 
 2829 012f 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2829      5F776964 
 2829      74683D25 
 2829      642C2077 
 2829      6176655F 
 2830 0159 000000   		.space	3
 2831              	.LC8:
 2832 015c 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2832      6F632066 
 2832      61696C75 
 2832      72652061 
 2832      6C6C6F63 
 2833 018f 2E636831 		.ascii	".ch1_buffer)\012\000"
 2833      5F627566 
 2833      66657229 
 2833      0A00
 2834 019d 000000   		.space	3
 2835              	.LC9:
 2836 01a0 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2836      3A203078 
 2836      25303878 
 2836      20307825 
 2836      30387820 
 2837              	.LC10:
 2838 01c4 77617665 		.ascii	"wave_buffer != NULL\000"
 2838      5F627566 
 2838      66657220 
 2838      213D204E 
 2838      554C4C00 
 2839              	.LC11:
 2840 01d8 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2840      6176655F 
 2840      7365745F 
 2840      77617665 
 2840      5F706F69 
 2841 020b 78636565 		.ascii	"xceeded\000"
 2841      64656400 
 2842 0213 00       		.space	1
 2843              	.LC12:
 2844 0214 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2844      5F627566 
 2844      6665725F 
 2844      70747220 
 2844      213D2030 
 2845 0229 000000   		.space	3
 2846              	.LC13:
 2847 022c 776200   		.ascii	"wb\000"
 2848 022f 00       		.space	1
 2849              	.LC14:
 2850 0230 50330A00 		.ascii	"P3\012\000"
 2851              	.LC15:
 2852 0234 25642025 		.ascii	"%d %d\012\000"
 2852      640A00
 2853 023b 00       		.space	1
 2854              	.LC16:
 2855 023c 3235350A 		.ascii	"255\012\000"
 2855      00
 2856 0241 000000   		.space	3
 2857              	.LC17:
 2858 0244 25336420 		.ascii	"%3d %3d %3d\012\000"
 2858      25336420 
 2858      2533640A 
 2858      00
 2859 0251 000000   		.space	3
 2860              	.LC18:
 2861 0254 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2861      6176655F 
 2861      74657374 
 2861      5F627566 
 2861      6665725F 
 2862 0287 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2862      20627566 
 2862      66657220 
 2862      28256420 
 2862      62797465 
 2863              	.LC19:
 2864 02a8 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2864      6176655F 
 2864      66696C6C 
 2864      5F706978 
 2864      6275665F 
 2865 02db 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2865      20666169 
 2865      6C65642C 
 2865      20726574 
 2865      75726E69 
 2866 02fa 0000     		.space	2
 2867              	.LC20:
 2868 02fc 43616C63 		.ascii	"Calculating test set %d\012\000"
 2868      756C6174 
 2868      696E6720 
 2868      74657374 
 2868      20736574 
 2869              		.text
 2870              	.Letext0:
 2871              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2872              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2873              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2874              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2875              		.file 7 "/usr/include/stdio.h"
 2876              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2877              		.file 9 "/usr/include/errno.h"
 2878              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2879              		.file 11 "/usr/include/unistd.h"
 2880              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2881              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2882              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2883              		.file 15 "/usr/include/math.h"
 2884              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2885              		.file 17 "/usr/include/time.h"
 2886              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2887              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2888              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2889              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2890              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2891              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2892              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2893              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2894              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2895              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2896              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2897              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2898              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2899              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2900              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2901              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2902              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2903              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2904              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2905              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2906              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2907              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2908              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2909              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2910              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2911              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2912              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2913              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2914              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2915              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2916              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2917              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2918              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2919              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2920              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2921              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2922              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2923              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2924              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2925              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2926              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2927              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2928              		.file 60 "/usr/local/include/python3.8/context.h"
 2929              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2930              		.file 62 "/usr/local/include/python3.8/code.h"
 2931              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2932              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2933              		.file 65 "/usr/local/include/python3.8/import.h"
 2934              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2935              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2936              		.file 68 "/usr/include/malloc.h"
 2937              		.file 69 "armwave.h"
 2938              		.file 70 "/usr/include/stdlib.h"
 2939              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 2940              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2941              		.file 73 "<built-in>"
 2942              		.file 74 "/usr/include/assert.h"
