   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU139
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 180 5 view .LVU140
 181:armwave.c     ****     uint32_t offset;
 587              		.loc 1 181 5 view .LVU141
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 183 5 view .LVU142
 589              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 173 1 is_stmt 0 view .LVU143
 591 026c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 592              		.cfi_def_cfa_offset 40
 593              		.cfi_offset 3, -40
 594              		.cfi_offset 4, -36
 595              		.cfi_offset 5, -32
 596              		.cfi_offset 6, -28
 597              		.cfi_offset 7, -24
 598              		.cfi_offset 8, -20
 599              		.cfi_offset 9, -16
 600              		.cfi_offset 10, -12
 601              		.cfi_offset 11, -8
 602              		.cfi_offset 14, -4
 603              	@ armwave.c:183:     assert(out_buffer != NULL);
 604              		.loc 1 183 5 view .LVU144
 605 0270 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 606 0274 4600000A 		beq	.L41		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 607              		.loc 1 186 5 is_stmt 1 view .LVU145
 608              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 609              		.loc 1 186 45 is_stmt 0 view .LVU146
 610 0278 28419FE5 		ldr	r4, .L42	@ tmp224,
 611              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 612              		.loc 1 186 5 view .LVU147
 613 027c 0010A0E3 		mov	r1, #0	@,
 614              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 615              		.loc 1 186 59 view .LVU148
 616 0280 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 617 0284 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 618 0288 920302E0 		mul	r2, r2, r3	@ tmp178, g_armwave_state.target_height, g_armwave_state.target_width
 619              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 620              		.loc 1 186 5 view .LVU149
 621 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp178,
 622 0290 FEFFFFEB 		bl	memset		@
 623              	.LVL22:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 188 5 is_stmt 1 view .LVU150
 625              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 626              		.loc 1 188 10 is_stmt 0 view .LVU151
 627 0294 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 628 0298 40E094E5 		ldr	lr, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 629 029c 9E030EE0 		mul	lr, lr, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 630              	.LVL23:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     **** #if 0
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 195:armwave.c     ****         // most normal waveforms.
 196:armwave.c     ****         wave_word = *base_32ptr++;
 197:armwave.c     **** 
 198:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 199:armwave.c     ****             for(w = 0; w < 2; w++) {
 200:armwave.c     ****                 value = wave_word & 0xffff;
 201:armwave.c     ****                 wave_word >>= 16;
 202:armwave.c     **** 
 203:armwave.c     ****                 if(value != 0) {
 204:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 205:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 206:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 207:armwave.c     **** 
 208:armwave.c     ****                     r = MIN(rr, 255);
 209:armwave.c     ****                     g = MIN(gg, 255);
 210:armwave.c     ****                     b = MIN(bb, 255);
 211:armwave.c     **** 
 212:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 213:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 214:armwave.c     **** 
 215:armwave.c     ****                     // Plot the pixels
 216:armwave.c     ****                     nsub = n + (w * 2);
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** #endif
 230:armwave.c     **** 
 231:armwave.c     ****     for(n = 0; n < (npix / 2); n += 1) {
 631              		.loc 1 231 5 is_stmt 1 view .LVU152
 632              		.loc 1 231 5 is_stmt 0 view .LVU153
 633 02a0 01005EE3 		cmp	lr, #1	@ npix,
 634              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 635              		.loc 1 231 26 view .LVU154
 636 02a4 AEEF8EE0 		add	lr, lr, lr, lsr #31	@ tmp191, npix, npix,
 637              	.LVL24:
 638              		.loc 1 231 26 view .LVU155
 639 02a8 CEE0A0E1 		asr	lr, lr, #1	@ _74, tmp191,
 640              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 641              		.loc 1 231 5 view .LVU156
 642 02ac F88FBDD8 		pople	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 643 02b0 04C094E5 		ldr	ip, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 644              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 232:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 233:armwave.c     ****         value = wave_word & 0xffff;
 234:armwave.c     **** 
 235:armwave.c     ****         if(value != 0) {
 236:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 645              		.loc 1 236 44 view .LVU157
 646 02b4 FC86D4E1 		ldrsh	r8, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 647              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 237 44 view .LVU158
 649 02b8 FE76D4E1 		ldrsh	r7, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 650              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 651              		.loc 1 238 44 view .LVU159
 652 02bc F067D4E1 		ldrsh	r6, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 653              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 239:armwave.c     **** 
 240:armwave.c     ****             r = MIN(rr, 255);
 241:armwave.c     ****             g = MIN(gg, 255);
 242:armwave.c     ****             b = MIN(bb, 255);
 243:armwave.c     **** 
 244:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 246:armwave.c     **** 
 247:armwave.c     ****             // Plot the pixels
 248:armwave.c     ****             nsub = n * 2;
 249:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 654              		.loc 1 249 49 view .LVU160
 655 02c0 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 656 02c4 02C04CE2 		sub	ip, ip, #2	@ ivtmp.52, g_armwave_state.ch1_buffer,
 657              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 658              		.loc 1 231 11 view .LVU161
 659 02c8 0000A0E3 		mov	r0, #0	@ n,
 660 02cc 020000EA 		b	.L34		@
 661              	.LVL25:
 662              	.L32:
 663              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 664              		.loc 1 231 34 view .LVU162
 665 02d0 010080E2 		add	r0, r0, #1	@ n, n,
 666              	.LVL26:
 667              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 668              		.loc 1 231 5 view .LVU163
 669 02d4 0E0050E1 		cmp	r0, lr	@ n, _74
 670 02d8 F88FBDA8 		popge	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 671              	.LVL27:
 672              	.L34:
 232:armwave.c     ****         value = wave_word & 0xffff;
 673              		.loc 1 232 9 is_stmt 1 view .LVU164
 233:armwave.c     **** 
 674              		.loc 1 233 9 view .LVU165
 675              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 676              		.loc 1 233 15 is_stmt 0 view .LVU166
 677 02dc B230FCE1 		ldrh	r3, [ip, #2]!	@ MEM[base: _123, offset: 0B], MEM[base: _123, offset: 0B]
 678              	.LVL28:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 679              		.loc 1 235 9 is_stmt 1 view .LVU167
 680              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 681              		.loc 1 235 11 is_stmt 0 view .LVU168
 682 02e0 FF3013E2 		ands	r3, r3, #255	@ value, MEM[base: _123, offset: 0B],
 683              	.LVL29:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 684              		.loc 1 235 11 view .LVU169
 685 02e4 F9FFFF0A 		beq	.L32		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 686              		.loc 1 236 13 is_stmt 1 view .LVU170
 687              	.LVL30:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 688              		.loc 1 237 13 view .LVU171
 238:armwave.c     **** 
 689              		.loc 1 238 13 view .LVU172
 240:armwave.c     ****             g = MIN(gg, 255);
 690              		.loc 1 240 13 view .LVU173
 241:armwave.c     ****             b = MIN(bb, 255);
 691              		.loc 1 241 13 view .LVU174
 242:armwave.c     **** 
 692              		.loc 1 242 13 view .LVU175
 245:armwave.c     **** 
 693              		.loc 1 245 13 view .LVU176
 694              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 695              		.loc 1 248 18 is_stmt 0 view .LVU177
 696 02e8 8010A0E1 		lsl	r1, r0, #1	@ nsub, n,
 697              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 698              		.loc 1 238 47 view .LVU178
 699 02ec 830669E1 		smulbb	r9, r3, r6	@ tmp202, value, _20
 700              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 701              		.loc 1 249 24 view .LVU179
 702 02f0 7120EFE6 		uxtb	r2, r1	@ _33, nsub
 703              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 250:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 704              		.loc 1 250 33 view .LVU180
 705 02f4 01A082E2 		add	r10, r2, #1	@ tmp217, _33,
 706              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 707              		.loc 1 249 32 view .LVU181
 708 02f8 902A07EE 		vmov	s15, r2	@ int	@ _33, _33
 709              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 710              		.loc 1 250 33 view .LVU182
 711 02fc 10AA07EE 		vmov	s14, r10	@ int	@ tmp217, tmp217
 712              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 713              		.loc 1 237 47 view .LVU183
 714 0300 83076BE1 		smulbb	fp, r3, r7	@ tmp206, value, _17
 715              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 716              		.loc 1 236 47 view .LVU184
 717 0304 830863E1 		smulbb	r3, r3, r8	@ tmp212, value, _13
 718              	.LVL31:
 719              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 720              		.loc 1 249 32 view .LVU185
 721 0308 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp215, _33
 722              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 723              		.loc 1 250 38 view .LVU186
 724 030c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp217
 725              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 726              		.loc 1 236 16 view .LVU187
 727 0310 4324A0E1 		asr	r2, r3, #8	@ rr, tmp212,
 728              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 729              		.loc 1 238 16 view .LVU188
 730 0314 4994A0E1 		asr	r9, r9, #8	@ bb, tmp202,
 731              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 732              		.loc 1 242 17 view .LVU189
 733 0318 FF0059E3 		cmp	r9, #255	@ bb,
 734              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 735              		.loc 1 237 16 view .LVU190
 736 031c 4BB4A0E1 		asr	fp, fp, #8	@ gg, tmp206,
 737              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 738              		.loc 1 242 17 view .LVU191
 739 0320 FF90A0A3 		movge	r9, #255	@ bb,
 740              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 741              		.loc 1 241 17 view .LVU192
 742 0324 FF005BE3 		cmp	fp, #255	@ gg,
 743              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 744              		.loc 1 249 32 view .LVU193
 745 0328 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp216, tmp215, _35
 746              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 747              		.loc 1 250 38 view .LVU194
 748 032c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp219, tmp218, _35
 749              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 750              		.loc 1 241 17 view .LVU195
 751 0330 FFB0A0A3 		movge	fp, #255	@ gg,
 752              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 753              		.loc 1 245 36 view .LVU196
 754 0334 09A8A0E1 		lsl	r10, r9, #16	@ tmp203, bb,
 755              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 756              		.loc 1 240 17 view .LVU197
 757 0338 FF0052E3 		cmp	r2, #255	@ rr,
 758              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 759              		.loc 1 245 48 view .LVU198
 760 033c 0BB4A0E1 		lsl	fp, fp, #8	@ tmp207, gg,
 761              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 762              		.loc 1 240 17 view .LVU199
 763 0340 FF20A0A3 		movge	r2, #255	@ rr,
 764              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 765              		.loc 1 245 36 view .LVU200
 766 0344 FFA80AE2 		and	r10, r10, #16711680	@ tmp204, tmp203,
 767              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 768              		.loc 1 249 16 view .LVU201
 769 0348 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp216
 770              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 771              		.loc 1 245 48 view .LVU202
 772 034c 7BB0FFE6 		uxth	fp, fp	@ tmp208, tmp207
 773              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 774              		.loc 1 245 43 view .LVU203
 775 0350 0BA08AE1 		orr	r10, r10, fp	@ tmp210, tmp204, tmp208
 776              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 777              		.loc 1 245 54 view .LVU204
 778 0354 7220EFE6 		uxtb	r2, r2	@ rr, rr
 779 0358 02208AE1 		orr	r2, r10, r2	@ tmp214, tmp210, rr
 780              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 781              		.loc 1 245 18 view .LVU205
 782 035c FFA482E3 		orr	r10, r2, #-16777216	@ word, tmp214,
 783              	.LVL32:
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 784              		.loc 1 248 13 is_stmt 1 view .LVU206
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 785              		.loc 1 249 13 view .LVU207
 786              	@ armwave.c:251:             xx = (nsub >> 8);
 251:armwave.c     ****             xx = (nsub >> 8);
 787              		.loc 1 251 24 is_stmt 0 view .LVU208
 788 0360 4114A0E1 		asr	r1, r1, #8	@ xx, nsub,
 789              	.LVL33:
 790              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 791              		.loc 1 249 16 view .LVU209
 792 0364 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 793              	.LVL34:
 250:armwave.c     ****             xx = (nsub >> 8);
 794              		.loc 1 250 13 is_stmt 1 view .LVU210
 795              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 250:armwave.c     ****             xx = (nsub >> 8);
 796              		.loc 1 250 16 is_stmt 0 view .LVU211
 797 0368 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp219
 798 036c 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 799              	.LVL35:
 800              		.loc 1 251 13 is_stmt 1 view .LVU212
 252:armwave.c     **** 
 253:armwave.c     ****             for(y = yy; y < ye; y++) {
 801              		.loc 1 253 13 view .LVU213
 802              		.loc 1 253 13 is_stmt 0 view .LVU214
 803 0370 090053E1 		cmp	r3, r9	@ yy, ye
 804 0374 D5FFFF2A 		bcs	.L32		@,
 805              	.LVL36:
 806              	.L33:
 254:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 807              		.loc 1 254 17 is_stmt 1 discriminator 3 view .LVU215
 255:armwave.c     ****                 *(out_buffer_base + offset) = word;
 808              		.loc 1 255 17 discriminator 3 view .LVU216
 809              	@ armwave.c:254:                 offset = (xx + (y * g_armwave_state.target_width)); 
 254:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 254 35 is_stmt 0 discriminator 3 view .LVU217
 811 0378 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 812              	@ armwave.c:255:                 *(out_buffer_base + offset) = word;
 813              		.loc 1 255 35 discriminator 3 view .LVU218
 814 037c 921322E0 		mla	r2, r2, r3, r1	@ tmp223, g_armwave_state.target_width, yy, xx
 815              	.LVL37:
 816              	@ armwave.c:253:             for(y = yy; y < ye; y++) {
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 817              		.loc 1 253 34 discriminator 3 view .LVU219
 818 0380 013083E2 		add	r3, r3, #1	@ yy, yy,
 819              	.LVL38:
 820              	@ armwave.c:253:             for(y = yy; y < ye; y++) {
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 821              		.loc 1 253 13 discriminator 3 view .LVU220
 822 0384 030059E1 		cmp	r9, r3	@ ye, yy
 823              	@ armwave.c:255:                 *(out_buffer_base + offset) = word;
 824              		.loc 1 255 45 discriminator 3 view .LVU221
 825 0388 02A185E7 		str	r10, [r5, r2, lsl #2]	@ word, *_45
 826              	@ armwave.c:253:             for(y = yy; y < ye; y++) {
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 827              		.loc 1 253 13 discriminator 3 view .LVU222
 828 038c F9FFFF1A 		bne	.L33		@,
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 829              		.loc 1 253 13 discriminator 3 view .LVU223
 830 0390 CEFFFFEA 		b	.L32		@
 831              	.LVL39:
 832              	.L41:
 183:armwave.c     **** 
 833              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU224
 834 0394 10309FE5 		ldr	r3, .L42+4	@,
 835 0398 B720A0E3 		mov	r2, #183	@,
 836 039c 0C109FE5 		ldr	r1, .L42+8	@,
 837 03a0 0C009FE5 		ldr	r0, .L42+12	@,
 838              	.LVL40:
 183:armwave.c     **** 
 839              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU225
 840 03a4 FEFFFFEB 		bl	__assert_fail		@
 841              	.LVL41:
 842              	.L43:
 183:armwave.c     **** 
 843              		.loc 1 183 5 discriminator 1 view .LVU226
 844              		.align	2
 845              	.L42:
 846 03a8 00000000 		.word	g_armwave_state
 847 03ac 00000000 		.word	.LANCHOR0
 848 03b0 20000000 		.word	.LC2
 849 03b4 2C000000 		.word	.LC3
 850              		.cfi_endproc
 851              	.LFE60:
 853              		.global	__aeabi_idiv
 854              		.align	2
 855              		.global	armwave_generate
 856              		.syntax unified
 857              		.arm
 858              		.fpu vfp
 860              	armwave_generate:
 861              	.LFB61:
 256:armwave.c     ****             }
 257:armwave.c     ****         }
 258:armwave.c     ****     }
 259:armwave.c     **** }
 260:armwave.c     **** 
 261:armwave.c     **** /*
 262:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 263:armwave.c     ****  */
 264:armwave.c     **** void armwave_generate()
 265:armwave.c     **** {
 862              		.loc 1 265 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 16
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 266:armwave.c     ****     uint32_t yy;
 866              		.loc 1 266 5 view .LVU228
 267:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 867              		.loc 1 267 5 view .LVU229
 868              	.LVL42:
 268:armwave.c     **** 
 269:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 869              		.loc 1 269 5 view .LVU230
 870              	@ armwave.c:265: {
 265:armwave.c     ****     uint32_t yy;
 871              		.loc 1 265 1 is_stmt 0 view .LVU231
 872 03b8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 873              		.cfi_def_cfa_offset 36
 874              		.cfi_offset 4, -36
 875              		.cfi_offset 5, -32
 876              		.cfi_offset 6, -28
 877              		.cfi_offset 7, -24
 878              		.cfi_offset 8, -20
 879              		.cfi_offset 9, -16
 880              		.cfi_offset 10, -12
 881              		.cfi_offset 11, -8
 882              		.cfi_offset 14, -4
 883              	@ armwave.c:269:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 884              		.loc 1 269 5 view .LVU232
 885 03bc 0010A0E3 		mov	r1, #0	@,
 886              	@ armwave.c:269:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 887              		.loc 1 269 58 view .LVU233
 888 03c0 14829FE5 		ldr	r8, .L63	@ tmp342,
 889              	@ armwave.c:265: {
 265:armwave.c     ****     uint32_t yy;
 890              		.loc 1 265 1 view .LVU234
 891 03c4 14D04DE2 		sub	sp, sp, #20	@,,
 892              		.cfi_def_cfa_offset 56
 893              	@ armwave.c:269:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 894              		.loc 1 269 5 view .LVU235
 895 03c8 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 896 03cc 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 897 03d0 FEFFFFEB 		bl	memset		@
 898              	.LVL43:
 270:armwave.c     **** 
 271:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 899              		.loc 1 271 5 is_stmt 1 view .LVU236
 900              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 901              		.loc 1 271 68 is_stmt 0 view .LVU237
 902 03d4 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 903              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 904              		.loc 1 271 38 view .LVU238
 905 03d8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 906              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 907              		.loc 1 271 51 view .LVU239
 908 03dc 0310A0E1 		mov	r1, r3	@, _35
 909 03e0 0500A0E1 		mov	r0, r5	@, prephitmp_229
 910              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 911              		.loc 1 271 68 view .LVU240
 912 03e4 00308DE5 		str	r3, [sp]	@ _35, %sfp
 913              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 914              		.loc 1 271 51 view .LVU241
 915 03e8 FEFFFFEB 		bl	__aeabi_idiv		@
 916              	.LVL44:
 917              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 918              		.loc 1 271 5 view .LVU242
 919 03ec 000050E3 		cmp	r0, #0	@,
 920 03f0 7700000A 		beq	.L44		@,
 921 03f4 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 922              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 923              		.loc 1 271 12 view .LVU243
 924 03f8 0030A0E3 		mov	r3, #0	@ yy,
 925 03fc 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 926              	.LVL45:
 927              	.L53:
 272:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 273:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 274:armwave.c     **** 
 275:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 928              		.loc 1 275 9 is_stmt 1 discriminator 3 view .LVU244
 929 0400 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 930              	.LBB10:
 931              	.LBB11:
 932              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 933              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU245
 934 0404 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 935              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 936              		.loc 1 79 5 discriminator 3 view .LVU246
 937 0408 000054E3 		cmp	r4, #0	@ prephitmp_239,
 938              	.LBE11:
 939              	.LBE10:
 940              	@ armwave.c:275:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 941              		.loc 1 275 9 discriminator 3 view .LVU247
 942 040c 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 943              	.LVL46:
 944              	.LBB13:
 945              	.LBI10:
  62:armwave.c     **** {
 946              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU248
 947              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 948              		.loc 1 64 5 discriminator 3 view .LVU249
  65:armwave.c     ****     uint8_t *wave_base;
 949              		.loc 1 65 5 discriminator 3 view .LVU250
  66:armwave.c     ****     uint8_t *write_buffer_base;
 950              		.loc 1 66 5 discriminator 3 view .LVU251
  67:armwave.c     ****     uint8_t *write_buffer;
 951              		.loc 1 67 5 discriminator 3 view .LVU252
  68:armwave.c     **** 
 952              		.loc 1 68 5 discriminator 3 view .LVU253
  71:armwave.c     **** 
 953              		.loc 1 71 5 discriminator 3 view .LVU254
 954              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 955              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU255
 956 0410 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 957              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 958              		.loc 1 71 40 discriminator 3 view .LVU256
 959 0414 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 960              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 961              		.loc 1 71 65 discriminator 3 view .LVU257
 962 0418 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 963              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 964              		.loc 1 71 105 discriminator 3 view .LVU258
 965 041c 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 966              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 967              		.loc 1 71 52 discriminator 3 view .LVU259
 968 0420 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 969 0424 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 970              	.LVL47:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 971              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU260
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 972              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU261
 973 0428 610000DA 		ble	.L46		@,
 974              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 975              		.loc 1 79 11 view .LVU262
 976 042c 0070A0E3 		mov	r7, #0	@ w,
 977 0430 043042E2 		sub	r3, r2, #4	@ _32, _5,
 978 0434 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 979              	.LVL48:
 980              	.L52:
  80:armwave.c     **** 
 981              		.loc 1 80 9 is_stmt 1 view .LVU263
 982              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 983              		.loc 1 84 9 is_stmt 0 view .LVU264
 984 0438 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 985              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 986              		.loc 1 80 64 view .LVU265
 987 043c 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 988              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 989              		.loc 1 84 9 view .LVU266
 990 0440 000052E3 		cmp	r2, #0	@ _35,
 991              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 992              		.loc 1 80 36 view .LVU267
 993 0444 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 994              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 995              		.loc 1 80 64 view .LVU268
 996 0448 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 997              	.LVL49:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 998              		.loc 1 84 9 is_stmt 1 view .LVU269
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 999              		.loc 1 84 9 is_stmt 0 view .LVU270
 1000 044c 5200000A 		beq	.L47		@,
 1001 0450 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 1002 0454 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 1003              	.LVL50:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1004              		.loc 1 84 9 view .LVU271
 1005 0458 036082E0 		add	r6, r2, r3	@ ivtmp.59, _24, tmp248
 1006              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1007              		.loc 1 84 16 view .LVU272
 1008 045c 00C0A0E3 		mov	ip, #0	@ yy,
 1009              	.LVL51:
 1010              	.L51:
  87:armwave.c     **** 
 1011              		.loc 1 87 13 is_stmt 1 view .LVU273
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1012              		.loc 1 101 17 view .LVU274
 106:armwave.c     ****                 word >>= 8;
 1013              		.loc 1 106 17 view .LVU275
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1014              		.loc 1 101 17 view .LVU276
 106:armwave.c     ****                 word >>= 8;
 1015              		.loc 1 106 17 view .LVU277
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1016              		.loc 1 101 17 view .LVU278
 106:armwave.c     ****                 word >>= 8;
 1017              		.loc 1 106 17 view .LVU279
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1018              		.loc 1 101 17 view .LVU280
 106:armwave.c     ****                 word >>= 8;
 1019              		.loc 1 106 17 view .LVU281
 1020              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1021              		.loc 1 87 18 is_stmt 0 view .LVU282
 1022 0460 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 1023              	.LVL52:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1024              		.loc 1 89 13 is_stmt 1 view .LVU283
  91:armwave.c     ****                 
 1025              		.loc 1 91 17 view .LVU284
  94:armwave.c     ****                     continue;
 1026              		.loc 1 94 17 view .LVU285
 1027              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1028              		.loc 1 102 34 is_stmt 0 view .LVU286
 1029 0464 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 1030              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1031              		.loc 1 94 20 view .LVU287
 1032 0468 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1033 046c 0120A003 		moveq	r2, #1	@ tmp250,
 1034 0470 0020A013 		movne	r2, #0	@ tmp250,
 1035              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1036              		.loc 1 94 19 view .LVU288
 1037 0474 FF0059E3 		cmp	r9, #255	@ scale_value,
 1038 0478 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 1039              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1040              		.loc 1 107 22 view .LVU289
 1041 047c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1042              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1043              		.loc 1 94 19 view .LVU290
 1044 0480 000052E3 		cmp	r2, #0	@ tmp255,
 1045              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1046              		.loc 1 102 34 view .LVU291
 1047 0484 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1048              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1049              		.loc 1 106 47 view .LVU292
 1050 0488 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1051              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1052              		.loc 1 107 22 view .LVU293
 1053 048c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1054 0490 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1055              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1056              		.loc 1 94 19 view .LVU294
 1057 0494 3B00001A 		bne	.L55		@,
 1058              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1059              		.loc 1 102 34 view .LVU295
 1060 0498 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1061              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1062              		.loc 1 106 47 view .LVU296
 1063 049c 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1064              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1065              		.loc 1 94 20 view .LVU297
 1066 04a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1067              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1068              		.loc 1 102 34 view .LVU298
 1069 04a4 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1070              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1071              		.loc 1 106 47 view .LVU299
 1072 04a8 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1073              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1074              		.loc 1 102 74 view .LVU300
 1075 04ac 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1076              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1077              		.loc 1 106 47 view .LVU301
 1078 04b0 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1079              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1080              		.loc 1 94 20 view .LVU302
 1081 04b4 01B0A003 		moveq	fp, #1	@ tmp271,
 1082 04b8 00B0A013 		movne	fp, #0	@ tmp271,
 1083              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1084              		.loc 1 94 19 view .LVU303
 1085 04bc FF0054E3 		cmp	r4, #255	@ scale_value,
 1086 04c0 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1087 04c4 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1088              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1089              		.loc 1 106 47 view .LVU304
 1090 04c8 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1091              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1092              		.loc 1 94 19 view .LVU305
 1093 04cc 000054E3 		cmp	r4, #0	@ tmp276,
 1094              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1095              		.loc 1 106 47 view .LVU306
 1096 04d0 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1097 04d4 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1098              	.LVL53:
 107:armwave.c     ****             }
 1099              		.loc 1 107 17 is_stmt 1 view .LVU307
  91:armwave.c     ****                 
 1100              		.loc 1 91 17 view .LVU308
  94:armwave.c     ****                     continue;
 1101              		.loc 1 94 17 view .LVU309
 1102              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1103              		.loc 1 94 19 is_stmt 0 view .LVU310
 1104 04d8 2A00001A 		bne	.L55		@,
 1105              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1106              		.loc 1 102 34 view .LVU311
 1107 04dc 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1108              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1109              		.loc 1 102 99 view .LVU312
 1110 04e0 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1111              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1112              		.loc 1 94 20 view .LVU313
 1113 04e4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1114              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1115              		.loc 1 102 34 view .LVU314
 1116 04e8 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1117              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1118              		.loc 1 94 20 view .LVU315
 1119 04ec FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1120 04f0 0120A003 		moveq	r2, #1	@ tmp293,
 1121              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1122              		.loc 1 102 74 view .LVU316
 1123 04f4 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1124              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1125              		.loc 1 94 20 view .LVU317
 1126 04f8 0020A013 		movne	r2, #0	@ tmp293,
 1127              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1128              		.loc 1 106 47 view .LVU318
 1129 04fc 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1130 0500 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1131              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 19 view .LVU319
 1133 0504 FF005EE3 		cmp	lr, #255	@ scale_value,
 1134 0508 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1135 050c 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1136              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1137              		.loc 1 106 47 view .LVU320
 1138 0510 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1139              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1140              		.loc 1 94 19 view .LVU321
 1141 0514 00005EE3 		cmp	lr, #0	@ tmp298,
 1142              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1143              		.loc 1 106 47 view .LVU322
 1144 0518 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1145 051c 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1146              		.loc 1 107 17 is_stmt 1 view .LVU323
 1147              	.LVL54:
  91:armwave.c     ****                 
 1148              		.loc 1 91 17 view .LVU324
  94:armwave.c     ****                     continue;
 1149              		.loc 1 94 17 view .LVU325
 1150              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1151              		.loc 1 94 19 is_stmt 0 view .LVU326
 1152 0520 1800001A 		bne	.L55		@,
 1153              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1154              		.loc 1 102 34 view .LVU327
 1155 0524 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1156              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1157              		.loc 1 94 20 view .LVU328
 1158 0528 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1159              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1160              		.loc 1 106 47 view .LVU329
 1161 052c 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1162              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1163              		.loc 1 102 34 view .LVU330
 1164 0530 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1165              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1166              		.loc 1 102 99 view .LVU331
 1167 0534 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1168              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1169              		.loc 1 102 74 view .LVU332
 1170 0538 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1171              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1172              		.loc 1 106 47 view .LVU333
 1173 053c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1174              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1175              		.loc 1 94 20 view .LVU334
 1176 0540 01E0A003 		moveq	lr, #1	@ tmp314,
 1177 0544 00E0A013 		movne	lr, #0	@ tmp314,
 1178              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1179              		.loc 1 94 19 view .LVU335
 1180 0548 FF0053E3 		cmp	r3, #255	@ word,
 1181 054c 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1182              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1183              		.loc 1 106 47 view .LVU336
 1184 0550 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1185              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1186              		.loc 1 94 19 view .LVU337
 1187 0554 00005EE3 		cmp	lr, #0	@ tmp319,
 1188              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1189              		.loc 1 106 47 view .LVU338
 1190 0558 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1191 055c 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1192              		.loc 1 107 17 is_stmt 1 view .LVU339
 1193              	.LVL55:
  91:armwave.c     ****                 
 1194              		.loc 1 91 17 view .LVU340
  94:armwave.c     ****                     continue;
 1195              		.loc 1 94 17 view .LVU341
 1196              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1197              		.loc 1 94 19 is_stmt 0 view .LVU342
 1198 0560 0800001A 		bne	.L55		@,
 1199              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1200              		.loc 1 102 34 view .LVU343
 1201 0564 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1202 0568 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1203              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1204              		.loc 1 102 99 view .LVU344
 1205 056c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1206              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1207              		.loc 1 102 34 view .LVU345
 1208 0570 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1209              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1210              		.loc 1 102 74 view .LVU346
 1211 0574 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1212              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1213              		.loc 1 106 47 view .LVU347
 1214 0578 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1215 057c 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1216 0580 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1217 0584 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1218              		.loc 1 107 17 is_stmt 1 view .LVU348
 1219              	.LVL56:
 1220              	.L55:
 1221              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1222              		.loc 1 84 9 is_stmt 0 view .LVU349
 1223 0588 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1224              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1225              		.loc 1 84 37 view .LVU350
 1226 058c 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1227              	.LVL57:
 1228              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1229              		.loc 1 84 9 view .LVU351
 1230 0590 0C0053E1 		cmp	r3, ip	@ _35, yy
 1231 0594 B1FFFF8A 		bhi	.L51		@,
 1232 0598 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1233              	.LVL58:
 1234              	.L47:
 1235              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1236              		.loc 1 79 44 view .LVU352
 1237 059c 017087E2 		add	r7, r7, #1	@ w, w,
 1238              	.LVL59:
 1239              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1240              		.loc 1 79 5 view .LVU353
 1241 05a0 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1242 05a4 A3FFFFBA 		blt	.L52		@,
 1243 05a8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1244 05ac 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1245 05b0 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1246              	.LVL60:
 1247              	.L46:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1248              		.loc 1 79 5 view .LVU354
 1249              	.LBE12:
 1250              	.LBE13:
 276:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1251              		.loc 1 276 9 is_stmt 1 discriminator 3 view .LVU355
 277:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1252              		.loc 1 277 9 discriminator 3 view .LVU356
 1253              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1254              		.loc 1 271 51 is_stmt 0 discriminator 3 view .LVU357
 1255 05b4 00109DE5 		ldr	r1, [sp]	@, %sfp
 1256              	.LVL61:
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1257              		.loc 1 271 51 discriminator 3 view .LVU358
 1258 05b8 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1259 05bc FEFFFFEB 		bl	__aeabi_idiv		@
 1260              	.LVL62:
 1261              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1262              		.loc 1 271 86 discriminator 3 view .LVU359
 1263 05c0 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1264 05c4 013083E2 		add	r3, r3, #1	@ yy, yy,
 1265 05c8 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1266              	.LVL63:
 1267              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1268              		.loc 1 271 5 discriminator 3 view .LVU360
 1269 05cc 030050E1 		cmp	r0, r3	@, yy
 1270 05d0 8AFFFF8A 		bhi	.L53		@,
 1271              	.LVL64:
 1272              	.L44:
 1273              	@ armwave.c:281: }
 278:armwave.c     ****     }
 279:armwave.c     **** 
 280:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 281:armwave.c     **** }
 1274              		.loc 1 281 1 view .LVU361
 1275 05d4 14D08DE2 		add	sp, sp, #20	@,,
 1276              		.cfi_def_cfa_offset 36
 1277              		@ sp needed	@
 1278 05d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1279              	.L64:
 1280              		.align	2
 1281              	.L63:
 1282 05dc 00000000 		.word	g_armwave_state
 1283              		.cfi_endproc
 1284              	.LFE61:
 1286              		.align	2
 1287              		.global	armwave_setup_render
 1288              		.syntax unified
 1289              		.arm
 1290              		.fpu vfp
 1292              	armwave_setup_render:
 1293              	.LVL65:
 1294              	.LFB62:
 282:armwave.c     **** 
 283:armwave.c     **** /*
 284:armwave.c     ****  * Setup the renderer with passed parameters.
 285:armwave.c     ****  */
 286:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 287:armwave.c     **** {
 1295              		.loc 1 287 1 is_stmt 1 view -0
 1296              		.cfi_startproc
 1297              		@ args = 12, pretend = 0, frame = 0
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
 288:armwave.c     ****     uint32_t length, xx;
 1299              		.loc 1 288 5 view .LVU363
 289:armwave.c     ****     float points_per_pixel;
 1300              		.loc 1 289 5 view .LVU364
 290:armwave.c     **** 
 291:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1301              		.loc 1 291 5 view .LVU365
 1302              	@ armwave.c:287: {
 287:armwave.c     ****     uint32_t length, xx;
 1303              		.loc 1 287 1 is_stmt 0 view .LVU366
 1304 05e0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1305              		.cfi_def_cfa_offset 28
 1306              		.cfi_offset 4, -28
 1307              		.cfi_offset 5, -24
 1308              		.cfi_offset 6, -20
 1309              		.cfi_offset 7, -16
 1310              		.cfi_offset 8, -12
 1311              		.cfi_offset 9, -8
 1312              		.cfi_offset 14, -4
 1313 05e4 028B2DED 		vpush.64	{d8}	@
 1314              		.cfi_def_cfa_offset 36
 1315              		.cfi_offset 80, -36
 1316              		.cfi_offset 81, -32
 1317 05e8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1318 05ec 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1319 05f0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1320 05f4 14D04DE2 		sub	sp, sp, #20	@,,
 1321              		.cfi_def_cfa_offset 56
 1322              	@ armwave.c:287: {
 287:armwave.c     ****     uint32_t length, xx;
 1323              		.loc 1 287 1 view .LVU367
 1324 05f8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1325 05fc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1326 0600 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1327              	@ armwave.c:291:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1328              		.loc 1 291 5 view .LVU368
 1329 0604 00308DE5 		str	r3, [sp]	@ wave_stride,
 1330 0608 F460CDE1 		strd	r6, [sp, #4]	@,,
 1331 060c 0230A0E1 		mov	r3, r2	@, waves_max
 1332              	.LVL66:
 1333              		.loc 1 291 5 view .LVU369
 1334 0610 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1335 0614 0120A0E1 		mov	r2, r1	@, end_point
 1336              	.LVL67:
 1337              		.loc 1 291 5 view .LVU370
 1338 0618 0010A0E1 		mov	r1, r0	@, start_point
 1339              	.LVL68:
 1340              		.loc 1 291 5 view .LVU371
 1341 061c E0019FE5 		ldr	r0, .L79+12	@,
 1342              	.LVL69:
 1343              		.loc 1 291 5 view .LVU372
 1344 0620 FEFFFFEB 		bl	printf		@
 1345              	.LVL70:
 292:armwave.c     **** 
 293:armwave.c     ****     // TODO these asserts should instead raise PyExc
 294:armwave.c     ****     assert(start_point < end_point);
 1346              		.loc 1 294 5 is_stmt 1 view .LVU373
 1347 0624 050054E1 		cmp	r4, r5	@ start_point, end_point
 1348 0628 6300002A 		bcs	.L76		@,
 295:armwave.c     **** 
 296:armwave.c     ****     /*
 297:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 298:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 299:armwave.c     ****     if(target_height == 256) {
 300:armwave.c     ****         g_armwave_state.row_shift = 8;
 301:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 302:armwave.c     ****     } else if(target_height == 512) {
 303:armwave.c     ****         g_armwave_state.row_shift = 9;
 304:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 305:armwave.c     ****     } else if(target_height == 1024) {
 306:armwave.c     ****         g_armwave_state.row_shift = 10;
 307:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 308:armwave.c     ****     } else if(target_height == 2048) {
 309:armwave.c     ****         g_armwave_state.row_shift = 11;
 310:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 311:armwave.c     ****     }
 312:armwave.c     ****     */
 313:armwave.c     **** 
 314:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 315:armwave.c     ****     g_armwave_state.xstride = target_height;
 1349              		.loc 1 315 5 view .LVU374
 1350              	@ armwave.c:326:     g_armwave_state.wave_length = end_point - start_point;
 316:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 318:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 319:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 320:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 321:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 322:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 323:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 325:armwave.c     ****     g_armwave_state.target_height = target_height;
 326:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1351              		.loc 1 326 45 is_stmt 0 view .LVU375
 1352 062c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1353              	.LVL71:
 1354              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1355              		.loc 1 316 49 view .LVU376
 1356 0630 706A9FED 		vldr.32	s12, .L79	@ tmp175,
 1357              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 327:armwave.c     **** 
 328:armwave.c     ****     // Calculate compound scaler
 329:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 330:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1358              		.loc 1 330 48 view .LVU377
 1359 0634 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1360              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1361              		.loc 1 330 79 view .LVU378
 1362 0638 6F6ADFED 		vldr.32	s13, .L79+4	@ tmp199,
 1363              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1364              		.loc 1 323 90 view .LVU379
 1365 063c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1366              	@ armwave.c:315:     g_armwave_state.xstride = target_height;
 315:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1367              		.loc 1 315 29 view .LVU380
 1368 0640 C0419FE5 		ldr	r4, .L79+16	@ tmp243,
 1369              	.LVL72:
 1370              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1371              		.loc 1 330 48 view .LVU381
 1372 0644 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1373              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1374              		.loc 1 316 49 view .LVU382
 1375 0648 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1376              	@ armwave.c:321:     g_armwave_state.size = target_height * target_width;
 321:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1377              		.loc 1 321 42 view .LVU383
 1378 064c 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1379              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1380              		.loc 1 323 95 view .LVU384
 1381 0650 833383E0 		add	r3, r3, r3, lsl #7	@ tmp189, tmp186, tmp186,
 1382              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1383              		.loc 1 316 49 view .LVU385
 1384 0654 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1385              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1386              		.loc 1 330 48 view .LVU386
 1387 0658 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1388              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 331:armwave.c     **** 
 332:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1389              		.loc 1 332 5 view .LVU387
 1390 065c 0128A0E3 		mov	r2, #65536	@ tmp202,
 1391 0660 04508DE5 		str	r5, [sp, #4]	@ _13,
 1392 0664 00608DE5 		str	r6, [sp]	@ target_width,
 1393              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 330:armwave.c     **** 
 1394              		.loc 1 330 48 view .LVU388
 1395 0668 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1396              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1397              		.loc 1 323 95 view .LVU389
 1398 066c 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1399              	@ armwave.c:315:     g_armwave_state.xstride = target_height;
 315:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1400              		.loc 1 315 29 view .LVU390
 1401 0670 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1402              		.loc 1 316 5 is_stmt 1 view .LVU391
 1403              	@ armwave.c:318:     g_armwave_state.wave_stride = wave_stride;
 318:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1404              		.loc 1 318 33 is_stmt 0 view .LVU392
 1405 0674 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1406              	@ armwave.c:319:     g_armwave_state.waves_max = waves_max;
 319:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1407              		.loc 1 319 31 view .LVU393
 1408 0678 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1409              	@ armwave.c:320:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 320:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1410              		.loc 1 320 27 view .LVU394
 1411 067c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1412              	@ armwave.c:325:     g_armwave_state.target_height = target_height;
 325:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1413              		.loc 1 325 35 view .LVU395
 1414 0680 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1415              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1416              		.loc 1 332 5 view .LVU396
 1417 0684 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1418              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 330:armwave.c     **** 
 1419              		.loc 1 330 48 view .LVU397
 1420 0688 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1421              	@ armwave.c:322:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 322:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1422              		.loc 1 322 37 view .LVU398
 1423 068c 022CA0E3 		mov	r2, #512	@ tmp185,
 1424              	@ armwave.c:321:     g_armwave_state.size = target_height * target_width;
 321:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1425              		.loc 1 321 26 view .LVU399
 1426 0690 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1427              	@ armwave.c:322:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 322:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1428              		.loc 1 322 37 view .LVU400
 1429 0694 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1430              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1431              		.loc 1 332 5 view .LVU401
 1432 0698 0310A0E1 		mov	r1, r3	@, tmp190
 1433              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1434              		.loc 1 323 34 view .LVU402
 1435 069c 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1436              	@ armwave.c:326:     g_armwave_state.wave_length = end_point - start_point;
 326:armwave.c     **** 
 1437              		.loc 1 326 33 view .LVU403
 1438 06a0 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1439              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1440              		.loc 1 332 5 view .LVU404
 1441 06a4 60019FE5 		ldr	r0, .L79+20	@,
 1442              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1443              		.loc 1 316 49 view .LVU405
 1444 06a8 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1445              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 330:armwave.c     **** 
 1446              		.loc 1 330 79 view .LVU406
 1447 06ac A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1448              	@ armwave.c:329:     g_armwave_state.cmp_x_bitdepth_scale = \
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1449              		.loc 1 329 42 view .LVU407
 1450 06b0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1451              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1452              		.loc 1 316 33 view .LVU408
 1453 06b4 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 317:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1454              		.loc 1 317 5 is_stmt 1 view .LVU409
 1455              	@ armwave.c:329:     g_armwave_state.cmp_x_bitdepth_scale = \
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1456              		.loc 1 329 42 is_stmt 0 view .LVU410
 1457 06b8 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1458              	@ armwave.c:317:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 317:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1459              		.loc 1 317 30 view .LVU411
 1460 06bc C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1461              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1462              		.loc 1 332 5 view .LVU412
 1463 06c0 0C30A0E1 		mov	r3, ip	@, _19
 1464 06c4 0C20A0E1 		mov	r2, ip	@, tmp3
 1465              	@ armwave.c:329:     g_armwave_state.cmp_x_bitdepth_scale = \
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1466              		.loc 1 329 42 view .LVU413
 1467 06c8 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1468              	@ armwave.c:317:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 317:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1469              		.loc 1 317 30 view .LVU414
 1470 06cc 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 318:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1471              		.loc 1 318 5 is_stmt 1 view .LVU415
 319:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1472              		.loc 1 319 5 view .LVU416
 320:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1473              		.loc 1 320 5 view .LVU417
 321:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1474              		.loc 1 321 5 view .LVU418
 322:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1475              		.loc 1 322 5 view .LVU419
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1476              		.loc 1 323 5 view .LVU420
 324:armwave.c     ****     g_armwave_state.target_height = target_height;
 1477              		.loc 1 324 5 view .LVU421
 325:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1478              		.loc 1 325 5 view .LVU422
 326:armwave.c     **** 
 1479              		.loc 1 326 5 view .LVU423
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1480              		.loc 1 329 5 view .LVU424
 1481              		.loc 1 332 5 view .LVU425
 1482 06d0 FEFFFFEB 		bl	printf		@
 1483              	.LVL73:
 333:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 334:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 335:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 336:armwave.c     **** 
 337:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 338:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 339:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 340:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1484              		.loc 1 340 5 view .LVU426
 1485              	@ armwave.c:342:     if(g_armwave_state.ch1_buffer != NULL)
 341:armwave.c     **** 
 342:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1486              		.loc 1 342 23 is_stmt 0 view .LVU427
 1487 06d4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1488              	@ armwave.c:340:     g_armwave_state.slice_height = 256; // 64;  
 340:armwave.c     **** 
 1489              		.loc 1 340 34 view .LVU428
 1490 06d8 013CA0E3 		mov	r3, #256	@ tmp204,
 1491              	@ armwave.c:342:     if(g_armwave_state.ch1_buffer != NULL)
 1492              		.loc 1 342 7 view .LVU429
 1493 06dc 000050E3 		cmp	r0, #0	@ _20,
 1494              	@ armwave.c:340:     g_armwave_state.slice_height = 256; // 64;  
 340:armwave.c     **** 
 1495              		.loc 1 340 34 view .LVU430
 1496 06e0 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1497              		.loc 1 342 5 is_stmt 1 view .LVU431
 1498              	@ armwave.c:342:     if(g_armwave_state.ch1_buffer != NULL)
 1499              		.loc 1 342 7 is_stmt 0 view .LVU432
 1500 06e4 0000000A 		beq	.L67		@,
 343:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1501              		.loc 1 343 9 is_stmt 1 view .LVU433
 1502 06e8 FEFFFFEB 		bl	free		@
 1503              	.LVL74:
 1504              	.L67:
 344:armwave.c     **** 
 345:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1505              		.loc 1 345 5 view .LVU434
 1506              	@ armwave.c:345:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1507              		.loc 1 345 34 is_stmt 0 view .LVU435
 1508 06ec 0110A0E3 		mov	r1, #1	@,
 1509 06f0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1510 06f4 FEFFFFEB 		bl	calloc		@
 1511              	.LVL75:
 1512              	@ armwave.c:347:     assert(g_armwave_state.ch1_buffer != NULL);
 346:armwave.c     **** 
 347:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1513              		.loc 1 347 5 view .LVU436
 1514 06f8 000050E3 		cmp	r0, #0	@ _23,
 1515              	@ armwave.c:345:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 345:armwave.c     **** 
 1516              		.loc 1 345 34 view .LVU437
 1517 06fc 0070A0E1 		mov	r7, r0	@ _23,
 1518              	@ armwave.c:345:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 345:armwave.c     **** 
 1519              		.loc 1 345 32 view .LVU438
 1520 0700 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1521              		.loc 1 347 5 is_stmt 1 view .LVU439
 1522 0704 3600000A 		beq	.L77		@,
 348:armwave.c     **** 
 349:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 350:armwave.c     ****     length = end_point - start_point;
 1523              		.loc 1 350 5 view .LVU440
 1524              	.LVL76:
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1525              		.loc 1 351 5 view .LVU441
 1526              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 1527              		.loc 1 351 34 is_stmt 0 view .LVU442
 1528 0708 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1529              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 1530              		.loc 1 351 22 view .LVU443
 1531 070c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1532              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1533              		.loc 1 352 60 view .LVU444
 1534 0710 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1535              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 353:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1536              		.loc 1 353 40 view .LVU445
 1537 0714 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1538              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1539              		.loc 1 351 34 view .LVU446
 1540 0718 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1541              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1542              		.loc 1 351 22 view .LVU447
 1543 071c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1544              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1545              		.loc 1 352 60 view .LVU448
 1546 0720 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1547              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1548              		.loc 1 351 22 view .LVU449
 1549 0724 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1550              	.LVL77:
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1551              		.loc 1 352 5 is_stmt 1 view .LVU450
 1552              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1553              		.loc 1 352 60 is_stmt 0 view .LVU451
 1554 0728 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1555              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1556              		.loc 1 352 41 view .LVU452
 1557 072c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1558 0730 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1559              		.loc 1 353 5 is_stmt 1 view .LVU453
 1560              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1561              		.loc 1 353 40 is_stmt 0 view .LVU454
 1562 0734 FEFFFFEB 		bl	malloc		@
 1563              	.LVL78:
 1564              	@ armwave.c:355:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 354:armwave.c     **** 
 355:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1565              		.loc 1 355 5 view .LVU455
 1566 0738 000050E3 		cmp	r0, #0	@ _31,
 1567              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 353:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1568              		.loc 1 353 40 view .LVU456
 1569 073c 0060A0E1 		mov	r6, r0	@ _31,
 1570              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 353:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1571              		.loc 1 353 38 view .LVU457
 1572 0740 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1573              		.loc 1 355 5 is_stmt 1 view .LVU458
 1574 0744 2100000A 		beq	.L78		@,
 1575              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 356:armwave.c     **** 
 357:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 358:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1576              		.loc 1 358 54 is_stmt 0 view .LVU459
 1577 0748 2C7ADFED 		vldr.32	s15, .L79+8	@ tmp231,
 1578 074c 020040E2 		sub	r0, r0, #2	@ ivtmp.71, _31,
 1579              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1580              		.loc 1 357 12 view .LVU460
 1581 0750 0030A0E3 		mov	r3, #0	@ xx,
 1582              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1583              		.loc 1 358 54 view .LVU461
 1584 0754 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1585              	.L70:
 1586              	.LVL79:
 1587              		.loc 1 358 9 is_stmt 1 discriminator 3 view .LVU462
 1588              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1589              		.loc 1 358 74 is_stmt 0 discriminator 3 view .LVU463
 1590 0758 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1591              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1592              		.loc 1 357 32 discriminator 3 view .LVU464
 1593 075c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1594              	.LVL80:
 1595              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1596              		.loc 1 357 5 discriminator 3 view .LVU465
 1597 0760 030055E1 		cmp	r5, r3	@ _13, xx
 1598              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1599              		.loc 1 358 74 discriminator 3 view .LVU466
 1600 0764 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1601 0768 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1602              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1603              		.loc 1 358 46 discriminator 3 view .LVU467
 1604 076c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1605 0770 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1606 0774 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1607              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1608              		.loc 1 357 5 discriminator 3 view .LVU468
 1609 0778 F6FFFF1A 		bne	.L70		@,
 359:armwave.c     **** 
 360:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 361:armwave.c     ****     }
 362:armwave.c     **** 
 363:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1610              		.loc 1 363 5 is_stmt 1 view .LVU469
 1611              	@ armwave.c:363:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1612              		.loc 1 363 34 is_stmt 0 view .LVU470
 1613 077c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1614 0780 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1615 0784 FEFFFFEB 		bl	malloc		@
 1616              	.LVL81:
 1617              	@ armwave.c:365:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 364:armwave.c     **** 
 365:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1618              		.loc 1 365 5 view .LVU471
 1619 0788 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1620 078c 0620A0E1 		mov	r2, r6	@, _31
 1621 0790 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1622 0794 0710A0E1 		mov	r1, r7	@, _23
 1623              	@ armwave.c:363:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 363:armwave.c     **** 
 1624              		.loc 1 363 34 view .LVU472
 1625 0798 00C0A0E1 		mov	ip, r0	@ tmp238,
 1626              	@ armwave.c:365:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1627              		.loc 1 365 5 view .LVU473
 1628 079c 0030A0E1 		mov	r3, r0	@, tmp238
 1629              	@ armwave.c:363:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 363:armwave.c     **** 
 1630              		.loc 1 363 32 view .LVU474
 1631 07a0 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1632              		.loc 1 365 5 is_stmt 1 view .LVU475
 1633 07a4 64009FE5 		ldr	r0, .L79+24	@,
 1634 07a8 FEFFFFEB 		bl	printf		@
 1635              	.LVL82:
 366:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 367:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 368:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 369:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 370:armwave.c     **** 
 371:armwave.c     ****     malloc_stats();
 1636              		.loc 1 371 5 view .LVU476
 1637              	@ armwave.c:372: }
 372:armwave.c     **** }
 1638              		.loc 1 372 1 is_stmt 0 view .LVU477
 1639 07ac 14D08DE2 		add	sp, sp, #20	@,,
 1640              		.cfi_remember_state
 1641              		.cfi_def_cfa_offset 36
 1642              		@ sp needed	@
 1643 07b0 028BBDEC 		vldm	sp!, {d8}	@
 1644              		.cfi_restore 80
 1645              		.cfi_restore 81
 1646              		.cfi_def_cfa_offset 28
 1647              	.LVL83:
 1648              		.loc 1 372 1 view .LVU478
 1649 07b4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1650              		.cfi_restore 14
 1651              		.cfi_restore 9
 1652              		.cfi_restore 8
 1653              		.cfi_restore 7
 1654              		.cfi_restore 6
 1655              		.cfi_restore 5
 1656              		.cfi_restore 4
 1657              		.cfi_def_cfa_offset 0
 1658              	.LVL84:
 1659              	@ armwave.c:371:     malloc_stats();
 371:armwave.c     **** }
 1660              		.loc 1 371 5 view .LVU479
 1661 07b8 FEFFFFEA 		b	malloc_stats		@
 1662              	.LVL85:
 1663              	.L76:
 1664              		.cfi_restore_state
 294:armwave.c     **** 
 1665              		.loc 1 294 5 is_stmt 1 discriminator 1 view .LVU480
 1666 07bc 50309FE5 		ldr	r3, .L79+28	@,
 1667 07c0 50209FE5 		ldr	r2, .L79+32	@,
 1668 07c4 50109FE5 		ldr	r1, .L79+36	@,
 1669 07c8 50009FE5 		ldr	r0, .L79+40	@,
 1670 07cc FEFFFFEB 		bl	__assert_fail		@
 1671              	.LVL86:
 1672              	.L78:
 355:armwave.c     **** 
 1673              		.loc 1 355 5 discriminator 1 view .LVU481
 1674 07d0 3C309FE5 		ldr	r3, .L79+28	@,
 1675 07d4 48209FE5 		ldr	r2, .L79+44	@,
 1676 07d8 3C109FE5 		ldr	r1, .L79+36	@,
 1677 07dc 44009FE5 		ldr	r0, .L79+48	@,
 1678 07e0 FEFFFFEB 		bl	__assert_fail		@
 1679              	.LVL87:
 1680              	.L77:
 347:armwave.c     **** 
 1681              		.loc 1 347 5 discriminator 1 view .LVU482
 1682 07e4 28309FE5 		ldr	r3, .L79+28	@,
 1683 07e8 3C209FE5 		ldr	r2, .L79+52	@,
 1684 07ec 28109FE5 		ldr	r1, .L79+36	@,
 1685 07f0 38009FE5 		ldr	r0, .L79+56	@,
 1686 07f4 FEFFFFEB 		bl	__assert_fail		@
 1687              	.LVL88:
 1688              	.L80:
 1689              		.align	2
 1690              	.L79:
 1691 07f8 00007F43 		.word	1132396544
 1692 07fc 00008047 		.word	1199570944
 1693 0800 0000803F 		.word	1065353216
 1694 0804 40000000 		.word	.LC4
 1695 0808 00000000 		.word	g_armwave_state
 1696 080c 84000000 		.word	.LC6
 1697 0810 34010000 		.word	.LC9
 1698 0814 1C000000 		.word	.LANCHOR0+28
 1699 0818 26010000 		.word	294
 1700 081c 20000000 		.word	.LC2
 1701 0820 6C000000 		.word	.LC5
 1702 0824 63010000 		.word	355
 1703 0828 08010000 		.word	.LC8
 1704 082c 5B010000 		.word	347
 1705 0830 E4000000 		.word	.LC7
 1706              		.cfi_endproc
 1707              	.LFE62:
 1709              		.align	2
 1710              		.global	armwave_set_wave_pointer
 1711              		.syntax unified
 1712              		.arm
 1713              		.fpu vfp
 1715              	armwave_set_wave_pointer:
 1716              	.LVL89:
 1717              	.LFB63:
 373:armwave.c     **** 
 374:armwave.c     **** /*
 375:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 376:armwave.c     ****  * in the future.
 377:armwave.c     ****  */
 378:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 379:armwave.c     **** {
 1718              		.loc 1 379 1 view -0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1722              		.loc 1 380 5 view .LVU484
 1723 0834 000050E3 		cmp	r0, #0	@ wave_buffer
 1724              		.loc 1 380 5 is_stmt 0 view .LVU485
 1725 0838 0200000A 		beq	.L86		@,
 381:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1726              		.loc 1 381 5 is_stmt 1 view .LVU486
 1727              	@ armwave.c:381:     g_armwave_state.wave_buffer = wave_buffer;
 1728              		.loc 1 381 33 is_stmt 0 view .LVU487
 1729 083c 1C309FE5 		ldr	r3, .L87	@ tmp115,
 1730 0840 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1731 0844 1EFF2FE1 		bx	lr	@
 1732              	.L86:
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1733              		.loc 1 380 5 is_stmt 1 discriminator 1 view .LVU488
 1734              	@ armwave.c:379: {
 379:armwave.c     ****     assert(wave_buffer != NULL);
 1735              		.loc 1 379 1 is_stmt 0 discriminator 1 view .LVU489
 1736 0848 10402DE9 		push	{r4, lr}	@
 1737              		.cfi_def_cfa_offset 8
 1738              		.cfi_offset 4, -8
 1739              		.cfi_offset 14, -4
 1740              	@ armwave.c:380:     assert(wave_buffer != NULL);
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1741              		.loc 1 380 5 discriminator 1 view .LVU490
 1742 084c 5F2FA0E3 		mov	r2, #380	@,
 1743 0850 0C309FE5 		ldr	r3, .L87+4	@,
 1744 0854 0C109FE5 		ldr	r1, .L87+8	@,
 1745 0858 0C009FE5 		ldr	r0, .L87+12	@,
 1746              	.LVL90:
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1747              		.loc 1 380 5 discriminator 1 view .LVU491
 1748 085c FEFFFFEB 		bl	__assert_fail		@
 1749              	.LVL91:
 1750              	.L88:
 1751              		.align	2
 1752              	.L87:
 1753 0860 00000000 		.word	g_armwave_state
 1754 0864 34000000 		.word	.LANCHOR0+52
 1755 0868 20000000 		.word	.LC2
 1756 086c 58010000 		.word	.LC10
 1757              		.cfi_endproc
 1758              	.LFE63:
 1760              		.align	2
 1761              		.global	armwave_set_wave_pointer_as_testbuf
 1762              		.syntax unified
 1763              		.arm
 1764              		.fpu vfp
 1766              	armwave_set_wave_pointer_as_testbuf:
 1767              	.LVL92:
 1768              	.LFB64:
 382:armwave.c     **** }
 383:armwave.c     **** 
 384:armwave.c     **** /*
 385:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 386:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 387:armwave.c     ****  */
 388:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 389:armwave.c     **** {
 1769              		.loc 1 389 1 is_stmt 1 view -0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773              		@ link register save eliminated.
 390:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1774              		.loc 1 390 5 view .LVU493
 1775              	@ armwave.c:390:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1776              		.loc 1 390 29 is_stmt 0 view .LVU494
 1777 0870 24309FE5 		ldr	r3, .L92	@ tmp117,
 1778              	@ armwave.c:390:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1779              		.loc 1 390 7 view .LVU495
 1780 0874 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1781 0878 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1782 087c 0400003A 		bcc	.L91		@,
 391:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 392:armwave.c     ****         return;
 393:armwave.c     ****     }
 394:armwave.c     **** 
 395:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1783              		.loc 1 395 5 is_stmt 1 view .LVU496
 1784              	@ armwave.c:395:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1785              		.loc 1 395 111 is_stmt 0 view .LVU497
 1786 0880 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1787              	@ armwave.c:395:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1788              		.loc 1 395 68 view .LVU498
 1789 0884 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1790 0888 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1791              	.LVL93:
 1792              	@ armwave.c:395:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1793              		.loc 1 395 33 view .LVU499
 1794 088c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1795              	@ armwave.c:396: }
 396:armwave.c     **** }
 1796              		.loc 1 396 1 view .LVU500
 1797 0890 1EFF2FE1 		bx	lr	@
 1798              	.LVL94:
 1799              	.L91:
 391:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1800              		.loc 1 391 9 is_stmt 1 view .LVU501
 1801 0894 04009FE5 		ldr	r0, .L92+4	@,
 1802              	.LVL95:
 391:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1803              		.loc 1 391 9 is_stmt 0 view .LVU502
 1804 0898 FEFFFFEA 		b	puts		@
 1805              	.LVL96:
 1806              	.L93:
 1807              		.align	2
 1808              	.L92:
 1809 089c 00000000 		.word	g_armwave_state
 1810 08a0 6C010000 		.word	.LC11
 1811              		.cfi_endproc
 1812              	.LFE64:
 1814              		.align	2
 1815              		.global	armwave_set_wave_pointer_u32
 1816              		.syntax unified
 1817              		.arm
 1818              		.fpu vfp
 1820              	armwave_set_wave_pointer_u32:
 1821              	.LVL97:
 1822              	.LFB65:
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 400:armwave.c     ****  * disjointed buffers in the future.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 403:armwave.c     **** {
 1823              		.loc 1 403 1 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1827              		.loc 1 404 5 view .LVU504
 1828 08a4 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1829              		.loc 1 404 5 is_stmt 0 view .LVU505
 1830 08a8 0200000A 		beq	.L99		@,
 405:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1831              		.loc 1 405 5 is_stmt 1 view .LVU506
 1832              	@ armwave.c:405:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1833              		.loc 1 405 33 is_stmt 0 view .LVU507
 1834 08ac 1C309FE5 		ldr	r3, .L100	@ tmp116,
 1835 08b0 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1836 08b4 1EFF2FE1 		bx	lr	@
 1837              	.L99:
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1838              		.loc 1 404 5 is_stmt 1 discriminator 1 view .LVU508
 1839              	@ armwave.c:403: {
 403:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1840              		.loc 1 403 1 is_stmt 0 discriminator 1 view .LVU509
 1841 08b8 10402DE9 		push	{r4, lr}	@
 1842              		.cfi_def_cfa_offset 8
 1843              		.cfi_offset 4, -8
 1844              		.cfi_offset 14, -4
 1845              	@ armwave.c:404:     assert(wave_buffer_ptr != 0);
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1846              		.loc 1 404 5 discriminator 1 view .LVU510
 1847 08bc 652FA0E3 		mov	r2, #404	@,
 1848 08c0 0C309FE5 		ldr	r3, .L100+4	@,
 1849 08c4 0C109FE5 		ldr	r1, .L100+8	@,
 1850 08c8 0C009FE5 		ldr	r0, .L100+12	@,
 1851              	.LVL98:
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1852              		.loc 1 404 5 discriminator 1 view .LVU511
 1853 08cc FEFFFFEB 		bl	__assert_fail		@
 1854              	.LVL99:
 1855              	.L101:
 1856              		.align	2
 1857              	.L100:
 1858 08d0 00000000 		.word	g_armwave_state
 1859 08d4 50000000 		.word	.LANCHOR0+80
 1860 08d8 20000000 		.word	.LC2
 1861 08dc A8010000 		.word	.LC12
 1862              		.cfi_endproc
 1863              	.LFE65:
 1865              		.align	2
 1866              		.global	armwave_clear_buffer
 1867              		.syntax unified
 1868              		.arm
 1869              		.fpu vfp
 1871              	armwave_clear_buffer:
 1872              	.LVL100:
 1873              	.LFB66:
 406:armwave.c     **** }
 407:armwave.c     **** 
 408:armwave.c     **** /*
 409:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 410:armwave.c     ****  */
 411:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 412:armwave.c     **** {
 1874              		.loc 1 412 1 is_stmt 1 view -0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878              		@ link register save eliminated.
 413:armwave.c     ****     // Flags ignored, only one buffer cleared
 414:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1879              		.loc 1 414 5 view .LVU513
 1880              	@ armwave.c:414:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1881              		.loc 1 414 58 is_stmt 0 view .LVU514
 1882 08e0 0C309FE5 		ldr	r3, .L103	@ tmp114,
 1883              	@ armwave.c:414:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1884              		.loc 1 414 5 view .LVU515
 1885 08e4 0010A0E3 		mov	r1, #0	@,
 1886 08e8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1887 08ec 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1888              	.LVL101:
 1889              		.loc 1 414 5 view .LVU516
 1890 08f0 FEFFFFEA 		b	memset		@
 1891              	.LVL102:
 1892              	.L104:
 1893              		.align	2
 1894              	.L103:
 1895 08f4 00000000 		.word	g_armwave_state
 1896              		.cfi_endproc
 1897              	.LFE66:
 1899              		.align	2
 1900              		.global	armwave_set_channel_colour
 1901              		.syntax unified
 1902              		.arm
 1903              		.fpu vfp
 1905              	armwave_set_channel_colour:
 1906              	.LVL103:
 1907              	.LFB67:
 415:armwave.c     **** }
 416:armwave.c     **** 
 417:armwave.c     **** /*
 418:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 419:armwave.c     ****  */
 420:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 421:armwave.c     **** {
 1908              		.loc 1 421 1 is_stmt 1 view -0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 0
 1911              		@ frame_needed = 0, uses_anonymous_args = 0
 1912              		@ link register save eliminated.
 422:armwave.c     ****     // Only 1ch supported for now
 423:armwave.c     ****     switch(ch) {
 1913              		.loc 1 423 5 view .LVU518
 1914 08f8 010050E3 		cmp	r0, #1	@ ch,
 424:armwave.c     ****         case 1:
 425:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1915              		.loc 1 425 13 view .LVU519
 1916              	@ armwave.c:425:             g_armwave_state.ch1_color.r = r;
 1917              		.loc 1 425 41 is_stmt 0 view .LVU520
 1918 08fc 0C009F05 		ldreq	r0, .L107	@ tmp117,
 1919              	.LVL104:
 1920              		.loc 1 425 41 view .LVU521
 1921 0900 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 426:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1922              		.loc 1 426 13 is_stmt 1 view .LVU522
 1923              	@ armwave.c:426:             g_armwave_state.ch1_color.g = g;
 1924              		.loc 1 426 41 is_stmt 0 view .LVU523
 1925 0904 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 427:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1926              		.loc 1 427 13 is_stmt 1 view .LVU524
 1927              	@ armwave.c:427:             g_armwave_state.ch1_color.b = b;
 1928              		.loc 1 427 41 is_stmt 0 view .LVU525
 1929 0908 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 428:armwave.c     ****             break;
 1930              		.loc 1 428 13 is_stmt 1 view .LVU526
 1931              	@ armwave.c:430: }
 429:armwave.c     ****     }
 430:armwave.c     **** }
 1932              		.loc 1 430 1 is_stmt 0 view .LVU527
 1933 090c 1EFF2FE1 		bx	lr	@
 1934              	.L108:
 1935              		.align	2
 1936              	.L107:
 1937 0910 00000000 		.word	g_armwave_state
 1938              		.cfi_endproc
 1939              	.LFE67:
 1941              		.align	2
 1942              		.global	armwave_dump_ppm_debug
 1943              		.syntax unified
 1944              		.arm
 1945              		.fpu vfp
 1947              	armwave_dump_ppm_debug:
 1948              	.LVL105:
 1949              	.LFB68:
 431:armwave.c     **** 
 432:armwave.c     **** /*
 433:armwave.c     ****  * Dump a ppm of a buffer to a file.
 434:armwave.c     ****  */
 435:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 436:armwave.c     **** {
 1950              		.loc 1 436 1 is_stmt 1 view -0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 437:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1954              		.loc 1 437 5 view .LVU529
 1955              	@ armwave.c:436: {
 436:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1956              		.loc 1 436 1 is_stmt 0 view .LVU530
 1957 0914 0130A0E1 		mov	r3, r1	@ fn, fn
 1958 0918 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1959              		.cfi_def_cfa_offset 28
 1960              		.cfi_offset 4, -28
 1961              		.cfi_offset 5, -24
 1962              		.cfi_offset 6, -20
 1963              		.cfi_offset 7, -16
 1964              		.cfi_offset 8, -12
 1965              		.cfi_offset 9, -8
 1966              		.cfi_offset 14, -4
 1967 091c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1968 0920 0CD04DE2 		sub	sp, sp, #12	@,,
 1969              		.cfi_def_cfa_offset 40
 1970              	@ armwave.c:437:     FILE *fp = fopen(fn, "wb");
 1971              		.loc 1 437 16 view .LVU531
 1972 0924 C4109FE5 		ldr	r1, .L117	@,
 1973              	.LVL106:
 1974              		.loc 1 437 16 view .LVU532
 1975 0928 0300A0E1 		mov	r0, r3	@, fn
 1976              	.LVL107:
 1977              		.loc 1 437 16 view .LVU533
 1978 092c FEFFFFEB 		bl	fopen64		@
 1979              	.LVL108:
 1980              	@ armwave.c:444:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 438:armwave.c     ****     uint32_t data;
 439:armwave.c     ****     int xx, yy;
 440:armwave.c     **** 
 441:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 442:armwave.c     **** 
 443:armwave.c     ****     fputs("P3\n", fp);
 444:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1981              		.loc 1 444 5 view .LVU534
 1982 0930 BC609FE5 		ldr	r6, .L117+4	@ tmp150,
 1983              	@ armwave.c:443:     fputs("P3\n", fp);
 443:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1984              		.loc 1 443 5 view .LVU535
 1985 0934 0320A0E3 		mov	r2, #3	@,
 1986 0938 0110A0E3 		mov	r1, #1	@,
 1987              	@ armwave.c:437:     FILE *fp = fopen(fn, "wb");
 437:armwave.c     ****     uint32_t data;
 1988              		.loc 1 437 16 view .LVU536
 1989 093c 0070A0E1 		mov	r7, r0	@ fp,
 1990              	.LVL109:
 438:armwave.c     ****     uint32_t data;
 1991              		.loc 1 438 5 is_stmt 1 view .LVU537
 439:armwave.c     **** 
 1992              		.loc 1 439 5 view .LVU538
 443:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1993              		.loc 1 443 5 view .LVU539
 1994 0940 0030A0E1 		mov	r3, r0	@, fp
 1995 0944 AC009FE5 		ldr	r0, .L117+8	@,
 1996              	.LVL110:
 443:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1997              		.loc 1 443 5 is_stmt 0 view .LVU540
 1998 0948 FEFFFFEB 		bl	fwrite		@
 1999              	.LVL111:
 2000              		.loc 1 444 5 is_stmt 1 view .LVU541
 2001 094c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2002 0950 A4109FE5 		ldr	r1, .L117+12	@,
 2003 0954 0700A0E1 		mov	r0, r7	@, fp
 2004 0958 FEFFFFEB 		bl	fprintf		@
 2005              	.LVL112:
 445:armwave.c     ****     fputs("255\n", fp);
 2006              		.loc 1 445 5 view .LVU542
 2007 095c 0420A0E3 		mov	r2, #4	@,
 2008 0960 0730A0E1 		mov	r3, r7	@, fp
 2009 0964 0110A0E3 		mov	r1, #1	@,
 2010 0968 90009FE5 		ldr	r0, .L117+16	@,
 2011 096c FEFFFFEB 		bl	fwrite		@
 2012              	.LVL113:
 446:armwave.c     **** 
 447:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2013              		.loc 1 447 5 view .LVU543
 2014              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2015              		.loc 1 447 37 is_stmt 0 view .LVU544
 2016 0970 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2017              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2018              		.loc 1 447 5 view .LVU545
 2019 0974 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2020 0978 180000DA 		ble	.L110		@,
 2021 097c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2022              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 450:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 451:armwave.c     **** 
 452:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2023              		.loc 1 452 13 view .LVU546
 2024 0980 7C909FE5 		ldr	r9, .L117+20	@ tmp152,
 2025              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 447:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2026              		.loc 1 447 12 view .LVU547
 2027 0984 0050A0E3 		mov	r5, #0	@ yy,
 2028              	.LVL114:
 2029              	.L111:
 2030              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2031              		.loc 1 448 9 view .LVU548
 2032 0988 000053E3 		cmp	r3, #0	@ _13,
 2033              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2034              		.loc 1 448 16 view .LVU549
 2035 098c 0040A0C3 		movgt	r4, #0	@ xx,
 2036              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2037              		.loc 1 448 9 view .LVU550
 2038 0990 0F0000DA 		ble	.L113		@,
 2039              	.LVL115:
 2040              	.L112:
 449:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2041              		.loc 1 449 13 is_stmt 1 discriminator 3 view .LVU551
 2042              	@ armwave.c:449:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 449:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2043              		.loc 1 449 29 is_stmt 0 discriminator 3 view .LVU552
 2044 0994 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2045              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2046              		.loc 1 452 13 discriminator 3 view .LVU553
 2047 0998 0910A0E1 		mov	r1, r9	@, tmp152
 2048 099c 0700A0E1 		mov	r0, r7	@, fp
 2049              	@ armwave.c:449:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 449:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2050              		.loc 1 449 18 discriminator 3 view .LVU554
 2051 09a0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2052              	.LVL116:
 2053              		.loc 1 452 13 is_stmt 1 discriminator 3 view .LVU555
 2054              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2055              		.loc 1 448 58 is_stmt 0 discriminator 3 view .LVU556
 2056 09a4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2057              	.LVL117:
 2058              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2059              		.loc 1 452 81 discriminator 3 view .LVU557
 2060 09a8 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2061              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2062              		.loc 1 452 61 discriminator 3 view .LVU558
 2063 09ac 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2064              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2065              		.loc 1 452 13 discriminator 3 view .LVU559
 2066 09b0 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2067 09b4 7330EFE6 		uxtb	r3, r3	@, tmp142
 2068 09b8 00C08DE5 		str	ip, [sp]	@ tmp147,
 2069 09bc 7220EFE6 		uxtb	r2, r2	@, data
 2070              	.LVL118:
 2071              		.loc 1 452 13 discriminator 3 view .LVU560
 2072 09c0 FEFFFFEB 		bl	fprintf		@
 2073              	.LVL119:
 2074              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2075              		.loc 1 448 41 discriminator 3 view .LVU561
 2076 09c4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2077              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2078              		.loc 1 448 9 discriminator 3 view .LVU562
 2079 09c8 040053E1 		cmp	r3, r4	@ _13, xx
 2080 09cc F0FFFFCA 		bgt	.L112		@,
 2081 09d0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2082              	.LVL120:
 2083              	.L113:
 2084              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 447:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2085              		.loc 1 447 55 discriminator 2 view .LVU563
 2086 09d4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2087              	.LVL121:
 2088              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 447:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2089              		.loc 1 447 5 discriminator 2 view .LVU564
 2090 09d8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2091 09dc E9FFFFBA 		blt	.L111		@,
 2092              	.LVL122:
 2093              	.L110:
 453:armwave.c     ****         }
 454:armwave.c     ****     }
 455:armwave.c     **** 
 456:armwave.c     ****     fclose(fp);
 2094              		.loc 1 456 5 is_stmt 1 view .LVU565
 2095 09e0 0700A0E1 		mov	r0, r7	@, fp
 2096              	@ armwave.c:457: }
 457:armwave.c     **** }
 2097              		.loc 1 457 1 is_stmt 0 view .LVU566
 2098 09e4 0CD08DE2 		add	sp, sp, #12	@,,
 2099              		.cfi_def_cfa_offset 28
 2100              		@ sp needed	@
 2101 09e8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2102              		.cfi_restore 14
 2103              		.cfi_restore 9
 2104              		.cfi_restore 8
 2105              		.cfi_restore 7
 2106              		.cfi_restore 6
 2107              		.cfi_restore 5
 2108              		.cfi_restore 4
 2109              		.cfi_def_cfa_offset 0
 2110              	.LVL123:
 2111              	@ armwave.c:456:     fclose(fp);
 456:armwave.c     **** }
 2112              		.loc 1 456 5 view .LVU567
 2113 09ec FEFFFFEA 		b	fclose		@
 2114              	.LVL124:
 2115              	.L118:
 456:armwave.c     **** }
 2116              		.loc 1 456 5 view .LVU568
 2117              		.align	2
 2118              	.L117:
 2119 09f0 C0010000 		.word	.LC13
 2120 09f4 00000000 		.word	g_armwave_state
 2121 09f8 C4010000 		.word	.LC14
 2122 09fc C8010000 		.word	.LC15
 2123 0a00 D0010000 		.word	.LC16
 2124 0a04 D8010000 		.word	.LC17
 2125              		.cfi_endproc
 2126              	.LFE68:
 2128              		.align	2
 2129              		.global	armwave_test_init
 2130              		.syntax unified
 2131              		.arm
 2132              		.fpu vfp
 2134              	armwave_test_init:
 2135              	.LVL125:
 2136              	.LFB69:
 458:armwave.c     **** 
 459:armwave.c     **** /*
 460:armwave.c     ****  * Initialise some test functionry.
 461:armwave.c     ****  */
 462:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 463:armwave.c     **** {
 2137              		.loc 1 463 1 is_stmt 1 view -0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 0
 2140              		@ frame_needed = 0, uses_anonymous_args = 0
 464:armwave.c     ****     test_create_gamma();
 2141              		.loc 1 464 5 view .LVU570
 2142              	.LBB18:
 2143              	.LBI18:
  34:armwave.c     **** {
 2144              		.loc 1 34 6 view .LVU571
  34:armwave.c     **** {
 2145              		.loc 1 34 6 is_stmt 0 view .LVU572
 2146              	.LBE18:
 2147              	@ armwave.c:463: {
 463:armwave.c     ****     test_create_gamma();
 2148              		.loc 1 463 1 view .LVU573
 2149 0a08 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2150              		.cfi_def_cfa_offset 32
 2151              		.cfi_offset 4, -32
 2152              		.cfi_offset 5, -28
 2153              		.cfi_offset 6, -24
 2154              		.cfi_offset 7, -20
 2155              		.cfi_offset 8, -16
 2156              		.cfi_offset 9, -12
 2157              		.cfi_offset 10, -8
 2158              		.cfi_offset 14, -4
 2159 0a0c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2160              		.cfi_def_cfa_offset 56
 2161              		.cfi_offset 80, -56
 2162              		.cfi_offset 81, -52
 2163              		.cfi_offset 82, -48
 2164              		.cfi_offset 83, -44
 2165              		.cfi_offset 84, -40
 2166              		.cfi_offset 85, -36
 2167 0a10 BC409FE5 		ldr	r4, .L123+20	@ ivtmp.85,
 2168              	.LBB21:
 2169              	.LBB19:
 2170              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2171              		.loc 1 40 32 view .LVU574
 2172 0a14 2DAA9FED 		vldr.32	s20, .L123+16	@ tmp136,
 2173              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2174              		.loc 1 40 26 view .LVU575
 2175 0a18 289B9FED 		vldr.64	d9, .L123	@ tmp151,
 2176              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2177              		.loc 1 40 49 view .LVU576
 2178 0a1c 298B9FED 		vldr.64	d8, .L123+8	@ tmp139,
 2179 0a20 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.85,
 2180              	.LBE19:
 2181              	.LBE21:
 2182              	@ armwave.c:463: {
 463:armwave.c     ****     test_create_gamma();
 2183              		.loc 1 463 1 view .LVU577
 2184 0a24 10D04DE2 		sub	sp, sp, #16	@,,
 2185              		.cfi_def_cfa_offset 72
 2186              	@ armwave.c:463: {
 463:armwave.c     ****     test_create_gamma();
 2187              		.loc 1 463 1 view .LVU578
 2188 0a28 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2189 0a2c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2190 0a30 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2191 0a34 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2192 0a38 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.85,
 2193 0a3c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2194              	.LVL126:
 2195              	.L120:
 2196              	.LBB22:
 2197              	.LBB20:
  40:armwave.c     ****     }
 2198              		.loc 1 40 9 is_stmt 1 view .LVU579
 2199              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2200              		.loc 1 40 32 is_stmt 0 view .LVU580
 2201 0a40 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.85
 2202              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2203              		.loc 1 40 26 view .LVU581
 2204 0a44 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2205              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2206              		.loc 1 40 32 view .LVU582
 2207 0a48 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2208 0a4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2209 0a50 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2210              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2211              		.loc 1 40 26 view .LVU583
 2212 0a54 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2213 0a58 FEFFFFEB 		bl	pow		@
 2214              	.LVL127:
 2215              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2216              		.loc 1 40 49 view .LVU584
 2217 0a5c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2218              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2219              		.loc 1 40 24 view .LVU585
 2220 0a60 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2221 0a64 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2222 0a68 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2223              	.LVL128:
 2224              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2225              		.loc 1 39 5 view .LVU586
 2226 0a6c 0A0054E1 		cmp	r4, r10	@ ivtmp.85, _39
 2227 0a70 F2FFFF1A 		bne	.L120		@,
 2228              	.LVL129:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2229              		.loc 1 39 5 view .LVU587
 2230              	.LBE20:
 2231              	.LBE22:
 465:armwave.c     **** 
 466:armwave.c     ****     // make ch1 yellowish by default
 467:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2232              		.loc 1 467 5 is_stmt 1 view .LVU588
 2233              	.LBB23:
 2234              	.LBI23:
 420:armwave.c     **** {
 2235              		.loc 1 420 6 view .LVU589
 2236              	.LBB24:
 423:armwave.c     ****         case 1:
 2237              		.loc 1 423 5 view .LVU590
 425:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2238              		.loc 1 425 13 view .LVU591
 426:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2239              		.loc 1 426 13 view .LVU592
 2240              	@ armwave.c:425:             g_armwave_state.ch1_color.r = r;
 425:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2241              		.loc 1 425 41 is_stmt 0 view .LVU593
 2242 0a74 5CC09FE5 		ldr	ip, .L123+24	@ tmp142,
 2243 0a78 5C409FE5 		ldr	r4, .L123+28	@ tmp143,
 2244              	.LBE24:
 2245              	.LBE23:
 2246              	@ armwave.c:469:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 468:armwave.c     **** 
 469:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2247              		.loc 1 469 5 view .LVU594
 2248 0a7c 0000A0E3 		mov	r0, #0	@ tmp147,
 2249              	.LBB28:
 2250              	.LBB25:
 2251              	@ armwave.c:427:             g_armwave_state.ch1_color.b = b;
 427:armwave.c     ****             break;
 2252              		.loc 1 427 41 view .LVU595
 2253 0a80 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2254              	.LBE25:
 2255              	.LBE28:
 2256              	@ armwave.c:469:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2257              		.loc 1 469 5 view .LVU596
 2258 0a84 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2259 0a88 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2260 0a8c 00808DE5 		str	r8, [sp]	@ render_width,
 2261 0a90 0610A0E1 		mov	r1, r6	@, tmp3
 2262 0a94 0720A0E1 		mov	r2, r7	@, nwaves
 2263              	.LBB29:
 2264              	.LBB26:
 2265              	@ armwave.c:425:             g_armwave_state.ch1_color.r = r;
 425:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2266              		.loc 1 425 41 view .LVU597
 2267 0a98 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 427:armwave.c     ****             break;
 2268              		.loc 1 427 13 is_stmt 1 view .LVU598
 2269              	.LBE26:
 2270              	.LBE29:
 2271              	@ armwave.c:469:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2272              		.loc 1 469 5 is_stmt 0 view .LVU599
 2273 0a9c 0630A0E1 		mov	r3, r6	@, wave_size
 2274              	.LBB30:
 2275              	.LBB27:
 2276              	@ armwave.c:427:             g_armwave_state.ch1_color.b = b;
 427:armwave.c     ****             break;
 2277              		.loc 1 427 41 view .LVU600
 2278 0aa0 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 428:armwave.c     ****     }
 2279              		.loc 1 428 13 is_stmt 1 view .LVU601
 2280              	.LVL130:
 428:armwave.c     ****     }
 2281              		.loc 1 428 13 is_stmt 0 view .LVU602
 2282              	.LBE27:
 2283              	.LBE30:
 2284              		.loc 1 469 5 is_stmt 1 view .LVU603
 2285 0aa4 FEFFFFEB 		bl	armwave_setup_render		@
 2286              	.LVL131:
 470:armwave.c     **** 
 471:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2287              		.loc 1 471 5 view .LVU604
 2288 0aa8 30109FE5 		ldr	r1, .L123+32	@,
 2289 0aac 30009FE5 		ldr	r0, .L123+36	@,
 2290              	@ armwave.c:472: }
 472:armwave.c     **** }
 2291              		.loc 1 472 1 is_stmt 0 view .LVU605
 2292 0ab0 10D08DE2 		add	sp, sp, #16	@,,
 2293              		.cfi_def_cfa_offset 56
 2294              		@ sp needed	@
 2295 0ab4 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2296              		.cfi_restore 84
 2297              		.cfi_restore 85
 2298              		.cfi_restore 82
 2299              		.cfi_restore 83
 2300              		.cfi_restore 80
 2301              		.cfi_restore 81
 2302              		.cfi_def_cfa_offset 32
 2303 0ab8 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2304              		.cfi_restore 14
 2305              		.cfi_restore 10
 2306              		.cfi_restore 9
 2307              		.cfi_restore 8
 2308              		.cfi_restore 7
 2309              		.cfi_restore 6
 2310              		.cfi_restore 5
 2311              		.cfi_restore 4
 2312              		.cfi_def_cfa_offset 0
 2313              	.LVL132:
 2314              	@ armwave.c:471:     printf("armwave version: %s\n", ARMWAVE_VER);
 471:armwave.c     **** }
 2315              		.loc 1 471 5 view .LVU606
 2316 0abc FEFFFFEA 		b	printf		@
 2317              	.LVL133:
 2318              	.L124:
 2319              		.align	3
 2320              	.L123:
 2321 0ac0 000000C0 		.word	-1073741824
 2322 0ac4 CCCCEC3F 		.word	1072483532
 2323 0ac8 00000000 		.word	0
 2324 0acc 00E06F40 		.word	1081073664
 2325 0ad0 00007F43 		.word	1132396544
 2326 0ad4 FFFFFFFF 		.word	gamma_table-1
 2327 0ad8 00000000 		.word	g_armwave_state
 2328 0adc F609F406 		.word	116656630
 2329 0ae0 00000000 		.word	.LC0
 2330 0ae4 08000000 		.word	.LC1
 2331              		.cfi_endproc
 2332              	.LFE69:
 2334              		.align	2
 2335              		.global	armwave_test_fill_outbuf
 2336              		.syntax unified
 2337              		.arm
 2338              		.fpu vfp
 2340              	armwave_test_fill_outbuf:
 2341              	.LFB70:
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Render image to the local allocated buffer.
 476:armwave.c     ****  */
 477:armwave.c     **** void armwave_test_fill_outbuf()
 478:armwave.c     **** {
 2342              		.loc 1 478 1 is_stmt 1 view -0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 0
 2345              		@ frame_needed = 0, uses_anonymous_args = 0
 2346              		@ link register save eliminated.
 479:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2347              		.loc 1 479 5 view .LVU608
 2348 0ae8 04309FE5 		ldr	r3, .L126	@ tmp111,
 2349 0aec 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2350 0af0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2351              	.LVL134:
 2352              	.L127:
 2353              		.align	2
 2354              	.L126:
 2355 0af4 00000000 		.word	g_armwave_state
 2356              		.cfi_endproc
 2357              	.LFE70:
 2359              		.align	2
 2360              		.global	armwave_test_dump_buffer_to_ppm
 2361              		.syntax unified
 2362              		.arm
 2363              		.fpu vfp
 2365              	armwave_test_dump_buffer_to_ppm:
 2366              	.LVL135:
 2367              	.LFB71:
 480:armwave.c     **** }
 481:armwave.c     **** 
 482:armwave.c     **** /*
 483:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 484:armwave.c     ****  */
 485:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 486:armwave.c     **** {
 2368              		.loc 1 486 1 view -0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 2372              		@ link register save eliminated.
 487:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2373              		.loc 1 487 5 view .LVU610
 2374 0af8 08309FE5 		ldr	r3, .L129	@ tmp112,
 2375 0afc 0010A0E1 		mov	r1, r0	@, fn
 2376 0b00 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2377              	.LVL136:
 2378              		.loc 1 487 5 is_stmt 0 view .LVU611
 2379 0b04 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2380              	.LVL137:
 2381              	.L130:
 2382              		.loc 1 487 5 view .LVU612
 2383              		.align	2
 2384              	.L129:
 2385 0b08 00000000 		.word	g_armwave_state
 2386              		.cfi_endproc
 2387              	.LFE71:
 2389              		.align	2
 2390              		.global	armwave_test_fill_gdkbuf
 2391              		.syntax unified
 2392              		.arm
 2393              		.fpu vfp
 2395              	armwave_test_fill_gdkbuf:
 2396              	.LVL138:
 2397              	.LFB72:
 488:armwave.c     **** }
 489:armwave.c     **** 
 490:armwave.c     **** /*
 491:armwave.c     ****  * Render GDK buffer with test funtionry.
 492:armwave.c     ****  */
 493:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 494:armwave.c     **** {
 2398              		.loc 1 494 1 is_stmt 1 view -0
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 0
 2401              		@ frame_needed = 0, uses_anonymous_args = 0
 2402              		@ link register save eliminated.
 495:armwave.c     ****     //PyObject *mv;
 496:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 497:armwave.c     **** 
 498:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 499:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2403              		.loc 1 499 5 view .LVU614
 500:armwave.c     ****     
 501:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 502:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2404              		.loc 1 502 5 view .LVU615
 2405              	@ armwave.c:499:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 499:armwave.c     ****     
 2406              		.loc 1 499 11 is_stmt 0 view .LVU616
 2407 0b0c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2408              	@ armwave.c:502:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2409              		.loc 1 502 5 view .LVU617
 2410 0b10 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2411              	.LVL139:
 2412              		.loc 1 502 5 view .LVU618
 2413 0b14 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2414              	.LVL140:
 2415              		.loc 1 502 5 view .LVU619
 2416              		.cfi_endproc
 2417              	.LFE72:
 2419              		.align	2
 2420              		.global	armwave_test_buffer_alloc
 2421              		.syntax unified
 2422              		.arm
 2423              		.fpu vfp
 2425              	armwave_test_buffer_alloc:
 2426              	.LVL141:
 2427              	.LFB73:
 503:armwave.c     **** }
 504:armwave.c     **** 
 505:armwave.c     **** /*
 506:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 509:armwave.c     **** {
 2428              		.loc 1 509 1 is_stmt 1 view -0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2432              		.loc 1 510 5 view .LVU621
 2433              	@ armwave.c:509: {
 509:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2434              		.loc 1 509 1 is_stmt 0 view .LVU622
 2435 0b18 70402DE9 		push	{r4, r5, r6, lr}	@
 2436              		.cfi_def_cfa_offset 16
 2437              		.cfi_offset 4, -16
 2438              		.cfi_offset 5, -12
 2439              		.cfi_offset 6, -8
 2440              		.cfi_offset 14, -4
 2441              	@ armwave.c:509: {
 509:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2442              		.loc 1 509 1 view .LVU623
 2443 0b1c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2444              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 2445              		.loc 1 510 23 view .LVU624
 2446 0b20 44409FE5 		ldr	r4, .L139	@ tmp128,
 2447 0b24 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2448              	.LVL142:
 2449              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 2450              		.loc 1 510 7 view .LVU625
 2451 0b28 000050E3 		cmp	r0, #0	@ _1,
 2452 0b2c 0000000A 		beq	.L133		@,
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2453              		.loc 1 511 9 is_stmt 1 view .LVU626
 2454 0b30 FEFFFFEB 		bl	free		@
 2455              	.LVL143:
 2456              	.L133:
 512:armwave.c     ****     }
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 515:armwave.c     **** 
 516:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2457              		.loc 1 516 5 view .LVU627
 2458              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2459              		.loc 1 516 75 is_stmt 0 view .LVU628
 2460 0b34 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2461 0b38 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2462              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2463              		.loc 1 516 40 view .LVU629
 2464 0b3c 0610A0E1 		mov	r1, r6	@, nsets
 2465              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2466              		.loc 1 516 75 view .LVU630
 2467 0b40 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2468              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2469              		.loc 1 516 40 view .LVU631
 2470 0b44 0500A0E1 		mov	r0, r5	@, _4
 2471 0b48 FEFFFFEB 		bl	calloc		@
 2472              	.LVL144:
 2473              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 517:armwave.c     **** 
 518:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2474              		.loc 1 518 7 view .LVU632
 2475 0b4c 000050E3 		cmp	r0, #0	@ tmp124,
 2476              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2477              		.loc 1 516 38 view .LVU633
 2478 0b50 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2479              		.loc 1 518 5 is_stmt 1 view .LVU634
 2480              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 2481              		.loc 1 518 7 is_stmt 0 view .LVU635
 2482 0b54 7080BD18 		popne	{r4, r5, r6, pc}	@
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2483              		.loc 1 519 9 is_stmt 1 view .LVU636
 2484 0b58 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2485 0b5c 0620A0E1 		mov	r2, r6	@, nsets
 2486 0b60 08009FE5 		ldr	r0, .L139+4	@,
 2487              	@ armwave.c:523: }
 520:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 521:armwave.c     ****         return;
 522:armwave.c     ****     }
 523:armwave.c     **** }
 2488              		.loc 1 523 1 is_stmt 0 view .LVU637
 2489 0b64 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2490              		.cfi_restore 14
 2491              		.cfi_restore 6
 2492              		.cfi_restore 5
 2493              		.cfi_restore 4
 2494              		.cfi_def_cfa_offset 0
 2495              	.LVL145:
 2496              	@ armwave.c:519:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2497              		.loc 1 519 9 view .LVU638
 2498 0b68 FEFFFFEA 		b	printf		@
 2499              	.LVL146:
 2500              	.L140:
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2501              		.loc 1 519 9 view .LVU639
 2502              		.align	2
 2503              	.L139:
 2504 0b6c 00000000 		.word	g_armwave_state
 2505 0b70 E8010000 		.word	.LC18
 2506              		.cfi_endproc
 2507              	.LFE73:
 2509              		.align	2
 2510              		.global	armwave_fill_pixbuf_into_pybuffer
 2511              		.syntax unified
 2512              		.arm
 2513              		.fpu vfp
 2515              	armwave_fill_pixbuf_into_pybuffer:
 2516              	.LVL147:
 2517              	.LFB74:
 524:armwave.c     **** 
 525:armwave.c     **** /*
 526:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 527:armwave.c     ****  */
 528:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 529:armwave.c     **** {
 2518              		.loc 1 529 1 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 48
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 530:armwave.c     ****     Py_buffer buffer;
 2522              		.loc 1 530 5 view .LVU641
 531:armwave.c     ****     int ret;
 2523              		.loc 1 531 5 view .LVU642
 532:armwave.c     **** 
 533:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 534:armwave.c     **** 
 535:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2524              		.loc 1 535 5 view .LVU643
 2525              	@ armwave.c:529: {
 529:armwave.c     ****     Py_buffer buffer;
 2526              		.loc 1 529 1 is_stmt 0 view .LVU644
 2527 0b74 04E02DE5 		str	lr, [sp, #-4]!	@,
 2528              		.cfi_def_cfa_offset 4
 2529              		.cfi_offset 14, -4
 2530 0b78 34D04DE2 		sub	sp, sp, #52	@,,
 2531              		.cfi_def_cfa_offset 56
 2532              	@ armwave.c:535:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2533              		.loc 1 535 11 view .LVU645
 2534 0b7c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2535 0b80 0120A0E3 		mov	r2, #1	@,
 2536 0b84 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2537              	.LVL148:
 536:armwave.c     **** 
 537:armwave.c     ****     if(ret != 0) {
 2538              		.loc 1 537 5 is_stmt 1 view .LVU646
 2539              	@ armwave.c:537:     if(ret != 0) {
 2540              		.loc 1 537 7 is_stmt 0 view .LVU647
 2541 0b88 000050E3 		cmp	r0, #0	@,
 2542 0b8c 0A00001A 		bne	.L145		@,
 538:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 539:armwave.c     ****         Py_RETURN_FALSE;
 540:armwave.c     ****     }
 541:armwave.c     **** 
 542:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 543:armwave.c     **** 
 544:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2543              		.loc 1 544 5 is_stmt 1 view .LVU648
 2544 0b90 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2545              	.LVL149:
 2546              		.loc 1 544 5 is_stmt 0 view .LVU649
 2547 0b94 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2548              	.LVL150:
 545:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 546:armwave.c     **** 
 547:armwave.c     ****     PyBuffer_Release(&buffer);
 2549              		.loc 1 547 5 is_stmt 1 view .LVU650
 2550 0b98 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2551 0b9c FEFFFFEB 		bl	PyBuffer_Release		@
 2552              	.LVL151:
 548:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 549:armwave.c     **** 
 550:armwave.c     ****     Py_RETURN_TRUE;
 2553              		.loc 1 550 5 view .LVU651
 2554              	.LBB31:
 2555              	.LBI31:
 2556              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2557              		.loc 2 456 20 view .LVU652
 2558              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2559              		.loc 2 458 21 view .LVU653
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2560              		.loc 2 459 5 view .LVU654
 2561              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2562              		.loc 2 459 18 is_stmt 0 view .LVU655
 2563 0ba0 38309FE5 		ldr	r3, .L146	@ tmp126,
 2564              	.LBE32:
 2565              	.LBE31:
 2566              	@ armwave.c:550:     Py_RETURN_TRUE;
 2567              		.loc 1 550 5 view .LVU656
 2568 0ba4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2569              	.LBB34:
 2570              	.LBB33:
 2571              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2572              		.loc 2 459 18 view .LVU657
 2573 0ba8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2574 0bac 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2575 0bb0 002083E5 		str	r2, [r3]	@ tmp128,
 2576              	.LBE33:
 2577              	.LBE34:
 2578              	@ armwave.c:551: }
 551:armwave.c     **** }
 2579              		.loc 1 551 1 view .LVU658
 2580 0bb4 34D08DE2 		add	sp, sp, #52	@,,
 2581              		.cfi_remember_state
 2582              		.cfi_def_cfa_offset 4
 2583              		@ sp needed	@
 2584 0bb8 04F09DE4 		ldr	pc, [sp], #4	@
 2585              	.LVL152:
 2586              	.L145:
 2587              		.cfi_restore_state
 538:armwave.c     ****         Py_RETURN_FALSE;
 2588              		.loc 1 538 9 is_stmt 1 view .LVU659
 2589 0bbc 20009FE5 		ldr	r0, .L146+4	@,
 2590              	.LVL153:
 538:armwave.c     ****         Py_RETURN_FALSE;
 2591              		.loc 1 538 9 is_stmt 0 view .LVU660
 2592 0bc0 FEFFFFEB 		bl	puts		@
 2593              	.LVL154:
 539:armwave.c     ****     }
 2594              		.loc 1 539 9 is_stmt 1 view .LVU661
 2595              	.LBB35:
 2596              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2597              		.loc 2 456 20 view .LVU662
 2598              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2599              		.loc 2 458 21 view .LVU663
 2600              		.loc 2 459 5 view .LVU664
 2601              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2602              		.loc 2 459 18 is_stmt 0 view .LVU665
 2603 0bc4 1C309FE5 		ldr	r3, .L146+8	@ tmp120,
 2604              	.LBE36:
 2605              	.LBE35:
 2606              	@ armwave.c:539:         Py_RETURN_FALSE;
 539:armwave.c     ****     }
 2607              		.loc 1 539 9 view .LVU666
 2608 0bc8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2609              	.LBB38:
 2610              	.LBB37:
 2611              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2612              		.loc 2 459 18 view .LVU667
 2613 0bcc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2614 0bd0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2615 0bd4 002083E5 		str	r2, [r3]	@ tmp122,
 2616              	.LBE37:
 2617              	.LBE38:
 2618              	@ armwave.c:551: }
 2619              		.loc 1 551 1 view .LVU668
 2620 0bd8 34D08DE2 		add	sp, sp, #52	@,,
 2621              		.cfi_def_cfa_offset 4
 2622              		@ sp needed	@
 2623 0bdc 04F09DE4 		ldr	pc, [sp], #4	@
 2624              	.L147:
 2625              		.align	2
 2626              	.L146:
 2627 0be0 00000000 		.word	_Py_TrueStruct
 2628 0be4 3C020000 		.word	.LC19
 2629 0be8 00000000 		.word	_Py_FalseStruct
 2630              		.cfi_endproc
 2631              	.LFE74:
 2633              		.align	2
 2634              		.global	armwave_test_create_am_sine
 2635              		.syntax unified
 2636              		.arm
 2637              		.fpu vfp
 2639              	armwave_test_create_am_sine:
 2640              	.LVL155:
 2641              	.LFB75:
 552:armwave.c     **** 
 553:armwave.c     **** /*
 554:armwave.c     ****  * Make a test AM waveform for render tests.
 555:armwave.c     ****  *
 556:armwave.c     ****  * @param   mod                     modulation depth
 557:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 558:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 559:armwave.c     ****  */
 560:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 561:armwave.c     **** {
 2642              		.loc 1 561 1 is_stmt 1 view -0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 8
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 562:armwave.c     ****     float v, noise, xnoise, mod_val;
 2646              		.loc 1 562 5 view .LVU670
 563:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2647              		.loc 1 563 5 view .LVU671
 2648              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2649              		.loc 1 561 1 is_stmt 0 view .LVU672
 2650 0bec F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2651              		.cfi_def_cfa_offset 32
 2652              		.cfi_offset 4, -32
 2653              		.cfi_offset 5, -28
 2654              		.cfi_offset 6, -24
 2655              		.cfi_offset 7, -20
 2656              		.cfi_offset 8, -16
 2657              		.cfi_offset 9, -12
 2658              		.cfi_offset 10, -8
 2659              		.cfi_offset 14, -4
 2660              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2661              		.loc 1 563 38 view .LVU673
 2662 0bf0 7A7A9FED 		vldr.32	s14, .L179	@ tmp180,
 2663              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2664              		.loc 1 563 55 view .LVU674
 2665 0bf4 00529FE5 		ldr	r5, .L179+28	@ tmp250,
 2666              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2667              		.loc 1 561 1 view .LVU675
 2668 0bf8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2669              		.cfi_def_cfa_offset 80
 2670              		.cfi_offset 80, -80
 2671              		.cfi_offset 81, -76
 2672              		.cfi_offset 82, -72
 2673              		.cfi_offset 83, -68
 2674              		.cfi_offset 84, -64
 2675              		.cfi_offset 85, -60
 2676              		.cfi_offset 86, -56
 2677              		.cfi_offset 87, -52
 2678              		.cfi_offset 88, -48
 2679              		.cfi_offset 89, -44
 2680              		.cfi_offset 90, -40
 2681              		.cfi_offset 91, -36
 2682 0bfc 0090A0E1 		mov	r9, r0	@ sets, sets
 2683              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2684              		.loc 1 563 38 view .LVU676
 2685 0c00 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2686              	@ armwave.c:567:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 564:armwave.c     ****     int s, set_offset = 0;
 565:armwave.c     ****     int w, x;
 566:armwave.c     **** 
 567:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2687              		.loc 1 567 70 view .LVU677
 2688 0c04 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2689 0c08 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2690              	.LBB41:
 2691              	.LBB42:
 2692              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2693              		.loc 1 510 23 view .LVU678
 2694 0c0c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2695              	.LVL156:
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2696              		.loc 1 510 23 view .LVU679
 2697              	.LBE42:
 2698              	.LBE41:
 2699              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 563:armwave.c     ****     int s, set_offset = 0;
 2700              		.loc 1 563 38 view .LVU680
 2701 0c10 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2702              	@ armwave.c:567:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2703              		.loc 1 567 70 view .LVU681
 2704 0c14 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2705              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2706              		.loc 1 561 1 view .LVU682
 2707 0c18 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2708              	.LBB46:
 2709              	.LBB43:
 2710              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2711              		.loc 1 510 7 view .LVU683
 2712 0c1c 000050E3 		cmp	r0, #0	@ _82,
 2713              	.LBE43:
 2714              	.LBE46:
 2715              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2716              		.loc 1 561 1 view .LVU684
 2717 0c20 08D04DE2 		sub	sp, sp, #8	@,,
 2718              		.cfi_def_cfa_offset 88
 2719              	@ armwave.c:568:     g_armwave_state.test_wave_buffer_nsets = sets;
 568:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2720              		.loc 1 568 44 view .LVU685
 2721 0c24 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2722              	@ armwave.c:567:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 567:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2723              		.loc 1 567 45 view .LVU686
 2724 0c28 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2725              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 563:armwave.c     ****     int s, set_offset = 0;
 2726              		.loc 1 563 38 view .LVU687
 2727 0c2c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2728              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 563:armwave.c     ****     int s, set_offset = 0;
 2729              		.loc 1 563 11 view .LVU688
 2730 0c30 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2731              	.LVL157:
 564:armwave.c     ****     int w, x;
 2732              		.loc 1 564 5 is_stmt 1 view .LVU689
 565:armwave.c     **** 
 2733              		.loc 1 565 5 view .LVU690
 567:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2734              		.loc 1 567 5 view .LVU691
 2735              		.loc 1 568 5 view .LVU692
 569:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2736              		.loc 1 569 5 view .LVU693
 2737              	.LBB47:
 2738              	.LBI41:
 508:armwave.c     **** {
 2739              		.loc 1 508 6 view .LVU694
 2740              	.LBB44:
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2741              		.loc 1 510 5 view .LVU695
 2742              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2743              		.loc 1 510 7 is_stmt 0 view .LVU696
 2744 0c34 0000000A 		beq	.L149		@,
 511:armwave.c     ****     }
 2745              		.loc 1 511 9 is_stmt 1 view .LVU697
 2746 0c38 FEFFFFEB 		bl	free		@
 2747              	.LVL158:
 2748              	.L149:
 516:armwave.c     **** 
 2749              		.loc 1 516 5 view .LVU698
 2750              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2751              		.loc 1 516 75 is_stmt 0 view .LVU699
 2752 0c3c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2753 0c40 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2754              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2755              		.loc 1 516 40 view .LVU700
 2756 0c44 0910A0E1 		mov	r1, r9	@, sets
 2757              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2758              		.loc 1 516 75 view .LVU701
 2759 0c48 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2760              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2761              		.loc 1 516 40 view .LVU702
 2762 0c4c 0400A0E1 		mov	r0, r4	@, _85
 2763 0c50 FEFFFFEB 		bl	calloc		@
 2764              	.LVL159:
 2765              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2766              		.loc 1 518 7 view .LVU703
 2767 0c54 000050E3 		cmp	r0, #0	@ tmp191,
 2768              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2769              		.loc 1 516 38 view .LVU704
 2770 0c58 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2771              		.loc 1 518 5 is_stmt 1 view .LVU705
 2772              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2773              		.loc 1 518 7 is_stmt 0 view .LVU706
 2774 0c5c 5A00000A 		beq	.L178		@,
 2775              	.L150:
 2776              	.LVL160:
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2777              		.loc 1 518 7 view .LVU707
 2778              	.LBE44:
 2779              	.LBE47:
 2780              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 570:armwave.c     **** 
 571:armwave.c     ****     for(s = 0; s < sets; s++) {
 2781              		.loc 1 571 5 discriminator 1 view .LVU708
 2782 0c60 000059E3 		cmp	r9, #0	@ sets,
 2783 0c64 550000DA 		ble	.L148		@,
 2784              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 573:armwave.c     ****     
 574:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 576:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 577:armwave.c     **** 
 578:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 580:armwave.c     ****                 noise *= noise;
 581:armwave.c     ****                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 583:armwave.c     **** 
 584:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 585:armwave.c     ****                     noise = -noise;
 586:armwave.c     **** 
 587:armwave.c     ****                 noise += 1.0f;
 588:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 590:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2785              		.loc 1 590 45 view .LVU709
 2786 0c68 5C8A9FED 		vldr.32	s16, .L179	@ tmp258,
 2787              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 592:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 593:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2788              		.loc 1 593 104 view .LVU710
 2789 0c6c 5CCA9FED 		vldr.32	s24, .L179+4	@ tmp259,
 2790              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 2791              		.loc 1 571 5 view .LVU711
 2792 0c70 0070A0E3 		mov	r7, #0	@ set_offset,
 2793              	@ armwave.c:572:         printf("Calculating test set %d\n", s);
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 2794              		.loc 1 572 9 view .LVU712
 2795 0c74 84A19FE5 		ldr	r10, .L179+32	@ tmp257,
 2796              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 2797              		.loc 1 571 5 view .LVU713
 2798 0c78 0780A0E1 		mov	r8, r7	@ s, set_offset
 2799              	.LVL161:
 2800              	.L151:
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 2801              		.loc 1 572 9 is_stmt 1 view .LVU714
 2802 0c7c 0810A0E1 		mov	r1, r8	@, s
 2803 0c80 0A00A0E1 		mov	r0, r10	@, tmp257
 2804 0c84 FEFFFFEB 		bl	printf		@
 2805              	.LVL162:
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2806              		.loc 1 574 9 view .LVU715
 2807              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2808              		.loc 1 574 39 is_stmt 0 view .LVU716
 2809 0c88 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2810              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2811              		.loc 1 574 9 view .LVU717
 2812 0c8c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2813 0c90 450000DA 		ble	.L152		@,
 2814              	@ armwave.c:576:             mod_val = 0.5f + (_1_waves_mod * w);
 576:armwave.c     **** 
 2815              		.loc 1 576 21 view .LVU718
 2816 0c94 53CADFED 		vldr.32	s25, .L179+8	@ tmp200,
 2817              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2818              		.loc 1 590 33 view .LVU719
 2819 0c98 53BA9FED 		vldr.32	s22, .L179+12	@ tmp253,
 2820              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2821              		.loc 1 588 24 view .LVU720
 2822 0c9c 53AADFED 		vldr.32	s21, .L179+16	@ tmp254,
 2823 0ca0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2824              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2825              		.loc 1 574 15 view .LVU721
 2826 0ca4 0060A0E3 		mov	r6, #0	@ w,
 2827              	.LVL163:
 2828              	.L159:
 576:armwave.c     **** 
 2829              		.loc 1 576 13 is_stmt 1 view .LVU722
 2830              	@ armwave.c:576:             mod_val = 0.5f + (_1_waves_mod * w);
 576:armwave.c     **** 
 2831              		.loc 1 576 21 is_stmt 0 view .LVU723
 2832 0ca8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2833 0cac 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2834              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2835              		.loc 1 578 13 view .LVU724
 2836 0cb0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2837              	@ armwave.c:576:             mod_val = 0.5f + (_1_waves_mod * w);
 576:armwave.c     **** 
 2838              		.loc 1 576 21 view .LVU725
 2839 0cb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2840 0cb8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2841              	.LVL164:
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2842              		.loc 1 578 13 is_stmt 1 view .LVU726
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2843              		.loc 1 578 13 is_stmt 0 view .LVU727
 2844 0cbc 370000DA 		ble	.L153		@,
 2845 0cc0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2846              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2847              		.loc 1 593 113 view .LVU728
 2848 0cc4 4AAA9FED 		vldr.32	s20, .L179+20	@ tmp229,
 2849 0cc8 4A8ADFED 		vldr.32	s17, .L179+24	@ tmp230,
 2850              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2851              		.loc 1 578 19 view .LVU729
 2852 0ccc 0040A0E3 		mov	r4, #0	@ x,
 2853              	.LVL165:
 2854              	.L158:
 579:armwave.c     ****                 noise *= noise;
 2855              		.loc 1 579 17 is_stmt 1 view .LVU730
 2856              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2857              		.loc 1 579 28 is_stmt 0 view .LVU731
 2858 0cd0 FEFFFFEB 		bl	rand		@
 2859              	.LVL166:
 2860              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2861              		.loc 1 579 35 view .LVU732
 2862 0cd4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2863              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2864              		.loc 1 579 45 view .LVU733
 2865 0cd8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2866 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2867              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2868              		.loc 1 579 24 view .LVU734
 2869 0ce0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2870              	.LVL167:
 580:armwave.c     ****                 noise *= noise;
 2871              		.loc 1 580 17 is_stmt 1 view .LVU735
 2872              	@ armwave.c:580:                 noise *= noise;
 580:armwave.c     ****                 noise *= noise;
 2873              		.loc 1 580 23 is_stmt 0 view .LVU736
 2874 0ce4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2875              	.LVL168:
 581:armwave.c     ****                 noise *= noise;
 2876              		.loc 1 581 17 is_stmt 1 view .LVU737
 2877              	@ armwave.c:581:                 noise *= noise;
 581:armwave.c     ****                 noise *= noise;
 2878              		.loc 1 581 23 is_stmt 0 view .LVU738
 2879 0ce8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2880              	.LVL169:
 582:armwave.c     **** 
 2881              		.loc 1 582 17 is_stmt 1 view .LVU739
 2882              	@ armwave.c:582:                 noise *= noise;
 582:armwave.c     **** 
 2883              		.loc 1 582 23 is_stmt 0 view .LVU740
 2884 0cec A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2885              	.LVL170:
 584:armwave.c     ****                     noise = -noise;
 2886              		.loc 1 584 17 is_stmt 1 view .LVU741
 2887              	@ armwave.c:584:                 if((rand() & 0xffff) > 0x7fff)
 584:armwave.c     ****                     noise = -noise;
 2888              		.loc 1 584 21 is_stmt 0 view .LVU742
 2889 0cf0 FEFFFFEB 		bl	rand		@
 2890              	.LVL171:
 585:armwave.c     **** 
 2891              		.loc 1 585 21 is_stmt 1 view .LVU743
 2892              	@ armwave.c:584:                 if((rand() & 0xffff) > 0x7fff)
 584:armwave.c     ****                     noise = -noise;
 2893              		.loc 1 584 19 is_stmt 0 view .LVU744
 2894 0cf4 020910E3 		tst	r0, #32768	@,
 2895              	@ armwave.c:585:                     noise = -noise;
 585:armwave.c     **** 
 2896              		.loc 1 585 27 view .LVU745
 2897 0cf8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2898              	.LVL172:
 587:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2899              		.loc 1 587 17 is_stmt 1 view .LVU746
 588:armwave.c     **** 
 2900              		.loc 1 588 17 view .LVU747
 2901              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2902              		.loc 1 588 27 is_stmt 0 view .LVU748
 2903 0cfc FEFFFFEB 		bl	rand		@
 2904              	.LVL173:
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2905              		.loc 1 590 17 is_stmt 1 view .LVU749
 2906              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2907              		.loc 1 590 45 is_stmt 0 view .LVU750
 2908 0d00 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2909              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2910              		.loc 1 590 33 view .LVU751
 2911 0d04 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2912              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2913              		.loc 1 590 45 view .LVU752
 2914 0d08 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2915              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2916              		.loc 1 590 33 view .LVU753
 2917 0d0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2918              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2919              		.loc 1 590 45 view .LVU754
 2920 0d10 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2921              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2922              		.loc 1 590 33 view .LVU755
 2923 0d14 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2924              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2925              		.loc 1 588 34 view .LVU756
 2926 0d18 7000FFE6 		uxth	r0, r0	@ tmp214,
 2927              	.LVL174:
 2928              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2929              		.loc 1 588 44 view .LVU757
 2930 0d1c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2931 0d20 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2932              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2933              		.loc 1 588 24 view .LVU758
 2934 0d24 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2935              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2936              		.loc 1 590 77 view .LVU759
 2937 0d28 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2938              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2939              		.loc 1 590 22 view .LVU760
 2940 0d2c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2941 0d30 FEFFFFEB 		bl	sin		@
 2942              	.LVL175:
 2943              		.loc 1 593 17 is_stmt 1 view .LVU761
 2944              	@ armwave.c:587:                 noise += 1.0f;
 587:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2945              		.loc 1 587 23 is_stmt 0 view .LVU762
 2946 0d34 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2947              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2948              		.loc 1 593 104 view .LVU763
 2949 0d38 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2950              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2951              		.loc 1 590 98 view .LVU764
 2952 0d3c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2953              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2954              		.loc 1 590 87 view .LVU765
 2955 0d40 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2956              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2957              		.loc 1 590 98 view .LVU766
 2958 0d44 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2959              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2960              		.loc 1 590 19 view .LVU767
 2961 0d48 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2962              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2963              		.loc 1 593 113 view .LVU768
 2964 0d4c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2965 0d50 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2966 0d54 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2967 0d58 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2968 0d5c 050000DA 		ble	.L155		@,
 2969              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2970              		.loc 1 593 104 discriminator 1 view .LVU769
 2971 0d60 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2972 0d64 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2973 0d68 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2974 0d6c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2975 0d70 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2976 0d74 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2977              	.L155:
 2978              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2979              		.loc 1 593 57 discriminator 12 view .LVU770
 2980 0d78 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2981              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2982              		.loc 1 593 102 discriminator 12 view .LVU771
 2983 0d7c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2984 0d80 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2985 0d84 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2986              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2987              		.loc 1 578 58 discriminator 12 view .LVU772
 2988 0d88 014084E2 		add	r4, r4, #1	@ x, x,
 2989              	.LVL176:
 2990              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2991              		.loc 1 593 102 discriminator 12 view .LVU773
 2992 0d8c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2993              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2994              		.loc 1 578 43 discriminator 12 view .LVU774
 2995 0d90 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2996              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2997              		.loc 1 578 13 discriminator 12 view .LVU775
 2998 0d94 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2999 0d98 CCFFFFCA 		bgt	.L158		@,
 3000 0d9c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3001              	.LVL177:
 3002              	.L153:
 3003              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3004              		.loc 1 574 48 discriminator 2 view .LVU776
 3005 0da0 016086E2 		add	r6, r6, #1	@ w, w,
 3006              	.LVL178:
 3007              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3008              		.loc 1 574 9 discriminator 2 view .LVU777
 3009 0da4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3010 0da8 BEFFFFBA 		blt	.L159		@,
 3011              	.LVL179:
 3012              	.L152:
 594:armwave.c     ****             }
 595:armwave.c     ****         }
 596:armwave.c     **** 
 597:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3013              		.loc 1 597 9 is_stmt 1 discriminator 2 view .LVU778
 3014              	@ armwave.c:597:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3015              		.loc 1 597 46 is_stmt 0 discriminator 2 view .LVU779
 3016 0dac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3017              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 3018              		.loc 1 571 27 discriminator 2 view .LVU780
 3019 0db0 018088E2 		add	r8, r8, #1	@ s, s,
 3020              	.LVL180:
 3021              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 3022              		.loc 1 571 5 discriminator 2 view .LVU781
 3023 0db4 080059E1 		cmp	r9, r8	@ sets, s
 3024              	@ armwave.c:597:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3025              		.loc 1 597 20 discriminator 2 view .LVU782
 3026 0db8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3027              	.LVL181:
 3028              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 3029              		.loc 1 571 5 discriminator 2 view .LVU783
 3030 0dbc AEFFFF1A 		bne	.L151		@,
 3031              	.LVL182:
 3032              	.L148:
 3033              	@ armwave.c:599: }
 598:armwave.c     ****     }
 599:armwave.c     **** }
 3034              		.loc 1 599 1 view .LVU784
 3035 0dc0 08D08DE2 		add	sp, sp, #8	@,,
 3036              		.cfi_remember_state
 3037              		.cfi_def_cfa_offset 80
 3038              		@ sp needed	@
 3039 0dc4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3040              		.cfi_restore 90
 3041              		.cfi_restore 91
 3042              		.cfi_restore 88
 3043              		.cfi_restore 89
 3044              		.cfi_restore 86
 3045              		.cfi_restore 87
 3046              		.cfi_restore 84
 3047              		.cfi_restore 85
 3048              		.cfi_restore 82
 3049              		.cfi_restore 83
 3050              		.cfi_restore 80
 3051              		.cfi_restore 81
 3052              		.cfi_def_cfa_offset 32
 3053              	.LVL183:
 3054              		.loc 1 599 1 view .LVU785
 3055 0dc8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3056              	.LVL184:
 3057              	.L178:
 3058              		.cfi_restore_state
 3059              	.LBB48:
 3060              	.LBB45:
 519:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3061              		.loc 1 519 9 is_stmt 1 view .LVU786
 3062 0dcc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3063 0dd0 0920A0E1 		mov	r2, r9	@, sets
 3064 0dd4 28009FE5 		ldr	r0, .L179+36	@,
 3065 0dd8 FEFFFFEB 		bl	printf		@
 3066              	.LVL185:
 521:armwave.c     ****     }
 3067              		.loc 1 521 9 view .LVU787
 3068 0ddc 9FFFFFEA 		b	.L150		@
 3069              	.L180:
 3070              		.align	2
 3071              	.L179:
 3072 0de0 0000803F 		.word	1065353216
 3073 0de4 00007F43 		.word	1132396544
 3074 0de8 0000003F 		.word	1056964608
 3075 0dec C3F5C840 		.word	1086911939
 3076 0df0 38FFC74A 		.word	1254620984
 3077 0df4 0000FE42 		.word	1123942400
 3078 0df8 00000043 		.word	1124073472
 3079 0dfc 00000000 		.word	g_armwave_state
 3080 0e00 90020000 		.word	.LC20
 3081 0e04 E8010000 		.word	.LC18
 3082              	.LBE45:
 3083              	.LBE48:
 3084              		.cfi_endproc
 3085              	.LFE75:
 3087              		.align	2
 3088              		.global	armwave_cleanup
 3089              		.syntax unified
 3090              		.arm
 3091              		.fpu vfp
 3093              	armwave_cleanup:
 3094              	.LFB76:
 600:armwave.c     **** 
 601:armwave.c     **** /*
 602:armwave.c     ****  * Make a test square waveform.
 603:armwave.c     ****  *
 604:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 605:armwave.c     ****  */
 606:armwave.c     **** #if 0
 607:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 608:armwave.c     **** {
 609:armwave.c     ****     uint8_t v;
 610:armwave.c     ****     float noise, xnoise;
 611:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 612:armwave.c     ****     int w, x;
 613:armwave.c     **** 
 614:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 615:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 616:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 617:armwave.c     ****             noise *= noise;
 618:armwave.c     ****             noise *= noise;
 619:armwave.c     ****             noise *= noise;
 620:armwave.c     **** 
 621:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 622:armwave.c     ****                 noise = -noise;
 623:armwave.c     **** 
 624:armwave.c     ****             //noise += 1.0f;
 625:armwave.c     **** 
 626:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 627:armwave.c     ****                 new_level = 0.2f;
 628:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 629:armwave.c     ****                 new_level = 0.8f;
 630:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 631:armwave.c     ****                 new_level = 0.2f;
 632:armwave.c     ****             } else {
 633:armwave.c     ****                 new_level = 0.8f;
 634:armwave.c     ****             }
 635:armwave.c     **** 
 636:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 637:armwave.c     **** 
 638:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 639:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 640:armwave.c     ****         }
 641:armwave.c     ****     }
 642:armwave.c     **** }
 643:armwave.c     **** #endif
 644:armwave.c     **** 
 645:armwave.c     **** /*
 646:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 647:armwave.c     ****  */
 648:armwave.c     **** void armwave_cleanup()
 649:armwave.c     **** {
 3095              		.loc 1 649 1 view -0
 3096              		.cfi_startproc
 3097              		@ args = 0, pretend = 0, frame = 0
 3098              		@ frame_needed = 0, uses_anonymous_args = 0
 650:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3099              		.loc 1 650 5 view .LVU789
 3100              	@ armwave.c:649: {
 649:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3101              		.loc 1 649 1 is_stmt 0 view .LVU790
 3102 0e08 10402DE9 		push	{r4, lr}	@
 3103              		.cfi_def_cfa_offset 8
 3104              		.cfi_offset 4, -8
 3105              		.cfi_offset 14, -4
 3106              	@ armwave.c:650:     free(g_armwave_state.out_pixbuf);
 3107              		.loc 1 650 25 view .LVU791
 3108 0e0c 34409FE5 		ldr	r4, .L183	@ tmp114,
 3109              	@ armwave.c:650:     free(g_armwave_state.out_pixbuf);
 3110              		.loc 1 650 5 view .LVU792
 3111 0e10 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3112 0e14 FEFFFFEB 		bl	free		@
 3113              	.LVL186:
 651:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3114              		.loc 1 651 5 is_stmt 1 view .LVU793
 3115 0e18 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3116 0e1c FEFFFFEB 		bl	free		@
 3117              	.LVL187:
 652:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3118              		.loc 1 652 5 view .LVU794
 3119 0e20 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3120 0e24 FEFFFFEB 		bl	free		@
 3121              	.LVL188:
 653:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3122              		.loc 1 653 5 view .LVU795
 3123 0e28 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3124 0e2c FEFFFFEB 		bl	free		@
 3125              	.LVL189:
 654:armwave.c     **** 
 655:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3126              		.loc 1 655 5 view .LVU796
 3127              	@ armwave.c:655:     g_armwave_state.out_pixbuf = NULL;
 3128              		.loc 1 655 32 is_stmt 0 view .LVU797
 3129 0e30 0030A0E3 		mov	r3, #0	@ tmp123,
 3130 0e34 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 656:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3131              		.loc 1 656 5 is_stmt 1 view .LVU798
 3132              	@ armwave.c:656:     g_armwave_state.ch1_buffer = NULL;
 3133              		.loc 1 656 32 is_stmt 0 view .LVU799
 3134 0e38 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 657:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3135              		.loc 1 657 5 is_stmt 1 view .LVU800
 3136              	@ armwave.c:657:     g_armwave_state.xcoord_to_xpixel = NULL;
 3137              		.loc 1 657 38 is_stmt 0 view .LVU801
 3138 0e3c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 658:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3139              		.loc 1 658 5 is_stmt 1 view .LVU802
 3140              	@ armwave.c:658:     g_armwave_state.test_wave_buffer = NULL;
 3141              		.loc 1 658 38 is_stmt 0 view .LVU803
 3142 0e40 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3143              	@ armwave.c:659: }
 659:armwave.c     **** }
 3144              		.loc 1 659 1 view .LVU804
 3145 0e44 1080BDE8 		pop	{r4, pc}	@
 3146              	.L184:
 3147              		.align	2
 3148              	.L183:
 3149 0e48 00000000 		.word	g_armwave_state
 3150              		.cfi_endproc
 3151              	.LFE76:
 3153              		.comm	gamma_table,256,4
 3154              		.comm	g_armwave_state,136,4
 3155              		.section	.rodata
 3156              		.align	2
 3157              		.set	.LANCHOR0,. + 0
 3160              	__PRETTY_FUNCTION__.17096:
 3161 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3161      6176655F 
 3161      66696C6C 
 3161      5F706978 
 3161      6275665F 
 3162 001b 00       		.space	1
 3165              	__PRETTY_FUNCTION__.17123:
 3166 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3166      6176655F 
 3166      73657475 
 3166      705F7265 
 3166      6E646572 
 3167 0031 000000   		.space	3
 3170              	__PRETTY_FUNCTION__.17130:
 3171 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3171      6176655F 
 3171      7365745F 
 3171      77617665 
 3171      5F706F69 
 3172 004d 000000   		.space	3
 3175              	__PRETTY_FUNCTION__.17137:
 3176 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3176      6176655F 
 3176      7365745F 
 3176      77617665 
 3176      5F706F69 
 3177              		.section	.rodata.str1.4,"aMS",%progbits,1
 3178              		.align	2
 3179              	.LC0:
 3180 0000 76302E30 		.ascii	"v0.0.1\000"
 3180      2E3100
 3181 0007 00       		.space	1
 3182              	.LC1:
 3183 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3183      61766520 
 3183      76657273 
 3183      696F6E3A 
 3183      2025730A 
 3184 001d 000000   		.space	3
 3185              	.LC2:
 3186 0020 61726D77 		.ascii	"armwave.c\000"
 3186      6176652E 
 3186      6300
 3187 002a 0000     		.space	2
 3188              	.LC3:
 3189 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3189      62756666 
 3189      65722021 
 3189      3D204E55 
 3189      4C4C00
 3190 003f 00       		.space	1
 3191              	.LC4:
 3192 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3192      20653D25 
 3192      6420773D 
 3192      25642077 
 3192      733D2564 
 3193              	.LC5:
 3194 006c 73746172 		.ascii	"start_point < end_point\000"
 3194      745F706F 
 3194      696E7420 
 3194      3C20656E 
 3194      645F706F 
 3195              	.LC6:
 3196 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3196      7566665F 
 3196      73697A65 
 3196      3D25642C 
 3196      20636D70 
 3197 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3197      5F776964 
 3197      74683D25 
 3197      642C2077 
 3197      6176655F 
 3198 00e1 000000   		.space	3
 3199              	.LC7:
 3200 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3200      6D776176 
 3200      655F7374 
 3200      6174652E 
 3200      6368315F 
 3201 0107 00       		.space	1
 3202              	.LC8:
 3203 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3203      6D776176 
 3203      655F7374 
 3203      6174652E 
 3203      78636F6F 
 3204 0131 000000   		.space	3
 3205              	.LC9:
 3206 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3206      3A203078 
 3206      25303878 
 3206      20307825 
 3206      30387820 
 3207              	.LC10:
 3208 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3208      5F627566 
 3208      66657220 
 3208      213D204E 
 3208      554C4C00 
 3209              	.LC11:
 3210 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3210      6176655F 
 3210      7365745F 
 3210      77617665 
 3210      5F706F69 
 3211 019f 78636565 		.ascii	"xceeded\000"
 3211      64656400 
 3212 01a7 00       		.space	1
 3213              	.LC12:
 3214 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3214      5F627566 
 3214      6665725F 
 3214      70747220 
 3214      213D2030 
 3215 01bd 000000   		.space	3
 3216              	.LC13:
 3217 01c0 776200   		.ascii	"wb\000"
 3218 01c3 00       		.space	1
 3219              	.LC14:
 3220 01c4 50330A00 		.ascii	"P3\012\000"
 3221              	.LC15:
 3222 01c8 25642025 		.ascii	"%d %d\012\000"
 3222      640A00
 3223 01cf 00       		.space	1
 3224              	.LC16:
 3225 01d0 3235350A 		.ascii	"255\012\000"
 3225      00
 3226 01d5 000000   		.space	3
 3227              	.LC17:
 3228 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3228      25336420 
 3228      2533640A 
 3228      00
 3229 01e5 000000   		.space	3
 3230              	.LC18:
 3231 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3231      6176655F 
 3231      74657374 
 3231      5F627566 
 3231      6665725F 
 3232 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3232      20627566 
 3232      66657220 
 3232      28256420 
 3232      62797465 
 3233              	.LC19:
 3234 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3234      6176655F 
 3234      66696C6C 
 3234      5F706978 
 3234      6275665F 
 3235 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3235      20666169 
 3235      6C65642C 
 3235      20726574 
 3235      75726E69 
 3236 028e 0000     		.space	2
 3237              	.LC20:
 3238 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3238      756C6174 
 3238      696E6720 
 3238      74657374 
 3238      20736574 
 3239              		.text
 3240              	.Letext0:
 3241              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3242              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3243              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3244              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3245              		.file 7 "/usr/include/stdio.h"
 3246              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3247              		.file 9 "/usr/include/errno.h"
 3248              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3249              		.file 11 "/usr/include/unistd.h"
 3250              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3251              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3252              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3253              		.file 15 "/usr/include/math.h"
 3254              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3255              		.file 17 "/usr/include/time.h"
 3256              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3257              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3258              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3259              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3260              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3261              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3262              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3263              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3264              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3265              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3266              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3267              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3268              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3269              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3270              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3271              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3272              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3273              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3274              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3275              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3276              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3277              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3278              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3279              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3280              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3281              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3282              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3283              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3284              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3285              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3286              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3287              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3288              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3289              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3290              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3291              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3292              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3293              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3294              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3295              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3296              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3297              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3298              		.file 60 "/usr/local/include/python3.8/context.h"
 3299              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3300              		.file 62 "/usr/local/include/python3.8/code.h"
 3301              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3302              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3303              		.file 65 "/usr/local/include/python3.8/import.h"
 3304              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3305              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3306              		.file 68 "/usr/include/malloc.h"
 3307              		.file 69 "armwave.h"
 3308              		.file 70 "/usr/include/stdlib.h"
 3309              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3310              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3311              		.file 73 "<built-in>"
 3312              		.file 74 "/usr/include/assert.h"
