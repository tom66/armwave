   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 24D04DE2 		sub	sp, sp, #36	@,,
 249              		.cfi_def_cfa_offset 72
 250              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 251              		.loc 1 71 40 view .LVU32
 252 00a4 80719FE5 		ldr	r7, .L22	@ tmp255,
 253              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 254              		.loc 1 63 1 view .LVU33
 255 00a8 00A0A0E1 		mov	r10, r0	@ slice_y, slice_y
 256 00ac 1C108DE5 		str	r1, [sp, #28]	@ height, %sfp
 257 00b0 0100A0E1 		mov	r0, r1	@ height, height
 258              	.LVL7:
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU34
 261 00b4 241097E5 		ldr	r1, [r7, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL8:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU35
 265 00b8 403097E5 		ldr	r3, [r7, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU36
 268 00bc 045097E5 		ldr	r5, [r7, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU37
 271 00c0 9A0102E0 		mul	r2, r10, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU38
 274 00c4 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c8 08008DE5 		str	r0, [sp, #8]	@ height,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU39
 278 00cc 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU40
 281 00d0 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU41
 284 00d4 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU42
 287 00d8 0530A0E1 		mov	r3, r5	@, _1
 288 00dc 04A08DE5 		str	r10, [sp, #4]	@ slice_y,
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 52 view .LVU43
 291 00e0 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 292              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 293              		.loc 1 71 23 view .LVU44
 294 00e4 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _8
 295              	.LVL9:
 296              		.loc 1 73 5 is_stmt 1 view .LVU45
 297 00e8 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 298 00ec 00208DE5 		str	r2, [sp]	@ tmp204,
 299 00f0 141097E5 		ldr	r1, [r7, #20]	@, g_armwave_state.wave_buffer
 300 00f4 0520A0E1 		mov	r2, r5	@, write_buffer_base
 301 00f8 30019FE5 		ldr	r0, .L22+4	@,
 302              	.LVL10:
 303              		.loc 1 73 5 is_stmt 0 view .LVU46
 304 00fc FEFFFFEB 		bl	printf		@
 305              	.LVL11:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 5 is_stmt 1 view .LVU47
 307              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 308              		.loc 1 79 35 is_stmt 0 view .LVU48
 309 0100 383097E5 		ldr	r3, [r7, #56]	@ prephitmp_44, g_armwave_state.waves
 310              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 311              		.loc 1 79 5 view .LVU49
 312 0104 000053E3 		cmp	r3, #0	@ prephitmp_44,
 313 0108 410000DA 		ble	.L12		@,
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 11 view .LVU50
 316 010c 0090A0E3 		mov	r9, #0	@ w,
 317 0110 0BE0A0E1 		mov	lr, fp	@ write_buffer, write_buffer
 318              	.LVL12:
 319              	.L16:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 320              		.loc 1 80 9 is_stmt 1 view .LVU51
 321              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 322              		.loc 1 80 81 is_stmt 0 view .LVU52
 323 0114 342097E5 		ldr	r2, [r7, #52]	@ prephitmp_146, g_armwave_state.wave_stride
 324              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 325              		.loc 1 84 9 view .LVU53
 326 0118 1C109DE5 		ldr	r1, [sp, #28]	@ height, %sfp
 327              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 328              		.loc 1 80 19 view .LVU54
 329 011c 148097E5 		ldr	r8, [r7, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 330              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 331              		.loc 1 84 9 view .LVU55
 332 0120 000051E3 		cmp	r1, #0	@ height,
 333              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 334              		.loc 1 80 59 view .LVU56
 335 0124 99A221E0 		mla	r1, r9, r2, r10	@ tmp209, w, prephitmp_146, slice_y
 336              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 337              		.loc 1 80 19 view .LVU57
 338 0128 018088E0 		add	r8, r8, r1	@ wave_base, g_armwave_state.wave_buffer, tmp209
 339              	.LVL13:
 340              		.loc 1 84 9 is_stmt 1 view .LVU58
 341              		.loc 1 84 9 is_stmt 0 view .LVU59
 342 012c 3400000A 		beq	.L13		@,
 343              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 344              		.loc 1 84 16 view .LVU60
 345 0130 0060A0E3 		mov	r6, #0	@ yy,
 346 0134 000000EA 		b	.L15		@
 347              	.LVL14:
 348              	.L14:
 349              		.loc 1 84 16 view .LVU61
 350 0138 342097E5 		ldr	r2, [r7, #52]	@ prephitmp_146, g_armwave_state.wave_stride
 351              	.LVL15:
 352              	.L15:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 353              		.loc 1 85 13 is_stmt 1 view .LVU62
 354              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
 355              		.loc 1 85 18 is_stmt 0 view .LVU63
 356 013c 064098E7 		ldr	r4, [r8, r6]	@ word, MEM[base: wave_base_59, index: _183, offset: 0B]
 357              	.LVL16:
  86:armwave.c     **** 
  87:armwave.c     ****             printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_state
 358              		.loc 1 87 13 is_stmt 1 view .LVU64
 359 0140 0A30A0E1 		mov	r3, r10	@, slice_y
 360 0144 08408DE5 		str	r4, [sp, #8]	@ word,
 361 0148 04608DE5 		str	r6, [sp, #4]	@ yy,
 362 014c 0910A0E1 		mov	r1, r9	@, w
 363 0150 00808DE5 		str	r8, [sp]	@ wave_base,
 364 0154 D8009FE5 		ldr	r0, .L22+8	@,
 365 0158 FEFFFFEB 		bl	printf		@
 366              	.LVL17:
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 367              		.loc 1 89 13 view .LVU65
  90:armwave.c     ****                 scale_value = word & 0xff;
 368              		.loc 1 90 17 view .LVU66
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 369              		.loc 1 102 17 view .LVU67
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 371              		.loc 1 103 51 is_stmt 0 view .LVU68
 372 015c 243097E5 		ldr	r3, [r7, #36]	@ _77, g_armwave_state.cmp_x_bitdepth_scale
 373              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 374              		.loc 1 103 116 view .LVU69
 375 0160 40E097E5 		ldr	lr, [r7, #64]	@ _81, g_armwave_state.bitdepth_height
 376              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 scale_value = word & 0xff;
 377              		.loc 1 90 29 view .LVU70
 378 0164 7410EFE6 		uxtb	r1, r4	@ scale_value, word
 379              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 380              		.loc 1 103 34 view .LVU71
 381 0168 960302E0 		mul	r2, r6, r3	@ _78, yy, _77
 382              	.LVL18:
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 383              		.loc 1 107 17 is_stmt 1 view .LVU72
 384              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 385              		.loc 1 84 9 is_stmt 0 view .LVU73
 386 016c 1CC09DE5 		ldr	ip, [sp, #28]	@ height, %sfp
 387              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 388              		.loc 1 103 34 view .LVU74
 389 0170 020083E0 		add	r0, r3, r2	@ _104, _77, _78
 390              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 391              		.loc 1 103 74 view .LVU75
 392 0174 2228A0E1 		lsr	r2, r2, #16	@ tmp214, _78,
 393              	.LVL19:
 394              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 395              		.loc 1 84 37 view .LVU76
 396 0178 046086E2 		add	r6, r6, #4	@ yy, yy,
 397              	.LVL20:
 398              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 399              		.loc 1 107 47 view .LVU77
 400 017c 9E1222E0 		mla	r2, lr, r2, r1	@ tmp217, _81, tmp214, scale_value
 401              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 402              		.loc 1 84 9 view .LVU78
 403 0180 06005CE1 		cmp	ip, r6	@ height, yy
 404              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 405              		.loc 1 108 22 view .LVU79
 406 0184 24C4A0E1 		lsr	ip, r4, #8	@ word, word,
 407              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 408              		.loc 1 103 74 view .LVU80
 409 0188 20B8A0E1 		lsr	fp, r0, #16	@ tmp222, _104,
 410              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 411              		.loc 1 90 29 view .LVU81
 412 018c 7CC0EFE6 		uxtb	ip, ip	@ scale_value, word
 413              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 414              		.loc 1 107 47 view .LVU82
 415 0190 8220A0E1 		lsl	r2, r2, #1	@ tmp218, tmp217,
 416 0194 9ECB2CE0 		mla	ip, lr, fp, ip	@ tmp226, _81, tmp222, scale_value
 417              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 418              		.loc 1 103 34 view .LVU83
 419 0198 000083E0 		add	r0, r3, r0	@ _130, _77, _104
 420              	@ armwave.c:108:                 word >>= 8;
 421              		.loc 1 108 22 view .LVU84
 422 019c 2418A0E1 		lsr	r1, r4, #16	@ word, word,
 423              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 424              		.loc 1 107 47 view .LVU85
 425 01a0 B2B095E1 		ldrh	fp, [r5, r2]	@ *_87, *_87
 426              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 427              		.loc 1 103 34 view .LVU86
 428 01a4 003083E0 		add	r3, r3, r0	@ tmp240, _77, _130
 429              	.LVL21:
 430              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 431              		.loc 1 103 74 view .LVU87
 432 01a8 2008A0E1 		lsr	r0, r0, #16	@ tmp231, _130,
 433              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 434              		.loc 1 90 29 view .LVU88
 435 01ac 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 436              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 437              		.loc 1 107 47 view .LVU89
 438 01b0 8CC0A0E1 		lsl	ip, ip, #1	@ tmp227, tmp226,
 439 01b4 9E1021E0 		mla	r1, lr, r0, r1	@ tmp235, _81, tmp231, scale_value
 440 01b8 01B08BE2 		add	fp, fp, #1	@ tmp221, *_87,
 441 01bc B2B085E1 		strh	fp, [r5, r2]	@ movhi	@ tmp221, *_87
 442              	.LVL22:
 443              		.loc 1 108 17 is_stmt 1 view .LVU90
  90:armwave.c     ****                 
 444              		.loc 1 90 17 view .LVU91
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 445              		.loc 1 102 17 view .LVU92
 107:armwave.c     ****                 word >>= 8;
 446              		.loc 1 107 17 view .LVU93
 447              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 448              		.loc 1 103 74 is_stmt 0 view .LVU94
 449 01c0 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp240,
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 view .LVU95
 452 01c4 BC2095E1 		ldrh	r2, [r5, ip]	@ *_113, *_113
 453              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 454              		.loc 1 102 50 view .LVU96
 455 01c8 9E030EE0 		mul	lr, lr, r3	@ tmp242, _81, tmp241
 456              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 457              		.loc 1 107 47 view .LVU97
 458 01cc 8110A0E1 		lsl	r1, r1, #1	@ tmp236, tmp235,
 459 01d0 013082E2 		add	r3, r2, #1	@ tmp230, *_113,
 460 01d4 BC3085E1 		strh	r3, [r5, ip]	@ movhi	@ tmp230, *_113
 461              		.loc 1 108 17 is_stmt 1 view .LVU98
 462              	.LVL23:
  90:armwave.c     ****                 
 463              		.loc 1 90 17 view .LVU99
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 464              		.loc 1 102 17 view .LVU100
 107:armwave.c     ****                 word >>= 8;
 465              		.loc 1 107 17 view .LVU101
 466              	@ armwave.c:108:                 word >>= 8;
 467              		.loc 1 108 22 is_stmt 0 view .LVU102
 468 01d8 244CA0E1 		lsr	r4, r4, #24	@ word, word,
 469              	.LVL24:
 470              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 471              		.loc 1 107 47 view .LVU103
 472 01dc B13095E1 		ldrh	r3, [r5, r1]	@ *_139, *_139
 473              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 474              		.loc 1 102 30 view .LVU104
 475 01e0 8EE085E0 		add	lr, r5, lr, lsl #1	@ write_buffer, write_buffer_base, tmp242,
 476              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 477              		.loc 1 107 47 view .LVU105
 478 01e4 8440A0E1 		lsl	r4, r4, #1	@ tmp245, word,
 479 01e8 013083E2 		add	r3, r3, #1	@ tmp239, *_139,
 480 01ec B13085E1 		strh	r3, [r5, r1]	@ movhi	@ tmp239, *_139
 481              		.loc 1 108 17 is_stmt 1 view .LVU106
 482              	.LVL25:
  90:armwave.c     ****                 
 483              		.loc 1 90 17 view .LVU107
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 484              		.loc 1 102 17 view .LVU108
 107:armwave.c     ****                 word >>= 8;
 485              		.loc 1 107 17 view .LVU109
 486              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 487              		.loc 1 107 47 is_stmt 0 view .LVU110
 488 01f0 B4309EE1 		ldrh	r3, [lr, r4]	@ *_165, *_165
 489 01f4 013083E2 		add	r3, r3, #1	@ tmp248, *_165,
 490 01f8 B4308EE1 		strh	r3, [lr, r4]	@ movhi	@ tmp248, *_165
 491              		.loc 1 108 17 is_stmt 1 view .LVU111
 492              	.LVL26:
 493              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 494              		.loc 1 84 9 is_stmt 0 view .LVU112
 495 01fc CDFFFF8A 		bhi	.L14		@,
 496 0200 383097E5 		ldr	r3, [r7, #56]	@ prephitmp_44, g_armwave_state.waves
 497              	.LVL27:
 498              	.L13:
 499              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 500              		.loc 1 79 44 discriminator 2 view .LVU113
 501 0204 019089E2 		add	r9, r9, #1	@ w, w,
 502              	.LVL28:
 503              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 504              		.loc 1 79 5 discriminator 2 view .LVU114
 505 0208 030059E1 		cmp	r9, r3	@ w, prephitmp_44
 506 020c C0FFFFBA 		blt	.L16		@,
 507 0210 0EB0A0E1 		mov	fp, lr	@ write_buffer, write_buffer
 508              	.LVL29:
 509              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 510              		.loc 1 113 5 is_stmt 1 view .LVU115
 511              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 512              		.loc 1 113 40 is_stmt 0 view .LVU116
 513 0214 05104BE0 		sub	r1, fp, r5	@ tmp251, write_buffer, write_buffer_base
 514              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 515              		.loc 1 113 5 view .LVU117
 516 0218 18009FE5 		ldr	r0, .L22+12	@,
 517 021c C110A0E1 		asr	r1, r1, #1	@, tmp251,
 518              	@ armwave.c:114: }
 114:armwave.c     **** }
 519              		.loc 1 114 1 view .LVU118
 520 0220 24D08DE2 		add	sp, sp, #36	@,,
 521              		.cfi_def_cfa_offset 36
 522              		@ sp needed	@
 523 0224 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 524              		.cfi_restore 14
 525              		.cfi_restore 11
 526              		.cfi_restore 10
 527              		.cfi_restore 9
 528              		.cfi_restore 8
 529              		.cfi_restore 7
 530              		.cfi_restore 6
 531              		.cfi_restore 5
 532              		.cfi_restore 4
 533              		.cfi_def_cfa_offset 0
 534              	.LVL30:
 535              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 536              		.loc 1 113 5 view .LVU119
 537 0228 FEFFFFEA 		b	printf		@
 538              	.LVL31:
 539              	.L23:
 540              		.align	2
 541              	.L22:
 542 022c 00000000 		.word	g_armwave_state
 543 0230 20000000 		.word	.LC2
 544 0234 78000000 		.word	.LC3
 545 0238 B4000000 		.word	.LC4
 546              		.cfi_endproc
 547              	.LFE59:
 549              		.align	2
 550              		.global	armwave_fill_pixbuf_scaled
 551              		.syntax unified
 552              		.arm
 553              		.fpu vfp
 555              	armwave_fill_pixbuf_scaled:
 556              	.LVL32:
 557              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 558              		.loc 1 121 1 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 32
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 562              		.loc 1 122 5 view .LVU121
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 563              		.loc 1 124 5 view .LVU122
 125:armwave.c     ****     uint8_t r, g, b;
 564              		.loc 1 125 5 view .LVU123
 126:armwave.c     ****     int value; 
 565              		.loc 1 126 5 view .LVU124
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 566              		.loc 1 128 5 view .LVU125
 567              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 568              		.loc 1 121 1 is_stmt 0 view .LVU126
 569 023c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 570              		.cfi_def_cfa_offset 36
 571              		.cfi_offset 4, -36
 572              		.cfi_offset 5, -32
 573              		.cfi_offset 6, -28
 574              		.cfi_offset 7, -24
 575              		.cfi_offset 8, -20
 576              		.cfi_offset 9, -16
 577              		.cfi_offset 10, -12
 578              		.cfi_offset 11, -8
 579              		.cfi_offset 14, -4
 580 0240 3CD04DE2 		sub	sp, sp, #60	@,,
 581              		.cfi_def_cfa_offset 96
 582              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 583              		.loc 1 128 15 view .LVU127
 584 0244 2C729FE5 		ldr	r7, .L46	@ tmp241,
 585              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 586              		.loc 1 121 1 view .LVU128
 587 0248 00A0A0E1 		mov	r10, r0	@ out_buffer, out_buffer
 588              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 589              		.loc 1 132 5 view .LVU129
 590 024c 0010A0E1 		mov	r1, r0	@, out_buffer
 591              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 592              		.loc 1 128 15 view .LVU130
 593 0250 045097E5 		ldr	r5, [r7, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 594              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 595              		.loc 1 132 5 view .LVU131
 596 0254 20029FE5 		ldr	r0, .L46+4	@,
 597              	.LVL33:
 598              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 599              		.loc 1 128 15 view .LVU132
 600 0258 18508DE5 		str	r5, [sp, #24]	@ base_32ptr, %sfp
 601              	.LVL34:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 602              		.loc 1 129 5 is_stmt 1 view .LVU133
 130:armwave.c     **** 
 603              		.loc 1 130 5 view .LVU134
 604              		.loc 1 132 5 view .LVU135
 605 025c FEFFFFEB 		bl	printf		@
 606              	.LVL35:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 607              		.loc 1 134 5 view .LVU136
 608              	@ armwave.c:134:     if(out_buffer == NULL)
 609              		.loc 1 134 7 is_stmt 0 view .LVU137
 610 0260 00005AE3 		cmp	r10, #0	@ out_buffer,
 611 0264 2600000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 612              		.loc 1 137 5 is_stmt 1 view .LVU138
 613              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 614              		.loc 1 137 27 is_stmt 0 view .LVU139
 615 0268 583097E5 		ldr	r3, [r7, #88]	@ _1, g_armwave_state.target_width
 616              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack ~0
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 617              		.loc 1 140 38 view .LVU140
 618 026c 5C1097E5 		ldr	r1, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 619              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 620              		.loc 1 137 10 view .LVU141
 621 0270 402097E5 		ldr	r2, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 622              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 623              		.loc 1 139 5 view .LVU142
 624 0274 34008DE2 		add	r0, sp, #52	@ tmp190,,
 625              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 626              		.loc 1 140 38 view .LVU143
 627 0278 910301E0 		mul	r1, r1, r3	@ tmp186, g_armwave_state.target_height, _1
 628              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 629              		.loc 1 137 10 view .LVU144
 630 027c 920304E0 		mul	r4, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 631              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 632              		.loc 1 139 5 view .LVU145
 633 0280 0111A0E1 		lsl	r1, r1, #2	@, tmp186,
 634 0284 0420A0E1 		mov	r2, r4	@, npix
 635 0288 08008DE5 		str	r0, [sp, #8]	@ tmp190,
 636 028c 503097E5 		ldr	r3, [r7, #80]	@, g_armwave_state.ch_buff_size
 637 0290 20048DE8 		stm	sp, {r5, r10}	@,,
 638 0294 E4019FE5 		ldr	r0, .L46+8	@,
 639              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 640              		.loc 1 137 10 view .LVU146
 641 0298 1C408DE5 		str	r4, [sp, #28]	@ npix, %sfp
 642              	.LVL36:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 643              		.loc 1 139 5 is_stmt 1 view .LVU147
 644 029c FEFFFFEB 		bl	printf		@
 645              	.LVL37:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 646              		.loc 1 144 5 view .LVU148
 647              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 648              		.loc 1 144 59 is_stmt 0 view .LVU149
 649 02a0 583097E5 		ldr	r3, [r7, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 650 02a4 5C2097E5 		ldr	r2, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 651              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 652              		.loc 1 144 5 view .LVU150
 653 02a8 0010A0E3 		mov	r1, #0	@,
 654 02ac 0A00A0E1 		mov	r0, r10	@, out_buffer
 655              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 656              		.loc 1 144 59 view .LVU151
 657 02b0 920302E0 		mul	r2, r2, r3	@ tmp193, g_armwave_state.target_height, g_armwave_state.target_width
 658              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 659              		.loc 1 144 5 view .LVU152
 660 02b4 0221A0E1 		lsl	r2, r2, #2	@, tmp193,
 661 02b8 FEFFFFEB 		bl	memset		@
 662              	.LVL38:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 663              		.loc 1 146 5 is_stmt 1 view .LVU153
 664 02bc C0019FE5 		ldr	r0, .L46+12	@,
 665 02c0 FEFFFFEB 		bl	puts		@
 666              	.LVL39:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 667              		.loc 1 148 5 view .LVU154
 668              		.loc 1 148 5 is_stmt 0 view .LVU155
 669 02c4 000054E3 		cmp	r4, #0	@ npix,
 670 02c8 670000DA 		ble	.L34		@,
 671              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 672              		.loc 1 148 11 view .LVU156
 673 02cc 00B0A0E3 		mov	fp, #0	@ n,
 674              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 675              		.loc 1 122 46 view .LVU157
 676 02d0 20B08DE5 		str	fp, [sp, #32]	@ n, %sfp
 677              	.LVL40:
 678              	.L33:
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         //wave_word = 0x12345678;
 151:armwave.c     ****         wave_word = *base_32ptr++;
 679              		.loc 1 151 9 is_stmt 1 view .LVU158
 680              	@ armwave.c:151:         wave_word = *base_32ptr++;
 681              		.loc 1 151 19 is_stmt 0 view .LVU159
 682 02d4 18309DE5 		ldr	r3, [sp, #24]	@ base_32ptr, %sfp
 683 02d8 049093E4 		ldr	r9, [r3], #4	@ wave_word, MEM[base: base_32ptr_80, offset: 4294967292B]
 684              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 152:armwave.c     **** 
 153:armwave.c     ****         /*
 154:armwave.c     ****         if(n % 200 == 0) {
 155:armwave.c     ****            printf("%d\n", n);
 156:armwave.c     ****         }
 157:armwave.c     ****         */
 158:armwave.c     **** 
 159:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 685              		.loc 1 159 11 view .LVU160
 686 02dc 000059E3 		cmp	r9, #0	@ wave_word,
 687              	@ armwave.c:151:         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 688              		.loc 1 151 19 view .LVU161
 689 02e0 18308DE5 		str	r3, [sp, #24]	@ base_32ptr, %sfp
 690              	.LVL41:
 691              		.loc 1 159 9 is_stmt 1 view .LVU162
 692              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 693              		.loc 1 159 11 is_stmt 0 view .LVU163
 694 02e4 0800001A 		bne	.L44		@,
 695              	.LVL42:
 696              	.L28:
 697              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 698              		.loc 1 148 5 discriminator 2 view .LVU164
 699 02e8 1C309DE5 		ldr	r3, [sp, #28]	@ npix, %sfp
 700              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 701              		.loc 1 148 28 discriminator 2 view .LVU165
 702 02ec 02B08BE2 		add	fp, fp, #2	@ n, n,
 703              	.LVL43:
 704              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 705              		.loc 1 148 5 discriminator 2 view .LVU166
 706 02f0 0B0053E1 		cmp	r3, fp	@ npix, n
 707 02f4 F6FFFFCA 		bgt	.L33		@,
 708              	.LVL44:
 709              	.L27:
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 161:armwave.c     ****                 value = wave_word & 0xffff;
 162:armwave.c     ****                 wave_word >>= 16;
 163:armwave.c     **** 
 164:armwave.c     ****                 if(value != 0) {
 165:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 166:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 167:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 168:armwave.c     **** 
 169:armwave.c     ****                     r = MIN(rr, 255);
 170:armwave.c     ****                     g = MIN(gg, 255);
 171:armwave.c     ****                     b = MIN(bb, 255);
 172:armwave.c     **** 
 173:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 174:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 175:armwave.c     **** 
 176:armwave.c     ****                     // Plot the pixels
 177:armwave.c     ****                     nsub = n + w;
 178:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 180:armwave.c     ****                     xx = (nsub >> 8) / 2;
 181:armwave.c     **** 
 182:armwave.c     ****                     for(y = yy; y < ye; y++) {
 183:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 184:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 185:armwave.c     ****                         *(out_buffer_base + offset) = word;
 186:armwave.c     ****                         painted++;
 187:armwave.c     ****                     }
 188:armwave.c     ****                 }
 189:armwave.c     ****             }
 190:armwave.c     ****         }
 191:armwave.c     ****     }
 192:armwave.c     **** 
 193:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 710              		.loc 1 193 5 is_stmt 1 view .LVU167
 711 02f8 20109DE5 		ldr	r1, [sp, #32]	@, %sfp
 712 02fc 84019FE5 		ldr	r0, .L46+16	@,
 713 0300 FEFFFFEB 		bl	printf		@
 714              	.LVL45:
 715              	.L24:
 716              	@ armwave.c:194: }
 194:armwave.c     **** }
 717              		.loc 1 194 1 is_stmt 0 view .LVU168
 718 0304 3CD08DE2 		add	sp, sp, #60	@,,
 719              		.cfi_remember_state
 720              		.cfi_def_cfa_offset 36
 721              		@ sp needed	@
 722 0308 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 723              	.LVL46:
 724              	.L44:
 725              		.cfi_restore_state
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 726              		.loc 1 160 13 is_stmt 1 view .LVU169
 727              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 728              		.loc 1 160 26 is_stmt 0 view .LVU170
 729 030c 0020A0E3 		mov	r2, #0	@ _53,
 730              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 731              		.loc 1 160 19 view .LVU171
 732 0310 34208DE5 		str	r2, [sp, #52]	@ tmp266, w
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 733              		.loc 1 160 19 view .LVU172
 734 0314 28B08DE5 		str	fp, [sp, #40]	@ n, %sfp
 735 0318 030000EA 		b	.L32		@
 736              	.LVL47:
 737              	.L29:
 738              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 739              		.loc 1 160 32 discriminator 2 view .LVU173
 740 031c 012082E2 		add	r2, r2, #1	@ _53, _53,
 741              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 742              		.loc 1 160 13 discriminator 2 view .LVU174
 743 0320 010052E3 		cmp	r2, #1	@ _53,
 744              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 745              		.loc 1 160 32 discriminator 2 view .LVU175
 746 0324 34208DE5 		str	r2, [sp, #52]	@ _53, w
 747              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 748              		.loc 1 160 13 discriminator 2 view .LVU176
 749 0328 4D0000CA 		bgt	.L45		@,
 750              	.L32:
 161:armwave.c     ****                 wave_word >>= 16;
 751              		.loc 1 161 17 is_stmt 1 view .LVU177
 752              	@ armwave.c:161:                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 753              		.loc 1 161 23 is_stmt 0 view .LVU178
 754 032c 7930FFE6 		uxth	r3, r9	@ value, wave_word
 755              	.LVL48:
 162:armwave.c     **** 
 756              		.loc 1 162 17 is_stmt 1 view .LVU179
 757              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 758              		.loc 1 164 19 is_stmt 0 view .LVU180
 759 0330 000053E3 		cmp	r3, #0	@ value,
 760              	@ armwave.c:162:                 wave_word >>= 16;
 162:armwave.c     **** 
 761              		.loc 1 162 27 view .LVU181
 762 0334 2998A0E1 		lsr	r9, r9, #16	@ wave_word, wave_word,
 763              	.LVL49:
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 764              		.loc 1 164 17 is_stmt 1 view .LVU182
 765              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 766              		.loc 1 164 19 is_stmt 0 view .LVU183
 767 0338 F7FFFF0A 		beq	.L29		@,
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 768              		.loc 1 165 21 is_stmt 1 view .LVU184
 769              	.LVL50:
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 166 21 view .LVU185
 167:armwave.c     **** 
 771              		.loc 1 167 21 view .LVU186
 169:armwave.c     ****                     g = MIN(gg, 255);
 772              		.loc 1 169 21 view .LVU187
 170:armwave.c     ****                     b = MIN(bb, 255);
 773              		.loc 1 170 21 view .LVU188
 171:armwave.c     **** 
 774              		.loc 1 171 21 view .LVU189
 174:armwave.c     **** 
 775              		.loc 1 174 21 view .LVU190
 776              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 777              		.loc 1 177 26 is_stmt 0 view .LVU191
 778 033c 28C09DE5 		ldr	ip, [sp, #40]	@ n, %sfp
 779              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 178 57 view .LVU192
 781 0340 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_169, g_armwave_state.vscale_frac
 782              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 783              		.loc 1 177 26 view .LVU193
 784 0344 0C5082E0 		add	r5, r2, ip	@ nsub, _53, n
 785              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 786              		.loc 1 166 52 view .LVU194
 787 0348 FE66D7E1 		ldrsh	r6, [r7, #110]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 788              	.LVL51:
 789              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 790              		.loc 1 178 32 view .LVU195
 791 034c 7510EFE6 		uxtb	r1, r5	@ _36, nsub
 792              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 793              		.loc 1 179 41 view .LVU196
 794 0350 010081E2 		add	r0, r1, #1	@ tmp227, _36,
 795              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 796              		.loc 1 178 40 view .LVU197
 797 0354 901A07EE 		vmov	s15, r1	@ int	@ _36, _36
 798              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 799              		.loc 1 179 41 view .LVU198
 800 0358 900A06EE 		vmov	s13, r0	@ int	@ tmp227, tmp227
 801              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 802              		.loc 1 167 52 view .LVU199
 803 035c F017D7E1 		ldrsh	r1, [r7, #112]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 804              	.LVL52:
 805              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 806              		.loc 1 165 52 view .LVU200
 807 0360 FC06D7E1 		ldrsh	r0, [r7, #108]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 808              	.LVL53:
 809              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 810              		.loc 1 178 40 view .LVU201
 811 0364 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, _36
 812              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 813              		.loc 1 179 46 view .LVU202
 814 0368 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp228, tmp227
 815              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 816              		.loc 1 167 55 view .LVU203
 817 036c 930101E0 		mul	r1, r3, r1	@ tmp207, value, g_armwave_state.ch1_color.b
 818              	.LVL54:
 819              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 820              		.loc 1 166 55 view .LVU204
 821 0370 930606E0 		mul	r6, r3, r6	@ tmp213, value, g_armwave_state.ch1_color.g
 822              	.LVL55:
 823              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 824              		.loc 1 167 24 view .LVU205
 825 0374 4114A0E1 		asr	r1, r1, #8	@ bb, tmp207,
 826              	.LVL56:
 827              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 828              		.loc 1 165 55 view .LVU206
 829 0378 930003E0 		mul	r3, r3, r0	@ tmp221, value, g_armwave_state.ch1_color.r
 830              	.LVL57:
 831              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 832              		.loc 1 178 40 view .LVU207
 833 037c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, pretmp_169
 834              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 835              		.loc 1 179 46 view .LVU208
 836 0380 876A66EE 		vmul.f32	s13, s13, s14	@ tmp229, tmp228, pretmp_169
 837              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 838              		.loc 1 166 24 view .LVU209
 839 0384 4664A0E1 		asr	r6, r6, #8	@ gg, tmp213,
 840              	.LVL58:
 841              	@ armwave.c:171:                     b = MIN(bb, 255);
 171:armwave.c     **** 
 842              		.loc 1 171 25 view .LVU210
 843 0388 FF0051E3 		cmp	r1, #255	@ bb,
 844 038c FF10A0A3 		movge	r1, #255	@ bb,
 845              	.LVL59:
 846              	@ armwave.c:170:                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 847              		.loc 1 170 25 view .LVU211
 848 0390 FF0056E3 		cmp	r6, #255	@ gg,
 849 0394 FF60A0A3 		movge	r6, #255	@ gg,
 850              	.LVL60:
 851              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 852              		.loc 1 165 24 view .LVU212
 853 0398 4334A0E1 		asr	r3, r3, #8	@ rr, tmp221,
 854              	.LVL61:
 855              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 856              		.loc 1 178 24 view .LVU213
 857 039c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp226
 858              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 859              		.loc 1 179 24 view .LVU214
 860 03a0 E66AFCEE 		vcvt.u32.f32	s13, s13	@ ye, tmp229
 861              	@ armwave.c:169:                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 862              		.loc 1 169 25 view .LVU215
 863 03a4 FF0053E3 		cmp	r3, #255	@ rr,
 864              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 865              		.loc 1 174 56 view .LVU216
 866 03a8 0604A0E1 		lsl	r0, r6, #8	@ tmp214, gg,
 867              	@ armwave.c:169:                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 868              		.loc 1 169 25 view .LVU217
 869 03ac FF30A0A3 		movge	r3, #255	@ rr,
 870              	.LVL62:
 871              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 872              		.loc 1 174 44 view .LVU218
 873 03b0 0168A0E1 		lsl	r6, r1, #16	@ tmp208, bb,
 874              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 875              		.loc 1 180 32 view .LVU219
 876 03b4 4554A0E1 		asr	r5, r5, #8	@ tmp230, nsub,
 877              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 878              		.loc 1 174 44 view .LVU220
 879 03b8 FF6806E2 		and	r6, r6, #16711680	@ tmp209, tmp208,
 880              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 881              		.loc 1 182 21 view .LVU221
 882 03bc 904A17EE 		vmov	r4, s15	@ int	@ yy,
 883              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 884              		.loc 1 179 24 view .LVU222
 885 03c0 90BA16EE 		vmov	fp, s13	@ int	@ ye, ye
 886              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 887              		.loc 1 174 56 view .LVU223
 888 03c4 7010FFE6 		uxth	r1, r0	@ tmp215, tmp214
 889              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 890              		.loc 1 174 51 view .LVU224
 891 03c8 016086E1 		orr	r6, r6, r1	@ tmp217, tmp209, tmp215
 892              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 893              		.loc 1 174 62 view .LVU225
 894 03cc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 895              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 896              		.loc 1 180 38 view .LVU226
 897 03d0 A55F85E0 		add	r5, r5, r5, lsr #31	@ tmp232, tmp230, tmp230,
 898              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 899              		.loc 1 174 62 view .LVU227
 900 03d4 036086E1 		orr	r6, r6, r3	@ tmp223, tmp217, rr
 901              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 902              		.loc 1 182 21 view .LVU228
 903 03d8 0B0054E1 		cmp	r4, fp	@ yy, ye
 904              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 905              		.loc 1 178 24 view .LVU229
 906 03dc 097ACDED 		vstr.32	s15, [sp, #36]	@ int	@ yy, %sfp
 907              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 908              		.loc 1 174 26 view .LVU230
 909 03e0 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp223,
 910              	.LVL63:
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 911              		.loc 1 177 21 is_stmt 1 view .LVU231
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 912              		.loc 1 178 21 view .LVU232
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 913              		.loc 1 179 21 view .LVU233
 180:armwave.c     **** 
 914              		.loc 1 180 21 view .LVU234
 915              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 916              		.loc 1 180 38 is_stmt 0 view .LVU235
 917 03e4 C550A0E1 		asr	r5, r5, #1	@ xx, tmp232,
 918              	.LVL64:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 919              		.loc 1 182 21 is_stmt 1 view .LVU236
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 920              		.loc 1 182 21 is_stmt 0 view .LVU237
 921 03e8 CBFFFF2A 		bcs	.L29		@,
 922 03ec 2C908DE5 		str	r9, [sp, #44]	@ wave_word, %sfp
 923 03f0 0C90A0E1 		mov	r9, ip	@ n, n
 924              	.LVL65:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 925              		.loc 1 182 21 view .LVU238
 926 03f4 000000EA 		b	.L31		@
 927              	.LVL66:
 928              	.L30:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 929              		.loc 1 182 21 view .LVU239
 930 03f8 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_169, g_armwave_state.vscale_frac
 931              	.LVL67:
 932              	.L31:
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 933              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU240
 934              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 935              		.loc 1 184 25 is_stmt 0 discriminator 3 view .LVU241
 936 03fc C77AB7EE 		vcvt.f64.f32	d7, s14	@ tmp237, pretmp_169
 937              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 938              		.loc 1 183 60 discriminator 3 view .LVU242
 939 0400 583097E5 		ldr	r3, [r7, #88]	@ _45, g_armwave_state.target_width
 940              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 941              		.loc 1 184 25 discriminator 3 view .LVU243
 942 0404 10028DE8 		stm	sp, {r4, r9}	@,,
 943 0408 08308DE5 		str	r3, [sp, #8]	@ _45,
 944              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 945              		.loc 1 183 32 discriminator 3 view .LVU244
 946 040c 945328E0 		mla	r8, r4, r3, r5	@ offset, y, _45, xx
 947              	.LVL68:
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 948              		.loc 1 184 25 is_stmt 1 discriminator 3 view .LVU245
 949 0410 0A10A0E1 		mov	r1, r10	@, out_buffer
 950              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 951              		.loc 1 182 42 is_stmt 0 discriminator 3 view .LVU246
 952 0414 014084E2 		add	r4, r4, #1	@ y, y,
 953              	.LVL69:
 954              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 955              		.loc 1 184 25 discriminator 3 view .LVU247
 956 0418 0820A0E1 		mov	r2, r8	@, offset
 957 041c 047B8DED 		vstr.64	d7, [sp, #16]	@ tmp237,
 958 0420 0530A0E1 		mov	r3, r5	@, xx
 959 0424 60009FE5 		ldr	r0, .L46+20	@,
 960 0428 FEFFFFEB 		bl	printf		@
 961              	.LVL70:
 185:armwave.c     ****                         painted++;
 962              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU248
 963              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 964              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU249
 965 042c 04005BE1 		cmp	fp, r4	@ ye, y
 966              	@ armwave.c:185:                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 967              		.loc 1 185 53 discriminator 3 view .LVU250
 968 0430 08618AE7 		str	r6, [r10, r8, lsl #2]	@ word, *_51
 186:armwave.c     ****                     }
 969              		.loc 1 186 25 is_stmt 1 discriminator 3 view .LVU251
 970              	.LVL71:
 971              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 972              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU252
 973 0434 EFFFFF1A 		bne	.L30		@,
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 974              		.loc 1 182 21 discriminator 3 view .LVU253
 975 0438 24309DE5 		ldr	r3, [sp, #36]	@ yy, %sfp
 976 043c 34209DE5 		ldr	r2, [sp, #52]	@ _53, w
 977              	.LVL72:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 978              		.loc 1 182 21 discriminator 3 view .LVU254
 979 0440 03B04BE0 		sub	fp, fp, r3	@ tmp238, ye, yy
 980              	.LVL73:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 981              		.loc 1 182 21 discriminator 3 view .LVU255
 982 0444 20309DE5 		ldr	r3, [sp, #32]	@ painted, %sfp
 983              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 984              		.loc 1 160 32 view .LVU256
 985 0448 012082E2 		add	r2, r2, #1	@ _53, _53,
 986 044c 0B3083E0 		add	r3, r3, fp	@ painted, painted, tmp238
 987              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 988              		.loc 1 160 13 view .LVU257
 989 0450 010052E3 		cmp	r2, #1	@ _53,
 990 0454 2C909DE5 		ldr	r9, [sp, #44]	@ wave_word, %sfp
 991 0458 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 992              	.LVL74:
 993              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 994              		.loc 1 160 32 view .LVU258
 995 045c 34208DE5 		str	r2, [sp, #52]	@ _53, w
 996              	.LVL75:
 997              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 998              		.loc 1 160 13 view .LVU259
 999 0460 B1FFFFDA 		ble	.L32		@,
 1000              	.LVL76:
 1001              	.L45:
 160:armwave.c     ****                 value = wave_word & 0xffff;
 1002              		.loc 1 160 13 view .LVU260
 1003 0464 28B09DE5 		ldr	fp, [sp, #40]	@ n, %sfp
 1004 0468 9EFFFFEA 		b	.L28		@
 1005              	.LVL77:
 1006              	.L34:
 1007              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 1008              		.loc 1 122 46 view .LVU261
 1009 046c 0030A0E3 		mov	r3, #0	@ painted,
 1010 0470 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 1011 0474 9FFFFFEA 		b	.L27		@
 1012              	.L47:
 1013              		.align	2
 1014              	.L46:
 1015 0478 00000000 		.word	g_armwave_state
 1016 047c C0000000 		.word	.LC5
 1017 0480 D8000000 		.word	.LC6
 1018 0484 38010000 		.word	.LC7
 1019 0488 64010000 		.word	.LC9
 1020 048c 40010000 		.word	.LC8
 1021              		.cfi_endproc
 1022              	.LFE60:
 1024              		.global	__aeabi_idiv
 1025              		.align	2
 1026              		.global	armwave_generate
 1027              		.syntax unified
 1028              		.arm
 1029              		.fpu vfp
 1031              	armwave_generate:
 1032              	.LFB61:
 195:armwave.c     **** 
 196:armwave.c     **** /*
 197:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 198:armwave.c     ****  */
 199:armwave.c     **** void armwave_generate()
 200:armwave.c     **** {
 1033              		.loc 1 200 1 is_stmt 1 view -0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 0
 1036              		@ frame_needed = 0, uses_anonymous_args = 0
 201:armwave.c     ****     uint32_t yy;
 1037              		.loc 1 201 5 view .LVU263
 202:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 1038              		.loc 1 202 5 view .LVU264
 1039              	.LVL78:
 203:armwave.c     **** 
 204:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1040              		.loc 1 204 5 view .LVU265
 1041              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 1042              		.loc 1 200 1 is_stmt 0 view .LVU266
 1043 0490 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 1044              		.cfi_def_cfa_offset 20
 1045              		.cfi_offset 4, -20
 1046              		.cfi_offset 5, -16
 1047              		.cfi_offset 6, -12
 1048              		.cfi_offset 7, -8
 1049              		.cfi_offset 14, -4
 1050              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1051              		.loc 1 204 5 view .LVU267
 1052 0494 0010A0E3 		mov	r1, #0	@,
 1053              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1054              		.loc 1 204 58 view .LVU268
 1055 0498 84509FE5 		ldr	r5, .L56	@ tmp154,
 1056              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 1057              		.loc 1 200 1 view .LVU269
 1058 049c 0CD04DE2 		sub	sp, sp, #12	@,,
 1059              		.cfi_def_cfa_offset 32
 1060              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1061              		.loc 1 204 5 view .LVU270
 1062 04a0 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 1063 04a4 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1064 04a8 FEFFFFEB 		bl	memset		@
 1065              	.LVL79:
 205:armwave.c     **** 
 206:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1066              		.loc 1 206 5 is_stmt 1 view .LVU271
 1067              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1068              		.loc 1 206 68 is_stmt 0 view .LVU272
 1069 04ac 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1070              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1071              		.loc 1 206 51 view .LVU273
 1072 04b0 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1073 04b4 0610A0E1 		mov	r1, r6	@, _13
 1074 04b8 FEFFFFEB 		bl	__aeabi_idiv		@
 1075              	.LVL80:
 1076              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1077              		.loc 1 206 5 view .LVU274
 1078 04bc 000050E3 		cmp	r0, #0	@,
 1079 04c0 1500000A 		beq	.L48		@,
 1080              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 208:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1081              		.loc 1 208 9 view .LVU275
 1082 04c4 5C709FE5 		ldr	r7, .L56+4	@ tmp155,
 1083              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1084              		.loc 1 206 12 view .LVU276
 1085 04c8 0040A0E3 		mov	r4, #0	@ yy,
 1086              	.LVL81:
 1087              	.L50:
 1088              		.loc 1 208 9 is_stmt 1 discriminator 3 view .LVU277
 1089 04cc 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1090              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 209:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 210:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1091              		.loc 1 210 48 is_stmt 0 discriminator 3 view .LVU278
 1092 04d0 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1093              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1094              		.loc 1 208 9 discriminator 3 view .LVU279
 1095 04d4 0630A0E1 		mov	r3, r6	@, _13
 1096 04d8 0120A0E1 		mov	r2, r1	@, _5
 1097              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1098              		.loc 1 210 48 discriminator 3 view .LVU280
 1099 04dc 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1100              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1101              		.loc 1 208 9 discriminator 3 view .LVU281
 1102 04e0 0700A0E1 		mov	r0, r7	@, tmp155
 1103 04e4 0410A0E1 		mov	r1, r4	@, yy
 1104 04e8 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1105 04ec 00C08DE5 		str	ip, [sp]	@ tmp145,
 1106 04f0 FEFFFFEB 		bl	printf		@
 1107              	.LVL82:
 211:armwave.c     **** 
 212:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1108              		.loc 1 212 9 is_stmt 1 discriminator 3 view .LVU282
 1109              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1110              		.loc 1 212 62 is_stmt 0 discriminator 3 view .LVU283
 1111 04f4 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1112              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1113              		.loc 1 212 9 discriminator 3 view .LVU284
 1114 04f8 940100E0 		mul	r0, r4, r1	@, yy,
 1115 04fc FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1116              	.LVL83:
 213:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1117              		.loc 1 213 9 is_stmt 1 discriminator 3 view .LVU285
 214:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1118              		.loc 1 214 9 discriminator 3 view .LVU286
 1119              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1120              		.loc 1 206 68 is_stmt 0 discriminator 3 view .LVU287
 1121 0500 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1122              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1123              		.loc 1 206 51 discriminator 3 view .LVU288
 1124 0504 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1125 0508 0610A0E1 		mov	r1, r6	@, _13
 1126 050c FEFFFFEB 		bl	__aeabi_idiv		@
 1127              	.LVL84:
 1128              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1129              		.loc 1 206 86 discriminator 3 view .LVU289
 1130 0510 014084E2 		add	r4, r4, #1	@ yy, yy,
 1131              	.LVL85:
 1132              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1133              		.loc 1 206 5 discriminator 3 view .LVU290
 1134 0514 040050E1 		cmp	r0, r4	@, yy
 1135 0518 EBFFFF8A 		bhi	.L50		@,
 1136              	.LVL86:
 1137              	.L48:
 1138              	@ armwave.c:223: }
 215:armwave.c     ****     }
 216:armwave.c     **** 
 217:armwave.c     ****     /*
 218:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 219:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 220:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 221:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 222:armwave.c     ****     */
 223:armwave.c     **** }
 1139              		.loc 1 223 1 view .LVU291
 1140 051c 0CD08DE2 		add	sp, sp, #12	@,,
 1141              		.cfi_def_cfa_offset 20
 1142              		@ sp needed	@
 1143 0520 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1144              	.L57:
 1145              		.align	2
 1146              	.L56:
 1147 0524 00000000 		.word	g_armwave_state
 1148 0528 80010000 		.word	.LC10
 1149              		.cfi_endproc
 1150              	.LFE61:
 1152              		.align	2
 1153              		.global	armwave_setup_render
 1154              		.syntax unified
 1155              		.arm
 1156              		.fpu vfp
 1158              	armwave_setup_render:
 1159              	.LVL87:
 1160              	.LFB62:
 224:armwave.c     **** 
 225:armwave.c     **** /*
 226:armwave.c     ****  * Setup the renderer with passed parameters.
 227:armwave.c     ****  */
 228:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 229:armwave.c     **** {
 1161              		.loc 1 229 1 is_stmt 1 view -0
 1162              		.cfi_startproc
 1163              		@ args = 12, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 230:armwave.c     ****     uint32_t length, xx;
 1165              		.loc 1 230 5 view .LVU293
 231:armwave.c     ****     float points_per_pixel;
 1166              		.loc 1 231 5 view .LVU294
 232:armwave.c     **** 
 233:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1167              		.loc 1 233 5 view .LVU295
 1168              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1169              		.loc 1 229 1 is_stmt 0 view .LVU296
 1170 052c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1171              		.cfi_def_cfa_offset 28
 1172              		.cfi_offset 4, -28
 1173              		.cfi_offset 5, -24
 1174              		.cfi_offset 6, -20
 1175              		.cfi_offset 7, -16
 1176              		.cfi_offset 8, -12
 1177              		.cfi_offset 9, -8
 1178              		.cfi_offset 14, -4
 1179 0530 14D04DE2 		sub	sp, sp, #20	@,,
 1180              		.cfi_def_cfa_offset 48
 1181              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1182              		.loc 1 229 1 view .LVU297
 1183 0534 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1184 0538 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1185 053c 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1186 0540 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1187              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1188              		.loc 1 233 5 view .LVU298
 1189 0544 00308DE5 		str	r3, [sp]	@ wave_stride,
 1190              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1191              		.loc 1 229 1 view .LVU299
 1192 0548 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1193 054c 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1194              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1195              		.loc 1 233 5 view .LVU300
 1196 0550 F460CDE1 		strd	r6, [sp, #4]	@,,
 1197 0554 0230A0E1 		mov	r3, r2	@, waves_max
 1198              	.LVL88:
 1199              		.loc 1 233 5 view .LVU301
 1200 0558 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1201 055c 0120A0E1 		mov	r2, r1	@, end_point
 1202              	.LVL89:
 1203              		.loc 1 233 5 view .LVU302
 1204 0560 0010A0E1 		mov	r1, r0	@, start_point
 1205              	.LVL90:
 1206              		.loc 1 233 5 view .LVU303
 1207 0564 8C019FE5 		ldr	r0, .L68+12	@,
 1208              	.LVL91:
 1209              		.loc 1 233 5 view .LVU304
 1210 0568 FEFFFFEB 		bl	printf		@
 1211              	.LVL92:
 234:armwave.c     **** 
 235:armwave.c     ****     // TODO these asserts should instead raise PyExc
 236:armwave.c     ****     assert(start_point < end_point);
 1212              		.loc 1 236 5 is_stmt 1 view .LVU305
 1213 056c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1214 0570 5100002A 		bcs	.L66		@,
 237:armwave.c     **** 
 238:armwave.c     ****     /*
 239:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 240:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 241:armwave.c     ****     if(target_height == 256) {
 242:armwave.c     ****         g_armwave_state.row_shift = 8;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 244:armwave.c     ****     } else if(target_height == 512) {
 245:armwave.c     ****         g_armwave_state.row_shift = 9;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 247:armwave.c     ****     } else if(target_height == 1024) {
 248:armwave.c     ****         g_armwave_state.row_shift = 10;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 250:armwave.c     ****     } else if(target_height == 2048) {
 251:armwave.c     ****         g_armwave_state.row_shift = 11;
 252:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 253:armwave.c     ****     }
 254:armwave.c     ****     */
 255:armwave.c     **** 
 256:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 257:armwave.c     ****     g_armwave_state.xstride = target_height;
 1215              		.loc 1 257 5 view .LVU306
 1216              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 259:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 260:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 261:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 262:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 263:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 264:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 265:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 266:armwave.c     ****     g_armwave_state.target_width = target_width;
 267:armwave.c     ****     g_armwave_state.target_height = target_height;
 268:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1217              		.loc 1 268 45 is_stmt 0 view .LVU307
 1218 0574 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1219              	.LVL93:
 1220              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 270:armwave.c     ****     // Calculate compound scaler
 271:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 272:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1221              		.loc 1 272 48 view .LVU308
 1222 0578 5B5A9FED 		vldr.32	s10, .L68	@ tmp187,
 1223 057c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1224              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1225              		.loc 1 258 49 view .LVU309
 1226 0580 5A7A9FED 		vldr.32	s14, .L68+4	@ tmp165,
 1227              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1228              		.loc 1 272 81 view .LVU310
 1229 0584 5A6A9FED 		vldr.32	s12, .L68+8	@ tmp191,
 1230              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1231              		.loc 1 265 90 view .LVU311
 1232 0588 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1233              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1234              		.loc 1 272 48 view .LVU312
 1235 058c E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1236              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1237              		.loc 1 258 49 view .LVU313
 1238 0590 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1239              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1240              		.loc 1 257 29 view .LVU314
 1241 0594 60419FE5 		ldr	r4, .L68+16	@ tmp222,
 1242              	.LVL94:
 1243              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1244              		.loc 1 263 42 view .LVU315
 1245 0598 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1246              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1247              		.loc 1 258 49 view .LVU316
 1248 059c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1249              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1250              		.loc 1 265 95 view .LVU317
 1251 05a0 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1252              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 273:armwave.c     **** 
 274:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1253              		.loc 1 274 5 view .LVU318
 1254 05a4 0128A0E3 		mov	r2, #65536	@ tmp194,
 1255              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1256              		.loc 1 272 48 view .LVU319
 1257 05a8 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1258              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1259              		.loc 1 274 5 view .LVU320
 1260 05ac 04508DE5 		str	r5, [sp, #4]	@ _13,
 1261 05b0 00608DE5 		str	r6, [sp]	@ target_width,
 1262              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1263              		.loc 1 265 95 view .LVU321
 1264 05b4 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1265              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1266              		.loc 1 257 29 view .LVU322
 1267 05b8 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1268              		.loc 1 258 5 is_stmt 1 view .LVU323
 1269              	@ armwave.c:260:     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1270              		.loc 1 260 33 is_stmt 0 view .LVU324
 1271 05bc 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1272              	@ armwave.c:261:     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1273              		.loc 1 261 31 view .LVU325
 1274 05c0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1275              	@ armwave.c:262:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1276              		.loc 1 262 27 view .LVU326
 1277 05c4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1278              	@ armwave.c:267:     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1279              		.loc 1 267 35 view .LVU327
 1280 05c8 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1281              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1282              		.loc 1 274 5 view .LVU328
 1283 05cc 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1284              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1285              		.loc 1 264 37 view .LVU329
 1286 05d0 022CA0E3 		mov	r2, #512	@ tmp175,
 1287              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1288              		.loc 1 263 26 view .LVU330
 1289 05d4 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1290              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1291              		.loc 1 264 37 view .LVU331
 1292 05d8 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1293              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1294              		.loc 1 274 5 view .LVU332
 1295 05dc 0310A0E1 		mov	r1, r3	@, tmp180
 1296              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1297              		.loc 1 265 34 view .LVU333
 1298 05e0 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1299              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1300              		.loc 1 258 49 view .LVU334
 1301 05e4 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1302              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1303              		.loc 1 272 40 view .LVU335
 1304 05e8 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1305              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 268:armwave.c     **** 
 1306              		.loc 1 268 33 view .LVU336
 1307 05ec 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1308              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1309              		.loc 1 274 5 view .LVU337
 1310 05f0 08019FE5 		ldr	r0, .L68+20	@,
 1311              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1312              		.loc 1 272 40 view .LVU338
 1313 05f4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1314 05f8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1315              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1316              		.loc 1 259 30 view .LVU339
 1317 05fc E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1318              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1319              		.loc 1 258 33 view .LVU340
 1320 0600 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1321              		.loc 1 259 5 is_stmt 1 view .LVU341
 1322              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1323              		.loc 1 272 81 is_stmt 0 view .LVU342
 1324 0604 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1325              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1326              		.loc 1 259 30 view .LVU343
 1327 0608 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1328              		.loc 1 260 5 is_stmt 1 view .LVU344
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1329              		.loc 1 261 5 view .LVU345
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1330              		.loc 1 262 5 view .LVU346
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1331              		.loc 1 263 5 view .LVU347
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1332              		.loc 1 264 5 view .LVU348
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1333              		.loc 1 265 5 view .LVU349
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 1334              		.loc 1 266 5 view .LVU350
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1335              		.loc 1 267 5 view .LVU351
 268:armwave.c     **** 
 1336              		.loc 1 268 5 view .LVU352
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1337              		.loc 1 271 5 view .LVU353
 1338              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1339              		.loc 1 271 42 is_stmt 0 view .LVU354
 1340 060c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1341 0610 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1342              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1343              		.loc 1 274 5 view .LVU355
 1344 0614 903A17EE 		vmov	r3, s15	@ int	@, _20
 1345              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1346              		.loc 1 271 42 view .LVU356
 1347 0618 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1348              		.loc 1 274 5 is_stmt 1 view .LVU357
 1349 061c 0C20A0E1 		mov	r2, ip	@, tmp3
 1350 0620 FEFFFFEB 		bl	printf		@
 1351              	.LVL95:
 275:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 276:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 277:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 278:armwave.c     **** 
 279:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 280:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 282:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1352              		.loc 1 282 5 view .LVU358
 1353              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 283:armwave.c     **** 
 284:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1354              		.loc 1 284 23 is_stmt 0 view .LVU359
 1355 0624 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1356              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1357              		.loc 1 282 34 view .LVU360
 1358 0628 4030A0E3 		mov	r3, #64	@ tmp196,
 1359              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1360              		.loc 1 284 7 view .LVU361
 1361 062c 000050E3 		cmp	r0, #0	@ _21,
 1362              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1363              		.loc 1 282 34 view .LVU362
 1364 0630 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1365              		.loc 1 284 5 is_stmt 1 view .LVU363
 1366              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1367              		.loc 1 284 7 is_stmt 0 view .LVU364
 1368 0634 0000000A 		beq	.L60		@,
 285:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1369              		.loc 1 285 9 is_stmt 1 view .LVU365
 1370 0638 FEFFFFEB 		bl	free		@
 1371              	.LVL96:
 1372              	.L60:
 286:armwave.c     **** 
 287:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1373              		.loc 1 287 5 view .LVU366
 1374              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1375              		.loc 1 287 56 is_stmt 0 view .LVU367
 1376 063c 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1377              	.LVL97:
 1378              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1379              		.loc 1 287 34 view .LVU368
 1380 0640 0110A0E3 		mov	r1, #1	@,
 1381 0644 0800A0E1 		mov	r0, r8	@, _22
 1382 0648 FEFFFFEB 		bl	calloc		@
 1383              	.LVL98:
 1384              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 288:armwave.c     **** 
 289:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1385              		.loc 1 289 7 view .LVU369
 1386 064c 000050E3 		cmp	r0, #0	@ tmp199,
 1387              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1388              		.loc 1 287 34 view .LVU370
 1389 0650 0070A0E1 		mov	r7, r0	@ tmp199,
 1390              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1391              		.loc 1 287 32 view .LVU371
 1392 0654 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1393              		.loc 1 289 5 is_stmt 1 view .LVU372
 1394              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 1395              		.loc 1 289 7 is_stmt 0 view .LVU373
 1396 0658 1C00000A 		beq	.L67		@,
 290:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 291:armwave.c     ****         exit(-1);
 292:armwave.c     ****     }
 293:armwave.c     **** 
 294:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 295:armwave.c     ****     length = end_point - start_point;
 1397              		.loc 1 295 5 is_stmt 1 view .LVU374
 1398              	.LVL99:
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1399              		.loc 1 296 5 view .LVU375
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1400              		.loc 1 297 5 view .LVU376
 1401              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1402              		.loc 1 296 31 is_stmt 0 view .LVU377
 1403 065c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1404              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1405              		.loc 1 296 34 view .LVU378
 1406 0660 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1407              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1408              		.loc 1 297 60 view .LVU379
 1409 0664 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1410              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 298:armwave.c     **** 
 299:armwave.c     ****     /*
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     **** 
 302:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 303:armwave.c     **** 
 304:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306:armwave.c     **** 
 307:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 308:armwave.c     ****     }
 309:armwave.c     ****     */
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1411              		.loc 1 311 34 view .LVU380
 1412 0668 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1413              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1414              		.loc 1 296 31 view .LVU381
 1415 066c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1416              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1417              		.loc 1 296 34 view .LVU382
 1418 0670 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1419              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1420              		.loc 1 297 60 view .LVU383
 1421 0674 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1422              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1423              		.loc 1 311 34 view .LVU384
 1424 0678 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1425              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1426              		.loc 1 296 22 view .LVU385
 1427 067c 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1428              	.LVL100:
 1429              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1430              		.loc 1 297 60 view .LVU386
 1431 0680 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1432              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1433              		.loc 1 297 41 view .LVU387
 1434 0684 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1435 0688 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1436              		.loc 1 311 5 is_stmt 1 view .LVU388
 1437              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1438              		.loc 1 311 34 is_stmt 0 view .LVU389
 1439 068c FEFFFFEB 		bl	malloc		@
 1440              	.LVL101:
 1441              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1442              		.loc 1 313 5 view .LVU390
 1443 0690 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1444 0694 0710A0E1 		mov	r1, r7	@, tmp199
 1445 0698 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1446 069c 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1447              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1448              		.loc 1 311 34 view .LVU391
 1449 06a0 00C0A0E1 		mov	ip, r0	@ tmp215,
 1450              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1451              		.loc 1 313 5 view .LVU392
 1452 06a4 0030A0E1 		mov	r3, r0	@, tmp215
 1453              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1454              		.loc 1 311 32 view .LVU393
 1455 06a8 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1456              		.loc 1 313 5 is_stmt 1 view .LVU394
 1457 06ac 50009FE5 		ldr	r0, .L68+24	@,
 1458              	@ armwave.c:320: }
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****      //malloc_stats();
 320:armwave.c     **** }
 1459              		.loc 1 320 1 is_stmt 0 view .LVU395
 1460 06b0 14D08DE2 		add	sp, sp, #20	@,,
 1461              		.cfi_remember_state
 1462              		.cfi_def_cfa_offset 28
 1463              		@ sp needed	@
 1464 06b4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1465              		.cfi_restore 14
 1466              		.cfi_restore 9
 1467              		.cfi_restore 8
 1468              		.cfi_restore 7
 1469              		.cfi_restore 6
 1470              		.cfi_restore 5
 1471              		.cfi_restore 4
 1472              		.cfi_def_cfa_offset 0
 1473              	.LVL102:
 1474              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1475              		.loc 1 313 5 view .LVU396
 1476 06b8 FEFFFFEA 		b	printf		@
 1477              	.LVL103:
 1478              	.L66:
 1479              		.cfi_restore_state
 236:armwave.c     **** 
 1480              		.loc 1 236 5 is_stmt 1 discriminator 1 view .LVU397
 1481 06bc 44309FE5 		ldr	r3, .L68+28	@,
 1482 06c0 EC20A0E3 		mov	r2, #236	@,
 1483 06c4 40109FE5 		ldr	r1, .L68+32	@,
 1484 06c8 40009FE5 		ldr	r0, .L68+36	@,
 1485 06cc FEFFFFEB 		bl	__assert_fail		@
 1486              	.LVL104:
 1487              	.L67:
 290:armwave.c     ****         exit(-1);
 1488              		.loc 1 290 9 view .LVU398
 1489 06d0 3C309FE5 		ldr	r3, .L68+40	@ tmp202,
 1490 06d4 0820A0E1 		mov	r2, r8	@, _22
 1491 06d8 38109FE5 		ldr	r1, .L68+44	@,
 1492 06dc 000093E5 		ldr	r0, [r3]	@, stderr
 1493 06e0 FEFFFFEB 		bl	fprintf		@
 1494              	.LVL105:
 291:armwave.c     ****     }
 1495              		.loc 1 291 9 view .LVU399
 1496 06e4 0000E0E3 		mvn	r0, #0	@,
 1497 06e8 FEFFFFEB 		bl	exit		@
 1498              	.LVL106:
 1499              	.L69:
 1500              		.align	2
 1501              	.L68:
 1502 06ec 0000803F 		.word	1065353216
 1503 06f0 00007F43 		.word	1132396544
 1504 06f4 00008047 		.word	1199570944
 1505 06f8 B4010000 		.word	.LC11
 1506 06fc 00000000 		.word	g_armwave_state
 1507 0700 04020000 		.word	.LC14
 1508 0704 A8020000 		.word	.LC16
 1509 0708 00000000 		.word	.LANCHOR0
 1510 070c E0010000 		.word	.LC12
 1511 0710 EC010000 		.word	.LC13
 1512 0714 00000000 		.word	stderr
 1513 0718 64020000 		.word	.LC15
 1514              		.cfi_endproc
 1515              	.LFE62:
 1517              		.align	2
 1518              		.global	armwave_set_wave_pointer
 1519              		.syntax unified
 1520              		.arm
 1521              		.fpu vfp
 1523              	armwave_set_wave_pointer:
 1524              	.LVL107:
 1525              	.LFB63:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1526              		.loc 1 327 1 view -0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1530              		.loc 1 328 5 view .LVU401
 1531 071c 000050E3 		cmp	r0, #0	@ wave_buffer
 1532              		.loc 1 328 5 is_stmt 0 view .LVU402
 1533 0720 0200000A 		beq	.L75		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1534              		.loc 1 329 5 is_stmt 1 view .LVU403
 1535              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1536              		.loc 1 329 33 is_stmt 0 view .LVU404
 1537 0724 1C309FE5 		ldr	r3, .L76	@ tmp115,
 1538 0728 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1539 072c 1EFF2FE1 		bx	lr	@
 1540              	.L75:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1541              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU405
 1542              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1543              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU406
 1544 0730 10402DE9 		push	{r4, lr}	@
 1545              		.cfi_def_cfa_offset 8
 1546              		.cfi_offset 4, -8
 1547              		.cfi_offset 14, -4
 1548              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1549              		.loc 1 328 5 discriminator 1 view .LVU407
 1550 0734 522FA0E3 		mov	r2, #328	@,
 1551 0738 0C309FE5 		ldr	r3, .L76+4	@,
 1552 073c 0C109FE5 		ldr	r1, .L76+8	@,
 1553 0740 0C009FE5 		ldr	r0, .L76+12	@,
 1554              	.LVL108:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1555              		.loc 1 328 5 discriminator 1 view .LVU408
 1556 0744 FEFFFFEB 		bl	__assert_fail		@
 1557              	.LVL109:
 1558              	.L77:
 1559              		.align	2
 1560              	.L76:
 1561 0748 00000000 		.word	g_armwave_state
 1562 074c 18000000 		.word	.LANCHOR0+24
 1563 0750 E0010000 		.word	.LC12
 1564 0754 CC020000 		.word	.LC17
 1565              		.cfi_endproc
 1566              	.LFE63:
 1568              		.align	2
 1569              		.global	armwave_set_wave_pointer_as_testbuf
 1570              		.syntax unified
 1571              		.arm
 1572              		.fpu vfp
 1574              	armwave_set_wave_pointer_as_testbuf:
 1575              	.LVL110:
 1576              	.LFB64:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1577              		.loc 1 337 1 is_stmt 1 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1582              		.loc 1 338 5 view .LVU410
 1583              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1584              		.loc 1 338 29 is_stmt 0 view .LVU411
 1585 0758 24309FE5 		ldr	r3, .L81	@ tmp117,
 1586              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1587              		.loc 1 338 7 view .LVU412
 1588 075c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1589 0760 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1590 0764 0400003A 		bcc	.L80		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1591              		.loc 1 343 5 is_stmt 1 view .LVU413
 1592              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1593              		.loc 1 343 111 is_stmt 0 view .LVU414
 1594 0768 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1595              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1596              		.loc 1 343 68 view .LVU415
 1597 076c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1598 0770 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1599              	.LVL111:
 1600              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1601              		.loc 1 343 33 view .LVU416
 1602 0774 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1603              	@ armwave.c:344: }
 344:armwave.c     **** }
 1604              		.loc 1 344 1 view .LVU417
 1605 0778 1EFF2FE1 		bx	lr	@
 1606              	.LVL112:
 1607              	.L80:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1608              		.loc 1 339 9 is_stmt 1 view .LVU418
 1609 077c 04009FE5 		ldr	r0, .L81+4	@,
 1610              	.LVL113:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1611              		.loc 1 339 9 is_stmt 0 view .LVU419
 1612 0780 FEFFFFEA 		b	puts		@
 1613              	.LVL114:
 1614              	.L82:
 1615              		.align	2
 1616              	.L81:
 1617 0784 00000000 		.word	g_armwave_state
 1618 0788 E0020000 		.word	.LC18
 1619              		.cfi_endproc
 1620              	.LFE64:
 1622              		.align	2
 1623              		.global	armwave_set_wave_pointer_u32
 1624              		.syntax unified
 1625              		.arm
 1626              		.fpu vfp
 1628              	armwave_set_wave_pointer_u32:
 1629              	.LVL115:
 1630              	.LFB65:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1631              		.loc 1 351 1 is_stmt 1 view -0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1635              		.loc 1 352 5 view .LVU421
 1636 078c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1637              		.loc 1 352 5 is_stmt 0 view .LVU422
 1638 0790 0200000A 		beq	.L88		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1639              		.loc 1 353 5 is_stmt 1 view .LVU423
 1640              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1641              		.loc 1 353 33 is_stmt 0 view .LVU424
 1642 0794 1C309FE5 		ldr	r3, .L89	@ tmp116,
 1643 0798 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1644 079c 1EFF2FE1 		bx	lr	@
 1645              	.L88:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1646              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU425
 1647              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1648              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU426
 1649 07a0 10402DE9 		push	{r4, lr}	@
 1650              		.cfi_def_cfa_offset 8
 1651              		.cfi_offset 4, -8
 1652              		.cfi_offset 14, -4
 1653              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1654              		.loc 1 352 5 discriminator 1 view .LVU427
 1655 07a4 162EA0E3 		mov	r2, #352	@,
 1656 07a8 0C309FE5 		ldr	r3, .L89+4	@,
 1657 07ac 0C109FE5 		ldr	r1, .L89+8	@,
 1658 07b0 0C009FE5 		ldr	r0, .L89+12	@,
 1659              	.LVL116:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1660              		.loc 1 352 5 discriminator 1 view .LVU428
 1661 07b4 FEFFFFEB 		bl	__assert_fail		@
 1662              	.LVL117:
 1663              	.L90:
 1664              		.align	2
 1665              	.L89:
 1666 07b8 00000000 		.word	g_armwave_state
 1667 07bc 34000000 		.word	.LANCHOR0+52
 1668 07c0 E0010000 		.word	.LC12
 1669 07c4 1C030000 		.word	.LC19
 1670              		.cfi_endproc
 1671              	.LFE65:
 1673              		.align	2
 1674              		.global	armwave_clear_buffer
 1675              		.syntax unified
 1676              		.arm
 1677              		.fpu vfp
 1679              	armwave_clear_buffer:
 1680              	.LVL118:
 1681              	.LFB66:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1682              		.loc 1 360 1 is_stmt 1 view -0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 0, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1687              		.loc 1 362 5 view .LVU430
 1688              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1689              		.loc 1 362 58 is_stmt 0 view .LVU431
 1690 07c8 0C309FE5 		ldr	r3, .L92	@ tmp114,
 1691              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1692              		.loc 1 362 5 view .LVU432
 1693 07cc 0010A0E3 		mov	r1, #0	@,
 1694 07d0 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1695 07d4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1696              	.LVL119:
 1697              		.loc 1 362 5 view .LVU433
 1698 07d8 FEFFFFEA 		b	memset		@
 1699              	.LVL120:
 1700              	.L93:
 1701              		.align	2
 1702              	.L92:
 1703 07dc 00000000 		.word	g_armwave_state
 1704              		.cfi_endproc
 1705              	.LFE66:
 1707              		.align	2
 1708              		.global	armwave_set_channel_colour
 1709              		.syntax unified
 1710              		.arm
 1711              		.fpu vfp
 1713              	armwave_set_channel_colour:
 1714              	.LVL121:
 1715              	.LFB67:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1716              		.loc 1 369 1 is_stmt 1 view -0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1721              		.loc 1 371 5 view .LVU435
 1722 07e0 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1723              		.loc 1 373 13 view .LVU436
 1724              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1725              		.loc 1 373 41 is_stmt 0 view .LVU437
 1726 07e4 0C009F05 		ldreq	r0, .L96	@ tmp117,
 1727              	.LVL122:
 1728              		.loc 1 373 41 view .LVU438
 1729 07e8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1730              		.loc 1 374 13 is_stmt 1 view .LVU439
 1731              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1732              		.loc 1 374 41 is_stmt 0 view .LVU440
 1733 07ec BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1734              		.loc 1 375 13 is_stmt 1 view .LVU441
 1735              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1736              		.loc 1 375 41 is_stmt 0 view .LVU442
 1737 07f0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1738              		.loc 1 376 13 is_stmt 1 view .LVU443
 1739              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1740              		.loc 1 378 1 is_stmt 0 view .LVU444
 1741 07f4 1EFF2FE1 		bx	lr	@
 1742              	.L97:
 1743              		.align	2
 1744              	.L96:
 1745 07f8 00000000 		.word	g_armwave_state
 1746              		.cfi_endproc
 1747              	.LFE67:
 1749              		.align	2
 1750              		.global	armwave_dump_ppm_debug
 1751              		.syntax unified
 1752              		.arm
 1753              		.fpu vfp
 1755              	armwave_dump_ppm_debug:
 1756              	.LVL123:
 1757              	.LFB68:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1758              		.loc 1 384 1 is_stmt 1 view -0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1762              		.loc 1 385 5 view .LVU446
 1763              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1764              		.loc 1 384 1 is_stmt 0 view .LVU447
 1765 07fc 0130A0E1 		mov	r3, r1	@ fn, fn
 1766 0800 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1767              		.cfi_def_cfa_offset 28
 1768              		.cfi_offset 4, -28
 1769              		.cfi_offset 5, -24
 1770              		.cfi_offset 6, -20
 1771              		.cfi_offset 7, -16
 1772              		.cfi_offset 8, -12
 1773              		.cfi_offset 9, -8
 1774              		.cfi_offset 14, -4
 1775 0804 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1776 0808 0CD04DE2 		sub	sp, sp, #12	@,,
 1777              		.cfi_def_cfa_offset 40
 1778              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1779              		.loc 1 385 16 view .LVU448
 1780 080c C4109FE5 		ldr	r1, .L106	@,
 1781              	.LVL124:
 1782              		.loc 1 385 16 view .LVU449
 1783 0810 0300A0E1 		mov	r0, r3	@, fn
 1784              	.LVL125:
 1785              		.loc 1 385 16 view .LVU450
 1786 0814 FEFFFFEB 		bl	fopen64		@
 1787              	.LVL126:
 1788              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1789              		.loc 1 392 5 view .LVU451
 1790 0818 BC609FE5 		ldr	r6, .L106+4	@ tmp150,
 1791              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1792              		.loc 1 391 5 view .LVU452
 1793 081c 0320A0E3 		mov	r2, #3	@,
 1794 0820 0110A0E3 		mov	r1, #1	@,
 1795              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1796              		.loc 1 385 16 view .LVU453
 1797 0824 0070A0E1 		mov	r7, r0	@ fp,
 1798              	.LVL127:
 386:armwave.c     ****     uint32_t data;
 1799              		.loc 1 386 5 is_stmt 1 view .LVU454
 387:armwave.c     **** 
 1800              		.loc 1 387 5 view .LVU455
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1801              		.loc 1 391 5 view .LVU456
 1802 0828 0030A0E1 		mov	r3, r0	@, fp
 1803 082c AC009FE5 		ldr	r0, .L106+8	@,
 1804              	.LVL128:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1805              		.loc 1 391 5 is_stmt 0 view .LVU457
 1806 0830 FEFFFFEB 		bl	fwrite		@
 1807              	.LVL129:
 1808              		.loc 1 392 5 is_stmt 1 view .LVU458
 1809 0834 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1810 0838 A4109FE5 		ldr	r1, .L106+12	@,
 1811 083c 0700A0E1 		mov	r0, r7	@, fp
 1812 0840 FEFFFFEB 		bl	fprintf		@
 1813              	.LVL130:
 393:armwave.c     ****     fputs("255\n", fp);
 1814              		.loc 1 393 5 view .LVU459
 1815 0844 0420A0E3 		mov	r2, #4	@,
 1816 0848 0730A0E1 		mov	r3, r7	@, fp
 1817 084c 0110A0E3 		mov	r1, #1	@,
 1818 0850 90009FE5 		ldr	r0, .L106+16	@,
 1819 0854 FEFFFFEB 		bl	fwrite		@
 1820              	.LVL131:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1821              		.loc 1 395 5 view .LVU460
 1822              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1823              		.loc 1 395 37 is_stmt 0 view .LVU461
 1824 0858 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1825              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1826              		.loc 1 395 5 view .LVU462
 1827 085c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1828 0860 180000DA 		ble	.L99		@,
 1829 0864 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1830              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1831              		.loc 1 400 13 view .LVU463
 1832 0868 7C909FE5 		ldr	r9, .L106+20	@ tmp152,
 1833              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1834              		.loc 1 395 12 view .LVU464
 1835 086c 0050A0E3 		mov	r5, #0	@ yy,
 1836              	.LVL132:
 1837              	.L100:
 1838              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1839              		.loc 1 396 9 view .LVU465
 1840 0870 000053E3 		cmp	r3, #0	@ _13,
 1841              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1842              		.loc 1 396 16 view .LVU466
 1843 0874 0040A0C3 		movgt	r4, #0	@ xx,
 1844              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1845              		.loc 1 396 9 view .LVU467
 1846 0878 0F0000DA 		ble	.L102		@,
 1847              	.LVL133:
 1848              	.L101:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1849              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU468
 1850              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1851              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU469
 1852 087c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1853              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1854              		.loc 1 400 13 discriminator 3 view .LVU470
 1855 0880 0910A0E1 		mov	r1, r9	@, tmp152
 1856 0884 0700A0E1 		mov	r0, r7	@, fp
 1857              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1858              		.loc 1 397 18 discriminator 3 view .LVU471
 1859 0888 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1860              	.LVL134:
 1861              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU472
 1862              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1863              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU473
 1864 088c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1865              	.LVL135:
 1866              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1867              		.loc 1 400 81 discriminator 3 view .LVU474
 1868 0890 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1869              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1870              		.loc 1 400 61 discriminator 3 view .LVU475
 1871 0894 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1872              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1873              		.loc 1 400 13 discriminator 3 view .LVU476
 1874 0898 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1875 089c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1876 08a0 00C08DE5 		str	ip, [sp]	@ tmp147,
 1877 08a4 7220EFE6 		uxtb	r2, r2	@, data
 1878              	.LVL136:
 1879              		.loc 1 400 13 discriminator 3 view .LVU477
 1880 08a8 FEFFFFEB 		bl	fprintf		@
 1881              	.LVL137:
 1882              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1883              		.loc 1 396 41 discriminator 3 view .LVU478
 1884 08ac 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1885              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1886              		.loc 1 396 9 discriminator 3 view .LVU479
 1887 08b0 040053E1 		cmp	r3, r4	@ _13, xx
 1888 08b4 F0FFFFCA 		bgt	.L101		@,
 1889 08b8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1890              	.LVL138:
 1891              	.L102:
 1892              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1893              		.loc 1 395 55 discriminator 2 view .LVU480
 1894 08bc 015085E2 		add	r5, r5, #1	@ yy, yy,
 1895              	.LVL139:
 1896              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1897              		.loc 1 395 5 discriminator 2 view .LVU481
 1898 08c0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1899 08c4 E9FFFFBA 		blt	.L100		@,
 1900              	.LVL140:
 1901              	.L99:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1902              		.loc 1 404 5 is_stmt 1 view .LVU482
 1903 08c8 0700A0E1 		mov	r0, r7	@, fp
 1904              	@ armwave.c:405: }
 405:armwave.c     **** }
 1905              		.loc 1 405 1 is_stmt 0 view .LVU483
 1906 08cc 0CD08DE2 		add	sp, sp, #12	@,,
 1907              		.cfi_def_cfa_offset 28
 1908              		@ sp needed	@
 1909 08d0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1910              		.cfi_restore 14
 1911              		.cfi_restore 9
 1912              		.cfi_restore 8
 1913              		.cfi_restore 7
 1914              		.cfi_restore 6
 1915              		.cfi_restore 5
 1916              		.cfi_restore 4
 1917              		.cfi_def_cfa_offset 0
 1918              	.LVL141:
 1919              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1920              		.loc 1 404 5 view .LVU484
 1921 08d4 FEFFFFEA 		b	fclose		@
 1922              	.LVL142:
 1923              	.L107:
 404:armwave.c     **** }
 1924              		.loc 1 404 5 view .LVU485
 1925              		.align	2
 1926              	.L106:
 1927 08d8 34030000 		.word	.LC20
 1928 08dc 00000000 		.word	g_armwave_state
 1929 08e0 38030000 		.word	.LC21
 1930 08e4 3C030000 		.word	.LC22
 1931 08e8 44030000 		.word	.LC23
 1932 08ec 4C030000 		.word	.LC24
 1933              		.cfi_endproc
 1934              	.LFE68:
 1936              		.align	2
 1937              		.global	armwave_test_init
 1938              		.syntax unified
 1939              		.arm
 1940              		.fpu vfp
 1942              	armwave_test_init:
 1943              	.LVL143:
 1944              	.LFB69:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1945              		.loc 1 411 1 is_stmt 1 view -0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 0
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1949              		.loc 1 412 5 view .LVU487
 1950              	.LBB12:
 1951              	.LBI12:
  34:armwave.c     **** {
 1952              		.loc 1 34 6 view .LVU488
  34:armwave.c     **** {
 1953              		.loc 1 34 6 is_stmt 0 view .LVU489
 1954              	.LBE12:
 1955              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1956              		.loc 1 411 1 view .LVU490
 1957 08f0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1958              		.cfi_def_cfa_offset 32
 1959              		.cfi_offset 4, -32
 1960              		.cfi_offset 5, -28
 1961              		.cfi_offset 6, -24
 1962              		.cfi_offset 7, -20
 1963              		.cfi_offset 8, -16
 1964              		.cfi_offset 9, -12
 1965              		.cfi_offset 10, -8
 1966              		.cfi_offset 14, -4
 1967 08f4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1968              		.cfi_def_cfa_offset 56
 1969              		.cfi_offset 80, -56
 1970              		.cfi_offset 81, -52
 1971              		.cfi_offset 82, -48
 1972              		.cfi_offset 83, -44
 1973              		.cfi_offset 84, -40
 1974              		.cfi_offset 85, -36
 1975 08f8 BC409FE5 		ldr	r4, .L112+20	@ ivtmp.86,
 1976              	.LBB15:
 1977              	.LBB13:
 1978              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1979              		.loc 1 40 32 view .LVU491
 1980 08fc 2DAA9FED 		vldr.32	s20, .L112+16	@ tmp136,
 1981              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1982              		.loc 1 40 26 view .LVU492
 1983 0900 289B9FED 		vldr.64	d9, .L112	@ tmp151,
 1984              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1985              		.loc 1 40 49 view .LVU493
 1986 0904 298B9FED 		vldr.64	d8, .L112+8	@ tmp139,
 1987 0908 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.86,
 1988              	.LBE13:
 1989              	.LBE15:
 1990              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1991              		.loc 1 411 1 view .LVU494
 1992 090c 10D04DE2 		sub	sp, sp, #16	@,,
 1993              		.cfi_def_cfa_offset 72
 1994              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1995              		.loc 1 411 1 view .LVU495
 1996 0910 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1997 0914 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1998 0918 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1999 091c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2000 0920 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.86,
 2001 0924 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2002              	.LVL144:
 2003              	.L109:
 2004              	.LBB16:
 2005              	.LBB14:
  40:armwave.c     ****     }
 2006              		.loc 1 40 9 is_stmt 1 view .LVU496
 2007              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2008              		.loc 1 40 32 is_stmt 0 view .LVU497
 2009 0928 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.86
 2010              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2011              		.loc 1 40 26 view .LVU498
 2012 092c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2013              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2014              		.loc 1 40 32 view .LVU499
 2015 0930 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2016 0934 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2017 0938 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2018              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2019              		.loc 1 40 26 view .LVU500
 2020 093c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2021 0940 FEFFFFEB 		bl	pow		@
 2022              	.LVL145:
 2023              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2024              		.loc 1 40 49 view .LVU501
 2025 0944 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2026              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2027              		.loc 1 40 24 view .LVU502
 2028 0948 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2029 094c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2030 0950 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2031              	.LVL146:
 2032              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2033              		.loc 1 39 5 view .LVU503
 2034 0954 0A0054E1 		cmp	r4, r10	@ ivtmp.86, _39
 2035 0958 F2FFFF1A 		bne	.L109		@,
 2036              	.LVL147:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2037              		.loc 1 39 5 view .LVU504
 2038              	.LBE14:
 2039              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2040              		.loc 1 415 5 is_stmt 1 view .LVU505
 2041              	.LBB17:
 2042              	.LBI17:
 368:armwave.c     **** {
 2043              		.loc 1 368 6 view .LVU506
 2044              	.LBB18:
 371:armwave.c     ****         case 1:
 2045              		.loc 1 371 5 view .LVU507
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2046              		.loc 1 373 13 view .LVU508
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2047              		.loc 1 374 13 view .LVU509
 2048              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2049              		.loc 1 373 41 is_stmt 0 view .LVU510
 2050 095c 5CC09FE5 		ldr	ip, .L112+24	@ tmp142,
 2051 0960 5C409FE5 		ldr	r4, .L112+28	@ tmp143,
 2052              	.LBE18:
 2053              	.LBE17:
 2054              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2055              		.loc 1 417 5 view .LVU511
 2056 0964 0000A0E3 		mov	r0, #0	@ tmp147,
 2057              	.LBB22:
 2058              	.LBB19:
 2059              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 2060              		.loc 1 375 41 view .LVU512
 2061 0968 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2062              	.LBE19:
 2063              	.LBE22:
 2064              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2065              		.loc 1 417 5 view .LVU513
 2066 096c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2067 0970 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2068 0974 00808DE5 		str	r8, [sp]	@ render_width,
 2069 0978 0610A0E1 		mov	r1, r6	@, tmp3
 2070 097c 0720A0E1 		mov	r2, r7	@, nwaves
 2071              	.LBB23:
 2072              	.LBB20:
 2073              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2074              		.loc 1 373 41 view .LVU514
 2075 0980 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 2076              		.loc 1 375 13 is_stmt 1 view .LVU515
 2077              	.LBE20:
 2078              	.LBE23:
 2079              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2080              		.loc 1 417 5 is_stmt 0 view .LVU516
 2081 0984 0630A0E1 		mov	r3, r6	@, wave_size
 2082              	.LBB24:
 2083              	.LBB21:
 2084              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 2085              		.loc 1 375 41 view .LVU517
 2086 0988 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 2087              		.loc 1 376 13 is_stmt 1 view .LVU518
 2088              	.LVL148:
 376:armwave.c     ****     }
 2089              		.loc 1 376 13 is_stmt 0 view .LVU519
 2090              	.LBE21:
 2091              	.LBE24:
 2092              		.loc 1 417 5 is_stmt 1 view .LVU520
 2093 098c FEFFFFEB 		bl	armwave_setup_render		@
 2094              	.LVL149:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2095              		.loc 1 419 5 view .LVU521
 2096 0990 30109FE5 		ldr	r1, .L112+32	@,
 2097 0994 30009FE5 		ldr	r0, .L112+36	@,
 2098              	@ armwave.c:420: }
 420:armwave.c     **** }
 2099              		.loc 1 420 1 is_stmt 0 view .LVU522
 2100 0998 10D08DE2 		add	sp, sp, #16	@,,
 2101              		.cfi_def_cfa_offset 56
 2102              		@ sp needed	@
 2103 099c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2104              		.cfi_restore 84
 2105              		.cfi_restore 85
 2106              		.cfi_restore 82
 2107              		.cfi_restore 83
 2108              		.cfi_restore 80
 2109              		.cfi_restore 81
 2110              		.cfi_def_cfa_offset 32
 2111 09a0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2112              		.cfi_restore 14
 2113              		.cfi_restore 10
 2114              		.cfi_restore 9
 2115              		.cfi_restore 8
 2116              		.cfi_restore 7
 2117              		.cfi_restore 6
 2118              		.cfi_restore 5
 2119              		.cfi_restore 4
 2120              		.cfi_def_cfa_offset 0
 2121              	.LVL150:
 2122              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 2123              		.loc 1 419 5 view .LVU523
 2124 09a4 FEFFFFEA 		b	printf		@
 2125              	.LVL151:
 2126              	.L113:
 2127              		.align	3
 2128              	.L112:
 2129 09a8 000000C0 		.word	-1073741824
 2130 09ac CCCCEC3F 		.word	1072483532
 2131 09b0 00000000 		.word	0
 2132 09b4 00E06F40 		.word	1081073664
 2133 09b8 00007F43 		.word	1132396544
 2134 09bc FFFFFFFF 		.word	gamma_table-1
 2135 09c0 00000000 		.word	g_armwave_state
 2136 09c4 F609F406 		.word	116656630
 2137 09c8 00000000 		.word	.LC0
 2138 09cc 08000000 		.word	.LC1
 2139              		.cfi_endproc
 2140              	.LFE69:
 2142              		.align	2
 2143              		.global	armwave_test_fill_outbuf
 2144              		.syntax unified
 2145              		.arm
 2146              		.fpu vfp
 2148              	armwave_test_fill_outbuf:
 2149              	.LFB70:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Render image to the local allocated buffer.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_fill_outbuf()
 426:armwave.c     **** {
 2150              		.loc 1 426 1 is_stmt 1 view -0
 2151              		.cfi_startproc
 2152              		@ args = 0, pretend = 0, frame = 0
 2153              		@ frame_needed = 0, uses_anonymous_args = 0
 2154              		@ link register save eliminated.
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2155              		.loc 1 427 5 view .LVU525
 2156 09d0 04309FE5 		ldr	r3, .L115	@ tmp111,
 2157 09d4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2158 09d8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2159              	.LVL152:
 2160              	.L116:
 2161              		.align	2
 2162              	.L115:
 2163 09dc 00000000 		.word	g_armwave_state
 2164              		.cfi_endproc
 2165              	.LFE70:
 2167              		.align	2
 2168              		.global	armwave_test_dump_buffer_to_ppm
 2169              		.syntax unified
 2170              		.arm
 2171              		.fpu vfp
 2173              	armwave_test_dump_buffer_to_ppm:
 2174              	.LVL153:
 2175              	.LFB71:
 428:armwave.c     **** }
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 434:armwave.c     **** {
 2176              		.loc 1 434 1 view -0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 0, uses_anonymous_args = 0
 2180              		@ link register save eliminated.
 435:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2181              		.loc 1 435 5 view .LVU527
 2182 09e0 08309FE5 		ldr	r3, .L118	@ tmp112,
 2183 09e4 0010A0E1 		mov	r1, r0	@, fn
 2184 09e8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2185              	.LVL154:
 2186              		.loc 1 435 5 is_stmt 0 view .LVU528
 2187 09ec FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2188              	.LVL155:
 2189              	.L119:
 2190              		.loc 1 435 5 view .LVU529
 2191              		.align	2
 2192              	.L118:
 2193 09f0 00000000 		.word	g_armwave_state
 2194              		.cfi_endproc
 2195              	.LFE71:
 2197              		.align	2
 2198              		.global	armwave_test_fill_gdkbuf
 2199              		.syntax unified
 2200              		.arm
 2201              		.fpu vfp
 2203              	armwave_test_fill_gdkbuf:
 2204              	.LVL156:
 2205              	.LFB72:
 436:armwave.c     **** }
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Render GDK buffer with test funtionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 442:armwave.c     **** {
 2206              		.loc 1 442 1 is_stmt 1 view -0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
 443:armwave.c     ****     //PyObject *mv;
 444:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 445:armwave.c     **** 
 446:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 447:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2211              		.loc 1 447 5 view .LVU531
 448:armwave.c     ****     
 449:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2212              		.loc 1 450 5 view .LVU532
 2213              	@ armwave.c:447:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 447:armwave.c     ****     
 2214              		.loc 1 447 11 is_stmt 0 view .LVU533
 2215 09f4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2216              	@ armwave.c:450:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2217              		.loc 1 450 5 view .LVU534
 2218 09f8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2219              	.LVL157:
 2220              		.loc 1 450 5 view .LVU535
 2221 09fc FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2222              	.LVL158:
 2223              		.loc 1 450 5 view .LVU536
 2224              		.cfi_endproc
 2225              	.LFE72:
 2227              		.align	2
 2228              		.global	armwave_test_buffer_alloc
 2229              		.syntax unified
 2230              		.arm
 2231              		.fpu vfp
 2233              	armwave_test_buffer_alloc:
 2234              	.LVL159:
 2235              	.LFB73:
 451:armwave.c     **** }
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 457:armwave.c     **** {
 2236              		.loc 1 457 1 is_stmt 1 view -0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 0
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 458:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2240              		.loc 1 458 5 view .LVU538
 2241              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2242              		.loc 1 457 1 is_stmt 0 view .LVU539
 2243 0a00 70402DE9 		push	{r4, r5, r6, lr}	@
 2244              		.cfi_def_cfa_offset 16
 2245              		.cfi_offset 4, -16
 2246              		.cfi_offset 5, -12
 2247              		.cfi_offset 6, -8
 2248              		.cfi_offset 14, -4
 2249              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2250              		.loc 1 457 1 view .LVU540
 2251 0a04 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2252              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2253              		.loc 1 458 23 view .LVU541
 2254 0a08 44409FE5 		ldr	r4, .L128	@ tmp128,
 2255 0a0c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2256              	.LVL160:
 2257              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2258              		.loc 1 458 7 view .LVU542
 2259 0a10 000050E3 		cmp	r0, #0	@ _1,
 2260 0a14 0000000A 		beq	.L122		@,
 459:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2261              		.loc 1 459 9 is_stmt 1 view .LVU543
 2262 0a18 FEFFFFEB 		bl	free		@
 2263              	.LVL161:
 2264              	.L122:
 460:armwave.c     ****     }
 461:armwave.c     **** 
 462:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 463:armwave.c     **** 
 464:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2265              		.loc 1 464 5 view .LVU544
 2266              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2267              		.loc 1 464 75 is_stmt 0 view .LVU545
 2268 0a1c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2269 0a20 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2270              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2271              		.loc 1 464 40 view .LVU546
 2272 0a24 0610A0E1 		mov	r1, r6	@, nsets
 2273              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2274              		.loc 1 464 75 view .LVU547
 2275 0a28 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2276              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2277              		.loc 1 464 40 view .LVU548
 2278 0a2c 0500A0E1 		mov	r0, r5	@, _4
 2279 0a30 FEFFFFEB 		bl	calloc		@
 2280              	.LVL162:
 2281              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     **** 
 466:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2282              		.loc 1 466 7 view .LVU549
 2283 0a34 000050E3 		cmp	r0, #0	@ tmp124,
 2284              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2285              		.loc 1 464 38 view .LVU550
 2286 0a38 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2287              		.loc 1 466 5 is_stmt 1 view .LVU551
 2288              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 2289              		.loc 1 466 7 is_stmt 0 view .LVU552
 2290 0a3c 7080BD18 		popne	{r4, r5, r6, pc}	@
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2291              		.loc 1 467 9 is_stmt 1 view .LVU553
 2292 0a40 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2293 0a44 0620A0E1 		mov	r2, r6	@, nsets
 2294 0a48 08009FE5 		ldr	r0, .L128+4	@,
 2295              	@ armwave.c:471: }
 468:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 469:armwave.c     ****         return;
 470:armwave.c     ****     }
 471:armwave.c     **** }
 2296              		.loc 1 471 1 is_stmt 0 view .LVU554
 2297 0a4c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2298              		.cfi_restore 14
 2299              		.cfi_restore 6
 2300              		.cfi_restore 5
 2301              		.cfi_restore 4
 2302              		.cfi_def_cfa_offset 0
 2303              	.LVL163:
 2304              	@ armwave.c:467:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2305              		.loc 1 467 9 view .LVU555
 2306 0a50 FEFFFFEA 		b	printf		@
 2307              	.LVL164:
 2308              	.L129:
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2309              		.loc 1 467 9 view .LVU556
 2310              		.align	2
 2311              	.L128:
 2312 0a54 00000000 		.word	g_armwave_state
 2313 0a58 5C030000 		.word	.LC25
 2314              		.cfi_endproc
 2315              	.LFE73:
 2317              		.align	2
 2318              		.global	armwave_fill_pixbuf_into_pybuffer
 2319              		.syntax unified
 2320              		.arm
 2321              		.fpu vfp
 2323              	armwave_fill_pixbuf_into_pybuffer:
 2324              	.LVL165:
 2325              	.LFB74:
 472:armwave.c     **** 
 473:armwave.c     **** /*
 474:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 475:armwave.c     ****  */
 476:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 477:armwave.c     **** {
 2326              		.loc 1 477 1 is_stmt 1 view -0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 48
 2329              		@ frame_needed = 0, uses_anonymous_args = 0
 478:armwave.c     ****     Py_buffer buffer;
 2330              		.loc 1 478 5 view .LVU558
 479:armwave.c     ****     int ret;
 2331              		.loc 1 479 5 view .LVU559
 480:armwave.c     **** 
 481:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 482:armwave.c     **** 
 483:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2332              		.loc 1 483 5 view .LVU560
 2333              	@ armwave.c:477: {
 477:armwave.c     ****     Py_buffer buffer;
 2334              		.loc 1 477 1 is_stmt 0 view .LVU561
 2335 0a5c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2336              		.cfi_def_cfa_offset 4
 2337              		.cfi_offset 14, -4
 2338 0a60 34D04DE2 		sub	sp, sp, #52	@,,
 2339              		.cfi_def_cfa_offset 56
 2340              	@ armwave.c:483:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2341              		.loc 1 483 11 view .LVU562
 2342 0a64 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2343 0a68 0120A0E3 		mov	r2, #1	@,
 2344 0a6c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2345              	.LVL166:
 484:armwave.c     **** 
 485:armwave.c     ****     if(ret != 0) {
 2346              		.loc 1 485 5 is_stmt 1 view .LVU563
 2347              	@ armwave.c:485:     if(ret != 0) {
 2348              		.loc 1 485 7 is_stmt 0 view .LVU564
 2349 0a70 000050E3 		cmp	r0, #0	@,
 2350 0a74 0A00001A 		bne	.L134		@,
 486:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 487:armwave.c     ****         Py_RETURN_FALSE;
 488:armwave.c     ****     }
 489:armwave.c     **** 
 490:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 491:armwave.c     **** 
 492:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2351              		.loc 1 492 5 is_stmt 1 view .LVU565
 2352 0a78 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2353              	.LVL167:
 2354              		.loc 1 492 5 is_stmt 0 view .LVU566
 2355 0a7c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2356              	.LVL168:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     PyBuffer_Release(&buffer);
 2357              		.loc 1 495 5 is_stmt 1 view .LVU567
 2358 0a80 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2359 0a84 FEFFFFEB 		bl	PyBuffer_Release		@
 2360              	.LVL169:
 496:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 497:armwave.c     **** 
 498:armwave.c     ****     Py_RETURN_TRUE;
 2361              		.loc 1 498 5 view .LVU568
 2362              	.LBB25:
 2363              	.LBI25:
 2364              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2365              		.loc 2 456 20 view .LVU569
 2366              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2367              		.loc 2 458 21 view .LVU570
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2368              		.loc 2 459 5 view .LVU571
 2369              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2370              		.loc 2 459 18 is_stmt 0 view .LVU572
 2371 0a88 38309FE5 		ldr	r3, .L135	@ tmp126,
 2372              	.LBE26:
 2373              	.LBE25:
 2374              	@ armwave.c:498:     Py_RETURN_TRUE;
 2375              		.loc 1 498 5 view .LVU573
 2376 0a8c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2377              	.LBB28:
 2378              	.LBB27:
 2379              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2380              		.loc 2 459 18 view .LVU574
 2381 0a90 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2382 0a94 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2383 0a98 002083E5 		str	r2, [r3]	@ tmp128,
 2384              	.LBE27:
 2385              	.LBE28:
 2386              	@ armwave.c:499: }
 499:armwave.c     **** }
 2387              		.loc 1 499 1 view .LVU575
 2388 0a9c 34D08DE2 		add	sp, sp, #52	@,,
 2389              		.cfi_remember_state
 2390              		.cfi_def_cfa_offset 4
 2391              		@ sp needed	@
 2392 0aa0 04F09DE4 		ldr	pc, [sp], #4	@
 2393              	.LVL170:
 2394              	.L134:
 2395              		.cfi_restore_state
 486:armwave.c     ****         Py_RETURN_FALSE;
 2396              		.loc 1 486 9 is_stmt 1 view .LVU576
 2397 0aa4 20009FE5 		ldr	r0, .L135+4	@,
 2398              	.LVL171:
 486:armwave.c     ****         Py_RETURN_FALSE;
 2399              		.loc 1 486 9 is_stmt 0 view .LVU577
 2400 0aa8 FEFFFFEB 		bl	puts		@
 2401              	.LVL172:
 487:armwave.c     ****     }
 2402              		.loc 1 487 9 is_stmt 1 view .LVU578
 2403              	.LBB29:
 2404              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2405              		.loc 2 456 20 view .LVU579
 2406              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2407              		.loc 2 458 21 view .LVU580
 2408              		.loc 2 459 5 view .LVU581
 2409              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2410              		.loc 2 459 18 is_stmt 0 view .LVU582
 2411 0aac 1C309FE5 		ldr	r3, .L135+8	@ tmp120,
 2412              	.LBE30:
 2413              	.LBE29:
 2414              	@ armwave.c:487:         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 2415              		.loc 1 487 9 view .LVU583
 2416 0ab0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2417              	.LBB32:
 2418              	.LBB31:
 2419              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2420              		.loc 2 459 18 view .LVU584
 2421 0ab4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2422 0ab8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2423 0abc 002083E5 		str	r2, [r3]	@ tmp122,
 2424              	.LBE31:
 2425              	.LBE32:
 2426              	@ armwave.c:499: }
 2427              		.loc 1 499 1 view .LVU585
 2428 0ac0 34D08DE2 		add	sp, sp, #52	@,,
 2429              		.cfi_def_cfa_offset 4
 2430              		@ sp needed	@
 2431 0ac4 04F09DE4 		ldr	pc, [sp], #4	@
 2432              	.L136:
 2433              		.align	2
 2434              	.L135:
 2435 0ac8 00000000 		.word	_Py_TrueStruct
 2436 0acc B0030000 		.word	.LC26
 2437 0ad0 00000000 		.word	_Py_FalseStruct
 2438              		.cfi_endproc
 2439              	.LFE74:
 2441              		.align	2
 2442              		.global	armwave_test_create_am_sine
 2443              		.syntax unified
 2444              		.arm
 2445              		.fpu vfp
 2447              	armwave_test_create_am_sine:
 2448              	.LVL173:
 2449              	.LFB75:
 500:armwave.c     **** 
 501:armwave.c     **** /*
 502:armwave.c     ****  * Make a test AM waveform for render tests.
 503:armwave.c     ****  *
 504:armwave.c     ****  * @param   mod                     modulation depth
 505:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 506:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 509:armwave.c     **** {
 2450              		.loc 1 509 1 is_stmt 1 view -0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 8
 2453              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     float v, noise, xnoise, mod_val;
 2454              		.loc 1 510 5 view .LVU587
 511:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2455              		.loc 1 511 5 view .LVU588
 2456              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2457              		.loc 1 509 1 is_stmt 0 view .LVU589
 2458 0ad4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2459              		.cfi_def_cfa_offset 32
 2460              		.cfi_offset 4, -32
 2461              		.cfi_offset 5, -28
 2462              		.cfi_offset 6, -24
 2463              		.cfi_offset 7, -20
 2464              		.cfi_offset 8, -16
 2465              		.cfi_offset 9, -12
 2466              		.cfi_offset 10, -8
 2467              		.cfi_offset 14, -4
 2468              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2469              		.loc 1 511 38 view .LVU590
 2470 0ad8 7A7A9FED 		vldr.32	s14, .L168	@ tmp180,
 2471              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2472              		.loc 1 511 55 view .LVU591
 2473 0adc 00529FE5 		ldr	r5, .L168+28	@ tmp250,
 2474              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2475              		.loc 1 509 1 view .LVU592
 2476 0ae0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2477              		.cfi_def_cfa_offset 80
 2478              		.cfi_offset 80, -80
 2479              		.cfi_offset 81, -76
 2480              		.cfi_offset 82, -72
 2481              		.cfi_offset 83, -68
 2482              		.cfi_offset 84, -64
 2483              		.cfi_offset 85, -60
 2484              		.cfi_offset 86, -56
 2485              		.cfi_offset 87, -52
 2486              		.cfi_offset 88, -48
 2487              		.cfi_offset 89, -44
 2488              		.cfi_offset 90, -40
 2489              		.cfi_offset 91, -36
 2490 0ae4 0090A0E1 		mov	r9, r0	@ sets, sets
 2491              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2492              		.loc 1 511 38 view .LVU593
 2493 0ae8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2494              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     int s, set_offset = 0;
 513:armwave.c     ****     int w, x;
 514:armwave.c     **** 
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2495              		.loc 1 515 70 view .LVU594
 2496 0aec 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2497 0af0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2498              	.LBB35:
 2499              	.LBB36:
 2500              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2501              		.loc 1 458 23 view .LVU595
 2502 0af4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2503              	.LVL174:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2504              		.loc 1 458 23 view .LVU596
 2505              	.LBE36:
 2506              	.LBE35:
 2507              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2508              		.loc 1 511 38 view .LVU597
 2509 0af8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2510              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2511              		.loc 1 515 70 view .LVU598
 2512 0afc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2513              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2514              		.loc 1 509 1 view .LVU599
 2515 0b00 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2516              	.LBB40:
 2517              	.LBB37:
 2518              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2519              		.loc 1 458 7 view .LVU600
 2520 0b04 000050E3 		cmp	r0, #0	@ _82,
 2521              	.LBE37:
 2522              	.LBE40:
 2523              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2524              		.loc 1 509 1 view .LVU601
 2525 0b08 08D04DE2 		sub	sp, sp, #8	@,,
 2526              		.cfi_def_cfa_offset 88
 2527              	@ armwave.c:516:     g_armwave_state.test_wave_buffer_nsets = sets;
 516:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2528              		.loc 1 516 44 view .LVU602
 2529 0b0c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2530              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2531              		.loc 1 515 45 view .LVU603
 2532 0b10 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2533              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2534              		.loc 1 511 38 view .LVU604
 2535 0b14 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2536              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2537              		.loc 1 511 11 view .LVU605
 2538 0b18 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2539              	.LVL175:
 512:armwave.c     ****     int w, x;
 2540              		.loc 1 512 5 is_stmt 1 view .LVU606
 513:armwave.c     **** 
 2541              		.loc 1 513 5 view .LVU607
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2542              		.loc 1 515 5 view .LVU608
 2543              		.loc 1 516 5 view .LVU609
 517:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2544              		.loc 1 517 5 view .LVU610
 2545              	.LBB41:
 2546              	.LBI35:
 456:armwave.c     **** {
 2547              		.loc 1 456 6 view .LVU611
 2548              	.LBB38:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2549              		.loc 1 458 5 view .LVU612
 2550              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2551              		.loc 1 458 7 is_stmt 0 view .LVU613
 2552 0b1c 0000000A 		beq	.L138		@,
 459:armwave.c     ****     }
 2553              		.loc 1 459 9 is_stmt 1 view .LVU614
 2554 0b20 FEFFFFEB 		bl	free		@
 2555              	.LVL176:
 2556              	.L138:
 464:armwave.c     **** 
 2557              		.loc 1 464 5 view .LVU615
 2558              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2559              		.loc 1 464 75 is_stmt 0 view .LVU616
 2560 0b24 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2561 0b28 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2562              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2563              		.loc 1 464 40 view .LVU617
 2564 0b2c 0910A0E1 		mov	r1, r9	@, sets
 2565              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2566              		.loc 1 464 75 view .LVU618
 2567 0b30 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2568              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2569              		.loc 1 464 40 view .LVU619
 2570 0b34 0400A0E1 		mov	r0, r4	@, _85
 2571 0b38 FEFFFFEB 		bl	calloc		@
 2572              	.LVL177:
 2573              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2574              		.loc 1 466 7 view .LVU620
 2575 0b3c 000050E3 		cmp	r0, #0	@ tmp191,
 2576              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2577              		.loc 1 464 38 view .LVU621
 2578 0b40 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2579              		.loc 1 466 5 is_stmt 1 view .LVU622
 2580              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2581              		.loc 1 466 7 is_stmt 0 view .LVU623
 2582 0b44 5A00000A 		beq	.L167		@,
 2583              	.L139:
 2584              	.LVL178:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2585              		.loc 1 466 7 view .LVU624
 2586              	.LBE38:
 2587              	.LBE41:
 2588              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 518:armwave.c     **** 
 519:armwave.c     ****     for(s = 0; s < sets; s++) {
 2589              		.loc 1 519 5 discriminator 1 view .LVU625
 2590 0b48 000059E3 		cmp	r9, #0	@ sets,
 2591 0b4c 550000DA 		ble	.L137		@,
 2592              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 521:armwave.c     ****     
 522:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 524:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 525:armwave.c     **** 
 526:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 527:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     ****                 noise *= noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 533:armwave.c     ****                     noise = -noise;
 534:armwave.c     **** 
 535:armwave.c     ****                 noise += 1.0f;
 536:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 537:armwave.c     **** 
 538:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2593              		.loc 1 538 45 view .LVU626
 2594 0b50 5C8A9FED 		vldr.32	s16, .L168	@ tmp258,
 2595              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 539:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 540:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 541:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2596              		.loc 1 541 104 view .LVU627
 2597 0b54 5CCA9FED 		vldr.32	s24, .L168+4	@ tmp259,
 2598              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2599              		.loc 1 519 5 view .LVU628
 2600 0b58 0070A0E3 		mov	r7, #0	@ set_offset,
 2601              	@ armwave.c:520:         printf("Calculating test set %d\n", s);
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2602              		.loc 1 520 9 view .LVU629
 2603 0b5c 84A19FE5 		ldr	r10, .L168+32	@ tmp257,
 2604              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2605              		.loc 1 519 5 view .LVU630
 2606 0b60 0780A0E1 		mov	r8, r7	@ s, set_offset
 2607              	.LVL179:
 2608              	.L140:
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2609              		.loc 1 520 9 is_stmt 1 view .LVU631
 2610 0b64 0810A0E1 		mov	r1, r8	@, s
 2611 0b68 0A00A0E1 		mov	r0, r10	@, tmp257
 2612 0b6c FEFFFFEB 		bl	printf		@
 2613              	.LVL180:
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2614              		.loc 1 522 9 view .LVU632
 2615              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2616              		.loc 1 522 39 is_stmt 0 view .LVU633
 2617 0b70 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2618              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2619              		.loc 1 522 9 view .LVU634
 2620 0b74 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2621 0b78 450000DA 		ble	.L141		@,
 2622              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2623              		.loc 1 524 21 view .LVU635
 2624 0b7c 53CADFED 		vldr.32	s25, .L168+8	@ tmp200,
 2625              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2626              		.loc 1 538 33 view .LVU636
 2627 0b80 53BA9FED 		vldr.32	s22, .L168+12	@ tmp253,
 2628              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2629              		.loc 1 536 24 view .LVU637
 2630 0b84 53AADFED 		vldr.32	s21, .L168+16	@ tmp254,
 2631 0b88 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2632              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2633              		.loc 1 522 15 view .LVU638
 2634 0b8c 0060A0E3 		mov	r6, #0	@ w,
 2635              	.LVL181:
 2636              	.L148:
 524:armwave.c     **** 
 2637              		.loc 1 524 13 is_stmt 1 view .LVU639
 2638              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2639              		.loc 1 524 21 is_stmt 0 view .LVU640
 2640 0b90 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2641 0b94 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2642              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2643              		.loc 1 526 13 view .LVU641
 2644 0b98 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2645              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2646              		.loc 1 524 21 view .LVU642
 2647 0b9c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2648 0ba0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2649              	.LVL182:
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2650              		.loc 1 526 13 is_stmt 1 view .LVU643
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2651              		.loc 1 526 13 is_stmt 0 view .LVU644
 2652 0ba4 370000DA 		ble	.L142		@,
 2653 0ba8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2654              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2655              		.loc 1 541 113 view .LVU645
 2656 0bac 4AAA9FED 		vldr.32	s20, .L168+20	@ tmp229,
 2657 0bb0 4A8ADFED 		vldr.32	s17, .L168+24	@ tmp230,
 2658              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2659              		.loc 1 526 19 view .LVU646
 2660 0bb4 0040A0E3 		mov	r4, #0	@ x,
 2661              	.LVL183:
 2662              	.L147:
 527:armwave.c     ****                 noise *= noise;
 2663              		.loc 1 527 17 is_stmt 1 view .LVU647
 2664              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2665              		.loc 1 527 28 is_stmt 0 view .LVU648
 2666 0bb8 FEFFFFEB 		bl	rand		@
 2667              	.LVL184:
 2668              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2669              		.loc 1 527 35 view .LVU649
 2670 0bbc 7000FFE6 		uxth	r0, r0	@ tmp201,
 2671              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2672              		.loc 1 527 45 view .LVU650
 2673 0bc0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2674 0bc4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2675              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2676              		.loc 1 527 24 view .LVU651
 2677 0bc8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2678              	.LVL185:
 528:armwave.c     ****                 noise *= noise;
 2679              		.loc 1 528 17 is_stmt 1 view .LVU652
 2680              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2681              		.loc 1 528 23 is_stmt 0 view .LVU653
 2682 0bcc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2683              	.LVL186:
 529:armwave.c     ****                 noise *= noise;
 2684              		.loc 1 529 17 is_stmt 1 view .LVU654
 2685              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 2686              		.loc 1 529 23 is_stmt 0 view .LVU655
 2687 0bd0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2688              	.LVL187:
 530:armwave.c     **** 
 2689              		.loc 1 530 17 is_stmt 1 view .LVU656
 2690              	@ armwave.c:530:                 noise *= noise;
 530:armwave.c     **** 
 2691              		.loc 1 530 23 is_stmt 0 view .LVU657
 2692 0bd4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2693              	.LVL188:
 532:armwave.c     ****                     noise = -noise;
 2694              		.loc 1 532 17 is_stmt 1 view .LVU658
 2695              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2696              		.loc 1 532 21 is_stmt 0 view .LVU659
 2697 0bd8 FEFFFFEB 		bl	rand		@
 2698              	.LVL189:
 533:armwave.c     **** 
 2699              		.loc 1 533 21 is_stmt 1 view .LVU660
 2700              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2701              		.loc 1 532 19 is_stmt 0 view .LVU661
 2702 0bdc 020910E3 		tst	r0, #32768	@,
 2703              	@ armwave.c:533:                     noise = -noise;
 533:armwave.c     **** 
 2704              		.loc 1 533 27 view .LVU662
 2705 0be0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2706              	.LVL190:
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2707              		.loc 1 535 17 is_stmt 1 view .LVU663
 536:armwave.c     **** 
 2708              		.loc 1 536 17 view .LVU664
 2709              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2710              		.loc 1 536 27 is_stmt 0 view .LVU665
 2711 0be4 FEFFFFEB 		bl	rand		@
 2712              	.LVL191:
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2713              		.loc 1 538 17 is_stmt 1 view .LVU666
 2714              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2715              		.loc 1 538 45 is_stmt 0 view .LVU667
 2716 0be8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2717              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2718              		.loc 1 538 33 view .LVU668
 2719 0bec 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2720              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2721              		.loc 1 538 45 view .LVU669
 2722 0bf0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2723              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2724              		.loc 1 538 33 view .LVU670
 2725 0bf4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2726              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2727              		.loc 1 538 45 view .LVU671
 2728 0bf8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2729              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2730              		.loc 1 538 33 view .LVU672
 2731 0bfc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2732              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2733              		.loc 1 536 34 view .LVU673
 2734 0c00 7000FFE6 		uxth	r0, r0	@ tmp214,
 2735              	.LVL192:
 2736              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2737              		.loc 1 536 44 view .LVU674
 2738 0c04 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2739 0c08 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2740              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2741              		.loc 1 536 24 view .LVU675
 2742 0c0c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2743              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2744              		.loc 1 538 77 view .LVU676
 2745 0c10 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2746              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2747              		.loc 1 538 22 view .LVU677
 2748 0c14 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2749 0c18 FEFFFFEB 		bl	sin		@
 2750              	.LVL193:
 2751              		.loc 1 541 17 is_stmt 1 view .LVU678
 2752              	@ armwave.c:535:                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2753              		.loc 1 535 23 is_stmt 0 view .LVU679
 2754 0c1c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2755              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2756              		.loc 1 541 104 view .LVU680
 2757 0c20 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2758              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2759              		.loc 1 538 98 view .LVU681
 2760 0c24 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2761              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2762              		.loc 1 538 87 view .LVU682
 2763 0c28 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2764              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2765              		.loc 1 538 98 view .LVU683
 2766 0c2c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2767              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2768              		.loc 1 538 19 view .LVU684
 2769 0c30 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2770              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2771              		.loc 1 541 113 view .LVU685
 2772 0c34 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2773 0c38 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2774 0c3c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2775 0c40 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2776 0c44 050000DA 		ble	.L144		@,
 2777              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2778              		.loc 1 541 104 discriminator 1 view .LVU686
 2779 0c48 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2780 0c4c FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2781 0c50 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2782 0c54 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2783 0c58 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2784 0c5c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2785              	.L144:
 2786              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2787              		.loc 1 541 57 discriminator 12 view .LVU687
 2788 0c60 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2789              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2790              		.loc 1 541 102 discriminator 12 view .LVU688
 2791 0c64 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2792 0c68 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2793 0c6c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2794              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2795              		.loc 1 526 58 discriminator 12 view .LVU689
 2796 0c70 014084E2 		add	r4, r4, #1	@ x, x,
 2797              	.LVL194:
 2798              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2799              		.loc 1 541 102 discriminator 12 view .LVU690
 2800 0c74 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2801              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2802              		.loc 1 526 43 discriminator 12 view .LVU691
 2803 0c78 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2804              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2805              		.loc 1 526 13 discriminator 12 view .LVU692
 2806 0c7c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2807 0c80 CCFFFFCA 		bgt	.L147		@,
 2808 0c84 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2809              	.LVL195:
 2810              	.L142:
 2811              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2812              		.loc 1 522 48 discriminator 2 view .LVU693
 2813 0c88 016086E2 		add	r6, r6, #1	@ w, w,
 2814              	.LVL196:
 2815              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2816              		.loc 1 522 9 discriminator 2 view .LVU694
 2817 0c8c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2818 0c90 BEFFFFBA 		blt	.L148		@,
 2819              	.LVL197:
 2820              	.L141:
 542:armwave.c     ****             }
 543:armwave.c     ****         }
 544:armwave.c     **** 
 545:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2821              		.loc 1 545 9 is_stmt 1 discriminator 2 view .LVU695
 2822              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2823              		.loc 1 545 46 is_stmt 0 discriminator 2 view .LVU696
 2824 0c94 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2825              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2826              		.loc 1 519 27 discriminator 2 view .LVU697
 2827 0c98 018088E2 		add	r8, r8, #1	@ s, s,
 2828              	.LVL198:
 2829              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2830              		.loc 1 519 5 discriminator 2 view .LVU698
 2831 0c9c 080059E1 		cmp	r9, r8	@ sets, s
 2832              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2833              		.loc 1 545 20 discriminator 2 view .LVU699
 2834 0ca0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2835              	.LVL199:
 2836              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2837              		.loc 1 519 5 discriminator 2 view .LVU700
 2838 0ca4 AEFFFF1A 		bne	.L140		@,
 2839              	.LVL200:
 2840              	.L137:
 2841              	@ armwave.c:547: }
 546:armwave.c     ****     }
 547:armwave.c     **** }
 2842              		.loc 1 547 1 view .LVU701
 2843 0ca8 08D08DE2 		add	sp, sp, #8	@,,
 2844              		.cfi_remember_state
 2845              		.cfi_def_cfa_offset 80
 2846              		@ sp needed	@
 2847 0cac 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2848              		.cfi_restore 90
 2849              		.cfi_restore 91
 2850              		.cfi_restore 88
 2851              		.cfi_restore 89
 2852              		.cfi_restore 86
 2853              		.cfi_restore 87
 2854              		.cfi_restore 84
 2855              		.cfi_restore 85
 2856              		.cfi_restore 82
 2857              		.cfi_restore 83
 2858              		.cfi_restore 80
 2859              		.cfi_restore 81
 2860              		.cfi_def_cfa_offset 32
 2861              	.LVL201:
 2862              		.loc 1 547 1 view .LVU702
 2863 0cb0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2864              	.LVL202:
 2865              	.L167:
 2866              		.cfi_restore_state
 2867              	.LBB42:
 2868              	.LBB39:
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2869              		.loc 1 467 9 is_stmt 1 view .LVU703
 2870 0cb4 940901E0 		mul	r1, r4, r9	@, _85, sets
 2871 0cb8 0920A0E1 		mov	r2, r9	@, sets
 2872 0cbc 28009FE5 		ldr	r0, .L168+36	@,
 2873 0cc0 FEFFFFEB 		bl	printf		@
 2874              	.LVL203:
 469:armwave.c     ****     }
 2875              		.loc 1 469 9 view .LVU704
 2876 0cc4 9FFFFFEA 		b	.L139		@
 2877              	.L169:
 2878              		.align	2
 2879              	.L168:
 2880 0cc8 0000803F 		.word	1065353216
 2881 0ccc 00007F43 		.word	1132396544
 2882 0cd0 0000003F 		.word	1056964608
 2883 0cd4 C3F5C840 		.word	1086911939
 2884 0cd8 38FFC74A 		.word	1254620984
 2885 0cdc 0000FE42 		.word	1123942400
 2886 0ce0 00000043 		.word	1124073472
 2887 0ce4 00000000 		.word	g_armwave_state
 2888 0ce8 04040000 		.word	.LC27
 2889 0cec 5C030000 		.word	.LC25
 2890              	.LBE39:
 2891              	.LBE42:
 2892              		.cfi_endproc
 2893              	.LFE75:
 2895              		.align	2
 2896              		.global	armwave_cleanup
 2897              		.syntax unified
 2898              		.arm
 2899              		.fpu vfp
 2901              	armwave_cleanup:
 2902              	.LFB76:
 548:armwave.c     **** 
 549:armwave.c     **** /*
 550:armwave.c     ****  * Make a test square waveform.
 551:armwave.c     ****  *
 552:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 553:armwave.c     ****  */
 554:armwave.c     **** #if 0
 555:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 556:armwave.c     **** {
 557:armwave.c     ****     uint8_t v;
 558:armwave.c     ****     float noise, xnoise;
 559:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 560:armwave.c     ****     int w, x;
 561:armwave.c     **** 
 562:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 563:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 564:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     ****             noise *= noise;
 568:armwave.c     **** 
 569:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 570:armwave.c     ****                 noise = -noise;
 571:armwave.c     **** 
 572:armwave.c     ****             //noise += 1.0f;
 573:armwave.c     **** 
 574:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 575:armwave.c     ****                 new_level = 0.2f;
 576:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 577:armwave.c     ****                 new_level = 0.8f;
 578:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 579:armwave.c     ****                 new_level = 0.2f;
 580:armwave.c     ****             } else {
 581:armwave.c     ****                 new_level = 0.8f;
 582:armwave.c     ****             }
 583:armwave.c     **** 
 584:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 585:armwave.c     **** 
 586:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 587:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 588:armwave.c     ****         }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 591:armwave.c     **** #endif
 592:armwave.c     **** 
 593:armwave.c     **** /*
 594:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 595:armwave.c     ****  */
 596:armwave.c     **** void armwave_cleanup()
 597:armwave.c     **** {
 2903              		.loc 1 597 1 view -0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 598:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2907              		.loc 1 598 5 view .LVU706
 2908              	@ armwave.c:597: {
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2909              		.loc 1 597 1 is_stmt 0 view .LVU707
 2910 0cf0 10402DE9 		push	{r4, lr}	@
 2911              		.cfi_def_cfa_offset 8
 2912              		.cfi_offset 4, -8
 2913              		.cfi_offset 14, -4
 2914              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2915              		.loc 1 598 25 view .LVU708
 2916 0cf4 34409FE5 		ldr	r4, .L172	@ tmp114,
 2917              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2918              		.loc 1 598 5 view .LVU709
 2919 0cf8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2920 0cfc FEFFFFEB 		bl	free		@
 2921              	.LVL204:
 599:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2922              		.loc 1 599 5 is_stmt 1 view .LVU710
 2923 0d00 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2924 0d04 FEFFFFEB 		bl	free		@
 2925              	.LVL205:
 600:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2926              		.loc 1 600 5 view .LVU711
 2927 0d08 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2928 0d0c FEFFFFEB 		bl	free		@
 2929              	.LVL206:
 601:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2930              		.loc 1 601 5 view .LVU712
 2931 0d10 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2932 0d14 FEFFFFEB 		bl	free		@
 2933              	.LVL207:
 602:armwave.c     **** 
 603:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2934              		.loc 1 603 5 view .LVU713
 2935              	@ armwave.c:603:     g_armwave_state.out_pixbuf = NULL;
 2936              		.loc 1 603 32 is_stmt 0 view .LVU714
 2937 0d18 0030A0E3 		mov	r3, #0	@ tmp123,
 2938 0d1c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 604:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2939              		.loc 1 604 5 is_stmt 1 view .LVU715
 2940              	@ armwave.c:604:     g_armwave_state.ch1_buffer = NULL;
 2941              		.loc 1 604 32 is_stmt 0 view .LVU716
 2942 0d20 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 605:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2943              		.loc 1 605 5 is_stmt 1 view .LVU717
 2944              	@ armwave.c:605:     g_armwave_state.xcoord_to_xpixel = NULL;
 2945              		.loc 1 605 38 is_stmt 0 view .LVU718
 2946 0d24 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 606:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2947              		.loc 1 606 5 is_stmt 1 view .LVU719
 2948              	@ armwave.c:606:     g_armwave_state.test_wave_buffer = NULL;
 2949              		.loc 1 606 38 is_stmt 0 view .LVU720
 2950 0d28 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2951              	@ armwave.c:607: }
 607:armwave.c     **** }
 2952              		.loc 1 607 1 view .LVU721
 2953 0d2c 1080BDE8 		pop	{r4, pc}	@
 2954              	.L173:
 2955              		.align	2
 2956              	.L172:
 2957 0d30 00000000 		.word	g_armwave_state
 2958              		.cfi_endproc
 2959              	.LFE76:
 2961              		.comm	gamma_table,256,4
 2962              		.comm	g_armwave_state,136,4
 2963              		.section	.rodata
 2964              		.align	2
 2965              		.set	.LANCHOR0,. + 0
 2968              	__PRETTY_FUNCTION__.17125:
 2969 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2969      6176655F 
 2969      73657475 
 2969      705F7265 
 2969      6E646572 
 2970 0015 000000   		.space	3
 2973              	__PRETTY_FUNCTION__.17129:
 2974 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2974      6176655F 
 2974      7365745F 
 2974      77617665 
 2974      5F706F69 
 2975 0031 000000   		.space	3
 2978              	__PRETTY_FUNCTION__.17136:
 2979 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2979      6176655F 
 2979      7365745F 
 2979      77617665 
 2979      5F706F69 
 2980              		.section	.rodata.str1.4,"aMS",%progbits,1
 2981              		.align	2
 2982              	.LC0:
 2983 0000 76302E30 		.ascii	"v0.0.1\000"
 2983      2E3100
 2984 0007 00       		.space	1
 2985              	.LC1:
 2986 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2986      61766520 
 2986      76657273 
 2986      696F6E3A 
 2986      2025730A 
 2987 001d 000000   		.space	3
 2988              	.LC2:
 2989 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2989      78253038 
 2989      7820623D 
 2989      30782530 
 2989      38782063 
 2990 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2990      25642073 
 2990      63616C65 
 2990      3D256420 
 2990      62697464 
 2991 0077 00       		.space	1
 2992              	.LC3:
 2993 0078 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0"
 2993      20737472 
 2993      6964653D 
 2993      25642073 
 2993      6C793D25 
 2994 00ab 78253038 		.ascii	"x%08x\012\000"
 2994      780A00
 2995 00b2 0000     		.space	2
 2996              	.LC4:
 2997 00b4 77625F65 		.ascii	"wb_end=%d\012\000"
 2997      6E643D25 
 2997      640A00
 2998 00bf 00       		.space	1
 2999              	.LC5:
 3000 00c0 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 3000      75742062 
 3000      75666665 
 3000      723A2030 
 3000      78253038 
 3001 00d7 00       		.space	1
 3002              	.LC6:
 3003 00d8 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 3003      65742025 
 3003      64206279 
 3003      7465732C 
 3003      206E7069 
 3004 010b 30782530 		.ascii	"0x%08x, dest_buffer 0x%08x, stack ~0x%08x\012\000"
 3004      38782C20 
 3004      64657374 
 3004      5F627566 
 3004      66657220 
 3005 0136 0000     		.space	2
 3006              	.LC7:
 3007 0138 69746572 		.ascii	"iter...\000"
 3007      2E2E2E00 
 3008              	.LC8:
 3009 0140 30782530 		.ascii	"0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\012\000"
 3009      38782C25 
 3009      36642C25 
 3009      36642C25 
 3009      36642C25 
 3010 0161 000000   		.space	3
 3011              	.LC9:
 3012 0164 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 3012      6F6E6520 
 3012      7061696E 
 3012      74202564 
 3012      20706978 
 3013              	.LC10:
 3014 0180 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 3014      6176655F 
 3014      67656E65 
 3014      72617465 
 3014      3A20736C 
 3015 01b1 00       		.ascii	"\000"
 3016 01b2 0000     		.space	2
 3017              	.LC11:
 3018 01b4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3018      20653D25 
 3018      6420773D 
 3018      25642077 
 3018      733D2564 
 3019              	.LC12:
 3020 01e0 61726D77 		.ascii	"armwave.c\000"
 3020      6176652E 
 3020      6300
 3021 01ea 0000     		.space	2
 3022              	.LC13:
 3023 01ec 73746172 		.ascii	"start_point < end_point\000"
 3023      745F706F 
 3023      696E7420 
 3023      3C20656E 
 3023      645F706F 
 3024              	.LC14:
 3025 0204 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3025      7566665F 
 3025      73697A65 
 3025      3D25642C 
 3025      20636D70 
 3026 0237 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3026      5F776964 
 3026      74683D25 
 3026      642C2077 
 3026      6176655F 
 3027 0261 000000   		.space	3
 3028              	.LC15:
 3029 0264 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3029      6F632066 
 3029      61696C75 
 3029      72652061 
 3029      6C6C6F63 
 3030 0297 2E636831 		.ascii	".ch1_buffer)\012\000"
 3030      5F627566 
 3030      66657229 
 3030      0A00
 3031 02a5 000000   		.space	3
 3032              	.LC16:
 3033 02a8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3033      3A203078 
 3033      25303878 
 3033      20307825 
 3033      30387820 
 3034              	.LC17:
 3035 02cc 77617665 		.ascii	"wave_buffer != NULL\000"
 3035      5F627566 
 3035      66657220 
 3035      213D204E 
 3035      554C4C00 
 3036              	.LC18:
 3037 02e0 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3037      6176655F 
 3037      7365745F 
 3037      77617665 
 3037      5F706F69 
 3038 0313 78636565 		.ascii	"xceeded\000"
 3038      64656400 
 3039 031b 00       		.space	1
 3040              	.LC19:
 3041 031c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3041      5F627566 
 3041      6665725F 
 3041      70747220 
 3041      213D2030 
 3042 0331 000000   		.space	3
 3043              	.LC20:
 3044 0334 776200   		.ascii	"wb\000"
 3045 0337 00       		.space	1
 3046              	.LC21:
 3047 0338 50330A00 		.ascii	"P3\012\000"
 3048              	.LC22:
 3049 033c 25642025 		.ascii	"%d %d\012\000"
 3049      640A00
 3050 0343 00       		.space	1
 3051              	.LC23:
 3052 0344 3235350A 		.ascii	"255\012\000"
 3052      00
 3053 0349 000000   		.space	3
 3054              	.LC24:
 3055 034c 25336420 		.ascii	"%3d %3d %3d\012\000"
 3055      25336420 
 3055      2533640A 
 3055      00
 3056 0359 000000   		.space	3
 3057              	.LC25:
 3058 035c 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3058      6176655F 
 3058      74657374 
 3058      5F627566 
 3058      6665725F 
 3059 038f 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3059      20627566 
 3059      66657220 
 3059      28256420 
 3059      62797465 
 3060              	.LC26:
 3061 03b0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3061      6176655F 
 3061      66696C6C 
 3061      5F706978 
 3061      6275665F 
 3062 03e3 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3062      20666169 
 3062      6C65642C 
 3062      20726574 
 3062      75726E69 
 3063 0402 0000     		.space	2
 3064              	.LC27:
 3065 0404 43616C63 		.ascii	"Calculating test set %d\012\000"
 3065      756C6174 
 3065      696E6720 
 3065      74657374 
 3065      20736574 
 3066              		.text
 3067              	.Letext0:
 3068              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3069              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3070              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3071              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3072              		.file 7 "/usr/include/stdio.h"
 3073              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3074              		.file 9 "/usr/include/errno.h"
 3075              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3076              		.file 11 "/usr/include/unistd.h"
 3077              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3078              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3079              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3080              		.file 15 "/usr/include/math.h"
 3081              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3082              		.file 17 "/usr/include/time.h"
 3083              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3084              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3085              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3086              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3087              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3088              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3089              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3090              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3091              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3092              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3093              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3094              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3095              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3096              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3097              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3098              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3099              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3100              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3101              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3102              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3103              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3104              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3105              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3106              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3107              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3108              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3109              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3110              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3111              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3112              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3113              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3114              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3115              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3116              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3117              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3118              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3119              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3120              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3121              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3122              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3123              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3124              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3125              		.file 60 "/usr/local/include/python3.8/context.h"
 3126              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3127              		.file 62 "/usr/local/include/python3.8/code.h"
 3128              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3129              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3130              		.file 65 "/usr/local/include/python3.8/import.h"
 3131              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3132              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3133              		.file 68 "/usr/include/malloc.h"
 3134              		.file 69 "armwave.h"
 3135              		.file 70 "/usr/include/stdlib.h"
 3136              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3137              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3138              		.file 73 "<built-in>"
 3139              		.file 74 "/usr/include/assert.h"
