   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 79 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 80 9 is_stmt 1 view .LVU46
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 84 9 view .LVU47
 299              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 84 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 87 13 is_stmt 1 view .LVU50
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 101 17 view .LVU51
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 106 17 view .LVU52
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 101 17 view .LVU53
 317              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 101 17 view .LVU55
 319              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 101 17 view .LVU57
 321              		.loc 1 106 17 view .LVU58
 322              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 323              		.loc 1 87 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 102 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 330              		.loc 1 87 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 102 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 337              		.loc 1 94 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 340              		.loc 1 87 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 89 13 is_stmt 1 view .LVU65
  91:armwave.c     ****                 
 344              		.loc 1 91 17 view .LVU66
  94:armwave.c     ****                     continue;
 345              		.loc 1 94 17 view .LVU67
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 351              		.loc 1 94 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 359              		.loc 1 107 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 363              		.loc 1 94 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 366              		.loc 1 102 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 369              		.loc 1 106 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 372              		.loc 1 94 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 375              		.loc 1 102 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 378              		.loc 1 106 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 381              		.loc 1 102 74 view .LVU78
 382 0160 2228A0E1 		lsr	r2, r2, #16	@ tmp240, tmp238,
 383              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 384              		.loc 1 106 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 387              		.loc 1 94 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 391              		.loc 1 94 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 396              		.loc 1 106 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 402              		.loc 1 106 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 107 17 is_stmt 1 view .LVU85
  91:armwave.c     ****                 
 407              		.loc 1 91 17 view .LVU86
  94:armwave.c     ****                     continue;
 408              		.loc 1 94 17 view .LVU87
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 413              		.loc 1 102 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 422              		.loc 1 102 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 425              		.loc 1 94 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 429              		.loc 1 102 74 view .LVU94
 430 01a8 2998A0E1 		lsr	r9, r9, #16	@ tmp262, tmp260,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 442              		.loc 1 106 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 107 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  91:armwave.c     ****                 
 448              		.loc 1 91 17 view .LVU99
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 17 view .LVU100
 450              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 451              		.loc 1 94 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 454              		.loc 1 102 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 461              		.loc 1 106 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 464              		.loc 1 102 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 74 view .LVU107
 471 01e8 2888A0E1 		lsr	r8, r8, #16	@ tmp284, tmp282,
 472              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 473              		.loc 1 106 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 476              		.loc 1 94 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 480              		.loc 1 94 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 484              		.loc 1 106 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 490              		.loc 1 106 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 107 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  91:armwave.c     ****                 
 495              		.loc 1 91 17 view .LVU115
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 17 view .LVU116
 497              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 498              		.loc 1 94 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 501              		.loc 1 102 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 74 view .LVU121
 511 0220 2778A0E1 		lsr	r7, r7, #16	@ tmp305, tmp303,
 512              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 513              		.loc 1 106 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 107 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 522              		.loc 1 84 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 529              		.loc 1 84 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 554              		.loc 1 111 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 111 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 577              		.loc 1 173 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b;
 583              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     uint16_t value; 
 584              		.loc 1 178 5 view .LVU139
 179:armwave.c     ****     // uint8_t row;
 180:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 180 5 view .LVU140
 586              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 587              		.loc 1 173 1 is_stmt 0 view .LVU141
 588 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 589              		.cfi_def_cfa_offset 36
 590              		.cfi_offset 4, -36
 591              		.cfi_offset 5, -32
 592              		.cfi_offset 6, -28
 593              		.cfi_offset 7, -24
 594              		.cfi_offset 8, -20
 595              		.cfi_offset 9, -16
 596              		.cfi_offset 10, -12
 597              		.cfi_offset 11, -8
 598              		.cfi_offset 14, -4
 599              	@ armwave.c:184:     assert(out_buffer != NULL);
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 182:armwave.c     ****     uint32_t offset;
 183:armwave.c     **** 
 184:armwave.c     ****     assert(out_buffer != NULL);
 600              		.loc 1 184 5 view .LVU142
 601 026c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 602              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 603              		.loc 1 180 15 view .LVU143
 604 0270 64519FE5 		ldr	r5, .L51	@ tmp218,
 605              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 606              		.loc 1 173 1 view .LVU144
 607 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 608              		.cfi_def_cfa_offset 48
 609              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 610              		.loc 1 180 15 view .LVU145
 611 0278 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 612              	.LVL22:
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 181 5 is_stmt 1 view .LVU146
 182:armwave.c     **** 
 614              		.loc 1 182 5 view .LVU147
 615              		.loc 1 184 5 view .LVU148
 616 027c 5100000A 		beq	.L48		@,
 185:armwave.c     **** 
 186:armwave.c     ****     // we don't really want to be doing this if possible
 187:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 617              		.loc 1 187 5 view .LVU149
 618              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 619              		.loc 1 187 59 is_stmt 0 view .LVU150
 620 0280 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 621 0284 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 622              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 623              		.loc 1 187 5 view .LVU151
 624 0288 0010A0E3 		mov	r1, #0	@,
 625              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 626              		.loc 1 187 59 view .LVU152
 627 028c 920302E0 		mul	r2, r2, r3	@ tmp178, g_armwave_state.target_height, g_armwave_state.target_width
 628              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 629              		.loc 1 187 5 view .LVU153
 630 0290 0221A0E1 		lsl	r2, r2, #2	@, tmp178,
 631 0294 FEFFFFEB 		bl	memset		@
 632              	.LVL23:
 188:armwave.c     **** 
 189:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 633              		.loc 1 189 5 is_stmt 1 view .LVU154
 634              	@ armwave.c:189:     npix = g_armwave_state.target_width * 256; 
 635              		.loc 1 189 10 is_stmt 0 view .LVU155
 636 0298 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 637 029c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 638              	.LVL24:
 190:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 191:armwave.c     **** 
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 639              		.loc 1 192 5 is_stmt 1 view .LVU156
 640              		.loc 1 192 5 is_stmt 0 view .LVU157
 641 02a0 000058E3 		cmp	r8, #0	@ npix,
 642 02a4 0C0000DA 		ble	.L29		@,
 643              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each 16-bit word within.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 644              		.loc 1 204 52 view .LVU158
 645 02a8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 646              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 647              		.loc 1 203 52 view .LVU159
 648 02ac FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _12, g_armwave_state.ch1_color.r
 649              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // TODO: Replace this FP math with integer math: big performance hit converting
 215:armwave.c     ****                     nsub = (n + w);
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 650              		.loc 1 216 57 view .LVU160
 651 02b0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 652              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 653              		.loc 1 204 52 view .LVU161
 654 02b4 00308DE5 		str	r3, [sp]	@ _16, %sfp
 655              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 656              		.loc 1 205 52 view .LVU162
 657 02b8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 658              	@ armwave.c:192:     for(n = 0; n < npix; n += 4) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 659              		.loc 1 192 11 view .LVU163
 660 02bc 0020A0E3 		mov	r2, #0	@ n,
 661              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 662              		.loc 1 205 52 view .LVU164
 663 02c0 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 664              	.LVL25:
 665              	.L36:
 195:armwave.c     **** 
 666              		.loc 1 195 9 is_stmt 1 view .LVU165
 667              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 668              		.loc 1 195 19 is_stmt 0 view .LVU166
 669 02c4 040094E4 		ldr	r0, [r4], #4	@ wave_word, MEM[base: base_32ptr_61, offset: 4294967292B]
 670              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 671              		.loc 1 197 9 is_stmt 1 view .LVU167
 672              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 673              		.loc 1 197 11 is_stmt 0 view .LVU168
 674 02c8 000050E3 		cmp	r0, #0	@ wave_word,
 675 02cc 0400001A 		bne	.L49		@,
 676              	.L32:
 677              	@ armwave.c:192:     for(n = 0; n < npix; n += 4) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 678              		.loc 1 192 28 view .LVU169
 679 02d0 042082E2 		add	r2, r2, #4	@ n, n,
 680              	.LVL27:
 681              	@ armwave.c:192:     for(n = 0; n < npix; n += 4) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 682              		.loc 1 192 5 view .LVU170
 683 02d4 020058E1 		cmp	r8, r2	@ npix, n
 684 02d8 F9FFFFCA 		bgt	.L36		@,
 685              	.LVL28:
 686              	.L29:
 687              	@ armwave.c:228: }
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                 }
 225:armwave.c     ****             }
 226:armwave.c     ****         }
 227:armwave.c     ****     }
 228:armwave.c     **** }
 688              		.loc 1 228 1 view .LVU171
 689 02dc 0CD08DE2 		add	sp, sp, #12	@,,
 690              		.cfi_remember_state
 691              		.cfi_def_cfa_offset 36
 692              		@ sp needed	@
 693 02e0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 694              	.LVL29:
 695              	.L49:
 696              		.cfi_restore_state
 697              	@ armwave.c:199:                 value = wave_word & 0xff;
 199:armwave.c     ****                 wave_word >>= 8;
 698              		.loc 1 199 23 view .LVU172
 699 02e4 7030EFE6 		uxtb	r3, r0	@ value, wave_word
 700              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 701              		.loc 1 202 19 view .LVU173
 702 02e8 000053E3 		cmp	r3, #0	@ value,
 703              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 704              		.loc 1 198 19 view .LVU174
 705 02ec 00E0A0E3 		mov	lr, #0	@ w,
 706              	.LVL30:
 199:armwave.c     ****                 wave_word >>= 8;
 707              		.loc 1 199 17 is_stmt 1 view .LVU175
 200:armwave.c     **** 
 708              		.loc 1 200 17 view .LVU176
 709              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 710              		.loc 1 200 27 is_stmt 0 view .LVU177
 711 02f0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 712              	.LVL31:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 713              		.loc 1 202 17 is_stmt 1 view .LVU178
 714              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 715              		.loc 1 202 19 is_stmt 0 view .LVU179
 716 02f4 0600001A 		bne	.L50		@,
 717              	.LVL32:
 718              	.L33:
 719              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 720              		.loc 1 198 32 view .LVU180
 721 02f8 01E08EE2 		add	lr, lr, #1	@ w, w,
 722              	.LVL33:
 723              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 724              		.loc 1 198 13 view .LVU181
 725 02fc 04005EE3 		cmp	lr, #4	@ w,
 726 0300 F2FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 727              		.loc 1 199 17 is_stmt 1 view .LVU182
 728              	@ armwave.c:199:                 value = wave_word & 0xff;
 199:armwave.c     ****                 wave_word >>= 8;
 729              		.loc 1 199 23 is_stmt 0 view .LVU183
 730 0304 7030EFE6 		uxtb	r3, r0	@ value, wave_word
 731              	.LVL34:
 200:armwave.c     **** 
 732              		.loc 1 200 17 is_stmt 1 view .LVU184
 733              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 202 19 is_stmt 0 view .LVU185
 735 0308 000053E3 		cmp	r3, #0	@ value,
 736              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 737              		.loc 1 200 27 view .LVU186
 738 030c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 739              	.LVL35:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 740              		.loc 1 202 17 is_stmt 1 view .LVU187
 741              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 202 19 is_stmt 0 view .LVU188
 743 0310 F8FFFF0A 		beq	.L33		@,
 744              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 745              		.loc 1 203 21 is_stmt 1 view .LVU189
 746              	.LVL36:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 747              		.loc 1 204 21 view .LVU190
 205:armwave.c     **** 
 748              		.loc 1 205 21 view .LVU191
 207:armwave.c     ****                     g = MIN(gg, 255);
 749              		.loc 1 207 21 view .LVU192
 208:armwave.c     ****                     b = MIN(bb, 255);
 750              		.loc 1 208 21 view .LVU193
 209:armwave.c     **** 
 751              		.loc 1 209 21 view .LVU194
 212:armwave.c     **** 
 752              		.loc 1 212 21 view .LVU195
 753 0314 0E9082E0 		add	r9, r2, lr	@ _130, n, w
 754              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 755              		.loc 1 205 55 is_stmt 0 view .LVU196
 756 0318 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 757              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 216 32 view .LVU197
 759 031c 79C0EFE6 		uxtb	ip, r9	@ _31, _130
 760              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 217 41 view .LVU198
 762 0320 01708CE2 		add	r7, ip, #1	@ tmp211, _31,
 763              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 216 40 view .LVU199
 765 0324 90CA07EE 		vmov	s15, ip	@ int	@ _31, _31
 766              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 767              		.loc 1 217 41 view .LVU200
 768 0328 107A07EE 		vmov	s14, r7	@ int	@ tmp211, tmp211
 769              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 204 55 view .LVU201
 771 032c 00C09DE5 		ldr	ip, [sp]	@ _16, %sfp
 772              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 773              		.loc 1 205 55 view .LVU202
 774 0330 910301E0 		mul	r1, r1, r3	@ tmp196, _19, value
 775              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 776              		.loc 1 216 40 view .LVU203
 777 0334 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp209, _31
 778              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 779              		.loc 1 217 46 view .LVU204
 780 0338 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp212, tmp211
 781              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 782              		.loc 1 204 55 view .LVU205
 783 033c 9C030CE0 		mul	ip, ip, r3	@ tmp200, _16, value
 784              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 785              		.loc 1 203 55 view .LVU206
 786 0340 930B03E0 		mul	r3, r3, fp	@ tmp206, value, _12
 787              	.LVL37:
 788              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 789              		.loc 1 205 24 view .LVU207
 790 0344 4114A0E1 		asr	r1, r1, #8	@ bb, tmp196,
 791              	.LVL38:
 792              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 793              		.loc 1 209 25 view .LVU208
 794 0348 FF0051E3 		cmp	r1, #255	@ bb,
 795              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 796              		.loc 1 216 40 view .LVU209
 797 034c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp210, tmp209, _33
 798              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 799              		.loc 1 217 46 view .LVU210
 800 0350 267A27EE 		vmul.f32	s14, s14, s13	@ tmp213, tmp212, _33
 801              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 802              		.loc 1 203 24 view .LVU211
 803 0354 43A4A0E1 		asr	r10, r3, #8	@ rr, tmp206,
 804              	.LVL39:
 805              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 806              		.loc 1 204 24 view .LVU212
 807 0358 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp200,
 808              	.LVL40:
 809              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 810              		.loc 1 209 25 view .LVU213
 811 035c FF10A0A3 		movge	r1, #255	@ bb,
 812              	.LVL41:
 813              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 814              		.loc 1 208 25 view .LVU214
 815 0360 FF005CE3 		cmp	ip, #255	@ gg,
 816 0364 FFC0A0A3 		movge	ip, #255	@ gg,
 817              	.LVL42:
 818              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 819              		.loc 1 207 25 view .LVU215
 820 0368 FF005AE3 		cmp	r10, #255	@ rr,
 821              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 822              		.loc 1 216 24 view .LVU216
 823 036c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp210
 824              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 825              		.loc 1 212 56 view .LVU217
 826 0370 0CC4A0E1 		lsl	ip, ip, #8	@ tmp201, gg,
 827              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 828              		.loc 1 207 25 view .LVU218
 829 0374 FFA0A0A3 		movge	r10, #255	@ rr,
 830              	.LVL43:
 831              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 832              		.loc 1 212 44 view .LVU219
 833 0378 0118A0E1 		lsl	r1, r1, #16	@ tmp197, bb,
 834 037c FF1801E2 		and	r1, r1, #16711680	@ tmp198, tmp197,
 835              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 836              		.loc 1 212 56 view .LVU220
 837 0380 7CC0FFE6 		uxth	ip, ip	@ tmp202, tmp201
 838              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 839              		.loc 1 212 51 view .LVU221
 840 0384 0CC081E1 		orr	ip, r1, ip	@ tmp204, tmp198, tmp202
 841              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 842              		.loc 1 212 62 view .LVU222
 843 0388 7AA0EFE6 		uxtb	r10, r10	@ rr, rr
 844              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 845              		.loc 1 216 24 view .LVU223
 846 038c 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 847              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 848              		.loc 1 217 24 view .LVU224
 849 0390 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp213
 850              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 851              		.loc 1 212 62 view .LVU225
 852 0394 0AA08CE1 		orr	r10, ip, r10	@ tmp208, tmp204, rr
 853              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 854              		.loc 1 212 26 view .LVU226
 855 0398 FFC48AE3 		orr	ip, r10, #-16777216	@ word, tmp208,
 856              	.LVL44:
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 857              		.loc 1 215 21 is_stmt 1 view .LVU227
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 858              		.loc 1 216 21 view .LVU228
 217:armwave.c     ****                     xx = (nsub >> 8);
 859              		.loc 1 217 21 view .LVU229
 860              	@ armwave.c:218:                     xx = (nsub >> 8);
 218:armwave.c     **** 
 861              		.loc 1 218 32 is_stmt 0 view .LVU230
 862 039c 4994A0E1 		asr	r9, r9, #8	@ xx, _130,
 863              	.LVL45:
 864              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 865              		.loc 1 217 24 view .LVU231
 866 03a0 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 867              	.LVL46:
 218:armwave.c     **** 
 868              		.loc 1 218 21 is_stmt 1 view .LVU232
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 869              		.loc 1 220 21 view .LVU233
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 870              		.loc 1 220 21 is_stmt 0 view .LVU234
 871 03a4 070053E1 		cmp	r3, r7	@ yy, ye
 872 03a8 D2FFFF2A 		bcs	.L33		@,
 873              	.LVL47:
 874              	.L34:
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 875              		.loc 1 221 25 is_stmt 1 discriminator 3 view .LVU235
 222:armwave.c     ****                     }
 876              		.loc 1 222 25 discriminator 3 view .LVU236
 877              	@ armwave.c:221:                         offset = (xx + (y * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 878              		.loc 1 221 43 is_stmt 0 discriminator 3 view .LVU237
 879 03ac 581095E5 		ldr	r1, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 880              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 881              		.loc 1 222 43 discriminator 3 view .LVU238
 882 03b0 919321E0 		mla	r1, r1, r3, r9	@ tmp217, g_armwave_state.target_width, yy, xx
 883              	.LVL48:
 884              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 885              		.loc 1 220 42 discriminator 3 view .LVU239
 886 03b4 013083E2 		add	r3, r3, #1	@ yy, yy,
 887              	.LVL49:
 888              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 889              		.loc 1 220 21 discriminator 3 view .LVU240
 890 03b8 030057E1 		cmp	r7, r3	@ ye, yy
 891              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 892              		.loc 1 222 53 discriminator 3 view .LVU241
 893 03bc 01C186E7 		str	ip, [r6, r1, lsl #2]	@ word, *_43
 894              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 895              		.loc 1 220 21 discriminator 3 view .LVU242
 896 03c0 F9FFFF1A 		bne	.L34		@,
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 897              		.loc 1 220 21 discriminator 3 view .LVU243
 898 03c4 CBFFFFEA 		b	.L33		@
 899              	.LVL50:
 900              	.L48:
 184:armwave.c     **** 
 901              		.loc 1 184 5 is_stmt 1 discriminator 1 view .LVU244
 902 03c8 10309FE5 		ldr	r3, .L51+4	@,
 903 03cc B820A0E3 		mov	r2, #184	@,
 904 03d0 0C109FE5 		ldr	r1, .L51+8	@,
 905 03d4 0C009FE5 		ldr	r0, .L51+12	@,
 906              	.LVL51:
 184:armwave.c     **** 
 907              		.loc 1 184 5 is_stmt 0 discriminator 1 view .LVU245
 908 03d8 FEFFFFEB 		bl	__assert_fail		@
 909              	.LVL52:
 910              	.L52:
 911              		.align	2
 912              	.L51:
 913 03dc 00000000 		.word	g_armwave_state
 914 03e0 00000000 		.word	.LANCHOR0
 915 03e4 20000000 		.word	.LC2
 916 03e8 2C000000 		.word	.LC3
 917              		.cfi_endproc
 918              	.LFE60:
 920              		.global	__aeabi_idiv
 921              		.align	2
 922              		.global	armwave_generate
 923              		.syntax unified
 924              		.arm
 925              		.fpu vfp
 927              	armwave_generate:
 928              	.LFB61:
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_generate()
 234:armwave.c     **** {
 929              		.loc 1 234 1 is_stmt 1 view -0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 16
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t yy;
 933              		.loc 1 235 5 view .LVU247
 236:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 934              		.loc 1 236 5 view .LVU248
 935              	.LVL53:
 237:armwave.c     **** 
 238:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 936              		.loc 1 238 5 view .LVU249
 937              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 938              		.loc 1 234 1 is_stmt 0 view .LVU250
 939 03ec F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 940              		.cfi_def_cfa_offset 36
 941              		.cfi_offset 4, -36
 942              		.cfi_offset 5, -32
 943              		.cfi_offset 6, -28
 944              		.cfi_offset 7, -24
 945              		.cfi_offset 8, -20
 946              		.cfi_offset 9, -16
 947              		.cfi_offset 10, -12
 948              		.cfi_offset 11, -8
 949              		.cfi_offset 14, -4
 950              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 951              		.loc 1 238 5 view .LVU251
 952 03f0 0010A0E3 		mov	r1, #0	@,
 953              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 954              		.loc 1 238 58 view .LVU252
 955 03f4 10829FE5 		ldr	r8, .L72	@ tmp340,
 956              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 957              		.loc 1 234 1 view .LVU253
 958 03f8 14D04DE2 		sub	sp, sp, #20	@,,
 959              		.cfi_def_cfa_offset 56
 960              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 961              		.loc 1 238 5 view .LVU254
 962 03fc 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 963 0400 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 964 0404 FEFFFFEB 		bl	memset		@
 965              	.LVL54:
 239:armwave.c     **** 
 240:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 966              		.loc 1 240 5 is_stmt 1 view .LVU255
 967              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 968              		.loc 1 240 68 is_stmt 0 view .LVU256
 969 0408 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 970              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 971              		.loc 1 240 38 view .LVU257
 972 040c 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 973              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 974              		.loc 1 240 51 view .LVU258
 975 0410 0310A0E1 		mov	r1, r3	@, _34
 976 0414 0500A0E1 		mov	r0, r5	@, prephitmp_217
 977              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 978              		.loc 1 240 68 view .LVU259
 979 0418 00308DE5 		str	r3, [sp]	@ _34, %sfp
 980              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 981              		.loc 1 240 51 view .LVU260
 982 041c FEFFFFEB 		bl	__aeabi_idiv		@
 983              	.LVL55:
 984              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 985              		.loc 1 240 5 view .LVU261
 986 0420 000050E3 		cmp	r0, #0	@,
 987 0424 7600000A 		beq	.L53		@,
 988 0428 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 989              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 990              		.loc 1 240 12 view .LVU262
 991 042c 0030A0E3 		mov	r3, #0	@ yy,
 992 0430 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 993              	.LVL56:
 994              	.L62:
 241:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 242:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 243:armwave.c     **** 
 244:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 995              		.loc 1 244 9 is_stmt 1 discriminator 3 view .LVU263
 996 0434 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 997              	.LBB10:
 998              	.LBB11:
 999              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1000              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU264
 1001 0438 40C098E5 		ldr	ip, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1002              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1003              		.loc 1 79 5 discriminator 3 view .LVU265
 1004 043c 000054E3 		cmp	r4, #0	@ prephitmp_227,
 1005              	.LBE11:
 1006              	.LBE10:
 1007              	@ armwave.c:244:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1008              		.loc 1 244 9 discriminator 3 view .LVU266
 1009 0440 930202E0 		mul	r2, r3, r2	@ _5, yy, _34
 1010              	.LVL57:
 1011              	.LBB13:
 1012              	.LBI10:
  62:armwave.c     **** {
 1013              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU267
 1014              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1015              		.loc 1 64 5 discriminator 3 view .LVU268
  65:armwave.c     ****     uint8_t *wave_base;
 1016              		.loc 1 65 5 discriminator 3 view .LVU269
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1017              		.loc 1 66 5 discriminator 3 view .LVU270
  67:armwave.c     ****     uint8_t *write_buffer;
 1018              		.loc 1 67 5 discriminator 3 view .LVU271
  68:armwave.c     **** 
 1019              		.loc 1 68 5 discriminator 3 view .LVU272
  71:armwave.c     **** 
 1020              		.loc 1 71 5 discriminator 3 view .LVU273
 1021              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1022              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU274
 1023 0444 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1024              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1025              		.loc 1 71 40 discriminator 3 view .LVU275
 1026 0448 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1027              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1028              		.loc 1 71 65 discriminator 3 view .LVU276
 1029 044c 930203E0 		mul	r3, r3, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, _5
 1030              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1031              		.loc 1 71 105 discriminator 3 view .LVU277
 1032 0450 2338A0E1 		lsr	r3, r3, #16	@ tmp240, tmp238,
 1033              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1034              		.loc 1 71 130 discriminator 3 view .LVU278
 1035 0454 9C030CE0 		mul	ip, ip, r3	@ _22, g_armwave_state.bitdepth_height, tmp240
 1036              	.LVL58:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1037              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU279
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1038              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU280
 1039 0458 610000DA 		ble	.L55		@,
 1040              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1041              		.loc 1 79 11 view .LVU281
 1042 045c 0070A0E3 		mov	r7, #0	@ w,
 1043 0460 043042E2 		sub	r3, r2, #4	@ _31, _5,
 1044 0464 08308DE5 		str	r3, [sp, #8]	@ _31, %sfp
 1045              	.LVL59:
 1046              	.L61:
  80:armwave.c     **** 
 1047              		.loc 1 80 9 is_stmt 1 view .LVU282
 1048              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1049              		.loc 1 84 9 is_stmt 0 view .LVU283
 1050 0468 00209DE5 		ldr	r2, [sp]	@ _34, %sfp
 1051              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1052              		.loc 1 80 64 view .LVU284
 1053 046c 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1054              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1055              		.loc 1 84 9 view .LVU285
 1056 0470 000052E3 		cmp	r2, #0	@ _34,
 1057              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1058              		.loc 1 80 36 view .LVU286
 1059 0474 142098E5 		ldr	r2, [r8, #20]	@ _23, g_armwave_state.wave_buffer
 1060              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1061              		.loc 1 80 64 view .LVU287
 1062 0478 930703E0 		mul	r3, r3, r7	@ _27, g_armwave_state.wave_stride, w
 1063              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1064              		.loc 1 84 9 is_stmt 1 view .LVU288
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1065              		.loc 1 84 9 is_stmt 0 view .LVU289
 1066 047c 5200000A 		beq	.L56		@,
 1067 0480 08009DE5 		ldr	r0, [sp, #8]	@ _31, %sfp
 1068 0484 003083E0 		add	r3, r3, r0	@ tmp246, _27, _31
 1069              	.LVL61:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1070              		.loc 1 84 9 view .LVU290
 1071 0488 036082E0 		add	r6, r2, r3	@ ivtmp.66, _23, tmp246
 1072              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1073              		.loc 1 84 16 view .LVU291
 1074 048c 0000A0E3 		mov	r0, #0	@ yy,
 1075              	.LVL62:
 1076              	.L60:
  87:armwave.c     **** 
 1077              		.loc 1 87 13 is_stmt 1 view .LVU292
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1078              		.loc 1 101 17 view .LVU293
 106:armwave.c     ****                 word >>= 8;
 1079              		.loc 1 106 17 view .LVU294
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1080              		.loc 1 101 17 view .LVU295
 106:armwave.c     ****                 word >>= 8;
 1081              		.loc 1 106 17 view .LVU296
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1082              		.loc 1 101 17 view .LVU297
 106:armwave.c     ****                 word >>= 8;
 1083              		.loc 1 106 17 view .LVU298
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1084              		.loc 1 101 17 view .LVU299
 106:armwave.c     ****                 word >>= 8;
 1085              		.loc 1 106 17 view .LVU300
 1086              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1087              		.loc 1 87 18 is_stmt 0 view .LVU301
 1088 0490 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _260, offset: 0B]
 1089              	.LVL63:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1090              		.loc 1 89 13 is_stmt 1 view .LVU302
  91:armwave.c     ****                 
 1091              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1092              		.loc 1 94 17 view .LVU304
 1093              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1094              		.loc 1 102 34 is_stmt 0 view .LVU305
 1095 0494 01A080E2 		add	r10, r0, #1	@ tmp276, yy,
 1096              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1097              		.loc 1 94 20 view .LVU306
 1098 0498 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1099 049c 0120A003 		moveq	r2, #1	@ tmp248,
 1100 04a0 0020A013 		movne	r2, #0	@ tmp248,
 1101              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1102              		.loc 1 94 19 view .LVU307
 1103 04a4 FF0059E3 		cmp	r9, #255	@ scale_value,
 1104 04a8 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1105              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1106              		.loc 1 107 22 view .LVU308
 1107 04ac 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1108              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1109              		.loc 1 94 19 view .LVU309
 1110 04b0 000052E3 		cmp	r2, #0	@ tmp253,
 1111              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1112              		.loc 1 102 34 view .LVU310
 1113 04b4 025080E2 		add	r5, r0, #2	@ tmp298, yy,
 1114              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1115              		.loc 1 106 47 view .LVU311
 1116 04b8 0CB089E0 		add	fp, r9, ip	@ tmp261, scale_value, _22
 1117              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1118              		.loc 1 107 22 view .LVU312
 1119 04bc 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1120 04c0 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1121              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1122              		.loc 1 94 19 view .LVU313
 1123 04c4 3B00001A 		bne	.L64		@,
 1124              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1125              		.loc 1 102 34 view .LVU314
 1126 04c8 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1127              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1128              		.loc 1 106 47 view .LVU315
 1129 04cc 40E098E5 		ldr	lr, [r8, #64]	@ tmp360, g_armwave_state.bitdepth_height
 1130              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1131              		.loc 1 94 20 view .LVU316
 1132 04d0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1133              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1134              		.loc 1 102 34 view .LVU317
 1135 04d4 920002E0 		mul	r2, r2, r0	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1136              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1137              		.loc 1 106 47 view .LVU318
 1138 04d8 0C9084E0 		add	r9, r4, ip	@ tmp283, scale_value, _22
 1139              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1140              		.loc 1 102 74 view .LVU319
 1141 04dc 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1142              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1143              		.loc 1 106 47 view .LVU320
 1144 04e0 9EB222E0 		mla	r2, lr, r2, fp	@ tmp262, tmp360, tmp257, tmp261
 1145              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1146              		.loc 1 94 20 view .LVU321
 1147 04e4 01B0A003 		moveq	fp, #1	@ tmp269,
 1148 04e8 00B0A013 		movne	fp, #0	@ tmp269,
 1149              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1150              		.loc 1 94 19 view .LVU322
 1151 04ec FF0054E3 		cmp	r4, #255	@ scale_value,
 1152 04f0 0B40A011 		movne	r4, fp	@, tmp274, tmp269
 1153 04f4 01408B03 		orreq	r4, fp, #1	@,, tmp274, tmp269
 1154              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1155              		.loc 1 106 47 view .LVU323
 1156 04f8 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_90, *_90
 1157              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1158              		.loc 1 94 19 view .LVU324
 1159 04fc 000054E3 		cmp	r4, #0	@ tmp274,
 1160              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1161              		.loc 1 106 47 view .LVU325
 1162 0500 01B08BE2 		add	fp, fp, #1	@ tmp265, *_90,
 1163 0504 02B0C1E7 		strb	fp, [r1, r2]	@ tmp265, *_90
 1164              	.LVL64:
 107:armwave.c     ****             }
 1165              		.loc 1 107 17 is_stmt 1 view .LVU326
  91:armwave.c     ****                 
 1166              		.loc 1 91 17 view .LVU327
  94:armwave.c     ****                     continue;
 1167              		.loc 1 94 17 view .LVU328
 1168              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1169              		.loc 1 94 19 is_stmt 0 view .LVU329
 1170 0508 2A00001A 		bne	.L64		@,
 1171              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1172              		.loc 1 102 34 view .LVU330
 1173 050c 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1174              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1175              		.loc 1 102 99 view .LVU331
 1176 0510 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1177              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1178              		.loc 1 94 20 view .LVU332
 1179 0514 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1180              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1181              		.loc 1 102 34 view .LVU333
 1182 0518 920A0AE0 		mul	r10, r2, r10	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 1183              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1184              		.loc 1 94 20 view .LVU334
 1185 051c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1186 0520 0120A003 		moveq	r2, #1	@ tmp291,
 1187              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1188              		.loc 1 102 74 view .LVU335
 1189 0524 2AA8A0E1 		lsr	r10, r10, #16	@ tmp279, tmp277,
 1190              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1191              		.loc 1 94 20 view .LVU336
 1192 0528 0020A013 		movne	r2, #0	@ tmp291,
 1193              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1194              		.loc 1 106 47 view .LVU337
 1195 052c 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp284, g_armwave_state.bitdepth_height, tmp279, tmp283
 1196 0530 0C408EE0 		add	r4, lr, ip	@ tmp305, scale_value, _22
 1197              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1198              		.loc 1 94 19 view .LVU338
 1199 0534 FF005EE3 		cmp	lr, #255	@ scale_value,
 1200 0538 02E0A011 		movne	lr, r2	@, tmp296, tmp291
 1201 053c 01E08203 		orreq	lr, r2, #1	@,, tmp296, tmp291
 1202              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1203              		.loc 1 106 47 view .LVU339
 1204 0540 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_121, *_121
 1205              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1206              		.loc 1 94 19 view .LVU340
 1207 0544 00005EE3 		cmp	lr, #0	@ tmp296,
 1208              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1209              		.loc 1 106 47 view .LVU341
 1210 0548 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1211 054c 0920C1E7 		strb	r2, [r1, r9]	@ tmp287, *_121
 107:armwave.c     ****             }
 1212              		.loc 1 107 17 is_stmt 1 view .LVU342
 1213              	.LVL65:
  91:armwave.c     ****                 
 1214              		.loc 1 91 17 view .LVU343
  94:armwave.c     ****                     continue;
 1215              		.loc 1 94 17 view .LVU344
 1216              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1217              		.loc 1 94 19 is_stmt 0 view .LVU345
 1218 0550 1800001A 		bne	.L64		@,
 1219              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1220              		.loc 1 102 34 view .LVU346
 1221 0554 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1222              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1223              		.loc 1 94 20 view .LVU347
 1224 0558 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1225              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1226              		.loc 1 106 47 view .LVU348
 1227 055c 03208CE0 		add	r2, ip, r3	@ tmp326, _22, word
 1228              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1229              		.loc 1 102 34 view .LVU349
 1230 0560 9E0505E0 		mul	r5, lr, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1231              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1232              		.loc 1 102 99 view .LVU350
 1233 0564 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1234              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1235              		.loc 1 102 74 view .LVU351
 1236 0568 2558A0E1 		lsr	r5, r5, #16	@ tmp301, tmp299,
 1237              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1238              		.loc 1 106 47 view .LVU352
 1239 056c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp306, g_armwave_state.bitdepth_height, tmp301, tmp305
 1240              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1241              		.loc 1 94 20 view .LVU353
 1242 0570 01E0A003 		moveq	lr, #1	@ tmp312,
 1243 0574 00E0A013 		movne	lr, #0	@ tmp312,
 1244              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1245              		.loc 1 94 19 view .LVU354
 1246 0578 FF0053E3 		cmp	r3, #255	@ word,
 1247 057c 01E08E03 		orreq	lr, lr, #1	@,, tmp317, tmp312
 1248              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1249              		.loc 1 106 47 view .LVU355
 1250 0580 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_152, *_152
 1251              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1252              		.loc 1 94 19 view .LVU356
 1253 0584 00005EE3 		cmp	lr, #0	@ tmp317,
 1254              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1255              		.loc 1 106 47 view .LVU357
 1256 0588 013083E2 		add	r3, r3, #1	@ tmp309, *_152,
 1257 058c 0530C1E7 		strb	r3, [r1, r5]	@ tmp309, *_152
 107:armwave.c     ****             }
 1258              		.loc 1 107 17 is_stmt 1 view .LVU358
 1259              	.LVL66:
  91:armwave.c     ****                 
 1260              		.loc 1 91 17 view .LVU359
  94:armwave.c     ****                     continue;
 1261              		.loc 1 94 17 view .LVU360
 1262              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1263              		.loc 1 94 19 is_stmt 0 view .LVU361
 1264 0590 0800001A 		bne	.L64		@,
 1265              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1266              		.loc 1 102 34 view .LVU362
 1267 0594 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1268 0598 034080E2 		add	r4, r0, #3	@ tmp319, yy,
 1269              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1270              		.loc 1 102 99 view .LVU363
 1271 059c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1272              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1273              		.loc 1 102 34 view .LVU364
 1274 05a0 930403E0 		mul	r3, r3, r4	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1275              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1276              		.loc 1 102 74 view .LVU365
 1277 05a4 2338A0E1 		lsr	r3, r3, #16	@ tmp322, tmp320,
 1278              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1279              		.loc 1 106 47 view .LVU366
 1280 05a8 9E2323E0 		mla	r3, lr, r3, r2	@ tmp327, g_armwave_state.bitdepth_height, tmp322, tmp326
 1281 05ac 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_183, *_183
 1282 05b0 012082E2 		add	r2, r2, #1	@ tmp330, *_183,
 1283 05b4 0320C1E7 		strb	r2, [r1, r3]	@ tmp330, *_183
 107:armwave.c     ****             }
 1284              		.loc 1 107 17 is_stmt 1 view .LVU367
 1285              	.LVL67:
 1286              	.L64:
 1287              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1288              		.loc 1 84 9 is_stmt 0 view .LVU368
 1289 05b8 00309DE5 		ldr	r3, [sp]	@ _34, %sfp
 1290              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1291              		.loc 1 84 37 view .LVU369
 1292 05bc 040080E2 		add	r0, r0, #4	@ yy, yy,
 1293              	.LVL68:
 1294              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1295              		.loc 1 84 9 view .LVU370
 1296 05c0 000053E1 		cmp	r3, r0	@ _34, yy
 1297 05c4 B1FFFF8A 		bhi	.L60		@,
 1298 05c8 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 1299              	.LVL69:
 1300              	.L56:
 1301              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1302              		.loc 1 79 44 view .LVU371
 1303 05cc 017087E2 		add	r7, r7, #1	@ w, w,
 1304              	.LVL70:
 1305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1306              		.loc 1 79 5 view .LVU372
 1307 05d0 040057E1 		cmp	r7, r4	@ w, prephitmp_227
 1308 05d4 A3FFFFBA 		blt	.L61		@,
 1309 05d8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 1310 05dc 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 1311 05e0 00308DE5 		str	r3, [sp]	@ _34, %sfp
 1312              	.LVL71:
 1313              	.L55:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1314              		.loc 1 79 5 view .LVU373
 1315              	.LBE12:
 1316              	.LBE13:
 245:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1317              		.loc 1 245 9 is_stmt 1 discriminator 3 view .LVU374
 246:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1318              		.loc 1 246 9 discriminator 3 view .LVU375
 1319              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1320              		.loc 1 240 51 is_stmt 0 discriminator 3 view .LVU376
 1321 05e4 00109DE5 		ldr	r1, [sp]	@, %sfp
 1322              	.LVL72:
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1323              		.loc 1 240 51 discriminator 3 view .LVU377
 1324 05e8 0500A0E1 		mov	r0, r5	@, prephitmp_217
 1325 05ec FEFFFFEB 		bl	__aeabi_idiv		@
 1326              	.LVL73:
 1327              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1328              		.loc 1 240 86 discriminator 3 view .LVU378
 1329 05f0 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1330 05f4 013083E2 		add	r3, r3, #1	@ yy, yy,
 1331 05f8 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1332              	.LVL74:
 1333              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1334              		.loc 1 240 5 discriminator 3 view .LVU379
 1335 05fc 030050E1 		cmp	r0, r3	@, yy
 1336 0600 8BFFFF8A 		bhi	.L62		@,
 1337              	.LVL75:
 1338              	.L53:
 1339              	@ armwave.c:250: }
 247:armwave.c     ****     }
 248:armwave.c     **** 
 249:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 250:armwave.c     **** }
 1340              		.loc 1 250 1 view .LVU380
 1341 0604 14D08DE2 		add	sp, sp, #20	@,,
 1342              		.cfi_def_cfa_offset 36
 1343              		@ sp needed	@
 1344 0608 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1345              	.L73:
 1346              		.align	2
 1347              	.L72:
 1348 060c 00000000 		.word	g_armwave_state
 1349              		.cfi_endproc
 1350              	.LFE61:
 1352              		.align	2
 1353              		.global	armwave_setup_render
 1354              		.syntax unified
 1355              		.arm
 1356              		.fpu vfp
 1358              	armwave_setup_render:
 1359              	.LVL76:
 1360              	.LFB62:
 251:armwave.c     **** 
 252:armwave.c     **** /*
 253:armwave.c     ****  * Setup the renderer with passed parameters.
 254:armwave.c     ****  */
 255:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 256:armwave.c     **** {
 1361              		.loc 1 256 1 is_stmt 1 view -0
 1362              		.cfi_startproc
 1363              		@ args = 12, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 257:armwave.c     ****     uint32_t length, xx;
 1365              		.loc 1 257 5 view .LVU382
 258:armwave.c     ****     float points_per_pixel;
 1366              		.loc 1 258 5 view .LVU383
 259:armwave.c     **** 
 260:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1367              		.loc 1 260 5 view .LVU384
 1368              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1369              		.loc 1 256 1 is_stmt 0 view .LVU385
 1370 0610 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1371              		.cfi_def_cfa_offset 28
 1372              		.cfi_offset 4, -28
 1373              		.cfi_offset 5, -24
 1374              		.cfi_offset 6, -20
 1375              		.cfi_offset 7, -16
 1376              		.cfi_offset 8, -12
 1377              		.cfi_offset 9, -8
 1378              		.cfi_offset 14, -4
 1379 0614 028B2DED 		vpush.64	{d8}	@
 1380              		.cfi_def_cfa_offset 36
 1381              		.cfi_offset 80, -36
 1382              		.cfi_offset 81, -32
 1383 0618 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1384 061c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1385 0620 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1386 0624 14D04DE2 		sub	sp, sp, #20	@,,
 1387              		.cfi_def_cfa_offset 56
 1388              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1389              		.loc 1 256 1 view .LVU386
 1390 0628 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1391 062c D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1392 0630 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1393              	@ armwave.c:260:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1394              		.loc 1 260 5 view .LVU387
 1395 0634 00308DE5 		str	r3, [sp]	@ wave_stride,
 1396 0638 F460CDE1 		strd	r6, [sp, #4]	@,,
 1397 063c 0230A0E1 		mov	r3, r2	@, waves_max
 1398              	.LVL77:
 1399              		.loc 1 260 5 view .LVU388
 1400 0640 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1401 0644 0120A0E1 		mov	r2, r1	@, end_point
 1402              	.LVL78:
 1403              		.loc 1 260 5 view .LVU389
 1404 0648 0010A0E1 		mov	r1, r0	@, start_point
 1405              	.LVL79:
 1406              		.loc 1 260 5 view .LVU390
 1407 064c E0019FE5 		ldr	r0, .L88+12	@,
 1408              	.LVL80:
 1409              		.loc 1 260 5 view .LVU391
 1410 0650 FEFFFFEB 		bl	printf		@
 1411              	.LVL81:
 261:armwave.c     **** 
 262:armwave.c     ****     // TODO these asserts should instead raise PyExc
 263:armwave.c     ****     assert(start_point < end_point);
 1412              		.loc 1 263 5 is_stmt 1 view .LVU392
 1413 0654 050054E1 		cmp	r4, r5	@ start_point, end_point
 1414 0658 6300002A 		bcs	.L85		@,
 264:armwave.c     **** 
 265:armwave.c     ****     /*
 266:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 267:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 268:armwave.c     **** 
 269:armwave.c     ****     if(target_height == 256) {
 270:armwave.c     ****         g_armwave_state.row_shift = 8;
 271:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 272:armwave.c     ****     } else if(target_height == 512) {
 273:armwave.c     ****         g_armwave_state.row_shift = 9;
 274:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 275:armwave.c     ****     } else if(target_height == 1024) {
 276:armwave.c     ****         g_armwave_state.row_shift = 10;
 277:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 278:armwave.c     ****     } else if(target_height == 2048) {
 279:armwave.c     ****         g_armwave_state.row_shift = 11;
 280:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 281:armwave.c     ****     }
 282:armwave.c     ****     */
 283:armwave.c     **** 
 284:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 285:armwave.c     ****     g_armwave_state.xstride = target_height;
 1415              		.loc 1 285 5 view .LVU393
 1416              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 287:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 288:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 289:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 290:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 291:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 292:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 293:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 294:armwave.c     ****     g_armwave_state.target_width = target_width;
 295:armwave.c     ****     g_armwave_state.target_height = target_height;
 296:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1417              		.loc 1 296 45 is_stmt 0 view .LVU394
 1418 065c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1419              	.LVL82:
 1420              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1421              		.loc 1 286 49 view .LVU395
 1422 0660 706A9FED 		vldr.32	s12, .L88	@ tmp175,
 1423              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 297:armwave.c     **** 
 298:armwave.c     ****     // Calculate compound scaler
 299:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 300:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1424              		.loc 1 300 48 view .LVU396
 1425 0664 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1426              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1427              		.loc 1 300 79 view .LVU397
 1428 0668 6F6ADFED 		vldr.32	s13, .L88+4	@ tmp199,
 1429              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1430              		.loc 1 293 90 view .LVU398
 1431 066c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1432              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1433              		.loc 1 285 29 view .LVU399
 1434 0670 C0419FE5 		ldr	r4, .L88+16	@ tmp243,
 1435              	.LVL83:
 1436              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1437              		.loc 1 300 48 view .LVU400
 1438 0674 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1439              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1440              		.loc 1 286 49 view .LVU401
 1441 0678 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1442              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1443              		.loc 1 291 42 view .LVU402
 1444 067c 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1445              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1446              		.loc 1 293 95 view .LVU403
 1447 0680 033483E0 		add	r3, r3, r3, lsl #8	@ tmp189, tmp186, tmp186,
 1448              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1449              		.loc 1 286 49 view .LVU404
 1450 0684 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1451              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1452              		.loc 1 300 48 view .LVU405
 1453 0688 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1454              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 301:armwave.c     **** 
 302:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1455              		.loc 1 302 5 view .LVU406
 1456 068c 0128A0E3 		mov	r2, #65536	@ tmp202,
 1457 0690 04508DE5 		str	r5, [sp, #4]	@ _13,
 1458 0694 00608DE5 		str	r6, [sp]	@ target_width,
 1459              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1460              		.loc 1 300 48 view .LVU407
 1461 0698 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1462              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1463              		.loc 1 293 95 view .LVU408
 1464 069c 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1465              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1466              		.loc 1 285 29 view .LVU409
 1467 06a0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1468              		.loc 1 286 5 is_stmt 1 view .LVU410
 1469              	@ armwave.c:288:     g_armwave_state.wave_stride = wave_stride;
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1470              		.loc 1 288 33 is_stmt 0 view .LVU411
 1471 06a4 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1472              	@ armwave.c:289:     g_armwave_state.waves_max = waves_max;
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1473              		.loc 1 289 31 view .LVU412
 1474 06a8 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1475              	@ armwave.c:290:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1476              		.loc 1 290 27 view .LVU413
 1477 06ac 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1478              	@ armwave.c:295:     g_armwave_state.target_height = target_height;
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1479              		.loc 1 295 35 view .LVU414
 1480 06b0 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1481              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1482              		.loc 1 302 5 view .LVU415
 1483 06b4 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1484              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1485              		.loc 1 300 48 view .LVU416
 1486 06b8 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1487              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, 
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1488              		.loc 1 292 37 view .LVU417
 1489 06bc 012BA0E3 		mov	r2, #1024	@ tmp185,
 1490              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1491              		.loc 1 291 26 view .LVU418
 1492 06c0 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1493              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, 
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1494              		.loc 1 292 37 view .LVU419
 1495 06c4 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1496              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1497              		.loc 1 302 5 view .LVU420
 1498 06c8 0310A0E1 		mov	r1, r3	@, tmp190
 1499              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1500              		.loc 1 293 34 view .LVU421
 1501 06cc 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1502              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     **** 
 1503              		.loc 1 296 33 view .LVU422
 1504 06d0 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1505              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1506              		.loc 1 302 5 view .LVU423
 1507 06d4 60019FE5 		ldr	r0, .L88+20	@,
 1508              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1509              		.loc 1 286 49 view .LVU424
 1510 06d8 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1511              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1512              		.loc 1 300 79 view .LVU425
 1513 06dc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1514              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1515              		.loc 1 299 42 view .LVU426
 1516 06e0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1517              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1518              		.loc 1 286 33 view .LVU427
 1519 06e4 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1520              		.loc 1 287 5 is_stmt 1 view .LVU428
 1521              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1522              		.loc 1 299 42 is_stmt 0 view .LVU429
 1523 06e8 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1524              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1525              		.loc 1 287 30 view .LVU430
 1526 06ec C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1527              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1528              		.loc 1 302 5 view .LVU431
 1529 06f0 0C30A0E1 		mov	r3, ip	@, _19
 1530 06f4 0C20A0E1 		mov	r2, ip	@, tmp3
 1531              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1532              		.loc 1 299 42 view .LVU432
 1533 06f8 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1534              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1535              		.loc 1 287 30 view .LVU433
 1536 06fc 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1537              		.loc 1 288 5 is_stmt 1 view .LVU434
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1538              		.loc 1 289 5 view .LVU435
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1539              		.loc 1 290 5 view .LVU436
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1540              		.loc 1 291 5 view .LVU437
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1541              		.loc 1 292 5 view .LVU438
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1542              		.loc 1 293 5 view .LVU439
 294:armwave.c     ****     g_armwave_state.target_height = target_height;
 1543              		.loc 1 294 5 view .LVU440
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1544              		.loc 1 295 5 view .LVU441
 296:armwave.c     **** 
 1545              		.loc 1 296 5 view .LVU442
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1546              		.loc 1 299 5 view .LVU443
 1547              		.loc 1 302 5 view .LVU444
 1548 0700 FEFFFFEB 		bl	printf		@
 1549              	.LVL84:
 303:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 304:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 305:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 306:armwave.c     **** 
 307:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 308:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 309:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 310:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1550              		.loc 1 310 5 view .LVU445
 1551              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 311:armwave.c     **** 
 312:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1552              		.loc 1 312 23 is_stmt 0 view .LVU446
 1553 0704 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1554              	@ armwave.c:310:     g_armwave_state.slice_height = 256; // 64;  
 310:armwave.c     **** 
 1555              		.loc 1 310 34 view .LVU447
 1556 0708 013CA0E3 		mov	r3, #256	@ tmp204,
 1557              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 1558              		.loc 1 312 7 view .LVU448
 1559 070c 000050E3 		cmp	r0, #0	@ _20,
 1560              	@ armwave.c:310:     g_armwave_state.slice_height = 256; // 64;  
 310:armwave.c     **** 
 1561              		.loc 1 310 34 view .LVU449
 1562 0710 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1563              		.loc 1 312 5 is_stmt 1 view .LVU450
 1564              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 1565              		.loc 1 312 7 is_stmt 0 view .LVU451
 1566 0714 0000000A 		beq	.L76		@,
 313:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1567              		.loc 1 313 9 is_stmt 1 view .LVU452
 1568 0718 FEFFFFEB 		bl	free		@
 1569              	.LVL85:
 1570              	.L76:
 314:armwave.c     **** 
 315:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1571              		.loc 1 315 5 view .LVU453
 1572              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1573              		.loc 1 315 34 is_stmt 0 view .LVU454
 1574 071c 0110A0E3 		mov	r1, #1	@,
 1575 0720 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1576 0724 FEFFFFEB 		bl	calloc		@
 1577              	.LVL86:
 1578              	@ armwave.c:317:     assert(g_armwave_state.ch1_buffer != NULL);
 316:armwave.c     **** 
 317:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1579              		.loc 1 317 5 view .LVU455
 1580 0728 000050E3 		cmp	r0, #0	@ _23,
 1581              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1582              		.loc 1 315 34 view .LVU456
 1583 072c 0070A0E1 		mov	r7, r0	@ _23,
 1584              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1585              		.loc 1 315 32 view .LVU457
 1586 0730 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1587              		.loc 1 317 5 is_stmt 1 view .LVU458
 1588 0734 3600000A 		beq	.L86		@,
 318:armwave.c     **** 
 319:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 320:armwave.c     ****     length = end_point - start_point;
 1589              		.loc 1 320 5 view .LVU459
 1590              	.LVL87:
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1591              		.loc 1 321 5 view .LVU460
 1592              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1593              		.loc 1 321 34 is_stmt 0 view .LVU461
 1594 0738 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1595              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1596              		.loc 1 321 22 view .LVU462
 1597 073c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1598              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1599              		.loc 1 322 60 view .LVU463
 1600 0740 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1601              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1602              		.loc 1 323 40 view .LVU464
 1603 0744 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1604              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1605              		.loc 1 321 34 view .LVU465
 1606 0748 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1607              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1608              		.loc 1 321 22 view .LVU466
 1609 074c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1610              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1611              		.loc 1 322 60 view .LVU467
 1612 0750 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1613              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1614              		.loc 1 321 22 view .LVU468
 1615 0754 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1616              	.LVL88:
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1617              		.loc 1 322 5 is_stmt 1 view .LVU469
 1618              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1619              		.loc 1 322 60 is_stmt 0 view .LVU470
 1620 0758 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1621              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1622              		.loc 1 322 41 view .LVU471
 1623 075c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1624 0760 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1625              		.loc 1 323 5 is_stmt 1 view .LVU472
 1626              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1627              		.loc 1 323 40 is_stmt 0 view .LVU473
 1628 0764 FEFFFFEB 		bl	malloc		@
 1629              	.LVL89:
 1630              	@ armwave.c:325:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1631              		.loc 1 325 5 view .LVU474
 1632 0768 000050E3 		cmp	r0, #0	@ _31,
 1633              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1634              		.loc 1 323 40 view .LVU475
 1635 076c 0060A0E1 		mov	r6, r0	@ _31,
 1636              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1637              		.loc 1 323 38 view .LVU476
 1638 0770 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1639              		.loc 1 325 5 is_stmt 1 view .LVU477
 1640 0774 2100000A 		beq	.L87		@,
 1641              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 326:armwave.c     **** 
 327:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 328:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1642              		.loc 1 328 54 is_stmt 0 view .LVU478
 1643 0778 2C7ADFED 		vldr.32	s15, .L88+8	@ tmp231,
 1644 077c 020040E2 		sub	r0, r0, #2	@ ivtmp.78, _31,
 1645              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1646              		.loc 1 327 12 view .LVU479
 1647 0780 0030A0E3 		mov	r3, #0	@ xx,
 1648              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1649              		.loc 1 328 54 view .LVU480
 1650 0784 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1651              	.L79:
 1652              	.LVL90:
 1653              		.loc 1 328 9 is_stmt 1 discriminator 3 view .LVU481
 1654              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1655              		.loc 1 328 74 is_stmt 0 discriminator 3 view .LVU482
 1656 0788 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1657              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1658              		.loc 1 327 32 discriminator 3 view .LVU483
 1659 078c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1660              	.LVL91:
 1661              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1662              		.loc 1 327 5 discriminator 3 view .LVU484
 1663 0790 030055E1 		cmp	r5, r3	@ _13, xx
 1664              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1665              		.loc 1 328 74 discriminator 3 view .LVU485
 1666 0794 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1667 0798 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1668              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1669              		.loc 1 328 46 discriminator 3 view .LVU486
 1670 079c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1671 07a0 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1672 07a4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1673              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1674              		.loc 1 327 5 discriminator 3 view .LVU487
 1675 07a8 F6FFFF1A 		bne	.L79		@,
 329:armwave.c     **** 
 330:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 331:armwave.c     ****     }
 332:armwave.c     **** 
 333:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1676              		.loc 1 333 5 is_stmt 1 view .LVU488
 1677              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1678              		.loc 1 333 34 is_stmt 0 view .LVU489
 1679 07ac 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1680 07b0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1681 07b4 FEFFFFEB 		bl	malloc		@
 1682              	.LVL92:
 1683              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 334:armwave.c     **** 
 335:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1684              		.loc 1 335 5 view .LVU490
 1685 07b8 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1686 07bc 0620A0E1 		mov	r2, r6	@, _31
 1687 07c0 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1688 07c4 0710A0E1 		mov	r1, r7	@, _23
 1689              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1690              		.loc 1 333 34 view .LVU491
 1691 07c8 00C0A0E1 		mov	ip, r0	@ tmp238,
 1692              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1693              		.loc 1 335 5 view .LVU492
 1694 07cc 0030A0E1 		mov	r3, r0	@, tmp238
 1695              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1696              		.loc 1 333 32 view .LVU493
 1697 07d0 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1698              		.loc 1 335 5 is_stmt 1 view .LVU494
 1699 07d4 64009FE5 		ldr	r0, .L88+24	@,
 1700 07d8 FEFFFFEB 		bl	printf		@
 1701              	.LVL93:
 336:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 337:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 338:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 339:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 340:armwave.c     **** 
 341:armwave.c     ****     malloc_stats();
 1702              		.loc 1 341 5 view .LVU495
 1703              	@ armwave.c:342: }
 342:armwave.c     **** }
 1704              		.loc 1 342 1 is_stmt 0 view .LVU496
 1705 07dc 14D08DE2 		add	sp, sp, #20	@,,
 1706              		.cfi_remember_state
 1707              		.cfi_def_cfa_offset 36
 1708              		@ sp needed	@
 1709 07e0 028BBDEC 		vldm	sp!, {d8}	@
 1710              		.cfi_restore 80
 1711              		.cfi_restore 81
 1712              		.cfi_def_cfa_offset 28
 1713              	.LVL94:
 1714              		.loc 1 342 1 view .LVU497
 1715 07e4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1716              		.cfi_restore 14
 1717              		.cfi_restore 9
 1718              		.cfi_restore 8
 1719              		.cfi_restore 7
 1720              		.cfi_restore 6
 1721              		.cfi_restore 5
 1722              		.cfi_restore 4
 1723              		.cfi_def_cfa_offset 0
 1724              	.LVL95:
 1725              	@ armwave.c:341:     malloc_stats();
 341:armwave.c     **** }
 1726              		.loc 1 341 5 view .LVU498
 1727 07e8 FEFFFFEA 		b	malloc_stats		@
 1728              	.LVL96:
 1729              	.L85:
 1730              		.cfi_restore_state
 263:armwave.c     **** 
 1731              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU499
 1732 07ec 50309FE5 		ldr	r3, .L88+28	@,
 1733 07f0 50209FE5 		ldr	r2, .L88+32	@,
 1734 07f4 50109FE5 		ldr	r1, .L88+36	@,
 1735 07f8 50009FE5 		ldr	r0, .L88+40	@,
 1736 07fc FEFFFFEB 		bl	__assert_fail		@
 1737              	.LVL97:
 1738              	.L87:
 325:armwave.c     **** 
 1739              		.loc 1 325 5 discriminator 1 view .LVU500
 1740 0800 3C309FE5 		ldr	r3, .L88+28	@,
 1741 0804 48209FE5 		ldr	r2, .L88+44	@,
 1742 0808 3C109FE5 		ldr	r1, .L88+36	@,
 1743 080c 44009FE5 		ldr	r0, .L88+48	@,
 1744 0810 FEFFFFEB 		bl	__assert_fail		@
 1745              	.LVL98:
 1746              	.L86:
 317:armwave.c     **** 
 1747              		.loc 1 317 5 discriminator 1 view .LVU501
 1748 0814 28309FE5 		ldr	r3, .L88+28	@,
 1749 0818 3C209FE5 		ldr	r2, .L88+52	@,
 1750 081c 28109FE5 		ldr	r1, .L88+36	@,
 1751 0820 38009FE5 		ldr	r0, .L88+56	@,
 1752 0824 FEFFFFEB 		bl	__assert_fail		@
 1753              	.LVL99:
 1754              	.L89:
 1755              		.align	2
 1756              	.L88:
 1757 0828 00007F43 		.word	1132396544
 1758 082c 00008047 		.word	1199570944
 1759 0830 0000803F 		.word	1065353216
 1760 0834 40000000 		.word	.LC4
 1761 0838 00000000 		.word	g_armwave_state
 1762 083c 84000000 		.word	.LC6
 1763 0840 34010000 		.word	.LC9
 1764 0844 1C000000 		.word	.LANCHOR0+28
 1765 0848 07010000 		.word	263
 1766 084c 20000000 		.word	.LC2
 1767 0850 6C000000 		.word	.LC5
 1768 0854 45010000 		.word	325
 1769 0858 08010000 		.word	.LC8
 1770 085c 3D010000 		.word	317
 1771 0860 E4000000 		.word	.LC7
 1772              		.cfi_endproc
 1773              	.LFE62:
 1775              		.align	2
 1776              		.global	armwave_set_wave_pointer
 1777              		.syntax unified
 1778              		.arm
 1779              		.fpu vfp
 1781              	armwave_set_wave_pointer:
 1782              	.LVL100:
 1783              	.LFB63:
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 346:armwave.c     ****  * in the future.
 347:armwave.c     ****  */
 348:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 349:armwave.c     **** {
 1784              		.loc 1 349 1 view -0
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 0
 1787              		@ frame_needed = 0, uses_anonymous_args = 0
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1788              		.loc 1 350 5 view .LVU503
 1789 0864 000050E3 		cmp	r0, #0	@ wave_buffer
 1790              		.loc 1 350 5 is_stmt 0 view .LVU504
 1791 0868 0200000A 		beq	.L95		@,
 351:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1792              		.loc 1 351 5 is_stmt 1 view .LVU505
 1793              	@ armwave.c:351:     g_armwave_state.wave_buffer = wave_buffer;
 1794              		.loc 1 351 33 is_stmt 0 view .LVU506
 1795 086c 1C309FE5 		ldr	r3, .L96	@ tmp116,
 1796 0870 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1797 0874 1EFF2FE1 		bx	lr	@
 1798              	.L95:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1799              		.loc 1 350 5 is_stmt 1 discriminator 1 view .LVU507
 1800              	@ armwave.c:349: {
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1801              		.loc 1 349 1 is_stmt 0 discriminator 1 view .LVU508
 1802 0878 10402DE9 		push	{r4, lr}	@
 1803              		.cfi_def_cfa_offset 8
 1804              		.cfi_offset 4, -8
 1805              		.cfi_offset 14, -4
 1806              	@ armwave.c:350:     assert(wave_buffer != NULL);
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1807              		.loc 1 350 5 discriminator 1 view .LVU509
 1808 087c 10309FE5 		ldr	r3, .L96+4	@,
 1809 0880 10209FE5 		ldr	r2, .L96+8	@,
 1810 0884 10109FE5 		ldr	r1, .L96+12	@,
 1811 0888 10009FE5 		ldr	r0, .L96+16	@,
 1812              	.LVL101:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1813              		.loc 1 350 5 discriminator 1 view .LVU510
 1814 088c FEFFFFEB 		bl	__assert_fail		@
 1815              	.LVL102:
 1816              	.L97:
 1817              		.align	2
 1818              	.L96:
 1819 0890 00000000 		.word	g_armwave_state
 1820 0894 34000000 		.word	.LANCHOR0+52
 1821 0898 5E010000 		.word	350
 1822 089c 20000000 		.word	.LC2
 1823 08a0 58010000 		.word	.LC10
 1824              		.cfi_endproc
 1825              	.LFE63:
 1827              		.align	2
 1828              		.global	armwave_set_wave_pointer_as_testbuf
 1829              		.syntax unified
 1830              		.arm
 1831              		.fpu vfp
 1833              	armwave_set_wave_pointer_as_testbuf:
 1834              	.LVL103:
 1835              	.LFB64:
 352:armwave.c     **** }
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 356:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 359:armwave.c     **** {
 1836              		.loc 1 359 1 is_stmt 1 view -0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              		@ link register save eliminated.
 360:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1841              		.loc 1 360 5 view .LVU512
 1842              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1843              		.loc 1 360 29 is_stmt 0 view .LVU513
 1844 08a4 24309FE5 		ldr	r3, .L101	@ tmp117,
 1845              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1846              		.loc 1 360 7 view .LVU514
 1847 08a8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1848 08ac 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1849 08b0 0400003A 		bcc	.L100		@,
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 362:armwave.c     ****         return;
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1850              		.loc 1 365 5 is_stmt 1 view .LVU515
 1851              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1852              		.loc 1 365 111 is_stmt 0 view .LVU516
 1853 08b4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1854              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1855              		.loc 1 365 68 view .LVU517
 1856 08b8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1857 08bc 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1858              	.LVL104:
 1859              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1860              		.loc 1 365 33 view .LVU518
 1861 08c0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1862              	@ armwave.c:366: }
 366:armwave.c     **** }
 1863              		.loc 1 366 1 view .LVU519
 1864 08c4 1EFF2FE1 		bx	lr	@
 1865              	.LVL105:
 1866              	.L100:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1867              		.loc 1 361 9 is_stmt 1 view .LVU520
 1868 08c8 04009FE5 		ldr	r0, .L101+4	@,
 1869              	.LVL106:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1870              		.loc 1 361 9 is_stmt 0 view .LVU521
 1871 08cc FEFFFFEA 		b	puts		@
 1872              	.LVL107:
 1873              	.L102:
 1874              		.align	2
 1875              	.L101:
 1876 08d0 00000000 		.word	g_armwave_state
 1877 08d4 6C010000 		.word	.LC11
 1878              		.cfi_endproc
 1879              	.LFE64:
 1881              		.align	2
 1882              		.global	armwave_set_wave_pointer_u32
 1883              		.syntax unified
 1884              		.arm
 1885              		.fpu vfp
 1887              	armwave_set_wave_pointer_u32:
 1888              	.LVL108:
 1889              	.LFB65:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 370:armwave.c     ****  * disjointed buffers in the future.
 371:armwave.c     ****  */
 372:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 373:armwave.c     **** {
 1890              		.loc 1 373 1 is_stmt 1 view -0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 0
 1893              		@ frame_needed = 0, uses_anonymous_args = 0
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1894              		.loc 1 374 5 view .LVU523
 1895 08d8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1896              		.loc 1 374 5 is_stmt 0 view .LVU524
 1897 08dc 0200000A 		beq	.L108		@,
 375:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1898              		.loc 1 375 5 is_stmt 1 view .LVU525
 1899              	@ armwave.c:375:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1900              		.loc 1 375 33 is_stmt 0 view .LVU526
 1901 08e0 1C309FE5 		ldr	r3, .L109	@ tmp117,
 1902 08e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1903 08e8 1EFF2FE1 		bx	lr	@
 1904              	.L108:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1905              		.loc 1 374 5 is_stmt 1 discriminator 1 view .LVU527
 1906              	@ armwave.c:373: {
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1907              		.loc 1 373 1 is_stmt 0 discriminator 1 view .LVU528
 1908 08ec 10402DE9 		push	{r4, lr}	@
 1909              		.cfi_def_cfa_offset 8
 1910              		.cfi_offset 4, -8
 1911              		.cfi_offset 14, -4
 1912              	@ armwave.c:374:     assert(wave_buffer_ptr != 0);
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1913              		.loc 1 374 5 discriminator 1 view .LVU529
 1914 08f0 10309FE5 		ldr	r3, .L109+4	@,
 1915 08f4 10209FE5 		ldr	r2, .L109+8	@,
 1916 08f8 10109FE5 		ldr	r1, .L109+12	@,
 1917 08fc 10009FE5 		ldr	r0, .L109+16	@,
 1918              	.LVL109:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1919              		.loc 1 374 5 discriminator 1 view .LVU530
 1920 0900 FEFFFFEB 		bl	__assert_fail		@
 1921              	.LVL110:
 1922              	.L110:
 1923              		.align	2
 1924              	.L109:
 1925 0904 00000000 		.word	g_armwave_state
 1926 0908 50000000 		.word	.LANCHOR0+80
 1927 090c 76010000 		.word	374
 1928 0910 20000000 		.word	.LC2
 1929 0914 A8010000 		.word	.LC12
 1930              		.cfi_endproc
 1931              	.LFE65:
 1933              		.align	2
 1934              		.global	armwave_clear_buffer
 1935              		.syntax unified
 1936              		.arm
 1937              		.fpu vfp
 1939              	armwave_clear_buffer:
 1940              	.LVL111:
 1941              	.LFB66:
 376:armwave.c     **** }
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 382:armwave.c     **** {
 1942              		.loc 1 382 1 is_stmt 1 view -0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              		@ link register save eliminated.
 383:armwave.c     ****     // Flags ignored, only one buffer cleared
 384:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1947              		.loc 1 384 5 view .LVU532
 1948              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1949              		.loc 1 384 58 is_stmt 0 view .LVU533
 1950 0918 0C309FE5 		ldr	r3, .L112	@ tmp114,
 1951              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1952              		.loc 1 384 5 view .LVU534
 1953 091c 0010A0E3 		mov	r1, #0	@,
 1954 0920 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1955 0924 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1956              	.LVL112:
 1957              		.loc 1 384 5 view .LVU535
 1958 0928 FEFFFFEA 		b	memset		@
 1959              	.LVL113:
 1960              	.L113:
 1961              		.align	2
 1962              	.L112:
 1963 092c 00000000 		.word	g_armwave_state
 1964              		.cfi_endproc
 1965              	.LFE66:
 1967              		.align	2
 1968              		.global	armwave_set_channel_colour
 1969              		.syntax unified
 1970              		.arm
 1971              		.fpu vfp
 1973              	armwave_set_channel_colour:
 1974              	.LVL114:
 1975              	.LFB67:
 385:armwave.c     **** }
 386:armwave.c     **** 
 387:armwave.c     **** /*
 388:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 391:armwave.c     **** {
 1976              		.loc 1 391 1 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              		@ link register save eliminated.
 392:armwave.c     ****     // Only 1ch supported for now
 393:armwave.c     ****     switch(ch) {
 1981              		.loc 1 393 5 view .LVU537
 1982 0930 010050E3 		cmp	r0, #1	@ ch,
 394:armwave.c     ****         case 1:
 395:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1983              		.loc 1 395 13 view .LVU538
 1984              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 1985              		.loc 1 395 41 is_stmt 0 view .LVU539
 1986 0934 0C009F05 		ldreq	r0, .L116	@ tmp117,
 1987              	.LVL115:
 1988              		.loc 1 395 41 view .LVU540
 1989 0938 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 396:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1990              		.loc 1 396 13 is_stmt 1 view .LVU541
 1991              	@ armwave.c:396:             g_armwave_state.ch1_color.g = g;
 1992              		.loc 1 396 41 is_stmt 0 view .LVU542
 1993 093c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 397:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1994              		.loc 1 397 13 is_stmt 1 view .LVU543
 1995              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 1996              		.loc 1 397 41 is_stmt 0 view .LVU544
 1997 0940 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 398:armwave.c     ****             break;
 1998              		.loc 1 398 13 is_stmt 1 view .LVU545
 1999              	@ armwave.c:400: }
 399:armwave.c     ****     }
 400:armwave.c     **** }
 2000              		.loc 1 400 1 is_stmt 0 view .LVU546
 2001 0944 1EFF2FE1 		bx	lr	@
 2002              	.L117:
 2003              		.align	2
 2004              	.L116:
 2005 0948 00000000 		.word	g_armwave_state
 2006              		.cfi_endproc
 2007              	.LFE67:
 2009              		.align	2
 2010              		.global	armwave_dump_ppm_debug
 2011              		.syntax unified
 2012              		.arm
 2013              		.fpu vfp
 2015              	armwave_dump_ppm_debug:
 2016              	.LVL116:
 2017              	.LFB68:
 401:armwave.c     **** 
 402:armwave.c     **** /*
 403:armwave.c     ****  * Dump a ppm of a buffer to a file.
 404:armwave.c     ****  */
 405:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 406:armwave.c     **** {
 2018              		.loc 1 406 1 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 407:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2022              		.loc 1 407 5 view .LVU548
 2023              	@ armwave.c:406: {
 406:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2024              		.loc 1 406 1 is_stmt 0 view .LVU549
 2025 094c 0130A0E1 		mov	r3, r1	@ fn, fn
 2026 0950 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2027              		.cfi_def_cfa_offset 28
 2028              		.cfi_offset 4, -28
 2029              		.cfi_offset 5, -24
 2030              		.cfi_offset 6, -20
 2031              		.cfi_offset 7, -16
 2032              		.cfi_offset 8, -12
 2033              		.cfi_offset 9, -8
 2034              		.cfi_offset 14, -4
 2035 0954 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2036 0958 0CD04DE2 		sub	sp, sp, #12	@,,
 2037              		.cfi_def_cfa_offset 40
 2038              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 2039              		.loc 1 407 16 view .LVU550
 2040 095c C4109FE5 		ldr	r1, .L126	@,
 2041              	.LVL117:
 2042              		.loc 1 407 16 view .LVU551
 2043 0960 0300A0E1 		mov	r0, r3	@, fn
 2044              	.LVL118:
 2045              		.loc 1 407 16 view .LVU552
 2046 0964 FEFFFFEB 		bl	fopen64		@
 2047              	.LVL119:
 2048              	@ armwave.c:414:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 408:armwave.c     ****     uint32_t data;
 409:armwave.c     ****     int xx, yy;
 410:armwave.c     **** 
 411:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 412:armwave.c     **** 
 413:armwave.c     ****     fputs("P3\n", fp);
 414:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2049              		.loc 1 414 5 view .LVU553
 2050 0968 BC609FE5 		ldr	r6, .L126+4	@ tmp150,
 2051              	@ armwave.c:413:     fputs("P3\n", fp);
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2052              		.loc 1 413 5 view .LVU554
 2053 096c 0320A0E3 		mov	r2, #3	@,
 2054 0970 0110A0E3 		mov	r1, #1	@,
 2055              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 407:armwave.c     ****     uint32_t data;
 2056              		.loc 1 407 16 view .LVU555
 2057 0974 0070A0E1 		mov	r7, r0	@ fp,
 2058              	.LVL120:
 408:armwave.c     ****     uint32_t data;
 2059              		.loc 1 408 5 is_stmt 1 view .LVU556
 409:armwave.c     **** 
 2060              		.loc 1 409 5 view .LVU557
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2061              		.loc 1 413 5 view .LVU558
 2062 0978 0030A0E1 		mov	r3, r0	@, fp
 2063 097c AC009FE5 		ldr	r0, .L126+8	@,
 2064              	.LVL121:
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2065              		.loc 1 413 5 is_stmt 0 view .LVU559
 2066 0980 FEFFFFEB 		bl	fwrite		@
 2067              	.LVL122:
 2068              		.loc 1 414 5 is_stmt 1 view .LVU560
 2069 0984 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2070 0988 A4109FE5 		ldr	r1, .L126+12	@,
 2071 098c 0700A0E1 		mov	r0, r7	@, fp
 2072 0990 FEFFFFEB 		bl	fprintf		@
 2073              	.LVL123:
 415:armwave.c     ****     fputs("255\n", fp);
 2074              		.loc 1 415 5 view .LVU561
 2075 0994 0420A0E3 		mov	r2, #4	@,
 2076 0998 0730A0E1 		mov	r3, r7	@, fp
 2077 099c 0110A0E3 		mov	r1, #1	@,
 2078 09a0 90009FE5 		ldr	r0, .L126+16	@,
 2079 09a4 FEFFFFEB 		bl	fwrite		@
 2080              	.LVL124:
 416:armwave.c     **** 
 417:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2081              		.loc 1 417 5 view .LVU562
 2082              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2083              		.loc 1 417 37 is_stmt 0 view .LVU563
 2084 09a8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2085              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2086              		.loc 1 417 5 view .LVU564
 2087 09ac 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2088 09b0 180000DA 		ble	.L119		@,
 2089 09b4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2090              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 419:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 420:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 421:armwave.c     **** 
 422:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2091              		.loc 1 422 13 view .LVU565
 2092 09b8 7C909FE5 		ldr	r9, .L126+20	@ tmp152,
 2093              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2094              		.loc 1 417 12 view .LVU566
 2095 09bc 0050A0E3 		mov	r5, #0	@ yy,
 2096              	.LVL125:
 2097              	.L120:
 2098              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2099              		.loc 1 418 9 view .LVU567
 2100 09c0 000053E3 		cmp	r3, #0	@ _13,
 2101              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2102              		.loc 1 418 16 view .LVU568
 2103 09c4 0040A0C3 		movgt	r4, #0	@ xx,
 2104              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2105              		.loc 1 418 9 view .LVU569
 2106 09c8 0F0000DA 		ble	.L122		@,
 2107              	.LVL126:
 2108              	.L121:
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2109              		.loc 1 419 13 is_stmt 1 discriminator 3 view .LVU570
 2110              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2111              		.loc 1 419 29 is_stmt 0 discriminator 3 view .LVU571
 2112 09cc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2113              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2114              		.loc 1 422 13 discriminator 3 view .LVU572
 2115 09d0 0910A0E1 		mov	r1, r9	@, tmp152
 2116 09d4 0700A0E1 		mov	r0, r7	@, fp
 2117              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2118              		.loc 1 419 18 discriminator 3 view .LVU573
 2119 09d8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2120              	.LVL127:
 2121              		.loc 1 422 13 is_stmt 1 discriminator 3 view .LVU574
 2122              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2123              		.loc 1 418 58 is_stmt 0 discriminator 3 view .LVU575
 2124 09dc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2125              	.LVL128:
 2126              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2127              		.loc 1 422 81 discriminator 3 view .LVU576
 2128 09e0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2129              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2130              		.loc 1 422 61 discriminator 3 view .LVU577
 2131 09e4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2132              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2133              		.loc 1 422 13 discriminator 3 view .LVU578
 2134 09e8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2135 09ec 7330EFE6 		uxtb	r3, r3	@, tmp142
 2136 09f0 00C08DE5 		str	ip, [sp]	@ tmp147,
 2137 09f4 7220EFE6 		uxtb	r2, r2	@, data
 2138              	.LVL129:
 2139              		.loc 1 422 13 discriminator 3 view .LVU579
 2140 09f8 FEFFFFEB 		bl	fprintf		@
 2141              	.LVL130:
 2142              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2143              		.loc 1 418 41 discriminator 3 view .LVU580
 2144 09fc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2145              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2146              		.loc 1 418 9 discriminator 3 view .LVU581
 2147 0a00 040053E1 		cmp	r3, r4	@ _13, xx
 2148 0a04 F0FFFFCA 		bgt	.L121		@,
 2149 0a08 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2150              	.LVL131:
 2151              	.L122:
 2152              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2153              		.loc 1 417 55 discriminator 2 view .LVU582
 2154 0a0c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2155              	.LVL132:
 2156              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2157              		.loc 1 417 5 discriminator 2 view .LVU583
 2158 0a10 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2159 0a14 E9FFFFBA 		blt	.L120		@,
 2160              	.LVL133:
 2161              	.L119:
 423:armwave.c     ****         }
 424:armwave.c     ****     }
 425:armwave.c     **** 
 426:armwave.c     ****     fclose(fp);
 2162              		.loc 1 426 5 is_stmt 1 view .LVU584
 2163 0a18 0700A0E1 		mov	r0, r7	@, fp
 2164              	@ armwave.c:427: }
 427:armwave.c     **** }
 2165              		.loc 1 427 1 is_stmt 0 view .LVU585
 2166 0a1c 0CD08DE2 		add	sp, sp, #12	@,,
 2167              		.cfi_def_cfa_offset 28
 2168              		@ sp needed	@
 2169 0a20 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2170              		.cfi_restore 14
 2171              		.cfi_restore 9
 2172              		.cfi_restore 8
 2173              		.cfi_restore 7
 2174              		.cfi_restore 6
 2175              		.cfi_restore 5
 2176              		.cfi_restore 4
 2177              		.cfi_def_cfa_offset 0
 2178              	.LVL134:
 2179              	@ armwave.c:426:     fclose(fp);
 426:armwave.c     **** }
 2180              		.loc 1 426 5 view .LVU586
 2181 0a24 FEFFFFEA 		b	fclose		@
 2182              	.LVL135:
 2183              	.L127:
 426:armwave.c     **** }
 2184              		.loc 1 426 5 view .LVU587
 2185              		.align	2
 2186              	.L126:
 2187 0a28 C0010000 		.word	.LC13
 2188 0a2c 00000000 		.word	g_armwave_state
 2189 0a30 C4010000 		.word	.LC14
 2190 0a34 C8010000 		.word	.LC15
 2191 0a38 D0010000 		.word	.LC16
 2192 0a3c D8010000 		.word	.LC17
 2193              		.cfi_endproc
 2194              	.LFE68:
 2196              		.align	2
 2197              		.global	armwave_test_init
 2198              		.syntax unified
 2199              		.arm
 2200              		.fpu vfp
 2202              	armwave_test_init:
 2203              	.LVL136:
 2204              	.LFB69:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Initialise some test functionry.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 433:armwave.c     **** {
 2205              		.loc 1 433 1 is_stmt 1 view -0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     test_create_gamma();
 2209              		.loc 1 434 5 view .LVU589
 2210              	.LBB18:
 2211              	.LBI18:
  34:armwave.c     **** {
 2212              		.loc 1 34 6 view .LVU590
  34:armwave.c     **** {
 2213              		.loc 1 34 6 is_stmt 0 view .LVU591
 2214              	.LBE18:
 2215              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2216              		.loc 1 433 1 view .LVU592
 2217 0a40 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2218              		.cfi_def_cfa_offset 32
 2219              		.cfi_offset 4, -32
 2220              		.cfi_offset 5, -28
 2221              		.cfi_offset 6, -24
 2222              		.cfi_offset 7, -20
 2223              		.cfi_offset 8, -16
 2224              		.cfi_offset 9, -12
 2225              		.cfi_offset 10, -8
 2226              		.cfi_offset 14, -4
 2227 0a44 068B2DED 		vpush.64	{d8, d9, d10}	@
 2228              		.cfi_def_cfa_offset 56
 2229              		.cfi_offset 80, -56
 2230              		.cfi_offset 81, -52
 2231              		.cfi_offset 82, -48
 2232              		.cfi_offset 83, -44
 2233              		.cfi_offset 84, -40
 2234              		.cfi_offset 85, -36
 2235 0a48 BC409FE5 		ldr	r4, .L132+20	@ ivtmp.92,
 2236              	.LBB21:
 2237              	.LBB19:
 2238              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2239              		.loc 1 40 32 view .LVU593
 2240 0a4c 2DAA9FED 		vldr.32	s20, .L132+16	@ tmp136,
 2241              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2242              		.loc 1 40 26 view .LVU594
 2243 0a50 289B9FED 		vldr.64	d9, .L132	@ tmp151,
 2244              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2245              		.loc 1 40 49 view .LVU595
 2246 0a54 298B9FED 		vldr.64	d8, .L132+8	@ tmp139,
 2247 0a58 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.92,
 2248              	.LBE19:
 2249              	.LBE21:
 2250              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2251              		.loc 1 433 1 view .LVU596
 2252 0a5c 10D04DE2 		sub	sp, sp, #16	@,,
 2253              		.cfi_def_cfa_offset 72
 2254              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2255              		.loc 1 433 1 view .LVU597
 2256 0a60 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2257 0a64 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2258 0a68 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2259 0a6c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2260 0a70 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.92,
 2261 0a74 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2262              	.LVL137:
 2263              	.L129:
 2264              	.LBB22:
 2265              	.LBB20:
  40:armwave.c     ****     }
 2266              		.loc 1 40 9 is_stmt 1 view .LVU598
 2267              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2268              		.loc 1 40 32 is_stmt 0 view .LVU599
 2269 0a78 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.92
 2270              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2271              		.loc 1 40 26 view .LVU600
 2272 0a7c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2273              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2274              		.loc 1 40 32 view .LVU601
 2275 0a80 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2276 0a84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2277 0a88 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2278              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2279              		.loc 1 40 26 view .LVU602
 2280 0a8c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2281 0a90 FEFFFFEB 		bl	pow		@
 2282              	.LVL138:
 2283              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2284              		.loc 1 40 49 view .LVU603
 2285 0a94 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2286              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2287              		.loc 1 40 24 view .LVU604
 2288 0a98 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2289 0a9c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2290 0aa0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2291              	.LVL139:
 2292              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2293              		.loc 1 39 5 view .LVU605
 2294 0aa4 0A0054E1 		cmp	r4, r10	@ ivtmp.92, _39
 2295 0aa8 F2FFFF1A 		bne	.L129		@,
 2296              	.LVL140:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2297              		.loc 1 39 5 view .LVU606
 2298              	.LBE20:
 2299              	.LBE22:
 435:armwave.c     **** 
 436:armwave.c     ****     // make ch1 yellowish by default
 437:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2300              		.loc 1 437 5 is_stmt 1 view .LVU607
 2301              	.LBB23:
 2302              	.LBI23:
 390:armwave.c     **** {
 2303              		.loc 1 390 6 view .LVU608
 2304              	.LBB24:
 393:armwave.c     ****         case 1:
 2305              		.loc 1 393 5 view .LVU609
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2306              		.loc 1 395 13 view .LVU610
 396:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2307              		.loc 1 396 13 view .LVU611
 2308              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2309              		.loc 1 395 41 is_stmt 0 view .LVU612
 2310 0aac 5CC09FE5 		ldr	ip, .L132+24	@ tmp142,
 2311 0ab0 5C409FE5 		ldr	r4, .L132+28	@ tmp143,
 2312              	.LBE24:
 2313              	.LBE23:
 2314              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 438:armwave.c     **** 
 439:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2315              		.loc 1 439 5 view .LVU613
 2316 0ab4 0000A0E3 		mov	r0, #0	@ tmp147,
 2317              	.LBB28:
 2318              	.LBB25:
 2319              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2320              		.loc 1 397 41 view .LVU614
 2321 0ab8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2322              	.LBE25:
 2323              	.LBE28:
 2324              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2325              		.loc 1 439 5 view .LVU615
 2326 0abc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2327 0ac0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2328 0ac4 00808DE5 		str	r8, [sp]	@ render_width,
 2329 0ac8 0610A0E1 		mov	r1, r6	@, tmp3
 2330 0acc 0720A0E1 		mov	r2, r7	@, nwaves
 2331              	.LBB29:
 2332              	.LBB26:
 2333              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2334              		.loc 1 395 41 view .LVU616
 2335 0ad0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 397:armwave.c     ****             break;
 2336              		.loc 1 397 13 is_stmt 1 view .LVU617
 2337              	.LBE26:
 2338              	.LBE29:
 2339              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2340              		.loc 1 439 5 is_stmt 0 view .LVU618
 2341 0ad4 0630A0E1 		mov	r3, r6	@, wave_size
 2342              	.LBB30:
 2343              	.LBB27:
 2344              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2345              		.loc 1 397 41 view .LVU619
 2346 0ad8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 398:armwave.c     ****     }
 2347              		.loc 1 398 13 is_stmt 1 view .LVU620
 2348              	.LVL141:
 398:armwave.c     ****     }
 2349              		.loc 1 398 13 is_stmt 0 view .LVU621
 2350              	.LBE27:
 2351              	.LBE30:
 2352              		.loc 1 439 5 is_stmt 1 view .LVU622
 2353 0adc FEFFFFEB 		bl	armwave_setup_render		@
 2354              	.LVL142:
 440:armwave.c     **** 
 441:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2355              		.loc 1 441 5 view .LVU623
 2356 0ae0 30109FE5 		ldr	r1, .L132+32	@,
 2357 0ae4 30009FE5 		ldr	r0, .L132+36	@,
 2358              	@ armwave.c:442: }
 442:armwave.c     **** }
 2359              		.loc 1 442 1 is_stmt 0 view .LVU624
 2360 0ae8 10D08DE2 		add	sp, sp, #16	@,,
 2361              		.cfi_def_cfa_offset 56
 2362              		@ sp needed	@
 2363 0aec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2364              		.cfi_restore 84
 2365              		.cfi_restore 85
 2366              		.cfi_restore 82
 2367              		.cfi_restore 83
 2368              		.cfi_restore 80
 2369              		.cfi_restore 81
 2370              		.cfi_def_cfa_offset 32
 2371 0af0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2372              		.cfi_restore 14
 2373              		.cfi_restore 10
 2374              		.cfi_restore 9
 2375              		.cfi_restore 8
 2376              		.cfi_restore 7
 2377              		.cfi_restore 6
 2378              		.cfi_restore 5
 2379              		.cfi_restore 4
 2380              		.cfi_def_cfa_offset 0
 2381              	.LVL143:
 2382              	@ armwave.c:441:     printf("armwave version: %s\n", ARMWAVE_VER);
 441:armwave.c     **** }
 2383              		.loc 1 441 5 view .LVU625
 2384 0af4 FEFFFFEA 		b	printf		@
 2385              	.LVL144:
 2386              	.L133:
 2387              		.align	3
 2388              	.L132:
 2389 0af8 000000C0 		.word	-1073741824
 2390 0afc CCCCEC3F 		.word	1072483532
 2391 0b00 00000000 		.word	0
 2392 0b04 00E06F40 		.word	1081073664
 2393 0b08 00007F43 		.word	1132396544
 2394 0b0c FFFFFFFF 		.word	gamma_table-1
 2395 0b10 00000000 		.word	g_armwave_state
 2396 0b14 F609F406 		.word	116656630
 2397 0b18 00000000 		.word	.LC0
 2398 0b1c 08000000 		.word	.LC1
 2399              		.cfi_endproc
 2400              	.LFE69:
 2402              		.align	2
 2403              		.global	armwave_test_fill_outbuf
 2404              		.syntax unified
 2405              		.arm
 2406              		.fpu vfp
 2408              	armwave_test_fill_outbuf:
 2409              	.LFB70:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Render image to the local allocated buffer.
 446:armwave.c     ****  */
 447:armwave.c     **** void armwave_test_fill_outbuf()
 448:armwave.c     **** {
 2410              		.loc 1 448 1 is_stmt 1 view -0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2415              		.loc 1 449 5 view .LVU627
 2416 0b20 04309FE5 		ldr	r3, .L135	@ tmp111,
 2417 0b24 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2418 0b28 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2419              	.LVL145:
 2420              	.L136:
 2421              		.align	2
 2422              	.L135:
 2423 0b2c 00000000 		.word	g_armwave_state
 2424              		.cfi_endproc
 2425              	.LFE70:
 2427              		.align	2
 2428              		.global	armwave_test_dump_buffer_to_ppm
 2429              		.syntax unified
 2430              		.arm
 2431              		.fpu vfp
 2433              	armwave_test_dump_buffer_to_ppm:
 2434              	.LVL146:
 2435              	.LFB71:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 456:armwave.c     **** {
 2436              		.loc 1 456 1 view -0
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 0
 2439              		@ frame_needed = 0, uses_anonymous_args = 0
 2440              		@ link register save eliminated.
 457:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2441              		.loc 1 457 5 view .LVU629
 2442 0b30 08309FE5 		ldr	r3, .L138	@ tmp112,
 2443 0b34 0010A0E1 		mov	r1, r0	@, fn
 2444 0b38 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2445              	.LVL147:
 2446              		.loc 1 457 5 is_stmt 0 view .LVU630
 2447 0b3c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2448              	.LVL148:
 2449              	.L139:
 2450              		.loc 1 457 5 view .LVU631
 2451              		.align	2
 2452              	.L138:
 2453 0b40 00000000 		.word	g_armwave_state
 2454              		.cfi_endproc
 2455              	.LFE71:
 2457              		.align	2
 2458              		.global	armwave_test_fill_gdkbuf
 2459              		.syntax unified
 2460              		.arm
 2461              		.fpu vfp
 2463              	armwave_test_fill_gdkbuf:
 2464              	.LVL149:
 2465              	.LFB72:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Render GDK buffer with test funtionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 464:armwave.c     **** {
 2466              		.loc 1 464 1 is_stmt 1 view -0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              		@ link register save eliminated.
 465:armwave.c     ****     //PyObject *mv;
 466:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 467:armwave.c     **** 
 468:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 469:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2471              		.loc 1 469 5 view .LVU633
 470:armwave.c     ****     
 471:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2472              		.loc 1 472 5 view .LVU634
 2473              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 469:armwave.c     ****     
 2474              		.loc 1 469 11 is_stmt 0 view .LVU635
 2475 0b44 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2476              	@ armwave.c:472:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2477              		.loc 1 472 5 view .LVU636
 2478 0b48 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2479              	.LVL150:
 2480              		.loc 1 472 5 view .LVU637
 2481 0b4c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2482              	.LVL151:
 2483              		.loc 1 472 5 view .LVU638
 2484              		.cfi_endproc
 2485              	.LFE72:
 2487              		.align	2
 2488              		.global	armwave_test_buffer_alloc
 2489              		.syntax unified
 2490              		.arm
 2491              		.fpu vfp
 2493              	armwave_test_buffer_alloc:
 2494              	.LVL152:
 2495              	.LFB73:
 473:armwave.c     **** }
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 479:armwave.c     **** {
 2496              		.loc 1 479 1 is_stmt 1 view -0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 0
 2499              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2500              		.loc 1 480 5 view .LVU640
 2501              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2502              		.loc 1 479 1 is_stmt 0 view .LVU641
 2503 0b50 70402DE9 		push	{r4, r5, r6, lr}	@
 2504              		.cfi_def_cfa_offset 16
 2505              		.cfi_offset 4, -16
 2506              		.cfi_offset 5, -12
 2507              		.cfi_offset 6, -8
 2508              		.cfi_offset 14, -4
 2509              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2510              		.loc 1 479 1 view .LVU642
 2511 0b54 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2512              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2513              		.loc 1 480 23 view .LVU643
 2514 0b58 44409FE5 		ldr	r4, .L148	@ tmp128,
 2515 0b5c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2516              	.LVL153:
 2517              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2518              		.loc 1 480 7 view .LVU644
 2519 0b60 000050E3 		cmp	r0, #0	@ _1,
 2520 0b64 0000000A 		beq	.L142		@,
 481:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2521              		.loc 1 481 9 is_stmt 1 view .LVU645
 2522 0b68 FEFFFFEB 		bl	free		@
 2523              	.LVL154:
 2524              	.L142:
 482:armwave.c     ****     }
 483:armwave.c     **** 
 484:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2525              		.loc 1 486 5 view .LVU646
 2526              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2527              		.loc 1 486 75 is_stmt 0 view .LVU647
 2528 0b6c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2529 0b70 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2530              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2531              		.loc 1 486 40 view .LVU648
 2532 0b74 0610A0E1 		mov	r1, r6	@, nsets
 2533              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2534              		.loc 1 486 75 view .LVU649
 2535 0b78 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2536              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2537              		.loc 1 486 40 view .LVU650
 2538 0b7c 0500A0E1 		mov	r0, r5	@, _4
 2539 0b80 FEFFFFEB 		bl	calloc		@
 2540              	.LVL155:
 2541              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     **** 
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2542              		.loc 1 488 7 view .LVU651
 2543 0b84 000050E3 		cmp	r0, #0	@ tmp124,
 2544              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2545              		.loc 1 486 38 view .LVU652
 2546 0b88 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2547              		.loc 1 488 5 is_stmt 1 view .LVU653
 2548              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 2549              		.loc 1 488 7 is_stmt 0 view .LVU654
 2550 0b8c 7080BD18 		popne	{r4, r5, r6, pc}	@
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2551              		.loc 1 489 9 is_stmt 1 view .LVU655
 2552 0b90 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2553 0b94 0620A0E1 		mov	r2, r6	@, nsets
 2554 0b98 08009FE5 		ldr	r0, .L148+4	@,
 2555              	@ armwave.c:493: }
 490:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 491:armwave.c     ****         return;
 492:armwave.c     ****     }
 493:armwave.c     **** }
 2556              		.loc 1 493 1 is_stmt 0 view .LVU656
 2557 0b9c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2558              		.cfi_restore 14
 2559              		.cfi_restore 6
 2560              		.cfi_restore 5
 2561              		.cfi_restore 4
 2562              		.cfi_def_cfa_offset 0
 2563              	.LVL156:
 2564              	@ armwave.c:489:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2565              		.loc 1 489 9 view .LVU657
 2566 0ba0 FEFFFFEA 		b	printf		@
 2567              	.LVL157:
 2568              	.L149:
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2569              		.loc 1 489 9 view .LVU658
 2570              		.align	2
 2571              	.L148:
 2572 0ba4 00000000 		.word	g_armwave_state
 2573 0ba8 E8010000 		.word	.LC18
 2574              		.cfi_endproc
 2575              	.LFE73:
 2577              		.align	2
 2578              		.global	armwave_fill_pixbuf_into_pybuffer
 2579              		.syntax unified
 2580              		.arm
 2581              		.fpu vfp
 2583              	armwave_fill_pixbuf_into_pybuffer:
 2584              	.LVL158:
 2585              	.LFB74:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 497:armwave.c     ****  */
 498:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 499:armwave.c     **** {
 2586              		.loc 1 499 1 is_stmt 1 view -0
 2587              		.cfi_startproc
 2588              		@ args = 0, pretend = 0, frame = 48
 2589              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     Py_buffer buffer;
 2590              		.loc 1 500 5 view .LVU660
 501:armwave.c     ****     int ret;
 2591              		.loc 1 501 5 view .LVU661
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 504:armwave.c     **** 
 505:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2592              		.loc 1 505 5 view .LVU662
 2593              	@ armwave.c:499: {
 499:armwave.c     ****     Py_buffer buffer;
 2594              		.loc 1 499 1 is_stmt 0 view .LVU663
 2595 0bac 04E02DE5 		str	lr, [sp, #-4]!	@,
 2596              		.cfi_def_cfa_offset 4
 2597              		.cfi_offset 14, -4
 2598 0bb0 34D04DE2 		sub	sp, sp, #52	@,,
 2599              		.cfi_def_cfa_offset 56
 2600              	@ armwave.c:505:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2601              		.loc 1 505 11 view .LVU664
 2602 0bb4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2603 0bb8 0120A0E3 		mov	r2, #1	@,
 2604 0bbc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2605              	.LVL159:
 506:armwave.c     **** 
 507:armwave.c     ****     if(ret != 0) {
 2606              		.loc 1 507 5 is_stmt 1 view .LVU665
 2607              	@ armwave.c:507:     if(ret != 0) {
 2608              		.loc 1 507 7 is_stmt 0 view .LVU666
 2609 0bc0 000050E3 		cmp	r0, #0	@,
 2610 0bc4 0A00001A 		bne	.L154		@,
 508:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 509:armwave.c     ****         Py_RETURN_FALSE;
 510:armwave.c     ****     }
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 513:armwave.c     **** 
 514:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2611              		.loc 1 514 5 is_stmt 1 view .LVU667
 2612 0bc8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2613              	.LVL160:
 2614              		.loc 1 514 5 is_stmt 0 view .LVU668
 2615 0bcc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2616              	.LVL161:
 515:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 516:armwave.c     **** 
 517:armwave.c     ****     PyBuffer_Release(&buffer);
 2617              		.loc 1 517 5 is_stmt 1 view .LVU669
 2618 0bd0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2619 0bd4 FEFFFFEB 		bl	PyBuffer_Release		@
 2620              	.LVL162:
 518:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 519:armwave.c     **** 
 520:armwave.c     ****     Py_RETURN_TRUE;
 2621              		.loc 1 520 5 view .LVU670
 2622              	.LBB31:
 2623              	.LBI31:
 2624              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2625              		.loc 2 456 20 view .LVU671
 2626              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2627              		.loc 2 458 21 view .LVU672
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2628              		.loc 2 459 5 view .LVU673
 2629              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2630              		.loc 2 459 18 is_stmt 0 view .LVU674
 2631 0bd8 38309FE5 		ldr	r3, .L155	@ tmp126,
 2632              	.LBE32:
 2633              	.LBE31:
 2634              	@ armwave.c:520:     Py_RETURN_TRUE;
 2635              		.loc 1 520 5 view .LVU675
 2636 0bdc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2637              	.LBB34:
 2638              	.LBB33:
 2639              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2640              		.loc 2 459 18 view .LVU676
 2641 0be0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2642 0be4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2643 0be8 002083E5 		str	r2, [r3]	@ tmp128,
 2644              	.LBE33:
 2645              	.LBE34:
 2646              	@ armwave.c:521: }
 521:armwave.c     **** }
 2647              		.loc 1 521 1 view .LVU677
 2648 0bec 34D08DE2 		add	sp, sp, #52	@,,
 2649              		.cfi_remember_state
 2650              		.cfi_def_cfa_offset 4
 2651              		@ sp needed	@
 2652 0bf0 04F09DE4 		ldr	pc, [sp], #4	@
 2653              	.LVL163:
 2654              	.L154:
 2655              		.cfi_restore_state
 508:armwave.c     ****         Py_RETURN_FALSE;
 2656              		.loc 1 508 9 is_stmt 1 view .LVU678
 2657 0bf4 20009FE5 		ldr	r0, .L155+4	@,
 2658              	.LVL164:
 508:armwave.c     ****         Py_RETURN_FALSE;
 2659              		.loc 1 508 9 is_stmt 0 view .LVU679
 2660 0bf8 FEFFFFEB 		bl	puts		@
 2661              	.LVL165:
 509:armwave.c     ****     }
 2662              		.loc 1 509 9 is_stmt 1 view .LVU680
 2663              	.LBB35:
 2664              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2665              		.loc 2 456 20 view .LVU681
 2666              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2667              		.loc 2 458 21 view .LVU682
 2668              		.loc 2 459 5 view .LVU683
 2669              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2670              		.loc 2 459 18 is_stmt 0 view .LVU684
 2671 0bfc 1C309FE5 		ldr	r3, .L155+8	@ tmp120,
 2672              	.LBE36:
 2673              	.LBE35:
 2674              	@ armwave.c:509:         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 2675              		.loc 1 509 9 view .LVU685
 2676 0c00 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2677              	.LBB38:
 2678              	.LBB37:
 2679              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2680              		.loc 2 459 18 view .LVU686
 2681 0c04 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2682 0c08 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2683 0c0c 002083E5 		str	r2, [r3]	@ tmp122,
 2684              	.LBE37:
 2685              	.LBE38:
 2686              	@ armwave.c:521: }
 2687              		.loc 1 521 1 view .LVU687
 2688 0c10 34D08DE2 		add	sp, sp, #52	@,,
 2689              		.cfi_def_cfa_offset 4
 2690              		@ sp needed	@
 2691 0c14 04F09DE4 		ldr	pc, [sp], #4	@
 2692              	.L156:
 2693              		.align	2
 2694              	.L155:
 2695 0c18 00000000 		.word	_Py_TrueStruct
 2696 0c1c 3C020000 		.word	.LC19
 2697 0c20 00000000 		.word	_Py_FalseStruct
 2698              		.cfi_endproc
 2699              	.LFE74:
 2701              		.align	2
 2702              		.global	armwave_test_create_am_sine
 2703              		.syntax unified
 2704              		.arm
 2705              		.fpu vfp
 2707              	armwave_test_create_am_sine:
 2708              	.LVL166:
 2709              	.LFB75:
 522:armwave.c     **** 
 523:armwave.c     **** /*
 524:armwave.c     ****  * Make a test AM waveform for render tests.
 525:armwave.c     ****  *
 526:armwave.c     ****  * @param   mod                     modulation depth
 527:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 528:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 529:armwave.c     ****  */
 530:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 531:armwave.c     **** {
 2710              		.loc 1 531 1 is_stmt 1 view -0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 8
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     float v, noise, xnoise, mod_val;
 2714              		.loc 1 532 5 view .LVU689
 533:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2715              		.loc 1 533 5 view .LVU690
 2716              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2717              		.loc 1 531 1 is_stmt 0 view .LVU691
 2718 0c24 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2719              		.cfi_def_cfa_offset 32
 2720              		.cfi_offset 4, -32
 2721              		.cfi_offset 5, -28
 2722              		.cfi_offset 6, -24
 2723              		.cfi_offset 7, -20
 2724              		.cfi_offset 8, -16
 2725              		.cfi_offset 9, -12
 2726              		.cfi_offset 10, -8
 2727              		.cfi_offset 14, -4
 2728              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2729              		.loc 1 533 38 view .LVU692
 2730 0c28 7A7A9FED 		vldr.32	s14, .L188	@ tmp180,
 2731              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2732              		.loc 1 533 55 view .LVU693
 2733 0c2c 00529FE5 		ldr	r5, .L188+28	@ tmp250,
 2734              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2735              		.loc 1 531 1 view .LVU694
 2736 0c30 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2737              		.cfi_def_cfa_offset 80
 2738              		.cfi_offset 80, -80
 2739              		.cfi_offset 81, -76
 2740              		.cfi_offset 82, -72
 2741              		.cfi_offset 83, -68
 2742              		.cfi_offset 84, -64
 2743              		.cfi_offset 85, -60
 2744              		.cfi_offset 86, -56
 2745              		.cfi_offset 87, -52
 2746              		.cfi_offset 88, -48
 2747              		.cfi_offset 89, -44
 2748              		.cfi_offset 90, -40
 2749              		.cfi_offset 91, -36
 2750 0c34 0090A0E1 		mov	r9, r0	@ sets, sets
 2751              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2752              		.loc 1 533 38 view .LVU695
 2753 0c38 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2754              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 534:armwave.c     ****     int s, set_offset = 0;
 535:armwave.c     ****     int w, x;
 536:armwave.c     **** 
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2755              		.loc 1 537 70 view .LVU696
 2756 0c3c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2757 0c40 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2758              	.LBB41:
 2759              	.LBB42:
 2760              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2761              		.loc 1 480 23 view .LVU697
 2762 0c44 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2763              	.LVL167:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2764              		.loc 1 480 23 view .LVU698
 2765              	.LBE42:
 2766              	.LBE41:
 2767              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2768              		.loc 1 533 38 view .LVU699
 2769 0c48 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2770              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2771              		.loc 1 537 70 view .LVU700
 2772 0c4c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2773              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2774              		.loc 1 531 1 view .LVU701
 2775 0c50 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2776              	.LBB46:
 2777              	.LBB43:
 2778              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2779              		.loc 1 480 7 view .LVU702
 2780 0c54 000050E3 		cmp	r0, #0	@ _82,
 2781              	.LBE43:
 2782              	.LBE46:
 2783              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2784              		.loc 1 531 1 view .LVU703
 2785 0c58 08D04DE2 		sub	sp, sp, #8	@,,
 2786              		.cfi_def_cfa_offset 88
 2787              	@ armwave.c:538:     g_armwave_state.test_wave_buffer_nsets = sets;
 538:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2788              		.loc 1 538 44 view .LVU704
 2789 0c5c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2790              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2791              		.loc 1 537 45 view .LVU705
 2792 0c60 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2793              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2794              		.loc 1 533 38 view .LVU706
 2795 0c64 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2796              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2797              		.loc 1 533 11 view .LVU707
 2798 0c68 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2799              	.LVL168:
 534:armwave.c     ****     int w, x;
 2800              		.loc 1 534 5 is_stmt 1 view .LVU708
 535:armwave.c     **** 
 2801              		.loc 1 535 5 view .LVU709
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2802              		.loc 1 537 5 view .LVU710
 2803              		.loc 1 538 5 view .LVU711
 539:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2804              		.loc 1 539 5 view .LVU712
 2805              	.LBB47:
 2806              	.LBI41:
 478:armwave.c     **** {
 2807              		.loc 1 478 6 view .LVU713
 2808              	.LBB44:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2809              		.loc 1 480 5 view .LVU714
 2810              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2811              		.loc 1 480 7 is_stmt 0 view .LVU715
 2812 0c6c 0000000A 		beq	.L158		@,
 481:armwave.c     ****     }
 2813              		.loc 1 481 9 is_stmt 1 view .LVU716
 2814 0c70 FEFFFFEB 		bl	free		@
 2815              	.LVL169:
 2816              	.L158:
 486:armwave.c     **** 
 2817              		.loc 1 486 5 view .LVU717
 2818              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2819              		.loc 1 486 75 is_stmt 0 view .LVU718
 2820 0c74 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2821 0c78 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2822              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2823              		.loc 1 486 40 view .LVU719
 2824 0c7c 0910A0E1 		mov	r1, r9	@, sets
 2825              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2826              		.loc 1 486 75 view .LVU720
 2827 0c80 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2828              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2829              		.loc 1 486 40 view .LVU721
 2830 0c84 0400A0E1 		mov	r0, r4	@, _85
 2831 0c88 FEFFFFEB 		bl	calloc		@
 2832              	.LVL170:
 2833              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2834              		.loc 1 488 7 view .LVU722
 2835 0c8c 000050E3 		cmp	r0, #0	@ tmp191,
 2836              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2837              		.loc 1 486 38 view .LVU723
 2838 0c90 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2839              		.loc 1 488 5 is_stmt 1 view .LVU724
 2840              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2841              		.loc 1 488 7 is_stmt 0 view .LVU725
 2842 0c94 5A00000A 		beq	.L187		@,
 2843              	.L159:
 2844              	.LVL171:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2845              		.loc 1 488 7 view .LVU726
 2846              	.LBE44:
 2847              	.LBE47:
 2848              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 540:armwave.c     **** 
 541:armwave.c     ****     for(s = 0; s < sets; s++) {
 2849              		.loc 1 541 5 discriminator 1 view .LVU727
 2850 0c98 000059E3 		cmp	r9, #0	@ sets,
 2851 0c9c 550000DA 		ble	.L157		@,
 2852              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 543:armwave.c     ****     
 544:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 545:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 546:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 547:armwave.c     **** 
 548:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 549:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     **** 
 554:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 555:armwave.c     ****                     noise = -noise;
 556:armwave.c     **** 
 557:armwave.c     ****                 noise += 1.0f;
 558:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 559:armwave.c     **** 
 560:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2853              		.loc 1 560 45 view .LVU728
 2854 0ca0 5C8A9FED 		vldr.32	s16, .L188	@ tmp258,
 2855              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 561:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 562:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 563:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2856              		.loc 1 563 104 view .LVU729
 2857 0ca4 5CCA9FED 		vldr.32	s24, .L188+4	@ tmp259,
 2858              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2859              		.loc 1 541 5 view .LVU730
 2860 0ca8 0070A0E3 		mov	r7, #0	@ set_offset,
 2861              	@ armwave.c:542:         printf("Calculating test set %d\n", s);
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2862              		.loc 1 542 9 view .LVU731
 2863 0cac 84A19FE5 		ldr	r10, .L188+32	@ tmp257,
 2864              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2865              		.loc 1 541 5 view .LVU732
 2866 0cb0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2867              	.LVL172:
 2868              	.L160:
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2869              		.loc 1 542 9 is_stmt 1 view .LVU733
 2870 0cb4 0810A0E1 		mov	r1, r8	@, s
 2871 0cb8 0A00A0E1 		mov	r0, r10	@, tmp257
 2872 0cbc FEFFFFEB 		bl	printf		@
 2873              	.LVL173:
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2874              		.loc 1 544 9 view .LVU734
 2875              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2876              		.loc 1 544 39 is_stmt 0 view .LVU735
 2877 0cc0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2878              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2879              		.loc 1 544 9 view .LVU736
 2880 0cc4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2881 0cc8 450000DA 		ble	.L161		@,
 2882              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2883              		.loc 1 546 21 view .LVU737
 2884 0ccc 53CADFED 		vldr.32	s25, .L188+8	@ tmp200,
 2885              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2886              		.loc 1 560 33 view .LVU738
 2887 0cd0 53BA9FED 		vldr.32	s22, .L188+12	@ tmp253,
 2888              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2889              		.loc 1 558 24 view .LVU739
 2890 0cd4 53AADFED 		vldr.32	s21, .L188+16	@ tmp254,
 2891 0cd8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2892              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2893              		.loc 1 544 15 view .LVU740
 2894 0cdc 0060A0E3 		mov	r6, #0	@ w,
 2895              	.LVL174:
 2896              	.L168:
 546:armwave.c     **** 
 2897              		.loc 1 546 13 is_stmt 1 view .LVU741
 2898              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2899              		.loc 1 546 21 is_stmt 0 view .LVU742
 2900 0ce0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2901 0ce4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2902              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2903              		.loc 1 548 13 view .LVU743
 2904 0ce8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2905              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2906              		.loc 1 546 21 view .LVU744
 2907 0cec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2908 0cf0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2909              	.LVL175:
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2910              		.loc 1 548 13 is_stmt 1 view .LVU745
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2911              		.loc 1 548 13 is_stmt 0 view .LVU746
 2912 0cf4 370000DA 		ble	.L162		@,
 2913 0cf8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2914              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2915              		.loc 1 563 113 view .LVU747
 2916 0cfc 4AAA9FED 		vldr.32	s20, .L188+20	@ tmp229,
 2917 0d00 4A8ADFED 		vldr.32	s17, .L188+24	@ tmp230,
 2918              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2919              		.loc 1 548 19 view .LVU748
 2920 0d04 0040A0E3 		mov	r4, #0	@ x,
 2921              	.LVL176:
 2922              	.L167:
 549:armwave.c     ****                 noise *= noise;
 2923              		.loc 1 549 17 is_stmt 1 view .LVU749
 2924              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 549 28 is_stmt 0 view .LVU750
 2926 0d08 FEFFFFEB 		bl	rand		@
 2927              	.LVL177:
 2928              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2929              		.loc 1 549 35 view .LVU751
 2930 0d0c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2931              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2932              		.loc 1 549 45 view .LVU752
 2933 0d10 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2934 0d14 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2935              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2936              		.loc 1 549 24 view .LVU753
 2937 0d18 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2938              	.LVL178:
 550:armwave.c     ****                 noise *= noise;
 2939              		.loc 1 550 17 is_stmt 1 view .LVU754
 2940              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 2941              		.loc 1 550 23 is_stmt 0 view .LVU755
 2942 0d1c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2943              	.LVL179:
 551:armwave.c     ****                 noise *= noise;
 2944              		.loc 1 551 17 is_stmt 1 view .LVU756
 2945              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 2946              		.loc 1 551 23 is_stmt 0 view .LVU757
 2947 0d20 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2948              	.LVL180:
 552:armwave.c     **** 
 2949              		.loc 1 552 17 is_stmt 1 view .LVU758
 2950              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     **** 
 2951              		.loc 1 552 23 is_stmt 0 view .LVU759
 2952 0d24 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2953              	.LVL181:
 554:armwave.c     ****                     noise = -noise;
 2954              		.loc 1 554 17 is_stmt 1 view .LVU760
 2955              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2956              		.loc 1 554 21 is_stmt 0 view .LVU761
 2957 0d28 FEFFFFEB 		bl	rand		@
 2958              	.LVL182:
 555:armwave.c     **** 
 2959              		.loc 1 555 21 is_stmt 1 view .LVU762
 2960              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2961              		.loc 1 554 19 is_stmt 0 view .LVU763
 2962 0d2c 020910E3 		tst	r0, #32768	@,
 2963              	@ armwave.c:555:                     noise = -noise;
 555:armwave.c     **** 
 2964              		.loc 1 555 27 view .LVU764
 2965 0d30 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2966              	.LVL183:
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2967              		.loc 1 557 17 is_stmt 1 view .LVU765
 558:armwave.c     **** 
 2968              		.loc 1 558 17 view .LVU766
 2969              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2970              		.loc 1 558 27 is_stmt 0 view .LVU767
 2971 0d34 FEFFFFEB 		bl	rand		@
 2972              	.LVL184:
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2973              		.loc 1 560 17 is_stmt 1 view .LVU768
 2974              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2975              		.loc 1 560 45 is_stmt 0 view .LVU769
 2976 0d38 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2977              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2978              		.loc 1 560 33 view .LVU770
 2979 0d3c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2980              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2981              		.loc 1 560 45 view .LVU771
 2982 0d40 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2983              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2984              		.loc 1 560 33 view .LVU772
 2985 0d44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2986              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2987              		.loc 1 560 45 view .LVU773
 2988 0d48 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2989              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2990              		.loc 1 560 33 view .LVU774
 2991 0d4c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2992              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2993              		.loc 1 558 34 view .LVU775
 2994 0d50 7000FFE6 		uxth	r0, r0	@ tmp214,
 2995              	.LVL185:
 2996              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2997              		.loc 1 558 44 view .LVU776
 2998 0d54 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2999 0d58 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3000              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3001              		.loc 1 558 24 view .LVU777
 3002 0d5c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3003              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3004              		.loc 1 560 77 view .LVU778
 3005 0d60 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3006              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3007              		.loc 1 560 22 view .LVU779
 3008 0d64 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3009 0d68 FEFFFFEB 		bl	sin		@
 3010              	.LVL186:
 3011              		.loc 1 563 17 is_stmt 1 view .LVU780
 3012              	@ armwave.c:557:                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3013              		.loc 1 557 23 is_stmt 0 view .LVU781
 3014 0d6c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3015              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3016              		.loc 1 563 104 view .LVU782
 3017 0d70 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3018              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3019              		.loc 1 560 98 view .LVU783
 3020 0d74 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3021              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3022              		.loc 1 560 87 view .LVU784
 3023 0d78 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3024              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3025              		.loc 1 560 98 view .LVU785
 3026 0d7c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3027              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3028              		.loc 1 560 19 view .LVU786
 3029 0d80 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3030              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3031              		.loc 1 563 113 view .LVU787
 3032 0d84 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3033 0d88 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3034 0d8c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3035 0d90 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3036 0d94 050000DA 		ble	.L164		@,
 3037              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3038              		.loc 1 563 104 discriminator 1 view .LVU788
 3039 0d98 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3040 0d9c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3041 0da0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3042 0da4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3043 0da8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3044 0dac 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3045              	.L164:
 3046              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3047              		.loc 1 563 57 discriminator 12 view .LVU789
 3048 0db0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3049              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3050              		.loc 1 563 102 discriminator 12 view .LVU790
 3051 0db4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3052 0db8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3053 0dbc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3054              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3055              		.loc 1 548 58 discriminator 12 view .LVU791
 3056 0dc0 014084E2 		add	r4, r4, #1	@ x, x,
 3057              	.LVL187:
 3058              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3059              		.loc 1 563 102 discriminator 12 view .LVU792
 3060 0dc4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3061              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3062              		.loc 1 548 43 discriminator 12 view .LVU793
 3063 0dc8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3064              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3065              		.loc 1 548 13 discriminator 12 view .LVU794
 3066 0dcc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3067 0dd0 CCFFFFCA 		bgt	.L167		@,
 3068 0dd4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3069              	.LVL188:
 3070              	.L162:
 3071              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3072              		.loc 1 544 48 discriminator 2 view .LVU795
 3073 0dd8 016086E2 		add	r6, r6, #1	@ w, w,
 3074              	.LVL189:
 3075              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3076              		.loc 1 544 9 discriminator 2 view .LVU796
 3077 0ddc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3078 0de0 BEFFFFBA 		blt	.L168		@,
 3079              	.LVL190:
 3080              	.L161:
 564:armwave.c     ****             }
 565:armwave.c     ****         }
 566:armwave.c     **** 
 567:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3081              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU797
 3082              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3083              		.loc 1 567 46 is_stmt 0 discriminator 2 view .LVU798
 3084 0de4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3085              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3086              		.loc 1 541 27 discriminator 2 view .LVU799
 3087 0de8 018088E2 		add	r8, r8, #1	@ s, s,
 3088              	.LVL191:
 3089              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3090              		.loc 1 541 5 discriminator 2 view .LVU800
 3091 0dec 080059E1 		cmp	r9, r8	@ sets, s
 3092              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3093              		.loc 1 567 20 discriminator 2 view .LVU801
 3094 0df0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3095              	.LVL192:
 3096              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3097              		.loc 1 541 5 discriminator 2 view .LVU802
 3098 0df4 AEFFFF1A 		bne	.L160		@,
 3099              	.LVL193:
 3100              	.L157:
 3101              	@ armwave.c:569: }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 3102              		.loc 1 569 1 view .LVU803
 3103 0df8 08D08DE2 		add	sp, sp, #8	@,,
 3104              		.cfi_remember_state
 3105              		.cfi_def_cfa_offset 80
 3106              		@ sp needed	@
 3107 0dfc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3108              		.cfi_restore 90
 3109              		.cfi_restore 91
 3110              		.cfi_restore 88
 3111              		.cfi_restore 89
 3112              		.cfi_restore 86
 3113              		.cfi_restore 87
 3114              		.cfi_restore 84
 3115              		.cfi_restore 85
 3116              		.cfi_restore 82
 3117              		.cfi_restore 83
 3118              		.cfi_restore 80
 3119              		.cfi_restore 81
 3120              		.cfi_def_cfa_offset 32
 3121              	.LVL194:
 3122              		.loc 1 569 1 view .LVU804
 3123 0e00 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3124              	.LVL195:
 3125              	.L187:
 3126              		.cfi_restore_state
 3127              	.LBB48:
 3128              	.LBB45:
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3129              		.loc 1 489 9 is_stmt 1 view .LVU805
 3130 0e04 940901E0 		mul	r1, r4, r9	@, _85, sets
 3131 0e08 0920A0E1 		mov	r2, r9	@, sets
 3132 0e0c 28009FE5 		ldr	r0, .L188+36	@,
 3133 0e10 FEFFFFEB 		bl	printf		@
 3134              	.LVL196:
 491:armwave.c     ****     }
 3135              		.loc 1 491 9 view .LVU806
 3136 0e14 9FFFFFEA 		b	.L159		@
 3137              	.L189:
 3138              		.align	2
 3139              	.L188:
 3140 0e18 0000803F 		.word	1065353216
 3141 0e1c 00007F43 		.word	1132396544
 3142 0e20 0000003F 		.word	1056964608
 3143 0e24 C3F5C840 		.word	1086911939
 3144 0e28 38FFC74A 		.word	1254620984
 3145 0e2c 0000FE42 		.word	1123942400
 3146 0e30 00000043 		.word	1124073472
 3147 0e34 00000000 		.word	g_armwave_state
 3148 0e38 90020000 		.word	.LC20
 3149 0e3c E8010000 		.word	.LC18
 3150              	.LBE45:
 3151              	.LBE48:
 3152              		.cfi_endproc
 3153              	.LFE75:
 3155              		.align	2
 3156              		.global	armwave_cleanup
 3157              		.syntax unified
 3158              		.arm
 3159              		.fpu vfp
 3161              	armwave_cleanup:
 3162              	.LFB76:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Make a test square waveform.
 573:armwave.c     ****  *
 574:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 575:armwave.c     ****  */
 576:armwave.c     **** #if 0
 577:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 578:armwave.c     **** {
 579:armwave.c     ****     uint8_t v;
 580:armwave.c     ****     float noise, xnoise;
 581:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 582:armwave.c     ****     int w, x;
 583:armwave.c     **** 
 584:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 585:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 586:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     **** 
 591:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 592:armwave.c     ****                 noise = -noise;
 593:armwave.c     **** 
 594:armwave.c     ****             //noise += 1.0f;
 595:armwave.c     **** 
 596:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 601:armwave.c     ****                 new_level = 0.2f;
 602:armwave.c     ****             } else {
 603:armwave.c     ****                 new_level = 0.8f;
 604:armwave.c     ****             }
 605:armwave.c     **** 
 606:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 607:armwave.c     **** 
 608:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 609:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 610:armwave.c     ****         }
 611:armwave.c     ****     }
 612:armwave.c     **** }
 613:armwave.c     **** #endif
 614:armwave.c     **** 
 615:armwave.c     **** /*
 616:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_cleanup()
 619:armwave.c     **** {
 3163              		.loc 1 619 1 view -0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 0
 3166              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3167              		.loc 1 620 5 view .LVU808
 3168              	@ armwave.c:619: {
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3169              		.loc 1 619 1 is_stmt 0 view .LVU809
 3170 0e40 10402DE9 		push	{r4, lr}	@
 3171              		.cfi_def_cfa_offset 8
 3172              		.cfi_offset 4, -8
 3173              		.cfi_offset 14, -4
 3174              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3175              		.loc 1 620 25 view .LVU810
 3176 0e44 34409FE5 		ldr	r4, .L192	@ tmp114,
 3177              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3178              		.loc 1 620 5 view .LVU811
 3179 0e48 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3180 0e4c FEFFFFEB 		bl	free		@
 3181              	.LVL197:
 621:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3182              		.loc 1 621 5 is_stmt 1 view .LVU812
 3183 0e50 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3184 0e54 FEFFFFEB 		bl	free		@
 3185              	.LVL198:
 622:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3186              		.loc 1 622 5 view .LVU813
 3187 0e58 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3188 0e5c FEFFFFEB 		bl	free		@
 3189              	.LVL199:
 623:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3190              		.loc 1 623 5 view .LVU814
 3191 0e60 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3192 0e64 FEFFFFEB 		bl	free		@
 3193              	.LVL200:
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3194              		.loc 1 625 5 view .LVU815
 3195              	@ armwave.c:625:     g_armwave_state.out_pixbuf = NULL;
 3196              		.loc 1 625 32 is_stmt 0 view .LVU816
 3197 0e68 0030A0E3 		mov	r3, #0	@ tmp123,
 3198 0e6c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 626:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3199              		.loc 1 626 5 is_stmt 1 view .LVU817
 3200              	@ armwave.c:626:     g_armwave_state.ch1_buffer = NULL;
 3201              		.loc 1 626 32 is_stmt 0 view .LVU818
 3202 0e70 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 627:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3203              		.loc 1 627 5 is_stmt 1 view .LVU819
 3204              	@ armwave.c:627:     g_armwave_state.xcoord_to_xpixel = NULL;
 3205              		.loc 1 627 38 is_stmt 0 view .LVU820
 3206 0e74 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 628:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3207              		.loc 1 628 5 is_stmt 1 view .LVU821
 3208              	@ armwave.c:628:     g_armwave_state.test_wave_buffer = NULL;
 3209              		.loc 1 628 38 is_stmt 0 view .LVU822
 3210 0e78 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3211              	@ armwave.c:629: }
 629:armwave.c     **** }
 3212              		.loc 1 629 1 view .LVU823
 3213 0e7c 1080BDE8 		pop	{r4, pc}	@
 3214              	.L193:
 3215              		.align	2
 3216              	.L192:
 3217 0e80 00000000 		.word	g_armwave_state
 3218              		.cfi_endproc
 3219              	.LFE76:
 3221              		.comm	gamma_table,256,4
 3222              		.comm	g_armwave_state,136,4
 3223              		.section	.rodata
 3224              		.align	2
 3225              		.set	.LANCHOR0,. + 0
 3228              	__PRETTY_FUNCTION__.17096:
 3229 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3229      6176655F 
 3229      66696C6C 
 3229      5F706978 
 3229      6275665F 
 3230 001b 00       		.space	1
 3233              	__PRETTY_FUNCTION__.17126:
 3234 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3234      6176655F 
 3234      73657475 
 3234      705F7265 
 3234      6E646572 
 3235 0031 000000   		.space	3
 3238              	__PRETTY_FUNCTION__.17133:
 3239 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3239      6176655F 
 3239      7365745F 
 3239      77617665 
 3239      5F706F69 
 3240 004d 000000   		.space	3
 3243              	__PRETTY_FUNCTION__.17140:
 3244 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3244      6176655F 
 3244      7365745F 
 3244      77617665 
 3244      5F706F69 
 3245              		.section	.rodata.str1.4,"aMS",%progbits,1
 3246              		.align	2
 3247              	.LC0:
 3248 0000 76302E30 		.ascii	"v0.0.1\000"
 3248      2E3100
 3249 0007 00       		.space	1
 3250              	.LC1:
 3251 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3251      61766520 
 3251      76657273 
 3251      696F6E3A 
 3251      2025730A 
 3252 001d 000000   		.space	3
 3253              	.LC2:
 3254 0020 61726D77 		.ascii	"armwave.c\000"
 3254      6176652E 
 3254      6300
 3255 002a 0000     		.space	2
 3256              	.LC3:
 3257 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3257      62756666 
 3257      65722021 
 3257      3D204E55 
 3257      4C4C00
 3258 003f 00       		.space	1
 3259              	.LC4:
 3260 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3260      20653D25 
 3260      6420773D 
 3260      25642077 
 3260      733D2564 
 3261              	.LC5:
 3262 006c 73746172 		.ascii	"start_point < end_point\000"
 3262      745F706F 
 3262      696E7420 
 3262      3C20656E 
 3262      645F706F 
 3263              	.LC6:
 3264 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3264      7566665F 
 3264      73697A65 
 3264      3D25642C 
 3264      20636D70 
 3265 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3265      5F776964 
 3265      74683D25 
 3265      642C2077 
 3265      6176655F 
 3266 00e1 000000   		.space	3
 3267              	.LC7:
 3268 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3268      6D776176 
 3268      655F7374 
 3268      6174652E 
 3268      6368315F 
 3269 0107 00       		.space	1
 3270              	.LC8:
 3271 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3271      6D776176 
 3271      655F7374 
 3271      6174652E 
 3271      78636F6F 
 3272 0131 000000   		.space	3
 3273              	.LC9:
 3274 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3274      3A203078 
 3274      25303878 
 3274      20307825 
 3274      30387820 
 3275              	.LC10:
 3276 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3276      5F627566 
 3276      66657220 
 3276      213D204E 
 3276      554C4C00 
 3277              	.LC11:
 3278 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3278      6176655F 
 3278      7365745F 
 3278      77617665 
 3278      5F706F69 
 3279 019f 78636565 		.ascii	"xceeded\000"
 3279      64656400 
 3280 01a7 00       		.space	1
 3281              	.LC12:
 3282 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3282      5F627566 
 3282      6665725F 
 3282      70747220 
 3282      213D2030 
 3283 01bd 000000   		.space	3
 3284              	.LC13:
 3285 01c0 776200   		.ascii	"wb\000"
 3286 01c3 00       		.space	1
 3287              	.LC14:
 3288 01c4 50330A00 		.ascii	"P3\012\000"
 3289              	.LC15:
 3290 01c8 25642025 		.ascii	"%d %d\012\000"
 3290      640A00
 3291 01cf 00       		.space	1
 3292              	.LC16:
 3293 01d0 3235350A 		.ascii	"255\012\000"
 3293      00
 3294 01d5 000000   		.space	3
 3295              	.LC17:
 3296 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3296      25336420 
 3296      2533640A 
 3296      00
 3297 01e5 000000   		.space	3
 3298              	.LC18:
 3299 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3299      6176655F 
 3299      74657374 
 3299      5F627566 
 3299      6665725F 
 3300 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3300      20627566 
 3300      66657220 
 3300      28256420 
 3300      62797465 
 3301              	.LC19:
 3302 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3302      6176655F 
 3302      66696C6C 
 3302      5F706978 
 3302      6275665F 
 3303 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3303      20666169 
 3303      6C65642C 
 3303      20726574 
 3303      75726E69 
 3304 028e 0000     		.space	2
 3305              	.LC20:
 3306 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3306      756C6174 
 3306      696E6720 
 3306      74657374 
 3306      20736574 
 3307              		.text
 3308              	.Letext0:
 3309              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3310              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3311              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3312              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3313              		.file 7 "/usr/include/stdio.h"
 3314              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3315              		.file 9 "/usr/include/errno.h"
 3316              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3317              		.file 11 "/usr/include/unistd.h"
 3318              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3319              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3320              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3321              		.file 15 "/usr/include/math.h"
 3322              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3323              		.file 17 "/usr/include/time.h"
 3324              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3325              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3326              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3327              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3328              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3329              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3330              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3331              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3332              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3333              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3334              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3335              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3336              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3337              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3338              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3339              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3340              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3341              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3342              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3343              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3344              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3345              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3346              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3347              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3348              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3349              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3350              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3351              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3352              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3353              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3354              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3355              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3356              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3357              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3358              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3359              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3360              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3361              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3362              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3363              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3364              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3365              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3366              		.file 60 "/usr/local/include/python3.8/context.h"
 3367              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3368              		.file 62 "/usr/local/include/python3.8/code.h"
 3369              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3370              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3371              		.file 65 "/usr/local/include/python3.8/import.h"
 3372              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3373              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3374              		.file 68 "/usr/include/malloc.h"
 3375              		.file 69 "armwave.h"
 3376              		.file 70 "/usr/include/stdlib.h"
 3377              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3378              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3379              		.file 73 "<built-in>"
 3380              		.file 74 "/usr/include/assert.h"
