   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU139
 586              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 587              		.loc 1 173 1 is_stmt 0 view .LVU140
 588 026c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 589              		.cfi_def_cfa_offset 36
 590              		.cfi_offset 4, -36
 591              		.cfi_offset 5, -32
 592              		.cfi_offset 6, -28
 593              		.cfi_offset 7, -24
 594              		.cfi_offset 8, -20
 595              		.cfi_offset 9, -16
 596              		.cfi_offset 10, -12
 597              		.cfi_offset 11, -8
 598              		.cfi_offset 14, -4
 599              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 600              		.loc 1 183 5 view .LVU141
 601 0270 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 602              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 603              		.loc 1 179 15 view .LVU142
 604 0274 68519FE5 		ldr	r5, .L49	@ tmp227,
 605              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 606              		.loc 1 173 1 view .LVU143
 607 0278 0CD04DE2 		sub	sp, sp, #12	@,,
 608              		.cfi_def_cfa_offset 48
 609              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 610              		.loc 1 179 15 view .LVU144
 611 027c 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 612              	.LVL22:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 180 5 is_stmt 1 view .LVU145
 181:armwave.c     **** 
 614              		.loc 1 181 5 view .LVU146
 615              		.loc 1 183 5 view .LVU147
 616 0280 5200000A 		beq	.L47		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 617              		.loc 1 186 5 view .LVU148
 618              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 619              		.loc 1 186 59 is_stmt 0 view .LVU149
 620 0284 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 621 0288 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 622              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 623              		.loc 1 186 5 view .LVU150
 624 028c 0010A0E3 		mov	r1, #0	@,
 625              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 626              		.loc 1 186 59 view .LVU151
 627 0290 920302E0 		mul	r2, r2, r3	@ tmp182, g_armwave_state.target_height, g_armwave_state.target_width
 628              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 629              		.loc 1 186 5 view .LVU152
 630 0294 0221A0E1 		lsl	r2, r2, #2	@, tmp182,
 631 0298 FEFFFFEB 		bl	memset		@
 632              	.LVL23:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 633              		.loc 1 188 5 is_stmt 1 view .LVU153
 634              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 635              		.loc 1 188 10 is_stmt 0 view .LVU154
 636 029c 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 637 02a0 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 638 02a4 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 639              	.LVL24:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 640              		.loc 1 191 5 is_stmt 1 view .LVU155
 641              		.loc 1 191 5 is_stmt 0 view .LVU156
 642 02a8 000050E3 		cmp	r0, #0	@ npix,
 643 02ac 0D0000DA 		ble	.L29		@,
 644              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 2; w++) {
 199:armwave.c     ****                 value = wave_word & 0xffff;
 200:armwave.c     ****                 wave_word >>= 16;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 645              		.loc 1 204 52 view .LVU157
 646 02b0 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 647              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 203 52 view .LVU158
 649 02b4 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _12, g_armwave_state.ch1_color.r
 650              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Plot the pixels
 215:armwave.c     ****                     nsub = (n + w) / 2;
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 651              		.loc 1 216 57 view .LVU159
 652 02b8 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _34, g_armwave_state.vscale_frac
 653              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 654              		.loc 1 204 52 view .LVU160
 655 02bc 00308DE5 		str	r3, [sp]	@ _16, %sfp
 656              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 657              		.loc 1 205 52 view .LVU161
 658 02c0 F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 659              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 660              		.loc 1 191 11 view .LVU162
 661 02c4 0020A0E3 		mov	r2, #0	@ n,
 662              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 205 52 view .LVU163
 664 02c8 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 665              	.LVL25:
 666              	.L36:
 195:armwave.c     **** 
 667              		.loc 1 195 9 is_stmt 1 view .LVU164
 668              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 669              		.loc 1 195 19 is_stmt 0 view .LVU165
 670 02cc 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 671              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 672              		.loc 1 197 9 is_stmt 1 view .LVU166
 673              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 674              		.loc 1 197 11 is_stmt 0 view .LVU167
 675 02d0 000053E3 		cmp	r3, #0	@ wave_word,
 676              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 677              		.loc 1 198 19 view .LVU168
 678 02d4 0070A013 		movne	r7, #0	@ w,
 679              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 680              		.loc 1 197 11 view .LVU169
 681 02d8 0400001A 		bne	.L35		@,
 682              	.L32:
 683              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 684              		.loc 1 191 28 view .LVU170
 685 02dc 042082E2 		add	r2, r2, #4	@ n, n,
 686              	.LVL27:
 687              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 688              		.loc 1 191 5 view .LVU171
 689 02e0 020050E1 		cmp	r0, r2	@ npix, n
 690 02e4 F8FFFFCA 		bgt	.L36		@,
 691              	.LVL28:
 692              	.L29:
 693              	@ armwave.c:228: }
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                 }
 225:armwave.c     ****             }
 226:armwave.c     ****         }
 227:armwave.c     ****     }
 228:armwave.c     **** }
 694              		.loc 1 228 1 view .LVU172
 695 02e8 0CD08DE2 		add	sp, sp, #12	@,,
 696              		.cfi_remember_state
 697              		.cfi_def_cfa_offset 36
 698              		@ sp needed	@
 699 02ec F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 700              	.LVL29:
 701              	.L35:
 702              		.cfi_restore_state
 199:armwave.c     ****                 wave_word >>= 16;
 703              		.loc 1 199 17 is_stmt 1 view .LVU173
 200:armwave.c     **** 
 704              		.loc 1 200 17 view .LVU174
 705              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 202 19 is_stmt 0 view .LVU175
 707 02f0 FFC013E2 		ands	ip, r3, #255	@ _13, wave_word,
 708              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 709              		.loc 1 200 27 view .LVU176
 710 02f4 2338A0E1 		lsr	r3, r3, #16	@ wave_word, wave_word,
 711              	.LVL30:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 712              		.loc 1 202 17 is_stmt 1 view .LVU177
 713              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 202 19 is_stmt 0 view .LVU178
 715 02f8 0500001A 		bne	.L48		@,
 716              	.L33:
 717              	.LVL31:
 718              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 719              		.loc 1 198 13 view .LVU179
 720 02fc 010057E3 		cmp	r7, #1	@ w,
 721 0300 F5FFFF0A 		beq	.L32		@,
 722              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 723              		.loc 1 202 19 view .LVU180
 724 0304 FFC013E2 		ands	ip, r3, #255	@ _13, wave_word,
 725 0308 0170A0E3 		mov	r7, #1	@ w,
 726              	.LVL32:
 199:armwave.c     ****                 wave_word >>= 16;
 727              		.loc 1 199 17 is_stmt 1 view .LVU181
 200:armwave.c     **** 
 728              		.loc 1 200 17 view .LVU182
 729              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 730              		.loc 1 200 27 is_stmt 0 view .LVU183
 731 030c 2338A0E1 		lsr	r3, r3, #16	@ wave_word, wave_word,
 732              	.LVL33:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 733              		.loc 1 202 17 is_stmt 1 view .LVU184
 734              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 735              		.loc 1 202 19 is_stmt 0 view .LVU185
 736 0310 F9FFFF0A 		beq	.L33		@,
 737              	.L48:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 738              		.loc 1 203 21 is_stmt 1 view .LVU186
 739              	.LVL34:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 740              		.loc 1 204 21 view .LVU187
 205:armwave.c     **** 
 741              		.loc 1 205 21 view .LVU188
 207:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 207 21 view .LVU189
 208:armwave.c     ****                     b = MIN(bb, 255);
 743              		.loc 1 208 21 view .LVU190
 209:armwave.c     **** 
 744              		.loc 1 209 21 view .LVU191
 212:armwave.c     **** 
 745              		.loc 1 212 21 view .LVU192
 746              	@ armwave.c:215:                     nsub = (n + w) / 2;
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 747              		.loc 1 215 26 is_stmt 0 view .LVU193
 748 0314 079082E0 		add	r9, r2, r7	@ tmp214, n, w
 749              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 750              		.loc 1 205 55 view .LVU194
 751 0318 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 752              	@ armwave.c:215:                     nsub = (n + w) / 2;
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 753              		.loc 1 215 26 view .LVU195
 754 031c A99F89E0 		add	r9, r9, r9, lsr #31	@ tmp216, tmp214, tmp214,
 755              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 756              		.loc 1 204 55 view .LVU196
 757 0320 00E09DE5 		ldr	lr, [sp]	@ _16, %sfp
 758              	@ armwave.c:215:                     nsub = (n + w) / 2;
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 759              		.loc 1 215 26 view .LVU197
 760 0324 C980A0E1 		asr	r8, r9, #1	@ tmp217, tmp216,
 761              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 762              		.loc 1 205 55 view .LVU198
 763 0328 910C01E0 		mul	r1, r1, ip	@ tmp201, _19, _13
 764              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 216 32 view .LVU199
 766 032c 7880EFE6 		uxtb	r8, r8	@ _32, tmp217
 767              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 768              		.loc 1 217 41 view .LVU200
 769 0330 01A088E2 		add	r10, r8, #1	@ tmp220, _32,
 770              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 771              		.loc 1 216 40 view .LVU201
 772 0334 908A07EE 		vmov	s15, r8	@ int	@ _32, _32
 773              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 774              		.loc 1 217 41 view .LVU202
 775 0338 10AA07EE 		vmov	s14, r10	@ int	@ tmp220, tmp220
 776              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 777              		.loc 1 205 24 view .LVU203
 778 033c 4114A0E1 		asr	r1, r1, #8	@ bb, tmp201,
 779              	.LVL35:
 780              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 781              		.loc 1 209 25 view .LVU204
 782 0340 FF0051E3 		cmp	r1, #255	@ bb,
 783              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 784              		.loc 1 216 40 view .LVU205
 785 0344 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp218, _32
 786              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 787              		.loc 1 217 46 view .LVU206
 788 0348 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp221, tmp220
 789              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 790              		.loc 1 209 25 view .LVU207
 791 034c FF10A0A3 		movge	r1, #255	@ bb,
 792              	.LVL36:
 793              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 794              		.loc 1 204 55 view .LVU208
 795 0350 9E0C0EE0 		mul	lr, lr, ip	@ tmp205, _16, _13
 796              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 797              		.loc 1 212 44 view .LVU209
 798 0354 01A8A0E1 		lsl	r10, r1, #16	@ tmp202, bb,
 799              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 800              		.loc 1 203 55 view .LVU210
 801 0358 9C0B0CE0 		mul	ip, ip, fp	@ tmp211, _13, _12
 802              	.LVL37:
 803              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 804              		.loc 1 216 40 view .LVU211
 805 035c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp219, tmp218, _34
 806              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 807              		.loc 1 217 46 view .LVU212
 808 0360 267A27EE 		vmul.f32	s14, s14, s13	@ tmp222, tmp221, _34
 809              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 810              		.loc 1 204 24 view .LVU213
 811 0364 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp205,
 812              	.LVL38:
 813              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 814              		.loc 1 208 25 view .LVU214
 815 0368 FF005EE3 		cmp	lr, #255	@ gg,
 816 036c FFE0A0A3 		movge	lr, #255	@ gg,
 817              	.LVL39:
 818              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 819              		.loc 1 203 24 view .LVU215
 820 0370 4CC4A0E1 		asr	ip, ip, #8	@ rr, tmp211,
 821              	.LVL40:
 822              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 823              		.loc 1 207 25 view .LVU216
 824 0374 FF005CE3 		cmp	ip, #255	@ rr,
 825              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 826              		.loc 1 212 56 view .LVU217
 827 0378 0EE4A0E1 		lsl	lr, lr, #8	@ tmp206, gg,
 828              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 829              		.loc 1 216 24 view .LVU218
 830 037c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp219
 831              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 832              		.loc 1 207 25 view .LVU219
 833 0380 FFC0A0A3 		movge	ip, #255	@ rr,
 834              	.LVL41:
 835              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 836              		.loc 1 212 44 view .LVU220
 837 0384 FFA80AE2 		and	r10, r10, #16711680	@ tmp203, tmp202,
 838              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 839              		.loc 1 212 56 view .LVU221
 840 0388 7EE0FFE6 		uxth	lr, lr	@ tmp207, tmp206
 841              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 842              		.loc 1 212 51 view .LVU222
 843 038c 0EE08AE1 		orr	lr, r10, lr	@ tmp209, tmp203, tmp207
 844              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 845              		.loc 1 212 62 view .LVU223
 846 0390 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 847 0394 0CC08EE1 		orr	ip, lr, ip	@ tmp213, tmp209, rr
 848              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 849              		.loc 1 212 26 view .LVU224
 850 0398 FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp213,
 851              	.LVL42:
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 852              		.loc 1 215 21 is_stmt 1 view .LVU225
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 853              		.loc 1 216 21 view .LVU226
 854              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 855              		.loc 1 216 24 is_stmt 0 view .LVU227
 856 039c 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 857              	.LVL43:
 217:armwave.c     ****                     xx = (nsub >> 8);
 858              		.loc 1 217 21 is_stmt 1 view .LVU228
 859              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 860              		.loc 1 217 24 is_stmt 0 view .LVU229
 861 03a0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp222
 862              	@ armwave.c:218:                     xx = (nsub >> 8);
 218:armwave.c     **** 
 863              		.loc 1 218 32 view .LVU230
 864 03a4 C994A0E1 		asr	r9, r9, #9	@ xx, tmp216,
 865              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 866              		.loc 1 217 24 view .LVU231
 867 03a8 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 868              	.LVL44:
 218:armwave.c     **** 
 869              		.loc 1 218 21 is_stmt 1 view .LVU232
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 870              		.loc 1 220 21 view .LVU233
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 220 21 is_stmt 0 view .LVU234
 872 03ac 080051E1 		cmp	r1, r8	@ yy, ye
 873 03b0 D1FFFF2A 		bcs	.L33		@,
 874              	.LVL45:
 875              	.L34:
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 876              		.loc 1 221 25 is_stmt 1 discriminator 3 view .LVU235
 222:armwave.c     ****                     }
 877              		.loc 1 222 25 discriminator 3 view .LVU236
 878              	@ armwave.c:221:                         offset = (xx + (y * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 879              		.loc 1 221 43 is_stmt 0 discriminator 3 view .LVU237
 880 03b4 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 881              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 882              		.loc 1 222 43 discriminator 3 view .LVU238
 883 03b8 9C912CE0 		mla	ip, ip, r1, r9	@ tmp226, g_armwave_state.target_width, yy, xx
 884              	.LVL46:
 885              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 886              		.loc 1 220 42 discriminator 3 view .LVU239
 887 03bc 011081E2 		add	r1, r1, #1	@ yy, yy,
 888              	.LVL47:
 889              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 890              		.loc 1 220 21 discriminator 3 view .LVU240
 891 03c0 010058E1 		cmp	r8, r1	@ ye, yy
 892              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 893              		.loc 1 222 53 discriminator 3 view .LVU241
 894 03c4 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 895              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 896              		.loc 1 220 21 discriminator 3 view .LVU242
 897 03c8 F9FFFF1A 		bne	.L34		@,
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 898              		.loc 1 220 21 discriminator 3 view .LVU243
 899 03cc CAFFFFEA 		b	.L33		@
 900              	.LVL48:
 901              	.L47:
 183:armwave.c     **** 
 902              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU244
 903 03d0 10309FE5 		ldr	r3, .L49+4	@,
 904 03d4 B720A0E3 		mov	r2, #183	@,
 905 03d8 0C109FE5 		ldr	r1, .L49+8	@,
 906 03dc 0C009FE5 		ldr	r0, .L49+12	@,
 907              	.LVL49:
 183:armwave.c     **** 
 908              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU245
 909 03e0 FEFFFFEB 		bl	__assert_fail		@
 910              	.LVL50:
 911              	.L50:
 912              		.align	2
 913              	.L49:
 914 03e4 00000000 		.word	g_armwave_state
 915 03e8 00000000 		.word	.LANCHOR0
 916 03ec 20000000 		.word	.LC2
 917 03f0 2C000000 		.word	.LC3
 918              		.cfi_endproc
 919              	.LFE60:
 921              		.global	__aeabi_idiv
 922              		.align	2
 923              		.global	armwave_generate
 924              		.syntax unified
 925              		.arm
 926              		.fpu vfp
 928              	armwave_generate:
 929              	.LFB61:
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_generate()
 234:armwave.c     **** {
 930              		.loc 1 234 1 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 16
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t yy;
 934              		.loc 1 235 5 view .LVU247
 236:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 935              		.loc 1 236 5 view .LVU248
 936              	.LVL51:
 237:armwave.c     **** 
 238:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 937              		.loc 1 238 5 view .LVU249
 938              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 939              		.loc 1 234 1 is_stmt 0 view .LVU250
 940 03f4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 941              		.cfi_def_cfa_offset 36
 942              		.cfi_offset 4, -36
 943              		.cfi_offset 5, -32
 944              		.cfi_offset 6, -28
 945              		.cfi_offset 7, -24
 946              		.cfi_offset 8, -20
 947              		.cfi_offset 9, -16
 948              		.cfi_offset 10, -12
 949              		.cfi_offset 11, -8
 950              		.cfi_offset 14, -4
 951              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 952              		.loc 1 238 5 view .LVU251
 953 03f8 0010A0E3 		mov	r1, #0	@,
 954              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 955              		.loc 1 238 58 view .LVU252
 956 03fc 14829FE5 		ldr	r8, .L70	@ tmp342,
 957              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 958              		.loc 1 234 1 view .LVU253
 959 0400 14D04DE2 		sub	sp, sp, #20	@,,
 960              		.cfi_def_cfa_offset 56
 961              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 962              		.loc 1 238 5 view .LVU254
 963 0404 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 964 0408 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 965 040c FEFFFFEB 		bl	memset		@
 966              	.LVL52:
 239:armwave.c     **** 
 240:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 967              		.loc 1 240 5 is_stmt 1 view .LVU255
 968              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 969              		.loc 1 240 68 is_stmt 0 view .LVU256
 970 0410 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 971              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 972              		.loc 1 240 38 view .LVU257
 973 0414 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 974              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 975              		.loc 1 240 51 view .LVU258
 976 0418 0310A0E1 		mov	r1, r3	@, _35
 977 041c 0500A0E1 		mov	r0, r5	@, prephitmp_229
 978              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 979              		.loc 1 240 68 view .LVU259
 980 0420 00308DE5 		str	r3, [sp]	@ _35, %sfp
 981              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 982              		.loc 1 240 51 view .LVU260
 983 0424 FEFFFFEB 		bl	__aeabi_idiv		@
 984              	.LVL53:
 985              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 986              		.loc 1 240 5 view .LVU261
 987 0428 000050E3 		cmp	r0, #0	@,
 988 042c 7700000A 		beq	.L51		@,
 989 0430 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 990              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 991              		.loc 1 240 12 view .LVU262
 992 0434 0030A0E3 		mov	r3, #0	@ yy,
 993 0438 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 994              	.LVL54:
 995              	.L60:
 241:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 242:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 243:armwave.c     **** 
 244:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 996              		.loc 1 244 9 is_stmt 1 discriminator 3 view .LVU263
 997 043c D020CDE1 		ldrd	r2, [sp]	@, %sfp
 998              	.LBB10:
 999              	.LBB11:
 1000              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1001              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU264
 1002 0440 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1003              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1004              		.loc 1 79 5 discriminator 3 view .LVU265
 1005 0444 000054E3 		cmp	r4, #0	@ prephitmp_239,
 1006              	.LBE11:
 1007              	.LBE10:
 1008              	@ armwave.c:244:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1009              		.loc 1 244 9 discriminator 3 view .LVU266
 1010 0448 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 1011              	.LVL55:
 1012              	.LBB13:
 1013              	.LBI10:
  62:armwave.c     **** {
 1014              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU267
 1015              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1016              		.loc 1 64 5 discriminator 3 view .LVU268
  65:armwave.c     ****     uint8_t *wave_base;
 1017              		.loc 1 65 5 discriminator 3 view .LVU269
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1018              		.loc 1 66 5 discriminator 3 view .LVU270
  67:armwave.c     ****     uint8_t *write_buffer;
 1019              		.loc 1 67 5 discriminator 3 view .LVU271
  68:armwave.c     **** 
 1020              		.loc 1 68 5 discriminator 3 view .LVU272
  71:armwave.c     **** 
 1021              		.loc 1 71 5 discriminator 3 view .LVU273
 1022              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1023              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU274
 1024 044c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1025              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1026              		.loc 1 71 40 discriminator 3 view .LVU275
 1027 0450 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1028              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1029              		.loc 1 71 65 discriminator 3 view .LVU276
 1030 0454 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 1031              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1032              		.loc 1 71 105 discriminator 3 view .LVU277
 1033 0458 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 1034              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1035              		.loc 1 71 52 discriminator 3 view .LVU278
 1036 045c 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 1037 0460 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 1038              	.LVL56:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1039              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU279
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1040              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU280
 1041 0464 610000DA 		ble	.L53		@,
 1042              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1043              		.loc 1 79 11 view .LVU281
 1044 0468 0070A0E3 		mov	r7, #0	@ w,
 1045 046c 043042E2 		sub	r3, r2, #4	@ _32, _5,
 1046 0470 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 1047              	.LVL57:
 1048              	.L59:
  80:armwave.c     **** 
 1049              		.loc 1 80 9 is_stmt 1 view .LVU282
 1050              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1051              		.loc 1 84 9 is_stmt 0 view .LVU283
 1052 0474 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 1053              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1054              		.loc 1 80 64 view .LVU284
 1055 0478 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1056              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1057              		.loc 1 84 9 view .LVU285
 1058 047c 000052E3 		cmp	r2, #0	@ _35,
 1059              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1060              		.loc 1 80 36 view .LVU286
 1061 0480 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 1062              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1063              		.loc 1 80 64 view .LVU287
 1064 0484 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 1065              	.LVL58:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1066              		.loc 1 84 9 is_stmt 1 view .LVU288
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1067              		.loc 1 84 9 is_stmt 0 view .LVU289
 1068 0488 5200000A 		beq	.L54		@,
 1069 048c 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 1070 0490 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 1071              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1072              		.loc 1 84 9 view .LVU290
 1073 0494 036082E0 		add	r6, r2, r3	@ ivtmp.66, _24, tmp248
 1074              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1075              		.loc 1 84 16 view .LVU291
 1076 0498 00C0A0E3 		mov	ip, #0	@ yy,
 1077              	.LVL60:
 1078              	.L58:
  87:armwave.c     **** 
 1079              		.loc 1 87 13 is_stmt 1 view .LVU292
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1080              		.loc 1 101 17 view .LVU293
 106:armwave.c     ****                 word >>= 8;
 1081              		.loc 1 106 17 view .LVU294
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1082              		.loc 1 101 17 view .LVU295
 106:armwave.c     ****                 word >>= 8;
 1083              		.loc 1 106 17 view .LVU296
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1084              		.loc 1 101 17 view .LVU297
 106:armwave.c     ****                 word >>= 8;
 1085              		.loc 1 106 17 view .LVU298
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1086              		.loc 1 101 17 view .LVU299
 106:armwave.c     ****                 word >>= 8;
 1087              		.loc 1 106 17 view .LVU300
 1088              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1089              		.loc 1 87 18 is_stmt 0 view .LVU301
 1090 049c 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 1091              	.LVL61:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1092              		.loc 1 89 13 is_stmt 1 view .LVU302
  91:armwave.c     ****                 
 1093              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1094              		.loc 1 94 17 view .LVU304
 1095              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1096              		.loc 1 102 34 is_stmt 0 view .LVU305
 1097 04a0 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 1098              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1099              		.loc 1 94 20 view .LVU306
 1100 04a4 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1101 04a8 0120A003 		moveq	r2, #1	@ tmp250,
 1102 04ac 0020A013 		movne	r2, #0	@ tmp250,
 1103              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1104              		.loc 1 94 19 view .LVU307
 1105 04b0 FF0059E3 		cmp	r9, #255	@ scale_value,
 1106 04b4 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 1107              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1108              		.loc 1 107 22 view .LVU308
 1109 04b8 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1110              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1111              		.loc 1 94 19 view .LVU309
 1112 04bc 000052E3 		cmp	r2, #0	@ tmp255,
 1113              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1114              		.loc 1 102 34 view .LVU310
 1115 04c0 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1116              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1117              		.loc 1 106 47 view .LVU311
 1118 04c4 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1119              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1120              		.loc 1 107 22 view .LVU312
 1121 04c8 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1122 04cc 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1123              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1124              		.loc 1 94 19 view .LVU313
 1125 04d0 3B00001A 		bne	.L62		@,
 1126              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1127              		.loc 1 102 34 view .LVU314
 1128 04d4 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1129              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1130              		.loc 1 106 47 view .LVU315
 1131 04d8 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1132              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1133              		.loc 1 94 20 view .LVU316
 1134 04dc FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1135              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1136              		.loc 1 102 34 view .LVU317
 1137 04e0 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1138              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1139              		.loc 1 106 47 view .LVU318
 1140 04e4 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1141              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1142              		.loc 1 102 74 view .LVU319
 1143 04e8 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1144              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1145              		.loc 1 106 47 view .LVU320
 1146 04ec 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1147              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1148              		.loc 1 94 20 view .LVU321
 1149 04f0 01B0A003 		moveq	fp, #1	@ tmp271,
 1150 04f4 00B0A013 		movne	fp, #0	@ tmp271,
 1151              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1152              		.loc 1 94 19 view .LVU322
 1153 04f8 FF0054E3 		cmp	r4, #255	@ scale_value,
 1154 04fc 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1155 0500 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1156              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1157              		.loc 1 106 47 view .LVU323
 1158 0504 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1159              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1160              		.loc 1 94 19 view .LVU324
 1161 0508 000054E3 		cmp	r4, #0	@ tmp276,
 1162              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1163              		.loc 1 106 47 view .LVU325
 1164 050c 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1165 0510 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1166              	.LVL62:
 107:armwave.c     ****             }
 1167              		.loc 1 107 17 is_stmt 1 view .LVU326
  91:armwave.c     ****                 
 1168              		.loc 1 91 17 view .LVU327
  94:armwave.c     ****                     continue;
 1169              		.loc 1 94 17 view .LVU328
 1170              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1171              		.loc 1 94 19 is_stmt 0 view .LVU329
 1172 0514 2A00001A 		bne	.L62		@,
 1173              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1174              		.loc 1 102 34 view .LVU330
 1175 0518 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1176              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1177              		.loc 1 102 99 view .LVU331
 1178 051c 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1179              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1180              		.loc 1 94 20 view .LVU332
 1181 0520 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1182              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1183              		.loc 1 102 34 view .LVU333
 1184 0524 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1185              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1186              		.loc 1 94 20 view .LVU334
 1187 0528 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1188 052c 0120A003 		moveq	r2, #1	@ tmp293,
 1189              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1190              		.loc 1 102 74 view .LVU335
 1191 0530 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1192              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1193              		.loc 1 94 20 view .LVU336
 1194 0534 0020A013 		movne	r2, #0	@ tmp293,
 1195              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1196              		.loc 1 106 47 view .LVU337
 1197 0538 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1198 053c 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1199              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1200              		.loc 1 94 19 view .LVU338
 1201 0540 FF005EE3 		cmp	lr, #255	@ scale_value,
 1202 0544 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1203 0548 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1204              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1205              		.loc 1 106 47 view .LVU339
 1206 054c 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1207              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1208              		.loc 1 94 19 view .LVU340
 1209 0550 00005EE3 		cmp	lr, #0	@ tmp298,
 1210              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1211              		.loc 1 106 47 view .LVU341
 1212 0554 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1213 0558 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1214              		.loc 1 107 17 is_stmt 1 view .LVU342
 1215              	.LVL63:
  91:armwave.c     ****                 
 1216              		.loc 1 91 17 view .LVU343
  94:armwave.c     ****                     continue;
 1217              		.loc 1 94 17 view .LVU344
 1218              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1219              		.loc 1 94 19 is_stmt 0 view .LVU345
 1220 055c 1800001A 		bne	.L62		@,
 1221              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1222              		.loc 1 102 34 view .LVU346
 1223 0560 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1224              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1225              		.loc 1 94 20 view .LVU347
 1226 0564 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1227              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1228              		.loc 1 106 47 view .LVU348
 1229 0568 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1230              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1231              		.loc 1 102 34 view .LVU349
 1232 056c 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1233              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1234              		.loc 1 102 99 view .LVU350
 1235 0570 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1236              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1237              		.loc 1 102 74 view .LVU351
 1238 0574 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1239              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1240              		.loc 1 106 47 view .LVU352
 1241 0578 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1242              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1243              		.loc 1 94 20 view .LVU353
 1244 057c 01E0A003 		moveq	lr, #1	@ tmp314,
 1245 0580 00E0A013 		movne	lr, #0	@ tmp314,
 1246              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1247              		.loc 1 94 19 view .LVU354
 1248 0584 FF0053E3 		cmp	r3, #255	@ word,
 1249 0588 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1250              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1251              		.loc 1 106 47 view .LVU355
 1252 058c 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1253              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1254              		.loc 1 94 19 view .LVU356
 1255 0590 00005EE3 		cmp	lr, #0	@ tmp319,
 1256              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1257              		.loc 1 106 47 view .LVU357
 1258 0594 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1259 0598 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1260              		.loc 1 107 17 is_stmt 1 view .LVU358
 1261              	.LVL64:
  91:armwave.c     ****                 
 1262              		.loc 1 91 17 view .LVU359
  94:armwave.c     ****                     continue;
 1263              		.loc 1 94 17 view .LVU360
 1264              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1265              		.loc 1 94 19 is_stmt 0 view .LVU361
 1266 059c 0800001A 		bne	.L62		@,
 1267              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1268              		.loc 1 102 34 view .LVU362
 1269 05a0 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1270 05a4 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1271              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1272              		.loc 1 102 99 view .LVU363
 1273 05a8 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1274              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1275              		.loc 1 102 34 view .LVU364
 1276 05ac 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1277              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1278              		.loc 1 102 74 view .LVU365
 1279 05b0 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1280              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1281              		.loc 1 106 47 view .LVU366
 1282 05b4 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1283 05b8 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1284 05bc 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1285 05c0 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1286              		.loc 1 107 17 is_stmt 1 view .LVU367
 1287              	.LVL65:
 1288              	.L62:
 1289              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1290              		.loc 1 84 9 is_stmt 0 view .LVU368
 1291 05c4 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1292              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1293              		.loc 1 84 37 view .LVU369
 1294 05c8 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1295              	.LVL66:
 1296              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1297              		.loc 1 84 9 view .LVU370
 1298 05cc 0C0053E1 		cmp	r3, ip	@ _35, yy
 1299 05d0 B1FFFF8A 		bhi	.L58		@,
 1300 05d4 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1301              	.LVL67:
 1302              	.L54:
 1303              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1304              		.loc 1 79 44 view .LVU371
 1305 05d8 017087E2 		add	r7, r7, #1	@ w, w,
 1306              	.LVL68:
 1307              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1308              		.loc 1 79 5 view .LVU372
 1309 05dc 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1310 05e0 A3FFFFBA 		blt	.L59		@,
 1311 05e4 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1312 05e8 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1313 05ec 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1314              	.LVL69:
 1315              	.L53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1316              		.loc 1 79 5 view .LVU373
 1317              	.LBE12:
 1318              	.LBE13:
 245:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1319              		.loc 1 245 9 is_stmt 1 discriminator 3 view .LVU374
 246:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1320              		.loc 1 246 9 discriminator 3 view .LVU375
 1321              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1322              		.loc 1 240 51 is_stmt 0 discriminator 3 view .LVU376
 1323 05f0 00109DE5 		ldr	r1, [sp]	@, %sfp
 1324              	.LVL70:
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1325              		.loc 1 240 51 discriminator 3 view .LVU377
 1326 05f4 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1327 05f8 FEFFFFEB 		bl	__aeabi_idiv		@
 1328              	.LVL71:
 1329              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1330              		.loc 1 240 86 discriminator 3 view .LVU378
 1331 05fc 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1332 0600 013083E2 		add	r3, r3, #1	@ yy, yy,
 1333 0604 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1334              	.LVL72:
 1335              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1336              		.loc 1 240 5 discriminator 3 view .LVU379
 1337 0608 030050E1 		cmp	r0, r3	@, yy
 1338 060c 8AFFFF8A 		bhi	.L60		@,
 1339              	.LVL73:
 1340              	.L51:
 1341              	@ armwave.c:250: }
 247:armwave.c     ****     }
 248:armwave.c     **** 
 249:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 250:armwave.c     **** }
 1342              		.loc 1 250 1 view .LVU380
 1343 0610 14D08DE2 		add	sp, sp, #20	@,,
 1344              		.cfi_def_cfa_offset 36
 1345              		@ sp needed	@
 1346 0614 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1347              	.L71:
 1348              		.align	2
 1349              	.L70:
 1350 0618 00000000 		.word	g_armwave_state
 1351              		.cfi_endproc
 1352              	.LFE61:
 1354              		.align	2
 1355              		.global	armwave_setup_render
 1356              		.syntax unified
 1357              		.arm
 1358              		.fpu vfp
 1360              	armwave_setup_render:
 1361              	.LVL74:
 1362              	.LFB62:
 251:armwave.c     **** 
 252:armwave.c     **** /*
 253:armwave.c     ****  * Setup the renderer with passed parameters.
 254:armwave.c     ****  */
 255:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 256:armwave.c     **** {
 1363              		.loc 1 256 1 is_stmt 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 12, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 257:armwave.c     ****     uint32_t length, xx;
 1367              		.loc 1 257 5 view .LVU382
 258:armwave.c     ****     float points_per_pixel;
 1368              		.loc 1 258 5 view .LVU383
 259:armwave.c     **** 
 260:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1369              		.loc 1 260 5 view .LVU384
 1370              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1371              		.loc 1 256 1 is_stmt 0 view .LVU385
 1372 061c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1373              		.cfi_def_cfa_offset 28
 1374              		.cfi_offset 4, -28
 1375              		.cfi_offset 5, -24
 1376              		.cfi_offset 6, -20
 1377              		.cfi_offset 7, -16
 1378              		.cfi_offset 8, -12
 1379              		.cfi_offset 9, -8
 1380              		.cfi_offset 14, -4
 1381 0620 028B2DED 		vpush.64	{d8}	@
 1382              		.cfi_def_cfa_offset 36
 1383              		.cfi_offset 80, -36
 1384              		.cfi_offset 81, -32
 1385 0624 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1386 0628 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1387 062c 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1388 0630 14D04DE2 		sub	sp, sp, #20	@,,
 1389              		.cfi_def_cfa_offset 56
 1390              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1391              		.loc 1 256 1 view .LVU386
 1392 0634 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1393 0638 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1394 063c 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1395              	@ armwave.c:260:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1396              		.loc 1 260 5 view .LVU387
 1397 0640 00308DE5 		str	r3, [sp]	@ wave_stride,
 1398 0644 F460CDE1 		strd	r6, [sp, #4]	@,,
 1399 0648 0230A0E1 		mov	r3, r2	@, waves_max
 1400              	.LVL75:
 1401              		.loc 1 260 5 view .LVU388
 1402 064c 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1403 0650 0120A0E1 		mov	r2, r1	@, end_point
 1404              	.LVL76:
 1405              		.loc 1 260 5 view .LVU389
 1406 0654 0010A0E1 		mov	r1, r0	@, start_point
 1407              	.LVL77:
 1408              		.loc 1 260 5 view .LVU390
 1409 0658 E0019FE5 		ldr	r0, .L86+12	@,
 1410              	.LVL78:
 1411              		.loc 1 260 5 view .LVU391
 1412 065c FEFFFFEB 		bl	printf		@
 1413              	.LVL79:
 261:armwave.c     **** 
 262:armwave.c     ****     // TODO these asserts should instead raise PyExc
 263:armwave.c     ****     assert(start_point < end_point);
 1414              		.loc 1 263 5 is_stmt 1 view .LVU392
 1415 0660 050054E1 		cmp	r4, r5	@ start_point, end_point
 1416 0664 6300002A 		bcs	.L83		@,
 264:armwave.c     **** 
 265:armwave.c     ****     /*
 266:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 267:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 268:armwave.c     ****     if(target_height == 256) {
 269:armwave.c     ****         g_armwave_state.row_shift = 8;
 270:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 271:armwave.c     ****     } else if(target_height == 512) {
 272:armwave.c     ****         g_armwave_state.row_shift = 9;
 273:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 274:armwave.c     ****     } else if(target_height == 1024) {
 275:armwave.c     ****         g_armwave_state.row_shift = 10;
 276:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 277:armwave.c     ****     } else if(target_height == 2048) {
 278:armwave.c     ****         g_armwave_state.row_shift = 11;
 279:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 280:armwave.c     ****     }
 281:armwave.c     ****     */
 282:armwave.c     **** 
 283:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 284:armwave.c     ****     g_armwave_state.xstride = target_height;
 1417              		.loc 1 284 5 view .LVU393
 1418              	@ armwave.c:295:     g_armwave_state.wave_length = end_point - start_point;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 294:armwave.c     ****     g_armwave_state.target_height = target_height;
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1419              		.loc 1 295 45 is_stmt 0 view .LVU394
 1420 0668 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1421              	.LVL80:
 1422              	@ armwave.c:285:     g_armwave_state.vscale_frac = target_height / 255.0f;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1423              		.loc 1 285 49 view .LVU395
 1424 066c 706A9FED 		vldr.32	s12, .L86	@ tmp175,
 1425              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 296:armwave.c     **** 
 297:armwave.c     ****     // Calculate compound scaler
 298:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1426              		.loc 1 299 48 view .LVU396
 1427 0670 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1428              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1429              		.loc 1 299 79 view .LVU397
 1430 0674 6F6ADFED 		vldr.32	s13, .L86+4	@ tmp199,
 1431              	@ armwave.c:292:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 292:armwave.c     ****     g_armwave_state.target_width = target_width;
 1432              		.loc 1 292 90 view .LVU398
 1433 0678 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1434              	@ armwave.c:284:     g_armwave_state.xstride = target_height;
 284:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1435              		.loc 1 284 29 view .LVU399
 1436 067c C0419FE5 		ldr	r4, .L86+16	@ tmp241,
 1437              	.LVL81:
 1438              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1439              		.loc 1 299 48 view .LVU400
 1440 0680 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1441              	@ armwave.c:285:     g_armwave_state.vscale_frac = target_height / 255.0f;
 285:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1442              		.loc 1 285 49 view .LVU401
 1443 0684 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1444              	@ armwave.c:290:     g_armwave_state.size = target_height * target_width;
 290:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1445              		.loc 1 290 42 view .LVU402
 1446 0688 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1447              	@ armwave.c:292:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 292:armwave.c     ****     g_armwave_state.target_width = target_width;
 1448              		.loc 1 292 95 view .LVU403
 1449 068c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp189, tmp186, tmp186,
 1450              	@ armwave.c:285:     g_armwave_state.vscale_frac = target_height / 255.0f;
 285:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1451              		.loc 1 285 49 view .LVU404
 1452 0690 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1453              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1454              		.loc 1 299 48 view .LVU405
 1455 0694 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1456              	@ armwave.c:301:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 300:armwave.c     **** 
 301:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1457              		.loc 1 301 5 view .LVU406
 1458 0698 0128A0E3 		mov	r2, #65536	@ tmp202,
 1459 069c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1460 06a0 00608DE5 		str	r6, [sp]	@ target_width,
 1461              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 299:armwave.c     **** 
 1462              		.loc 1 299 48 view .LVU407
 1463 06a4 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1464              	@ armwave.c:292:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 292:armwave.c     ****     g_armwave_state.target_width = target_width;
 1465              		.loc 1 292 95 view .LVU408
 1466 06a8 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1467              	@ armwave.c:284:     g_armwave_state.xstride = target_height;
 284:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1468              		.loc 1 284 29 view .LVU409
 1469 06ac 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 285:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1470              		.loc 1 285 5 is_stmt 1 view .LVU410
 1471              	@ armwave.c:287:     g_armwave_state.wave_stride = wave_stride;
 287:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1472              		.loc 1 287 33 is_stmt 0 view .LVU411
 1473 06b0 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1474              	@ armwave.c:288:     g_armwave_state.waves_max = waves_max;
 288:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1475              		.loc 1 288 31 view .LVU412
 1476 06b4 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1477              	@ armwave.c:289:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 289:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1478              		.loc 1 289 27 view .LVU413
 1479 06b8 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1480              	@ armwave.c:294:     g_armwave_state.target_height = target_height;
 294:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1481              		.loc 1 294 35 view .LVU414
 1482 06bc F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1483              	@ armwave.c:301:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1484              		.loc 1 301 5 view .LVU415
 1485 06c0 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1486              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 299:armwave.c     **** 
 1487              		.loc 1 299 48 view .LVU416
 1488 06c4 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1489              	@ armwave.c:291:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 291:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1490              		.loc 1 291 37 view .LVU417
 1491 06c8 022CA0E3 		mov	r2, #512	@ tmp185,
 1492              	@ armwave.c:290:     g_armwave_state.size = target_height * target_width;
 290:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1493              		.loc 1 290 26 view .LVU418
 1494 06cc 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1495              	@ armwave.c:291:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 291:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1496              		.loc 1 291 37 view .LVU419
 1497 06d0 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1498              	@ armwave.c:301:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1499              		.loc 1 301 5 view .LVU420
 1500 06d4 0310A0E1 		mov	r1, r3	@, tmp190
 1501              	@ armwave.c:292:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 292:armwave.c     ****     g_armwave_state.target_width = target_width;
 1502              		.loc 1 292 34 view .LVU421
 1503 06d8 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1504              	@ armwave.c:295:     g_armwave_state.wave_length = end_point - start_point;
 295:armwave.c     **** 
 1505              		.loc 1 295 33 view .LVU422
 1506 06dc 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1507              	@ armwave.c:301:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1508              		.loc 1 301 5 view .LVU423
 1509 06e0 60019FE5 		ldr	r0, .L86+20	@,
 1510              	@ armwave.c:285:     g_armwave_state.vscale_frac = target_height / 255.0f;
 285:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1511              		.loc 1 285 49 view .LVU424
 1512 06e4 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1513              	@ armwave.c:299:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 299:armwave.c     **** 
 1514              		.loc 1 299 79 view .LVU425
 1515 06e8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1516              	@ armwave.c:298:     g_armwave_state.cmp_x_bitdepth_scale = \
 298:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1517              		.loc 1 298 42 view .LVU426
 1518 06ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1519              	@ armwave.c:285:     g_armwave_state.vscale_frac = target_height / 255.0f;
 285:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1520              		.loc 1 285 33 view .LVU427
 1521 06f0 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 286:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1522              		.loc 1 286 5 is_stmt 1 view .LVU428
 1523              	@ armwave.c:298:     g_armwave_state.cmp_x_bitdepth_scale = \
 298:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1524              		.loc 1 298 42 is_stmt 0 view .LVU429
 1525 06f4 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1526              	@ armwave.c:286:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 286:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1527              		.loc 1 286 30 view .LVU430
 1528 06f8 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1529              	@ armwave.c:301:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1530              		.loc 1 301 5 view .LVU431
 1531 06fc 0C30A0E1 		mov	r3, ip	@, _19
 1532 0700 0C20A0E1 		mov	r2, ip	@, tmp3
 1533              	@ armwave.c:298:     g_armwave_state.cmp_x_bitdepth_scale = \
 298:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1534              		.loc 1 298 42 view .LVU432
 1535 0704 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1536              	@ armwave.c:286:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 286:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1537              		.loc 1 286 30 view .LVU433
 1538 0708 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 287:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1539              		.loc 1 287 5 is_stmt 1 view .LVU434
 288:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1540              		.loc 1 288 5 view .LVU435
 289:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1541              		.loc 1 289 5 view .LVU436
 290:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1542              		.loc 1 290 5 view .LVU437
 291:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1543              		.loc 1 291 5 view .LVU438
 292:armwave.c     ****     g_armwave_state.target_width = target_width;
 1544              		.loc 1 292 5 view .LVU439
 293:armwave.c     ****     g_armwave_state.target_height = target_height;
 1545              		.loc 1 293 5 view .LVU440
 294:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1546              		.loc 1 294 5 view .LVU441
 295:armwave.c     **** 
 1547              		.loc 1 295 5 view .LVU442
 298:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1548              		.loc 1 298 5 view .LVU443
 1549              		.loc 1 301 5 view .LVU444
 1550 070c FEFFFFEB 		bl	printf		@
 1551              	.LVL82:
 302:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 303:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 304:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 305:armwave.c     **** 
 306:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 307:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 308:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 309:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1552              		.loc 1 309 5 view .LVU445
 1553              	@ armwave.c:311:     if(g_armwave_state.ch1_buffer != NULL)
 310:armwave.c     **** 
 311:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1554              		.loc 1 311 23 is_stmt 0 view .LVU446
 1555 0710 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1556              	@ armwave.c:309:     g_armwave_state.slice_height = 256; // 64;  
 309:armwave.c     **** 
 1557              		.loc 1 309 34 view .LVU447
 1558 0714 013CA0E3 		mov	r3, #256	@ tmp204,
 1559              	@ armwave.c:311:     if(g_armwave_state.ch1_buffer != NULL)
 1560              		.loc 1 311 7 view .LVU448
 1561 0718 000050E3 		cmp	r0, #0	@ _20,
 1562              	@ armwave.c:309:     g_armwave_state.slice_height = 256; // 64;  
 309:armwave.c     **** 
 1563              		.loc 1 309 34 view .LVU449
 1564 071c 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1565              		.loc 1 311 5 is_stmt 1 view .LVU450
 1566              	@ armwave.c:311:     if(g_armwave_state.ch1_buffer != NULL)
 1567              		.loc 1 311 7 is_stmt 0 view .LVU451
 1568 0720 0000000A 		beq	.L74		@,
 312:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1569              		.loc 1 312 9 is_stmt 1 view .LVU452
 1570 0724 FEFFFFEB 		bl	free		@
 1571              	.LVL83:
 1572              	.L74:
 313:armwave.c     **** 
 314:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1573              		.loc 1 314 5 view .LVU453
 1574              	@ armwave.c:314:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1575              		.loc 1 314 34 is_stmt 0 view .LVU454
 1576 0728 0110A0E3 		mov	r1, #1	@,
 1577 072c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1578 0730 FEFFFFEB 		bl	calloc		@
 1579              	.LVL84:
 1580              	@ armwave.c:316:     assert(g_armwave_state.ch1_buffer != NULL);
 315:armwave.c     **** 
 316:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1581              		.loc 1 316 5 view .LVU455
 1582 0734 000050E3 		cmp	r0, #0	@ _23,
 1583              	@ armwave.c:314:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 314:armwave.c     **** 
 1584              		.loc 1 314 34 view .LVU456
 1585 0738 0070A0E1 		mov	r7, r0	@ _23,
 1586              	@ armwave.c:314:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 314:armwave.c     **** 
 1587              		.loc 1 314 32 view .LVU457
 1588 073c 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1589              		.loc 1 316 5 is_stmt 1 view .LVU458
 1590 0740 3600000A 		beq	.L84		@,
 317:armwave.c     **** 
 318:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 319:armwave.c     ****     length = end_point - start_point;
 1591              		.loc 1 319 5 view .LVU459
 1592              	.LVL85:
 320:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1593              		.loc 1 320 5 view .LVU460
 1594              	@ armwave.c:320:     points_per_pixel = length / ((float)(target_width));
 1595              		.loc 1 320 34 is_stmt 0 view .LVU461
 1596 0744 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1597              	@ armwave.c:320:     points_per_pixel = length / ((float)(target_width));
 1598              		.loc 1 320 22 view .LVU462
 1599 0748 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1600              	@ armwave.c:321:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 321:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1601              		.loc 1 321 60 view .LVU463
 1602 074c 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1603              	@ armwave.c:322:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 322:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1604              		.loc 1 322 40 view .LVU464
 1605 0750 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1606              	@ armwave.c:320:     points_per_pixel = length / ((float)(target_width));
 320:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1607              		.loc 1 320 34 view .LVU465
 1608 0754 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1609              	@ armwave.c:320:     points_per_pixel = length / ((float)(target_width));
 320:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1610              		.loc 1 320 22 view .LVU466
 1611 0758 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1612              	@ armwave.c:321:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 321:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1613              		.loc 1 321 60 view .LVU467
 1614 075c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1615              	@ armwave.c:320:     points_per_pixel = length / ((float)(target_width));
 320:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1616              		.loc 1 320 22 view .LVU468
 1617 0760 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1618              	.LVL86:
 321:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1619              		.loc 1 321 5 is_stmt 1 view .LVU469
 1620              	@ armwave.c:321:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 321:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1621              		.loc 1 321 60 is_stmt 0 view .LVU470
 1622 0764 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1623              	@ armwave.c:321:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 321:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1624              		.loc 1 321 41 view .LVU471
 1625 0768 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1626 076c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1627              		.loc 1 322 5 is_stmt 1 view .LVU472
 1628              	@ armwave.c:322:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1629              		.loc 1 322 40 is_stmt 0 view .LVU473
 1630 0770 FEFFFFEB 		bl	malloc		@
 1631              	.LVL87:
 1632              	@ armwave.c:324:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 323:armwave.c     **** 
 324:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1633              		.loc 1 324 5 view .LVU474
 1634 0774 000050E3 		cmp	r0, #0	@ _31,
 1635              	@ armwave.c:322:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 322:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1636              		.loc 1 322 40 view .LVU475
 1637 0778 0060A0E1 		mov	r6, r0	@ _31,
 1638              	@ armwave.c:322:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 322:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1639              		.loc 1 322 38 view .LVU476
 1640 077c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1641              		.loc 1 324 5 is_stmt 1 view .LVU477
 1642 0780 2100000A 		beq	.L85		@,
 1643              	@ armwave.c:327:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 325:armwave.c     **** 
 326:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1644              		.loc 1 327 54 is_stmt 0 view .LVU478
 1645 0784 2C7ADFED 		vldr.32	s15, .L86+8	@ tmp229,
 1646 0788 020040E2 		sub	r0, r0, #2	@ ivtmp.78, _31,
 1647              	@ armwave.c:326:     for(xx = 0; xx < length; xx++) {
 326:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1648              		.loc 1 326 12 view .LVU479
 1649 078c 0030A0E3 		mov	r3, #0	@ xx,
 1650              	@ armwave.c:327:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1651              		.loc 1 327 54 view .LVU480
 1652 0790 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1653              	.L77:
 1654              	.LVL88:
 1655              		.loc 1 327 9 is_stmt 1 discriminator 3 view .LVU481
 1656              	@ armwave.c:327:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1657              		.loc 1 327 74 is_stmt 0 discriminator 3 view .LVU482
 1658 0794 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1659              	@ armwave.c:326:     for(xx = 0; xx < length; xx++) {
 326:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1660              		.loc 1 326 32 discriminator 3 view .LVU483
 1661 0798 013083E2 		add	r3, r3, #1	@ xx, xx,
 1662              	.LVL89:
 1663              	@ armwave.c:326:     for(xx = 0; xx < length; xx++) {
 326:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1664              		.loc 1 326 5 discriminator 3 view .LVU484
 1665 079c 030055E1 		cmp	r5, r3	@ _13, xx
 1666              	@ armwave.c:327:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1667              		.loc 1 327 74 discriminator 3 view .LVU485
 1668 07a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1669 07a4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1670              	@ armwave.c:327:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1671              		.loc 1 327 46 discriminator 3 view .LVU486
 1672 07a8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1673 07ac 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1674 07b0 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1675              	@ armwave.c:326:     for(xx = 0; xx < length; xx++) {
 326:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1676              		.loc 1 326 5 discriminator 3 view .LVU487
 1677 07b4 F6FFFF1A 		bne	.L77		@,
 328:armwave.c     **** 
 329:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 330:armwave.c     ****     }
 331:armwave.c     **** 
 332:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1678              		.loc 1 332 5 is_stmt 1 view .LVU488
 1679              	@ armwave.c:332:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1680              		.loc 1 332 34 is_stmt 0 view .LVU489
 1681 07b8 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1682 07bc 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1683 07c0 FEFFFFEB 		bl	malloc		@
 1684              	.LVL90:
 1685              	@ armwave.c:334:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 333:armwave.c     **** 
 334:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1686              		.loc 1 334 5 view .LVU490
 1687 07c4 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1688 07c8 0620A0E1 		mov	r2, r6	@, _31
 1689 07cc 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1690 07d0 0710A0E1 		mov	r1, r7	@, _23
 1691              	@ armwave.c:332:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 332:armwave.c     **** 
 1692              		.loc 1 332 34 view .LVU491
 1693 07d4 00C0A0E1 		mov	ip, r0	@ tmp236,
 1694              	@ armwave.c:334:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1695              		.loc 1 334 5 view .LVU492
 1696 07d8 0030A0E1 		mov	r3, r0	@, tmp236
 1697              	@ armwave.c:332:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 332:armwave.c     **** 
 1698              		.loc 1 332 32 view .LVU493
 1699 07dc 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1700              		.loc 1 334 5 is_stmt 1 view .LVU494
 1701 07e0 64009FE5 		ldr	r0, .L86+24	@,
 1702 07e4 FEFFFFEB 		bl	printf		@
 1703              	.LVL91:
 335:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 336:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 337:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 338:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 339:armwave.c     **** 
 340:armwave.c     ****     malloc_stats();
 1704              		.loc 1 340 5 view .LVU495
 1705              	@ armwave.c:341: }
 341:armwave.c     **** }
 1706              		.loc 1 341 1 is_stmt 0 view .LVU496
 1707 07e8 14D08DE2 		add	sp, sp, #20	@,,
 1708              		.cfi_remember_state
 1709              		.cfi_def_cfa_offset 36
 1710              		@ sp needed	@
 1711 07ec 028BBDEC 		vldm	sp!, {d8}	@
 1712              		.cfi_restore 80
 1713              		.cfi_restore 81
 1714              		.cfi_def_cfa_offset 28
 1715              	.LVL92:
 1716              		.loc 1 341 1 view .LVU497
 1717 07f0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1718              		.cfi_restore 14
 1719              		.cfi_restore 9
 1720              		.cfi_restore 8
 1721              		.cfi_restore 7
 1722              		.cfi_restore 6
 1723              		.cfi_restore 5
 1724              		.cfi_restore 4
 1725              		.cfi_def_cfa_offset 0
 1726              	.LVL93:
 1727              	@ armwave.c:340:     malloc_stats();
 340:armwave.c     **** }
 1728              		.loc 1 340 5 view .LVU498
 1729 07f4 FEFFFFEA 		b	malloc_stats		@
 1730              	.LVL94:
 1731              	.L83:
 1732              		.cfi_restore_state
 263:armwave.c     **** 
 1733              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU499
 1734 07f8 50309FE5 		ldr	r3, .L86+28	@,
 1735 07fc 50209FE5 		ldr	r2, .L86+32	@,
 1736 0800 50109FE5 		ldr	r1, .L86+36	@,
 1737 0804 50009FE5 		ldr	r0, .L86+40	@,
 1738 0808 FEFFFFEB 		bl	__assert_fail		@
 1739              	.LVL95:
 1740              	.L85:
 324:armwave.c     **** 
 1741              		.loc 1 324 5 discriminator 1 view .LVU500
 1742 080c 3C309FE5 		ldr	r3, .L86+28	@,
 1743 0810 512FA0E3 		mov	r2, #324	@,
 1744 0814 3C109FE5 		ldr	r1, .L86+36	@,
 1745 0818 40009FE5 		ldr	r0, .L86+44	@,
 1746 081c FEFFFFEB 		bl	__assert_fail		@
 1747              	.LVL96:
 1748              	.L84:
 316:armwave.c     **** 
 1749              		.loc 1 316 5 discriminator 1 view .LVU501
 1750 0820 28309FE5 		ldr	r3, .L86+28	@,
 1751 0824 4F2FA0E3 		mov	r2, #316	@,
 1752 0828 28109FE5 		ldr	r1, .L86+36	@,
 1753 082c 30009FE5 		ldr	r0, .L86+48	@,
 1754 0830 FEFFFFEB 		bl	__assert_fail		@
 1755              	.LVL97:
 1756              	.L87:
 1757              		.align	2
 1758              	.L86:
 1759 0834 00007F43 		.word	1132396544
 1760 0838 00008047 		.word	1199570944
 1761 083c 0000803F 		.word	1065353216
 1762 0840 40000000 		.word	.LC4
 1763 0844 00000000 		.word	g_armwave_state
 1764 0848 84000000 		.word	.LC6
 1765 084c 34010000 		.word	.LC9
 1766 0850 1C000000 		.word	.LANCHOR0+28
 1767 0854 07010000 		.word	263
 1768 0858 20000000 		.word	.LC2
 1769 085c 6C000000 		.word	.LC5
 1770 0860 08010000 		.word	.LC8
 1771 0864 E4000000 		.word	.LC7
 1772              		.cfi_endproc
 1773              	.LFE62:
 1775              		.align	2
 1776              		.global	armwave_set_wave_pointer
 1777              		.syntax unified
 1778              		.arm
 1779              		.fpu vfp
 1781              	armwave_set_wave_pointer:
 1782              	.LVL98:
 1783              	.LFB63:
 342:armwave.c     **** 
 343:armwave.c     **** /*
 344:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 345:armwave.c     ****  * in the future.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 348:armwave.c     **** {
 1784              		.loc 1 348 1 view -0
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 0
 1787              		@ frame_needed = 0, uses_anonymous_args = 0
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1788              		.loc 1 349 5 view .LVU503
 1789 0868 000050E3 		cmp	r0, #0	@ wave_buffer
 1790              		.loc 1 349 5 is_stmt 0 view .LVU504
 1791 086c 0200000A 		beq	.L93		@,
 350:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1792              		.loc 1 350 5 is_stmt 1 view .LVU505
 1793              	@ armwave.c:350:     g_armwave_state.wave_buffer = wave_buffer;
 1794              		.loc 1 350 33 is_stmt 0 view .LVU506
 1795 0870 1C309FE5 		ldr	r3, .L94	@ tmp116,
 1796 0874 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1797 0878 1EFF2FE1 		bx	lr	@
 1798              	.L93:
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1799              		.loc 1 349 5 is_stmt 1 discriminator 1 view .LVU507
 1800              	@ armwave.c:348: {
 348:armwave.c     ****     assert(wave_buffer != NULL);
 1801              		.loc 1 348 1 is_stmt 0 discriminator 1 view .LVU508
 1802 087c 10402DE9 		push	{r4, lr}	@
 1803              		.cfi_def_cfa_offset 8
 1804              		.cfi_offset 4, -8
 1805              		.cfi_offset 14, -4
 1806              	@ armwave.c:349:     assert(wave_buffer != NULL);
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1807              		.loc 1 349 5 discriminator 1 view .LVU509
 1808 0880 10309FE5 		ldr	r3, .L94+4	@,
 1809 0884 10209FE5 		ldr	r2, .L94+8	@,
 1810 0888 10109FE5 		ldr	r1, .L94+12	@,
 1811 088c 10009FE5 		ldr	r0, .L94+16	@,
 1812              	.LVL99:
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1813              		.loc 1 349 5 discriminator 1 view .LVU510
 1814 0890 FEFFFFEB 		bl	__assert_fail		@
 1815              	.LVL100:
 1816              	.L95:
 1817              		.align	2
 1818              	.L94:
 1819 0894 00000000 		.word	g_armwave_state
 1820 0898 34000000 		.word	.LANCHOR0+52
 1821 089c 5D010000 		.word	349
 1822 08a0 20000000 		.word	.LC2
 1823 08a4 58010000 		.word	.LC10
 1824              		.cfi_endproc
 1825              	.LFE63:
 1827              		.align	2
 1828              		.global	armwave_set_wave_pointer_as_testbuf
 1829              		.syntax unified
 1830              		.arm
 1831              		.fpu vfp
 1833              	armwave_set_wave_pointer_as_testbuf:
 1834              	.LVL101:
 1835              	.LFB64:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 355:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 356:armwave.c     ****  */
 357:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 358:armwave.c     **** {
 1836              		.loc 1 358 1 is_stmt 1 view -0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              		@ link register save eliminated.
 359:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1841              		.loc 1 359 5 view .LVU512
 1842              	@ armwave.c:359:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1843              		.loc 1 359 29 is_stmt 0 view .LVU513
 1844 08a8 24309FE5 		ldr	r3, .L99	@ tmp117,
 1845              	@ armwave.c:359:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1846              		.loc 1 359 7 view .LVU514
 1847 08ac 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1848 08b0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1849 08b4 0400003A 		bcc	.L98		@,
 360:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 361:armwave.c     ****         return;
 362:armwave.c     ****     }
 363:armwave.c     **** 
 364:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1850              		.loc 1 364 5 is_stmt 1 view .LVU515
 1851              	@ armwave.c:364:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1852              		.loc 1 364 111 is_stmt 0 view .LVU516
 1853 08b8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1854              	@ armwave.c:364:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1855              		.loc 1 364 68 view .LVU517
 1856 08bc 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1857 08c0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1858              	.LVL102:
 1859              	@ armwave.c:364:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1860              		.loc 1 364 33 view .LVU518
 1861 08c4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1862              	@ armwave.c:365: }
 365:armwave.c     **** }
 1863              		.loc 1 365 1 view .LVU519
 1864 08c8 1EFF2FE1 		bx	lr	@
 1865              	.LVL103:
 1866              	.L98:
 360:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1867              		.loc 1 360 9 is_stmt 1 view .LVU520
 1868 08cc 04009FE5 		ldr	r0, .L99+4	@,
 1869              	.LVL104:
 360:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1870              		.loc 1 360 9 is_stmt 0 view .LVU521
 1871 08d0 FEFFFFEA 		b	puts		@
 1872              	.LVL105:
 1873              	.L100:
 1874              		.align	2
 1875              	.L99:
 1876 08d4 00000000 		.word	g_armwave_state
 1877 08d8 6C010000 		.word	.LC11
 1878              		.cfi_endproc
 1879              	.LFE64:
 1881              		.align	2
 1882              		.global	armwave_set_wave_pointer_u32
 1883              		.syntax unified
 1884              		.arm
 1885              		.fpu vfp
 1887              	armwave_set_wave_pointer_u32:
 1888              	.LVL106:
 1889              	.LFB65:
 366:armwave.c     **** 
 367:armwave.c     **** /*
 368:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 369:armwave.c     ****  * disjointed buffers in the future.
 370:armwave.c     ****  */
 371:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 372:armwave.c     **** {
 1890              		.loc 1 372 1 is_stmt 1 view -0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 0
 1893              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1894              		.loc 1 373 5 view .LVU523
 1895 08dc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1896              		.loc 1 373 5 is_stmt 0 view .LVU524
 1897 08e0 0200000A 		beq	.L106		@,
 374:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1898              		.loc 1 374 5 is_stmt 1 view .LVU525
 1899              	@ armwave.c:374:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1900              		.loc 1 374 33 is_stmt 0 view .LVU526
 1901 08e4 1C309FE5 		ldr	r3, .L107	@ tmp117,
 1902 08e8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1903 08ec 1EFF2FE1 		bx	lr	@
 1904              	.L106:
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1905              		.loc 1 373 5 is_stmt 1 discriminator 1 view .LVU527
 1906              	@ armwave.c:372: {
 372:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1907              		.loc 1 372 1 is_stmt 0 discriminator 1 view .LVU528
 1908 08f0 10402DE9 		push	{r4, lr}	@
 1909              		.cfi_def_cfa_offset 8
 1910              		.cfi_offset 4, -8
 1911              		.cfi_offset 14, -4
 1912              	@ armwave.c:373:     assert(wave_buffer_ptr != 0);
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1913              		.loc 1 373 5 discriminator 1 view .LVU529
 1914 08f4 10309FE5 		ldr	r3, .L107+4	@,
 1915 08f8 10209FE5 		ldr	r2, .L107+8	@,
 1916 08fc 10109FE5 		ldr	r1, .L107+12	@,
 1917 0900 10009FE5 		ldr	r0, .L107+16	@,
 1918              	.LVL107:
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1919              		.loc 1 373 5 discriminator 1 view .LVU530
 1920 0904 FEFFFFEB 		bl	__assert_fail		@
 1921              	.LVL108:
 1922              	.L108:
 1923              		.align	2
 1924              	.L107:
 1925 0908 00000000 		.word	g_armwave_state
 1926 090c 50000000 		.word	.LANCHOR0+80
 1927 0910 75010000 		.word	373
 1928 0914 20000000 		.word	.LC2
 1929 0918 A8010000 		.word	.LC12
 1930              		.cfi_endproc
 1931              	.LFE65:
 1933              		.align	2
 1934              		.global	armwave_clear_buffer
 1935              		.syntax unified
 1936              		.arm
 1937              		.fpu vfp
 1939              	armwave_clear_buffer:
 1940              	.LVL109:
 1941              	.LFB66:
 375:armwave.c     **** }
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 381:armwave.c     **** {
 1942              		.loc 1 381 1 is_stmt 1 view -0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              		@ link register save eliminated.
 382:armwave.c     ****     // Flags ignored, only one buffer cleared
 383:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1947              		.loc 1 383 5 view .LVU532
 1948              	@ armwave.c:383:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1949              		.loc 1 383 58 is_stmt 0 view .LVU533
 1950 091c 0C309FE5 		ldr	r3, .L110	@ tmp114,
 1951              	@ armwave.c:383:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1952              		.loc 1 383 5 view .LVU534
 1953 0920 0010A0E3 		mov	r1, #0	@,
 1954 0924 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1955 0928 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1956              	.LVL110:
 1957              		.loc 1 383 5 view .LVU535
 1958 092c FEFFFFEA 		b	memset		@
 1959              	.LVL111:
 1960              	.L111:
 1961              		.align	2
 1962              	.L110:
 1963 0930 00000000 		.word	g_armwave_state
 1964              		.cfi_endproc
 1965              	.LFE66:
 1967              		.align	2
 1968              		.global	armwave_set_channel_colour
 1969              		.syntax unified
 1970              		.arm
 1971              		.fpu vfp
 1973              	armwave_set_channel_colour:
 1974              	.LVL112:
 1975              	.LFB67:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 390:armwave.c     **** {
 1976              		.loc 1 390 1 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              		@ link register save eliminated.
 391:armwave.c     ****     // Only 1ch supported for now
 392:armwave.c     ****     switch(ch) {
 1981              		.loc 1 392 5 view .LVU537
 1982 0934 010050E3 		cmp	r0, #1	@ ch,
 393:armwave.c     ****         case 1:
 394:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1983              		.loc 1 394 13 view .LVU538
 1984              	@ armwave.c:394:             g_armwave_state.ch1_color.r = r;
 1985              		.loc 1 394 41 is_stmt 0 view .LVU539
 1986 0938 0C009F05 		ldreq	r0, .L114	@ tmp117,
 1987              	.LVL113:
 1988              		.loc 1 394 41 view .LVU540
 1989 093c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1990              		.loc 1 395 13 is_stmt 1 view .LVU541
 1991              	@ armwave.c:395:             g_armwave_state.ch1_color.g = g;
 1992              		.loc 1 395 41 is_stmt 0 view .LVU542
 1993 0940 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 396:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1994              		.loc 1 396 13 is_stmt 1 view .LVU543
 1995              	@ armwave.c:396:             g_armwave_state.ch1_color.b = b;
 1996              		.loc 1 396 41 is_stmt 0 view .LVU544
 1997 0944 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 397:armwave.c     ****             break;
 1998              		.loc 1 397 13 is_stmt 1 view .LVU545
 1999              	@ armwave.c:399: }
 398:armwave.c     ****     }
 399:armwave.c     **** }
 2000              		.loc 1 399 1 is_stmt 0 view .LVU546
 2001 0948 1EFF2FE1 		bx	lr	@
 2002              	.L115:
 2003              		.align	2
 2004              	.L114:
 2005 094c 00000000 		.word	g_armwave_state
 2006              		.cfi_endproc
 2007              	.LFE67:
 2009              		.align	2
 2010              		.global	armwave_dump_ppm_debug
 2011              		.syntax unified
 2012              		.arm
 2013              		.fpu vfp
 2015              	armwave_dump_ppm_debug:
 2016              	.LVL114:
 2017              	.LFB68:
 400:armwave.c     **** 
 401:armwave.c     **** /*
 402:armwave.c     ****  * Dump a ppm of a buffer to a file.
 403:armwave.c     ****  */
 404:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 405:armwave.c     **** {
 2018              		.loc 1 405 1 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 406:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2022              		.loc 1 406 5 view .LVU548
 2023              	@ armwave.c:405: {
 405:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2024              		.loc 1 405 1 is_stmt 0 view .LVU549
 2025 0950 0130A0E1 		mov	r3, r1	@ fn, fn
 2026 0954 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2027              		.cfi_def_cfa_offset 28
 2028              		.cfi_offset 4, -28
 2029              		.cfi_offset 5, -24
 2030              		.cfi_offset 6, -20
 2031              		.cfi_offset 7, -16
 2032              		.cfi_offset 8, -12
 2033              		.cfi_offset 9, -8
 2034              		.cfi_offset 14, -4
 2035 0958 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2036 095c 0CD04DE2 		sub	sp, sp, #12	@,,
 2037              		.cfi_def_cfa_offset 40
 2038              	@ armwave.c:406:     FILE *fp = fopen(fn, "wb");
 2039              		.loc 1 406 16 view .LVU550
 2040 0960 C4109FE5 		ldr	r1, .L124	@,
 2041              	.LVL115:
 2042              		.loc 1 406 16 view .LVU551
 2043 0964 0300A0E1 		mov	r0, r3	@, fn
 2044              	.LVL116:
 2045              		.loc 1 406 16 view .LVU552
 2046 0968 FEFFFFEB 		bl	fopen64		@
 2047              	.LVL117:
 2048              	@ armwave.c:413:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 407:armwave.c     ****     uint32_t data;
 408:armwave.c     ****     int xx, yy;
 409:armwave.c     **** 
 410:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 411:armwave.c     **** 
 412:armwave.c     ****     fputs("P3\n", fp);
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2049              		.loc 1 413 5 view .LVU553
 2050 096c BC609FE5 		ldr	r6, .L124+4	@ tmp150,
 2051              	@ armwave.c:412:     fputs("P3\n", fp);
 412:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2052              		.loc 1 412 5 view .LVU554
 2053 0970 0320A0E3 		mov	r2, #3	@,
 2054 0974 0110A0E3 		mov	r1, #1	@,
 2055              	@ armwave.c:406:     FILE *fp = fopen(fn, "wb");
 406:armwave.c     ****     uint32_t data;
 2056              		.loc 1 406 16 view .LVU555
 2057 0978 0070A0E1 		mov	r7, r0	@ fp,
 2058              	.LVL118:
 407:armwave.c     ****     uint32_t data;
 2059              		.loc 1 407 5 is_stmt 1 view .LVU556
 408:armwave.c     **** 
 2060              		.loc 1 408 5 view .LVU557
 412:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2061              		.loc 1 412 5 view .LVU558
 2062 097c 0030A0E1 		mov	r3, r0	@, fp
 2063 0980 AC009FE5 		ldr	r0, .L124+8	@,
 2064              	.LVL119:
 412:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2065              		.loc 1 412 5 is_stmt 0 view .LVU559
 2066 0984 FEFFFFEB 		bl	fwrite		@
 2067              	.LVL120:
 2068              		.loc 1 413 5 is_stmt 1 view .LVU560
 2069 0988 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2070 098c A4109FE5 		ldr	r1, .L124+12	@,
 2071 0990 0700A0E1 		mov	r0, r7	@, fp
 2072 0994 FEFFFFEB 		bl	fprintf		@
 2073              	.LVL121:
 414:armwave.c     ****     fputs("255\n", fp);
 2074              		.loc 1 414 5 view .LVU561
 2075 0998 0420A0E3 		mov	r2, #4	@,
 2076 099c 0730A0E1 		mov	r3, r7	@, fp
 2077 09a0 0110A0E3 		mov	r1, #1	@,
 2078 09a4 90009FE5 		ldr	r0, .L124+16	@,
 2079 09a8 FEFFFFEB 		bl	fwrite		@
 2080              	.LVL122:
 415:armwave.c     **** 
 416:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2081              		.loc 1 416 5 view .LVU562
 2082              	@ armwave.c:416:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2083              		.loc 1 416 37 is_stmt 0 view .LVU563
 2084 09ac 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2085              	@ armwave.c:416:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2086              		.loc 1 416 5 view .LVU564
 2087 09b0 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2088 09b4 180000DA 		ble	.L117		@,
 2089 09b8 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2090              	@ armwave.c:421:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 420:armwave.c     **** 
 421:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2091              		.loc 1 421 13 view .LVU565
 2092 09bc 7C909FE5 		ldr	r9, .L124+20	@ tmp152,
 2093              	@ armwave.c:416:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 416:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2094              		.loc 1 416 12 view .LVU566
 2095 09c0 0050A0E3 		mov	r5, #0	@ yy,
 2096              	.LVL123:
 2097              	.L118:
 2098              	@ armwave.c:417:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2099              		.loc 1 417 9 view .LVU567
 2100 09c4 000053E3 		cmp	r3, #0	@ _13,
 2101              	@ armwave.c:417:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2102              		.loc 1 417 16 view .LVU568
 2103 09c8 0040A0C3 		movgt	r4, #0	@ xx,
 2104              	@ armwave.c:417:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2105              		.loc 1 417 9 view .LVU569
 2106 09cc 0F0000DA 		ble	.L120		@,
 2107              	.LVL124:
 2108              	.L119:
 418:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2109              		.loc 1 418 13 is_stmt 1 discriminator 3 view .LVU570
 2110              	@ armwave.c:418:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 418:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2111              		.loc 1 418 29 is_stmt 0 discriminator 3 view .LVU571
 2112 09d0 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2113              	@ armwave.c:421:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2114              		.loc 1 421 13 discriminator 3 view .LVU572
 2115 09d4 0910A0E1 		mov	r1, r9	@, tmp152
 2116 09d8 0700A0E1 		mov	r0, r7	@, fp
 2117              	@ armwave.c:418:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 418:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2118              		.loc 1 418 18 discriminator 3 view .LVU573
 2119 09dc 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2120              	.LVL125:
 2121              		.loc 1 421 13 is_stmt 1 discriminator 3 view .LVU574
 2122              	@ armwave.c:417:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2123              		.loc 1 417 58 is_stmt 0 discriminator 3 view .LVU575
 2124 09e0 014084E2 		add	r4, r4, #1	@ xx, xx,
 2125              	.LVL126:
 2126              	@ armwave.c:421:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2127              		.loc 1 421 81 discriminator 3 view .LVU576
 2128 09e4 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2129              	@ armwave.c:421:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2130              		.loc 1 421 61 discriminator 3 view .LVU577
 2131 09e8 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2132              	@ armwave.c:421:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2133              		.loc 1 421 13 discriminator 3 view .LVU578
 2134 09ec 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2135 09f0 7330EFE6 		uxtb	r3, r3	@, tmp142
 2136 09f4 00C08DE5 		str	ip, [sp]	@ tmp147,
 2137 09f8 7220EFE6 		uxtb	r2, r2	@, data
 2138              	.LVL127:
 2139              		.loc 1 421 13 discriminator 3 view .LVU579
 2140 09fc FEFFFFEB 		bl	fprintf		@
 2141              	.LVL128:
 2142              	@ armwave.c:417:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2143              		.loc 1 417 41 discriminator 3 view .LVU580
 2144 0a00 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2145              	@ armwave.c:417:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2146              		.loc 1 417 9 discriminator 3 view .LVU581
 2147 0a04 040053E1 		cmp	r3, r4	@ _13, xx
 2148 0a08 F0FFFFCA 		bgt	.L119		@,
 2149 0a0c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2150              	.LVL129:
 2151              	.L120:
 2152              	@ armwave.c:416:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 416:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2153              		.loc 1 416 55 discriminator 2 view .LVU582
 2154 0a10 015085E2 		add	r5, r5, #1	@ yy, yy,
 2155              	.LVL130:
 2156              	@ armwave.c:416:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 416:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2157              		.loc 1 416 5 discriminator 2 view .LVU583
 2158 0a14 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2159 0a18 E9FFFFBA 		blt	.L118		@,
 2160              	.LVL131:
 2161              	.L117:
 422:armwave.c     ****         }
 423:armwave.c     ****     }
 424:armwave.c     **** 
 425:armwave.c     ****     fclose(fp);
 2162              		.loc 1 425 5 is_stmt 1 view .LVU584
 2163 0a1c 0700A0E1 		mov	r0, r7	@, fp
 2164              	@ armwave.c:426: }
 426:armwave.c     **** }
 2165              		.loc 1 426 1 is_stmt 0 view .LVU585
 2166 0a20 0CD08DE2 		add	sp, sp, #12	@,,
 2167              		.cfi_def_cfa_offset 28
 2168              		@ sp needed	@
 2169 0a24 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2170              		.cfi_restore 14
 2171              		.cfi_restore 9
 2172              		.cfi_restore 8
 2173              		.cfi_restore 7
 2174              		.cfi_restore 6
 2175              		.cfi_restore 5
 2176              		.cfi_restore 4
 2177              		.cfi_def_cfa_offset 0
 2178              	.LVL132:
 2179              	@ armwave.c:425:     fclose(fp);
 425:armwave.c     **** }
 2180              		.loc 1 425 5 view .LVU586
 2181 0a28 FEFFFFEA 		b	fclose		@
 2182              	.LVL133:
 2183              	.L125:
 425:armwave.c     **** }
 2184              		.loc 1 425 5 view .LVU587
 2185              		.align	2
 2186              	.L124:
 2187 0a2c C0010000 		.word	.LC13
 2188 0a30 00000000 		.word	g_armwave_state
 2189 0a34 C4010000 		.word	.LC14
 2190 0a38 C8010000 		.word	.LC15
 2191 0a3c D0010000 		.word	.LC16
 2192 0a40 D8010000 		.word	.LC17
 2193              		.cfi_endproc
 2194              	.LFE68:
 2196              		.align	2
 2197              		.global	armwave_test_init
 2198              		.syntax unified
 2199              		.arm
 2200              		.fpu vfp
 2202              	armwave_test_init:
 2203              	.LVL134:
 2204              	.LFB69:
 427:armwave.c     **** 
 428:armwave.c     **** /*
 429:armwave.c     ****  * Initialise some test functionry.
 430:armwave.c     ****  */
 431:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 432:armwave.c     **** {
 2205              		.loc 1 432 1 is_stmt 1 view -0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 433:armwave.c     ****     test_create_gamma();
 2209              		.loc 1 433 5 view .LVU589
 2210              	.LBB18:
 2211              	.LBI18:
  34:armwave.c     **** {
 2212              		.loc 1 34 6 view .LVU590
  34:armwave.c     **** {
 2213              		.loc 1 34 6 is_stmt 0 view .LVU591
 2214              	.LBE18:
 2215              	@ armwave.c:432: {
 432:armwave.c     ****     test_create_gamma();
 2216              		.loc 1 432 1 view .LVU592
 2217 0a44 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2218              		.cfi_def_cfa_offset 32
 2219              		.cfi_offset 4, -32
 2220              		.cfi_offset 5, -28
 2221              		.cfi_offset 6, -24
 2222              		.cfi_offset 7, -20
 2223              		.cfi_offset 8, -16
 2224              		.cfi_offset 9, -12
 2225              		.cfi_offset 10, -8
 2226              		.cfi_offset 14, -4
 2227 0a48 068B2DED 		vpush.64	{d8, d9, d10}	@
 2228              		.cfi_def_cfa_offset 56
 2229              		.cfi_offset 80, -56
 2230              		.cfi_offset 81, -52
 2231              		.cfi_offset 82, -48
 2232              		.cfi_offset 83, -44
 2233              		.cfi_offset 84, -40
 2234              		.cfi_offset 85, -36
 2235 0a4c C0409FE5 		ldr	r4, .L130+20	@ ivtmp.92,
 2236              	.LBB21:
 2237              	.LBB19:
 2238              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2239              		.loc 1 40 32 view .LVU593
 2240 0a50 2EAA9FED 		vldr.32	s20, .L130+16	@ tmp136,
 2241              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2242              		.loc 1 40 26 view .LVU594
 2243 0a54 299B9FED 		vldr.64	d9, .L130	@ tmp151,
 2244              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2245              		.loc 1 40 49 view .LVU595
 2246 0a58 2A8B9FED 		vldr.64	d8, .L130+8	@ tmp139,
 2247 0a5c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.92,
 2248              	.LBE19:
 2249              	.LBE21:
 2250              	@ armwave.c:432: {
 432:armwave.c     ****     test_create_gamma();
 2251              		.loc 1 432 1 view .LVU596
 2252 0a60 10D04DE2 		sub	sp, sp, #16	@,,
 2253              		.cfi_def_cfa_offset 72
 2254              	@ armwave.c:432: {
 432:armwave.c     ****     test_create_gamma();
 2255              		.loc 1 432 1 view .LVU597
 2256 0a64 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2257 0a68 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2258 0a6c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2259 0a70 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2260 0a74 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.92,
 2261 0a78 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2262              	.LVL135:
 2263              	.L127:
 2264              	.LBB22:
 2265              	.LBB20:
  40:armwave.c     ****     }
 2266              		.loc 1 40 9 is_stmt 1 view .LVU598
 2267              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2268              		.loc 1 40 32 is_stmt 0 view .LVU599
 2269 0a7c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.92
 2270              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2271              		.loc 1 40 26 view .LVU600
 2272 0a80 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2273              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2274              		.loc 1 40 32 view .LVU601
 2275 0a84 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2276 0a88 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2277 0a8c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2278              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2279              		.loc 1 40 26 view .LVU602
 2280 0a90 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2281 0a94 FEFFFFEB 		bl	pow		@
 2282              	.LVL136:
 2283              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2284              		.loc 1 40 49 view .LVU603
 2285 0a98 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2286              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2287              		.loc 1 40 24 view .LVU604
 2288 0a9c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2289 0aa0 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2290 0aa4 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2291              	.LVL137:
 2292              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2293              		.loc 1 39 5 view .LVU605
 2294 0aa8 0A0054E1 		cmp	r4, r10	@ ivtmp.92, _39
 2295 0aac F2FFFF1A 		bne	.L127		@,
 2296              	.LVL138:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2297              		.loc 1 39 5 view .LVU606
 2298              	.LBE20:
 2299              	.LBE22:
 434:armwave.c     **** 
 435:armwave.c     ****     // make ch1 yellowish by default
 436:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2300              		.loc 1 436 5 is_stmt 1 view .LVU607
 2301              	.LBB23:
 2302              	.LBI23:
 389:armwave.c     **** {
 2303              		.loc 1 389 6 view .LVU608
 2304              	.LBB24:
 392:armwave.c     ****         case 1:
 2305              		.loc 1 392 5 view .LVU609
 394:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2306              		.loc 1 394 13 view .LVU610
 395:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2307              		.loc 1 395 13 view .LVU611
 2308              	@ armwave.c:394:             g_armwave_state.ch1_color.r = r;
 394:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2309              		.loc 1 394 41 is_stmt 0 view .LVU612
 2310 0ab0 60C09FE5 		ldr	ip, .L130+24	@ tmp142,
 2311 0ab4 60409FE5 		ldr	r4, .L130+28	@ tmp143,
 2312              	.LBE24:
 2313              	.LBE23:
 2314              	@ armwave.c:438:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 437:armwave.c     **** 
 438:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2315              		.loc 1 438 5 view .LVU613
 2316 0ab8 0000A0E3 		mov	r0, #0	@ tmp147,
 2317              	.LBB28:
 2318              	.LBB25:
 2319              	@ armwave.c:396:             g_armwave_state.ch1_color.b = b;
 396:armwave.c     ****             break;
 2320              		.loc 1 396 41 view .LVU614
 2321 0abc FAE0A0E3 		mov	lr, #250	@ tmp146,
 2322              	.LBE25:
 2323              	.LBE28:
 2324              	@ armwave.c:438:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2325              		.loc 1 438 5 view .LVU615
 2326 0ac0 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2327 0ac4 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2328 0ac8 00808DE5 		str	r8, [sp]	@ render_width,
 2329 0acc 0610A0E1 		mov	r1, r6	@, tmp3
 2330 0ad0 0720A0E1 		mov	r2, r7	@, nwaves
 2331              	.LBB29:
 2332              	.LBB26:
 2333              	@ armwave.c:394:             g_armwave_state.ch1_color.r = r;
 394:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2334              		.loc 1 394 41 view .LVU616
 2335 0ad4 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 396:armwave.c     ****             break;
 2336              		.loc 1 396 13 is_stmt 1 view .LVU617
 2337              	.LBE26:
 2338              	.LBE29:
 2339              	@ armwave.c:438:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2340              		.loc 1 438 5 is_stmt 0 view .LVU618
 2341 0ad8 0630A0E1 		mov	r3, r6	@, wave_size
 2342              	.LBB30:
 2343              	.LBB27:
 2344              	@ armwave.c:396:             g_armwave_state.ch1_color.b = b;
 396:armwave.c     ****             break;
 2345              		.loc 1 396 41 view .LVU619
 2346 0adc B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 397:armwave.c     ****     }
 2347              		.loc 1 397 13 is_stmt 1 view .LVU620
 2348              	.LVL139:
 397:armwave.c     ****     }
 2349              		.loc 1 397 13 is_stmt 0 view .LVU621
 2350              	.LBE27:
 2351              	.LBE30:
 2352              		.loc 1 438 5 is_stmt 1 view .LVU622
 2353 0ae0 FEFFFFEB 		bl	armwave_setup_render		@
 2354              	.LVL140:
 439:armwave.c     **** 
 440:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2355              		.loc 1 440 5 view .LVU623
 2356 0ae4 34109FE5 		ldr	r1, .L130+32	@,
 2357 0ae8 34009FE5 		ldr	r0, .L130+36	@,
 2358              	@ armwave.c:441: }
 441:armwave.c     **** }
 2359              		.loc 1 441 1 is_stmt 0 view .LVU624
 2360 0aec 10D08DE2 		add	sp, sp, #16	@,,
 2361              		.cfi_def_cfa_offset 56
 2362              		@ sp needed	@
 2363 0af0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2364              		.cfi_restore 84
 2365              		.cfi_restore 85
 2366              		.cfi_restore 82
 2367              		.cfi_restore 83
 2368              		.cfi_restore 80
 2369              		.cfi_restore 81
 2370              		.cfi_def_cfa_offset 32
 2371 0af4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2372              		.cfi_restore 14
 2373              		.cfi_restore 10
 2374              		.cfi_restore 9
 2375              		.cfi_restore 8
 2376              		.cfi_restore 7
 2377              		.cfi_restore 6
 2378              		.cfi_restore 5
 2379              		.cfi_restore 4
 2380              		.cfi_def_cfa_offset 0
 2381              	.LVL141:
 2382              	@ armwave.c:440:     printf("armwave version: %s\n", ARMWAVE_VER);
 440:armwave.c     **** }
 2383              		.loc 1 440 5 view .LVU625
 2384 0af8 FEFFFFEA 		b	printf		@
 2385              	.LVL142:
 2386              	.L131:
 2387 0afc 0000A0E1 		.align	3
 2388              	.L130:
 2389 0b00 000000C0 		.word	-1073741824
 2390 0b04 CCCCEC3F 		.word	1072483532
 2391 0b08 00000000 		.word	0
 2392 0b0c 00E06F40 		.word	1081073664
 2393 0b10 00007F43 		.word	1132396544
 2394 0b14 FFFFFFFF 		.word	gamma_table-1
 2395 0b18 00000000 		.word	g_armwave_state
 2396 0b1c F609F406 		.word	116656630
 2397 0b20 00000000 		.word	.LC0
 2398 0b24 08000000 		.word	.LC1
 2399              		.cfi_endproc
 2400              	.LFE69:
 2402              		.align	2
 2403              		.global	armwave_test_fill_outbuf
 2404              		.syntax unified
 2405              		.arm
 2406              		.fpu vfp
 2408              	armwave_test_fill_outbuf:
 2409              	.LFB70:
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Render image to the local allocated buffer.
 445:armwave.c     ****  */
 446:armwave.c     **** void armwave_test_fill_outbuf()
 447:armwave.c     **** {
 2410              		.loc 1 447 1 is_stmt 1 view -0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 448:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2415              		.loc 1 448 5 view .LVU627
 2416 0b28 04309FE5 		ldr	r3, .L133	@ tmp111,
 2417 0b2c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2418 0b30 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2419              	.LVL143:
 2420              	.L134:
 2421              		.align	2
 2422              	.L133:
 2423 0b34 00000000 		.word	g_armwave_state
 2424              		.cfi_endproc
 2425              	.LFE70:
 2427              		.align	2
 2428              		.global	armwave_test_dump_buffer_to_ppm
 2429              		.syntax unified
 2430              		.arm
 2431              		.fpu vfp
 2433              	armwave_test_dump_buffer_to_ppm:
 2434              	.LVL144:
 2435              	.LFB71:
 449:armwave.c     **** }
 450:armwave.c     **** 
 451:armwave.c     **** /*
 452:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 453:armwave.c     ****  */
 454:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 455:armwave.c     **** {
 2436              		.loc 1 455 1 view -0
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 0
 2439              		@ frame_needed = 0, uses_anonymous_args = 0
 2440              		@ link register save eliminated.
 456:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2441              		.loc 1 456 5 view .LVU629
 2442 0b38 08309FE5 		ldr	r3, .L136	@ tmp112,
 2443 0b3c 0010A0E1 		mov	r1, r0	@, fn
 2444 0b40 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2445              	.LVL145:
 2446              		.loc 1 456 5 is_stmt 0 view .LVU630
 2447 0b44 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2448              	.LVL146:
 2449              	.L137:
 2450              		.loc 1 456 5 view .LVU631
 2451              		.align	2
 2452              	.L136:
 2453 0b48 00000000 		.word	g_armwave_state
 2454              		.cfi_endproc
 2455              	.LFE71:
 2457              		.align	2
 2458              		.global	armwave_test_fill_gdkbuf
 2459              		.syntax unified
 2460              		.arm
 2461              		.fpu vfp
 2463              	armwave_test_fill_gdkbuf:
 2464              	.LVL147:
 2465              	.LFB72:
 457:armwave.c     **** }
 458:armwave.c     **** 
 459:armwave.c     **** /*
 460:armwave.c     ****  * Render GDK buffer with test funtionry.
 461:armwave.c     ****  */
 462:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 463:armwave.c     **** {
 2466              		.loc 1 463 1 is_stmt 1 view -0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              		@ link register save eliminated.
 464:armwave.c     ****     //PyObject *mv;
 465:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 466:armwave.c     **** 
 467:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 468:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2471              		.loc 1 468 5 view .LVU633
 469:armwave.c     ****     
 470:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 471:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2472              		.loc 1 471 5 view .LVU634
 2473              	@ armwave.c:468:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 468:armwave.c     ****     
 2474              		.loc 1 468 11 is_stmt 0 view .LVU635
 2475 0b4c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2476              	@ armwave.c:471:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2477              		.loc 1 471 5 view .LVU636
 2478 0b50 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2479              	.LVL148:
 2480              		.loc 1 471 5 view .LVU637
 2481 0b54 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2482              	.LVL149:
 2483              		.loc 1 471 5 view .LVU638
 2484              		.cfi_endproc
 2485              	.LFE72:
 2487              		.align	2
 2488              		.global	armwave_test_buffer_alloc
 2489              		.syntax unified
 2490              		.arm
 2491              		.fpu vfp
 2493              	armwave_test_buffer_alloc:
 2494              	.LVL150:
 2495              	.LFB73:
 472:armwave.c     **** }
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 476:armwave.c     ****  */
 477:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 478:armwave.c     **** {
 2496              		.loc 1 478 1 is_stmt 1 view -0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 0
 2499              		@ frame_needed = 0, uses_anonymous_args = 0
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2500              		.loc 1 479 5 view .LVU640
 2501              	@ armwave.c:478: {
 478:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2502              		.loc 1 478 1 is_stmt 0 view .LVU641
 2503 0b58 70402DE9 		push	{r4, r5, r6, lr}	@
 2504              		.cfi_def_cfa_offset 16
 2505              		.cfi_offset 4, -16
 2506              		.cfi_offset 5, -12
 2507              		.cfi_offset 6, -8
 2508              		.cfi_offset 14, -4
 2509              	@ armwave.c:478: {
 478:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2510              		.loc 1 478 1 view .LVU642
 2511 0b5c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2512              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 2513              		.loc 1 479 23 view .LVU643
 2514 0b60 44409FE5 		ldr	r4, .L146	@ tmp128,
 2515 0b64 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2516              	.LVL151:
 2517              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 2518              		.loc 1 479 7 view .LVU644
 2519 0b68 000050E3 		cmp	r0, #0	@ _1,
 2520 0b6c 0000000A 		beq	.L140		@,
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2521              		.loc 1 480 9 is_stmt 1 view .LVU645
 2522 0b70 FEFFFFEB 		bl	free		@
 2523              	.LVL152:
 2524              	.L140:
 481:armwave.c     ****     }
 482:armwave.c     **** 
 483:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 484:armwave.c     **** 
 485:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2525              		.loc 1 485 5 view .LVU646
 2526              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2527              		.loc 1 485 75 is_stmt 0 view .LVU647
 2528 0b74 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2529 0b78 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2530              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2531              		.loc 1 485 40 view .LVU648
 2532 0b7c 0610A0E1 		mov	r1, r6	@, nsets
 2533              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2534              		.loc 1 485 75 view .LVU649
 2535 0b80 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2536              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2537              		.loc 1 485 40 view .LVU650
 2538 0b84 0500A0E1 		mov	r0, r5	@, _4
 2539 0b88 FEFFFFEB 		bl	calloc		@
 2540              	.LVL153:
 2541              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 486:armwave.c     **** 
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2542              		.loc 1 487 7 view .LVU651
 2543 0b8c 000050E3 		cmp	r0, #0	@ tmp124,
 2544              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 2545              		.loc 1 485 38 view .LVU652
 2546 0b90 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2547              		.loc 1 487 5 is_stmt 1 view .LVU653
 2548              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 2549              		.loc 1 487 7 is_stmt 0 view .LVU654
 2550 0b94 7080BD18 		popne	{r4, r5, r6, pc}	@
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2551              		.loc 1 488 9 is_stmt 1 view .LVU655
 2552 0b98 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2553 0b9c 0620A0E1 		mov	r2, r6	@, nsets
 2554 0ba0 08009FE5 		ldr	r0, .L146+4	@,
 2555              	@ armwave.c:492: }
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 490:armwave.c     ****         return;
 491:armwave.c     ****     }
 492:armwave.c     **** }
 2556              		.loc 1 492 1 is_stmt 0 view .LVU656
 2557 0ba4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2558              		.cfi_restore 14
 2559              		.cfi_restore 6
 2560              		.cfi_restore 5
 2561              		.cfi_restore 4
 2562              		.cfi_def_cfa_offset 0
 2563              	.LVL154:
 2564              	@ armwave.c:488:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2565              		.loc 1 488 9 view .LVU657
 2566 0ba8 FEFFFFEA 		b	printf		@
 2567              	.LVL155:
 2568              	.L147:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2569              		.loc 1 488 9 view .LVU658
 2570              		.align	2
 2571              	.L146:
 2572 0bac 00000000 		.word	g_armwave_state
 2573 0bb0 E8010000 		.word	.LC18
 2574              		.cfi_endproc
 2575              	.LFE73:
 2577              		.align	2
 2578              		.global	armwave_fill_pixbuf_into_pybuffer
 2579              		.syntax unified
 2580              		.arm
 2581              		.fpu vfp
 2583              	armwave_fill_pixbuf_into_pybuffer:
 2584              	.LVL156:
 2585              	.LFB74:
 493:armwave.c     **** 
 494:armwave.c     **** /*
 495:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 496:armwave.c     ****  */
 497:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 498:armwave.c     **** {
 2586              		.loc 1 498 1 is_stmt 1 view -0
 2587              		.cfi_startproc
 2588              		@ args = 0, pretend = 0, frame = 48
 2589              		@ frame_needed = 0, uses_anonymous_args = 0
 499:armwave.c     ****     Py_buffer buffer;
 2590              		.loc 1 499 5 view .LVU660
 500:armwave.c     ****     int ret;
 2591              		.loc 1 500 5 view .LVU661
 501:armwave.c     **** 
 502:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 503:armwave.c     **** 
 504:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2592              		.loc 1 504 5 view .LVU662
 2593              	@ armwave.c:498: {
 498:armwave.c     ****     Py_buffer buffer;
 2594              		.loc 1 498 1 is_stmt 0 view .LVU663
 2595 0bb4 04E02DE5 		str	lr, [sp, #-4]!	@,
 2596              		.cfi_def_cfa_offset 4
 2597              		.cfi_offset 14, -4
 2598 0bb8 34D04DE2 		sub	sp, sp, #52	@,,
 2599              		.cfi_def_cfa_offset 56
 2600              	@ armwave.c:504:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2601              		.loc 1 504 11 view .LVU664
 2602 0bbc 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2603 0bc0 0120A0E3 		mov	r2, #1	@,
 2604 0bc4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2605              	.LVL157:
 505:armwave.c     **** 
 506:armwave.c     ****     if(ret != 0) {
 2606              		.loc 1 506 5 is_stmt 1 view .LVU665
 2607              	@ armwave.c:506:     if(ret != 0) {
 2608              		.loc 1 506 7 is_stmt 0 view .LVU666
 2609 0bc8 000050E3 		cmp	r0, #0	@,
 2610 0bcc 0A00001A 		bne	.L152		@,
 507:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 508:armwave.c     ****         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 510:armwave.c     **** 
 511:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 512:armwave.c     **** 
 513:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2611              		.loc 1 513 5 is_stmt 1 view .LVU667
 2612 0bd0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2613              	.LVL158:
 2614              		.loc 1 513 5 is_stmt 0 view .LVU668
 2615 0bd4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2616              	.LVL159:
 514:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 515:armwave.c     **** 
 516:armwave.c     ****     PyBuffer_Release(&buffer);
 2617              		.loc 1 516 5 is_stmt 1 view .LVU669
 2618 0bd8 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2619 0bdc FEFFFFEB 		bl	PyBuffer_Release		@
 2620              	.LVL160:
 517:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 518:armwave.c     **** 
 519:armwave.c     ****     Py_RETURN_TRUE;
 2621              		.loc 1 519 5 view .LVU670
 2622              	.LBB31:
 2623              	.LBI31:
 2624              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2625              		.loc 2 456 20 view .LVU671
 2626              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2627              		.loc 2 458 21 view .LVU672
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2628              		.loc 2 459 5 view .LVU673
 2629              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2630              		.loc 2 459 18 is_stmt 0 view .LVU674
 2631 0be0 38309FE5 		ldr	r3, .L153	@ tmp126,
 2632              	.LBE32:
 2633              	.LBE31:
 2634              	@ armwave.c:519:     Py_RETURN_TRUE;
 2635              		.loc 1 519 5 view .LVU675
 2636 0be4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2637              	.LBB34:
 2638              	.LBB33:
 2639              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2640              		.loc 2 459 18 view .LVU676
 2641 0be8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2642 0bec 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2643 0bf0 002083E5 		str	r2, [r3]	@ tmp128,
 2644              	.LBE33:
 2645              	.LBE34:
 2646              	@ armwave.c:520: }
 520:armwave.c     **** }
 2647              		.loc 1 520 1 view .LVU677
 2648 0bf4 34D08DE2 		add	sp, sp, #52	@,,
 2649              		.cfi_remember_state
 2650              		.cfi_def_cfa_offset 4
 2651              		@ sp needed	@
 2652 0bf8 04F09DE4 		ldr	pc, [sp], #4	@
 2653              	.LVL161:
 2654              	.L152:
 2655              		.cfi_restore_state
 507:armwave.c     ****         Py_RETURN_FALSE;
 2656              		.loc 1 507 9 is_stmt 1 view .LVU678
 2657 0bfc 20009FE5 		ldr	r0, .L153+4	@,
 2658              	.LVL162:
 507:armwave.c     ****         Py_RETURN_FALSE;
 2659              		.loc 1 507 9 is_stmt 0 view .LVU679
 2660 0c00 FEFFFFEB 		bl	puts		@
 2661              	.LVL163:
 508:armwave.c     ****     }
 2662              		.loc 1 508 9 is_stmt 1 view .LVU680
 2663              	.LBB35:
 2664              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2665              		.loc 2 456 20 view .LVU681
 2666              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2667              		.loc 2 458 21 view .LVU682
 2668              		.loc 2 459 5 view .LVU683
 2669              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2670              		.loc 2 459 18 is_stmt 0 view .LVU684
 2671 0c04 1C309FE5 		ldr	r3, .L153+8	@ tmp120,
 2672              	.LBE36:
 2673              	.LBE35:
 2674              	@ armwave.c:508:         Py_RETURN_FALSE;
 508:armwave.c     ****     }
 2675              		.loc 1 508 9 view .LVU685
 2676 0c08 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2677              	.LBB38:
 2678              	.LBB37:
 2679              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2680              		.loc 2 459 18 view .LVU686
 2681 0c0c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2682 0c10 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2683 0c14 002083E5 		str	r2, [r3]	@ tmp122,
 2684              	.LBE37:
 2685              	.LBE38:
 2686              	@ armwave.c:520: }
 2687              		.loc 1 520 1 view .LVU687
 2688 0c18 34D08DE2 		add	sp, sp, #52	@,,
 2689              		.cfi_def_cfa_offset 4
 2690              		@ sp needed	@
 2691 0c1c 04F09DE4 		ldr	pc, [sp], #4	@
 2692              	.L154:
 2693              		.align	2
 2694              	.L153:
 2695 0c20 00000000 		.word	_Py_TrueStruct
 2696 0c24 3C020000 		.word	.LC19
 2697 0c28 00000000 		.word	_Py_FalseStruct
 2698              		.cfi_endproc
 2699              	.LFE74:
 2701              		.align	2
 2702              		.global	armwave_test_create_am_sine
 2703              		.syntax unified
 2704              		.arm
 2705              		.fpu vfp
 2707              	armwave_test_create_am_sine:
 2708              	.LVL164:
 2709              	.LFB75:
 521:armwave.c     **** 
 522:armwave.c     **** /*
 523:armwave.c     ****  * Make a test AM waveform for render tests.
 524:armwave.c     ****  *
 525:armwave.c     ****  * @param   mod                     modulation depth
 526:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 527:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 528:armwave.c     ****  */
 529:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 530:armwave.c     **** {
 2710              		.loc 1 530 1 is_stmt 1 view -0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 8
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2714              		.loc 1 531 5 view .LVU689
 532:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2715              		.loc 1 532 5 view .LVU690
 2716              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 2717              		.loc 1 530 1 is_stmt 0 view .LVU691
 2718 0c2c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2719              		.cfi_def_cfa_offset 32
 2720              		.cfi_offset 4, -32
 2721              		.cfi_offset 5, -28
 2722              		.cfi_offset 6, -24
 2723              		.cfi_offset 7, -20
 2724              		.cfi_offset 8, -16
 2725              		.cfi_offset 9, -12
 2726              		.cfi_offset 10, -8
 2727              		.cfi_offset 14, -4
 2728              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2729              		.loc 1 532 38 view .LVU692
 2730 0c30 7A7A9FED 		vldr.32	s14, .L186	@ tmp180,
 2731              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2732              		.loc 1 532 55 view .LVU693
 2733 0c34 00529FE5 		ldr	r5, .L186+28	@ tmp250,
 2734              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 2735              		.loc 1 530 1 view .LVU694
 2736 0c38 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2737              		.cfi_def_cfa_offset 80
 2738              		.cfi_offset 80, -80
 2739              		.cfi_offset 81, -76
 2740              		.cfi_offset 82, -72
 2741              		.cfi_offset 83, -68
 2742              		.cfi_offset 84, -64
 2743              		.cfi_offset 85, -60
 2744              		.cfi_offset 86, -56
 2745              		.cfi_offset 87, -52
 2746              		.cfi_offset 88, -48
 2747              		.cfi_offset 89, -44
 2748              		.cfi_offset 90, -40
 2749              		.cfi_offset 91, -36
 2750 0c3c 0090A0E1 		mov	r9, r0	@ sets, sets
 2751              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2752              		.loc 1 532 38 view .LVU695
 2753 0c40 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2754              	@ armwave.c:536:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 533:armwave.c     ****     int s, set_offset = 0;
 534:armwave.c     ****     int w, x;
 535:armwave.c     **** 
 536:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2755              		.loc 1 536 70 view .LVU696
 2756 0c44 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2757 0c48 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2758              	.LBB41:
 2759              	.LBB42:
 2760              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2761              		.loc 1 479 23 view .LVU697
 2762 0c4c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2763              	.LVL165:
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2764              		.loc 1 479 23 view .LVU698
 2765              	.LBE42:
 2766              	.LBE41:
 2767              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 532:armwave.c     ****     int s, set_offset = 0;
 2768              		.loc 1 532 38 view .LVU699
 2769 0c50 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2770              	@ armwave.c:536:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2771              		.loc 1 536 70 view .LVU700
 2772 0c54 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2773              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 2774              		.loc 1 530 1 view .LVU701
 2775 0c58 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2776              	.LBB46:
 2777              	.LBB43:
 2778              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2779              		.loc 1 479 7 view .LVU702
 2780 0c5c 000050E3 		cmp	r0, #0	@ _82,
 2781              	.LBE43:
 2782              	.LBE46:
 2783              	@ armwave.c:530: {
 530:armwave.c     ****     float v, noise, xnoise, mod_val;
 2784              		.loc 1 530 1 view .LVU703
 2785 0c60 08D04DE2 		sub	sp, sp, #8	@,,
 2786              		.cfi_def_cfa_offset 88
 2787              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_nsets = sets;
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2788              		.loc 1 537 44 view .LVU704
 2789 0c64 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2790              	@ armwave.c:536:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 536:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2791              		.loc 1 536 45 view .LVU705
 2792 0c68 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2793              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 532:armwave.c     ****     int s, set_offset = 0;
 2794              		.loc 1 532 38 view .LVU706
 2795 0c6c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2796              	@ armwave.c:532:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 532:armwave.c     ****     int s, set_offset = 0;
 2797              		.loc 1 532 11 view .LVU707
 2798 0c70 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2799              	.LVL166:
 533:armwave.c     ****     int w, x;
 2800              		.loc 1 533 5 is_stmt 1 view .LVU708
 534:armwave.c     **** 
 2801              		.loc 1 534 5 view .LVU709
 536:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2802              		.loc 1 536 5 view .LVU710
 2803              		.loc 1 537 5 view .LVU711
 538:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2804              		.loc 1 538 5 view .LVU712
 2805              	.LBB47:
 2806              	.LBI41:
 477:armwave.c     **** {
 2807              		.loc 1 477 6 view .LVU713
 2808              	.LBB44:
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2809              		.loc 1 479 5 view .LVU714
 2810              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer != NULL) {
 479:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2811              		.loc 1 479 7 is_stmt 0 view .LVU715
 2812 0c74 0000000A 		beq	.L156		@,
 480:armwave.c     ****     }
 2813              		.loc 1 480 9 is_stmt 1 view .LVU716
 2814 0c78 FEFFFFEB 		bl	free		@
 2815              	.LVL167:
 2816              	.L156:
 485:armwave.c     **** 
 2817              		.loc 1 485 5 view .LVU717
 2818              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 2819              		.loc 1 485 75 is_stmt 0 view .LVU718
 2820 0c7c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2821 0c80 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2822              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 2823              		.loc 1 485 40 view .LVU719
 2824 0c84 0910A0E1 		mov	r1, r9	@, sets
 2825              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 2826              		.loc 1 485 75 view .LVU720
 2827 0c88 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2828              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 2829              		.loc 1 485 40 view .LVU721
 2830 0c8c 0400A0E1 		mov	r0, r4	@, _85
 2831 0c90 FEFFFFEB 		bl	calloc		@
 2832              	.LVL168:
 2833              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2834              		.loc 1 487 7 view .LVU722
 2835 0c94 000050E3 		cmp	r0, #0	@ tmp191,
 2836              	@ armwave.c:485:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 485:armwave.c     **** 
 2837              		.loc 1 485 38 view .LVU723
 2838 0c98 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2839              		.loc 1 487 5 is_stmt 1 view .LVU724
 2840              	@ armwave.c:487:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2841              		.loc 1 487 7 is_stmt 0 view .LVU725
 2842 0c9c 5A00000A 		beq	.L185		@,
 2843              	.L157:
 2844              	.LVL169:
 487:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2845              		.loc 1 487 7 view .LVU726
 2846              	.LBE44:
 2847              	.LBE47:
 2848              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 539:armwave.c     **** 
 540:armwave.c     ****     for(s = 0; s < sets; s++) {
 2849              		.loc 1 540 5 discriminator 1 view .LVU727
 2850 0ca0 000059E3 		cmp	r9, #0	@ sets,
 2851 0ca4 550000DA 		ble	.L155		@,
 2852              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 542:armwave.c     ****     
 543:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 545:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 547:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     **** 
 553:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 555:armwave.c     **** 
 556:armwave.c     ****                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 559:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2853              		.loc 1 559 45 view .LVU728
 2854 0ca8 5C8A9FED 		vldr.32	s16, .L186	@ tmp258,
 2855              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 561:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 562:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2856              		.loc 1 562 104 view .LVU729
 2857 0cac 5CCA9FED 		vldr.32	s24, .L186+4	@ tmp259,
 2858              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 2859              		.loc 1 540 5 view .LVU730
 2860 0cb0 0070A0E3 		mov	r7, #0	@ set_offset,
 2861              	@ armwave.c:541:         printf("Calculating test set %d\n", s);
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2862              		.loc 1 541 9 view .LVU731
 2863 0cb4 84A19FE5 		ldr	r10, .L186+32	@ tmp257,
 2864              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 2865              		.loc 1 540 5 view .LVU732
 2866 0cb8 0780A0E1 		mov	r8, r7	@ s, set_offset
 2867              	.LVL170:
 2868              	.L158:
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2869              		.loc 1 541 9 is_stmt 1 view .LVU733
 2870 0cbc 0810A0E1 		mov	r1, r8	@, s
 2871 0cc0 0A00A0E1 		mov	r0, r10	@, tmp257
 2872 0cc4 FEFFFFEB 		bl	printf		@
 2873              	.LVL171:
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2874              		.loc 1 543 9 view .LVU734
 2875              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2876              		.loc 1 543 39 is_stmt 0 view .LVU735
 2877 0cc8 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2878              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2879              		.loc 1 543 9 view .LVU736
 2880 0ccc 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2881 0cd0 450000DA 		ble	.L159		@,
 2882              	@ armwave.c:545:             mod_val = 0.5f + (_1_waves_mod * w);
 545:armwave.c     **** 
 2883              		.loc 1 545 21 view .LVU737
 2884 0cd4 53CADFED 		vldr.32	s25, .L186+8	@ tmp200,
 2885              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2886              		.loc 1 559 33 view .LVU738
 2887 0cd8 53BA9FED 		vldr.32	s22, .L186+12	@ tmp253,
 2888              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 2889              		.loc 1 557 24 view .LVU739
 2890 0cdc 53AADFED 		vldr.32	s21, .L186+16	@ tmp254,
 2891 0ce0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2892              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2893              		.loc 1 543 15 view .LVU740
 2894 0ce4 0060A0E3 		mov	r6, #0	@ w,
 2895              	.LVL172:
 2896              	.L166:
 545:armwave.c     **** 
 2897              		.loc 1 545 13 is_stmt 1 view .LVU741
 2898              	@ armwave.c:545:             mod_val = 0.5f + (_1_waves_mod * w);
 545:armwave.c     **** 
 2899              		.loc 1 545 21 is_stmt 0 view .LVU742
 2900 0ce8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2901 0cec 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2902              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2903              		.loc 1 547 13 view .LVU743
 2904 0cf0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2905              	@ armwave.c:545:             mod_val = 0.5f + (_1_waves_mod * w);
 545:armwave.c     **** 
 2906              		.loc 1 545 21 view .LVU744
 2907 0cf4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2908 0cf8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2909              	.LVL173:
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2910              		.loc 1 547 13 is_stmt 1 view .LVU745
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2911              		.loc 1 547 13 is_stmt 0 view .LVU746
 2912 0cfc 370000DA 		ble	.L160		@,
 2913 0d00 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2914              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2915              		.loc 1 562 113 view .LVU747
 2916 0d04 4AAA9FED 		vldr.32	s20, .L186+20	@ tmp229,
 2917 0d08 4A8ADFED 		vldr.32	s17, .L186+24	@ tmp230,
 2918              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2919              		.loc 1 547 19 view .LVU748
 2920 0d0c 0040A0E3 		mov	r4, #0	@ x,
 2921              	.LVL174:
 2922              	.L165:
 548:armwave.c     ****                 noise *= noise;
 2923              		.loc 1 548 17 is_stmt 1 view .LVU749
 2924              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 548 28 is_stmt 0 view .LVU750
 2926 0d10 FEFFFFEB 		bl	rand		@
 2927              	.LVL175:
 2928              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 2929              		.loc 1 548 35 view .LVU751
 2930 0d14 7000FFE6 		uxth	r0, r0	@ tmp201,
 2931              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 2932              		.loc 1 548 45 view .LVU752
 2933 0d18 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2934 0d1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2935              	@ armwave.c:548:                 noise  = ((rand() & 0xffff) * noise_fraction);
 548:armwave.c     ****                 noise *= noise;
 2936              		.loc 1 548 24 view .LVU753
 2937 0d20 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2938              	.LVL176:
 549:armwave.c     ****                 noise *= noise;
 2939              		.loc 1 549 17 is_stmt 1 view .LVU754
 2940              	@ armwave.c:549:                 noise *= noise;
 549:armwave.c     ****                 noise *= noise;
 2941              		.loc 1 549 23 is_stmt 0 view .LVU755
 2942 0d24 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2943              	.LVL177:
 550:armwave.c     ****                 noise *= noise;
 2944              		.loc 1 550 17 is_stmt 1 view .LVU756
 2945              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 2946              		.loc 1 550 23 is_stmt 0 view .LVU757
 2947 0d28 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2948              	.LVL178:
 551:armwave.c     **** 
 2949              		.loc 1 551 17 is_stmt 1 view .LVU758
 2950              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     **** 
 2951              		.loc 1 551 23 is_stmt 0 view .LVU759
 2952 0d2c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2953              	.LVL179:
 553:armwave.c     ****                     noise = -noise;
 2954              		.loc 1 553 17 is_stmt 1 view .LVU760
 2955              	@ armwave.c:553:                 if((rand() & 0xffff) > 0x7fff)
 553:armwave.c     ****                     noise = -noise;
 2956              		.loc 1 553 21 is_stmt 0 view .LVU761
 2957 0d30 FEFFFFEB 		bl	rand		@
 2958              	.LVL180:
 554:armwave.c     **** 
 2959              		.loc 1 554 21 is_stmt 1 view .LVU762
 2960              	@ armwave.c:553:                 if((rand() & 0xffff) > 0x7fff)
 553:armwave.c     ****                     noise = -noise;
 2961              		.loc 1 553 19 is_stmt 0 view .LVU763
 2962 0d34 020910E3 		tst	r0, #32768	@,
 2963              	@ armwave.c:554:                     noise = -noise;
 554:armwave.c     **** 
 2964              		.loc 1 554 27 view .LVU764
 2965 0d38 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2966              	.LVL181:
 556:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2967              		.loc 1 556 17 is_stmt 1 view .LVU765
 557:armwave.c     **** 
 2968              		.loc 1 557 17 view .LVU766
 2969              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 2970              		.loc 1 557 27 is_stmt 0 view .LVU767
 2971 0d3c FEFFFFEB 		bl	rand		@
 2972              	.LVL182:
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2973              		.loc 1 559 17 is_stmt 1 view .LVU768
 2974              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2975              		.loc 1 559 45 is_stmt 0 view .LVU769
 2976 0d40 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2977              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2978              		.loc 1 559 33 view .LVU770
 2979 0d44 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2980              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2981              		.loc 1 559 45 view .LVU771
 2982 0d48 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2983              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2984              		.loc 1 559 33 view .LVU772
 2985 0d4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2986              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2987              		.loc 1 559 45 view .LVU773
 2988 0d50 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2989              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2990              		.loc 1 559 33 view .LVU774
 2991 0d54 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2992              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 2993              		.loc 1 557 34 view .LVU775
 2994 0d58 7000FFE6 		uxth	r0, r0	@ tmp214,
 2995              	.LVL183:
 2996              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 2997              		.loc 1 557 44 view .LVU776
 2998 0d5c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2999 0d60 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3000              	@ armwave.c:557:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 557:armwave.c     **** 
 3001              		.loc 1 557 24 view .LVU777
 3002 0d64 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3003              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3004              		.loc 1 559 77 view .LVU778
 3005 0d68 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3006              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3007              		.loc 1 559 22 view .LVU779
 3008 0d6c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3009 0d70 FEFFFFEB 		bl	sin		@
 3010              	.LVL184:
 3011              		.loc 1 562 17 is_stmt 1 view .LVU780
 3012              	@ armwave.c:556:                 noise += 1.0f;
 556:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3013              		.loc 1 556 23 is_stmt 0 view .LVU781
 3014 0d74 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3015              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3016              		.loc 1 562 104 view .LVU782
 3017 0d78 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3018              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3019              		.loc 1 559 98 view .LVU783
 3020 0d7c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3021              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3022              		.loc 1 559 87 view .LVU784
 3023 0d80 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3024              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3025              		.loc 1 559 98 view .LVU785
 3026 0d84 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3027              	@ armwave.c:559:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 559:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3028              		.loc 1 559 19 view .LVU786
 3029 0d88 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3030              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3031              		.loc 1 562 113 view .LVU787
 3032 0d8c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3033 0d90 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3034 0d94 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3035 0d98 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3036 0d9c 050000DA 		ble	.L162		@,
 3037              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3038              		.loc 1 562 104 discriminator 1 view .LVU788
 3039 0da0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3040 0da4 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3041 0da8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3042 0dac E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3043 0db0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3044 0db4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3045              	.L162:
 3046              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3047              		.loc 1 562 57 discriminator 12 view .LVU789
 3048 0db8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3049              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3050              		.loc 1 562 102 discriminator 12 view .LVU790
 3051 0dbc 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3052 0dc0 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3053 0dc4 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3054              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3055              		.loc 1 547 58 discriminator 12 view .LVU791
 3056 0dc8 014084E2 		add	r4, r4, #1	@ x, x,
 3057              	.LVL185:
 3058              	@ armwave.c:562:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3059              		.loc 1 562 102 discriminator 12 view .LVU792
 3060 0dcc 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3061              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3062              		.loc 1 547 43 discriminator 12 view .LVU793
 3063 0dd0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3064              	@ armwave.c:547:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 547:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3065              		.loc 1 547 13 discriminator 12 view .LVU794
 3066 0dd4 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3067 0dd8 CCFFFFCA 		bgt	.L165		@,
 3068 0ddc 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3069              	.LVL186:
 3070              	.L160:
 3071              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3072              		.loc 1 543 48 discriminator 2 view .LVU795
 3073 0de0 016086E2 		add	r6, r6, #1	@ w, w,
 3074              	.LVL187:
 3075              	@ armwave.c:543:         for(w = 0; w < g_armwave_state.waves; w++) {
 543:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3076              		.loc 1 543 9 discriminator 2 view .LVU796
 3077 0de4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3078 0de8 BEFFFFBA 		blt	.L166		@,
 3079              	.LVL188:
 3080              	.L159:
 563:armwave.c     ****             }
 564:armwave.c     ****         }
 565:armwave.c     **** 
 566:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3081              		.loc 1 566 9 is_stmt 1 discriminator 2 view .LVU797
 3082              	@ armwave.c:566:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3083              		.loc 1 566 46 is_stmt 0 discriminator 2 view .LVU798
 3084 0dec 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3085              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3086              		.loc 1 540 27 discriminator 2 view .LVU799
 3087 0df0 018088E2 		add	r8, r8, #1	@ s, s,
 3088              	.LVL189:
 3089              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3090              		.loc 1 540 5 discriminator 2 view .LVU800
 3091 0df4 080059E1 		cmp	r9, r8	@ sets, s
 3092              	@ armwave.c:566:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3093              		.loc 1 566 20 discriminator 2 view .LVU801
 3094 0df8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3095              	.LVL190:
 3096              	@ armwave.c:540:     for(s = 0; s < sets; s++) {
 540:armwave.c     ****         printf("Calculating test set %d\n", s);
 3097              		.loc 1 540 5 discriminator 2 view .LVU802
 3098 0dfc AEFFFF1A 		bne	.L158		@,
 3099              	.LVL191:
 3100              	.L155:
 3101              	@ armwave.c:568: }
 567:armwave.c     ****     }
 568:armwave.c     **** }
 3102              		.loc 1 568 1 view .LVU803
 3103 0e00 08D08DE2 		add	sp, sp, #8	@,,
 3104              		.cfi_remember_state
 3105              		.cfi_def_cfa_offset 80
 3106              		@ sp needed	@
 3107 0e04 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3108              		.cfi_restore 90
 3109              		.cfi_restore 91
 3110              		.cfi_restore 88
 3111              		.cfi_restore 89
 3112              		.cfi_restore 86
 3113              		.cfi_restore 87
 3114              		.cfi_restore 84
 3115              		.cfi_restore 85
 3116              		.cfi_restore 82
 3117              		.cfi_restore 83
 3118              		.cfi_restore 80
 3119              		.cfi_restore 81
 3120              		.cfi_def_cfa_offset 32
 3121              	.LVL192:
 3122              		.loc 1 568 1 view .LVU804
 3123 0e08 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3124              	.LVL193:
 3125              	.L185:
 3126              		.cfi_restore_state
 3127              	.LBB48:
 3128              	.LBB45:
 488:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3129              		.loc 1 488 9 is_stmt 1 view .LVU805
 3130 0e0c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3131 0e10 0920A0E1 		mov	r2, r9	@, sets
 3132 0e14 28009FE5 		ldr	r0, .L186+36	@,
 3133 0e18 FEFFFFEB 		bl	printf		@
 3134              	.LVL194:
 490:armwave.c     ****     }
 3135              		.loc 1 490 9 view .LVU806
 3136 0e1c 9FFFFFEA 		b	.L157		@
 3137              	.L187:
 3138              		.align	2
 3139              	.L186:
 3140 0e20 0000803F 		.word	1065353216
 3141 0e24 00007F43 		.word	1132396544
 3142 0e28 0000003F 		.word	1056964608
 3143 0e2c C3F5C840 		.word	1086911939
 3144 0e30 38FFC74A 		.word	1254620984
 3145 0e34 0000FE42 		.word	1123942400
 3146 0e38 00000043 		.word	1124073472
 3147 0e3c 00000000 		.word	g_armwave_state
 3148 0e40 90020000 		.word	.LC20
 3149 0e44 E8010000 		.word	.LC18
 3150              	.LBE45:
 3151              	.LBE48:
 3152              		.cfi_endproc
 3153              	.LFE75:
 3155              		.align	2
 3156              		.global	armwave_cleanup
 3157              		.syntax unified
 3158              		.arm
 3159              		.fpu vfp
 3161              	armwave_cleanup:
 3162              	.LFB76:
 569:armwave.c     **** 
 570:armwave.c     **** /*
 571:armwave.c     ****  * Make a test square waveform.
 572:armwave.c     ****  *
 573:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 574:armwave.c     ****  */
 575:armwave.c     **** #if 0
 576:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 577:armwave.c     **** {
 578:armwave.c     ****     uint8_t v;
 579:armwave.c     ****     float noise, xnoise;
 580:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 581:armwave.c     ****     int w, x;
 582:armwave.c     **** 
 583:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 584:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 585:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 586:armwave.c     ****             noise *= noise;
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     **** 
 590:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 591:armwave.c     ****                 noise = -noise;
 592:armwave.c     **** 
 593:armwave.c     ****             //noise += 1.0f;
 594:armwave.c     **** 
 595:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 596:armwave.c     ****                 new_level = 0.2f;
 597:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 598:armwave.c     ****                 new_level = 0.8f;
 599:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 600:armwave.c     ****                 new_level = 0.2f;
 601:armwave.c     ****             } else {
 602:armwave.c     ****                 new_level = 0.8f;
 603:armwave.c     ****             }
 604:armwave.c     **** 
 605:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 606:armwave.c     **** 
 607:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 608:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 609:armwave.c     ****         }
 610:armwave.c     ****     }
 611:armwave.c     **** }
 612:armwave.c     **** #endif
 613:armwave.c     **** 
 614:armwave.c     **** /*
 615:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 616:armwave.c     ****  */
 617:armwave.c     **** void armwave_cleanup()
 618:armwave.c     **** {
 3163              		.loc 1 618 1 view -0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 0
 3166              		@ frame_needed = 0, uses_anonymous_args = 0
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3167              		.loc 1 619 5 view .LVU808
 3168              	@ armwave.c:618: {
 618:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3169              		.loc 1 618 1 is_stmt 0 view .LVU809
 3170 0e48 10402DE9 		push	{r4, lr}	@
 3171              		.cfi_def_cfa_offset 8
 3172              		.cfi_offset 4, -8
 3173              		.cfi_offset 14, -4
 3174              	@ armwave.c:619:     free(g_armwave_state.out_pixbuf);
 3175              		.loc 1 619 25 view .LVU810
 3176 0e4c 34409FE5 		ldr	r4, .L190	@ tmp114,
 3177              	@ armwave.c:619:     free(g_armwave_state.out_pixbuf);
 3178              		.loc 1 619 5 view .LVU811
 3179 0e50 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3180 0e54 FEFFFFEB 		bl	free		@
 3181              	.LVL195:
 620:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3182              		.loc 1 620 5 is_stmt 1 view .LVU812
 3183 0e58 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3184 0e5c FEFFFFEB 		bl	free		@
 3185              	.LVL196:
 621:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3186              		.loc 1 621 5 view .LVU813
 3187 0e60 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3188 0e64 FEFFFFEB 		bl	free		@
 3189              	.LVL197:
 622:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3190              		.loc 1 622 5 view .LVU814
 3191 0e68 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3192 0e6c FEFFFFEB 		bl	free		@
 3193              	.LVL198:
 623:armwave.c     **** 
 624:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3194              		.loc 1 624 5 view .LVU815
 3195              	@ armwave.c:624:     g_armwave_state.out_pixbuf = NULL;
 3196              		.loc 1 624 32 is_stmt 0 view .LVU816
 3197 0e70 0030A0E3 		mov	r3, #0	@ tmp123,
 3198 0e74 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 625:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3199              		.loc 1 625 5 is_stmt 1 view .LVU817
 3200              	@ armwave.c:625:     g_armwave_state.ch1_buffer = NULL;
 3201              		.loc 1 625 32 is_stmt 0 view .LVU818
 3202 0e78 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 626:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3203              		.loc 1 626 5 is_stmt 1 view .LVU819
 3204              	@ armwave.c:626:     g_armwave_state.xcoord_to_xpixel = NULL;
 3205              		.loc 1 626 38 is_stmt 0 view .LVU820
 3206 0e7c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 627:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3207              		.loc 1 627 5 is_stmt 1 view .LVU821
 3208              	@ armwave.c:627:     g_armwave_state.test_wave_buffer = NULL;
 3209              		.loc 1 627 38 is_stmt 0 view .LVU822
 3210 0e80 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3211              	@ armwave.c:628: }
 628:armwave.c     **** }
 3212              		.loc 1 628 1 view .LVU823
 3213 0e84 1080BDE8 		pop	{r4, pc}	@
 3214              	.L191:
 3215              		.align	2
 3216              	.L190:
 3217 0e88 00000000 		.word	g_armwave_state
 3218              		.cfi_endproc
 3219              	.LFE76:
 3221              		.comm	gamma_table,256,4
 3222              		.comm	g_armwave_state,136,4
 3223              		.section	.rodata
 3224              		.align	2
 3225              		.set	.LANCHOR0,. + 0
 3228              	__PRETTY_FUNCTION__.17096:
 3229 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3229      6176655F 
 3229      66696C6C 
 3229      5F706978 
 3229      6275665F 
 3230 001b 00       		.space	1
 3233              	__PRETTY_FUNCTION__.17126:
 3234 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3234      6176655F 
 3234      73657475 
 3234      705F7265 
 3234      6E646572 
 3235 0031 000000   		.space	3
 3238              	__PRETTY_FUNCTION__.17133:
 3239 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3239      6176655F 
 3239      7365745F 
 3239      77617665 
 3239      5F706F69 
 3240 004d 000000   		.space	3
 3243              	__PRETTY_FUNCTION__.17140:
 3244 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3244      6176655F 
 3244      7365745F 
 3244      77617665 
 3244      5F706F69 
 3245              		.section	.rodata.str1.4,"aMS",%progbits,1
 3246              		.align	2
 3247              	.LC0:
 3248 0000 76302E30 		.ascii	"v0.0.1\000"
 3248      2E3100
 3249 0007 00       		.space	1
 3250              	.LC1:
 3251 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3251      61766520 
 3251      76657273 
 3251      696F6E3A 
 3251      2025730A 
 3252 001d 000000   		.space	3
 3253              	.LC2:
 3254 0020 61726D77 		.ascii	"armwave.c\000"
 3254      6176652E 
 3254      6300
 3255 002a 0000     		.space	2
 3256              	.LC3:
 3257 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3257      62756666 
 3257      65722021 
 3257      3D204E55 
 3257      4C4C00
 3258 003f 00       		.space	1
 3259              	.LC4:
 3260 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3260      20653D25 
 3260      6420773D 
 3260      25642077 
 3260      733D2564 
 3261              	.LC5:
 3262 006c 73746172 		.ascii	"start_point < end_point\000"
 3262      745F706F 
 3262      696E7420 
 3262      3C20656E 
 3262      645F706F 
 3263              	.LC6:
 3264 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3264      7566665F 
 3264      73697A65 
 3264      3D25642C 
 3264      20636D70 
 3265 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3265      5F776964 
 3265      74683D25 
 3265      642C2077 
 3265      6176655F 
 3266 00e1 000000   		.space	3
 3267              	.LC7:
 3268 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3268      6D776176 
 3268      655F7374 
 3268      6174652E 
 3268      6368315F 
 3269 0107 00       		.space	1
 3270              	.LC8:
 3271 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3271      6D776176 
 3271      655F7374 
 3271      6174652E 
 3271      78636F6F 
 3272 0131 000000   		.space	3
 3273              	.LC9:
 3274 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3274      3A203078 
 3274      25303878 
 3274      20307825 
 3274      30387820 
 3275              	.LC10:
 3276 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3276      5F627566 
 3276      66657220 
 3276      213D204E 
 3276      554C4C00 
 3277              	.LC11:
 3278 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3278      6176655F 
 3278      7365745F 
 3278      77617665 
 3278      5F706F69 
 3279 019f 78636565 		.ascii	"xceeded\000"
 3279      64656400 
 3280 01a7 00       		.space	1
 3281              	.LC12:
 3282 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3282      5F627566 
 3282      6665725F 
 3282      70747220 
 3282      213D2030 
 3283 01bd 000000   		.space	3
 3284              	.LC13:
 3285 01c0 776200   		.ascii	"wb\000"
 3286 01c3 00       		.space	1
 3287              	.LC14:
 3288 01c4 50330A00 		.ascii	"P3\012\000"
 3289              	.LC15:
 3290 01c8 25642025 		.ascii	"%d %d\012\000"
 3290      640A00
 3291 01cf 00       		.space	1
 3292              	.LC16:
 3293 01d0 3235350A 		.ascii	"255\012\000"
 3293      00
 3294 01d5 000000   		.space	3
 3295              	.LC17:
 3296 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3296      25336420 
 3296      2533640A 
 3296      00
 3297 01e5 000000   		.space	3
 3298              	.LC18:
 3299 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3299      6176655F 
 3299      74657374 
 3299      5F627566 
 3299      6665725F 
 3300 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3300      20627566 
 3300      66657220 
 3300      28256420 
 3300      62797465 
 3301              	.LC19:
 3302 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3302      6176655F 
 3302      66696C6C 
 3302      5F706978 
 3302      6275665F 
 3303 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3303      20666169 
 3303      6C65642C 
 3303      20726574 
 3303      75726E69 
 3304 028e 0000     		.space	2
 3305              	.LC20:
 3306 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3306      756C6174 
 3306      696E6720 
 3306      74657374 
 3306      20736574 
 3307              		.text
 3308              	.Letext0:
 3309              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3310              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3311              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3312              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3313              		.file 7 "/usr/include/stdio.h"
 3314              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3315              		.file 9 "/usr/include/errno.h"
 3316              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3317              		.file 11 "/usr/include/unistd.h"
 3318              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3319              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3320              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3321              		.file 15 "/usr/include/math.h"
 3322              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3323              		.file 17 "/usr/include/time.h"
 3324              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3325              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3326              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3327              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3328              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3329              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3330              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3331              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3332              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3333              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3334              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3335              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3336              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3337              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3338              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3339              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3340              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3341              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3342              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3343              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3344              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3345              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3346              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3347              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3348              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3349              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3350              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3351              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3352              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3353              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3354              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3355              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3356              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3357              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3358              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3359              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3360              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3361              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3362              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3363              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3364              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3365              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3366              		.file 60 "/usr/local/include/python3.8/context.h"
 3367              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3368              		.file 62 "/usr/local/include/python3.8/code.h"
 3369              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3370              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3371              		.file 65 "/usr/local/include/python3.8/import.h"
 3372              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3373              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3374              		.file 68 "/usr/include/malloc.h"
 3375              		.file 69 "armwave.h"
 3376              		.file 70 "/usr/include/stdlib.h"
 3377              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3378              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3379              		.file 73 "<built-in>"
 3380              		.file 74 "/usr/include/assert.h"
