   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 82 is_stmt 0 view .LVU31
 237 009c 08329FE5 		ldr	r3, .L25	@ tmp202,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 259 00b0 40E093E5 		ldr	lr, [r3, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp206, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 384093E5 		ldr	r4, [r3, #56]	@ _77, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 23 view .LVU37
 269 00bc 04C093E5 		ldr	ip, [r3, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 270 00c0 8E90A0E1 		lsl	r9, lr, #1	@ _69, g_armwave_state.bitdepth_height,
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU38
 273 00c4 2118A0E1 		lsr	r1, r1, #16	@ tmp207, tmp206,
 274              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 275              		.loc 1 79 5 view .LVU39
 276 00c8 000054E3 		cmp	r4, #0	@ _77,
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU40
 279 00cc 20408DE5 		str	r4, [sp, #32]	@ _77, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 23 view .LVU41
 282 00d0 99C12AE0 		mla	r10, r9, r1, ip	@ write_buffer_base, _69, tmp207, g_armwave_state.ch1_buffer
 283              	.LVL8:
 284              		.loc 1 79 5 is_stmt 1 view .LVU42
 285              		.loc 1 79 5 is_stmt 0 view .LVU43
 286 00d4 6E0000DA 		ble	.L12		@,
 287              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 288              		.loc 1 80 36 view .LVU44
 289 00d8 141093E5 		ldr	r1, [r3, #20]	@ _9, g_armwave_state.wave_buffer
 290 00dc 343093E5 		ldr	r3, [r3, #52]	@ _227, g_armwave_state.wave_stride
 291 00e0 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 292 00e4 24308DE5 		str	r3, [sp, #36]	@ _227, %sfp
 293 00e8 8230A0E1 		lsl	r3, r2, #1	@ tmp215, _2,
 294 00ec 2C308DE5 		str	r3, [sp, #44]	@ tmp215, %sfp
 295 00f0 023083E0 		add	r3, r3, r2	@ ivtmp.43, tmp215, _2
 296 00f4 001081E0 		add	r1, r1, r0	@ tmp213, _9, slice_y
 297 00f8 28308DE5 		str	r3, [sp, #40]	@ ivtmp.43, %sfp
 298              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 299              		.loc 1 79 11 view .LVU45
 300 00fc 0980A0E1 		mov	r8, r9	@ _69, _69
 301 0100 0231A0E1 		lsl	r3, r2, #2	@ _208, _2,
 302 0104 000061E2 		rsb	r0, r1, #0	@ ivtmp.49, tmp213
 303              	.LVL9:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 304              		.loc 1 79 11 view .LVU46
 305 0108 18108DE5 		str	r1, [sp, #24]	@ tmp213, %sfp
 306 010c 00308DE5 		str	r3, [sp]	@ _208, %sfp
 307 0110 8C10A0E1 		lsl	r1, ip, #1	@ tmp220, tmp219,
 308 0114 0030A0E3 		mov	r3, #0	@ w,
 309 0118 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.49, %sfp
 310 011c 14108DE5 		str	r1, [sp, #20]	@ tmp220, %sfp
 311 0120 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 312              	.LVL10:
 313              	.L18:
 314              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 315              		.loc 1 84 9 view .LVU48
 316              		.loc 1 84 9 is_stmt 0 view .LVU49
 317 0124 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 318 0128 000053E3 		cmp	r3, #0	@ height,
 319 012c 4B00000A 		beq	.L13		@,
 320 0130 2C009DE5 		ldr	r0, [sp, #44]	@ ivtmp.44, %sfp
 321 0134 28709DE5 		ldr	r7, [sp, #40]	@ ivtmp.43, %sfp
 322 0138 18909DE5 		ldr	r9, [sp, #24]	@ ivtmp.42, %sfp
 323              	.LVL11:
 324              	.L17:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 325              		.loc 1 85 13 is_stmt 1 view .LVU50
  86:armwave.c     **** 
  87:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_sta
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 // BUG:  waves 3/4/5 seem to be all zeroes; this kinda ignores them but obviously n
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 326              		.loc 1 101 17 view .LVU51
 327              		.loc 1 101 17 view .LVU52
 328              		.loc 1 101 17 view .LVU53
 329              		.loc 1 101 17 view .LVU54
 330              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 34 is_stmt 0 view .LVU55
 332 013c 14309DE5 		ldr	r3, [sp, #20]	@ tmp220, %sfp
 333 0140 00209DE5 		ldr	r2, [sp]	@ _208, %sfp
 334 0144 03C087E0 		add	ip, r7, r3	@ tmp243, ivtmp.43, tmp220
 335 0148 03E080E0 		add	lr, r0, r3	@ tmp228, ivtmp.44, tmp220
 336              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 337              		.loc 1 85 18 view .LVU56
 338 014c 043099E4 		ldr	r3, [r9], #4	@ word, MEM[base: _214, offset: 0B]
 339              	.LVL12:
  89:armwave.c     ****                 scale_value = word & 0xff;
 340              		.loc 1 89 13 is_stmt 1 view .LVU57
  90:armwave.c     ****                 
 341              		.loc 1 90 17 view .LVU58
  94:armwave.c     ****                     continue;
 342              		.loc 1 94 17 view .LVU59
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 344              		.loc 1 102 74 is_stmt 0 view .LVU60
 345 0150 2718A0E1 		lsr	r1, r7, #16	@ tmp271, ivtmp.43,
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 view .LVU61
 348 0154 FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 349 0158 0140A003 		moveq	r4, #1	@ tmp222,
 350 015c 0040A013 		movne	r4, #0	@ tmp222,
 351              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 352              		.loc 1 94 19 view .LVU62
 353 0160 FF0056E3 		cmp	r6, #255	@ scale_value,
 354 0164 01408403 		orreq	r4, r4, #1	@,, tmp227, tmp222
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU63
 357 0168 8650A0E1 		lsl	r5, r6, #1	@ tmp231, scale_value,
 358              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 359              		.loc 1 84 9 view .LVU64
 360 016c 0C609DE5 		ldr	r6, [sp, #12]	@ ivtmp.49, %sfp
 361              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 362              		.loc 1 94 19 view .LVU65
 363 0170 000054E3 		cmp	r4, #0	@ tmp227,
 364              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 365              		.loc 1 84 9 view .LVU66
 366 0174 066089E0 		add	r6, r9, r6	@ tmp277, ivtmp.42, ivtmp.49
 367              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 368              		.loc 1 102 74 view .LVU67
 369 0178 08108DE5 		str	r1, [sp, #8]	@ tmp271, %sfp
 370 017c 027087E0 		add	r7, r7, r2	@ ivtmp.43, ivtmp.43, _208
 371 0180 2EE8A0E1 		lsr	lr, lr, #16	@ tmp229, tmp228,
 372 0184 2CC8A0E1 		lsr	ip, ip, #16	@ tmp244, tmp243,
 373              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 374              		.loc 1 107 22 view .LVU68
 375 0188 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 376 018c 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 377              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 378              		.loc 1 84 9 view .LVU69
 379 0190 04608DE5 		str	r6, [sp, #4]	@ tmp277, %sfp
 380              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 381              		.loc 1 94 19 view .LVU70
 382 0194 2B00001A 		bne	.L16		@,
 383              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 384              		.loc 1 101 30 view .LVU71
 385 0198 98AE2BE0 		mla	fp, r8, lr, r10	@ write_buffer, _69, tmp229, write_buffer_base
 386              	.LVL13:
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 17 is_stmt 1 view .LVU72
 388              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 389              		.loc 1 94 20 is_stmt 0 view .LVU73
 390 019c FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 391 01a0 0140A003 		moveq	r4, #1	@ tmp237,
 392              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 393              		.loc 1 106 47 view .LVU74
 394 01a4 B5E09BE1 		ldrh	lr, [fp, r5]	@ *_88, *_88
 395              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 396              		.loc 1 94 20 view .LVU75
 397 01a8 0040A013 		movne	r4, #0	@ tmp237,
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU76
 400 01ac 8160A0E1 		lsl	r6, r1, #1	@ tmp246, scale_value,
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU77
 403 01b0 FF0051E3 		cmp	r1, #255	@ scale_value,
 404 01b4 0410A011 		movne	r1, r4	@, tmp242, tmp237
 405 01b8 01108403 		orreq	r1, r4, #1	@,, tmp242, tmp237
 406              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 407              		.loc 1 106 47 view .LVU78
 408 01bc 01E08EE2 		add	lr, lr, #1	@ tmp234, *_88,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 view .LVU79
 411 01c0 000051E3 		cmp	r1, #0	@ tmp242,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU80
 414 01c4 B5E08BE1 		strh	lr, [fp, r5]	@ movhi	@ tmp234, *_88
 415              		.loc 1 107 17 is_stmt 1 view .LVU81
 416              	.LVL14:
  90:armwave.c     ****                 
 417              		.loc 1 90 17 view .LVU82
  94:armwave.c     ****                     continue;
 418              		.loc 1 94 17 view .LVU83
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 19 is_stmt 0 view .LVU84
 421 01c8 1E00001A 		bne	.L16		@,
 422              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 423              		.loc 1 101 30 view .LVU85
 424 01cc 98AC2BE0 		mla	fp, r8, ip, r10	@ write_buffer, _69, tmp244, write_buffer_base
 425              	.LVL15:
 106:armwave.c     ****                 word >>= 8;
 426              		.loc 1 106 17 is_stmt 1 view .LVU86
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 is_stmt 0 view .LVU87
 429 01d0 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 430 01d4 01C0A003 		moveq	ip, #1	@ tmp252,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU88
 433 01d8 B6109BE1 		ldrh	r1, [fp, r6]	@ *_119, *_119
 434              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 435              		.loc 1 94 20 view .LVU89
 436 01dc 00C0A013 		movne	ip, #0	@ tmp252,
 437              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 438              		.loc 1 106 47 view .LVU90
 439 01e0 82E0A0E1 		lsl	lr, r2, #1	@ tmp260, scale_value,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 19 view .LVU91
 442 01e4 FF0052E3 		cmp	r2, #255	@ scale_value,
 443 01e8 0C20A011 		movne	r2, ip	@, tmp257, tmp252
 444 01ec 01208C03 		orreq	r2, ip, #1	@,, tmp257, tmp252
 445              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 446              		.loc 1 106 47 view .LVU92
 447 01f0 011081E2 		add	r1, r1, #1	@ tmp249, *_119,
 448              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 19 view .LVU93
 450 01f4 000052E3 		cmp	r2, #0	@ tmp257,
 451              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 452              		.loc 1 106 47 view .LVU94
 453 01f8 B6108BE1 		strh	r1, [fp, r6]	@ movhi	@ tmp249, *_119
 454              		.loc 1 107 17 is_stmt 1 view .LVU95
 455              	.LVL16:
  90:armwave.c     ****                 
 456              		.loc 1 90 17 view .LVU96
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 17 view .LVU97
 458              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 459              		.loc 1 94 19 is_stmt 0 view .LVU98
 460 01fc 1100001A 		bne	.L16		@,
 461              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 462              		.loc 1 101 30 view .LVU99
 463 0200 2028A0E1 		lsr	r2, r0, #16	@ tmp258, ivtmp.44,
 464              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 465              		.loc 1 94 20 view .LVU100
 466 0204 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 467              	.LVL17:
 468              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 469              		.loc 1 101 30 view .LVU101
 470 0208 98A22BE0 		mla	fp, r8, r2, r10	@ write_buffer, _69, tmp258, write_buffer_base
 471              	.LVL18:
 106:armwave.c     ****                 word >>= 8;
 472              		.loc 1 106 17 is_stmt 1 view .LVU102
 473              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 474              		.loc 1 94 20 is_stmt 0 view .LVU103
 475 020c 0110A003 		moveq	r1, #1	@ tmp265,
 476 0210 0010A013 		movne	r1, #0	@ tmp265,
 477              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 478              		.loc 1 106 47 view .LVU104
 479 0214 83C0A0E1 		lsl	ip, r3, #1	@ tmp273, word,
 480              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 481              		.loc 1 94 19 view .LVU105
 482 0218 FF0053E3 		cmp	r3, #255	@ word,
 483 021c 0130A011 		movne	r3, r1	@, tmp270, tmp265
 484 0220 01308103 		orreq	r3, r1, #1	@,, tmp270, tmp265
 485 0224 000053E3 		cmp	r3, #0	@ tmp270,
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU106
 488 0228 BE209BE1 		ldrh	r2, [fp, lr]	@ *_150, *_150
 489              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 490              		.loc 1 101 30 view .LVU107
 491 022c 08109D05 		ldreq	r1, [sp, #8]	@ tmp271, %sfp
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU108
 494 0230 012082E2 		add	r2, r2, #1	@ tmp263, *_150,
 495 0234 BE208BE1 		strh	r2, [fp, lr]	@ movhi	@ tmp263, *_150
 496              		.loc 1 107 17 is_stmt 1 view .LVU109
 497              	.LVL19:
  90:armwave.c     ****                 
 498              		.loc 1 90 17 view .LVU110
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU111
 500              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 501              		.loc 1 101 30 is_stmt 0 view .LVU112
 502 0238 98A12B00 		mlaeq	fp, r8, r1, r10	@ write_buffer, _69, tmp271, write_buffer_base
 503              	.LVL20:
 106:armwave.c     ****                 word >>= 8;
 504              		.loc 1 106 17 is_stmt 1 view .LVU113
 505              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 506              		.loc 1 106 47 is_stmt 0 view .LVU114
 507 023c BC309B01 		ldrheq	r3, [fp, ip]	@ *_181, *_181
 508 0240 01308302 		addeq	r3, r3, #1	@ tmp276, *_181,
 509 0244 BC308B01 		strheq	r3, [fp, ip]	@ movhi	@ tmp276, *_181
 510              		.loc 1 107 17 is_stmt 1 view .LVU115
 511              	.LVL21:
 512              	.L16:
 513              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 514              		.loc 1 84 9 is_stmt 0 view .LVU116
 515 0248 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 516 024c 04209DE5 		ldr	r2, [sp, #4]	@ tmp277, %sfp
 517 0250 020053E1 		cmp	r3, r2	@ height, tmp277
 518 0254 00309DE5 		ldr	r3, [sp]	@ _208, %sfp
 519 0258 030080E0 		add	r0, r0, r3	@ ivtmp.44, ivtmp.44, _208
 520 025c B6FFFF8A 		bhi	.L17		@,
 521              	.L13:
 522              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 79 44 discriminator 2 view .LVU117
 524 0260 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 525              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 79 5 discriminator 2 view .LVU118
 527 0264 20209DE5 		ldr	r2, [sp, #32]	@ _77, %sfp
 528              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 79 44 discriminator 2 view .LVU119
 530 0268 013083E2 		add	r3, r3, #1	@ w, w,
 531              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 79 5 discriminator 2 view .LVU120
 533 026c 020053E1 		cmp	r3, r2	@ w, _77
 534              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 535              		.loc 1 79 44 discriminator 2 view .LVU121
 536 0270 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 537              	.LVL22:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 538              		.loc 1 79 44 discriminator 2 view .LVU122
 539 0274 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.49, %sfp
 540 0278 24309DE5 		ldr	r3, [sp, #36]	@ _227, %sfp
 541              	.LVL23:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 discriminator 2 view .LVU123
 543 027c 032042E0 		sub	r2, r2, r3	@ ivtmp.49, ivtmp.49, _227
 544 0280 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.49, %sfp
 545 0284 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.50, %sfp
 546 0288 033082E0 		add	r3, r2, r3	@ ivtmp.50, ivtmp.50, _227
 547 028c 18308DE5 		str	r3, [sp, #24]	@ ivtmp.50, %sfp
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 discriminator 2 view .LVU124
 550 0290 A3FFFF1A 		bne	.L18		@,
 551              	.LVL24:
 552              	.L12:
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** 
 112:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 553              		.loc 1 112 5 is_stmt 1 view .LVU125
 554              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 555              		.loc 1 112 40 is_stmt 0 view .LVU126
 556 0294 0A104BE0 		sub	r1, fp, r10	@ tmp278, write_buffer, write_buffer_base
 557              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 558              		.loc 1 112 5 view .LVU127
 559 0298 10009FE5 		ldr	r0, .L25+4	@,
 560 029c C110A0E1 		asr	r1, r1, #1	@, tmp278,
 561              	@ armwave.c:113: }
 113:armwave.c     **** }
 562              		.loc 1 113 1 view .LVU128
 563 02a0 34D08DE2 		add	sp, sp, #52	@,,
 564              		.cfi_def_cfa_offset 36
 565              		@ sp needed	@
 566 02a4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 567              		.cfi_restore 14
 568              		.cfi_restore 11
 569              		.cfi_restore 10
 570              		.cfi_restore 9
 571              		.cfi_restore 8
 572              		.cfi_restore 7
 573              		.cfi_restore 6
 574              		.cfi_restore 5
 575              		.cfi_restore 4
 576              		.cfi_def_cfa_offset 0
 577              	.LVL25:
 578              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 579              		.loc 1 112 5 view .LVU129
 580 02a8 FEFFFFEA 		b	printf		@
 581              	.LVL26:
 582              	.L26:
 583              		.align	2
 584              	.L25:
 585 02ac 00000000 		.word	g_armwave_state
 586 02b0 20000000 		.word	.LC2
 587              		.cfi_endproc
 588              	.LFE59:
 590              		.align	2
 591              		.global	armwave_fill_pixbuf_scaled
 592              		.syntax unified
 593              		.arm
 594              		.fpu vfp
 596              	armwave_fill_pixbuf_scaled:
 597              	.LVL27:
 598              	.LFB60:
 114:armwave.c     **** 
 115:armwave.c     **** /*
 116:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 117:armwave.c     ****  * Rows are repeated as necessary.
 118:armwave.c     ****  */
 119:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 120:armwave.c     **** {
 599              		.loc 1 120 1 is_stmt 1 view -0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 8
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 603              		.loc 1 121 5 view .LVU131
 122:armwave.c     ****     // uint32_t ysub;
 123:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 604              		.loc 1 123 5 view .LVU132
 124:armwave.c     ****     uint8_t r, g, b;
 605              		.loc 1 124 5 view .LVU133
 125:armwave.c     ****     int value; 
 606              		.loc 1 125 5 view .LVU134
 126:armwave.c     ****     // uint8_t row;
 127:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 607              		.loc 1 127 5 view .LVU135
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 608              		.loc 1 128 5 view .LVU136
 129:armwave.c     ****     uint32_t offset;
 609              		.loc 1 129 5 view .LVU137
 130:armwave.c     **** 
 131:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 132:armwave.c     **** 
 133:armwave.c     ****     if(out_buffer == NULL)
 610              		.loc 1 133 5 view .LVU138
 611              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 612              		.loc 1 120 1 is_stmt 0 view .LVU139
 613 02b4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 614              		.cfi_def_cfa_offset 36
 615              		.cfi_offset 4, -36
 616              		.cfi_offset 5, -32
 617              		.cfi_offset 6, -28
 618              		.cfi_offset 7, -24
 619              		.cfi_offset 8, -20
 620              		.cfi_offset 9, -16
 621              		.cfi_offset 10, -12
 622              		.cfi_offset 11, -8
 623              		.cfi_offset 14, -4
 624              	@ armwave.c:133:     if(out_buffer == NULL)
 625              		.loc 1 133 7 view .LVU140
 626 02b8 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 627              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 628              		.loc 1 120 1 view .LVU141
 629 02bc 0CD04DE2 		sub	sp, sp, #12	@,,
 630              		.cfi_def_cfa_offset 48
 631              	@ armwave.c:133:     if(out_buffer == NULL)
 632              		.loc 1 133 7 view .LVU142
 633 02c0 1900000A 		beq	.L27		@,
 634              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 635              		.loc 1 127 15 view .LVU143
 636 02c4 50619FE5 		ldr	r6, .L48	@ tmp217,
 637              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 134:armwave.c     ****         return;
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 138:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 140:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 141:armwave.c     **** 
 142:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 143:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 638              		.loc 1 143 5 view .LVU144
 639 02c8 0010A0E3 		mov	r1, #0	@,
 640              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 641              		.loc 1 136 27 view .LVU145
 642 02cc 583096E5 		ldr	r3, [r6, #88]	@ _1, g_armwave_state.target_width
 643              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 644              		.loc 1 143 59 view .LVU146
 645 02d0 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 646              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 647              		.loc 1 136 10 view .LVU147
 648 02d4 405096E5 		ldr	r5, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 649              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 650              		.loc 1 127 15 view .LVU148
 651 02d8 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 136:armwave.c     ****     
 652              		.loc 1 136 5 is_stmt 1 view .LVU149
 653              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 654              		.loc 1 143 59 is_stmt 0 view .LVU150
 655 02dc 920302E0 		mul	r2, r2, r3	@ tmp178, g_armwave_state.target_height, _1
 656              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 657              		.loc 1 136 10 view .LVU151
 658 02e0 950305E0 		mul	r5, r5, r3	@ npix, g_armwave_state.bitdepth_height, _1
 659              	.LVL28:
 660              		.loc 1 143 5 is_stmt 1 view .LVU152
 661 02e4 0221A0E1 		lsl	r2, r2, #2	@, tmp178,
 662 02e8 FEFFFFEB 		bl	memset		@
 663              	.LVL29:
 144:armwave.c     **** 
 145:armwave.c     ****     //printf("iter...\n");
 146:armwave.c     **** 
 147:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 664              		.loc 1 147 5 view .LVU153
 665              		.loc 1 147 5 is_stmt 0 view .LVU154
 666 02ec 000055E3 		cmp	r5, #0	@ npix,
 667 02f0 0D0000DA 		ble	.L27		@,
 668              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 149:armwave.c     ****         //wave_word = 0x12345678;
 150:armwave.c     ****         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 152:armwave.c     ****         /*
 153:armwave.c     ****         if(n % 200 == 0) {
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     ****         */
 157:armwave.c     **** 
 158:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 162:armwave.c     **** 
 163:armwave.c     ****                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 669              		.loc 1 165 52 view .LVU155
 670 02f4 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _15, g_armwave_state.ch1_color.g
 671              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 672              		.loc 1 164 52 view .LVU156
 673 02f8 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _12, g_armwave_state.ch1_color.r
 674              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 168:armwave.c     ****                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 171:armwave.c     **** 
 172:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 173:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 175:armwave.c     ****                     // Plot the pixels
 176:armwave.c     ****                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 675              		.loc 1 177 57 view .LVU157
 676 02fc 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _32, g_armwave_state.vscale_frac
 677              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 678              		.loc 1 165 52 view .LVU158
 679 0300 00308DE5 		str	r3, [sp]	@ _15, %sfp
 680              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 681              		.loc 1 166 52 view .LVU159
 682 0304 F037D6E1 		ldrsh	r3, [r6, #112]	@ _18, g_armwave_state.ch1_color.b
 683 0308 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 684              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 685              		.loc 1 147 11 view .LVU160
 686 030c 0030A0E3 		mov	r3, #0	@ n,
 687              	.LVL30:
 688              	.L33:
 150:armwave.c     **** 
 689              		.loc 1 150 9 is_stmt 1 view .LVU161
 690              	@ armwave.c:150:         wave_word = *base_32ptr++;
 150:armwave.c     **** 
 691              		.loc 1 150 19 is_stmt 0 view .LVU162
 692 0310 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_61, offset: 4294967292B]
 693              	.LVL31:
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 694              		.loc 1 158 9 is_stmt 1 view .LVU163
 695              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 696              		.loc 1 158 11 is_stmt 0 view .LVU164
 697 0314 000052E3 		cmp	r2, #0	@ wave_word,
 698              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 699              		.loc 1 159 19 view .LVU165
 700 0318 0080A013 		movne	r8, #0	@ w,
 701              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 702              		.loc 1 158 11 view .LVU166
 703 031c 0400001A 		bne	.L32		@,
 704              	.L29:
 705              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 706              		.loc 1 147 28 view .LVU167
 707 0320 023083E2 		add	r3, r3, #2	@ n, n,
 708              	.LVL32:
 709              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 710              		.loc 1 147 5 view .LVU168
 711 0324 030055E1 		cmp	r5, r3	@ npix, n
 712 0328 F8FFFFCA 		bgt	.L33		@,
 713              	.LVL33:
 714              	.L27:
 715              	@ armwave.c:193: }
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 181:armwave.c     ****                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 186:armwave.c     ****                     }
 187:armwave.c     ****                 }
 188:armwave.c     ****             }
 189:armwave.c     ****         }
 190:armwave.c     ****     }
 191:armwave.c     **** 
 192:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 193:armwave.c     **** }
 716              		.loc 1 193 1 view .LVU169
 717 032c 0CD08DE2 		add	sp, sp, #12	@,,
 718              		.cfi_remember_state
 719              		.cfi_def_cfa_offset 36
 720              		@ sp needed	@
 721 0330 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 722              	.LVL34:
 723              	.L32:
 724              		.cfi_restore_state
 160:armwave.c     ****                 wave_word >>= 16;
 725              		.loc 1 160 17 is_stmt 1 view .LVU170
 726              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 727              		.loc 1 160 23 is_stmt 0 view .LVU171
 728 0334 7290FFE6 		uxth	r9, r2	@ value, wave_word
 729              	.LVL35:
 161:armwave.c     **** 
 730              		.loc 1 161 17 is_stmt 1 view .LVU172
 731              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 732              		.loc 1 163 19 is_stmt 0 view .LVU173
 733 0338 000059E3 		cmp	r9, #0	@ value,
 734              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 735              		.loc 1 161 27 view .LVU174
 736 033c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 737              	.LVL36:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 738              		.loc 1 163 17 is_stmt 1 view .LVU175
 739              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 740              		.loc 1 163 19 is_stmt 0 view .LVU176
 741 0340 0600001A 		bne	.L47		@,
 742              	.LVL37:
 743              	.L30:
 744              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 745              		.loc 1 159 13 view .LVU177
 746 0344 010058E3 		cmp	r8, #1	@ w,
 747 0348 F4FFFF0A 		beq	.L29		@,
 748              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 749              		.loc 1 160 23 view .LVU178
 750 034c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 751              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 752              		.loc 1 163 19 view .LVU179
 753 0350 000059E3 		cmp	r9, #0	@ value,
 754 0354 0180A0E3 		mov	r8, #1	@ w,
 755              	.LVL38:
 160:armwave.c     ****                 wave_word >>= 16;
 756              		.loc 1 160 17 is_stmt 1 view .LVU180
 161:armwave.c     **** 
 757              		.loc 1 161 17 view .LVU181
 758              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 759              		.loc 1 161 27 is_stmt 0 view .LVU182
 760 0358 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 761              	.LVL39:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 762              		.loc 1 163 17 is_stmt 1 view .LVU183
 763              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 764              		.loc 1 163 19 is_stmt 0 view .LVU184
 765 035c F8FFFF0A 		beq	.L30		@,
 766              	.L47:
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 164 21 is_stmt 1 view .LVU185
 768              	.LVL40:
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 769              		.loc 1 165 21 view .LVU186
 166:armwave.c     **** 
 770              		.loc 1 166 21 view .LVU187
 168:armwave.c     ****                     g = MIN(gg, 255);
 771              		.loc 1 168 21 view .LVU188
 169:armwave.c     ****                     b = MIN(bb, 255);
 772              		.loc 1 169 21 view .LVU189
 170:armwave.c     **** 
 773              		.loc 1 170 21 view .LVU190
 173:armwave.c     **** 
 774              		.loc 1 173 21 view .LVU191
 775              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 776              		.loc 1 166 55 is_stmt 0 view .LVU192
 777 0360 04109DE5 		ldr	r1, [sp, #4]	@ _18, %sfp
 778 0364 08C083E0 		add	ip, r3, r8	@ _130, n, w
 779 0368 990100E0 		mul	r0, r9, r1	@ tmp191, value, _18
 780              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 781              		.loc 1 177 32 view .LVU193
 782 036c 7C10EFE6 		uxtb	r1, ip	@ _30, _130
 783              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 784              		.loc 1 178 41 view .LVU194
 785 0370 01E081E2 		add	lr, r1, #1	@ tmp206, _30,
 786              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 787              		.loc 1 177 40 view .LVU195
 788 0374 901A07EE 		vmov	s15, r1	@ int	@ _30, _30
 789              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 790              		.loc 1 178 41 view .LVU196
 791 0378 10EA07EE 		vmov	s14, lr	@ int	@ tmp206, tmp206
 792              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 793              		.loc 1 165 55 view .LVU197
 794 037c 00109DE5 		ldr	r1, [sp]	@ _15, %sfp
 795              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 796              		.loc 1 166 24 view .LVU198
 797 0380 4004A0E1 		asr	r0, r0, #8	@ bb, tmp191,
 798              	.LVL41:
 799              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 800              		.loc 1 177 40 view .LVU199
 801 0384 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp204, _30
 802              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 803              		.loc 1 178 46 view .LVU200
 804 0388 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp207, tmp206
 805              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 806              		.loc 1 165 55 view .LVU201
 807 038c 99010AE0 		mul	r10, r9, r1	@ tmp195, value, _15
 808              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 809              		.loc 1 164 55 view .LVU202
 810 0390 990B09E0 		mul	r9, r9, fp	@ tmp201, value, _12
 811              	.LVL42:
 812              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 813              		.loc 1 170 25 view .LVU203
 814 0394 FF0050E3 		cmp	r0, #255	@ bb,
 815              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 816              		.loc 1 165 24 view .LVU204
 817 0398 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp195,
 818              	.LVL43:
 819              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 820              		.loc 1 177 40 view .LVU205
 821 039c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp205, tmp204, _32
 822              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 823              		.loc 1 178 46 view .LVU206
 824 03a0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp208, tmp207, _32
 825              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 826              		.loc 1 170 25 view .LVU207
 827 03a4 FF00A0A3 		movge	r0, #255	@ bb,
 828              	.LVL44:
 829              	@ armwave.c:169:                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 830              		.loc 1 169 25 view .LVU208
 831 03a8 FF005AE3 		cmp	r10, #255	@ gg,
 832 03ac FFA0A0A3 		movge	r10, #255	@ gg,
 833              	.LVL45:
 834              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 835              		.loc 1 164 24 view .LVU209
 836 03b0 4994A0E1 		asr	r9, r9, #8	@ rr, tmp201,
 837              	.LVL46:
 838              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 839              		.loc 1 168 25 view .LVU210
 840 03b4 FF0059E3 		cmp	r9, #255	@ rr,
 841              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 842              		.loc 1 173 56 view .LVU211
 843 03b8 0AA4A0E1 		lsl	r10, r10, #8	@ tmp196, gg,
 844              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 845              		.loc 1 177 24 view .LVU212
 846 03bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp205
 847              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 848              		.loc 1 168 25 view .LVU213
 849 03c0 FF90A0A3 		movge	r9, #255	@ rr,
 850              	.LVL47:
 851              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 852              		.loc 1 179 32 view .LVU214
 853 03c4 4CC4A0E1 		asr	ip, ip, #8	@ tmp209, _130,
 854              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 855              		.loc 1 173 44 view .LVU215
 856 03c8 0008A0E1 		lsl	r0, r0, #16	@ tmp192, bb,
 857              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 858              		.loc 1 173 56 view .LVU216
 859 03cc 7AA0FFE6 		uxth	r10, r10	@ tmp197, tmp196
 860              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 861              		.loc 1 173 44 view .LVU217
 862 03d0 FF0800E2 		and	r0, r0, #16711680	@ tmp193, tmp192,
 863              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 864              		.loc 1 173 51 view .LVU218
 865 03d4 0A0080E1 		orr	r0, r0, r10	@ tmp199, tmp193, tmp197
 866              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 867              		.loc 1 173 62 view .LVU219
 868 03d8 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 869              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 870              		.loc 1 177 24 view .LVU220
 871 03dc 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 872              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 873              		.loc 1 178 24 view .LVU221
 874 03e0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp208
 875              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 876              		.loc 1 179 38 view .LVU222
 877 03e4 AC9F8CE0 		add	r9, ip, ip, lsr #31	@ tmp211, tmp209, tmp209,
 878              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 879              		.loc 1 173 62 view .LVU223
 880 03e8 0A0080E1 		orr	r0, r0, r10	@ tmp203, tmp199, rr
 881              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 882              		.loc 1 173 26 view .LVU224
 883 03ec FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp203,
 884              	.LVL48:
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 885              		.loc 1 176 21 is_stmt 1 view .LVU225
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 886              		.loc 1 177 21 view .LVU226
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 887              		.loc 1 178 21 view .LVU227
 888              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 889              		.loc 1 179 38 is_stmt 0 view .LVU228
 890 03f0 C990A0E1 		asr	r9, r9, #1	@ xx, tmp211,
 891              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 892              		.loc 1 178 24 view .LVU229
 893 03f4 90EA17EE 		vmov	lr, s15	@ int	@ ye, ye
 894              	.LVL49:
 179:armwave.c     **** 
 895              		.loc 1 179 21 is_stmt 1 view .LVU230
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 896              		.loc 1 181 21 view .LVU231
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 897              		.loc 1 181 21 is_stmt 0 view .LVU232
 898 03f8 0E0051E1 		cmp	r1, lr	@ yy, ye
 899 03fc D0FFFF2A 		bcs	.L30		@,
 900              	.LVL50:
 901              	.L31:
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 902              		.loc 1 182 25 is_stmt 1 discriminator 3 view .LVU233
 184:armwave.c     ****                         painted++;
 903              		.loc 1 184 25 discriminator 3 view .LVU234
 904              	@ armwave.c:182:                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 905              		.loc 1 182 43 is_stmt 0 discriminator 3 view .LVU235
 906 0400 580096E5 		ldr	r0, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 907              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 908              		.loc 1 184 43 discriminator 3 view .LVU236
 909 0404 909120E0 		mla	r0, r0, r1, r9	@ tmp216, g_armwave_state.target_width, yy, xx
 910              	.LVL51:
 911              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 912              		.loc 1 181 42 discriminator 3 view .LVU237
 913 0408 011081E2 		add	r1, r1, #1	@ yy, yy,
 914              	.LVL52:
 915              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 916              		.loc 1 181 21 discriminator 3 view .LVU238
 917 040c 01005EE1 		cmp	lr, r1	@ ye, yy
 918              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 919              		.loc 1 184 53 discriminator 3 view .LVU239
 920 0410 00C187E7 		str	ip, [r7, r0, lsl #2]	@ word, *_43
 185:armwave.c     ****                     }
 921              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU240
 922              	.LVL53:
 923              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 924              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU241
 925 0414 F9FFFF1A 		bne	.L31		@,
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 926              		.loc 1 181 21 discriminator 3 view .LVU242
 927 0418 C9FFFFEA 		b	.L30		@
 928              	.L49:
 929              		.align	2
 930              	.L48:
 931 041c 00000000 		.word	g_armwave_state
 932              		.cfi_endproc
 933              	.LFE60:
 935              		.global	__aeabi_idiv
 936              		.align	2
 937              		.global	armwave_generate
 938              		.syntax unified
 939              		.arm
 940              		.fpu vfp
 942              	armwave_generate:
 943              	.LFB61:
 194:armwave.c     **** 
 195:armwave.c     **** /*
 196:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_generate()
 199:armwave.c     **** {
 944              		.loc 1 199 1 is_stmt 1 view -0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 56
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     uint32_t yy;
 948              		.loc 1 200 5 view .LVU244
 201:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 949              		.loc 1 201 5 view .LVU245
 950              	.LVL54:
 202:armwave.c     **** 
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 951              		.loc 1 203 5 view .LVU246
 952              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 953              		.loc 1 199 1 is_stmt 0 view .LVU247
 954 0420 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 955              		.cfi_def_cfa_offset 36
 956              		.cfi_offset 4, -36
 957              		.cfi_offset 5, -32
 958              		.cfi_offset 6, -28
 959              		.cfi_offset 7, -24
 960              		.cfi_offset 8, -20
 961              		.cfi_offset 9, -16
 962              		.cfi_offset 10, -12
 963              		.cfi_offset 11, -8
 964              		.cfi_offset 14, -4
 965              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 966              		.loc 1 203 5 view .LVU248
 967 0424 0010A0E3 		mov	r1, #0	@,
 968              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 969              		.loc 1 203 58 view .LVU249
 970 0428 94829FE5 		ldr	r8, .L68	@ tmp323,
 971              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 972              		.loc 1 199 1 view .LVU250
 973 042c 44D04DE2 		sub	sp, sp, #68	@,,
 974              		.cfi_def_cfa_offset 104
 975              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 976              		.loc 1 203 5 view .LVU251
 977 0430 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 978 0434 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 979 0438 FEFFFFEB 		bl	memset		@
 980              	.LVL55:
 204:armwave.c     **** 
 205:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 981              		.loc 1 205 5 is_stmt 1 view .LVU252
 982              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 983              		.loc 1 205 68 is_stmt 0 view .LVU253
 984 043c 444098E5 		ldr	r4, [r8, #68]	@ _13, g_armwave_state.slice_height
 985              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 986              		.loc 1 205 51 view .LVU254
 987 0440 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 988 0444 0410A0E1 		mov	r1, r4	@, _13
 989 0448 FEFFFFEB 		bl	__aeabi_idiv		@
 990              	.LVL56:
 991              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 992              		.loc 1 205 5 view .LVU255
 993 044c 000050E3 		cmp	r0, #0	@,
 994 0450 9900000A 		beq	.L50		@,
 995              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 996              		.loc 1 205 12 view .LVU256
 997 0454 0090A0E3 		mov	r9, #0	@ yy,
 998 0458 09A0A0E1 		mov	r10, r9	@ yy, yy
 999 045c 07B0A0E1 		mov	fp, r7	@ write_buffer, write_buffer
 1000              	.LVL57:
 1001              	.L51:
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 207:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1002              		.loc 1 207 9 is_stmt 1 discriminator 3 view .LVU257
 1003 0460 9A0401E0 		mul	r1, r10, r4	@ _5, yy, _13
 1004              	@ armwave.c:209:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 209:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1005              		.loc 1 209 48 is_stmt 0 discriminator 3 view .LVU258
 1006 0464 24C098E5 		ldr	ip, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1007              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1008              		.loc 1 207 9 discriminator 3 view .LVU259
 1009 0468 0120A0E1 		mov	r2, r1	@, _5
 1010 046c 0430A0E1 		mov	r3, r4	@, _13
 1011              	@ armwave.c:209:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1012              		.loc 1 209 48 discriminator 3 view .LVU260
 1013 0470 9C010CE0 		mul	ip, ip, r1	@ tmp233, g_armwave_state.cmp_x_bitdepth_scale, _5
 1014              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1015              		.loc 1 207 9 discriminator 3 view .LVU261
 1016 0474 4C029FE5 		ldr	r0, .L68+4	@,
 1017 0478 0A10A0E1 		mov	r1, r10	@, yy
 1018 047c 2CC8A0E1 		lsr	ip, ip, #16	@ tmp235, tmp233,
 1019 0480 00C08DE5 		str	ip, [sp]	@ tmp235,
 1020 0484 FEFFFFEB 		bl	printf		@
 1021              	.LVL58:
 210:armwave.c     **** 
 211:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1022              		.loc 1 211 9 is_stmt 1 discriminator 3 view .LVU262
 1023              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1024              		.loc 1 211 62 is_stmt 0 discriminator 3 view .LVU263
 1025 0488 443098E5 		ldr	r3, [r8, #68]	@ _10, g_armwave_state.slice_height
 1026 048c 402098E5 		ldr	r2, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1027 0490 0310A0E1 		mov	r1, r3	@ _10, _10
 1028 0494 14308DE5 		str	r3, [sp, #20]	@ _10, %sfp
 1029              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1030              		.loc 1 211 9 discriminator 3 view .LVU264
 1031 0498 9A0100E0 		mul	r0, r10, r1	@ _11, yy, _10
 1032              	.LVL59:
 1033              	.LBB10:
 1034              	.LBI10:
  62:armwave.c     **** {
 1035              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU265
 1036              	.LBB11:
  64:armwave.c     ****     uint32_t value, word;
 1037              		.loc 1 64 5 discriminator 3 view .LVU266
  65:armwave.c     ****     uint8_t *wave_base;
 1038              		.loc 1 65 5 discriminator 3 view .LVU267
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 1039              		.loc 1 66 5 discriminator 3 view .LVU268
  67:armwave.c     ****     bufftyp_t *write_buffer;
 1040              		.loc 1 67 5 discriminator 3 view .LVU269
  68:armwave.c     **** 
 1041              		.loc 1 68 5 discriminator 3 view .LVU270
  71:armwave.c     **** 
 1042              		.loc 1 71 5 discriminator 3 view .LVU271
 1043              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1044              		.loc 1 71 82 is_stmt 0 discriminator 3 view .LVU272
 1045 049c 243098E5 		ldr	r3, [r8, #36]	@ _24, g_armwave_state.cmp_x_bitdepth_scale
 1046              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1047              		.loc 1 79 35 discriminator 3 view .LVU273
 1048 04a0 38C098E5 		ldr	ip, [r8, #56]	@ _43, g_armwave_state.waves
 1049 04a4 82E0A0E1 		lsl	lr, r2, #1	@ _181, g_armwave_state.bitdepth_height,
 1050              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1051              		.loc 1 71 65 discriminator 3 view .LVU274
 1052 04a8 930001E0 		mul	r1, r3, r0	@ tmp241, _24, _11
 1053              	.LVL60:
 1054              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1055              		.loc 1 71 23 discriminator 3 view .LVU275
 1056 04ac 042098E5 		ldr	r2, [r8, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 1057              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1058              		.loc 1 79 5 discriminator 3 view .LVU276
 1059 04b0 00005CE3 		cmp	ip, #0	@ _43,
 1060              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1061              		.loc 1 71 105 discriminator 3 view .LVU277
 1062 04b4 2118A0E1 		lsr	r1, r1, #16	@ tmp242, tmp241,
 1063              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1064              		.loc 1 79 35 discriminator 3 view .LVU278
 1065 04b8 28C08DE5 		str	ip, [sp, #40]	@ _43, %sfp
 1066              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1067              		.loc 1 71 23 discriminator 3 view .LVU279
 1068 04bc 9E2129E0 		mla	r9, lr, r1, r2	@ write_buffer_base, _181, tmp242, g_armwave_state.ch1_buffer
 1069              	.LVL61:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1070              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU280
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1071              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU281
 1072 04c0 720000DA 		ble	.L52		@,
 1073              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1074              		.loc 1 80 36 view .LVU282
 1075 04c4 142098E5 		ldr	r2, [r8, #20]	@ _32, g_armwave_state.wave_buffer
 1076 04c8 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp254, _24, _24,
 1077 04cc 34C098E5 		ldr	ip, [r8, #52]	@ _183, g_armwave_state.wave_stride
 1078 04d0 002082E0 		add	r2, r2, r0	@ tmp248, _32, _11
 1079 04d4 2CC08DE5 		str	ip, [sp, #44]	@ _183, %sfp
 1080 04d8 8300A0E1 		lsl	r0, r3, #1	@ tmp250, _24,
 1081              	.LVL62:
  80:armwave.c     **** 
 1082              		.loc 1 80 36 view .LVU283
 1083 04dc 00C062E2 		rsb	ip, r2, #0	@ ivtmp.80, tmp248
 1084 04e0 10208DE5 		str	r2, [sp, #16]	@ tmp248, %sfp
 1085 04e4 8120A0E1 		lsl	r2, r1, #1	@ tmp255, tmp254,
 1086 04e8 38208DE5 		str	r2, [sp, #56]	@ tmp255, %sfp
 1087              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1088              		.loc 1 79 11 view .LVU284
 1089 04ec 3CA08DE5 		str	r10, [sp, #60]	@ yy, %sfp
 1090 04f0 032080E0 		add	r2, r0, r3	@ ivtmp.74, tmp250, _24
 1091 04f4 0EA0A0E1 		mov	r10, lr	@ _181, _181
 1092              	.LVL63:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1093              		.loc 1 79 11 view .LVU285
 1094 04f8 0331A0E1 		lsl	r3, r3, #2	@ _243, _24,
 1095 04fc 1C308DE5 		str	r3, [sp, #28]	@ _243, %sfp
 1096 0500 0030A0E3 		mov	r3, #0	@ w,
 1097 0504 34008DE5 		str	r0, [sp, #52]	@ tmp250, %sfp
 1098 0508 0CC08DE5 		str	ip, [sp, #12]	@ ivtmp.80, %sfp
 1099 050c 30208DE5 		str	r2, [sp, #48]	@ ivtmp.74, %sfp
 1100 0510 18308DE5 		str	r3, [sp, #24]	@ w, %sfp
 1101              	.LVL64:
 1102              	.L58:
  80:armwave.c     **** 
 1103              		.loc 1 80 9 is_stmt 1 view .LVU286
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1104              		.loc 1 84 9 view .LVU287
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1105              		.loc 1 84 9 is_stmt 0 view .LVU288
 1106 0514 14309DE5 		ldr	r3, [sp, #20]	@ _10, %sfp
 1107 0518 000053E3 		cmp	r3, #0	@ _10,
 1108 051c 4D00000A 		beq	.L53		@,
 1109 0520 10609DE5 		ldr	r6, [sp, #16]	@ ivtmp.73, %sfp
 1110 0524 34509DE5 		ldr	r5, [sp, #52]	@ ivtmp.75, %sfp
 1111 0528 30709DE5 		ldr	r7, [sp, #48]	@ ivtmp.74, %sfp
 1112 052c 06E0A0E1 		mov	lr, r6	@ ivtmp.73, ivtmp.73
 1113              	.LVL65:
 1114              	.L57:
  85:armwave.c     **** 
 1115              		.loc 1 85 13 is_stmt 1 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1116              		.loc 1 101 17 view .LVU290
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1117              		.loc 1 101 17 view .LVU291
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1118              		.loc 1 101 17 view .LVU292
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1119              		.loc 1 101 17 view .LVU293
 1120              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1121              		.loc 1 102 34 is_stmt 0 view .LVU294
 1122 0530 38309DE5 		ldr	r3, [sp, #56]	@ tmp255, %sfp
 1123 0534 1C409DE5 		ldr	r4, [sp, #28]	@ _243, %sfp
 1124 0538 03C087E0 		add	ip, r7, r3	@ tmp278, ivtmp.74, tmp255
 1125 053c 030085E0 		add	r0, r5, r3	@ tmp263, ivtmp.75, tmp255
 1126              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1127              		.loc 1 85 18 view .LVU295
 1128 0540 04309EE4 		ldr	r3, [lr], #4	@ word, MEM[base: _249, offset: 0B]
 1129              	.LVL66:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1130              		.loc 1 89 13 is_stmt 1 view .LVU296
  90:armwave.c     ****                 
 1131              		.loc 1 90 17 view .LVU297
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 17 view .LVU298
 1133              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1134              		.loc 1 102 74 is_stmt 0 view .LVU299
 1135 0544 2718A0E1 		lsr	r1, r7, #16	@ tmp306, ivtmp.74,
 1136              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1137              		.loc 1 94 20 view .LVU300
 1138 0548 FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 1139 054c 047087E0 		add	r7, r7, r4	@ ivtmp.74, ivtmp.74, _243
 1140              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1141              		.loc 1 107 22 view .LVU301
 1142 0550 2348A0E1 		lsr	r4, r3, #16	@ word, word,
 1143              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1144              		.loc 1 94 20 view .LVU302
 1145 0554 0140A003 		moveq	r4, #1	@ tmp257,
 1146 0558 0040A013 		movne	r4, #0	@ tmp257,
 1147              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1148              		.loc 1 94 19 view .LVU303
 1149 055c FF0056E3 		cmp	r6, #255	@ scale_value,
 1150 0560 01408403 		orreq	r4, r4, #1	@,, tmp262, tmp257
 1151              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1152              		.loc 1 106 47 view .LVU304
 1153 0564 8620A0E1 		lsl	r2, r6, #1	@ tmp266, scale_value,
 1154              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1155              		.loc 1 84 9 view .LVU305
 1156 0568 0C609DE5 		ldr	r6, [sp, #12]	@ ivtmp.80, %sfp
 1157              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1158              		.loc 1 94 19 view .LVU306
 1159 056c 000054E3 		cmp	r4, #0	@ tmp262,
 1160              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1161              		.loc 1 84 9 view .LVU307
 1162 0570 06608EE0 		add	r6, lr, r6	@ tmp312, ivtmp.73, ivtmp.80
 1163              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1164              		.loc 1 102 74 view .LVU308
 1165 0574 20108DE5 		str	r1, [sp, #32]	@ tmp306, %sfp
 1166 0578 2008A0E1 		lsr	r0, r0, #16	@ tmp264, tmp263,
 1167 057c 2CC8A0E1 		lsr	ip, ip, #16	@ tmp279, tmp278,
 1168              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1169              		.loc 1 107 22 view .LVU309
 1170 0580 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 1171              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1172              		.loc 1 84 9 view .LVU310
 1173 0584 24608DE5 		str	r6, [sp, #36]	@ tmp312, %sfp
 1174              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1175              		.loc 1 94 19 view .LVU311
 1176 0588 2C00001A 		bne	.L56		@,
 1177              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1178              		.loc 1 101 30 view .LVU312
 1179 058c 9A902BE0 		mla	fp, r10, r0, r9	@ write_buffer, _181, tmp264, write_buffer_base
 1180              	.LVL67:
 106:armwave.c     ****                 word >>= 8;
 1181              		.loc 1 106 17 is_stmt 1 view .LVU313
 1182              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1183              		.loc 1 94 20 is_stmt 0 view .LVU314
 1184 0590 FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 1185 0594 0140A003 		moveq	r4, #1	@ tmp272,
 1186              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1187              		.loc 1 106 47 view .LVU315
 1188 0598 B2009BE1 		ldrh	r0, [fp, r2]	@ *_106, *_106
 1189              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1190              		.loc 1 94 20 view .LVU316
 1191 059c 0040A013 		movne	r4, #0	@ tmp272,
 1192              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1193              		.loc 1 106 47 view .LVU317
 1194 05a0 8160A0E1 		lsl	r6, r1, #1	@ tmp281, scale_value,
 1195              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1196              		.loc 1 94 19 view .LVU318
 1197 05a4 FF0051E3 		cmp	r1, #255	@ scale_value,
 1198 05a8 0410A011 		movne	r1, r4	@, tmp277, tmp272
 1199 05ac 01108403 		orreq	r1, r4, #1	@,, tmp277, tmp272
 1200              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1201              		.loc 1 106 47 view .LVU319
 1202 05b0 010080E2 		add	r0, r0, #1	@ tmp269, *_106,
 1203              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1204              		.loc 1 94 19 view .LVU320
 1205 05b4 000051E3 		cmp	r1, #0	@ tmp277,
 1206              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1207              		.loc 1 106 47 view .LVU321
 1208 05b8 B2008BE1 		strh	r0, [fp, r2]	@ movhi	@ tmp269, *_106
 107:armwave.c     ****             }
 1209              		.loc 1 107 17 is_stmt 1 view .LVU322
 1210              	.LVL68:
  90:armwave.c     ****                 
 1211              		.loc 1 90 17 view .LVU323
  94:armwave.c     ****                     continue;
 1212              		.loc 1 94 17 view .LVU324
 1213              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1214              		.loc 1 94 19 is_stmt 0 view .LVU325
 1215 05bc 1F00001A 		bne	.L56		@,
 1216              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1217              		.loc 1 101 30 view .LVU326
 1218 05c0 9A9C2BE0 		mla	fp, r10, ip, r9	@ write_buffer, _181, tmp279, write_buffer_base
 1219              	.LVL69:
 106:armwave.c     ****                 word >>= 8;
 1220              		.loc 1 106 17 is_stmt 1 view .LVU327
 1221              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1222              		.loc 1 94 20 is_stmt 0 view .LVU328
 1223 05c4 2348A0E1 		lsr	r4, r3, #16	@ word, word,
 1224 05c8 FF2014E2 		ands	r2, r4, #255	@ scale_value, word,
 1225              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1226              		.loc 1 106 47 view .LVU329
 1227 05cc B6109BE1 		ldrh	r1, [fp, r6]	@ *_137, *_137
 1228              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1229              		.loc 1 94 20 view .LVU330
 1230 05d0 0100A003 		moveq	r0, #1	@ tmp287,
 1231 05d4 0000A013 		movne	r0, #0	@ tmp287,
 1232              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1233              		.loc 1 106 47 view .LVU331
 1234 05d8 82C0A0E1 		lsl	ip, r2, #1	@ tmp295, scale_value,
 1235              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1236              		.loc 1 94 19 view .LVU332
 1237 05dc FF0052E3 		cmp	r2, #255	@ scale_value,
 1238 05e0 0020A011 		movne	r2, r0	@, tmp292, tmp287
 1239 05e4 01208003 		orreq	r2, r0, #1	@,, tmp292, tmp287
 1240              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1241              		.loc 1 106 47 view .LVU333
 1242 05e8 011081E2 		add	r1, r1, #1	@ tmp284, *_137,
 1243              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1244              		.loc 1 94 19 view .LVU334
 1245 05ec 000052E3 		cmp	r2, #0	@ tmp292,
 1246              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1247              		.loc 1 106 47 view .LVU335
 1248 05f0 B6108BE1 		strh	r1, [fp, r6]	@ movhi	@ tmp284, *_137
 107:armwave.c     ****             }
 1249              		.loc 1 107 17 is_stmt 1 view .LVU336
 1250              	.LVL70:
  90:armwave.c     ****                 
 1251              		.loc 1 90 17 view .LVU337
  94:armwave.c     ****                     continue;
 1252              		.loc 1 94 17 view .LVU338
 1253              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1254              		.loc 1 94 19 is_stmt 0 view .LVU339
 1255 05f4 1100001A 		bne	.L56		@,
 1256              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1257              		.loc 1 101 30 view .LVU340
 1258 05f8 2528A0E1 		lsr	r2, r5, #16	@ tmp293, ivtmp.75,
 1259              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1260              		.loc 1 94 20 view .LVU341
 1261 05fc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1262              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1263              		.loc 1 101 30 view .LVU342
 1264 0600 9A922BE0 		mla	fp, r10, r2, r9	@ write_buffer, _181, tmp293, write_buffer_base
 1265              	.LVL71:
 106:armwave.c     ****                 word >>= 8;
 1266              		.loc 1 106 17 is_stmt 1 view .LVU343
 1267              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1268              		.loc 1 94 20 is_stmt 0 view .LVU344
 1269 0604 0110A003 		moveq	r1, #1	@ tmp300,
 1270 0608 0010A013 		movne	r1, #0	@ tmp300,
 1271              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1272              		.loc 1 106 47 view .LVU345
 1273 060c 8300A0E1 		lsl	r0, r3, #1	@ tmp308, word,
 1274              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1275              		.loc 1 94 19 view .LVU346
 1276 0610 FF0053E3 		cmp	r3, #255	@ word,
 1277 0614 0130A011 		movne	r3, r1	@, tmp305, tmp300
 1278 0618 01308103 		orreq	r3, r1, #1	@,, tmp305, tmp300
 1279 061c 000053E3 		cmp	r3, #0	@ tmp305,
 1280              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1281              		.loc 1 106 47 view .LVU347
 1282 0620 BC209BE1 		ldrh	r2, [fp, ip]	@ *_168, *_168
 1283              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1284              		.loc 1 101 30 view .LVU348
 1285 0624 20109D05 		ldreq	r1, [sp, #32]	@ tmp306, %sfp
 1286              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1287              		.loc 1 106 47 view .LVU349
 1288 0628 012082E2 		add	r2, r2, #1	@ tmp298, *_168,
 1289 062c BC208BE1 		strh	r2, [fp, ip]	@ movhi	@ tmp298, *_168
 107:armwave.c     ****             }
 1290              		.loc 1 107 17 is_stmt 1 view .LVU350
 1291              	.LVL72:
  90:armwave.c     ****                 
 1292              		.loc 1 90 17 view .LVU351
  94:armwave.c     ****                     continue;
 1293              		.loc 1 94 17 view .LVU352
 1294              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1295              		.loc 1 101 30 is_stmt 0 view .LVU353
 1296 0630 9A912B00 		mlaeq	fp, r10, r1, r9	@ write_buffer, _181, tmp306, write_buffer_base
 1297              	.LVL73:
 106:armwave.c     ****                 word >>= 8;
 1298              		.loc 1 106 17 is_stmt 1 view .LVU354
 1299              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1300              		.loc 1 106 47 is_stmt 0 view .LVU355
 1301 0634 B0309B01 		ldrheq	r3, [fp, r0]	@ *_199, *_199
 1302 0638 01308302 		addeq	r3, r3, #1	@ tmp311, *_199,
 1303 063c B0308B01 		strheq	r3, [fp, r0]	@ movhi	@ tmp311, *_199
 107:armwave.c     ****             }
 1304              		.loc 1 107 17 is_stmt 1 view .LVU356
 1305              	.LVL74:
 1306              	.L56:
 1307              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1308              		.loc 1 84 9 is_stmt 0 view .LVU357
 1309 0640 14309DE5 		ldr	r3, [sp, #20]	@ _10, %sfp
 1310 0644 24209DE5 		ldr	r2, [sp, #36]	@ tmp312, %sfp
 1311 0648 020053E1 		cmp	r3, r2	@ _10, tmp312
 1312 064c 1C309DE5 		ldr	r3, [sp, #28]	@ _243, %sfp
 1313 0650 035085E0 		add	r5, r5, r3	@ ivtmp.75, ivtmp.75, _243
 1314 0654 B5FFFF8A 		bhi	.L57		@,
 1315              	.L53:
 1316              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1317              		.loc 1 79 44 view .LVU358
 1318 0658 18309DE5 		ldr	r3, [sp, #24]	@ w, %sfp
 1319              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1320              		.loc 1 79 5 view .LVU359
 1321 065c 28209DE5 		ldr	r2, [sp, #40]	@ _43, %sfp
 1322              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1323              		.loc 1 79 44 view .LVU360
 1324 0660 013083E2 		add	r3, r3, #1	@ w, w,
 1325              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1326              		.loc 1 79 5 view .LVU361
 1327 0664 030052E1 		cmp	r2, r3	@ _43, w
 1328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1329              		.loc 1 79 44 view .LVU362
 1330 0668 18308DE5 		str	r3, [sp, #24]	@ w, %sfp
 1331              	.LVL75:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1332              		.loc 1 79 44 view .LVU363
 1333 066c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.80, %sfp
 1334 0670 2C309DE5 		ldr	r3, [sp, #44]	@ _183, %sfp
 1335              	.LVL76:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1336              		.loc 1 79 44 view .LVU364
 1337 0674 032042E0 		sub	r2, r2, r3	@ ivtmp.80, ivtmp.80, _183
 1338 0678 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.80, %sfp
 1339 067c 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.81, %sfp
 1340 0680 033082E0 		add	r3, r2, r3	@ ivtmp.81, ivtmp.81, _183
 1341 0684 10308DE5 		str	r3, [sp, #16]	@ ivtmp.81, %sfp
 1342              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1343              		.loc 1 79 5 view .LVU365
 1344 0688 A1FFFF1A 		bne	.L58		@,
 1345 068c 3CA09DE5 		ldr	r10, [sp, #60]	@ yy, %sfp
 1346              	.LVL77:
 1347              	.L52:
 112:armwave.c     **** }
 1348              		.loc 1 112 5 is_stmt 1 view .LVU366
 1349              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 1350              		.loc 1 112 40 is_stmt 0 view .LVU367
 1351 0690 09104BE0 		sub	r1, fp, r9	@ tmp313, write_buffer, write_buffer_base
 1352              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 1353              		.loc 1 112 5 view .LVU368
 1354 0694 30009FE5 		ldr	r0, .L68+8	@,
 1355 0698 C110A0E1 		asr	r1, r1, #1	@, tmp313,
 1356 069c FEFFFFEB 		bl	printf		@
 1357              	.LVL78:
 112:armwave.c     **** }
 1358              		.loc 1 112 5 view .LVU369
 1359              	.LBE11:
 1360              	.LBE10:
 212:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1361              		.loc 1 212 9 is_stmt 1 view .LVU370
 213:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1362              		.loc 1 213 9 view .LVU371
 1363              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1364              		.loc 1 205 68 is_stmt 0 view .LVU372
 1365 06a0 444098E5 		ldr	r4, [r8, #68]	@ _13, g_armwave_state.slice_height
 1366              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1367              		.loc 1 205 51 view .LVU373
 1368 06a4 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 1369 06a8 0410A0E1 		mov	r1, r4	@, _13
 1370 06ac FEFFFFEB 		bl	__aeabi_idiv		@
 1371              	.LVL79:
 1372              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1373              		.loc 1 205 86 view .LVU374
 1374 06b0 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 1375              	.LVL80:
 1376              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1377              		.loc 1 205 5 view .LVU375
 1378 06b4 0A0050E1 		cmp	r0, r10	@, yy
 1379 06b8 68FFFF8A 		bhi	.L51		@,
 1380              	.LVL81:
 1381              	.L50:
 1382              	@ armwave.c:222: }
 214:armwave.c     ****     }
 215:armwave.c     **** 
 216:armwave.c     ****     /*
 217:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 218:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 219:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 220:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 221:armwave.c     ****     */
 222:armwave.c     **** }
 1383              		.loc 1 222 1 view .LVU376
 1384 06bc 44D08DE2 		add	sp, sp, #68	@,,
 1385              		.cfi_def_cfa_offset 36
 1386              		@ sp needed	@
 1387 06c0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1388              	.L69:
 1389              		.align	2
 1390              	.L68:
 1391 06c4 00000000 		.word	g_armwave_state
 1392 06c8 2C000000 		.word	.LC3
 1393 06cc 20000000 		.word	.LC2
 1394              		.cfi_endproc
 1395              	.LFE61:
 1397              		.align	2
 1398              		.global	armwave_setup_render
 1399              		.syntax unified
 1400              		.arm
 1401              		.fpu vfp
 1403              	armwave_setup_render:
 1404              	.LVL82:
 1405              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** /*
 225:armwave.c     ****  * Setup the renderer with passed parameters.
 226:armwave.c     ****  */
 227:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 228:armwave.c     **** {
 1406              		.loc 1 228 1 is_stmt 1 view -0
 1407              		.cfi_startproc
 1408              		@ args = 12, pretend = 0, frame = 0
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 229:armwave.c     ****     uint32_t length, xx;
 1410              		.loc 1 229 5 view .LVU378
 230:armwave.c     ****     float points_per_pixel;
 1411              		.loc 1 230 5 view .LVU379
 231:armwave.c     **** 
 232:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1412              		.loc 1 232 5 view .LVU380
 1413              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1414              		.loc 1 228 1 is_stmt 0 view .LVU381
 1415 06d0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1416              		.cfi_def_cfa_offset 28
 1417              		.cfi_offset 4, -28
 1418              		.cfi_offset 5, -24
 1419              		.cfi_offset 6, -20
 1420              		.cfi_offset 7, -16
 1421              		.cfi_offset 8, -12
 1422              		.cfi_offset 9, -8
 1423              		.cfi_offset 14, -4
 1424 06d4 14D04DE2 		sub	sp, sp, #20	@,,
 1425              		.cfi_def_cfa_offset 48
 1426              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1427              		.loc 1 228 1 view .LVU382
 1428 06d8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1429 06dc D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1430 06e0 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1431 06e4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1432              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1433              		.loc 1 232 5 view .LVU383
 1434 06e8 00308DE5 		str	r3, [sp]	@ wave_stride,
 1435              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1436              		.loc 1 228 1 view .LVU384
 1437 06ec 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1438 06f0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1439              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1440              		.loc 1 232 5 view .LVU385
 1441 06f4 F460CDE1 		strd	r6, [sp, #4]	@,,
 1442 06f8 0230A0E1 		mov	r3, r2	@, waves_max
 1443              	.LVL83:
 1444              		.loc 1 232 5 view .LVU386
 1445 06fc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1446 0700 0120A0E1 		mov	r2, r1	@, end_point
 1447              	.LVL84:
 1448              		.loc 1 232 5 view .LVU387
 1449 0704 0010A0E1 		mov	r1, r0	@, start_point
 1450              	.LVL85:
 1451              		.loc 1 232 5 view .LVU388
 1452 0708 8C019FE5 		ldr	r0, .L80+12	@,
 1453              	.LVL86:
 1454              		.loc 1 232 5 view .LVU389
 1455 070c FEFFFFEB 		bl	printf		@
 1456              	.LVL87:
 233:armwave.c     **** 
 234:armwave.c     ****     // TODO these asserts should instead raise PyExc
 235:armwave.c     ****     assert(start_point < end_point);
 1457              		.loc 1 235 5 is_stmt 1 view .LVU390
 1458 0710 050054E1 		cmp	r4, r5	@ start_point, end_point
 1459 0714 5100002A 		bcs	.L78		@,
 236:armwave.c     **** 
 237:armwave.c     ****     /*
 238:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 239:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 1460              		.loc 1 256 5 view .LVU391
 1461              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1462              		.loc 1 267 45 is_stmt 0 view .LVU392
 1463 0718 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1464              	.LVL88:
 1465              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1466              		.loc 1 271 48 view .LVU393
 1467 071c 5B5A9FED 		vldr.32	s10, .L80	@ tmp187,
 1468 0720 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1469              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1470              		.loc 1 257 49 view .LVU394
 1471 0724 5A7A9FED 		vldr.32	s14, .L80+4	@ tmp165,
 1472              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1473              		.loc 1 271 81 view .LVU395
 1474 0728 5A6A9FED 		vldr.32	s12, .L80+8	@ tmp191,
 1475              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1476              		.loc 1 264 90 view .LVU396
 1477 072c 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1478              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1479              		.loc 1 271 48 view .LVU397
 1480 0730 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1481              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1482              		.loc 1 257 49 view .LVU398
 1483 0734 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1484              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1485              		.loc 1 256 29 view .LVU399
 1486 0738 60419FE5 		ldr	r4, .L80+16	@ tmp222,
 1487              	.LVL89:
 1488              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1489              		.loc 1 262 42 view .LVU400
 1490 073c 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1491              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1492              		.loc 1 257 49 view .LVU401
 1493 0740 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1494              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1495              		.loc 1 264 95 view .LVU402
 1496 0744 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1497              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 272:armwave.c     **** 
 273:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1498              		.loc 1 273 5 view .LVU403
 1499 0748 0128A0E3 		mov	r2, #65536	@ tmp194,
 1500              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1501              		.loc 1 271 48 view .LVU404
 1502 074c 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1503              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1504              		.loc 1 273 5 view .LVU405
 1505 0750 04508DE5 		str	r5, [sp, #4]	@ _13,
 1506 0754 00608DE5 		str	r6, [sp]	@ target_width,
 1507              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1508              		.loc 1 264 95 view .LVU406
 1509 0758 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1510              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1511              		.loc 1 256 29 view .LVU407
 1512 075c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1513              		.loc 1 257 5 is_stmt 1 view .LVU408
 1514              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1515              		.loc 1 259 33 is_stmt 0 view .LVU409
 1516 0760 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1517              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1518              		.loc 1 260 31 view .LVU410
 1519 0764 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1520              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1521              		.loc 1 261 27 view .LVU411
 1522 0768 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1523              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1524              		.loc 1 266 35 view .LVU412
 1525 076c F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1526              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1527              		.loc 1 273 5 view .LVU413
 1528 0770 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1529              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1530              		.loc 1 263 37 view .LVU414
 1531 0774 022CA0E3 		mov	r2, #512	@ tmp175,
 1532              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1533              		.loc 1 262 26 view .LVU415
 1534 0778 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1535              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1536              		.loc 1 263 37 view .LVU416
 1537 077c 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1538              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1539              		.loc 1 273 5 view .LVU417
 1540 0780 0310A0E1 		mov	r1, r3	@, tmp180
 1541              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1542              		.loc 1 264 34 view .LVU418
 1543 0784 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1544              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1545              		.loc 1 257 49 view .LVU419
 1546 0788 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1547              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1548              		.loc 1 271 40 view .LVU420
 1549 078c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1550              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1551              		.loc 1 267 33 view .LVU421
 1552 0790 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1553              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1554              		.loc 1 273 5 view .LVU422
 1555 0794 08019FE5 		ldr	r0, .L80+20	@,
 1556              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1557              		.loc 1 271 40 view .LVU423
 1558 0798 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1559 079c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1560              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1561              		.loc 1 258 30 view .LVU424
 1562 07a0 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1563              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1564              		.loc 1 257 33 view .LVU425
 1565 07a4 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1566              		.loc 1 258 5 is_stmt 1 view .LVU426
 1567              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1568              		.loc 1 271 81 is_stmt 0 view .LVU427
 1569 07a8 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1570              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1571              		.loc 1 258 30 view .LVU428
 1572 07ac 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1573              		.loc 1 259 5 is_stmt 1 view .LVU429
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1574              		.loc 1 260 5 view .LVU430
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1575              		.loc 1 261 5 view .LVU431
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1576              		.loc 1 262 5 view .LVU432
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1577              		.loc 1 263 5 view .LVU433
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1578              		.loc 1 264 5 view .LVU434
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1579              		.loc 1 265 5 view .LVU435
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1580              		.loc 1 266 5 view .LVU436
 267:armwave.c     **** 
 1581              		.loc 1 267 5 view .LVU437
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1582              		.loc 1 270 5 view .LVU438
 1583              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1584              		.loc 1 270 42 is_stmt 0 view .LVU439
 1585 07b0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1586 07b4 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1587              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1588              		.loc 1 273 5 view .LVU440
 1589 07b8 903A17EE 		vmov	r3, s15	@ int	@, _20
 1590              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1591              		.loc 1 270 42 view .LVU441
 1592 07bc 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1593              		.loc 1 273 5 is_stmt 1 view .LVU442
 1594 07c0 0C20A0E1 		mov	r2, ip	@, tmp3
 1595 07c4 FEFFFFEB 		bl	printf		@
 1596              	.LVL90:
 274:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 275:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 276:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 277:armwave.c     **** 
 278:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 279:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1597              		.loc 1 281 5 view .LVU443
 1598              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 282:armwave.c     **** 
 283:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1599              		.loc 1 283 23 is_stmt 0 view .LVU444
 1600 07c8 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1601              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1602              		.loc 1 281 34 view .LVU445
 1603 07cc 4030A0E3 		mov	r3, #64	@ tmp196,
 1604              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1605              		.loc 1 283 7 view .LVU446
 1606 07d0 000050E3 		cmp	r0, #0	@ _21,
 1607              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1608              		.loc 1 281 34 view .LVU447
 1609 07d4 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1610              		.loc 1 283 5 is_stmt 1 view .LVU448
 1611              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1612              		.loc 1 283 7 is_stmt 0 view .LVU449
 1613 07d8 0000000A 		beq	.L72		@,
 284:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1614              		.loc 1 284 9 is_stmt 1 view .LVU450
 1615 07dc FEFFFFEB 		bl	free		@
 1616              	.LVL91:
 1617              	.L72:
 285:armwave.c     **** 
 286:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1618              		.loc 1 286 5 view .LVU451
 1619              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1620              		.loc 1 286 56 is_stmt 0 view .LVU452
 1621 07e0 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1622              	.LVL92:
 1623              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1624              		.loc 1 286 34 view .LVU453
 1625 07e4 0110A0E3 		mov	r1, #1	@,
 1626 07e8 0800A0E1 		mov	r0, r8	@, _22
 1627 07ec FEFFFFEB 		bl	calloc		@
 1628              	.LVL93:
 1629              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1630              		.loc 1 288 7 view .LVU454
 1631 07f0 000050E3 		cmp	r0, #0	@ tmp199,
 1632              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1633              		.loc 1 286 34 view .LVU455
 1634 07f4 0070A0E1 		mov	r7, r0	@ tmp199,
 1635              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1636              		.loc 1 286 32 view .LVU456
 1637 07f8 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1638              		.loc 1 288 5 is_stmt 1 view .LVU457
 1639              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 1640              		.loc 1 288 7 is_stmt 0 view .LVU458
 1641 07fc 1C00000A 		beq	.L79		@,
 289:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 290:armwave.c     ****         exit(-1);
 291:armwave.c     ****     }
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1642              		.loc 1 294 5 is_stmt 1 view .LVU459
 1643              	.LVL94:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1644              		.loc 1 295 5 view .LVU460
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1645              		.loc 1 296 5 view .LVU461
 1646              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1647              		.loc 1 295 31 is_stmt 0 view .LVU462
 1648 0800 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1649              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1650              		.loc 1 295 34 view .LVU463
 1651 0804 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1652              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1653              		.loc 1 296 60 view .LVU464
 1654 0808 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1655              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     ****     */
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1656              		.loc 1 310 34 view .LVU465
 1657 080c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1658              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1659              		.loc 1 295 31 view .LVU466
 1660 0810 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1661              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1662              		.loc 1 295 34 view .LVU467
 1663 0814 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1664              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1665              		.loc 1 296 60 view .LVU468
 1666 0818 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1667              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1668              		.loc 1 310 34 view .LVU469
 1669 081c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1670              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1671              		.loc 1 295 22 view .LVU470
 1672 0820 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1673              	.LVL95:
 1674              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1675              		.loc 1 296 60 view .LVU471
 1676 0824 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1677              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1678              		.loc 1 296 41 view .LVU472
 1679 0828 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1680 082c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1681              		.loc 1 310 5 is_stmt 1 view .LVU473
 1682              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1683              		.loc 1 310 34 is_stmt 0 view .LVU474
 1684 0830 FEFFFFEB 		bl	malloc		@
 1685              	.LVL96:
 1686              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1687              		.loc 1 312 5 view .LVU475
 1688 0834 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1689 0838 0710A0E1 		mov	r1, r7	@, tmp199
 1690 083c 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1691 0840 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1692              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1693              		.loc 1 310 34 view .LVU476
 1694 0844 00C0A0E1 		mov	ip, r0	@ tmp215,
 1695              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1696              		.loc 1 312 5 view .LVU477
 1697 0848 0030A0E1 		mov	r3, r0	@, tmp215
 1698              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1699              		.loc 1 310 32 view .LVU478
 1700 084c 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1701              		.loc 1 312 5 is_stmt 1 view .LVU479
 1702 0850 50009FE5 		ldr	r0, .L80+24	@,
 1703              	@ armwave.c:319: }
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****      //malloc_stats();
 319:armwave.c     **** }
 1704              		.loc 1 319 1 is_stmt 0 view .LVU480
 1705 0854 14D08DE2 		add	sp, sp, #20	@,,
 1706              		.cfi_remember_state
 1707              		.cfi_def_cfa_offset 28
 1708              		@ sp needed	@
 1709 0858 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1710              		.cfi_restore 14
 1711              		.cfi_restore 9
 1712              		.cfi_restore 8
 1713              		.cfi_restore 7
 1714              		.cfi_restore 6
 1715              		.cfi_restore 5
 1716              		.cfi_restore 4
 1717              		.cfi_def_cfa_offset 0
 1718              	.LVL97:
 1719              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1720              		.loc 1 312 5 view .LVU481
 1721 085c FEFFFFEA 		b	printf		@
 1722              	.LVL98:
 1723              	.L78:
 1724              		.cfi_restore_state
 235:armwave.c     **** 
 1725              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU482
 1726 0860 44309FE5 		ldr	r3, .L80+28	@,
 1727 0864 EB20A0E3 		mov	r2, #235	@,
 1728 0868 40109FE5 		ldr	r1, .L80+32	@,
 1729 086c 40009FE5 		ldr	r0, .L80+36	@,
 1730 0870 FEFFFFEB 		bl	__assert_fail		@
 1731              	.LVL99:
 1732              	.L79:
 289:armwave.c     ****         exit(-1);
 1733              		.loc 1 289 9 view .LVU483
 1734 0874 3C309FE5 		ldr	r3, .L80+40	@ tmp202,
 1735 0878 0820A0E1 		mov	r2, r8	@, _22
 1736 087c 38109FE5 		ldr	r1, .L80+44	@,
 1737 0880 000093E5 		ldr	r0, [r3]	@, stderr
 1738 0884 FEFFFFEB 		bl	fprintf		@
 1739              	.LVL100:
 290:armwave.c     ****     }
 1740              		.loc 1 290 9 view .LVU484
 1741 0888 0000E0E3 		mvn	r0, #0	@,
 1742 088c FEFFFFEB 		bl	exit		@
 1743              	.LVL101:
 1744              	.L81:
 1745              		.align	2
 1746              	.L80:
 1747 0890 0000803F 		.word	1065353216
 1748 0894 00007F43 		.word	1132396544
 1749 0898 00008047 		.word	1199570944
 1750 089c 60000000 		.word	.LC4
 1751 08a0 00000000 		.word	g_armwave_state
 1752 08a4 B0000000 		.word	.LC7
 1753 08a8 54010000 		.word	.LC9
 1754 08ac 00000000 		.word	.LANCHOR0
 1755 08b0 8C000000 		.word	.LC5
 1756 08b4 98000000 		.word	.LC6
 1757 08b8 00000000 		.word	stderr
 1758 08bc 10010000 		.word	.LC8
 1759              		.cfi_endproc
 1760              	.LFE62:
 1762              		.align	2
 1763              		.global	armwave_set_wave_pointer
 1764              		.syntax unified
 1765              		.arm
 1766              		.fpu vfp
 1768              	armwave_set_wave_pointer:
 1769              	.LVL102:
 1770              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1771              		.loc 1 326 1 view -0
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 0
 1774              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1775              		.loc 1 327 5 view .LVU486
 1776 08c0 000050E3 		cmp	r0, #0	@ wave_buffer
 1777              		.loc 1 327 5 is_stmt 0 view .LVU487
 1778 08c4 0200000A 		beq	.L87		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1779              		.loc 1 328 5 is_stmt 1 view .LVU488
 1780              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1781              		.loc 1 328 33 is_stmt 0 view .LVU489
 1782 08c8 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1783 08cc 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1784 08d0 1EFF2FE1 		bx	lr	@
 1785              	.L87:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1786              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU490
 1787              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1788              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU491
 1789 08d4 10402DE9 		push	{r4, lr}	@
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 4, -8
 1792              		.cfi_offset 14, -4
 1793              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1794              		.loc 1 327 5 discriminator 1 view .LVU492
 1795 08d8 10309FE5 		ldr	r3, .L88+4	@,
 1796 08dc 10209FE5 		ldr	r2, .L88+8	@,
 1797 08e0 10109FE5 		ldr	r1, .L88+12	@,
 1798 08e4 10009FE5 		ldr	r0, .L88+16	@,
 1799              	.LVL103:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1800              		.loc 1 327 5 discriminator 1 view .LVU493
 1801 08e8 FEFFFFEB 		bl	__assert_fail		@
 1802              	.LVL104:
 1803              	.L89:
 1804              		.align	2
 1805              	.L88:
 1806 08ec 00000000 		.word	g_armwave_state
 1807 08f0 18000000 		.word	.LANCHOR0+24
 1808 08f4 47010000 		.word	327
 1809 08f8 8C000000 		.word	.LC5
 1810 08fc 78010000 		.word	.LC10
 1811              		.cfi_endproc
 1812              	.LFE63:
 1814              		.align	2
 1815              		.global	armwave_set_wave_pointer_as_testbuf
 1816              		.syntax unified
 1817              		.arm
 1818              		.fpu vfp
 1820              	armwave_set_wave_pointer_as_testbuf:
 1821              	.LVL105:
 1822              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1823              		.loc 1 336 1 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1828              		.loc 1 337 5 view .LVU495
 1829              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1830              		.loc 1 337 29 is_stmt 0 view .LVU496
 1831 0900 24309FE5 		ldr	r3, .L93	@ tmp117,
 1832              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1833              		.loc 1 337 7 view .LVU497
 1834 0904 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1835 0908 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1836 090c 0400003A 		bcc	.L92		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1837              		.loc 1 342 5 is_stmt 1 view .LVU498
 1838              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1839              		.loc 1 342 111 is_stmt 0 view .LVU499
 1840 0910 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1841              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1842              		.loc 1 342 68 view .LVU500
 1843 0914 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1844 0918 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1845              	.LVL106:
 1846              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1847              		.loc 1 342 33 view .LVU501
 1848 091c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1849              	@ armwave.c:343: }
 343:armwave.c     **** }
 1850              		.loc 1 343 1 view .LVU502
 1851 0920 1EFF2FE1 		bx	lr	@
 1852              	.LVL107:
 1853              	.L92:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1854              		.loc 1 338 9 is_stmt 1 view .LVU503
 1855 0924 04009FE5 		ldr	r0, .L93+4	@,
 1856              	.LVL108:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1857              		.loc 1 338 9 is_stmt 0 view .LVU504
 1858 0928 FEFFFFEA 		b	puts		@
 1859              	.LVL109:
 1860              	.L94:
 1861              		.align	2
 1862              	.L93:
 1863 092c 00000000 		.word	g_armwave_state
 1864 0930 8C010000 		.word	.LC11
 1865              		.cfi_endproc
 1866              	.LFE64:
 1868              		.align	2
 1869              		.global	armwave_set_wave_pointer_u32
 1870              		.syntax unified
 1871              		.arm
 1872              		.fpu vfp
 1874              	armwave_set_wave_pointer_u32:
 1875              	.LVL110:
 1876              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1877              		.loc 1 350 1 is_stmt 1 view -0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1881              		.loc 1 351 5 view .LVU506
 1882 0934 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1883              		.loc 1 351 5 is_stmt 0 view .LVU507
 1884 0938 0200000A 		beq	.L100		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1885              		.loc 1 352 5 is_stmt 1 view .LVU508
 1886              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1887              		.loc 1 352 33 is_stmt 0 view .LVU509
 1888 093c 1C309FE5 		ldr	r3, .L101	@ tmp117,
 1889 0940 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1890 0944 1EFF2FE1 		bx	lr	@
 1891              	.L100:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1892              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU510
 1893              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1894              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU511
 1895 0948 10402DE9 		push	{r4, lr}	@
 1896              		.cfi_def_cfa_offset 8
 1897              		.cfi_offset 4, -8
 1898              		.cfi_offset 14, -4
 1899              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1900              		.loc 1 351 5 discriminator 1 view .LVU512
 1901 094c 10309FE5 		ldr	r3, .L101+4	@,
 1902 0950 10209FE5 		ldr	r2, .L101+8	@,
 1903 0954 10109FE5 		ldr	r1, .L101+12	@,
 1904 0958 10009FE5 		ldr	r0, .L101+16	@,
 1905              	.LVL111:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1906              		.loc 1 351 5 discriminator 1 view .LVU513
 1907 095c FEFFFFEB 		bl	__assert_fail		@
 1908              	.LVL112:
 1909              	.L102:
 1910              		.align	2
 1911              	.L101:
 1912 0960 00000000 		.word	g_armwave_state
 1913 0964 34000000 		.word	.LANCHOR0+52
 1914 0968 5F010000 		.word	351
 1915 096c 8C000000 		.word	.LC5
 1916 0970 C8010000 		.word	.LC12
 1917              		.cfi_endproc
 1918              	.LFE65:
 1920              		.align	2
 1921              		.global	armwave_clear_buffer
 1922              		.syntax unified
 1923              		.arm
 1924              		.fpu vfp
 1926              	armwave_clear_buffer:
 1927              	.LVL113:
 1928              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1929              		.loc 1 359 1 is_stmt 1 view -0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 1933              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1934              		.loc 1 361 5 view .LVU515
 1935              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1936              		.loc 1 361 58 is_stmt 0 view .LVU516
 1937 0974 0C309FE5 		ldr	r3, .L104	@ tmp114,
 1938              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1939              		.loc 1 361 5 view .LVU517
 1940 0978 0010A0E3 		mov	r1, #0	@,
 1941 097c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1942 0980 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1943              	.LVL114:
 1944              		.loc 1 361 5 view .LVU518
 1945 0984 FEFFFFEA 		b	memset		@
 1946              	.LVL115:
 1947              	.L105:
 1948              		.align	2
 1949              	.L104:
 1950 0988 00000000 		.word	g_armwave_state
 1951              		.cfi_endproc
 1952              	.LFE66:
 1954              		.align	2
 1955              		.global	armwave_set_channel_colour
 1956              		.syntax unified
 1957              		.arm
 1958              		.fpu vfp
 1960              	armwave_set_channel_colour:
 1961              	.LVL116:
 1962              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 1963              		.loc 1 368 1 is_stmt 1 view -0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 0
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 1967              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 1968              		.loc 1 370 5 view .LVU520
 1969 098c 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1970              		.loc 1 372 13 view .LVU521
 1971              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 1972              		.loc 1 372 41 is_stmt 0 view .LVU522
 1973 0990 0C009F05 		ldreq	r0, .L108	@ tmp117,
 1974              	.LVL117:
 1975              		.loc 1 372 41 view .LVU523
 1976 0994 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1977              		.loc 1 373 13 is_stmt 1 view .LVU524
 1978              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 1979              		.loc 1 373 41 is_stmt 0 view .LVU525
 1980 0998 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1981              		.loc 1 374 13 is_stmt 1 view .LVU526
 1982              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 1983              		.loc 1 374 41 is_stmt 0 view .LVU527
 1984 099c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 1985              		.loc 1 375 13 is_stmt 1 view .LVU528
 1986              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 1987              		.loc 1 377 1 is_stmt 0 view .LVU529
 1988 09a0 1EFF2FE1 		bx	lr	@
 1989              	.L109:
 1990              		.align	2
 1991              	.L108:
 1992 09a4 00000000 		.word	g_armwave_state
 1993              		.cfi_endproc
 1994              	.LFE67:
 1996              		.align	2
 1997              		.global	armwave_dump_ppm_debug
 1998              		.syntax unified
 1999              		.arm
 2000              		.fpu vfp
 2002              	armwave_dump_ppm_debug:
 2003              	.LVL118:
 2004              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 2005              		.loc 1 383 1 is_stmt 1 view -0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 0
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2009              		.loc 1 384 5 view .LVU531
 2010              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2011              		.loc 1 383 1 is_stmt 0 view .LVU532
 2012 09a8 0130A0E1 		mov	r3, r1	@ fn, fn
 2013 09ac F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2014              		.cfi_def_cfa_offset 28
 2015              		.cfi_offset 4, -28
 2016              		.cfi_offset 5, -24
 2017              		.cfi_offset 6, -20
 2018              		.cfi_offset 7, -16
 2019              		.cfi_offset 8, -12
 2020              		.cfi_offset 9, -8
 2021              		.cfi_offset 14, -4
 2022 09b0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2023 09b4 0CD04DE2 		sub	sp, sp, #12	@,,
 2024              		.cfi_def_cfa_offset 40
 2025              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 2026              		.loc 1 384 16 view .LVU533
 2027 09b8 C4109FE5 		ldr	r1, .L118	@,
 2028              	.LVL119:
 2029              		.loc 1 384 16 view .LVU534
 2030 09bc 0300A0E1 		mov	r0, r3	@, fn
 2031              	.LVL120:
 2032              		.loc 1 384 16 view .LVU535
 2033 09c0 FEFFFFEB 		bl	fopen64		@
 2034              	.LVL121:
 2035              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2036              		.loc 1 391 5 view .LVU536
 2037 09c4 BC609FE5 		ldr	r6, .L118+4	@ tmp150,
 2038              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2039              		.loc 1 390 5 view .LVU537
 2040 09c8 0320A0E3 		mov	r2, #3	@,
 2041 09cc 0110A0E3 		mov	r1, #1	@,
 2042              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 2043              		.loc 1 384 16 view .LVU538
 2044 09d0 0070A0E1 		mov	r7, r0	@ fp,
 2045              	.LVL122:
 385:armwave.c     ****     uint32_t data;
 2046              		.loc 1 385 5 is_stmt 1 view .LVU539
 386:armwave.c     **** 
 2047              		.loc 1 386 5 view .LVU540
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2048              		.loc 1 390 5 view .LVU541
 2049 09d4 0030A0E1 		mov	r3, r0	@, fp
 2050 09d8 AC009FE5 		ldr	r0, .L118+8	@,
 2051              	.LVL123:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2052              		.loc 1 390 5 is_stmt 0 view .LVU542
 2053 09dc FEFFFFEB 		bl	fwrite		@
 2054              	.LVL124:
 2055              		.loc 1 391 5 is_stmt 1 view .LVU543
 2056 09e0 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2057 09e4 A4109FE5 		ldr	r1, .L118+12	@,
 2058 09e8 0700A0E1 		mov	r0, r7	@, fp
 2059 09ec FEFFFFEB 		bl	fprintf		@
 2060              	.LVL125:
 392:armwave.c     ****     fputs("255\n", fp);
 2061              		.loc 1 392 5 view .LVU544
 2062 09f0 0420A0E3 		mov	r2, #4	@,
 2063 09f4 0730A0E1 		mov	r3, r7	@, fp
 2064 09f8 0110A0E3 		mov	r1, #1	@,
 2065 09fc 90009FE5 		ldr	r0, .L118+16	@,
 2066 0a00 FEFFFFEB 		bl	fwrite		@
 2067              	.LVL126:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2068              		.loc 1 394 5 view .LVU545
 2069              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2070              		.loc 1 394 37 is_stmt 0 view .LVU546
 2071 0a04 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2072              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2073              		.loc 1 394 5 view .LVU547
 2074 0a08 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2075 0a0c 180000DA 		ble	.L111		@,
 2076 0a10 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2077              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2078              		.loc 1 399 13 view .LVU548
 2079 0a14 7C909FE5 		ldr	r9, .L118+20	@ tmp152,
 2080              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2081              		.loc 1 394 12 view .LVU549
 2082 0a18 0050A0E3 		mov	r5, #0	@ yy,
 2083              	.LVL127:
 2084              	.L112:
 2085              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2086              		.loc 1 395 9 view .LVU550
 2087 0a1c 000053E3 		cmp	r3, #0	@ _13,
 2088              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2089              		.loc 1 395 16 view .LVU551
 2090 0a20 0040A0C3 		movgt	r4, #0	@ xx,
 2091              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2092              		.loc 1 395 9 view .LVU552
 2093 0a24 0F0000DA 		ble	.L114		@,
 2094              	.LVL128:
 2095              	.L113:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2096              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU553
 2097              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2098              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU554
 2099 0a28 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2100              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2101              		.loc 1 399 13 discriminator 3 view .LVU555
 2102 0a2c 0910A0E1 		mov	r1, r9	@, tmp152
 2103 0a30 0700A0E1 		mov	r0, r7	@, fp
 2104              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2105              		.loc 1 396 18 discriminator 3 view .LVU556
 2106 0a34 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2107              	.LVL129:
 2108              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU557
 2109              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2110              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU558
 2111 0a38 014084E2 		add	r4, r4, #1	@ xx, xx,
 2112              	.LVL130:
 2113              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2114              		.loc 1 399 81 discriminator 3 view .LVU559
 2115 0a3c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2116              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2117              		.loc 1 399 61 discriminator 3 view .LVU560
 2118 0a40 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2119              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2120              		.loc 1 399 13 discriminator 3 view .LVU561
 2121 0a44 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2122 0a48 7330EFE6 		uxtb	r3, r3	@, tmp142
 2123 0a4c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2124 0a50 7220EFE6 		uxtb	r2, r2	@, data
 2125              	.LVL131:
 2126              		.loc 1 399 13 discriminator 3 view .LVU562
 2127 0a54 FEFFFFEB 		bl	fprintf		@
 2128              	.LVL132:
 2129              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2130              		.loc 1 395 41 discriminator 3 view .LVU563
 2131 0a58 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2132              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2133              		.loc 1 395 9 discriminator 3 view .LVU564
 2134 0a5c 040053E1 		cmp	r3, r4	@ _13, xx
 2135 0a60 F0FFFFCA 		bgt	.L113		@,
 2136 0a64 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2137              	.LVL133:
 2138              	.L114:
 2139              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2140              		.loc 1 394 55 discriminator 2 view .LVU565
 2141 0a68 015085E2 		add	r5, r5, #1	@ yy, yy,
 2142              	.LVL134:
 2143              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2144              		.loc 1 394 5 discriminator 2 view .LVU566
 2145 0a6c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2146 0a70 E9FFFFBA 		blt	.L112		@,
 2147              	.LVL135:
 2148              	.L111:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 2149              		.loc 1 403 5 is_stmt 1 view .LVU567
 2150 0a74 0700A0E1 		mov	r0, r7	@, fp
 2151              	@ armwave.c:404: }
 404:armwave.c     **** }
 2152              		.loc 1 404 1 is_stmt 0 view .LVU568
 2153 0a78 0CD08DE2 		add	sp, sp, #12	@,,
 2154              		.cfi_def_cfa_offset 28
 2155              		@ sp needed	@
 2156 0a7c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2157              		.cfi_restore 14
 2158              		.cfi_restore 9
 2159              		.cfi_restore 8
 2160              		.cfi_restore 7
 2161              		.cfi_restore 6
 2162              		.cfi_restore 5
 2163              		.cfi_restore 4
 2164              		.cfi_def_cfa_offset 0
 2165              	.LVL136:
 2166              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2167              		.loc 1 403 5 view .LVU569
 2168 0a80 FEFFFFEA 		b	fclose		@
 2169              	.LVL137:
 2170              	.L119:
 403:armwave.c     **** }
 2171              		.loc 1 403 5 view .LVU570
 2172              		.align	2
 2173              	.L118:
 2174 0a84 E0010000 		.word	.LC13
 2175 0a88 00000000 		.word	g_armwave_state
 2176 0a8c E4010000 		.word	.LC14
 2177 0a90 E8010000 		.word	.LC15
 2178 0a94 F0010000 		.word	.LC16
 2179 0a98 F8010000 		.word	.LC17
 2180              		.cfi_endproc
 2181              	.LFE68:
 2183              		.align	2
 2184              		.global	armwave_test_init
 2185              		.syntax unified
 2186              		.arm
 2187              		.fpu vfp
 2189              	armwave_test_init:
 2190              	.LVL138:
 2191              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2192              		.loc 1 410 1 is_stmt 1 view -0
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 0
 2195              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2196              		.loc 1 411 5 view .LVU572
 2197              	.LBB16:
 2198              	.LBI16:
  34:armwave.c     **** {
 2199              		.loc 1 34 6 view .LVU573
  34:armwave.c     **** {
 2200              		.loc 1 34 6 is_stmt 0 view .LVU574
 2201              	.LBE16:
 2202              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2203              		.loc 1 410 1 view .LVU575
 2204 0a9c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2205              		.cfi_def_cfa_offset 32
 2206              		.cfi_offset 4, -32
 2207              		.cfi_offset 5, -28
 2208              		.cfi_offset 6, -24
 2209              		.cfi_offset 7, -20
 2210              		.cfi_offset 8, -16
 2211              		.cfi_offset 9, -12
 2212              		.cfi_offset 10, -8
 2213              		.cfi_offset 14, -4
 2214 0aa0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2215              		.cfi_def_cfa_offset 56
 2216              		.cfi_offset 80, -56
 2217              		.cfi_offset 81, -52
 2218              		.cfi_offset 82, -48
 2219              		.cfi_offset 83, -44
 2220              		.cfi_offset 84, -40
 2221              		.cfi_offset 85, -36
 2222 0aa4 C0409FE5 		ldr	r4, .L124+20	@ ivtmp.96,
 2223              	.LBB19:
 2224              	.LBB17:
 2225              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2226              		.loc 1 40 32 view .LVU576
 2227 0aa8 2EAA9FED 		vldr.32	s20, .L124+16	@ tmp136,
 2228              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2229              		.loc 1 40 26 view .LVU577
 2230 0aac 299B9FED 		vldr.64	d9, .L124	@ tmp151,
 2231              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2232              		.loc 1 40 49 view .LVU578
 2233 0ab0 2A8B9FED 		vldr.64	d8, .L124+8	@ tmp139,
 2234 0ab4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.96,
 2235              	.LBE17:
 2236              	.LBE19:
 2237              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2238              		.loc 1 410 1 view .LVU579
 2239 0ab8 10D04DE2 		sub	sp, sp, #16	@,,
 2240              		.cfi_def_cfa_offset 72
 2241              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2242              		.loc 1 410 1 view .LVU580
 2243 0abc 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2244 0ac0 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2245 0ac4 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2246 0ac8 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2247 0acc 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.96,
 2248 0ad0 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2249              	.LVL139:
 2250              	.L121:
 2251              	.LBB20:
 2252              	.LBB18:
  40:armwave.c     ****     }
 2253              		.loc 1 40 9 is_stmt 1 view .LVU581
 2254              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2255              		.loc 1 40 32 is_stmt 0 view .LVU582
 2256 0ad4 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.96
 2257              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2258              		.loc 1 40 26 view .LVU583
 2259 0ad8 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2260              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2261              		.loc 1 40 32 view .LVU584
 2262 0adc 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2263 0ae0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2264 0ae4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2265              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2266              		.loc 1 40 26 view .LVU585
 2267 0ae8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2268 0aec FEFFFFEB 		bl	pow		@
 2269              	.LVL140:
 2270              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2271              		.loc 1 40 49 view .LVU586
 2272 0af0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2273              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2274              		.loc 1 40 24 view .LVU587
 2275 0af4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2276 0af8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2277 0afc 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2278              	.LVL141:
 2279              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2280              		.loc 1 39 5 view .LVU588
 2281 0b00 0A0054E1 		cmp	r4, r10	@ ivtmp.96, _39
 2282 0b04 F2FFFF1A 		bne	.L121		@,
 2283              	.LVL142:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2284              		.loc 1 39 5 view .LVU589
 2285              	.LBE18:
 2286              	.LBE20:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2287              		.loc 1 414 5 is_stmt 1 view .LVU590
 2288              	.LBB21:
 2289              	.LBI21:
 367:armwave.c     **** {
 2290              		.loc 1 367 6 view .LVU591
 2291              	.LBB22:
 370:armwave.c     ****         case 1:
 2292              		.loc 1 370 5 view .LVU592
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2293              		.loc 1 372 13 view .LVU593
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2294              		.loc 1 373 13 view .LVU594
 2295              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2296              		.loc 1 372 41 is_stmt 0 view .LVU595
 2297 0b08 60C09FE5 		ldr	ip, .L124+24	@ tmp142,
 2298 0b0c 60409FE5 		ldr	r4, .L124+28	@ tmp143,
 2299              	.LBE22:
 2300              	.LBE21:
 2301              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2302              		.loc 1 416 5 view .LVU596
 2303 0b10 0000A0E3 		mov	r0, #0	@ tmp147,
 2304              	.LBB26:
 2305              	.LBB23:
 2306              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2307              		.loc 1 374 41 view .LVU597
 2308 0b14 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2309              	.LBE23:
 2310              	.LBE26:
 2311              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2312              		.loc 1 416 5 view .LVU598
 2313 0b18 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2314 0b1c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2315 0b20 00808DE5 		str	r8, [sp]	@ render_width,
 2316 0b24 0610A0E1 		mov	r1, r6	@, tmp3
 2317 0b28 0720A0E1 		mov	r2, r7	@, nwaves
 2318              	.LBB27:
 2319              	.LBB24:
 2320              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2321              		.loc 1 372 41 view .LVU599
 2322 0b2c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2323              		.loc 1 374 13 is_stmt 1 view .LVU600
 2324              	.LBE24:
 2325              	.LBE27:
 2326              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2327              		.loc 1 416 5 is_stmt 0 view .LVU601
 2328 0b30 0630A0E1 		mov	r3, r6	@, wave_size
 2329              	.LBB28:
 2330              	.LBB25:
 2331              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2332              		.loc 1 374 41 view .LVU602
 2333 0b34 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2334              		.loc 1 375 13 is_stmt 1 view .LVU603
 2335              	.LVL143:
 375:armwave.c     ****     }
 2336              		.loc 1 375 13 is_stmt 0 view .LVU604
 2337              	.LBE25:
 2338              	.LBE28:
 2339              		.loc 1 416 5 is_stmt 1 view .LVU605
 2340 0b38 FEFFFFEB 		bl	armwave_setup_render		@
 2341              	.LVL144:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2342              		.loc 1 418 5 view .LVU606
 2343 0b3c 34109FE5 		ldr	r1, .L124+32	@,
 2344 0b40 34009FE5 		ldr	r0, .L124+36	@,
 2345              	@ armwave.c:419: }
 419:armwave.c     **** }
 2346              		.loc 1 419 1 is_stmt 0 view .LVU607
 2347 0b44 10D08DE2 		add	sp, sp, #16	@,,
 2348              		.cfi_def_cfa_offset 56
 2349              		@ sp needed	@
 2350 0b48 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2351              		.cfi_restore 84
 2352              		.cfi_restore 85
 2353              		.cfi_restore 82
 2354              		.cfi_restore 83
 2355              		.cfi_restore 80
 2356              		.cfi_restore 81
 2357              		.cfi_def_cfa_offset 32
 2358 0b4c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2359              		.cfi_restore 14
 2360              		.cfi_restore 10
 2361              		.cfi_restore 9
 2362              		.cfi_restore 8
 2363              		.cfi_restore 7
 2364              		.cfi_restore 6
 2365              		.cfi_restore 5
 2366              		.cfi_restore 4
 2367              		.cfi_def_cfa_offset 0
 2368              	.LVL145:
 2369              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2370              		.loc 1 418 5 view .LVU608
 2371 0b50 FEFFFFEA 		b	printf		@
 2372              	.LVL146:
 2373              	.L125:
 2374 0b54 0000A0E1 		.align	3
 2375              	.L124:
 2376 0b58 000000C0 		.word	-1073741824
 2377 0b5c CCCCEC3F 		.word	1072483532
 2378 0b60 00000000 		.word	0
 2379 0b64 00E06F40 		.word	1081073664
 2380 0b68 00007F43 		.word	1132396544
 2381 0b6c FFFFFFFF 		.word	gamma_table-1
 2382 0b70 00000000 		.word	g_armwave_state
 2383 0b74 F609F406 		.word	116656630
 2384 0b78 00000000 		.word	.LC0
 2385 0b7c 08000000 		.word	.LC1
 2386              		.cfi_endproc
 2387              	.LFE69:
 2389              		.align	2
 2390              		.global	armwave_test_fill_outbuf
 2391              		.syntax unified
 2392              		.arm
 2393              		.fpu vfp
 2395              	armwave_test_fill_outbuf:
 2396              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2397              		.loc 1 425 1 is_stmt 1 view -0
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 0
 2400              		@ frame_needed = 0, uses_anonymous_args = 0
 2401              		@ link register save eliminated.
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2402              		.loc 1 426 5 view .LVU610
 2403 0b80 04309FE5 		ldr	r3, .L127	@ tmp111,
 2404 0b84 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2405 0b88 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2406              	.LVL147:
 2407              	.L128:
 2408              		.align	2
 2409              	.L127:
 2410 0b8c 00000000 		.word	g_armwave_state
 2411              		.cfi_endproc
 2412              	.LFE70:
 2414              		.align	2
 2415              		.global	armwave_test_dump_buffer_to_ppm
 2416              		.syntax unified
 2417              		.arm
 2418              		.fpu vfp
 2420              	armwave_test_dump_buffer_to_ppm:
 2421              	.LVL148:
 2422              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2423              		.loc 1 433 1 view -0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2428              		.loc 1 434 5 view .LVU612
 2429 0b90 08309FE5 		ldr	r3, .L130	@ tmp112,
 2430 0b94 0010A0E1 		mov	r1, r0	@, fn
 2431 0b98 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2432              	.LVL149:
 2433              		.loc 1 434 5 is_stmt 0 view .LVU613
 2434 0b9c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2435              	.LVL150:
 2436              	.L131:
 2437              		.loc 1 434 5 view .LVU614
 2438              		.align	2
 2439              	.L130:
 2440 0ba0 00000000 		.word	g_armwave_state
 2441              		.cfi_endproc
 2442              	.LFE71:
 2444              		.align	2
 2445              		.global	armwave_test_fill_gdkbuf
 2446              		.syntax unified
 2447              		.arm
 2448              		.fpu vfp
 2450              	armwave_test_fill_gdkbuf:
 2451              	.LVL151:
 2452              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2453              		.loc 1 441 1 is_stmt 1 view -0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 0
 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457              		@ link register save eliminated.
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2458              		.loc 1 446 5 view .LVU616
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2459              		.loc 1 449 5 view .LVU617
 2460              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 446:armwave.c     ****     
 2461              		.loc 1 446 11 is_stmt 0 view .LVU618
 2462 0ba4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2463              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2464              		.loc 1 449 5 view .LVU619
 2465 0ba8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2466              	.LVL152:
 2467              		.loc 1 449 5 view .LVU620
 2468 0bac FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2469              	.LVL153:
 2470              		.loc 1 449 5 view .LVU621
 2471              		.cfi_endproc
 2472              	.LFE72:
 2474              		.align	2
 2475              		.global	armwave_test_buffer_alloc
 2476              		.syntax unified
 2477              		.arm
 2478              		.fpu vfp
 2480              	armwave_test_buffer_alloc:
 2481              	.LVL154:
 2482              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2483              		.loc 1 456 1 is_stmt 1 view -0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 0
 2486              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2487              		.loc 1 457 5 view .LVU623
 2488              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2489              		.loc 1 456 1 is_stmt 0 view .LVU624
 2490 0bb0 70402DE9 		push	{r4, r5, r6, lr}	@
 2491              		.cfi_def_cfa_offset 16
 2492              		.cfi_offset 4, -16
 2493              		.cfi_offset 5, -12
 2494              		.cfi_offset 6, -8
 2495              		.cfi_offset 14, -4
 2496              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2497              		.loc 1 456 1 view .LVU625
 2498 0bb4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2499              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2500              		.loc 1 457 23 view .LVU626
 2501 0bb8 44409FE5 		ldr	r4, .L140	@ tmp128,
 2502 0bbc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2503              	.LVL155:
 2504              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2505              		.loc 1 457 7 view .LVU627
 2506 0bc0 000050E3 		cmp	r0, #0	@ _1,
 2507 0bc4 0000000A 		beq	.L134		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2508              		.loc 1 458 9 is_stmt 1 view .LVU628
 2509 0bc8 FEFFFFEB 		bl	free		@
 2510              	.LVL156:
 2511              	.L134:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2512              		.loc 1 463 5 view .LVU629
 2513              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2514              		.loc 1 463 75 is_stmt 0 view .LVU630
 2515 0bcc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2516 0bd0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2517              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2518              		.loc 1 463 40 view .LVU631
 2519 0bd4 0610A0E1 		mov	r1, r6	@, nsets
 2520              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2521              		.loc 1 463 75 view .LVU632
 2522 0bd8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2523              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2524              		.loc 1 463 40 view .LVU633
 2525 0bdc 0500A0E1 		mov	r0, r5	@, _4
 2526 0be0 FEFFFFEB 		bl	calloc		@
 2527              	.LVL157:
 2528              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2529              		.loc 1 465 7 view .LVU634
 2530 0be4 000050E3 		cmp	r0, #0	@ tmp124,
 2531              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2532              		.loc 1 463 38 view .LVU635
 2533 0be8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2534              		.loc 1 465 5 is_stmt 1 view .LVU636
 2535              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2536              		.loc 1 465 7 is_stmt 0 view .LVU637
 2537 0bec 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2538              		.loc 1 466 9 is_stmt 1 view .LVU638
 2539 0bf0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2540 0bf4 0620A0E1 		mov	r2, r6	@, nsets
 2541 0bf8 08009FE5 		ldr	r0, .L140+4	@,
 2542              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2543              		.loc 1 470 1 is_stmt 0 view .LVU639
 2544 0bfc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2545              		.cfi_restore 14
 2546              		.cfi_restore 6
 2547              		.cfi_restore 5
 2548              		.cfi_restore 4
 2549              		.cfi_def_cfa_offset 0
 2550              	.LVL158:
 2551              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2552              		.loc 1 466 9 view .LVU640
 2553 0c00 FEFFFFEA 		b	printf		@
 2554              	.LVL159:
 2555              	.L141:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2556              		.loc 1 466 9 view .LVU641
 2557              		.align	2
 2558              	.L140:
 2559 0c04 00000000 		.word	g_armwave_state
 2560 0c08 08020000 		.word	.LC18
 2561              		.cfi_endproc
 2562              	.LFE73:
 2564              		.align	2
 2565              		.global	armwave_fill_pixbuf_into_pybuffer
 2566              		.syntax unified
 2567              		.arm
 2568              		.fpu vfp
 2570              	armwave_fill_pixbuf_into_pybuffer:
 2571              	.LVL160:
 2572              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2573              		.loc 1 476 1 is_stmt 1 view -0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 48
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2577              		.loc 1 477 5 view .LVU643
 478:armwave.c     ****     int ret;
 2578              		.loc 1 478 5 view .LVU644
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2579              		.loc 1 482 5 view .LVU645
 2580              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2581              		.loc 1 476 1 is_stmt 0 view .LVU646
 2582 0c0c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2583              		.cfi_def_cfa_offset 4
 2584              		.cfi_offset 14, -4
 2585 0c10 34D04DE2 		sub	sp, sp, #52	@,,
 2586              		.cfi_def_cfa_offset 56
 2587              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2588              		.loc 1 482 11 view .LVU647
 2589 0c14 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2590 0c18 0120A0E3 		mov	r2, #1	@,
 2591 0c1c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2592              	.LVL161:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2593              		.loc 1 484 5 is_stmt 1 view .LVU648
 2594              	@ armwave.c:484:     if(ret != 0) {
 2595              		.loc 1 484 7 is_stmt 0 view .LVU649
 2596 0c20 000050E3 		cmp	r0, #0	@,
 2597 0c24 0A00001A 		bne	.L146		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2598              		.loc 1 491 5 is_stmt 1 view .LVU650
 2599 0c28 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2600              	.LVL162:
 2601              		.loc 1 491 5 is_stmt 0 view .LVU651
 2602 0c2c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2603              	.LVL163:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2604              		.loc 1 494 5 is_stmt 1 view .LVU652
 2605 0c30 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2606 0c34 FEFFFFEB 		bl	PyBuffer_Release		@
 2607              	.LVL164:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2608              		.loc 1 497 5 view .LVU653
 2609              	.LBB29:
 2610              	.LBI29:
 2611              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2612              		.loc 2 456 20 view .LVU654
 2613              	.LBB30:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2614              		.loc 2 458 21 view .LVU655
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2615              		.loc 2 459 5 view .LVU656
 2616              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2617              		.loc 2 459 18 is_stmt 0 view .LVU657
 2618 0c38 38309FE5 		ldr	r3, .L147	@ tmp126,
 2619              	.LBE30:
 2620              	.LBE29:
 2621              	@ armwave.c:497:     Py_RETURN_TRUE;
 2622              		.loc 1 497 5 view .LVU658
 2623 0c3c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2624              	.LBB32:
 2625              	.LBB31:
 2626              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2627              		.loc 2 459 18 view .LVU659
 2628 0c40 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2629 0c44 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2630 0c48 002083E5 		str	r2, [r3]	@ tmp128,
 2631              	.LBE31:
 2632              	.LBE32:
 2633              	@ armwave.c:498: }
 498:armwave.c     **** }
 2634              		.loc 1 498 1 view .LVU660
 2635 0c4c 34D08DE2 		add	sp, sp, #52	@,,
 2636              		.cfi_remember_state
 2637              		.cfi_def_cfa_offset 4
 2638              		@ sp needed	@
 2639 0c50 04F09DE4 		ldr	pc, [sp], #4	@
 2640              	.LVL165:
 2641              	.L146:
 2642              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 2643              		.loc 1 485 9 is_stmt 1 view .LVU661
 2644 0c54 20009FE5 		ldr	r0, .L147+4	@,
 2645              	.LVL166:
 485:armwave.c     ****         Py_RETURN_FALSE;
 2646              		.loc 1 485 9 is_stmt 0 view .LVU662
 2647 0c58 FEFFFFEB 		bl	puts		@
 2648              	.LVL167:
 486:armwave.c     ****     }
 2649              		.loc 1 486 9 is_stmt 1 view .LVU663
 2650              	.LBB33:
 2651              	.LBI33:
 456:/usr/local/include/python3.8/object.h **** {
 2652              		.loc 2 456 20 view .LVU664
 2653              	.LBB34:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2654              		.loc 2 458 21 view .LVU665
 2655              		.loc 2 459 5 view .LVU666
 2656              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2657              		.loc 2 459 18 is_stmt 0 view .LVU667
 2658 0c5c 1C309FE5 		ldr	r3, .L147+8	@ tmp120,
 2659              	.LBE34:
 2660              	.LBE33:
 2661              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 2662              		.loc 1 486 9 view .LVU668
 2663 0c60 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2664              	.LBB36:
 2665              	.LBB35:
 2666              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2667              		.loc 2 459 18 view .LVU669
 2668 0c64 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2669 0c68 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2670 0c6c 002083E5 		str	r2, [r3]	@ tmp122,
 2671              	.LBE35:
 2672              	.LBE36:
 2673              	@ armwave.c:498: }
 2674              		.loc 1 498 1 view .LVU670
 2675 0c70 34D08DE2 		add	sp, sp, #52	@,,
 2676              		.cfi_def_cfa_offset 4
 2677              		@ sp needed	@
 2678 0c74 04F09DE4 		ldr	pc, [sp], #4	@
 2679              	.L148:
 2680              		.align	2
 2681              	.L147:
 2682 0c78 00000000 		.word	_Py_TrueStruct
 2683 0c7c 5C020000 		.word	.LC19
 2684 0c80 00000000 		.word	_Py_FalseStruct
 2685              		.cfi_endproc
 2686              	.LFE74:
 2688              		.align	2
 2689              		.global	armwave_test_create_am_sine
 2690              		.syntax unified
 2691              		.arm
 2692              		.fpu vfp
 2694              	armwave_test_create_am_sine:
 2695              	.LVL168:
 2696              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 2697              		.loc 1 508 1 is_stmt 1 view -0
 2698              		.cfi_startproc
 2699              		@ args = 0, pretend = 0, frame = 8
 2700              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2701              		.loc 1 509 5 view .LVU672
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2702              		.loc 1 510 5 view .LVU673
 2703              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2704              		.loc 1 508 1 is_stmt 0 view .LVU674
 2705 0c84 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2706              		.cfi_def_cfa_offset 32
 2707              		.cfi_offset 4, -32
 2708              		.cfi_offset 5, -28
 2709              		.cfi_offset 6, -24
 2710              		.cfi_offset 7, -20
 2711              		.cfi_offset 8, -16
 2712              		.cfi_offset 9, -12
 2713              		.cfi_offset 10, -8
 2714              		.cfi_offset 14, -4
 2715              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2716              		.loc 1 510 38 view .LVU675
 2717 0c88 7A7A9FED 		vldr.32	s14, .L180	@ tmp180,
 2718              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2719              		.loc 1 510 55 view .LVU676
 2720 0c8c 00529FE5 		ldr	r5, .L180+28	@ tmp250,
 2721              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2722              		.loc 1 508 1 view .LVU677
 2723 0c90 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2724              		.cfi_def_cfa_offset 80
 2725              		.cfi_offset 80, -80
 2726              		.cfi_offset 81, -76
 2727              		.cfi_offset 82, -72
 2728              		.cfi_offset 83, -68
 2729              		.cfi_offset 84, -64
 2730              		.cfi_offset 85, -60
 2731              		.cfi_offset 86, -56
 2732              		.cfi_offset 87, -52
 2733              		.cfi_offset 88, -48
 2734              		.cfi_offset 89, -44
 2735              		.cfi_offset 90, -40
 2736              		.cfi_offset 91, -36
 2737 0c94 0090A0E1 		mov	r9, r0	@ sets, sets
 2738              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2739              		.loc 1 510 38 view .LVU678
 2740 0c98 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2741              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2742              		.loc 1 514 70 view .LVU679
 2743 0c9c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2744 0ca0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2745              	.LBB39:
 2746              	.LBB40:
 2747              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2748              		.loc 1 457 23 view .LVU680
 2749 0ca4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2750              	.LVL169:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2751              		.loc 1 457 23 view .LVU681
 2752              	.LBE40:
 2753              	.LBE39:
 2754              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2755              		.loc 1 510 38 view .LVU682
 2756 0ca8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2757              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2758              		.loc 1 514 70 view .LVU683
 2759 0cac 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2760              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2761              		.loc 1 508 1 view .LVU684
 2762 0cb0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2763              	.LBB44:
 2764              	.LBB41:
 2765              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2766              		.loc 1 457 7 view .LVU685
 2767 0cb4 000050E3 		cmp	r0, #0	@ _82,
 2768              	.LBE41:
 2769              	.LBE44:
 2770              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2771              		.loc 1 508 1 view .LVU686
 2772 0cb8 08D04DE2 		sub	sp, sp, #8	@,,
 2773              		.cfi_def_cfa_offset 88
 2774              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2775              		.loc 1 515 44 view .LVU687
 2776 0cbc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2777              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2778              		.loc 1 514 45 view .LVU688
 2779 0cc0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2780              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2781              		.loc 1 510 38 view .LVU689
 2782 0cc4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2783              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2784              		.loc 1 510 11 view .LVU690
 2785 0cc8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2786              	.LVL170:
 511:armwave.c     ****     int w, x;
 2787              		.loc 1 511 5 is_stmt 1 view .LVU691
 512:armwave.c     **** 
 2788              		.loc 1 512 5 view .LVU692
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2789              		.loc 1 514 5 view .LVU693
 2790              		.loc 1 515 5 view .LVU694
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2791              		.loc 1 516 5 view .LVU695
 2792              	.LBB45:
 2793              	.LBI39:
 455:armwave.c     **** {
 2794              		.loc 1 455 6 view .LVU696
 2795              	.LBB42:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2796              		.loc 1 457 5 view .LVU697
 2797              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2798              		.loc 1 457 7 is_stmt 0 view .LVU698
 2799 0ccc 0000000A 		beq	.L150		@,
 458:armwave.c     ****     }
 2800              		.loc 1 458 9 is_stmt 1 view .LVU699
 2801 0cd0 FEFFFFEB 		bl	free		@
 2802              	.LVL171:
 2803              	.L150:
 463:armwave.c     **** 
 2804              		.loc 1 463 5 view .LVU700
 2805              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2806              		.loc 1 463 75 is_stmt 0 view .LVU701
 2807 0cd4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2808 0cd8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2809              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2810              		.loc 1 463 40 view .LVU702
 2811 0cdc 0910A0E1 		mov	r1, r9	@, sets
 2812              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2813              		.loc 1 463 75 view .LVU703
 2814 0ce0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2815              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2816              		.loc 1 463 40 view .LVU704
 2817 0ce4 0400A0E1 		mov	r0, r4	@, _85
 2818 0ce8 FEFFFFEB 		bl	calloc		@
 2819              	.LVL172:
 2820              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2821              		.loc 1 465 7 view .LVU705
 2822 0cec 000050E3 		cmp	r0, #0	@ tmp191,
 2823              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2824              		.loc 1 463 38 view .LVU706
 2825 0cf0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2826              		.loc 1 465 5 is_stmt 1 view .LVU707
 2827              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2828              		.loc 1 465 7 is_stmt 0 view .LVU708
 2829 0cf4 5A00000A 		beq	.L179		@,
 2830              	.L151:
 2831              	.LVL173:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2832              		.loc 1 465 7 view .LVU709
 2833              	.LBE42:
 2834              	.LBE45:
 2835              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 2836              		.loc 1 518 5 discriminator 1 view .LVU710
 2837 0cf8 000059E3 		cmp	r9, #0	@ sets,
 2838 0cfc 550000DA 		ble	.L149		@,
 2839              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2840              		.loc 1 537 45 view .LVU711
 2841 0d00 5C8A9FED 		vldr.32	s16, .L180	@ tmp258,
 2842              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2843              		.loc 1 540 104 view .LVU712
 2844 0d04 5CCA9FED 		vldr.32	s24, .L180+4	@ tmp259,
 2845              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2846              		.loc 1 518 5 view .LVU713
 2847 0d08 0070A0E3 		mov	r7, #0	@ set_offset,
 2848              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2849              		.loc 1 519 9 view .LVU714
 2850 0d0c 84A19FE5 		ldr	r10, .L180+32	@ tmp257,
 2851              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2852              		.loc 1 518 5 view .LVU715
 2853 0d10 0780A0E1 		mov	r8, r7	@ s, set_offset
 2854              	.LVL174:
 2855              	.L152:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2856              		.loc 1 519 9 is_stmt 1 view .LVU716
 2857 0d14 0810A0E1 		mov	r1, r8	@, s
 2858 0d18 0A00A0E1 		mov	r0, r10	@, tmp257
 2859 0d1c FEFFFFEB 		bl	printf		@
 2860              	.LVL175:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2861              		.loc 1 521 9 view .LVU717
 2862              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2863              		.loc 1 521 39 is_stmt 0 view .LVU718
 2864 0d20 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2865              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2866              		.loc 1 521 9 view .LVU719
 2867 0d24 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2868 0d28 450000DA 		ble	.L153		@,
 2869              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2870              		.loc 1 523 21 view .LVU720
 2871 0d2c 53CADFED 		vldr.32	s25, .L180+8	@ tmp200,
 2872              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2873              		.loc 1 537 33 view .LVU721
 2874 0d30 53BA9FED 		vldr.32	s22, .L180+12	@ tmp253,
 2875              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2876              		.loc 1 535 24 view .LVU722
 2877 0d34 53AADFED 		vldr.32	s21, .L180+16	@ tmp254,
 2878 0d38 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2879              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2880              		.loc 1 521 15 view .LVU723
 2881 0d3c 0060A0E3 		mov	r6, #0	@ w,
 2882              	.LVL176:
 2883              	.L160:
 523:armwave.c     **** 
 2884              		.loc 1 523 13 is_stmt 1 view .LVU724
 2885              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2886              		.loc 1 523 21 is_stmt 0 view .LVU725
 2887 0d40 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2888 0d44 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2889              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2890              		.loc 1 525 13 view .LVU726
 2891 0d48 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2892              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2893              		.loc 1 523 21 view .LVU727
 2894 0d4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2895 0d50 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2896              	.LVL177:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2897              		.loc 1 525 13 is_stmt 1 view .LVU728
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2898              		.loc 1 525 13 is_stmt 0 view .LVU729
 2899 0d54 370000DA 		ble	.L154		@,
 2900 0d58 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2901              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2902              		.loc 1 540 113 view .LVU730
 2903 0d5c 4AAA9FED 		vldr.32	s20, .L180+20	@ tmp229,
 2904 0d60 4A8ADFED 		vldr.32	s17, .L180+24	@ tmp230,
 2905              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2906              		.loc 1 525 19 view .LVU731
 2907 0d64 0040A0E3 		mov	r4, #0	@ x,
 2908              	.LVL178:
 2909              	.L159:
 526:armwave.c     ****                 noise *= noise;
 2910              		.loc 1 526 17 is_stmt 1 view .LVU732
 2911              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2912              		.loc 1 526 28 is_stmt 0 view .LVU733
 2913 0d68 FEFFFFEB 		bl	rand		@
 2914              	.LVL179:
 2915              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2916              		.loc 1 526 35 view .LVU734
 2917 0d6c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2918              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2919              		.loc 1 526 45 view .LVU735
 2920 0d70 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2921 0d74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2922              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2923              		.loc 1 526 24 view .LVU736
 2924 0d78 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2925              	.LVL180:
 527:armwave.c     ****                 noise *= noise;
 2926              		.loc 1 527 17 is_stmt 1 view .LVU737
 2927              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2928              		.loc 1 527 23 is_stmt 0 view .LVU738
 2929 0d7c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2930              	.LVL181:
 528:armwave.c     ****                 noise *= noise;
 2931              		.loc 1 528 17 is_stmt 1 view .LVU739
 2932              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2933              		.loc 1 528 23 is_stmt 0 view .LVU740
 2934 0d80 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2935              	.LVL182:
 529:armwave.c     **** 
 2936              		.loc 1 529 17 is_stmt 1 view .LVU741
 2937              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 2938              		.loc 1 529 23 is_stmt 0 view .LVU742
 2939 0d84 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2940              	.LVL183:
 531:armwave.c     ****                     noise = -noise;
 2941              		.loc 1 531 17 is_stmt 1 view .LVU743
 2942              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2943              		.loc 1 531 21 is_stmt 0 view .LVU744
 2944 0d88 FEFFFFEB 		bl	rand		@
 2945              	.LVL184:
 532:armwave.c     **** 
 2946              		.loc 1 532 21 is_stmt 1 view .LVU745
 2947              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2948              		.loc 1 531 19 is_stmt 0 view .LVU746
 2949 0d8c 020910E3 		tst	r0, #32768	@,
 2950              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 2951              		.loc 1 532 27 view .LVU747
 2952 0d90 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2953              	.LVL185:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2954              		.loc 1 534 17 is_stmt 1 view .LVU748
 535:armwave.c     **** 
 2955              		.loc 1 535 17 view .LVU749
 2956              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2957              		.loc 1 535 27 is_stmt 0 view .LVU750
 2958 0d94 FEFFFFEB 		bl	rand		@
 2959              	.LVL186:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2960              		.loc 1 537 17 is_stmt 1 view .LVU751
 2961              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2962              		.loc 1 537 45 is_stmt 0 view .LVU752
 2963 0d98 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2964              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2965              		.loc 1 537 33 view .LVU753
 2966 0d9c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2967              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2968              		.loc 1 537 45 view .LVU754
 2969 0da0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2970              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2971              		.loc 1 537 33 view .LVU755
 2972 0da4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2973              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2974              		.loc 1 537 45 view .LVU756
 2975 0da8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2976              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2977              		.loc 1 537 33 view .LVU757
 2978 0dac 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2979              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2980              		.loc 1 535 34 view .LVU758
 2981 0db0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2982              	.LVL187:
 2983              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2984              		.loc 1 535 44 view .LVU759
 2985 0db4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2986 0db8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2987              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2988              		.loc 1 535 24 view .LVU760
 2989 0dbc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2990              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2991              		.loc 1 537 77 view .LVU761
 2992 0dc0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2993              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2994              		.loc 1 537 22 view .LVU762
 2995 0dc4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2996 0dc8 FEFFFFEB 		bl	sin		@
 2997              	.LVL188:
 2998              		.loc 1 540 17 is_stmt 1 view .LVU763
 2999              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3000              		.loc 1 534 23 is_stmt 0 view .LVU764
 3001 0dcc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3002              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3003              		.loc 1 540 104 view .LVU765
 3004 0dd0 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 3005              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3006              		.loc 1 537 98 view .LVU766
 3007 0dd4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3008              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3009              		.loc 1 537 87 view .LVU767
 3010 0dd8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3011              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3012              		.loc 1 537 98 view .LVU768
 3013 0ddc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3014              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3015              		.loc 1 537 19 view .LVU769
 3016 0de0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3017              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3018              		.loc 1 540 113 view .LVU770
 3019 0de4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3020 0de8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3021 0dec C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3022 0df0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3023 0df4 050000DA 		ble	.L156		@,
 3024              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3025              		.loc 1 540 104 discriminator 1 view .LVU771
 3026 0df8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3027 0dfc FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 3028 0e00 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3029 0e04 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3030 0e08 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3031 0e0c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 3032              	.L156:
 3033              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3034              		.loc 1 540 57 discriminator 12 view .LVU772
 3035 0e10 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3036              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3037              		.loc 1 540 102 discriminator 12 view .LVU773
 3038 0e14 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3039 0e18 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3040 0e1c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3041              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3042              		.loc 1 525 58 discriminator 12 view .LVU774
 3043 0e20 014084E2 		add	r4, r4, #1	@ x, x,
 3044              	.LVL189:
 3045              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3046              		.loc 1 540 102 discriminator 12 view .LVU775
 3047 0e24 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 3048              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3049              		.loc 1 525 43 discriminator 12 view .LVU776
 3050 0e28 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3051              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3052              		.loc 1 525 13 discriminator 12 view .LVU777
 3053 0e2c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3054 0e30 CCFFFFCA 		bgt	.L159		@,
 3055 0e34 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3056              	.LVL190:
 3057              	.L154:
 3058              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3059              		.loc 1 521 48 discriminator 2 view .LVU778
 3060 0e38 016086E2 		add	r6, r6, #1	@ w, w,
 3061              	.LVL191:
 3062              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3063              		.loc 1 521 9 discriminator 2 view .LVU779
 3064 0e3c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3065 0e40 BEFFFFBA 		blt	.L160		@,
 3066              	.LVL192:
 3067              	.L153:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3068              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU780
 3069              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3070              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU781
 3071 0e44 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3072              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3073              		.loc 1 518 27 discriminator 2 view .LVU782
 3074 0e48 018088E2 		add	r8, r8, #1	@ s, s,
 3075              	.LVL193:
 3076              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3077              		.loc 1 518 5 discriminator 2 view .LVU783
 3078 0e4c 080059E1 		cmp	r9, r8	@ sets, s
 3079              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3080              		.loc 1 544 20 discriminator 2 view .LVU784
 3081 0e50 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3082              	.LVL194:
 3083              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3084              		.loc 1 518 5 discriminator 2 view .LVU785
 3085 0e54 AEFFFF1A 		bne	.L152		@,
 3086              	.LVL195:
 3087              	.L149:
 3088              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 3089              		.loc 1 546 1 view .LVU786
 3090 0e58 08D08DE2 		add	sp, sp, #8	@,,
 3091              		.cfi_remember_state
 3092              		.cfi_def_cfa_offset 80
 3093              		@ sp needed	@
 3094 0e5c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3095              		.cfi_restore 90
 3096              		.cfi_restore 91
 3097              		.cfi_restore 88
 3098              		.cfi_restore 89
 3099              		.cfi_restore 86
 3100              		.cfi_restore 87
 3101              		.cfi_restore 84
 3102              		.cfi_restore 85
 3103              		.cfi_restore 82
 3104              		.cfi_restore 83
 3105              		.cfi_restore 80
 3106              		.cfi_restore 81
 3107              		.cfi_def_cfa_offset 32
 3108              	.LVL196:
 3109              		.loc 1 546 1 view .LVU787
 3110 0e60 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3111              	.LVL197:
 3112              	.L179:
 3113              		.cfi_restore_state
 3114              	.LBB46:
 3115              	.LBB43:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3116              		.loc 1 466 9 is_stmt 1 view .LVU788
 3117 0e64 940901E0 		mul	r1, r4, r9	@, _85, sets
 3118 0e68 0920A0E1 		mov	r2, r9	@, sets
 3119 0e6c 28009FE5 		ldr	r0, .L180+36	@,
 3120 0e70 FEFFFFEB 		bl	printf		@
 3121              	.LVL198:
 468:armwave.c     ****     }
 3122              		.loc 1 468 9 view .LVU789
 3123 0e74 9FFFFFEA 		b	.L151		@
 3124              	.L181:
 3125              		.align	2
 3126              	.L180:
 3127 0e78 0000803F 		.word	1065353216
 3128 0e7c 00007F43 		.word	1132396544
 3129 0e80 0000003F 		.word	1056964608
 3130 0e84 C3F5C840 		.word	1086911939
 3131 0e88 38FFC74A 		.word	1254620984
 3132 0e8c 0000FE42 		.word	1123942400
 3133 0e90 00000043 		.word	1124073472
 3134 0e94 00000000 		.word	g_armwave_state
 3135 0e98 B0020000 		.word	.LC20
 3136 0e9c 08020000 		.word	.LC18
 3137              	.LBE43:
 3138              	.LBE46:
 3139              		.cfi_endproc
 3140              	.LFE75:
 3142              		.align	2
 3143              		.global	armwave_cleanup
 3144              		.syntax unified
 3145              		.arm
 3146              		.fpu vfp
 3148              	armwave_cleanup:
 3149              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 3150              		.loc 1 596 1 view -0
 3151              		.cfi_startproc
 3152              		@ args = 0, pretend = 0, frame = 0
 3153              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3154              		.loc 1 597 5 view .LVU791
 3155              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3156              		.loc 1 596 1 is_stmt 0 view .LVU792
 3157 0ea0 10402DE9 		push	{r4, lr}	@
 3158              		.cfi_def_cfa_offset 8
 3159              		.cfi_offset 4, -8
 3160              		.cfi_offset 14, -4
 3161              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3162              		.loc 1 597 25 view .LVU793
 3163 0ea4 34409FE5 		ldr	r4, .L184	@ tmp114,
 3164              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3165              		.loc 1 597 5 view .LVU794
 3166 0ea8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3167 0eac FEFFFFEB 		bl	free		@
 3168              	.LVL199:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3169              		.loc 1 598 5 is_stmt 1 view .LVU795
 3170 0eb0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3171 0eb4 FEFFFFEB 		bl	free		@
 3172              	.LVL200:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3173              		.loc 1 599 5 view .LVU796
 3174 0eb8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3175 0ebc FEFFFFEB 		bl	free		@
 3176              	.LVL201:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3177              		.loc 1 600 5 view .LVU797
 3178 0ec0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3179 0ec4 FEFFFFEB 		bl	free		@
 3180              	.LVL202:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3181              		.loc 1 602 5 view .LVU798
 3182              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3183              		.loc 1 602 32 is_stmt 0 view .LVU799
 3184 0ec8 0030A0E3 		mov	r3, #0	@ tmp123,
 3185 0ecc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3186              		.loc 1 603 5 is_stmt 1 view .LVU800
 3187              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3188              		.loc 1 603 32 is_stmt 0 view .LVU801
 3189 0ed0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3190              		.loc 1 604 5 is_stmt 1 view .LVU802
 3191              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3192              		.loc 1 604 38 is_stmt 0 view .LVU803
 3193 0ed4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3194              		.loc 1 605 5 is_stmt 1 view .LVU804
 3195              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3196              		.loc 1 605 38 is_stmt 0 view .LVU805
 3197 0ed8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3198              	@ armwave.c:606: }
 606:armwave.c     **** }
 3199              		.loc 1 606 1 view .LVU806
 3200 0edc 1080BDE8 		pop	{r4, pc}	@
 3201              	.L185:
 3202              		.align	2
 3203              	.L184:
 3204 0ee0 00000000 		.word	g_armwave_state
 3205              		.cfi_endproc
 3206              	.LFE76:
 3208              		.comm	gamma_table,256,4
 3209              		.comm	g_armwave_state,136,4
 3210              		.section	.rodata
 3211              		.align	2
 3212              		.set	.LANCHOR0,. + 0
 3215              	__PRETTY_FUNCTION__.17126:
 3216 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3216      6176655F 
 3216      73657475 
 3216      705F7265 
 3216      6E646572 
 3217 0015 000000   		.space	3
 3220              	__PRETTY_FUNCTION__.17130:
 3221 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3221      6176655F 
 3221      7365745F 
 3221      77617665 
 3221      5F706F69 
 3222 0031 000000   		.space	3
 3225              	__PRETTY_FUNCTION__.17137:
 3226 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3226      6176655F 
 3226      7365745F 
 3226      77617665 
 3226      5F706F69 
 3227              		.section	.rodata.str1.4,"aMS",%progbits,1
 3228              		.align	2
 3229              	.LC0:
 3230 0000 76302E30 		.ascii	"v0.0.1\000"
 3230      2E3100
 3231 0007 00       		.space	1
 3232              	.LC1:
 3233 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3233      61766520 
 3233      76657273 
 3233      696F6E3A 
 3233      2025730A 
 3234 001d 000000   		.space	3
 3235              	.LC2:
 3236 0020 77625F65 		.ascii	"wb_end=%d\012\000"
 3236      6E643D25 
 3236      640A00
 3237 002b 00       		.space	1
 3238              	.LC3:
 3239 002c 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 3239      6176655F 
 3239      67656E65 
 3239      72617465 
 3239      3A20736C 
 3240 005d 00       		.ascii	"\000"
 3241 005e 0000     		.space	2
 3242              	.LC4:
 3243 0060 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3243      20653D25 
 3243      6420773D 
 3243      25642077 
 3243      733D2564 
 3244              	.LC5:
 3245 008c 61726D77 		.ascii	"armwave.c\000"
 3245      6176652E 
 3245      6300
 3246 0096 0000     		.space	2
 3247              	.LC6:
 3248 0098 73746172 		.ascii	"start_point < end_point\000"
 3248      745F706F 
 3248      696E7420 
 3248      3C20656E 
 3248      645F706F 
 3249              	.LC7:
 3250 00b0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3250      7566665F 
 3250      73697A65 
 3250      3D25642C 
 3250      20636D70 
 3251 00e3 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3251      5F776964 
 3251      74683D25 
 3251      642C2077 
 3251      6176655F 
 3252 010d 000000   		.space	3
 3253              	.LC8:
 3254 0110 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3254      6F632066 
 3254      61696C75 
 3254      72652061 
 3254      6C6C6F63 
 3255 0143 2E636831 		.ascii	".ch1_buffer)\012\000"
 3255      5F627566 
 3255      66657229 
 3255      0A00
 3256 0151 000000   		.space	3
 3257              	.LC9:
 3258 0154 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3258      3A203078 
 3258      25303878 
 3258      20307825 
 3258      30387820 
 3259              	.LC10:
 3260 0178 77617665 		.ascii	"wave_buffer != NULL\000"
 3260      5F627566 
 3260      66657220 
 3260      213D204E 
 3260      554C4C00 
 3261              	.LC11:
 3262 018c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3262      6176655F 
 3262      7365745F 
 3262      77617665 
 3262      5F706F69 
 3263 01bf 78636565 		.ascii	"xceeded\000"
 3263      64656400 
 3264 01c7 00       		.space	1
 3265              	.LC12:
 3266 01c8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3266      5F627566 
 3266      6665725F 
 3266      70747220 
 3266      213D2030 
 3267 01dd 000000   		.space	3
 3268              	.LC13:
 3269 01e0 776200   		.ascii	"wb\000"
 3270 01e3 00       		.space	1
 3271              	.LC14:
 3272 01e4 50330A00 		.ascii	"P3\012\000"
 3273              	.LC15:
 3274 01e8 25642025 		.ascii	"%d %d\012\000"
 3274      640A00
 3275 01ef 00       		.space	1
 3276              	.LC16:
 3277 01f0 3235350A 		.ascii	"255\012\000"
 3277      00
 3278 01f5 000000   		.space	3
 3279              	.LC17:
 3280 01f8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3280      25336420 
 3280      2533640A 
 3280      00
 3281 0205 000000   		.space	3
 3282              	.LC18:
 3283 0208 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3283      6176655F 
 3283      74657374 
 3283      5F627566 
 3283      6665725F 
 3284 023b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3284      20627566 
 3284      66657220 
 3284      28256420 
 3284      62797465 
 3285              	.LC19:
 3286 025c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3286      6176655F 
 3286      66696C6C 
 3286      5F706978 
 3286      6275665F 
 3287 028f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3287      20666169 
 3287      6C65642C 
 3287      20726574 
 3287      75726E69 
 3288 02ae 0000     		.space	2
 3289              	.LC20:
 3290 02b0 43616C63 		.ascii	"Calculating test set %d\012\000"
 3290      756C6174 
 3290      696E6720 
 3290      74657374 
 3290      20736574 
 3291              		.text
 3292              	.Letext0:
 3293              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3294              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3295              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3296              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3297              		.file 7 "/usr/include/stdio.h"
 3298              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3299              		.file 9 "/usr/include/errno.h"
 3300              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3301              		.file 11 "/usr/include/unistd.h"
 3302              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3303              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3304              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3305              		.file 15 "/usr/include/math.h"
 3306              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3307              		.file 17 "/usr/include/time.h"
 3308              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3309              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3310              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3311              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3312              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3313              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3314              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3315              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3316              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3317              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3318              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3319              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3320              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3321              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3322              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3323              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3324              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3325              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3326              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3327              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3328              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3329              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3330              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3331              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3332              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3333              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3334              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3335              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3336              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3337              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3338              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3339              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3340              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3341              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3342              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3343              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3344              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3345              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3346              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3347              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3348              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3349              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3350              		.file 60 "/usr/local/include/python3.8/context.h"
 3351              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3352              		.file 62 "/usr/local/include/python3.8/code.h"
 3353              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3354              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3355              		.file 65 "/usr/local/include/python3.8/import.h"
 3356              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3357              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3358              		.file 68 "/usr/include/malloc.h"
 3359              		.file 69 "armwave.h"
 3360              		.file 70 "/usr/include/stdlib.h"
 3361              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3362              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3363              		.file 73 "<built-in>"
 3364              		.file 74 "/usr/include/assert.h"
