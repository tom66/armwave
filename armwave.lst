   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 88419FE5 		ldr	r4, .L21	@ tmp303,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 14D04DE2 		sub	sp, sp, #20	@,,
 255              		.cfi_def_cfa_offset 56
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 65 view .LVU35
 261 00b0 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 263              		.loc 1 71 130 view .LVU36
 264 00b4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 265              	.LVL7:
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 920002E0 		mul	r2, r2, r0	@ tmp209, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0530A0E1 		mov	r3, r5	@, _1
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2224A0E1 		lsr	r2, r2, #8	@ tmp211, tmp209,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 64019FE5 		ldr	r0, .L21+4	@,
 282              	.LVL8:
 283              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 284              		.loc 1 71 130 view .LVU42
 285 00d0 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp211
 286              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 287              		.loc 1 73 5 view .LVU43
 288 00d4 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 23 view .LVU44
 291 00d8 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 292              	.LVL9:
 293              		.loc 1 73 5 is_stmt 1 view .LVU45
 294 00dc 00208DE5 		str	r2, [sp]	@ _7,
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < 1 /*g_armwave_state.waves*/; w++) {
 298              		.loc 1 78 5 view .LVU46
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 299              		.loc 1 79 9 view .LVU47
 300              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 301              		.loc 1 79 19 is_stmt 0 view .LVU48
 302 00e8 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 303              	@ armwave.c:81:         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_
  80:armwave.c     **** 
  81:armwave.c     ****         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_stride, slice_y,
 304              		.loc 1 81 9 view .LVU49
 305 00ec 0730A0E1 		mov	r3, r7	@, slice_y
 306              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 307              		.loc 1 79 19 view .LVU50
 308 00f0 078088E0 		add	r8, r8, r7	@ wave_base, g_armwave_state.wave_buffer, slice_y
 309              	.LVL11:
 310              		.loc 1 81 9 is_stmt 1 view .LVU51
 311 00f4 00808DE5 		str	r8, [sp]	@ wave_base,
 312 00f8 342094E5 		ldr	r2, [r4, #52]	@, g_armwave_state.wave_stride
 313 00fc 0010A0E3 		mov	r1, #0	@,
 314 0100 34019FE5 		ldr	r0, .L21+8	@,
 315 0104 FEFFFFEB 		bl	printf		@
 316              	.LVL12:
  82:armwave.c     **** 
  83:armwave.c     ****         // roll through y and render the slice into the out buffer
  84:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  85:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 317              		.loc 1 85 9 view .LVU52
 318              		.loc 1 85 9 is_stmt 0 view .LVU53
 319 0108 000056E3 		cmp	r6, #0	@ height,
 320 010c 4600000A 		beq	.L11		@,
 321 0110 048048E2 		sub	r8, r8, #4	@ ivtmp.39, wave_base,
 322              	.LVL13:
 323              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 324              		.loc 1 85 16 view .LVU54
 325 0114 0010A0E3 		mov	r1, #0	@ yy,
 326              	.LVL14:
 327              	.L16:
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 86 13 is_stmt 1 view .LVU55
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 100 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 102 17 view .LVU57
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 100 17 view .LVU58
 332              		.loc 1 102 17 view .LVU59
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 100 17 view .LVU60
 334              		.loc 1 102 17 view .LVU61
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 100 17 view .LVU62
 336              		.loc 1 102 17 view .LVU63
 337              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 338              		.loc 1 86 18 is_stmt 0 view .LVU64
 339 0118 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _114, offset: 0B]
 340              	.LVL15:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 341              		.loc 1 88 13 is_stmt 1 view .LVU65
  90:armwave.c     ****                 
 342              		.loc 1 90 17 view .LVU66
  93:armwave.c     ****                     continue;
 343              		.loc 1 93 17 view .LVU67
 344              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 345              		.loc 1 101 34 is_stmt 0 view .LVU68
 346 011c 01B081E2 		add	fp, r1, #1	@ tmp249, yy,
 347              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 348              		.loc 1 93 20 view .LVU69
 349 0120 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 350 0124 0120A003 		moveq	r2, #1	@ tmp223,
 351 0128 0020A013 		movne	r2, #0	@ tmp223,
 352              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 353              		.loc 1 93 19 view .LVU70
 354 012c FF0057E3 		cmp	r7, #255	@ scale_value,
 355 0130 01208203 		orreq	r2, r2, #1	@,, tmp228, tmp223
 356 0134 000052E3 		cmp	r2, #0	@ tmp228,
 357              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 101 34 view .LVU71
 359 0138 02A081E2 		add	r10, r1, #2	@ tmp270, yy,
 360 013c 039081E2 		add	r9, r1, #3	@ tmp290, yy,
 361              	.LVL16:
 362              	@ armwave.c:103:                 word >>= 8;
 103:armwave.c     ****                 word >>= 8;
 363              		.loc 1 103 22 view .LVU72
 364 0140 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 365 0144 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 366              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 367              		.loc 1 93 19 view .LVU73
 368 0148 3400001A 		bne	.L18		@,
 369              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 101 34 view .LVU74
 371 014c 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 372              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 373              		.loc 1 93 20 view .LVU75
 374 0150 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 375 0154 01E0A003 		moveq	lr, #1	@ tmp243,
 376              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 377              		.loc 1 101 34 view .LVU76
 378 0158 920102E0 		mul	r2, r2, r1	@ tmp230, g_armwave_state.cmp_x_bitdepth_scale, yy
 379              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 380              		.loc 1 93 20 view .LVU77
 381 015c 00E0A013 		movne	lr, #0	@ tmp243,
 382              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 383              		.loc 1 93 19 view .LVU78
 384 0160 FF005CE3 		cmp	ip, #255	@ scale_value,
 385 0164 01E08E03 		orreq	lr, lr, #1	@,, tmp248, tmp243
 386 0168 00005EE3 		cmp	lr, #0	@ tmp248,
 387              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 388              		.loc 1 102 47 view .LVU79
 389 016c 40E094E5 		ldr	lr, [r4, #64]	@ tmp308, g_armwave_state.bitdepth_height
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 101 74 view .LVU80
 392 0170 2224A0E1 		lsr	r2, r2, #8	@ tmp232, tmp230,
 393              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 394              		.loc 1 102 47 view .LVU81
 395 0174 9E7222E0 		mla	r2, lr, r2, r7	@ tmp236, tmp308, tmp232, scale_value
 396 0178 02E0D5E7 		ldrb	lr, [r5, r2]	@ zero_extendqisi2	@ *_77, *_77
 397 017c 01E08EE2 		add	lr, lr, #1	@ tmp239, *_77,
 398 0180 02E0C5E7 		strb	lr, [r5, r2]	@ tmp239, *_77
 399              	.LVL17:
 400              		.loc 1 103 17 is_stmt 1 view .LVU82
  90:armwave.c     ****                 
 401              		.loc 1 90 17 view .LVU83
  93:armwave.c     ****                     continue;
 402              		.loc 1 93 17 view .LVU84
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 is_stmt 0 view .LVU85
 405 0184 2500001A 		bne	.L18		@,
 406              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 407              		.loc 1 101 34 view .LVU86
 408 0188 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 409              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 410              		.loc 1 101 99 view .LVU87
 411 018c 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 412              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 413              		.loc 1 93 20 view .LVU88
 414 0190 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 415              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 416              		.loc 1 101 34 view .LVU89
 417 0194 9E0B0BE0 		mul	fp, lr, fp	@ tmp251, g_armwave_state.cmp_x_bitdepth_scale, tmp249
 418              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 419              		.loc 1 93 20 view .LVU90
 420 0198 01E0A003 		moveq	lr, #1	@ tmp264,
 421 019c 00E0A013 		movne	lr, #0	@ tmp264,
 422              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 423              		.loc 1 101 74 view .LVU91
 424 01a0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp253, tmp251,
 425              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 426              		.loc 1 93 19 view .LVU92
 427 01a4 FF0050E3 		cmp	r0, #255	@ scale_value,
 428 01a8 01E08E03 		orreq	lr, lr, #1	@,, tmp269, tmp264
 429              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 430              		.loc 1 102 47 view .LVU93
 431 01ac 92CB2CE0 		mla	ip, r2, fp, ip	@ tmp257, g_armwave_state.bitdepth_height, tmp253, scale_value
 432              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 433              		.loc 1 93 19 view .LVU94
 434 01b0 00005EE3 		cmp	lr, #0	@ tmp269,
 435              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 436              		.loc 1 102 47 view .LVU95
 437 01b4 0C20D5E7 		ldrb	r2, [r5, ip]	@ zero_extendqisi2	@ *_107, *_107
 438 01b8 012082E2 		add	r2, r2, #1	@ tmp260, *_107,
 439 01bc 0C20C5E7 		strb	r2, [r5, ip]	@ tmp260, *_107
 440              		.loc 1 103 17 is_stmt 1 view .LVU96
 441              	.LVL18:
  90:armwave.c     ****                 
 442              		.loc 1 90 17 view .LVU97
  93:armwave.c     ****                     continue;
 443              		.loc 1 93 17 view .LVU98
 444              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 445              		.loc 1 93 19 is_stmt 0 view .LVU99
 446 01c0 1600001A 		bne	.L18		@,
 447              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 448              		.loc 1 101 34 view .LVU100
 449 01c4 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 450              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 451              		.loc 1 101 99 view .LVU101
 452 01c8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 20 view .LVU102
 455 01cc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 456              	.LVL19:
 457              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 458              		.loc 1 101 34 view .LVU103
 459 01d0 920A0AE0 		mul	r10, r2, r10	@ tmp272, g_armwave_state.cmp_x_bitdepth_scale, tmp270
 460              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 461              		.loc 1 93 20 view .LVU104
 462 01d4 0120A003 		moveq	r2, #1	@ tmp284,
 463 01d8 0020A013 		movne	r2, #0	@ tmp284,
 464              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 465              		.loc 1 101 74 view .LVU105
 466 01dc 2AA4A0E1 		lsr	r10, r10, #8	@ tmp274, tmp272,
 467              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 468              		.loc 1 93 19 view .LVU106
 469 01e0 FF0053E3 		cmp	r3, #255	@ word,
 470 01e4 01208203 		orreq	r2, r2, #1	@,, tmp289, tmp284
 471              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 472              		.loc 1 102 47 view .LVU107
 473 01e8 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp278, g_armwave_state.bitdepth_height, tmp274, scale_value
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 19 view .LVU108
 476 01ec 000052E3 		cmp	r2, #0	@ tmp289,
 477              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 478              		.loc 1 102 47 view .LVU109
 479 01f0 0020D5E7 		ldrb	r2, [r5, r0]	@ zero_extendqisi2	@ *_137, *_137
 480 01f4 012082E2 		add	r2, r2, #1	@ tmp281, *_137,
 481 01f8 0020C5E7 		strb	r2, [r5, r0]	@ tmp281, *_137
 482              		.loc 1 103 17 is_stmt 1 view .LVU110
 483              	.LVL20:
  90:armwave.c     ****                 
 484              		.loc 1 90 17 view .LVU111
  93:armwave.c     ****                     continue;
 485              		.loc 1 93 17 view .LVU112
 486              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 487              		.loc 1 93 19 is_stmt 0 view .LVU113
 488 01fc 0700001A 		bne	.L18		@,
 489              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 490              		.loc 1 101 34 view .LVU114
 491 0200 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 492              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 493              		.loc 1 101 99 view .LVU115
 494 0204 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 495              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 496              		.loc 1 101 34 view .LVU116
 497 0208 920909E0 		mul	r9, r2, r9	@ tmp292, g_armwave_state.cmp_x_bitdepth_scale, tmp290
 498              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 499              		.loc 1 101 74 view .LVU117
 500 020c 2994A0E1 		lsr	r9, r9, #8	@ tmp294, tmp292,
 501              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 502              		.loc 1 102 47 view .LVU118
 503 0210 903923E0 		mla	r3, r0, r9, r3	@ tmp298, g_armwave_state.bitdepth_height, tmp294, word
 504 0214 0320D5E7 		ldrb	r2, [r5, r3]	@ zero_extendqisi2	@ *_167, *_167
 505 0218 012082E2 		add	r2, r2, #1	@ tmp301, *_167,
 506 021c 0320C5E7 		strb	r2, [r5, r3]	@ tmp301, *_167
 507              		.loc 1 103 17 is_stmt 1 view .LVU119
 508              	.LVL21:
 509              	.L18:
 510              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 511              		.loc 1 85 37 is_stmt 0 view .LVU120
 512 0220 041081E2 		add	r1, r1, #4	@ yy, yy,
 513              	.LVL22:
 514              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 515              		.loc 1 85 9 view .LVU121
 516 0224 010056E1 		cmp	r6, r1	@ height, yy
 517 0228 BAFFFF8A 		bhi	.L16		@,
 518              	.LVL23:
 519              	.L11:
 520              	@ armwave.c:107: }
 104:armwave.c     ****             }
 105:armwave.c     ****         }
 106:armwave.c     ****     }
 107:armwave.c     **** }
 521              		.loc 1 107 1 view .LVU122
 522 022c 14D08DE2 		add	sp, sp, #20	@,,
 523              		.cfi_def_cfa_offset 36
 524              		@ sp needed	@
 525 0230 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 526              	.LVL24:
 527              	.L22:
 528              		.loc 1 107 1 view .LVU123
 529              		.align	2
 530              	.L21:
 531 0234 00000000 		.word	g_armwave_state
 532 0238 20000000 		.word	.LC2
 533 023c 5C000000 		.word	.LC3
 534              		.cfi_endproc
 535              	.LFE59:
 537              		.align	2
 538              		.global	armwave_fill_pixbuf_scaled
 539              		.syntax unified
 540              		.arm
 541              		.fpu vfp
 543              	armwave_fill_pixbuf_scaled:
 544              	.LVL25:
 545              	.LFB60:
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 117:armwave.c     ****     uint8_t r, g, b, value;
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 162:armwave.c     **** #endif
 163:armwave.c     **** 
 164:armwave.c     **** /*
 165:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 166:armwave.c     ****  * Rows are repeated as necessary.
 167:armwave.c     ****  */
 168:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 169:armwave.c     **** {
 546              		.loc 1 169 1 is_stmt 1 view -0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 8
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 550              		.loc 1 170 5 view .LVU125
 171:armwave.c     ****     // uint32_t ysub;
 172:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 551              		.loc 1 172 5 view .LVU126
 173:armwave.c     ****     uint8_t r, g, b, value; 
 552              		.loc 1 173 5 view .LVU127
 174:armwave.c     ****     // uint8_t row;
 175:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 553              		.loc 1 175 5 view .LVU128
 554              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 555              		.loc 1 169 1 is_stmt 0 view .LVU129
 556 0240 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 557              		.cfi_def_cfa_offset 36
 558              		.cfi_offset 4, -36
 559              		.cfi_offset 5, -32
 560              		.cfi_offset 6, -28
 561              		.cfi_offset 7, -24
 562              		.cfi_offset 8, -20
 563              		.cfi_offset 9, -16
 564              		.cfi_offset 10, -12
 565              		.cfi_offset 11, -8
 566              		.cfi_offset 14, -4
 567              	@ armwave.c:179:     assert(out_buffer != NULL);
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 177:armwave.c     ****     uint32_t offset;
 178:armwave.c     **** 
 179:armwave.c     ****     assert(out_buffer != NULL);
 568              		.loc 1 179 5 view .LVU130
 569 0244 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 570              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 571              		.loc 1 175 15 view .LVU131
 572 0248 5C519FE5 		ldr	r5, .L45	@ tmp221,
 573              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 574              		.loc 1 169 1 view .LVU132
 575 024c 0CD04DE2 		sub	sp, sp, #12	@,,
 576              		.cfi_def_cfa_offset 48
 577              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 578              		.loc 1 175 15 view .LVU133
 579 0250 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 580              	.LVL26:
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 581              		.loc 1 176 5 is_stmt 1 view .LVU134
 177:armwave.c     **** 
 582              		.loc 1 177 5 view .LVU135
 583              		.loc 1 179 5 view .LVU136
 584 0254 4F00000A 		beq	.L42		@,
 180:armwave.c     **** 
 181:armwave.c     ****     // we don't really want to be doing this
 182:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 585              		.loc 1 182 5 view .LVU137
 586              	@ armwave.c:182:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 587              		.loc 1 182 59 is_stmt 0 view .LVU138
 588 0258 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 589 025c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 590              	@ armwave.c:182:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 591              		.loc 1 182 5 view .LVU139
 592 0260 0110A0E3 		mov	r1, #1	@,
 593              	@ armwave.c:182:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 594              		.loc 1 182 59 view .LVU140
 595 0264 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 596              	@ armwave.c:182:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 597              		.loc 1 182 5 view .LVU141
 598 0268 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 599 026c FEFFFFEB 		bl	memset		@
 600              	.LVL27:
 183:armwave.c     **** 
 184:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 601              		.loc 1 184 5 is_stmt 1 view .LVU142
 602              	@ armwave.c:184:     npix = g_armwave_state.target_width * 256; 
 603              		.loc 1 184 10 is_stmt 0 view .LVU143
 604 0270 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 605 0274 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 606              	.LVL28:
 185:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 186:armwave.c     **** 
 187:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 607              		.loc 1 187 5 is_stmt 1 view .LVU144
 608              		.loc 1 187 5 is_stmt 0 view .LVU145
 609 0278 000058E3 		cmp	r8, #0	@ npix,
 610 027c 0C0000DA 		ble	.L23		@,
 611              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 189:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 190:armwave.c     ****         // most normal waveforms.
 191:armwave.c     ****         wave_word = *base_32ptr++;
 192:armwave.c     **** 
 193:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 194:armwave.c     ****             for(w = 0; w < 4; w++) {
 195:armwave.c     ****                 value = wave_word & 0xff;
 196:armwave.c     ****                 wave_word >>= 8;
 197:armwave.c     **** 
 198:armwave.c     ****                 if(value != 0) {
 199:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 200:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 612              		.loc 1 200 52 view .LVU146
 613 0280 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 614              	@ armwave.c:199:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 615              		.loc 1 199 52 view .LVU147
 616 0284 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 617              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 202:armwave.c     **** 
 203:armwave.c     ****                     r = MIN(rr, 255);
 204:armwave.c     ****                     g = MIN(gg, 255);
 205:armwave.c     ****                     b = MIN(bb, 255);
 206:armwave.c     **** 
 207:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 208:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 209:armwave.c     **** 
 210:armwave.c     ****                     // Do line scaling as necessary.
 211:armwave.c     ****                     /*
 212:armwave.c     ****                     nsub = n + w;
 213:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 214:armwave.c     ****                     xx = (nsub >> 8);
 215:armwave.c     **** 
 216:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 217:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 218:armwave.c     ****                         *(out_buffer_base + offset) = word;
 219:armwave.c     ****                     }
 220:armwave.c     ****                     */
 221:armwave.c     **** 
 222:armwave.c     ****                     nsub = n + w;
 223:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 618              		.loc 1 223 57 view .LVU148
 619 0288 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 620              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 621              		.loc 1 200 52 view .LVU149
 622 028c 00308DE5 		str	r3, [sp]	@ _15, %sfp
 623              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 624              		.loc 1 201 52 view .LVU150
 625 0290 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 626              	@ armwave.c:187:     for(n = 0; n < npix; n += 4) {
 187:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 627              		.loc 1 187 11 view .LVU151
 628 0294 0010A0E3 		mov	r1, #0	@ n,
 629              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 630              		.loc 1 201 52 view .LVU152
 631 0298 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 632              	.LVL29:
 633              	.L30:
 191:armwave.c     **** 
 634              		.loc 1 191 9 is_stmt 1 view .LVU153
 635              	@ armwave.c:191:         wave_word = *base_32ptr++;
 191:armwave.c     **** 
 636              		.loc 1 191 19 is_stmt 0 view .LVU154
 637 029c 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 638              	.LVL30:
 193:armwave.c     ****             for(w = 0; w < 4; w++) {
 639              		.loc 1 193 9 is_stmt 1 view .LVU155
 640              	@ armwave.c:193:         if(COND_UNLIKELY(wave_word != 0)) {
 193:armwave.c     ****             for(w = 0; w < 4; w++) {
 641              		.loc 1 193 11 is_stmt 0 view .LVU156
 642 02a0 000053E3 		cmp	r3, #0	@ wave_word,
 643 02a4 0400001A 		bne	.L43		@,
 644              	.L26:
 645              	@ armwave.c:187:     for(n = 0; n < npix; n += 4) {
 187:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 646              		.loc 1 187 28 view .LVU157
 647 02a8 041081E2 		add	r1, r1, #4	@ n, n,
 648              	.LVL31:
 649              	@ armwave.c:187:     for(n = 0; n < npix; n += 4) {
 187:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 650              		.loc 1 187 5 view .LVU158
 651 02ac 010058E1 		cmp	r8, r1	@ npix, n
 652 02b0 F9FFFFCA 		bgt	.L30		@,
 653              	.LVL32:
 654              	.L23:
 655              	@ armwave.c:235: }
 224:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 225:armwave.c     ****                     xx = (nsub >> 8);
 226:armwave.c     **** 
 227:armwave.c     ****                     for(y = yy; y < ye; y++) {
 228:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 229:armwave.c     ****                         *(out_buffer_base + offset) = word;
 230:armwave.c     ****                     }
 231:armwave.c     ****                 }
 232:armwave.c     ****             }
 233:armwave.c     ****         }
 234:armwave.c     ****     }
 235:armwave.c     **** }
 656              		.loc 1 235 1 view .LVU159
 657 02b4 0CD08DE2 		add	sp, sp, #12	@,,
 658              		.cfi_remember_state
 659              		.cfi_def_cfa_offset 36
 660              		@ sp needed	@
 661 02b8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 662              	.LVL33:
 663              	.L43:
 664              		.cfi_restore_state
 665              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 666              		.loc 1 198 19 view .LVU160
 667 02bc FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 668              	@ armwave.c:194:             for(w = 0; w < 4; w++) {
 194:armwave.c     ****                 value = wave_word & 0xff;
 669              		.loc 1 194 19 view .LVU161
 670 02c0 0070A0E3 		mov	r7, #0	@ w,
 671              	.LVL34:
 195:armwave.c     ****                 wave_word >>= 8;
 672              		.loc 1 195 17 is_stmt 1 view .LVU162
 196:armwave.c     **** 
 673              		.loc 1 196 17 view .LVU163
 674              	@ armwave.c:196:                 wave_word >>= 8;
 196:armwave.c     **** 
 675              		.loc 1 196 27 is_stmt 0 view .LVU164
 676 02c4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 677              	.LVL35:
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 678              		.loc 1 198 17 is_stmt 1 view .LVU165
 679              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 680              		.loc 1 198 19 is_stmt 0 view .LVU166
 681 02c8 0500001A 		bne	.L44		@,
 682              	.L27:
 683              	@ armwave.c:194:             for(w = 0; w < 4; w++) {
 194:armwave.c     ****                 value = wave_word & 0xff;
 684              		.loc 1 194 32 view .LVU167
 685 02cc 017087E2 		add	r7, r7, #1	@ w, w,
 686              	.LVL36:
 687              	@ armwave.c:194:             for(w = 0; w < 4; w++) {
 194:armwave.c     ****                 value = wave_word & 0xff;
 688              		.loc 1 194 13 view .LVU168
 689 02d0 040057E3 		cmp	r7, #4	@ w,
 690 02d4 F3FFFF0A 		beq	.L26		@,
 195:armwave.c     ****                 wave_word >>= 8;
 691              		.loc 1 195 17 is_stmt 1 view .LVU169
 692              	.LVL37:
 196:armwave.c     **** 
 693              		.loc 1 196 17 view .LVU170
 694              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 695              		.loc 1 198 19 is_stmt 0 view .LVU171
 696 02d8 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 697              	@ armwave.c:196:                 wave_word >>= 8;
 196:armwave.c     **** 
 698              		.loc 1 196 27 view .LVU172
 699 02dc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 700              	.LVL38:
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 701              		.loc 1 198 17 is_stmt 1 view .LVU173
 702              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 703              		.loc 1 198 19 is_stmt 0 view .LVU174
 704 02e0 F9FFFF0A 		beq	.L27		@,
 705              	.L44:
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 706              		.loc 1 199 21 is_stmt 1 view .LVU175
 707              	.LVL39:
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 708              		.loc 1 200 21 view .LVU176
 201:armwave.c     **** 
 709              		.loc 1 201 21 view .LVU177
 203:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 203 21 view .LVU178
 204:armwave.c     ****                     b = MIN(bb, 255);
 711              		.loc 1 204 21 view .LVU179
 205:armwave.c     **** 
 712              		.loc 1 205 21 view .LVU180
 208:armwave.c     **** 
 713              		.loc 1 208 21 view .LVU181
 714              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     **** 
 715              		.loc 1 201 55 is_stmt 0 view .LVU182
 716 02e4 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 717 02e8 07E081E0 		add	lr, r1, r7	@ _126, n, w
 718 02ec 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 719              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 720              		.loc 1 223 32 view .LVU183
 721 02f0 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 722              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 723              		.loc 1 224 41 view .LVU184
 724 02f4 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 725              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 726              		.loc 1 223 40 view .LVU185
 727 02f8 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 728              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 729              		.loc 1 224 41 view .LVU186
 730 02fc 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 731              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 732              		.loc 1 200 55 view .LVU187
 733 0300 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 734              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     **** 
 735              		.loc 1 201 24 view .LVU188
 736 0304 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 737              	.LVL40:
 738              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 223 40 view .LVU189
 740 0308 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 741              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 742              		.loc 1 224 46 view .LVU190
 743 030c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 744              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 745              		.loc 1 200 55 view .LVU191
 746 0310 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 747              	@ armwave.c:199:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 748              		.loc 1 199 55 view .LVU192
 749 0314 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 750              	.LVL41:
 751              	@ armwave.c:205:                     b = MIN(bb, 255);
 205:armwave.c     **** 
 752              		.loc 1 205 25 view .LVU193
 753 0318 FF005AE3 		cmp	r10, #255	@ bb,
 754              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 755              		.loc 1 200 24 view .LVU194
 756 031c 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 757              	.LVL42:
 758              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 759              		.loc 1 223 40 view .LVU195
 760 0320 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 761              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 762              		.loc 1 224 46 view .LVU196
 763 0324 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 764              	@ armwave.c:199:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 765              		.loc 1 199 24 view .LVU197
 766 0328 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 767              	.LVL43:
 768              	@ armwave.c:205:                     b = MIN(bb, 255);
 205:armwave.c     **** 
 769              		.loc 1 205 25 view .LVU198
 770 032c FFA0A0A3 		movge	r10, #255	@ bb,
 771              	.LVL44:
 772              	@ armwave.c:204:                     g = MIN(gg, 255);
 204:armwave.c     ****                     b = MIN(bb, 255);
 773              		.loc 1 204 25 view .LVU199
 774 0330 FF005CE3 		cmp	ip, #255	@ gg,
 775 0334 FFC0A0A3 		movge	ip, #255	@ gg,
 776              	.LVL45:
 777              	@ armwave.c:203:                     r = MIN(rr, 255);
 203:armwave.c     ****                     g = MIN(gg, 255);
 778              		.loc 1 203 25 view .LVU200
 779 0338 FF0050E3 		cmp	r0, #255	@ rr,
 780              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 781              		.loc 1 208 56 view .LVU201
 782 033c 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 783              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 784              		.loc 1 223 24 view .LVU202
 785 0340 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 786              	@ armwave.c:203:                     r = MIN(rr, 255);
 203:armwave.c     ****                     g = MIN(gg, 255);
 787              		.loc 1 203 25 view .LVU203
 788 0344 FF00A0A3 		movge	r0, #255	@ rr,
 789              	.LVL46:
 790              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 791              		.loc 1 208 44 view .LVU204
 792 0348 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 793 034c FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 794              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 795              		.loc 1 208 56 view .LVU205
 796 0350 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 797              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 798              		.loc 1 208 51 view .LVU206
 799 0354 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 800              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 801              		.loc 1 208 62 view .LVU207
 802 0358 7000EFE6 		uxtb	r0, r0	@ rr, rr
 803 035c 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 804              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 805              		.loc 1 223 24 view .LVU208
 806 0360 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 807              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 808              		.loc 1 224 24 view .LVU209
 809 0364 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 810              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 811              		.loc 1 208 26 view .LVU210
 812 0368 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 813              	.LVL47:
 222:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 814              		.loc 1 222 21 is_stmt 1 view .LVU211
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 815              		.loc 1 223 21 view .LVU212
 224:armwave.c     ****                     xx = (nsub >> 8);
 816              		.loc 1 224 21 view .LVU213
 817              	@ armwave.c:225:                     xx = (nsub >> 8);
 225:armwave.c     **** 
 818              		.loc 1 225 32 is_stmt 0 view .LVU214
 819 036c 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 820              	.LVL48:
 821              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 822              		.loc 1 224 24 view .LVU215
 823 0370 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 824              	.LVL49:
 225:armwave.c     **** 
 825              		.loc 1 225 21 is_stmt 1 view .LVU216
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 826              		.loc 1 227 21 view .LVU217
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 827              		.loc 1 227 21 is_stmt 0 view .LVU218
 828 0374 090052E1 		cmp	r2, r9	@ yy, ye
 829 0378 D3FFFF2A 		bcs	.L27		@,
 830              	.LVL50:
 831              	.L28:
 228:armwave.c     ****                         *(out_buffer_base + offset) = word;
 832              		.loc 1 228 25 is_stmt 1 discriminator 3 view .LVU219
 229:armwave.c     ****                     }
 833              		.loc 1 229 25 discriminator 3 view .LVU220
 834              	@ armwave.c:228:                         offset = (xx + (y * g_armwave_state.target_width)); 
 228:armwave.c     ****                         *(out_buffer_base + offset) = word;
 835              		.loc 1 228 43 is_stmt 0 discriminator 3 view .LVU221
 836 037c 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 837              	@ armwave.c:229:                         *(out_buffer_base + offset) = word;
 229:armwave.c     ****                     }
 838              		.loc 1 229 43 discriminator 3 view .LVU222
 839 0380 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 840              	.LVL51:
 841              	@ armwave.c:227:                     for(y = yy; y < ye; y++) {
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 842              		.loc 1 227 42 discriminator 3 view .LVU223
 843 0384 012082E2 		add	r2, r2, #1	@ yy, yy,
 844              	.LVL52:
 845              	@ armwave.c:227:                     for(y = yy; y < ye; y++) {
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 227 21 discriminator 3 view .LVU224
 847 0388 020059E1 		cmp	r9, r2	@ ye, yy
 848              	@ armwave.c:229:                         *(out_buffer_base + offset) = word;
 229:armwave.c     ****                     }
 849              		.loc 1 229 53 discriminator 3 view .LVU225
 850 038c 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 851              	@ armwave.c:227:                     for(y = yy; y < ye; y++) {
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 852              		.loc 1 227 21 discriminator 3 view .LVU226
 853 0390 F9FFFF1A 		bne	.L28		@,
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 854              		.loc 1 227 21 discriminator 3 view .LVU227
 855 0394 CCFFFFEA 		b	.L27		@
 856              	.LVL53:
 857              	.L42:
 179:armwave.c     **** 
 858              		.loc 1 179 5 is_stmt 1 discriminator 1 view .LVU228
 859 0398 10309FE5 		ldr	r3, .L45+4	@,
 860 039c B320A0E3 		mov	r2, #179	@,
 861 03a0 0C109FE5 		ldr	r1, .L45+8	@,
 862 03a4 0C009FE5 		ldr	r0, .L45+12	@,
 863              	.LVL54:
 179:armwave.c     **** 
 864              		.loc 1 179 5 is_stmt 0 discriminator 1 view .LVU229
 865 03a8 FEFFFFEB 		bl	__assert_fail		@
 866              	.LVL55:
 867              	.L46:
 868              		.align	2
 869              	.L45:
 870 03ac 00000000 		.word	g_armwave_state
 871 03b0 00000000 		.word	.LANCHOR0
 872 03b4 84000000 		.word	.LC4
 873 03b8 90000000 		.word	.LC5
 874              		.cfi_endproc
 875              	.LFE60:
 877              		.global	__aeabi_idiv
 878              		.align	2
 879              		.global	armwave_generate
 880              		.syntax unified
 881              		.arm
 882              		.fpu vfp
 884              	armwave_generate:
 885              	.LFB61:
 236:armwave.c     **** 
 237:armwave.c     **** /*
 238:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 239:armwave.c     ****  */
 240:armwave.c     **** void armwave_generate()
 241:armwave.c     **** {
 886              		.loc 1 241 1 is_stmt 1 view -0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 8
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 242:armwave.c     ****     uint32_t yy;
 890              		.loc 1 242 5 view .LVU231
 243:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 891              		.loc 1 243 5 view .LVU232
 892              	.LVL56:
 244:armwave.c     **** 
 245:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 893              		.loc 1 245 5 view .LVU233
 894              	@ armwave.c:241: {
 241:armwave.c     ****     uint32_t yy;
 895              		.loc 1 241 1 is_stmt 0 view .LVU234
 896 03bc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 897              		.cfi_def_cfa_offset 36
 898              		.cfi_offset 4, -36
 899              		.cfi_offset 5, -32
 900              		.cfi_offset 6, -28
 901              		.cfi_offset 7, -24
 902              		.cfi_offset 8, -20
 903              		.cfi_offset 9, -16
 904              		.cfi_offset 10, -12
 905              		.cfi_offset 11, -8
 906              		.cfi_offset 14, -4
 907              	@ armwave.c:245:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 908              		.loc 1 245 5 view .LVU235
 909 03c0 0010A0E3 		mov	r1, #0	@,
 910              	@ armwave.c:245:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 911              		.loc 1 245 58 view .LVU236
 912 03c4 E0419FE5 		ldr	r4, .L61	@ tmp335,
 913              	@ armwave.c:241: {
 241:armwave.c     ****     uint32_t yy;
 914              		.loc 1 241 1 view .LVU237
 915 03c8 1CD04DE2 		sub	sp, sp, #28	@,,
 916              		.cfi_def_cfa_offset 64
 917              	@ armwave.c:245:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 918              		.loc 1 245 5 view .LVU238
 919 03cc 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 920 03d0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 921 03d4 FEFFFFEB 		bl	memset		@
 922              	.LVL57:
 246:armwave.c     **** 
 247:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 923              		.loc 1 247 5 is_stmt 1 view .LVU239
 924              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 925              		.loc 1 247 68 is_stmt 0 view .LVU240
 926 03d8 447094E5 		ldr	r7, [r4, #68]	@ _9, g_armwave_state.slice_height
 927              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 928              		.loc 1 247 51 view .LVU241
 929 03dc 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 930 03e0 0710A0E1 		mov	r1, r7	@, _9
 931 03e4 FEFFFFEB 		bl	__aeabi_idiv		@
 932              	.LVL58:
 933              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 934              		.loc 1 247 5 view .LVU242
 935 03e8 000050E3 		cmp	r0, #0	@,
 936 03ec 6C00000A 		beq	.L47		@,
 937              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 938              		.loc 1 247 12 view .LVU243
 939 03f0 0090A0E3 		mov	r9, #0	@ yy,
 940              	.LVL59:
 941              	.L48:
 248:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 249:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 250:armwave.c     **** 
 251:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 942              		.loc 1 251 9 is_stmt 1 discriminator 3 view .LVU244
 943 03f4 990707E0 		mul	r7, r9, r7	@ _5, yy, _9
 944              	.LBB10:
 945              	.LBB11:
 946              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 947              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU245
 948 03f8 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 949              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 950              		.loc 1 71 130 discriminator 3 view .LVU246
 951 03fc 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 952              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 953              		.loc 1 71 40 discriminator 3 view .LVU247
 954 0400 045094E5 		ldr	r5, [r4, #4]	@ _18, g_armwave_state.ch1_buffer
 955              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 956              		.loc 1 71 65 discriminator 3 view .LVU248
 957 0404 920702E0 		mul	r2, r2, r7	@ tmp235, g_armwave_state.cmp_x_bitdepth_scale, _5
 958              	.LBE11:
 959              	.LBE10:
 960              	@ armwave.c:251:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 961              		.loc 1 251 9 discriminator 3 view .LVU249
 962 0408 486094E5 		ldr	r6, [r4, #72]	@ _7, g_armwave_state.slice_record_height
 963              	.LVL60:
 964              	.LBB13:
 965              	.LBI10:
  62:armwave.c     **** {
 966              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU250
 967              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 968              		.loc 1 64 5 discriminator 3 view .LVU251
  65:armwave.c     ****     uint8_t *wave_base;
 969              		.loc 1 65 5 discriminator 3 view .LVU252
  66:armwave.c     ****     uint8_t *write_buffer_base;
 970              		.loc 1 66 5 discriminator 3 view .LVU253
  67:armwave.c     ****     uint8_t *write_buffer;
 971              		.loc 1 67 5 discriminator 3 view .LVU254
  68:armwave.c     **** 
 972              		.loc 1 68 5 discriminator 3 view .LVU255
  71:armwave.c     **** 
 973              		.loc 1 71 5 discriminator 3 view .LVU256
 974              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 975              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU257
 976 040c 0530A0E1 		mov	r3, r5	@, _18
 977              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 978              		.loc 1 71 105 discriminator 3 view .LVU258
 979 0410 2224A0E1 		lsr	r2, r2, #8	@ tmp237, tmp235,
 980              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 981              		.loc 1 73 5 discriminator 3 view .LVU259
 982 0414 04708DE5 		str	r7, [sp, #4]	@ _5,
 983              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 984              		.loc 1 71 130 discriminator 3 view .LVU260
 985 0418 910202E0 		mul	r2, r1, r2	@ _24, g_armwave_state.bitdepth_height, tmp237
 986              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 987              		.loc 1 73 5 discriminator 3 view .LVU261
 988 041c 08608DE5 		str	r6, [sp, #8]	@ _7,
 989              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 990              		.loc 1 71 23 discriminator 3 view .LVU262
 991 0420 025085E0 		add	r5, r5, r2	@ write_buffer_base, _18, _24
 992              	.LVL61:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 993              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU263
 994 0424 00208DE5 		str	r2, [sp]	@ _24,
 995 0428 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 996 042c 0520A0E1 		mov	r2, r5	@, write_buffer_base
 997 0430 78019FE5 		ldr	r0, .L61+4	@,
 998 0434 FEFFFFEB 		bl	printf		@
 999              	.LVL62:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1000              		.loc 1 78 5 discriminator 3 view .LVU264
  79:armwave.c     **** 
 1001              		.loc 1 79 9 discriminator 3 view .LVU265
 1002              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 1003              		.loc 1 79 19 is_stmt 0 discriminator 3 view .LVU266
 1004 0438 142094E5 		ldr	r2, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1005              	@ armwave.c:81:         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_
  81:armwave.c     **** 
 1006              		.loc 1 81 9 discriminator 3 view .LVU267
 1007 043c 0730A0E1 		mov	r3, r7	@, _5
 1008              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 1009              		.loc 1 79 19 discriminator 3 view .LVU268
 1010 0440 077082E0 		add	r7, r2, r7	@ wave_base, g_armwave_state.wave_buffer, _5
 1011              	.LVL63:
  81:armwave.c     **** 
 1012              		.loc 1 81 9 is_stmt 1 discriminator 3 view .LVU269
 1013 0444 0010A0E3 		mov	r1, #0	@,
 1014 0448 00708DE5 		str	r7, [sp]	@ wave_base,
 1015 044c 342094E5 		ldr	r2, [r4, #52]	@, g_armwave_state.wave_stride
 1016 0450 5C019FE5 		ldr	r0, .L61+8	@,
 1017 0454 FEFFFFEB 		bl	printf		@
 1018              	.LVL64:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1019              		.loc 1 85 9 discriminator 3 view .LVU270
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1020              		.loc 1 85 9 is_stmt 0 discriminator 3 view .LVU271
 1021 0458 000056E3 		cmp	r6, #0	@ _7,
 1022 045c 04304712 		subne	r3, r7, #4	@ ivtmp.64, wave_base,
 1023              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1024              		.loc 1 85 16 discriminator 3 view .LVU272
 1025 0460 0010A013 		movne	r1, #0	@ yy,
 1026 0464 14308D15 		strne	r3, [sp, #20]	@ ivtmp.64, %sfp
 1027              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1028              		.loc 1 85 9 discriminator 3 view .LVU273
 1029 0468 4600000A 		beq	.L55		@,
 1030              	.LVL65:
 1031              	.L54:
  86:armwave.c     **** 
 1032              		.loc 1 86 13 is_stmt 1 view .LVU274
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1033              		.loc 1 100 17 view .LVU275
 102:armwave.c     ****                 word >>= 8;
 1034              		.loc 1 102 17 view .LVU276
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1035              		.loc 1 100 17 view .LVU277
 102:armwave.c     ****                 word >>= 8;
 1036              		.loc 1 102 17 view .LVU278
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1037              		.loc 1 100 17 view .LVU279
 102:armwave.c     ****                 word >>= 8;
 1038              		.loc 1 102 17 view .LVU280
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1039              		.loc 1 100 17 view .LVU281
 102:armwave.c     ****                 word >>= 8;
 1040              		.loc 1 102 17 view .LVU282
 1041              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 1042              		.loc 1 86 18 is_stmt 0 view .LVU283
 1043 046c 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.64, %sfp
 1044              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1045              		.loc 1 101 34 view .LVU284
 1046 0470 01B081E2 		add	fp, r1, #1	@ tmp282, yy,
 1047 0474 02A081E2 		add	r10, r1, #2	@ tmp303, yy,
 1048              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 1049              		.loc 1 86 18 view .LVU285
 1050 0478 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _244, offset: 0B]
 1051              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1052              		.loc 1 101 34 view .LVU286
 1053 047c 038081E2 		add	r8, r1, #3	@ tmp323, yy,
 1054              	.LVL66:
 1055              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1056              		.loc 1 93 20 view .LVU287
 1057 0480 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 1058              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 1059              		.loc 1 86 18 view .LVU288
 1060 0484 14208DE5 		str	r2, [sp, #20]	@ ivtmp.64, %sfp
 1061              	.LVL67:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 1062              		.loc 1 88 13 is_stmt 1 view .LVU289
  90:armwave.c     ****                 
 1063              		.loc 1 90 17 view .LVU290
  93:armwave.c     ****                     continue;
 1064              		.loc 1 93 17 view .LVU291
 1065              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1066              		.loc 1 93 20 is_stmt 0 view .LVU292
 1067 0488 0120A003 		moveq	r2, #1	@ tmp255,
 1068 048c 0020A013 		movne	r2, #0	@ tmp255,
 1069              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1070              		.loc 1 93 19 view .LVU293
 1071 0490 FF0057E3 		cmp	r7, #255	@ scale_value,
 1072 0494 01208203 		orreq	r2, r2, #1	@,, tmp260, tmp255
 1073 0498 000052E3 		cmp	r2, #0	@ tmp260,
 1074              	@ armwave.c:103:                 word >>= 8;
 103:armwave.c     ****             }
 1075              		.loc 1 103 22 view .LVU294
 1076 049c 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 1077 04a0 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 1078              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1079              		.loc 1 93 19 view .LVU295
 1080 04a4 3400001A 		bne	.L56		@,
 1081              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1082              		.loc 1 101 34 view .LVU296
 1083 04a8 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1084              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1085              		.loc 1 93 20 view .LVU297
 1086 04ac FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 1087 04b0 01E0A003 		moveq	lr, #1	@ tmp275,
 1088              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1089              		.loc 1 101 34 view .LVU298
 1090 04b4 920102E0 		mul	r2, r2, r1	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, yy
 1091              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1092              		.loc 1 93 20 view .LVU299
 1093 04b8 00E0A013 		movne	lr, #0	@ tmp275,
 1094              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1095              		.loc 1 93 19 view .LVU300
 1096 04bc FF005CE3 		cmp	ip, #255	@ scale_value,
 1097 04c0 01E08E03 		orreq	lr, lr, #1	@,, tmp280, tmp275
 1098 04c4 00005EE3 		cmp	lr, #0	@ tmp280,
 1099              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1100              		.loc 1 102 47 view .LVU301
 1101 04c8 40E094E5 		ldr	lr, [r4, #64]	@ tmp347, g_armwave_state.bitdepth_height
 1102              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1103              		.loc 1 101 74 view .LVU302
 1104 04cc 2224A0E1 		lsr	r2, r2, #8	@ tmp264, tmp262,
 1105              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1106              		.loc 1 102 47 view .LVU303
 1107 04d0 9E7222E0 		mla	r2, lr, r2, r7	@ tmp268, tmp347, tmp264, scale_value
 1108 04d4 02E0D5E7 		ldrb	lr, [r5, r2]	@ zero_extendqisi2	@ *_91, *_91
 1109 04d8 01E08EE2 		add	lr, lr, #1	@ tmp271, *_91,
 1110 04dc 02E0C5E7 		strb	lr, [r5, r2]	@ tmp271, *_91
 1111              	.LVL68:
 103:armwave.c     ****             }
 1112              		.loc 1 103 17 is_stmt 1 view .LVU304
  90:armwave.c     ****                 
 1113              		.loc 1 90 17 view .LVU305
  93:armwave.c     ****                     continue;
 1114              		.loc 1 93 17 view .LVU306
 1115              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1116              		.loc 1 93 19 is_stmt 0 view .LVU307
 1117 04e0 2500001A 		bne	.L56		@,
 1118              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1119              		.loc 1 101 34 view .LVU308
 1120 04e4 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1121              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1122              		.loc 1 101 99 view .LVU309
 1123 04e8 40E094E5 		ldr	lr, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1124              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1125              		.loc 1 93 20 view .LVU310
 1126 04ec FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 1127              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1128              		.loc 1 101 34 view .LVU311
 1129 04f0 920B0BE0 		mul	fp, r2, fp	@ tmp283, g_armwave_state.cmp_x_bitdepth_scale, tmp282
 1130              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1131              		.loc 1 93 20 view .LVU312
 1132 04f4 0170A003 		moveq	r7, #1	@ tmp296,
 1133 04f8 0070A013 		movne	r7, #0	@ tmp296,
 1134              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1135              		.loc 1 101 74 view .LVU313
 1136 04fc 2BB4A0E1 		lsr	fp, fp, #8	@ tmp285, tmp283,
 1137              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1138              		.loc 1 93 19 view .LVU314
 1139 0500 FF0050E3 		cmp	r0, #255	@ scale_value,
 1140 0504 01708703 		orreq	r7, r7, #1	@,, tmp301, tmp296
 1141              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1142              		.loc 1 102 47 view .LVU315
 1143 0508 9ECB2CE0 		mla	ip, lr, fp, ip	@ tmp289, g_armwave_state.bitdepth_height, tmp285, scale_value
 1144              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1145              		.loc 1 93 19 view .LVU316
 1146 050c 000057E3 		cmp	r7, #0	@ tmp301,
 1147              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1148              		.loc 1 102 47 view .LVU317
 1149 0510 0C20D5E7 		ldrb	r2, [r5, ip]	@ zero_extendqisi2	@ *_121, *_121
 1150 0514 012082E2 		add	r2, r2, #1	@ tmp292, *_121,
 1151 0518 0C20C5E7 		strb	r2, [r5, ip]	@ tmp292, *_121
 103:armwave.c     ****             }
 1152              		.loc 1 103 17 is_stmt 1 view .LVU318
 1153              	.LVL69:
  90:armwave.c     ****                 
 1154              		.loc 1 90 17 view .LVU319
  93:armwave.c     ****                     continue;
 1155              		.loc 1 93 17 view .LVU320
 1156              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1157              		.loc 1 93 19 is_stmt 0 view .LVU321
 1158 051c 1600001A 		bne	.L56		@,
 1159              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1160              		.loc 1 101 34 view .LVU322
 1161 0520 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1162              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1163              		.loc 1 101 99 view .LVU323
 1164 0524 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1165              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1166              		.loc 1 93 20 view .LVU324
 1167 0528 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1168              	.LVL70:
 1169              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1170              		.loc 1 101 34 view .LVU325
 1171 052c 920A0AE0 		mul	r10, r2, r10	@ tmp304, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 1172              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1173              		.loc 1 93 20 view .LVU326
 1174 0530 0120A003 		moveq	r2, #1	@ tmp316,
 1175 0534 0020A013 		movne	r2, #0	@ tmp316,
 1176              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1177              		.loc 1 101 74 view .LVU327
 1178 0538 2AA4A0E1 		lsr	r10, r10, #8	@ tmp306, tmp304,
 1179              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1180              		.loc 1 93 19 view .LVU328
 1181 053c FF0053E3 		cmp	r3, #255	@ word,
 1182 0540 01208203 		orreq	r2, r2, #1	@,, tmp321, tmp316
 1183              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1184              		.loc 1 102 47 view .LVU329
 1185 0544 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp310, g_armwave_state.bitdepth_height, tmp306, scale_value
 1186              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1187              		.loc 1 93 19 view .LVU330
 1188 0548 000052E3 		cmp	r2, #0	@ tmp321,
 1189              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1190              		.loc 1 102 47 view .LVU331
 1191 054c 0020D5E7 		ldrb	r2, [r5, r0]	@ zero_extendqisi2	@ *_151, *_151
 1192 0550 012082E2 		add	r2, r2, #1	@ tmp313, *_151,
 1193 0554 0020C5E7 		strb	r2, [r5, r0]	@ tmp313, *_151
 103:armwave.c     ****             }
 1194              		.loc 1 103 17 is_stmt 1 view .LVU332
 1195              	.LVL71:
  90:armwave.c     ****                 
 1196              		.loc 1 90 17 view .LVU333
  93:armwave.c     ****                     continue;
 1197              		.loc 1 93 17 view .LVU334
 1198              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1199              		.loc 1 93 19 is_stmt 0 view .LVU335
 1200 0558 0700001A 		bne	.L56		@,
 1201              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1202              		.loc 1 101 34 view .LVU336
 1203 055c 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1204              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1205              		.loc 1 101 99 view .LVU337
 1206 0560 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1207              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1208              		.loc 1 101 34 view .LVU338
 1209 0564 920808E0 		mul	r8, r2, r8	@ tmp324, g_armwave_state.cmp_x_bitdepth_scale, tmp323
 1210              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1211              		.loc 1 101 74 view .LVU339
 1212 0568 2884A0E1 		lsr	r8, r8, #8	@ tmp326, tmp324,
 1213              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 1214              		.loc 1 102 47 view .LVU340
 1215 056c 903823E0 		mla	r3, r0, r8, r3	@ tmp330, g_armwave_state.bitdepth_height, tmp326, word
 1216 0570 0320D5E7 		ldrb	r2, [r5, r3]	@ zero_extendqisi2	@ *_181, *_181
 1217 0574 012082E2 		add	r2, r2, #1	@ tmp333, *_181,
 1218 0578 0320C5E7 		strb	r2, [r5, r3]	@ tmp333, *_181
 103:armwave.c     ****             }
 1219              		.loc 1 103 17 is_stmt 1 view .LVU341
 1220              	.LVL72:
 1221              	.L56:
 1222              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1223              		.loc 1 85 37 is_stmt 0 view .LVU342
 1224 057c 041081E2 		add	r1, r1, #4	@ yy, yy,
 1225              	.LVL73:
 1226              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1227              		.loc 1 85 9 view .LVU343
 1228 0580 010056E1 		cmp	r6, r1	@ _7, yy
 1229 0584 B8FFFF8A 		bhi	.L54		@,
 1230              	.LVL74:
 1231              	.L55:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1232              		.loc 1 85 9 view .LVU344
 1233              	.LBE12:
 1234              	.LBE13:
 252:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 1235              		.loc 1 252 9 is_stmt 1 view .LVU345
 253:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 1236              		.loc 1 253 9 view .LVU346
 1237              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 247:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 1238              		.loc 1 247 68 is_stmt 0 view .LVU347
 1239 0588 447094E5 		ldr	r7, [r4, #68]	@ _9, g_armwave_state.slice_height
 1240              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 247:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 1241              		.loc 1 247 51 view .LVU348
 1242 058c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 1243 0590 0710A0E1 		mov	r1, r7	@, _9
 1244 0594 FEFFFFEB 		bl	__aeabi_idiv		@
 1245              	.LVL75:
 1246              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 247:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 1247              		.loc 1 247 86 view .LVU349
 1248 0598 019089E2 		add	r9, r9, #1	@ yy, yy,
 1249              	.LVL76:
 1250              	@ armwave.c:247:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 247:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 1251              		.loc 1 247 5 view .LVU350
 1252 059c 090050E1 		cmp	r0, r9	@, yy
 1253 05a0 93FFFF8A 		bhi	.L48		@,
 1254              	.LVL77:
 1255              	.L47:
 1256              	@ armwave.c:257: }
 254:armwave.c     ****     }
 255:armwave.c     **** 
 256:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 257:armwave.c     **** }
 1257              		.loc 1 257 1 view .LVU351
 1258 05a4 1CD08DE2 		add	sp, sp, #28	@,,
 1259              		.cfi_def_cfa_offset 36
 1260              		@ sp needed	@
 1261 05a8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1262              	.L62:
 1263              		.align	2
 1264              	.L61:
 1265 05ac 00000000 		.word	g_armwave_state
 1266 05b0 20000000 		.word	.LC2
 1267 05b4 5C000000 		.word	.LC3
 1268              		.cfi_endproc
 1269              	.LFE61:
 1271              		.align	2
 1272              		.global	armwave_setup_render
 1273              		.syntax unified
 1274              		.arm
 1275              		.fpu vfp
 1277              	armwave_setup_render:
 1278              	.LVL78:
 1279              	.LFB62:
 258:armwave.c     **** 
 259:armwave.c     **** /*
 260:armwave.c     ****  * Setup the renderer with passed parameters.
 261:armwave.c     ****  */
 262:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 263:armwave.c     **** {
 1280              		.loc 1 263 1 is_stmt 1 view -0
 1281              		.cfi_startproc
 1282              		@ args = 12, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 264:armwave.c     ****     uint32_t length, xx;
 1284              		.loc 1 264 5 view .LVU353
 265:armwave.c     ****     float points_per_pixel;
 1285              		.loc 1 265 5 view .LVU354
 266:armwave.c     **** 
 267:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1286              		.loc 1 267 5 view .LVU355
 1287              	@ armwave.c:263: {
 263:armwave.c     ****     uint32_t length, xx;
 1288              		.loc 1 263 1 is_stmt 0 view .LVU356
 1289 05b8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1290              		.cfi_def_cfa_offset 28
 1291              		.cfi_offset 4, -28
 1292              		.cfi_offset 5, -24
 1293              		.cfi_offset 6, -20
 1294              		.cfi_offset 7, -16
 1295              		.cfi_offset 8, -12
 1296              		.cfi_offset 9, -8
 1297              		.cfi_offset 14, -4
 1298 05bc 028B2DED 		vpush.64	{d8}	@
 1299              		.cfi_def_cfa_offset 36
 1300              		.cfi_offset 80, -36
 1301              		.cfi_offset 81, -32
 1302 05c0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1303 05c4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1304 05c8 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1305 05cc 14D04DE2 		sub	sp, sp, #20	@,,
 1306              		.cfi_def_cfa_offset 56
 1307              	@ armwave.c:263: {
 263:armwave.c     ****     uint32_t length, xx;
 1308              		.loc 1 263 1 view .LVU357
 1309 05d0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1310 05d4 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1311 05d8 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1312              	@ armwave.c:267:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1313              		.loc 1 267 5 view .LVU358
 1314 05dc 00308DE5 		str	r3, [sp]	@ wave_stride,
 1315 05e0 F460CDE1 		strd	r6, [sp, #4]	@,,
 1316 05e4 0230A0E1 		mov	r3, r2	@, waves_max
 1317              	.LVL79:
 1318              		.loc 1 267 5 view .LVU359
 1319 05e8 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1320 05ec 0120A0E1 		mov	r2, r1	@, end_point
 1321              	.LVL80:
 1322              		.loc 1 267 5 view .LVU360
 1323 05f0 0010A0E1 		mov	r1, r0	@, start_point
 1324              	.LVL81:
 1325              		.loc 1 267 5 view .LVU361
 1326 05f4 D0019FE5 		ldr	r0, .L77+12	@,
 1327              	.LVL82:
 1328              		.loc 1 267 5 view .LVU362
 1329 05f8 FEFFFFEB 		bl	printf		@
 1330              	.LVL83:
 268:armwave.c     **** 
 269:armwave.c     ****     // TODO these asserts should instead raise PyExc
 270:armwave.c     ****     assert(start_point < end_point);
 1331              		.loc 1 270 5 is_stmt 1 view .LVU363
 1332 05fc 050054E1 		cmp	r4, r5	@ start_point, end_point
 1333 0600 5F00002A 		bcs	.L74		@,
 271:armwave.c     **** 
 272:armwave.c     ****     /*
 273:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 274:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 275:armwave.c     **** 
 276:armwave.c     ****     if(target_height == 256) {
 277:armwave.c     ****         g_armwave_state.row_shift = 8;
 278:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 279:armwave.c     ****     } else if(target_height == 512) {
 280:armwave.c     ****         g_armwave_state.row_shift = 9;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 282:armwave.c     ****     } else if(target_height == 1024) {
 283:armwave.c     ****         g_armwave_state.row_shift = 10;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 285:armwave.c     ****     } else if(target_height == 2048) {
 286:armwave.c     ****         g_armwave_state.row_shift = 11;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 288:armwave.c     ****     }
 289:armwave.c     ****     */
 290:armwave.c     **** 
 291:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 292:armwave.c     ****     g_armwave_state.xstride = target_height;
 1334              		.loc 1 292 5 view .LVU364
 1335              	@ armwave.c:303:     g_armwave_state.wave_length = end_point - start_point;
 293:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 294:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 295:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 296:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 297:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 298:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 299:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 300:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 301:armwave.c     ****     g_armwave_state.target_width = target_width;
 302:armwave.c     ****     g_armwave_state.target_height = target_height;
 303:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1336              		.loc 1 303 45 is_stmt 0 view .LVU365
 1337 0604 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1338              	.LVL84:
 1339              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1340              		.loc 1 293 49 view .LVU366
 1341 0608 6C6A9FED 		vldr.32	s12, .L77	@ tmp175,
 1342              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 304:armwave.c     **** 
 305:armwave.c     ****     // Calculate compound scaler
 306:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 307:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1343              		.loc 1 307 48 view .LVU367
 1344 060c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1345              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1346              		.loc 1 307 79 view .LVU368
 1347 0610 6B6ADFED 		vldr.32	s13, .L77+4	@ tmp199,
 1348              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1349              		.loc 1 300 90 view .LVU369
 1350 0614 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1351              	@ armwave.c:292:     g_armwave_state.xstride = target_height;
 292:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1352              		.loc 1 292 29 view .LVU370
 1353 0618 B0419FE5 		ldr	r4, .L77+16	@ tmp242,
 1354              	.LVL85:
 1355              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1356              		.loc 1 307 48 view .LVU371
 1357 061c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1358              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1359              		.loc 1 293 49 view .LVU372
 1360 0620 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1361              	@ armwave.c:298:     g_armwave_state.size = target_height * target_width;
 298:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1362              		.loc 1 298 42 view .LVU373
 1363 0624 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1364              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1365              		.loc 1 300 74 view .LVU374
 1366 0628 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1367              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1368              		.loc 1 293 49 view .LVU375
 1369 062c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1370              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1371              		.loc 1 307 48 view .LVU376
 1372 0630 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1373              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1374              		.loc 1 300 74 view .LVU377
 1375 0634 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1376              	@ armwave.c:299:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 299:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1377              		.loc 1 299 37 view .LVU378
 1378 0638 012CA0E3 		mov	r2, #256	@ tmp185,
 1379              	@ armwave.c:298:     g_armwave_state.size = target_height * target_width;
 298:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1380              		.loc 1 298 26 view .LVU379
 1381 063c 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1382              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1383              		.loc 1 307 48 view .LVU380
 1384 0640 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1385              	@ armwave.c:309:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 308:armwave.c     **** 
 309:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1386              		.loc 1 309 5 view .LVU381
 1387 0644 0310A0E1 		mov	r1, r3	@, tmp190
 1388              	@ armwave.c:299:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 299:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1389              		.loc 1 299 37 view .LVU382
 1390 0648 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1391              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1392              		.loc 1 300 34 view .LVU383
 1393 064c 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1394              	@ armwave.c:309:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1395              		.loc 1 309 5 view .LVU384
 1396 0650 7C019FE5 		ldr	r0, .L77+20	@,
 1397              	@ armwave.c:292:     g_armwave_state.xstride = target_height;
 292:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1398              		.loc 1 292 29 view .LVU385
 1399 0654 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1400              		.loc 1 293 5 is_stmt 1 view .LVU386
 1401              	@ armwave.c:295:     g_armwave_state.wave_stride = wave_stride;
 295:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1402              		.loc 1 295 33 is_stmt 0 view .LVU387
 1403 0658 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1404              	@ armwave.c:296:     g_armwave_state.waves_max = waves_max;
 296:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1405              		.loc 1 296 31 view .LVU388
 1406 065c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1407              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 1408              		.loc 1 307 48 view .LVU389
 1409 0660 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1410              	@ armwave.c:297:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 297:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1411              		.loc 1 297 27 view .LVU390
 1412 0664 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1413              	@ armwave.c:302:     g_armwave_state.target_height = target_height;
 302:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1414              		.loc 1 302 35 view .LVU391
 1415 0668 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1416              	@ armwave.c:303:     g_armwave_state.wave_length = end_point - start_point;
 303:armwave.c     **** 
 1417              		.loc 1 303 33 view .LVU392
 1418 066c 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1419              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1420              		.loc 1 293 49 view .LVU393
 1421 0670 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1422              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 1423              		.loc 1 307 79 view .LVU394
 1424 0674 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1425              	@ armwave.c:306:     g_armwave_state.cmp_x_bitdepth_scale = \
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1426              		.loc 1 306 42 view .LVU395
 1427 0678 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1428              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1429              		.loc 1 293 33 view .LVU396
 1430 067c 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 294:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1431              		.loc 1 294 5 is_stmt 1 view .LVU397
 1432              	@ armwave.c:306:     g_armwave_state.cmp_x_bitdepth_scale = \
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1433              		.loc 1 306 42 is_stmt 0 view .LVU398
 1434 0680 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1435              	@ armwave.c:294:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 294:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1436              		.loc 1 294 30 view .LVU399
 1437 0684 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1438              	@ armwave.c:309:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1439              		.loc 1 309 5 view .LVU400
 1440 0688 0C30A0E1 		mov	r3, ip	@, _19
 1441 068c 0C20A0E1 		mov	r2, ip	@, tmp3
 1442              	@ armwave.c:306:     g_armwave_state.cmp_x_bitdepth_scale = \
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1443              		.loc 1 306 42 view .LVU401
 1444 0690 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1445              	@ armwave.c:294:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 294:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1446              		.loc 1 294 30 view .LVU402
 1447 0694 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 295:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1448              		.loc 1 295 5 is_stmt 1 view .LVU403
 296:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1449              		.loc 1 296 5 view .LVU404
 297:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1450              		.loc 1 297 5 view .LVU405
 298:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1451              		.loc 1 298 5 view .LVU406
 299:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1452              		.loc 1 299 5 view .LVU407
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1453              		.loc 1 300 5 view .LVU408
 301:armwave.c     ****     g_armwave_state.target_height = target_height;
 1454              		.loc 1 301 5 view .LVU409
 302:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1455              		.loc 1 302 5 view .LVU410
 303:armwave.c     **** 
 1456              		.loc 1 303 5 view .LVU411
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1457              		.loc 1 306 5 view .LVU412
 1458              		.loc 1 309 5 view .LVU413
 1459 0698 FEFFFFEB 		bl	printf		@
 1460              	.LVL86:
 310:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 311:armwave.c     **** 
 312:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 313:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 314:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 315:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1461              		.loc 1 315 5 view .LVU414
 1462              	@ armwave.c:317:     if(g_armwave_state.ch1_buffer != NULL)
 316:armwave.c     **** 
 317:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1463              		.loc 1 317 23 is_stmt 0 view .LVU415
 1464 069c 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1465              	@ armwave.c:315:     g_armwave_state.slice_height = 64;  
 315:armwave.c     **** 
 1466              		.loc 1 315 34 view .LVU416
 1467 06a0 4030A0E3 		mov	r3, #64	@ tmp203,
 1468              	@ armwave.c:317:     if(g_armwave_state.ch1_buffer != NULL)
 1469              		.loc 1 317 7 view .LVU417
 1470 06a4 000050E3 		cmp	r0, #0	@ _20,
 1471              	@ armwave.c:315:     g_armwave_state.slice_height = 64;  
 315:armwave.c     **** 
 1472              		.loc 1 315 34 view .LVU418
 1473 06a8 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1474              		.loc 1 317 5 is_stmt 1 view .LVU419
 1475              	@ armwave.c:317:     if(g_armwave_state.ch1_buffer != NULL)
 1476              		.loc 1 317 7 is_stmt 0 view .LVU420
 1477 06ac 0000000A 		beq	.L65		@,
 318:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1478              		.loc 1 318 9 is_stmt 1 view .LVU421
 1479 06b0 FEFFFFEB 		bl	free		@
 1480              	.LVL87:
 1481              	.L65:
 319:armwave.c     **** 
 320:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1482              		.loc 1 320 5 view .LVU422
 1483              	@ armwave.c:320:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1484              		.loc 1 320 34 is_stmt 0 view .LVU423
 1485 06b4 0110A0E3 		mov	r1, #1	@,
 1486 06b8 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1487 06bc FEFFFFEB 		bl	calloc		@
 1488              	.LVL88:
 1489              	@ armwave.c:322:     assert(g_armwave_state.ch1_buffer != NULL);
 321:armwave.c     **** 
 322:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1490              		.loc 1 322 5 view .LVU424
 1491 06c0 000050E3 		cmp	r0, #0	@ _23,
 1492              	@ armwave.c:320:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 320:armwave.c     **** 
 1493              		.loc 1 320 34 view .LVU425
 1494 06c4 0070A0E1 		mov	r7, r0	@ _23,
 1495              	@ armwave.c:320:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 320:armwave.c     **** 
 1496              		.loc 1 320 32 view .LVU426
 1497 06c8 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1498              		.loc 1 322 5 is_stmt 1 view .LVU427
 1499 06cc 3600000A 		beq	.L75		@,
 323:armwave.c     **** 
 324:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 325:armwave.c     ****     length = end_point - start_point;
 1500              		.loc 1 325 5 view .LVU428
 1501              	.LVL89:
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1502              		.loc 1 326 5 view .LVU429
 1503              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 1504              		.loc 1 326 34 is_stmt 0 view .LVU430
 1505 06d0 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1506              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 1507              		.loc 1 326 22 view .LVU431
 1508 06d4 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1509              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1510              		.loc 1 327 60 view .LVU432
 1511 06d8 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1512              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 328:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1513              		.loc 1 328 40 view .LVU433
 1514 06dc 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1515              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1516              		.loc 1 326 34 view .LVU434
 1517 06e0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1518              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1519              		.loc 1 326 22 view .LVU435
 1520 06e4 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1521              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1522              		.loc 1 327 60 view .LVU436
 1523 06e8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1524              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1525              		.loc 1 326 22 view .LVU437
 1526 06ec A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1527              	.LVL90:
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1528              		.loc 1 327 5 is_stmt 1 view .LVU438
 1529              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1530              		.loc 1 327 60 is_stmt 0 view .LVU439
 1531 06f0 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1532              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1533              		.loc 1 327 41 view .LVU440
 1534 06f4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1535 06f8 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1536              		.loc 1 328 5 is_stmt 1 view .LVU441
 1537              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1538              		.loc 1 328 40 is_stmt 0 view .LVU442
 1539 06fc FEFFFFEB 		bl	malloc		@
 1540              	.LVL91:
 1541              	@ armwave.c:330:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 329:armwave.c     **** 
 330:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1542              		.loc 1 330 5 view .LVU443
 1543 0700 000050E3 		cmp	r0, #0	@ _31,
 1544              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 328:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1545              		.loc 1 328 40 view .LVU444
 1546 0704 0060A0E1 		mov	r6, r0	@ _31,
 1547              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 328:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1548              		.loc 1 328 38 view .LVU445
 1549 0708 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1550              		.loc 1 330 5 is_stmt 1 view .LVU446
 1551 070c 2100000A 		beq	.L76		@,
 1552              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 331:armwave.c     **** 
 332:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 333:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 333 54 is_stmt 0 view .LVU447
 1554 0710 2C7ADFED 		vldr.32	s15, .L77+8	@ tmp230,
 1555 0714 02C040E2 		sub	ip, r0, #2	@ ivtmp.74, _31,
 1556              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1557              		.loc 1 332 12 view .LVU448
 1558 0718 0030A0E3 		mov	r3, #0	@ xx,
 1559              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1560              		.loc 1 333 54 view .LVU449
 1561 071c 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1562              	.L68:
 1563              	.LVL92:
 1564              		.loc 1 333 9 is_stmt 1 discriminator 3 view .LVU450
 1565              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1566              		.loc 1 333 74 is_stmt 0 discriminator 3 view .LVU451
 1567 0720 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1568              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1569              		.loc 1 332 32 discriminator 3 view .LVU452
 1570 0724 013083E2 		add	r3, r3, #1	@ xx, xx,
 1571              	.LVL93:
 1572              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1573              		.loc 1 332 5 discriminator 3 view .LVU453
 1574 0728 030055E1 		cmp	r5, r3	@ _13, xx
 1575              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1576              		.loc 1 333 74 discriminator 3 view .LVU454
 1577 072c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1578 0730 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1579              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1580              		.loc 1 333 46 discriminator 3 view .LVU455
 1581 0734 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1582 0738 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1583 073c B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1584              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1585              		.loc 1 332 5 discriminator 3 view .LVU456
 1586 0740 F6FFFF1A 		bne	.L68		@,
 334:armwave.c     **** 
 335:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 336:armwave.c     ****     }
 337:armwave.c     **** 
 338:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1587              		.loc 1 338 5 is_stmt 1 view .LVU457
 1588              	@ armwave.c:338:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1589              		.loc 1 338 34 is_stmt 0 view .LVU458
 1590 0744 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1591 0748 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1592 074c FEFFFFEB 		bl	malloc		@
 1593              	.LVL94:
 1594              	@ armwave.c:340:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 339:armwave.c     **** 
 340:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1595              		.loc 1 340 5 view .LVU459
 1596 0750 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1597 0754 0620A0E1 		mov	r2, r6	@, _31
 1598 0758 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1599 075c 0710A0E1 		mov	r1, r7	@, _23
 1600              	@ armwave.c:338:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338:armwave.c     **** 
 1601              		.loc 1 338 34 view .LVU460
 1602 0760 00C0A0E1 		mov	ip, r0	@ tmp237,
 1603              	@ armwave.c:340:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1604              		.loc 1 340 5 view .LVU461
 1605 0764 0030A0E1 		mov	r3, r0	@, tmp237
 1606              	@ armwave.c:338:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338:armwave.c     **** 
 1607              		.loc 1 338 32 view .LVU462
 1608 0768 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1609              		.loc 1 340 5 is_stmt 1 view .LVU463
 1610 076c 64009FE5 		ldr	r0, .L77+24	@,
 1611 0770 FEFFFFEB 		bl	printf		@
 1612              	.LVL95:
 341:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 342:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 343:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 344:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 345:armwave.c     **** 
 346:armwave.c     ****     malloc_stats();
 1613              		.loc 1 346 5 view .LVU464
 1614              	@ armwave.c:347: }
 347:armwave.c     **** }
 1615              		.loc 1 347 1 is_stmt 0 view .LVU465
 1616 0774 14D08DE2 		add	sp, sp, #20	@,,
 1617              		.cfi_remember_state
 1618              		.cfi_def_cfa_offset 36
 1619              		@ sp needed	@
 1620 0778 028BBDEC 		vldm	sp!, {d8}	@
 1621              		.cfi_restore 80
 1622              		.cfi_restore 81
 1623              		.cfi_def_cfa_offset 28
 1624              	.LVL96:
 1625              		.loc 1 347 1 view .LVU466
 1626 077c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1627              		.cfi_restore 14
 1628              		.cfi_restore 9
 1629              		.cfi_restore 8
 1630              		.cfi_restore 7
 1631              		.cfi_restore 6
 1632              		.cfi_restore 5
 1633              		.cfi_restore 4
 1634              		.cfi_def_cfa_offset 0
 1635              	.LVL97:
 1636              	@ armwave.c:346:     malloc_stats();
 346:armwave.c     **** }
 1637              		.loc 1 346 5 view .LVU467
 1638 0780 FEFFFFEA 		b	malloc_stats		@
 1639              	.LVL98:
 1640              	.L74:
 1641              		.cfi_restore_state
 270:armwave.c     **** 
 1642              		.loc 1 270 5 is_stmt 1 discriminator 1 view .LVU468
 1643 0784 50309FE5 		ldr	r3, .L77+28	@,
 1644 0788 50209FE5 		ldr	r2, .L77+32	@,
 1645 078c 50109FE5 		ldr	r1, .L77+36	@,
 1646 0790 50009FE5 		ldr	r0, .L77+40	@,
 1647 0794 FEFFFFEB 		bl	__assert_fail		@
 1648              	.LVL99:
 1649              	.L76:
 330:armwave.c     **** 
 1650              		.loc 1 330 5 discriminator 1 view .LVU469
 1651 0798 3C309FE5 		ldr	r3, .L77+28	@,
 1652 079c 48209FE5 		ldr	r2, .L77+44	@,
 1653 07a0 3C109FE5 		ldr	r1, .L77+36	@,
 1654 07a4 44009FE5 		ldr	r0, .L77+48	@,
 1655 07a8 FEFFFFEB 		bl	__assert_fail		@
 1656              	.LVL100:
 1657              	.L75:
 322:armwave.c     **** 
 1658              		.loc 1 322 5 discriminator 1 view .LVU470
 1659 07ac 28309FE5 		ldr	r3, .L77+28	@,
 1660 07b0 3C209FE5 		ldr	r2, .L77+52	@,
 1661 07b4 28109FE5 		ldr	r1, .L77+36	@,
 1662 07b8 38009FE5 		ldr	r0, .L77+56	@,
 1663 07bc FEFFFFEB 		bl	__assert_fail		@
 1664              	.LVL101:
 1665              	.L78:
 1666              		.align	2
 1667              	.L77:
 1668 07c0 00007F43 		.word	1132396544
 1669 07c4 00008043 		.word	1132462080
 1670 07c8 0000803F 		.word	1065353216
 1671 07cc A4000000 		.word	.LC6
 1672 07d0 00000000 		.word	g_armwave_state
 1673 07d4 E8000000 		.word	.LC8
 1674 07d8 6C010000 		.word	.LC11
 1675 07dc 1C000000 		.word	.LANCHOR0+28
 1676 07e0 0E010000 		.word	270
 1677 07e4 84000000 		.word	.LC4
 1678 07e8 D0000000 		.word	.LC7
 1679 07ec 4A010000 		.word	330
 1680 07f0 40010000 		.word	.LC10
 1681 07f4 42010000 		.word	322
 1682 07f8 1C010000 		.word	.LC9
 1683              		.cfi_endproc
 1684              	.LFE62:
 1686              		.align	2
 1687              		.global	armwave_set_wave_pointer
 1688              		.syntax unified
 1689              		.arm
 1690              		.fpu vfp
 1692              	armwave_set_wave_pointer:
 1693              	.LVL102:
 1694              	.LFB63:
 348:armwave.c     **** 
 349:armwave.c     **** /*
 350:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 351:armwave.c     ****  * in the future.
 352:armwave.c     ****  */
 353:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 354:armwave.c     **** {
 1695              		.loc 1 354 1 view -0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1699              		.loc 1 355 5 view .LVU472
 1700 07fc 000050E3 		cmp	r0, #0	@ wave_buffer
 1701              		.loc 1 355 5 is_stmt 0 view .LVU473
 1702 0800 0200000A 		beq	.L84		@,
 356:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1703              		.loc 1 356 5 is_stmt 1 view .LVU474
 1704              	@ armwave.c:356:     g_armwave_state.wave_buffer = wave_buffer;
 1705              		.loc 1 356 33 is_stmt 0 view .LVU475
 1706 0804 1C309FE5 		ldr	r3, .L85	@ tmp116,
 1707 0808 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1708 080c 1EFF2FE1 		bx	lr	@
 1709              	.L84:
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1710              		.loc 1 355 5 is_stmt 1 discriminator 1 view .LVU476
 1711              	@ armwave.c:354: {
 354:armwave.c     ****     assert(wave_buffer != NULL);
 1712              		.loc 1 354 1 is_stmt 0 discriminator 1 view .LVU477
 1713 0810 10402DE9 		push	{r4, lr}	@
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 4, -8
 1716              		.cfi_offset 14, -4
 1717              	@ armwave.c:355:     assert(wave_buffer != NULL);
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1718              		.loc 1 355 5 discriminator 1 view .LVU478
 1719 0814 10309FE5 		ldr	r3, .L85+4	@,
 1720 0818 10209FE5 		ldr	r2, .L85+8	@,
 1721 081c 10109FE5 		ldr	r1, .L85+12	@,
 1722 0820 10009FE5 		ldr	r0, .L85+16	@,
 1723              	.LVL103:
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1724              		.loc 1 355 5 discriminator 1 view .LVU479
 1725 0824 FEFFFFEB 		bl	__assert_fail		@
 1726              	.LVL104:
 1727              	.L86:
 1728              		.align	2
 1729              	.L85:
 1730 0828 00000000 		.word	g_armwave_state
 1731 082c 34000000 		.word	.LANCHOR0+52
 1732 0830 63010000 		.word	355
 1733 0834 84000000 		.word	.LC4
 1734 0838 90010000 		.word	.LC12
 1735              		.cfi_endproc
 1736              	.LFE63:
 1738              		.align	2
 1739              		.global	armwave_set_wave_pointer_as_testbuf
 1740              		.syntax unified
 1741              		.arm
 1742              		.fpu vfp
 1744              	armwave_set_wave_pointer_as_testbuf:
 1745              	.LVL105:
 1746              	.LFB64:
 357:armwave.c     **** }
 358:armwave.c     **** 
 359:armwave.c     **** /*
 360:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 361:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 362:armwave.c     ****  */
 363:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 364:armwave.c     **** {
 1747              		.loc 1 364 1 is_stmt 1 view -0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 365:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1752              		.loc 1 365 5 view .LVU481
 1753              	@ armwave.c:365:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1754              		.loc 1 365 29 is_stmt 0 view .LVU482
 1755 083c 24309FE5 		ldr	r3, .L90	@ tmp117,
 1756              	@ armwave.c:365:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1757              		.loc 1 365 7 view .LVU483
 1758 0840 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1759 0844 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1760 0848 0400003A 		bcc	.L89		@,
 366:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 367:armwave.c     ****         return;
 368:armwave.c     ****     }
 369:armwave.c     **** 
 370:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1761              		.loc 1 370 5 is_stmt 1 view .LVU484
 1762              	@ armwave.c:370:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1763              		.loc 1 370 111 is_stmt 0 view .LVU485
 1764 084c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1765              	@ armwave.c:370:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1766              		.loc 1 370 68 view .LVU486
 1767 0850 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1768 0854 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1769              	.LVL106:
 1770              	@ armwave.c:370:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1771              		.loc 1 370 33 view .LVU487
 1772 0858 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1773              	@ armwave.c:371: }
 371:armwave.c     **** }
 1774              		.loc 1 371 1 view .LVU488
 1775 085c 1EFF2FE1 		bx	lr	@
 1776              	.LVL107:
 1777              	.L89:
 366:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1778              		.loc 1 366 9 is_stmt 1 view .LVU489
 1779 0860 04009FE5 		ldr	r0, .L90+4	@,
 1780              	.LVL108:
 366:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1781              		.loc 1 366 9 is_stmt 0 view .LVU490
 1782 0864 FEFFFFEA 		b	puts		@
 1783              	.LVL109:
 1784              	.L91:
 1785              		.align	2
 1786              	.L90:
 1787 0868 00000000 		.word	g_armwave_state
 1788 086c A4010000 		.word	.LC13
 1789              		.cfi_endproc
 1790              	.LFE64:
 1792              		.align	2
 1793              		.global	armwave_set_wave_pointer_u32
 1794              		.syntax unified
 1795              		.arm
 1796              		.fpu vfp
 1798              	armwave_set_wave_pointer_u32:
 1799              	.LVL110:
 1800              	.LFB65:
 372:armwave.c     **** 
 373:armwave.c     **** /*
 374:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 375:armwave.c     ****  * disjointed buffers in the future.
 376:armwave.c     ****  */
 377:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 378:armwave.c     **** {
 1801              		.loc 1 378 1 is_stmt 1 view -0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1805              		.loc 1 379 5 view .LVU492
 1806 0870 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1807              		.loc 1 379 5 is_stmt 0 view .LVU493
 1808 0874 0200000A 		beq	.L97		@,
 380:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1809              		.loc 1 380 5 is_stmt 1 view .LVU494
 1810              	@ armwave.c:380:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1811              		.loc 1 380 33 is_stmt 0 view .LVU495
 1812 0878 1C309FE5 		ldr	r3, .L98	@ tmp117,
 1813 087c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1814 0880 1EFF2FE1 		bx	lr	@
 1815              	.L97:
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1816              		.loc 1 379 5 is_stmt 1 discriminator 1 view .LVU496
 1817              	@ armwave.c:378: {
 378:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1818              		.loc 1 378 1 is_stmt 0 discriminator 1 view .LVU497
 1819 0884 10402DE9 		push	{r4, lr}	@
 1820              		.cfi_def_cfa_offset 8
 1821              		.cfi_offset 4, -8
 1822              		.cfi_offset 14, -4
 1823              	@ armwave.c:379:     assert(wave_buffer_ptr != 0);
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1824              		.loc 1 379 5 discriminator 1 view .LVU498
 1825 0888 10309FE5 		ldr	r3, .L98+4	@,
 1826 088c 10209FE5 		ldr	r2, .L98+8	@,
 1827 0890 10109FE5 		ldr	r1, .L98+12	@,
 1828 0894 10009FE5 		ldr	r0, .L98+16	@,
 1829              	.LVL111:
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1830              		.loc 1 379 5 discriminator 1 view .LVU499
 1831 0898 FEFFFFEB 		bl	__assert_fail		@
 1832              	.LVL112:
 1833              	.L99:
 1834              		.align	2
 1835              	.L98:
 1836 089c 00000000 		.word	g_armwave_state
 1837 08a0 50000000 		.word	.LANCHOR0+80
 1838 08a4 7B010000 		.word	379
 1839 08a8 84000000 		.word	.LC4
 1840 08ac E0010000 		.word	.LC14
 1841              		.cfi_endproc
 1842              	.LFE65:
 1844              		.align	2
 1845              		.global	armwave_clear_buffer
 1846              		.syntax unified
 1847              		.arm
 1848              		.fpu vfp
 1850              	armwave_clear_buffer:
 1851              	.LVL113:
 1852              	.LFB66:
 381:armwave.c     **** }
 382:armwave.c     **** 
 383:armwave.c     **** /*
 384:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 385:armwave.c     ****  */
 386:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 387:armwave.c     **** {
 1853              		.loc 1 387 1 is_stmt 1 view -0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 388:armwave.c     ****     // Flags ignored, only one buffer cleared
 389:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1858              		.loc 1 389 5 view .LVU501
 1859              	@ armwave.c:389:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1860              		.loc 1 389 58 is_stmt 0 view .LVU502
 1861 08b0 0C309FE5 		ldr	r3, .L101	@ tmp114,
 1862              	@ armwave.c:389:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1863              		.loc 1 389 5 view .LVU503
 1864 08b4 0010A0E3 		mov	r1, #0	@,
 1865 08b8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1866 08bc 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1867              	.LVL114:
 1868              		.loc 1 389 5 view .LVU504
 1869 08c0 FEFFFFEA 		b	memset		@
 1870              	.LVL115:
 1871              	.L102:
 1872              		.align	2
 1873              	.L101:
 1874 08c4 00000000 		.word	g_armwave_state
 1875              		.cfi_endproc
 1876              	.LFE66:
 1878              		.align	2
 1879              		.global	armwave_set_channel_colour
 1880              		.syntax unified
 1881              		.arm
 1882              		.fpu vfp
 1884              	armwave_set_channel_colour:
 1885              	.LVL116:
 1886              	.LFB67:
 390:armwave.c     **** }
 391:armwave.c     **** 
 392:armwave.c     **** /*
 393:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 394:armwave.c     ****  */
 395:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 396:armwave.c     **** {
 1887              		.loc 1 396 1 is_stmt 1 view -0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              		@ link register save eliminated.
 397:armwave.c     ****     // Only 1ch supported for now
 398:armwave.c     ****     switch(ch) {
 1892              		.loc 1 398 5 view .LVU506
 1893 08c8 010050E3 		cmp	r0, #1	@ ch,
 399:armwave.c     ****         case 1:
 400:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1894              		.loc 1 400 13 view .LVU507
 1895              	@ armwave.c:400:             g_armwave_state.ch1_color.r = r;
 1896              		.loc 1 400 41 is_stmt 0 view .LVU508
 1897 08cc 0C009F05 		ldreq	r0, .L105	@ tmp117,
 1898              	.LVL117:
 1899              		.loc 1 400 41 view .LVU509
 1900 08d0 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 401:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1901              		.loc 1 401 13 is_stmt 1 view .LVU510
 1902              	@ armwave.c:401:             g_armwave_state.ch1_color.g = g;
 1903              		.loc 1 401 41 is_stmt 0 view .LVU511
 1904 08d4 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 402:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1905              		.loc 1 402 13 is_stmt 1 view .LVU512
 1906              	@ armwave.c:402:             g_armwave_state.ch1_color.b = b;
 1907              		.loc 1 402 41 is_stmt 0 view .LVU513
 1908 08d8 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 403:armwave.c     ****             break;
 1909              		.loc 1 403 13 is_stmt 1 view .LVU514
 1910              	@ armwave.c:405: }
 404:armwave.c     ****     }
 405:armwave.c     **** }
 1911              		.loc 1 405 1 is_stmt 0 view .LVU515
 1912 08dc 1EFF2FE1 		bx	lr	@
 1913              	.L106:
 1914              		.align	2
 1915              	.L105:
 1916 08e0 00000000 		.word	g_armwave_state
 1917              		.cfi_endproc
 1918              	.LFE67:
 1920              		.align	2
 1921              		.global	armwave_dump_ppm_debug
 1922              		.syntax unified
 1923              		.arm
 1924              		.fpu vfp
 1926              	armwave_dump_ppm_debug:
 1927              	.LVL118:
 1928              	.LFB68:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Dump a ppm of a buffer to a file.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 411:armwave.c     **** {
 1929              		.loc 1 411 1 is_stmt 1 view -0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1933              		.loc 1 412 5 view .LVU517
 1934              	@ armwave.c:411: {
 411:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1935              		.loc 1 411 1 is_stmt 0 view .LVU518
 1936 08e4 0130A0E1 		mov	r3, r1	@ fn, fn
 1937 08e8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1938              		.cfi_def_cfa_offset 28
 1939              		.cfi_offset 4, -28
 1940              		.cfi_offset 5, -24
 1941              		.cfi_offset 6, -20
 1942              		.cfi_offset 7, -16
 1943              		.cfi_offset 8, -12
 1944              		.cfi_offset 9, -8
 1945              		.cfi_offset 14, -4
 1946 08ec 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1947 08f0 0CD04DE2 		sub	sp, sp, #12	@,,
 1948              		.cfi_def_cfa_offset 40
 1949              	@ armwave.c:412:     FILE *fp = fopen(fn, "wb");
 1950              		.loc 1 412 16 view .LVU519
 1951 08f4 C4109FE5 		ldr	r1, .L115	@,
 1952              	.LVL119:
 1953              		.loc 1 412 16 view .LVU520
 1954 08f8 0300A0E1 		mov	r0, r3	@, fn
 1955              	.LVL120:
 1956              		.loc 1 412 16 view .LVU521
 1957 08fc FEFFFFEB 		bl	fopen64		@
 1958              	.LVL121:
 1959              	@ armwave.c:419:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 413:armwave.c     ****     uint32_t data;
 414:armwave.c     ****     int xx, yy;
 415:armwave.c     **** 
 416:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 417:armwave.c     **** 
 418:armwave.c     ****     fputs("P3\n", fp);
 419:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1960              		.loc 1 419 5 view .LVU522
 1961 0900 BC609FE5 		ldr	r6, .L115+4	@ tmp150,
 1962              	@ armwave.c:418:     fputs("P3\n", fp);
 418:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1963              		.loc 1 418 5 view .LVU523
 1964 0904 0320A0E3 		mov	r2, #3	@,
 1965 0908 0110A0E3 		mov	r1, #1	@,
 1966              	@ armwave.c:412:     FILE *fp = fopen(fn, "wb");
 412:armwave.c     ****     uint32_t data;
 1967              		.loc 1 412 16 view .LVU524
 1968 090c 0070A0E1 		mov	r7, r0	@ fp,
 1969              	.LVL122:
 413:armwave.c     ****     uint32_t data;
 1970              		.loc 1 413 5 is_stmt 1 view .LVU525
 414:armwave.c     **** 
 1971              		.loc 1 414 5 view .LVU526
 418:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1972              		.loc 1 418 5 view .LVU527
 1973 0910 0030A0E1 		mov	r3, r0	@, fp
 1974 0914 AC009FE5 		ldr	r0, .L115+8	@,
 1975              	.LVL123:
 418:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1976              		.loc 1 418 5 is_stmt 0 view .LVU528
 1977 0918 FEFFFFEB 		bl	fwrite		@
 1978              	.LVL124:
 1979              		.loc 1 419 5 is_stmt 1 view .LVU529
 1980 091c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1981 0920 A4109FE5 		ldr	r1, .L115+12	@,
 1982 0924 0700A0E1 		mov	r0, r7	@, fp
 1983 0928 FEFFFFEB 		bl	fprintf		@
 1984              	.LVL125:
 420:armwave.c     ****     fputs("255\n", fp);
 1985              		.loc 1 420 5 view .LVU530
 1986 092c 0420A0E3 		mov	r2, #4	@,
 1987 0930 0730A0E1 		mov	r3, r7	@, fp
 1988 0934 0110A0E3 		mov	r1, #1	@,
 1989 0938 90009FE5 		ldr	r0, .L115+16	@,
 1990 093c FEFFFFEB 		bl	fwrite		@
 1991              	.LVL126:
 421:armwave.c     **** 
 422:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1992              		.loc 1 422 5 view .LVU531
 1993              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1994              		.loc 1 422 37 is_stmt 0 view .LVU532
 1995 0940 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1996              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1997              		.loc 1 422 5 view .LVU533
 1998 0944 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1999 0948 180000DA 		ble	.L108		@,
 2000 094c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2001              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 424:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 425:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 426:armwave.c     **** 
 427:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2002              		.loc 1 427 13 view .LVU534
 2003 0950 7C909FE5 		ldr	r9, .L115+20	@ tmp152,
 2004              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 422:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2005              		.loc 1 422 12 view .LVU535
 2006 0954 0050A0E3 		mov	r5, #0	@ yy,
 2007              	.LVL127:
 2008              	.L109:
 2009              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2010              		.loc 1 423 9 view .LVU536
 2011 0958 000053E3 		cmp	r3, #0	@ _13,
 2012              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2013              		.loc 1 423 16 view .LVU537
 2014 095c 0040A0C3 		movgt	r4, #0	@ xx,
 2015              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2016              		.loc 1 423 9 view .LVU538
 2017 0960 0F0000DA 		ble	.L111		@,
 2018              	.LVL128:
 2019              	.L110:
 424:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2020              		.loc 1 424 13 is_stmt 1 discriminator 3 view .LVU539
 2021              	@ armwave.c:424:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 424:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2022              		.loc 1 424 29 is_stmt 0 discriminator 3 view .LVU540
 2023 0964 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2024              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2025              		.loc 1 427 13 discriminator 3 view .LVU541
 2026 0968 0910A0E1 		mov	r1, r9	@, tmp152
 2027 096c 0700A0E1 		mov	r0, r7	@, fp
 2028              	@ armwave.c:424:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 424:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2029              		.loc 1 424 18 discriminator 3 view .LVU542
 2030 0970 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2031              	.LVL129:
 2032              		.loc 1 427 13 is_stmt 1 discriminator 3 view .LVU543
 2033              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2034              		.loc 1 423 58 is_stmt 0 discriminator 3 view .LVU544
 2035 0974 014084E2 		add	r4, r4, #1	@ xx, xx,
 2036              	.LVL130:
 2037              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2038              		.loc 1 427 81 discriminator 3 view .LVU545
 2039 0978 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2040              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2041              		.loc 1 427 61 discriminator 3 view .LVU546
 2042 097c 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2043              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2044              		.loc 1 427 13 discriminator 3 view .LVU547
 2045 0980 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2046 0984 7330EFE6 		uxtb	r3, r3	@, tmp142
 2047 0988 00C08DE5 		str	ip, [sp]	@ tmp147,
 2048 098c 7220EFE6 		uxtb	r2, r2	@, data
 2049              	.LVL131:
 2050              		.loc 1 427 13 discriminator 3 view .LVU548
 2051 0990 FEFFFFEB 		bl	fprintf		@
 2052              	.LVL132:
 2053              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2054              		.loc 1 423 41 discriminator 3 view .LVU549
 2055 0994 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2056              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2057              		.loc 1 423 9 discriminator 3 view .LVU550
 2058 0998 040053E1 		cmp	r3, r4	@ _13, xx
 2059 099c F0FFFFCA 		bgt	.L110		@,
 2060 09a0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2061              	.LVL133:
 2062              	.L111:
 2063              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 422:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2064              		.loc 1 422 55 discriminator 2 view .LVU551
 2065 09a4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2066              	.LVL134:
 2067              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 422:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2068              		.loc 1 422 5 discriminator 2 view .LVU552
 2069 09a8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2070 09ac E9FFFFBA 		blt	.L109		@,
 2071              	.LVL135:
 2072              	.L108:
 428:armwave.c     ****         }
 429:armwave.c     ****     }
 430:armwave.c     **** 
 431:armwave.c     ****     fclose(fp);
 2073              		.loc 1 431 5 is_stmt 1 view .LVU553
 2074 09b0 0700A0E1 		mov	r0, r7	@, fp
 2075              	@ armwave.c:432: }
 432:armwave.c     **** }
 2076              		.loc 1 432 1 is_stmt 0 view .LVU554
 2077 09b4 0CD08DE2 		add	sp, sp, #12	@,,
 2078              		.cfi_def_cfa_offset 28
 2079              		@ sp needed	@
 2080 09b8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2081              		.cfi_restore 14
 2082              		.cfi_restore 9
 2083              		.cfi_restore 8
 2084              		.cfi_restore 7
 2085              		.cfi_restore 6
 2086              		.cfi_restore 5
 2087              		.cfi_restore 4
 2088              		.cfi_def_cfa_offset 0
 2089              	.LVL136:
 2090              	@ armwave.c:431:     fclose(fp);
 431:armwave.c     **** }
 2091              		.loc 1 431 5 view .LVU555
 2092 09bc FEFFFFEA 		b	fclose		@
 2093              	.LVL137:
 2094              	.L116:
 431:armwave.c     **** }
 2095              		.loc 1 431 5 view .LVU556
 2096              		.align	2
 2097              	.L115:
 2098 09c0 F8010000 		.word	.LC15
 2099 09c4 00000000 		.word	g_armwave_state
 2100 09c8 FC010000 		.word	.LC16
 2101 09cc 00020000 		.word	.LC17
 2102 09d0 08020000 		.word	.LC18
 2103 09d4 10020000 		.word	.LC19
 2104              		.cfi_endproc
 2105              	.LFE68:
 2107              		.align	2
 2108              		.global	armwave_test_init
 2109              		.syntax unified
 2110              		.arm
 2111              		.fpu vfp
 2113              	armwave_test_init:
 2114              	.LVL138:
 2115              	.LFB69:
 433:armwave.c     **** 
 434:armwave.c     **** /*
 435:armwave.c     ****  * Initialise some test functionry.
 436:armwave.c     ****  */
 437:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 438:armwave.c     **** {
 2116              		.loc 1 438 1 is_stmt 1 view -0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     test_create_gamma();
 2120              		.loc 1 439 5 view .LVU558
 2121              	.LBB18:
 2122              	.LBI18:
  34:armwave.c     **** {
 2123              		.loc 1 34 6 view .LVU559
  34:armwave.c     **** {
 2124              		.loc 1 34 6 is_stmt 0 view .LVU560
 2125              	.LBE18:
 2126              	@ armwave.c:438: {
 438:armwave.c     ****     test_create_gamma();
 2127              		.loc 1 438 1 view .LVU561
 2128 09d8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2129              		.cfi_def_cfa_offset 32
 2130              		.cfi_offset 4, -32
 2131              		.cfi_offset 5, -28
 2132              		.cfi_offset 6, -24
 2133              		.cfi_offset 7, -20
 2134              		.cfi_offset 8, -16
 2135              		.cfi_offset 9, -12
 2136              		.cfi_offset 10, -8
 2137              		.cfi_offset 14, -4
 2138 09dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 2139              		.cfi_def_cfa_offset 56
 2140              		.cfi_offset 80, -56
 2141              		.cfi_offset 81, -52
 2142              		.cfi_offset 82, -48
 2143              		.cfi_offset 83, -44
 2144              		.cfi_offset 84, -40
 2145              		.cfi_offset 85, -36
 2146 09e0 BC409FE5 		ldr	r4, .L121+20	@ ivtmp.88,
 2147              	.LBB21:
 2148              	.LBB19:
 2149              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2150              		.loc 1 40 32 view .LVU562
 2151 09e4 2DAA9FED 		vldr.32	s20, .L121+16	@ tmp136,
 2152              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2153              		.loc 1 40 26 view .LVU563
 2154 09e8 289B9FED 		vldr.64	d9, .L121	@ tmp151,
 2155              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2156              		.loc 1 40 49 view .LVU564
 2157 09ec 298B9FED 		vldr.64	d8, .L121+8	@ tmp139,
 2158 09f0 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.88,
 2159              	.LBE19:
 2160              	.LBE21:
 2161              	@ armwave.c:438: {
 438:armwave.c     ****     test_create_gamma();
 2162              		.loc 1 438 1 view .LVU565
 2163 09f4 10D04DE2 		sub	sp, sp, #16	@,,
 2164              		.cfi_def_cfa_offset 72
 2165              	@ armwave.c:438: {
 438:armwave.c     ****     test_create_gamma();
 2166              		.loc 1 438 1 view .LVU566
 2167 09f8 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2168 09fc 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2169 0a00 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2170 0a04 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2171 0a08 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.88,
 2172 0a0c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2173              	.LVL139:
 2174              	.L118:
 2175              	.LBB22:
 2176              	.LBB20:
  40:armwave.c     ****     }
 2177              		.loc 1 40 9 is_stmt 1 view .LVU567
 2178              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2179              		.loc 1 40 32 is_stmt 0 view .LVU568
 2180 0a10 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.88
 2181              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2182              		.loc 1 40 26 view .LVU569
 2183 0a14 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2184              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2185              		.loc 1 40 32 view .LVU570
 2186 0a18 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2187 0a1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2188 0a20 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2189              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2190              		.loc 1 40 26 view .LVU571
 2191 0a24 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2192 0a28 FEFFFFEB 		bl	pow		@
 2193              	.LVL140:
 2194              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2195              		.loc 1 40 49 view .LVU572
 2196 0a2c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2197              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2198              		.loc 1 40 24 view .LVU573
 2199 0a30 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2200 0a34 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2201 0a38 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2202              	.LVL141:
 2203              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2204              		.loc 1 39 5 view .LVU574
 2205 0a3c 0A0054E1 		cmp	r4, r10	@ ivtmp.88, _39
 2206 0a40 F2FFFF1A 		bne	.L118		@,
 2207              	.LVL142:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2208              		.loc 1 39 5 view .LVU575
 2209              	.LBE20:
 2210              	.LBE22:
 440:armwave.c     **** 
 441:armwave.c     ****     // make ch1 yellowish by default
 442:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2211              		.loc 1 442 5 is_stmt 1 view .LVU576
 2212              	.LBB23:
 2213              	.LBI23:
 395:armwave.c     **** {
 2214              		.loc 1 395 6 view .LVU577
 2215              	.LBB24:
 398:armwave.c     ****         case 1:
 2216              		.loc 1 398 5 view .LVU578
 400:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2217              		.loc 1 400 13 view .LVU579
 401:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2218              		.loc 1 401 13 view .LVU580
 2219              	@ armwave.c:400:             g_armwave_state.ch1_color.r = r;
 400:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2220              		.loc 1 400 41 is_stmt 0 view .LVU581
 2221 0a44 5CC09FE5 		ldr	ip, .L121+24	@ tmp142,
 2222 0a48 5C409FE5 		ldr	r4, .L121+28	@ tmp143,
 2223              	.LBE24:
 2224              	.LBE23:
 2225              	@ armwave.c:444:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 443:armwave.c     **** 
 444:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2226              		.loc 1 444 5 view .LVU582
 2227 0a4c 0000A0E3 		mov	r0, #0	@ tmp147,
 2228              	.LBB28:
 2229              	.LBB25:
 2230              	@ armwave.c:402:             g_armwave_state.ch1_color.b = b;
 402:armwave.c     ****             break;
 2231              		.loc 1 402 41 view .LVU583
 2232 0a50 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2233              	.LBE25:
 2234              	.LBE28:
 2235              	@ armwave.c:444:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2236              		.loc 1 444 5 view .LVU584
 2237 0a54 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2238 0a58 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2239 0a5c 00808DE5 		str	r8, [sp]	@ render_width,
 2240 0a60 0610A0E1 		mov	r1, r6	@, tmp3
 2241 0a64 0720A0E1 		mov	r2, r7	@, nwaves
 2242              	.LBB29:
 2243              	.LBB26:
 2244              	@ armwave.c:400:             g_armwave_state.ch1_color.r = r;
 400:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2245              		.loc 1 400 41 view .LVU585
 2246 0a68 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 402:armwave.c     ****             break;
 2247              		.loc 1 402 13 is_stmt 1 view .LVU586
 2248              	.LBE26:
 2249              	.LBE29:
 2250              	@ armwave.c:444:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2251              		.loc 1 444 5 is_stmt 0 view .LVU587
 2252 0a6c 0630A0E1 		mov	r3, r6	@, wave_size
 2253              	.LBB30:
 2254              	.LBB27:
 2255              	@ armwave.c:402:             g_armwave_state.ch1_color.b = b;
 402:armwave.c     ****             break;
 2256              		.loc 1 402 41 view .LVU588
 2257 0a70 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 403:armwave.c     ****     }
 2258              		.loc 1 403 13 is_stmt 1 view .LVU589
 2259              	.LVL143:
 403:armwave.c     ****     }
 2260              		.loc 1 403 13 is_stmt 0 view .LVU590
 2261              	.LBE27:
 2262              	.LBE30:
 2263              		.loc 1 444 5 is_stmt 1 view .LVU591
 2264 0a74 FEFFFFEB 		bl	armwave_setup_render		@
 2265              	.LVL144:
 445:armwave.c     **** 
 446:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2266              		.loc 1 446 5 view .LVU592
 2267 0a78 30109FE5 		ldr	r1, .L121+32	@,
 2268 0a7c 30009FE5 		ldr	r0, .L121+36	@,
 2269              	@ armwave.c:447: }
 447:armwave.c     **** }
 2270              		.loc 1 447 1 is_stmt 0 view .LVU593
 2271 0a80 10D08DE2 		add	sp, sp, #16	@,,
 2272              		.cfi_def_cfa_offset 56
 2273              		@ sp needed	@
 2274 0a84 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2275              		.cfi_restore 84
 2276              		.cfi_restore 85
 2277              		.cfi_restore 82
 2278              		.cfi_restore 83
 2279              		.cfi_restore 80
 2280              		.cfi_restore 81
 2281              		.cfi_def_cfa_offset 32
 2282 0a88 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2283              		.cfi_restore 14
 2284              		.cfi_restore 10
 2285              		.cfi_restore 9
 2286              		.cfi_restore 8
 2287              		.cfi_restore 7
 2288              		.cfi_restore 6
 2289              		.cfi_restore 5
 2290              		.cfi_restore 4
 2291              		.cfi_def_cfa_offset 0
 2292              	.LVL145:
 2293              	@ armwave.c:446:     printf("armwave version: %s\n", ARMWAVE_VER);
 446:armwave.c     **** }
 2294              		.loc 1 446 5 view .LVU594
 2295 0a8c FEFFFFEA 		b	printf		@
 2296              	.LVL146:
 2297              	.L122:
 2298              		.align	3
 2299              	.L121:
 2300 0a90 000000C0 		.word	-1073741824
 2301 0a94 CCCCEC3F 		.word	1072483532
 2302 0a98 00000000 		.word	0
 2303 0a9c 00E06F40 		.word	1081073664
 2304 0aa0 00007F43 		.word	1132396544
 2305 0aa4 FFFFFFFF 		.word	gamma_table-1
 2306 0aa8 00000000 		.word	g_armwave_state
 2307 0aac F609F406 		.word	116656630
 2308 0ab0 00000000 		.word	.LC0
 2309 0ab4 08000000 		.word	.LC1
 2310              		.cfi_endproc
 2311              	.LFE69:
 2313              		.align	2
 2314              		.global	armwave_test_fill_outbuf
 2315              		.syntax unified
 2316              		.arm
 2317              		.fpu vfp
 2319              	armwave_test_fill_outbuf:
 2320              	.LFB70:
 448:armwave.c     **** 
 449:armwave.c     **** /*
 450:armwave.c     ****  * Render image to the local allocated buffer.
 451:armwave.c     ****  */
 452:armwave.c     **** void armwave_test_fill_outbuf()
 453:armwave.c     **** {
 2321              		.loc 1 453 1 is_stmt 1 view -0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 0
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325              		@ link register save eliminated.
 454:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2326              		.loc 1 454 5 view .LVU596
 2327 0ab8 04309FE5 		ldr	r3, .L124	@ tmp111,
 2328 0abc 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2329 0ac0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2330              	.LVL147:
 2331              	.L125:
 2332              		.align	2
 2333              	.L124:
 2334 0ac4 00000000 		.word	g_armwave_state
 2335              		.cfi_endproc
 2336              	.LFE70:
 2338              		.align	2
 2339              		.global	armwave_test_dump_buffer_to_ppm
 2340              		.syntax unified
 2341              		.arm
 2342              		.fpu vfp
 2344              	armwave_test_dump_buffer_to_ppm:
 2345              	.LVL148:
 2346              	.LFB71:
 455:armwave.c     **** }
 456:armwave.c     **** 
 457:armwave.c     **** /*
 458:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 459:armwave.c     ****  */
 460:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 461:armwave.c     **** {
 2347              		.loc 1 461 1 view -0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              		@ link register save eliminated.
 462:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2352              		.loc 1 462 5 view .LVU598
 2353 0ac8 08309FE5 		ldr	r3, .L127	@ tmp112,
 2354 0acc 0010A0E1 		mov	r1, r0	@, fn
 2355 0ad0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2356              	.LVL149:
 2357              		.loc 1 462 5 is_stmt 0 view .LVU599
 2358 0ad4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2359              	.LVL150:
 2360              	.L128:
 2361              		.loc 1 462 5 view .LVU600
 2362              		.align	2
 2363              	.L127:
 2364 0ad8 00000000 		.word	g_armwave_state
 2365              		.cfi_endproc
 2366              	.LFE71:
 2368              		.align	2
 2369              		.global	armwave_test_fill_gdkbuf
 2370              		.syntax unified
 2371              		.arm
 2372              		.fpu vfp
 2374              	armwave_test_fill_gdkbuf:
 2375              	.LVL151:
 2376              	.LFB72:
 463:armwave.c     **** }
 464:armwave.c     **** 
 465:armwave.c     **** /*
 466:armwave.c     ****  * Render GDK buffer with test funtionry.
 467:armwave.c     ****  */
 468:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 469:armwave.c     **** {
 2377              		.loc 1 469 1 is_stmt 1 view -0
 2378              		.cfi_startproc
 2379              		@ args = 0, pretend = 0, frame = 0
 2380              		@ frame_needed = 0, uses_anonymous_args = 0
 2381              		@ link register save eliminated.
 470:armwave.c     ****     //PyObject *mv;
 471:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 472:armwave.c     **** 
 473:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 474:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2382              		.loc 1 474 5 view .LVU602
 475:armwave.c     ****     
 476:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 477:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2383              		.loc 1 477 5 view .LVU603
 2384              	@ armwave.c:474:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 474:armwave.c     ****     
 2385              		.loc 1 474 11 is_stmt 0 view .LVU604
 2386 0adc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2387              	@ armwave.c:477:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2388              		.loc 1 477 5 view .LVU605
 2389 0ae0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2390              	.LVL152:
 2391              		.loc 1 477 5 view .LVU606
 2392 0ae4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2393              	.LVL153:
 2394              		.loc 1 477 5 view .LVU607
 2395              		.cfi_endproc
 2396              	.LFE72:
 2398              		.align	2
 2399              		.global	armwave_test_buffer_alloc
 2400              		.syntax unified
 2401              		.arm
 2402              		.fpu vfp
 2404              	armwave_test_buffer_alloc:
 2405              	.LVL154:
 2406              	.LFB73:
 478:armwave.c     **** }
 479:armwave.c     **** 
 480:armwave.c     **** /*
 481:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 482:armwave.c     ****  */
 483:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 484:armwave.c     **** {
 2407              		.loc 1 484 1 is_stmt 1 view -0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 0
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 485:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2411              		.loc 1 485 5 view .LVU609
 2412              	@ armwave.c:484: {
 484:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2413              		.loc 1 484 1 is_stmt 0 view .LVU610
 2414 0ae8 70402DE9 		push	{r4, r5, r6, lr}	@
 2415              		.cfi_def_cfa_offset 16
 2416              		.cfi_offset 4, -16
 2417              		.cfi_offset 5, -12
 2418              		.cfi_offset 6, -8
 2419              		.cfi_offset 14, -4
 2420              	@ armwave.c:484: {
 484:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2421              		.loc 1 484 1 view .LVU611
 2422 0aec 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2423              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 2424              		.loc 1 485 23 view .LVU612
 2425 0af0 44409FE5 		ldr	r4, .L137	@ tmp128,
 2426 0af4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2427              	.LVL155:
 2428              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 2429              		.loc 1 485 7 view .LVU613
 2430 0af8 000050E3 		cmp	r0, #0	@ _1,
 2431 0afc 0000000A 		beq	.L131		@,
 486:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2432              		.loc 1 486 9 is_stmt 1 view .LVU614
 2433 0b00 FEFFFFEB 		bl	free		@
 2434              	.LVL156:
 2435              	.L131:
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 490:armwave.c     **** 
 491:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2436              		.loc 1 491 5 view .LVU615
 2437              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2438              		.loc 1 491 75 is_stmt 0 view .LVU616
 2439 0b04 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2440 0b08 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2441              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2442              		.loc 1 491 40 view .LVU617
 2443 0b0c 0610A0E1 		mov	r1, r6	@, nsets
 2444              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2445              		.loc 1 491 75 view .LVU618
 2446 0b10 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2447              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2448              		.loc 1 491 40 view .LVU619
 2449 0b14 0500A0E1 		mov	r0, r5	@, _4
 2450 0b18 FEFFFFEB 		bl	calloc		@
 2451              	.LVL157:
 2452              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 492:armwave.c     **** 
 493:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2453              		.loc 1 493 7 view .LVU620
 2454 0b1c 000050E3 		cmp	r0, #0	@ tmp124,
 2455              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2456              		.loc 1 491 38 view .LVU621
 2457 0b20 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2458              		.loc 1 493 5 is_stmt 1 view .LVU622
 2459              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 2460              		.loc 1 493 7 is_stmt 0 view .LVU623
 2461 0b24 7080BD18 		popne	{r4, r5, r6, pc}	@
 494:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2462              		.loc 1 494 9 is_stmt 1 view .LVU624
 2463 0b28 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2464 0b2c 0620A0E1 		mov	r2, r6	@, nsets
 2465 0b30 08009FE5 		ldr	r0, .L137+4	@,
 2466              	@ armwave.c:498: }
 495:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 496:armwave.c     ****         return;
 497:armwave.c     ****     }
 498:armwave.c     **** }
 2467              		.loc 1 498 1 is_stmt 0 view .LVU625
 2468 0b34 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2469              		.cfi_restore 14
 2470              		.cfi_restore 6
 2471              		.cfi_restore 5
 2472              		.cfi_restore 4
 2473              		.cfi_def_cfa_offset 0
 2474              	.LVL158:
 2475              	@ armwave.c:494:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 494:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2476              		.loc 1 494 9 view .LVU626
 2477 0b38 FEFFFFEA 		b	printf		@
 2478              	.LVL159:
 2479              	.L138:
 494:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2480              		.loc 1 494 9 view .LVU627
 2481              		.align	2
 2482              	.L137:
 2483 0b3c 00000000 		.word	g_armwave_state
 2484 0b40 20020000 		.word	.LC20
 2485              		.cfi_endproc
 2486              	.LFE73:
 2488              		.align	2
 2489              		.global	armwave_fill_pixbuf_into_pybuffer
 2490              		.syntax unified
 2491              		.arm
 2492              		.fpu vfp
 2494              	armwave_fill_pixbuf_into_pybuffer:
 2495              	.LVL160:
 2496              	.LFB74:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 502:armwave.c     ****  */
 503:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 504:armwave.c     **** {
 2497              		.loc 1 504 1 is_stmt 1 view -0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 48
 2500              		@ frame_needed = 0, uses_anonymous_args = 0
 505:armwave.c     ****     Py_buffer buffer;
 2501              		.loc 1 505 5 view .LVU629
 506:armwave.c     ****     int ret;
 2502              		.loc 1 506 5 view .LVU630
 507:armwave.c     **** 
 508:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 509:armwave.c     **** 
 510:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2503              		.loc 1 510 5 view .LVU631
 2504              	@ armwave.c:504: {
 504:armwave.c     ****     Py_buffer buffer;
 2505              		.loc 1 504 1 is_stmt 0 view .LVU632
 2506 0b44 04E02DE5 		str	lr, [sp, #-4]!	@,
 2507              		.cfi_def_cfa_offset 4
 2508              		.cfi_offset 14, -4
 2509 0b48 34D04DE2 		sub	sp, sp, #52	@,,
 2510              		.cfi_def_cfa_offset 56
 2511              	@ armwave.c:510:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2512              		.loc 1 510 11 view .LVU633
 2513 0b4c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2514 0b50 0120A0E3 		mov	r2, #1	@,
 2515 0b54 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2516              	.LVL161:
 511:armwave.c     **** 
 512:armwave.c     ****     if(ret != 0) {
 2517              		.loc 1 512 5 is_stmt 1 view .LVU634
 2518              	@ armwave.c:512:     if(ret != 0) {
 2519              		.loc 1 512 7 is_stmt 0 view .LVU635
 2520 0b58 000050E3 		cmp	r0, #0	@,
 2521 0b5c 0A00001A 		bne	.L143		@,
 513:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 514:armwave.c     ****         Py_RETURN_FALSE;
 515:armwave.c     ****     }
 516:armwave.c     **** 
 517:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 518:armwave.c     **** 
 519:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2522              		.loc 1 519 5 is_stmt 1 view .LVU636
 2523 0b60 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2524              	.LVL162:
 2525              		.loc 1 519 5 is_stmt 0 view .LVU637
 2526 0b64 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2527              	.LVL163:
 520:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 521:armwave.c     **** 
 522:armwave.c     ****     PyBuffer_Release(&buffer);
 2528              		.loc 1 522 5 is_stmt 1 view .LVU638
 2529 0b68 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2530 0b6c FEFFFFEB 		bl	PyBuffer_Release		@
 2531              	.LVL164:
 523:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 524:armwave.c     **** 
 525:armwave.c     ****     Py_RETURN_TRUE;
 2532              		.loc 1 525 5 view .LVU639
 2533              	.LBB31:
 2534              	.LBI31:
 2535              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2536              		.loc 2 456 20 view .LVU640
 2537              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2538              		.loc 2 458 21 view .LVU641
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2539              		.loc 2 459 5 view .LVU642
 2540              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2541              		.loc 2 459 18 is_stmt 0 view .LVU643
 2542 0b70 38309FE5 		ldr	r3, .L144	@ tmp126,
 2543              	.LBE32:
 2544              	.LBE31:
 2545              	@ armwave.c:525:     Py_RETURN_TRUE;
 2546              		.loc 1 525 5 view .LVU644
 2547 0b74 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2548              	.LBB34:
 2549              	.LBB33:
 2550              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2551              		.loc 2 459 18 view .LVU645
 2552 0b78 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2553 0b7c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2554 0b80 002083E5 		str	r2, [r3]	@ tmp128,
 2555              	.LBE33:
 2556              	.LBE34:
 2557              	@ armwave.c:526: }
 526:armwave.c     **** }
 2558              		.loc 1 526 1 view .LVU646
 2559 0b84 34D08DE2 		add	sp, sp, #52	@,,
 2560              		.cfi_remember_state
 2561              		.cfi_def_cfa_offset 4
 2562              		@ sp needed	@
 2563 0b88 04F09DE4 		ldr	pc, [sp], #4	@
 2564              	.LVL165:
 2565              	.L143:
 2566              		.cfi_restore_state
 513:armwave.c     ****         Py_RETURN_FALSE;
 2567              		.loc 1 513 9 is_stmt 1 view .LVU647
 2568 0b8c 20009FE5 		ldr	r0, .L144+4	@,
 2569              	.LVL166:
 513:armwave.c     ****         Py_RETURN_FALSE;
 2570              		.loc 1 513 9 is_stmt 0 view .LVU648
 2571 0b90 FEFFFFEB 		bl	puts		@
 2572              	.LVL167:
 514:armwave.c     ****     }
 2573              		.loc 1 514 9 is_stmt 1 view .LVU649
 2574              	.LBB35:
 2575              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2576              		.loc 2 456 20 view .LVU650
 2577              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2578              		.loc 2 458 21 view .LVU651
 2579              		.loc 2 459 5 view .LVU652
 2580              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2581              		.loc 2 459 18 is_stmt 0 view .LVU653
 2582 0b94 1C309FE5 		ldr	r3, .L144+8	@ tmp120,
 2583              	.LBE36:
 2584              	.LBE35:
 2585              	@ armwave.c:514:         Py_RETURN_FALSE;
 514:armwave.c     ****     }
 2586              		.loc 1 514 9 view .LVU654
 2587 0b98 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2588              	.LBB38:
 2589              	.LBB37:
 2590              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2591              		.loc 2 459 18 view .LVU655
 2592 0b9c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2593 0ba0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2594 0ba4 002083E5 		str	r2, [r3]	@ tmp122,
 2595              	.LBE37:
 2596              	.LBE38:
 2597              	@ armwave.c:526: }
 2598              		.loc 1 526 1 view .LVU656
 2599 0ba8 34D08DE2 		add	sp, sp, #52	@,,
 2600              		.cfi_def_cfa_offset 4
 2601              		@ sp needed	@
 2602 0bac 04F09DE4 		ldr	pc, [sp], #4	@
 2603              	.L145:
 2604              		.align	2
 2605              	.L144:
 2606 0bb0 00000000 		.word	_Py_TrueStruct
 2607 0bb4 74020000 		.word	.LC21
 2608 0bb8 00000000 		.word	_Py_FalseStruct
 2609              		.cfi_endproc
 2610              	.LFE74:
 2612              		.align	2
 2613              		.global	armwave_test_create_am_sine
 2614              		.syntax unified
 2615              		.arm
 2616              		.fpu vfp
 2618              	armwave_test_create_am_sine:
 2619              	.LVL168:
 2620              	.LFB75:
 527:armwave.c     **** 
 528:armwave.c     **** /*
 529:armwave.c     ****  * Make a test AM waveform for render tests.
 530:armwave.c     ****  *
 531:armwave.c     ****  * @param   mod                     modulation depth
 532:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 533:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 534:armwave.c     ****  */
 535:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 536:armwave.c     **** {
 2621              		.loc 1 536 1 is_stmt 1 view -0
 2622              		.cfi_startproc
 2623              		@ args = 0, pretend = 0, frame = 8
 2624              		@ frame_needed = 0, uses_anonymous_args = 0
 537:armwave.c     ****     float v, noise, xnoise, mod_val;
 2625              		.loc 1 537 5 view .LVU658
 538:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2626              		.loc 1 538 5 view .LVU659
 2627              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2628              		.loc 1 536 1 is_stmt 0 view .LVU660
 2629 0bbc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2630              		.cfi_def_cfa_offset 32
 2631              		.cfi_offset 4, -32
 2632              		.cfi_offset 5, -28
 2633              		.cfi_offset 6, -24
 2634              		.cfi_offset 7, -20
 2635              		.cfi_offset 8, -16
 2636              		.cfi_offset 9, -12
 2637              		.cfi_offset 10, -8
 2638              		.cfi_offset 14, -4
 2639              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2640              		.loc 1 538 38 view .LVU661
 2641 0bc0 7A7A9FED 		vldr.32	s14, .L177	@ tmp180,
 2642              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2643              		.loc 1 538 55 view .LVU662
 2644 0bc4 00529FE5 		ldr	r5, .L177+28	@ tmp250,
 2645              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2646              		.loc 1 536 1 view .LVU663
 2647 0bc8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2648              		.cfi_def_cfa_offset 80
 2649              		.cfi_offset 80, -80
 2650              		.cfi_offset 81, -76
 2651              		.cfi_offset 82, -72
 2652              		.cfi_offset 83, -68
 2653              		.cfi_offset 84, -64
 2654              		.cfi_offset 85, -60
 2655              		.cfi_offset 86, -56
 2656              		.cfi_offset 87, -52
 2657              		.cfi_offset 88, -48
 2658              		.cfi_offset 89, -44
 2659              		.cfi_offset 90, -40
 2660              		.cfi_offset 91, -36
 2661 0bcc 0090A0E1 		mov	r9, r0	@ sets, sets
 2662              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2663              		.loc 1 538 38 view .LVU664
 2664 0bd0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2665              	@ armwave.c:542:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 539:armwave.c     ****     int s, set_offset = 0;
 540:armwave.c     ****     int w, x;
 541:armwave.c     **** 
 542:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2666              		.loc 1 542 70 view .LVU665
 2667 0bd4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2668 0bd8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2669              	.LBB41:
 2670              	.LBB42:
 2671              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2672              		.loc 1 485 23 view .LVU666
 2673 0bdc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2674              	.LVL169:
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2675              		.loc 1 485 23 view .LVU667
 2676              	.LBE42:
 2677              	.LBE41:
 2678              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 538:armwave.c     ****     int s, set_offset = 0;
 2679              		.loc 1 538 38 view .LVU668
 2680 0be0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2681              	@ armwave.c:542:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2682              		.loc 1 542 70 view .LVU669
 2683 0be4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2684              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2685              		.loc 1 536 1 view .LVU670
 2686 0be8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2687              	.LBB46:
 2688              	.LBB43:
 2689              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2690              		.loc 1 485 7 view .LVU671
 2691 0bec 000050E3 		cmp	r0, #0	@ _82,
 2692              	.LBE43:
 2693              	.LBE46:
 2694              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2695              		.loc 1 536 1 view .LVU672
 2696 0bf0 08D04DE2 		sub	sp, sp, #8	@,,
 2697              		.cfi_def_cfa_offset 88
 2698              	@ armwave.c:543:     g_armwave_state.test_wave_buffer_nsets = sets;
 543:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2699              		.loc 1 543 44 view .LVU673
 2700 0bf4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2701              	@ armwave.c:542:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 542:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2702              		.loc 1 542 45 view .LVU674
 2703 0bf8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2704              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 538:armwave.c     ****     int s, set_offset = 0;
 2705              		.loc 1 538 38 view .LVU675
 2706 0bfc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2707              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 538:armwave.c     ****     int s, set_offset = 0;
 2708              		.loc 1 538 11 view .LVU676
 2709 0c00 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2710              	.LVL170:
 539:armwave.c     ****     int w, x;
 2711              		.loc 1 539 5 is_stmt 1 view .LVU677
 540:armwave.c     **** 
 2712              		.loc 1 540 5 view .LVU678
 542:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2713              		.loc 1 542 5 view .LVU679
 2714              		.loc 1 543 5 view .LVU680
 544:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2715              		.loc 1 544 5 view .LVU681
 2716              	.LBB47:
 2717              	.LBI41:
 483:armwave.c     **** {
 2718              		.loc 1 483 6 view .LVU682
 2719              	.LBB44:
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2720              		.loc 1 485 5 view .LVU683
 2721              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2722              		.loc 1 485 7 is_stmt 0 view .LVU684
 2723 0c04 0000000A 		beq	.L147		@,
 486:armwave.c     ****     }
 2724              		.loc 1 486 9 is_stmt 1 view .LVU685
 2725 0c08 FEFFFFEB 		bl	free		@
 2726              	.LVL171:
 2727              	.L147:
 491:armwave.c     **** 
 2728              		.loc 1 491 5 view .LVU686
 2729              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2730              		.loc 1 491 75 is_stmt 0 view .LVU687
 2731 0c0c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2732 0c10 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2733              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2734              		.loc 1 491 40 view .LVU688
 2735 0c14 0910A0E1 		mov	r1, r9	@, sets
 2736              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2737              		.loc 1 491 75 view .LVU689
 2738 0c18 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2739              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2740              		.loc 1 491 40 view .LVU690
 2741 0c1c 0400A0E1 		mov	r0, r4	@, _85
 2742 0c20 FEFFFFEB 		bl	calloc		@
 2743              	.LVL172:
 2744              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2745              		.loc 1 493 7 view .LVU691
 2746 0c24 000050E3 		cmp	r0, #0	@ tmp191,
 2747              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2748              		.loc 1 491 38 view .LVU692
 2749 0c28 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2750              		.loc 1 493 5 is_stmt 1 view .LVU693
 2751              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2752              		.loc 1 493 7 is_stmt 0 view .LVU694
 2753 0c2c 5A00000A 		beq	.L176		@,
 2754              	.L148:
 2755              	.LVL173:
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2756              		.loc 1 493 7 view .LVU695
 2757              	.LBE44:
 2758              	.LBE47:
 2759              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 545:armwave.c     **** 
 546:armwave.c     ****     for(s = 0; s < sets; s++) {
 2760              		.loc 1 546 5 discriminator 1 view .LVU696
 2761 0c30 000059E3 		cmp	r9, #0	@ sets,
 2762 0c34 550000DA 		ble	.L146		@,
 2763              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 547:armwave.c     ****         printf("Calculating test set %d\n", s);
 548:armwave.c     ****     
 549:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 550:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 551:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 552:armwave.c     **** 
 553:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 554:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 555:armwave.c     ****                 noise *= noise;
 556:armwave.c     ****                 noise *= noise;
 557:armwave.c     ****                 noise *= noise;
 558:armwave.c     **** 
 559:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 560:armwave.c     ****                     noise = -noise;
 561:armwave.c     **** 
 562:armwave.c     ****                 noise += 1.0f;
 563:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 564:armwave.c     **** 
 565:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2764              		.loc 1 565 45 view .LVU697
 2765 0c38 5C8A9FED 		vldr.32	s16, .L177	@ tmp258,
 2766              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 566:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 567:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 568:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2767              		.loc 1 568 104 view .LVU698
 2768 0c3c 5CCA9FED 		vldr.32	s24, .L177+4	@ tmp259,
 2769              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2770              		.loc 1 546 5 view .LVU699
 2771 0c40 0070A0E3 		mov	r7, #0	@ set_offset,
 2772              	@ armwave.c:547:         printf("Calculating test set %d\n", s);
 547:armwave.c     ****         printf("Calculating test set %d\n", s);
 2773              		.loc 1 547 9 view .LVU700
 2774 0c44 84A19FE5 		ldr	r10, .L177+32	@ tmp257,
 2775              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2776              		.loc 1 546 5 view .LVU701
 2777 0c48 0780A0E1 		mov	r8, r7	@ s, set_offset
 2778              	.LVL174:
 2779              	.L149:
 547:armwave.c     ****         printf("Calculating test set %d\n", s);
 2780              		.loc 1 547 9 is_stmt 1 view .LVU702
 2781 0c4c 0810A0E1 		mov	r1, r8	@, s
 2782 0c50 0A00A0E1 		mov	r0, r10	@, tmp257
 2783 0c54 FEFFFFEB 		bl	printf		@
 2784              	.LVL175:
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2785              		.loc 1 549 9 view .LVU703
 2786              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2787              		.loc 1 549 39 is_stmt 0 view .LVU704
 2788 0c58 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2789              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2790              		.loc 1 549 9 view .LVU705
 2791 0c5c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2792 0c60 450000DA 		ble	.L150		@,
 2793              	@ armwave.c:551:             mod_val = 0.5f + (_1_waves_mod * w);
 551:armwave.c     **** 
 2794              		.loc 1 551 21 view .LVU706
 2795 0c64 53CADFED 		vldr.32	s25, .L177+8	@ tmp200,
 2796              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2797              		.loc 1 565 33 view .LVU707
 2798 0c68 53BA9FED 		vldr.32	s22, .L177+12	@ tmp253,
 2799              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2800              		.loc 1 563 24 view .LVU708
 2801 0c6c 53AADFED 		vldr.32	s21, .L177+16	@ tmp254,
 2802 0c70 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2803              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2804              		.loc 1 549 15 view .LVU709
 2805 0c74 0060A0E3 		mov	r6, #0	@ w,
 2806              	.LVL176:
 2807              	.L157:
 551:armwave.c     **** 
 2808              		.loc 1 551 13 is_stmt 1 view .LVU710
 2809              	@ armwave.c:551:             mod_val = 0.5f + (_1_waves_mod * w);
 551:armwave.c     **** 
 2810              		.loc 1 551 21 is_stmt 0 view .LVU711
 2811 0c78 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2812 0c7c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2813              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2814              		.loc 1 553 13 view .LVU712
 2815 0c80 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2816              	@ armwave.c:551:             mod_val = 0.5f + (_1_waves_mod * w);
 551:armwave.c     **** 
 2817              		.loc 1 551 21 view .LVU713
 2818 0c84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2819 0c88 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2820              	.LVL177:
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2821              		.loc 1 553 13 is_stmt 1 view .LVU714
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2822              		.loc 1 553 13 is_stmt 0 view .LVU715
 2823 0c8c 370000DA 		ble	.L151		@,
 2824 0c90 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2825              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2826              		.loc 1 568 113 view .LVU716
 2827 0c94 4AAA9FED 		vldr.32	s20, .L177+20	@ tmp229,
 2828 0c98 4A8ADFED 		vldr.32	s17, .L177+24	@ tmp230,
 2829              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2830              		.loc 1 553 19 view .LVU717
 2831 0c9c 0040A0E3 		mov	r4, #0	@ x,
 2832              	.LVL178:
 2833              	.L156:
 554:armwave.c     ****                 noise *= noise;
 2834              		.loc 1 554 17 is_stmt 1 view .LVU718
 2835              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2836              		.loc 1 554 28 is_stmt 0 view .LVU719
 2837 0ca0 FEFFFFEB 		bl	rand		@
 2838              	.LVL179:
 2839              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2840              		.loc 1 554 35 view .LVU720
 2841 0ca4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2842              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2843              		.loc 1 554 45 view .LVU721
 2844 0ca8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2845 0cac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2846              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2847              		.loc 1 554 24 view .LVU722
 2848 0cb0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2849              	.LVL180:
 555:armwave.c     ****                 noise *= noise;
 2850              		.loc 1 555 17 is_stmt 1 view .LVU723
 2851              	@ armwave.c:555:                 noise *= noise;
 555:armwave.c     ****                 noise *= noise;
 2852              		.loc 1 555 23 is_stmt 0 view .LVU724
 2853 0cb4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2854              	.LVL181:
 556:armwave.c     ****                 noise *= noise;
 2855              		.loc 1 556 17 is_stmt 1 view .LVU725
 2856              	@ armwave.c:556:                 noise *= noise;
 556:armwave.c     ****                 noise *= noise;
 2857              		.loc 1 556 23 is_stmt 0 view .LVU726
 2858 0cb8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2859              	.LVL182:
 557:armwave.c     **** 
 2860              		.loc 1 557 17 is_stmt 1 view .LVU727
 2861              	@ armwave.c:557:                 noise *= noise;
 557:armwave.c     **** 
 2862              		.loc 1 557 23 is_stmt 0 view .LVU728
 2863 0cbc A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2864              	.LVL183:
 559:armwave.c     ****                     noise = -noise;
 2865              		.loc 1 559 17 is_stmt 1 view .LVU729
 2866              	@ armwave.c:559:                 if((rand() & 0xffff) > 0x7fff)
 559:armwave.c     ****                     noise = -noise;
 2867              		.loc 1 559 21 is_stmt 0 view .LVU730
 2868 0cc0 FEFFFFEB 		bl	rand		@
 2869              	.LVL184:
 560:armwave.c     **** 
 2870              		.loc 1 560 21 is_stmt 1 view .LVU731
 2871              	@ armwave.c:559:                 if((rand() & 0xffff) > 0x7fff)
 559:armwave.c     ****                     noise = -noise;
 2872              		.loc 1 559 19 is_stmt 0 view .LVU732
 2873 0cc4 020910E3 		tst	r0, #32768	@,
 2874              	@ armwave.c:560:                     noise = -noise;
 560:armwave.c     **** 
 2875              		.loc 1 560 27 view .LVU733
 2876 0cc8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2877              	.LVL185:
 562:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2878              		.loc 1 562 17 is_stmt 1 view .LVU734
 563:armwave.c     **** 
 2879              		.loc 1 563 17 view .LVU735
 2880              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2881              		.loc 1 563 27 is_stmt 0 view .LVU736
 2882 0ccc FEFFFFEB 		bl	rand		@
 2883              	.LVL186:
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2884              		.loc 1 565 17 is_stmt 1 view .LVU737
 2885              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2886              		.loc 1 565 45 is_stmt 0 view .LVU738
 2887 0cd0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2888              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2889              		.loc 1 565 33 view .LVU739
 2890 0cd4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2891              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2892              		.loc 1 565 45 view .LVU740
 2893 0cd8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2894              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2895              		.loc 1 565 33 view .LVU741
 2896 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2897              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2898              		.loc 1 565 45 view .LVU742
 2899 0ce0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2900              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2901              		.loc 1 565 33 view .LVU743
 2902 0ce4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2903              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2904              		.loc 1 563 34 view .LVU744
 2905 0ce8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2906              	.LVL187:
 2907              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2908              		.loc 1 563 44 view .LVU745
 2909 0cec 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2910 0cf0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2911              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2912              		.loc 1 563 24 view .LVU746
 2913 0cf4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2914              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2915              		.loc 1 565 77 view .LVU747
 2916 0cf8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2917              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2918              		.loc 1 565 22 view .LVU748
 2919 0cfc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2920 0d00 FEFFFFEB 		bl	sin		@
 2921              	.LVL188:
 2922              		.loc 1 568 17 is_stmt 1 view .LVU749
 2923              	@ armwave.c:562:                 noise += 1.0f;
 562:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2924              		.loc 1 562 23 is_stmt 0 view .LVU750
 2925 0d04 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2926              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2927              		.loc 1 568 104 view .LVU751
 2928 0d08 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2929              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2930              		.loc 1 565 98 view .LVU752
 2931 0d0c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2932              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2933              		.loc 1 565 87 view .LVU753
 2934 0d10 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2935              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2936              		.loc 1 565 98 view .LVU754
 2937 0d14 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2938              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2939              		.loc 1 565 19 view .LVU755
 2940 0d18 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2941              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2942              		.loc 1 568 113 view .LVU756
 2943 0d1c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2944 0d20 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2945 0d24 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2946 0d28 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2947 0d2c 050000DA 		ble	.L153		@,
 2948              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2949              		.loc 1 568 104 discriminator 1 view .LVU757
 2950 0d30 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2951 0d34 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2952 0d38 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2953 0d3c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2954 0d40 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2955 0d44 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2956              	.L153:
 2957              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2958              		.loc 1 568 57 discriminator 12 view .LVU758
 2959 0d48 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2960              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2961              		.loc 1 568 102 discriminator 12 view .LVU759
 2962 0d4c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2963 0d50 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2964 0d54 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2965              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2966              		.loc 1 553 58 discriminator 12 view .LVU760
 2967 0d58 014084E2 		add	r4, r4, #1	@ x, x,
 2968              	.LVL189:
 2969              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2970              		.loc 1 568 102 discriminator 12 view .LVU761
 2971 0d5c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2972              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2973              		.loc 1 553 43 discriminator 12 view .LVU762
 2974 0d60 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2975              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2976              		.loc 1 553 13 discriminator 12 view .LVU763
 2977 0d64 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2978 0d68 CCFFFFCA 		bgt	.L156		@,
 2979 0d6c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2980              	.LVL190:
 2981              	.L151:
 2982              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2983              		.loc 1 549 48 discriminator 2 view .LVU764
 2984 0d70 016086E2 		add	r6, r6, #1	@ w, w,
 2985              	.LVL191:
 2986              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2987              		.loc 1 549 9 discriminator 2 view .LVU765
 2988 0d74 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2989 0d78 BEFFFFBA 		blt	.L157		@,
 2990              	.LVL192:
 2991              	.L150:
 569:armwave.c     ****             }
 570:armwave.c     ****         }
 571:armwave.c     **** 
 572:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2992              		.loc 1 572 9 is_stmt 1 discriminator 2 view .LVU766
 2993              	@ armwave.c:572:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2994              		.loc 1 572 46 is_stmt 0 discriminator 2 view .LVU767
 2995 0d7c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2996              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2997              		.loc 1 546 27 discriminator 2 view .LVU768
 2998 0d80 018088E2 		add	r8, r8, #1	@ s, s,
 2999              	.LVL193:
 3000              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 3001              		.loc 1 546 5 discriminator 2 view .LVU769
 3002 0d84 080059E1 		cmp	r9, r8	@ sets, s
 3003              	@ armwave.c:572:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3004              		.loc 1 572 20 discriminator 2 view .LVU770
 3005 0d88 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3006              	.LVL194:
 3007              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 3008              		.loc 1 546 5 discriminator 2 view .LVU771
 3009 0d8c AEFFFF1A 		bne	.L149		@,
 3010              	.LVL195:
 3011              	.L146:
 3012              	@ armwave.c:574: }
 573:armwave.c     ****     }
 574:armwave.c     **** }
 3013              		.loc 1 574 1 view .LVU772
 3014 0d90 08D08DE2 		add	sp, sp, #8	@,,
 3015              		.cfi_remember_state
 3016              		.cfi_def_cfa_offset 80
 3017              		@ sp needed	@
 3018 0d94 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3019              		.cfi_restore 90
 3020              		.cfi_restore 91
 3021              		.cfi_restore 88
 3022              		.cfi_restore 89
 3023              		.cfi_restore 86
 3024              		.cfi_restore 87
 3025              		.cfi_restore 84
 3026              		.cfi_restore 85
 3027              		.cfi_restore 82
 3028              		.cfi_restore 83
 3029              		.cfi_restore 80
 3030              		.cfi_restore 81
 3031              		.cfi_def_cfa_offset 32
 3032              	.LVL196:
 3033              		.loc 1 574 1 view .LVU773
 3034 0d98 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3035              	.LVL197:
 3036              	.L176:
 3037              		.cfi_restore_state
 3038              	.LBB48:
 3039              	.LBB45:
 494:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3040              		.loc 1 494 9 is_stmt 1 view .LVU774
 3041 0d9c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3042 0da0 0920A0E1 		mov	r2, r9	@, sets
 3043 0da4 28009FE5 		ldr	r0, .L177+36	@,
 3044 0da8 FEFFFFEB 		bl	printf		@
 3045              	.LVL198:
 496:armwave.c     ****     }
 3046              		.loc 1 496 9 view .LVU775
 3047 0dac 9FFFFFEA 		b	.L148		@
 3048              	.L178:
 3049              		.align	2
 3050              	.L177:
 3051 0db0 0000803F 		.word	1065353216
 3052 0db4 00007F43 		.word	1132396544
 3053 0db8 0000003F 		.word	1056964608
 3054 0dbc C3F5C840 		.word	1086911939
 3055 0dc0 38FFC74A 		.word	1254620984
 3056 0dc4 0000FE42 		.word	1123942400
 3057 0dc8 00000043 		.word	1124073472
 3058 0dcc 00000000 		.word	g_armwave_state
 3059 0dd0 C8020000 		.word	.LC22
 3060 0dd4 20020000 		.word	.LC20
 3061              	.LBE45:
 3062              	.LBE48:
 3063              		.cfi_endproc
 3064              	.LFE75:
 3066              		.align	2
 3067              		.global	armwave_cleanup
 3068              		.syntax unified
 3069              		.arm
 3070              		.fpu vfp
 3072              	armwave_cleanup:
 3073              	.LFB76:
 575:armwave.c     **** 
 576:armwave.c     **** /*
 577:armwave.c     ****  * Make a test square waveform.
 578:armwave.c     ****  *
 579:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 580:armwave.c     ****  */
 581:armwave.c     **** #if 0
 582:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 583:armwave.c     **** {
 584:armwave.c     ****     uint8_t v;
 585:armwave.c     ****     float noise, xnoise;
 586:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 587:armwave.c     ****     int w, x;
 588:armwave.c     **** 
 589:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 590:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 591:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 592:armwave.c     ****             noise *= noise;
 593:armwave.c     ****             noise *= noise;
 594:armwave.c     ****             noise *= noise;
 595:armwave.c     **** 
 596:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 597:armwave.c     ****                 noise = -noise;
 598:armwave.c     **** 
 599:armwave.c     ****             //noise += 1.0f;
 600:armwave.c     **** 
 601:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 602:armwave.c     ****                 new_level = 0.2f;
 603:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 604:armwave.c     ****                 new_level = 0.8f;
 605:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 606:armwave.c     ****                 new_level = 0.2f;
 607:armwave.c     ****             } else {
 608:armwave.c     ****                 new_level = 0.8f;
 609:armwave.c     ****             }
 610:armwave.c     **** 
 611:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 612:armwave.c     **** 
 613:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 614:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 615:armwave.c     ****         }
 616:armwave.c     ****     }
 617:armwave.c     **** }
 618:armwave.c     **** #endif
 619:armwave.c     **** 
 620:armwave.c     **** /*
 621:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 622:armwave.c     ****  */
 623:armwave.c     **** void armwave_cleanup()
 624:armwave.c     **** {
 3074              		.loc 1 624 1 view -0
 3075              		.cfi_startproc
 3076              		@ args = 0, pretend = 0, frame = 0
 3077              		@ frame_needed = 0, uses_anonymous_args = 0
 625:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3078              		.loc 1 625 5 view .LVU777
 3079              	@ armwave.c:624: {
 624:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3080              		.loc 1 624 1 is_stmt 0 view .LVU778
 3081 0dd8 10402DE9 		push	{r4, lr}	@
 3082              		.cfi_def_cfa_offset 8
 3083              		.cfi_offset 4, -8
 3084              		.cfi_offset 14, -4
 3085              	@ armwave.c:625:     free(g_armwave_state.out_pixbuf);
 3086              		.loc 1 625 25 view .LVU779
 3087 0ddc 34409FE5 		ldr	r4, .L181	@ tmp114,
 3088              	@ armwave.c:625:     free(g_armwave_state.out_pixbuf);
 3089              		.loc 1 625 5 view .LVU780
 3090 0de0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3091 0de4 FEFFFFEB 		bl	free		@
 3092              	.LVL199:
 626:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3093              		.loc 1 626 5 is_stmt 1 view .LVU781
 3094 0de8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3095 0dec FEFFFFEB 		bl	free		@
 3096              	.LVL200:
 627:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3097              		.loc 1 627 5 view .LVU782
 3098 0df0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3099 0df4 FEFFFFEB 		bl	free		@
 3100              	.LVL201:
 628:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3101              		.loc 1 628 5 view .LVU783
 3102 0df8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3103 0dfc FEFFFFEB 		bl	free		@
 3104              	.LVL202:
 629:armwave.c     **** 
 630:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3105              		.loc 1 630 5 view .LVU784
 3106              	@ armwave.c:630:     g_armwave_state.out_pixbuf = NULL;
 3107              		.loc 1 630 32 is_stmt 0 view .LVU785
 3108 0e00 0030A0E3 		mov	r3, #0	@ tmp123,
 3109 0e04 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 631:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3110              		.loc 1 631 5 is_stmt 1 view .LVU786
 3111              	@ armwave.c:631:     g_armwave_state.ch1_buffer = NULL;
 3112              		.loc 1 631 32 is_stmt 0 view .LVU787
 3113 0e08 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 632:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3114              		.loc 1 632 5 is_stmt 1 view .LVU788
 3115              	@ armwave.c:632:     g_armwave_state.xcoord_to_xpixel = NULL;
 3116              		.loc 1 632 38 is_stmt 0 view .LVU789
 3117 0e0c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 633:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3118              		.loc 1 633 5 is_stmt 1 view .LVU790
 3119              	@ armwave.c:633:     g_armwave_state.test_wave_buffer = NULL;
 3120              		.loc 1 633 38 is_stmt 0 view .LVU791
 3121 0e10 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3122              	@ armwave.c:634: }
 634:armwave.c     **** }
 3123              		.loc 1 634 1 view .LVU792
 3124 0e14 1080BDE8 		pop	{r4, pc}	@
 3125              	.L182:
 3126              		.align	2
 3127              	.L181:
 3128 0e18 00000000 		.word	g_armwave_state
 3129              		.cfi_endproc
 3130              	.LFE76:
 3132              		.comm	gamma_table,256,4
 3133              		.comm	g_armwave_state,136,4
 3134              		.section	.rodata
 3135              		.align	2
 3136              		.set	.LANCHOR0,. + 0
 3139              	__PRETTY_FUNCTION__.17095:
 3140 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3140      6176655F 
 3140      66696C6C 
 3140      5F706978 
 3140      6275665F 
 3141 001b 00       		.space	1
 3144              	__PRETTY_FUNCTION__.17125:
 3145 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3145      6176655F 
 3145      73657475 
 3145      705F7265 
 3145      6E646572 
 3146 0031 000000   		.space	3
 3149              	__PRETTY_FUNCTION__.17132:
 3150 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3150      6176655F 
 3150      7365745F 
 3150      77617665 
 3150      5F706F69 
 3151 004d 000000   		.space	3
 3154              	__PRETTY_FUNCTION__.17139:
 3155 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3155      6176655F 
 3155      7365745F 
 3155      77617665 
 3155      5F706F69 
 3156              		.section	.rodata.str1.4,"aMS",%progbits,1
 3157              		.align	2
 3158              	.LC0:
 3159 0000 76302E30 		.ascii	"v0.0.1\000"
 3159      2E3100
 3160 0007 00       		.space	1
 3161              	.LC1:
 3162 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3162      61766520 
 3162      76657273 
 3162      696F6E3A 
 3162      2025730A 
 3163 001d 000000   		.space	3
 3164              	.LC2:
 3165 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3165      78253038 
 3165      7820623D 
 3165      30782530 
 3165      38782063 
 3166 0053 6768743D 		.ascii	"ght=%d\012\000"
 3166      25640A00 
 3167 005b 00       		.space	1
 3168              	.LC3:
 3169 005c 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x\012\000"
 3169      20737472 
 3169      6964653D 
 3169      25642073 
 3169      6C793D25 
 3170              	.LC4:
 3171 0084 61726D77 		.ascii	"armwave.c\000"
 3171      6176652E 
 3171      6300
 3172 008e 0000     		.space	2
 3173              	.LC5:
 3174 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 3174      62756666 
 3174      65722021 
 3174      3D204E55 
 3174      4C4C00
 3175 00a3 00       		.space	1
 3176              	.LC6:
 3177 00a4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3177      20653D25 
 3177      6420773D 
 3177      25642077 
 3177      733D2564 
 3178              	.LC7:
 3179 00d0 73746172 		.ascii	"start_point < end_point\000"
 3179      745F706F 
 3179      696E7420 
 3179      3C20656E 
 3179      645F706F 
 3180              	.LC8:
 3181 00e8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3181      7566665F 
 3181      73697A65 
 3181      3D25642C 
 3181      20636D70 
 3182 011a 00       		.ascii	"\000"
 3183 011b 00       		.space	1
 3184              	.LC9:
 3185 011c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3185      6D776176 
 3185      655F7374 
 3185      6174652E 
 3185      6368315F 
 3186 013f 00       		.space	1
 3187              	.LC10:
 3188 0140 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3188      6D776176 
 3188      655F7374 
 3188      6174652E 
 3188      78636F6F 
 3189 0169 000000   		.space	3
 3190              	.LC11:
 3191 016c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3191      3A203078 
 3191      25303878 
 3191      20307825 
 3191      30387820 
 3192              	.LC12:
 3193 0190 77617665 		.ascii	"wave_buffer != NULL\000"
 3193      5F627566 
 3193      66657220 
 3193      213D204E 
 3193      554C4C00 
 3194              	.LC13:
 3195 01a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3195      6176655F 
 3195      7365745F 
 3195      77617665 
 3195      5F706F69 
 3196 01d7 78636565 		.ascii	"xceeded\000"
 3196      64656400 
 3197 01df 00       		.space	1
 3198              	.LC14:
 3199 01e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3199      5F627566 
 3199      6665725F 
 3199      70747220 
 3199      213D2030 
 3200 01f5 000000   		.space	3
 3201              	.LC15:
 3202 01f8 776200   		.ascii	"wb\000"
 3203 01fb 00       		.space	1
 3204              	.LC16:
 3205 01fc 50330A00 		.ascii	"P3\012\000"
 3206              	.LC17:
 3207 0200 25642025 		.ascii	"%d %d\012\000"
 3207      640A00
 3208 0207 00       		.space	1
 3209              	.LC18:
 3210 0208 3235350A 		.ascii	"255\012\000"
 3210      00
 3211 020d 000000   		.space	3
 3212              	.LC19:
 3213 0210 25336420 		.ascii	"%3d %3d %3d\012\000"
 3213      25336420 
 3213      2533640A 
 3213      00
 3214 021d 000000   		.space	3
 3215              	.LC20:
 3216 0220 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3216      6176655F 
 3216      74657374 
 3216      5F627566 
 3216      6665725F 
 3217 0253 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3217      20627566 
 3217      66657220 
 3217      28256420 
 3217      62797465 
 3218              	.LC21:
 3219 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3219      6176655F 
 3219      66696C6C 
 3219      5F706978 
 3219      6275665F 
 3220 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3220      20666169 
 3220      6C65642C 
 3220      20726574 
 3220      75726E69 
 3221 02c6 0000     		.space	2
 3222              	.LC22:
 3223 02c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3223      756C6174 
 3223      696E6720 
 3223      74657374 
 3223      20736574 
 3224              		.text
 3225              	.Letext0:
 3226              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3227              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3228              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3229              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3230              		.file 7 "/usr/include/stdio.h"
 3231              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3232              		.file 9 "/usr/include/errno.h"
 3233              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3234              		.file 11 "/usr/include/unistd.h"
 3235              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3236              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3237              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3238              		.file 15 "/usr/include/math.h"
 3239              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3240              		.file 17 "/usr/include/time.h"
 3241              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3242              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3243              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3244              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3245              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3246              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3247              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3248              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3249              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3250              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3251              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3252              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3253              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3254              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3255              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3256              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3257              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3258              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3259              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3260              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3261              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3262              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3263              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3264              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3265              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3266              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3267              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3268              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3269              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3270              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3271              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3272              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3273              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3274              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3275              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3276              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3277              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3278              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3279              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3280              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3281              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3282              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3283              		.file 60 "/usr/local/include/python3.8/context.h"
 3284              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3285              		.file 62 "/usr/local/include/python3.8/code.h"
 3286              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3287              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3288              		.file 65 "/usr/local/include/python3.8/import.h"
 3289              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3290              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3291              		.file 68 "/usr/include/malloc.h"
 3292              		.file 69 "armwave.h"
 3293              		.file 70 "/usr/include/stdlib.h"
 3294              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3295              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3296              		.file 73 "<built-in>"
 3297              		.file 74 "/usr/include/assert.h"
 3298              		.file 75 "/usr/include/string.h"
