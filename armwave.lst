   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB72:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** struct armwave_state_t g_armwave_state;
  35:armwave.c     **** 
  36:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  37:armwave.c     **** uint8_t gamma_table[256];
  38:armwave.c     **** 
  39:armwave.c     **** // for now...
  40:armwave.c     **** const int overall_scale = 20;
  41:armwave.c     **** 
  42:armwave.c     **** float mod_depth = 0.0f;
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Make a test AM waveform for render tests.
  46:armwave.c     ****  */
  47:armwave.c     **** void test_create_waveform()
  48:armwave.c     **** {
  49:armwave.c     ****     float v, mod, noise, xnoise;
  50:armwave.c     ****     int w, x;
  51:armwave.c     **** 
  52:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  53:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  54:armwave.c     ****         //mod = 1.0f;
  55:armwave.c     **** 
  56:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  57:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  58:armwave.c     ****             noise *= noise;
  59:armwave.c     ****             noise *= noise;
  60:armwave.c     ****             noise *= noise;
  61:armwave.c     **** 
  62:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  63:armwave.c     ****                 noise = -noise;
  64:armwave.c     **** 
  65:armwave.c     ****             noise += 1.0f;
  66:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  67:armwave.c     **** 
  68:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  69:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  70:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  71:armwave.c     ****         }
  72:armwave.c     ****     }
  73:armwave.c     **** }
  74:armwave.c     **** 
  75:armwave.c     **** /*
  76:armwave.c     ****  * Create a gamma table.
  77:armwave.c     ****  */
  78:armwave.c     **** void test_create_gamma()
  79:armwave.c     **** {
  80:armwave.c     ****     int i;
  81:armwave.c     ****     float gamma = 0.90f;
  82:armwave.c     **** 
  83:armwave.c     ****     for(i = 0; i < 256; i++) {
  84:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  85:armwave.c     ****     }
  86:armwave.c     **** }
  87:armwave.c     **** 
  88:armwave.c     **** /*
  89:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  90:armwave.c     ****  * pre-computed.
  91:armwave.c     ****  *
  92:armwave.c     ****  * @param    slice_y        Slice to render at
  93:armwave.c     ****  * @param    height         Number of wave points to render
  94:armwave.c     ****  */
  95:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  96:armwave.c     **** {
  97:armwave.c     ****     int yy, ys, w, scale_value;
  98:armwave.c     ****     uint32_t value, word;
  99:armwave.c     ****     uint8_t *wave_base;
 100:armwave.c     ****     uint8_t *write_buffer_base;
 101:armwave.c     ****     uint8_t *write_buffer;
 102:armwave.c     ****     
 103:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 104:armwave.c     **** 
 105:armwave.c     ****     // roll through each waveform
 106:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 107:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 111:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 112:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 113:armwave.c     **** #endif
 114:armwave.c     **** 
 115:armwave.c     ****         // roll through y and render the slice into the out buffer
 116:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 117:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 118:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 119:armwave.c     **** 
 120:armwave.c     **** #if 0
 121:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 122:armwave.c     **** 
 123:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 124:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 125:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 126:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 127:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 128:armwave.c     ****                    wave_base + yy);
 129:armwave.c     **** #endif
 130:armwave.c     **** 
 131:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 132:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 133:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 134:armwave.c     ****             //*(write_buffer + value) = 0xff;
 135:armwave.c     **** 
 136:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 137:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 138:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 139:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 140:armwave.c     ****             	word >>= 8;
 141:armwave.c     ****     		}
 142:armwave.c     **** 
 143:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 144:armwave.c     ****         }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 147:armwave.c     **** 
 148:armwave.c     **** void armwave_init()
 149:armwave.c     **** {
 150:armwave.c     ****     g_armwave_state.flags = 0;
 151:armwave.c     **** }
 152:armwave.c     **** 
 153:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 153 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 154:armwave.c     **** {
 155:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 155 5 view .LVU1
 156:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 156 5 view .LVU2
 157:armwave.c     **** 
 158:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 158 5 view .LVU3
 159:armwave.c     **** 
 160:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 161:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 161 5 view .LVU4
  93              	@ armwave.c:153: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 153:armwave.c     **** {
  94              		.loc 1 153 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 162:armwave.c     **** 
 163:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 164:armwave.c     ****     assert((target_height % 256) == 0);
 165:armwave.c     **** 
 166:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 167:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 167 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 105              		.loc 1 161 33 view .LVU7
 106 0008 F4409FE5 		ldr	r4, .L12	@ tmp172,
 107 000c F4309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 169:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 169 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 170:armwave.c     ****     g_armwave_state.waves = waves;
 171:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 172:armwave.c     ****     g_armwave_state.target_width = target_width;
 173:armwave.c     ****     g_armwave_state.target_height = target_height;
 174:armwave.c     **** 
 175:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 176:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 177:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 178:armwave.c     ****     g_armwave_state.slice_height = 64;  
 179:armwave.c     **** 
 180:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 180 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 168 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 118              		.loc 1 161 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 120              		.loc 1 164 5 is_stmt 1 view .LVU12
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 167 5 view .LVU13
 122              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 171 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 170 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 180 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 168 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 167 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 168 5 is_stmt 1 view .LVU19
 169:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 169 5 view .LVU20
 139              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 140              		.loc 1 173 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 169 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 170 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 172 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 170 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 171 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 154              		.loc 1 178 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 171 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 172 5 is_stmt 1 view .LVU29
 173:armwave.c     **** 
 160              		.loc 1 173 5 view .LVU30
 178:armwave.c     **** 
 161              		.loc 1 178 5 view .LVU31
 162              		.loc 1 180 5 view .LVU32
 163              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 180 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 181:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 181 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 182:armwave.c     **** 
 183:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 183 5 view .LVU35
 172              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 183 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 179              		.loc 1 184 33 view .LVU37
 180 0064 A0209FE5 		ldr	r2, .L12+8	@ tmp150,
 181              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 186:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182              		.loc 1 186 33 view .LVU38
 183 0068 0B30E0E3 		mvn	r3, #11	@ tmp152,
 184              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 185              		.loc 1 184 33 view .LVU39
 186 006c B024C4E1 		strh	r2, [r4, #64]	@ movhi	@ tmp150, MEM[(unsigned char *)&g_armwave_state + 64B]
 187              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188              		.loc 1 186 33 view .LVU40
 189 0070 4230C4E5 		strb	r3, [r4, #66]	@ tmp152, g_armwave_state.ch1_color.b
 190              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 187:armwave.c     **** 
 188:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 191              		.loc 1 188 5 view .LVU41
 192 0074 000050E3 		cmp	r0, #0	@ tmp146,
 193              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 183 32 view .LVU42
 195 0078 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 196              		.loc 1 184 5 is_stmt 1 view .LVU43
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 185 5 view .LVU44
 186:armwave.c     **** 
 198              		.loc 1 186 5 view .LVU45
 199              		.loc 1 188 5 view .LVU46
 200 007c 1600000A 		beq	.L10		@,
 189:armwave.c     **** 
 190:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 191:armwave.c     ****     length = end_point - start_point;
 201              		.loc 1 191 5 view .LVU47
 202              	.LVL3:
 192:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 203              		.loc 1 192 5 view .LVU48
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 204              		.loc 1 193 5 view .LVU49
 205              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 206              		.loc 1 193 60 is_stmt 0 view .LVU50
 207 0080 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp174, g_armwave_state.slice_height
 208              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 209              		.loc 1 194 40 view .LVU51
 210 0084 010AA0E3 		mov	r0, #4096	@,
 211              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 212              		.loc 1 193 60 view .LVU52
 213 0088 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp159, tmp174
 214              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 215              		.loc 1 193 41 view .LVU53
 216 008c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp161, tmp159
 217 0090 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp161, g_armwave_state.slice_record_height
 218              		.loc 1 194 5 is_stmt 1 view .LVU54
 219              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 220              		.loc 1 194 40 is_stmt 0 view .LVU55
 221 0094 FEFFFFEB 		bl	malloc		@
 222              	.LVL4:
 223              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 195:armwave.c     **** 
 196:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 224              		.loc 1 196 5 view .LVU56
 225 0098 000050E3 		cmp	r0, #0	@ tmp162,
 226              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 227              		.loc 1 194 38 view .LVU57
 228 009c 4C0084E5 		str	r0, [r4, #76]	@ tmp162, g_armwave_state.xcoord_to_xpixel
 229              		.loc 1 196 5 is_stmt 1 view .LVU58
 230              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     **** 
 198:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 231              		.loc 1 198 12 is_stmt 0 view .LVU59
 232 00a0 0030A013 		movne	r3, #0	@ xx,
 233 00a4 02004012 		subne	r0, r0, #2	@ ivtmp.25, tmp162,
 234              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 235              		.loc 1 196 5 view .LVU60
 236 00a8 1000000A 		beq	.L11		@,
 237              	.L5:
 238              	.LVL5:
 199:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 239              		.loc 1 199 9 is_stmt 1 view .LVU61
 240              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 241              		.loc 1 199 74 is_stmt 0 view .LVU62
 242 00ac 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 243              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 244              		.loc 1 198 32 view .LVU63
 245 00b0 013083E2 		add	r3, r3, #1	@ xx, xx,
 246              	.LVL6:
 247              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 198 5 view .LVU64
 249 00b4 020B53E3 		cmp	r3, #2048	@ xx,
 250              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 251              		.loc 1 199 74 view .LVU65
 252 00b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp167, xx
 253              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 199 46 view .LVU66
 255 00bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp168, tmp167
 256 00c0 902A17EE 		vmov	r2, s15	@ int	@ tmp168, tmp168
 257 00c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp168, MEM[base: _20, offset: 0B]
 258              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 198 5 view .LVU67
 260 00c8 F7FFFF1A 		bne	.L5		@,
 200:armwave.c     **** 
 201:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 202:armwave.c     ****     }
 203:armwave.c     **** 
 204:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 261              		.loc 1 204 5 is_stmt 1 view .LVU68
 262              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 263              		.loc 1 204 34 is_stmt 0 view .LVU69
 264 00cc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 265 00d0 FEFFFFEB 		bl	malloc		@
 266              	.LVL7:
 267              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 268              		.loc 1 204 32 view .LVU70
 269 00d4 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 270              	@ armwave.c:205: }
 205:armwave.c     **** }
 271              		.loc 1 205 1 view .LVU71
 272 00d8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 273              	.LVL8:
 274              	.L10:
 188:armwave.c     **** 
 275              		.loc 1 188 5 is_stmt 1 view .LVU72
 276 00dc 2C309FE5 		ldr	r3, .L12+12	@,
 277 00e0 BC20A0E3 		mov	r2, #188	@,
 278 00e4 28109FE5 		ldr	r1, .L12+16	@,
 279 00e8 28009FE5 		ldr	r0, .L12+20	@,
 280 00ec FEFFFFEB 		bl	__assert_fail		@
 281              	.LVL9:
 282              	.L11:
 196:armwave.c     **** 
 283              		.loc 1 196 5 view .LVU73
 284 00f0 18309FE5 		ldr	r3, .L12+12	@,
 285 00f4 C420A0E3 		mov	r2, #196	@,
 286 00f8 14109FE5 		ldr	r1, .L12+16	@,
 287 00fc 18009FE5 		ldr	r0, .L12+24	@,
 288 0100 FEFFFFEB 		bl	__assert_fail		@
 289              	.LVL10:
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 0104 00000000 		.word	g_armwave_state
 294 0108 00000000 		.word	test_wave_buffer
 295 010c ECE8FFFF 		.word	-5908
 296 0110 00000000 		.word	.LANCHOR0
 297 0114 00000000 		.word	.LC0
 298 0118 0C000000 		.word	.LC1
 299 011c 30000000 		.word	.LC2
 300              		.cfi_endproc
 301              	.LFE72:
 303              		.align	2
 304              		.global	test_create_waveform
 305              		.syntax unified
 306              		.arm
 307              		.fpu vfp
 309              	test_create_waveform:
 310              	.LFB57:
  48:armwave.c     ****     float v, mod, noise, xnoise;
 311              		.loc 1 48 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 0, uses_anonymous_args = 0
  49:armwave.c     ****     int w, x;
 315              		.loc 1 49 5 view .LVU75
  50:armwave.c     **** 
 316              		.loc 1 50 5 view .LVU76
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 317              		.loc 1 52 5 view .LVU77
 318              	.LVL11:
 319              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 320              		.loc 1 48 1 is_stmt 0 view .LVU78
 321 0120 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 322              		.cfi_def_cfa_offset 36
 323              		.cfi_offset 4, -36
 324              		.cfi_offset 5, -32
 325              		.cfi_offset 6, -28
 326              		.cfi_offset 7, -24
 327              		.cfi_offset 8, -20
 328              		.cfi_offset 9, -16
 329              		.cfi_offset 10, -12
 330              		.cfi_offset 11, -8
 331              		.cfi_offset 14, -4
 332 0124 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 333              		.cfi_def_cfa_offset 84
 334              		.cfi_offset 80, -84
 335              		.cfi_offset 81, -80
 336              		.cfi_offset 82, -76
 337              		.cfi_offset 83, -72
 338              		.cfi_offset 84, -68
 339              		.cfi_offset 85, -64
 340              		.cfi_offset 86, -60
 341              		.cfi_offset 87, -56
 342              		.cfi_offset 88, -52
 343              		.cfi_offset 89, -48
 344              		.cfi_offset 90, -44
 345              		.cfi_offset 91, -40
 346 0128 5C819FE5 		ldr	r8, .L33+40	@ _75,
 347              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 348              		.loc 1 53 33 view .LVU79
 349 012c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 350 0130 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.41, _75,
 351              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 352              		.loc 1 53 13 view .LVU80
 353 0134 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 354              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 355              		.loc 1 57 20 view .LVU81
 356 0138 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 357              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 358              		.loc 1 68 29 view .LVU82
 359 013c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 360              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 361              		.loc 1 68 33 view .LVU83
 362 0140 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 363              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 364              		.loc 1 66 20 view .LVU84
 365 0144 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 366 0148 02B886E2 		add	fp, r6, #131072	@ _81,,
 367 014c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 368              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 369              		.loc 1 48 1 view .LVU85
 370 0150 0CD04DE2 		sub	sp, sp, #12	@,,
 371              		.cfi_def_cfa_offset 96
 372 0154 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 373 0158 0F6086E2 		add	r6, r6, #15	@ ivtmp.41, ivtmp.41,
 374 015c 008068E2 		rsb	r8, r8, #0	@ ivtmp.44, _75
 375              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 376              		.loc 1 52 11 view .LVU86
 377 0160 0090A0E3 		mov	r9, #0	@ w,
 378              	.LVL12:
 379              	.L20:
  53:armwave.c     ****         //mod = 1.0f;
 380              		.loc 1 53 9 is_stmt 1 view .LVU87
 381              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 382              		.loc 1 53 24 is_stmt 0 view .LVU88
 383 0164 909A07EE 		vmov	s15, r9	@ int	@ w, w
 384              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 53 48 view .LVU89
 386 0168 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 387              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 388              		.loc 1 53 13 view .LVU90
 389 016c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 390              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 391              		.loc 1 65 19 view .LVU91
 392 0170 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 393              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 394              		.loc 1 53 24 view .LVU92
 395 0174 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 396              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 397              		.loc 1 70 58 view .LVU93
 398 0178 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 399 017c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.34, ivtmp.41,
 400 0180 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.44,
 401              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 402              		.loc 1 53 33 view .LVU94
 403 0184 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 404              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 405              		.loc 1 53 13 view .LVU95
 406 0188 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 407              	.LVL13:
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 408              		.loc 1 56 9 is_stmt 1 view .LVU96
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 409              		.loc 1 56 9 is_stmt 0 view .LVU97
 410 018c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 411              	.LVL14:
 412              	.L19:
 413              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 414              		.loc 1 57 24 view .LVU98
 415 0190 FEFFFFEB 		bl	rand		@
 416              	.LVL15:
 417 0194 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.34
 418              	.LVL16:
  57:armwave.c     ****             noise *= noise;
 419              		.loc 1 57 13 is_stmt 1 view .LVU99
 420              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 421              		.loc 1 57 31 is_stmt 0 view .LVU100
 422 0198 7000FFE6 		uxth	r0, r0	@ tmp163,
 423              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 424              		.loc 1 57 41 view .LVU101
 425 019c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 426 01a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 427              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 428              		.loc 1 57 20 view .LVU102
 429 01a4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 430              	.LVL17:
  58:armwave.c     ****             noise *= noise;
 431              		.loc 1 58 13 is_stmt 1 view .LVU103
 432              	@ armwave.c:58:             noise *= noise;
  58:armwave.c     ****             noise *= noise;
 433              		.loc 1 58 19 is_stmt 0 view .LVU104
 434 01a8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 435              	.LVL18:
  59:armwave.c     ****             noise *= noise;
 436              		.loc 1 59 13 is_stmt 1 view .LVU105
 437              	@ armwave.c:59:             noise *= noise;
  59:armwave.c     ****             noise *= noise;
 438              		.loc 1 59 19 is_stmt 0 view .LVU106
 439 01ac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL19:
  60:armwave.c     **** 
 441              		.loc 1 60 13 is_stmt 1 view .LVU107
 442              	@ armwave.c:60:             noise *= noise;
  60:armwave.c     **** 
 443              		.loc 1 60 19 is_stmt 0 view .LVU108
 444 01b0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 445              	.LVL20:
  62:armwave.c     ****                 noise = -noise;
 446              		.loc 1 62 13 is_stmt 1 view .LVU109
 447              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 448              		.loc 1 62 17 is_stmt 0 view .LVU110
 449 01b4 FEFFFFEB 		bl	rand		@
 450              	.LVL21:
  63:armwave.c     **** 
 451              		.loc 1 63 17 is_stmt 1 view .LVU111
 452              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 453              		.loc 1 62 15 is_stmt 0 view .LVU112
 454 01b8 020910E3 		tst	r0, #32768	@,
 455              	@ armwave.c:63:                 noise = -noise;
  63:armwave.c     **** 
 456              		.loc 1 63 23 view .LVU113
 457 01bc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 458              	.LVL22:
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 459              		.loc 1 65 13 is_stmt 1 view .LVU114
  66:armwave.c     **** 
 460              		.loc 1 66 13 view .LVU115
 461              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 462              		.loc 1 66 23 is_stmt 0 view .LVU116
 463 01c0 FEFFFFEB 		bl	rand		@
 464              	.LVL23:
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 465              		.loc 1 68 13 is_stmt 1 view .LVU117
 466              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 467              		.loc 1 68 29 is_stmt 0 view .LVU118
 468 01c4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 469 01c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 470 01cc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 471              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 472              		.loc 1 66 30 view .LVU119
 473 01d0 7000FFE6 		uxth	r0, r0	@ tmp173,
 474              	.LVL24:
 475              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 476              		.loc 1 66 40 view .LVU120
 477 01d4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 478 01d8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 479              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 480              		.loc 1 66 20 view .LVU121
 481 01dc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 482              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 483              		.loc 1 68 60 view .LVU122
 484 01e0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 485              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 486              		.loc 1 68 18 view .LVU123
 487 01e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 488 01e8 FEFFFFEB 		bl	sin		@
 489              	.LVL25:
  70:armwave.c     ****         }
 490              		.loc 1 70 13 is_stmt 1 view .LVU124
 491              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 492              		.loc 1 65 19 is_stmt 0 view .LVU125
 493 01ec 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 494              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 495              		.loc 1 70 58 view .LVU126
 496 01f0 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 497              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 498              		.loc 1 70 56 view .LVU127
 499 01f4 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 500 01f8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 501              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 502              		.loc 1 68 77 view .LVU128
 503 01fc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 504              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505              		.loc 1 68 70 view .LVU129
 506 0200 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 507              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 508              		.loc 1 68 77 view .LVU130
 509 0204 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 510              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 511              		.loc 1 68 15 view .LVU131
 512 0208 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 513              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 514              		.loc 1 70 58 view .LVU132
 515 020c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 516 0210 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 517 0214 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 518 0218 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 519 021c 050000DA 		ble	.L16		@,
 520              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 521              		.loc 1 70 56 discriminator 1 view .LVU133
 522 0220 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 523 0224 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 524 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 525 022c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 526 0230 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 527 0234 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 528              	.L16:
 529              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 530              		.loc 1 70 56 discriminator 12 view .LVU134
 531 0238 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 532              	.LVL26:
 533              	@ armwave.c:56:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 534              		.loc 1 56 9 discriminator 12 view .LVU135
 535 023c 060055E1 		cmp	r5, r6	@ ivtmp.34, ivtmp.41
 536 0240 D2FFFF1A 		bne	.L19		@,
 537 0244 026B85E2 		add	r6, r5, #2048	@ ivtmp.41, ivtmp.34,
 538              	.LVL27:
 539              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 540              		.loc 1 52 5 discriminator 2 view .LVU136
 541 0248 0B0056E1 		cmp	r6, fp	@ ivtmp.41, _81
 542              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 543              		.loc 1 52 34 discriminator 2 view .LVU137
 544 024c 019089E2 		add	r9, r9, #1	@ w, w,
 545              	.LVL28:
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 546              		.loc 1 52 34 discriminator 2 view .LVU138
 547 0250 028B48E2 		sub	r8, r8, #2048	@ ivtmp.44, ivtmp.44,
 548              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 549              		.loc 1 52 5 discriminator 2 view .LVU139
 550 0254 C2FFFF1A 		bne	.L20		@,
 551              	@ armwave.c:73: }
  73:armwave.c     **** 
 552              		.loc 1 73 1 view .LVU140
 553 0258 0CD08DE2 		add	sp, sp, #12	@,,
 554              		.cfi_def_cfa_offset 84
 555              		@ sp needed	@
 556 025c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 557              		.cfi_restore 90
 558              		.cfi_restore 91
 559              		.cfi_restore 88
 560              		.cfi_restore 89
 561              		.cfi_restore 86
 562              		.cfi_restore 87
 563              		.cfi_restore 84
 564              		.cfi_restore 85
 565              		.cfi_restore 82
 566              		.cfi_restore 83
 567              		.cfi_restore 80
 568              		.cfi_restore 81
 569              		.cfi_def_cfa_offset 36
 570              	.LVL29:
  73:armwave.c     **** 
 571              		.loc 1 73 1 view .LVU141
 572 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 573              	.LVL30:
 574              	.L34:
  73:armwave.c     **** 
 575              		.loc 1 73 1 view .LVU142
 576              		.align	2
 577              	.L33:
 578 0264 0000803C 		.word	1015021568
 579 0268 0000003F 		.word	1056964608
 580 026c 0050C347 		.word	1203982336
 581 0270 C3F5C840 		.word	1086911939
 582 0274 0000003A 		.word	973078528
 583 0278 38FFC74A 		.word	1254620984
 584 027c 0000803F 		.word	1065353216
 585 0280 0000FE42 		.word	1123942400
 586 0284 00000043 		.word	1124073472
 587 0288 00007F43 		.word	1132396544
 588 028c 00000000 		.word	test_wave_buffer
 589 0290 00000000 		.word	.LANCHOR1
 590              		.cfi_endproc
 591              	.LFE57:
 593              		.align	2
 594              		.global	test_create_gamma
 595              		.syntax unified
 596              		.arm
 597              		.fpu vfp
 599              	test_create_gamma:
 600              	.LFB58:
  79:armwave.c     ****     int i;
 601              		.loc 1 79 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
  80:armwave.c     ****     float gamma = 0.90f;
 605              		.loc 1 80 5 view .LVU144
  81:armwave.c     **** 
 606              		.loc 1 81 5 view .LVU145
 607              	.LVL31:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 608              		.loc 1 83 5 view .LVU146
 609              	@ armwave.c:79: {
  79:armwave.c     ****     int i;
 610              		.loc 1 79 1 is_stmt 0 view .LVU147
 611 0294 70402DE9 		push	{r4, r5, r6, lr}	@
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 4, -16
 614              		.cfi_offset 5, -12
 615              		.cfi_offset 6, -8
 616              		.cfi_offset 14, -4
 617 0298 068B2DED 		vpush.64	{d8, d9, d10}	@
 618              		.cfi_def_cfa_offset 40
 619              		.cfi_offset 80, -40
 620              		.cfi_offset 81, -36
 621              		.cfi_offset 82, -32
 622              		.cfi_offset 83, -28
 623              		.cfi_offset 84, -24
 624              		.cfi_offset 85, -20
 625 029c 68409FE5 		ldr	r4, .L39+20	@ ivtmp.52,
 626              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 627              		.loc 1 84 32 view .LVU148
 628 02a0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 629              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 630              		.loc 1 84 26 view .LVU149
 631 02a4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 632              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 633              		.loc 1 84 49 view .LVU150
 634 02a8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 635 02ac 015084E2 		add	r5, r4, #1	@ _25, ivtmp.52,
 636 02b0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.52,
 637 02b4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 638              	.LVL32:
 639              	.L36:
  84:armwave.c     ****     }
 640              		.loc 1 84 9 is_stmt 1 discriminator 3 view .LVU151
 641              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 642              		.loc 1 84 32 is_stmt 0 discriminator 3 view .LVU152
 643 02b8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.52
 644              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 645              		.loc 1 84 26 discriminator 3 view .LVU153
 646 02bc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 647              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 648              		.loc 1 84 32 discriminator 3 view .LVU154
 649 02c0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 650 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 651 02c8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 652              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 653              		.loc 1 84 26 discriminator 3 view .LVU155
 654 02cc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 655 02d0 FEFFFFEB 		bl	pow		@
 656              	.LVL33:
 657              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 658              		.loc 1 84 49 discriminator 3 view .LVU156
 659 02d4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 660              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 661              		.loc 1 84 24 discriminator 3 view .LVU157
 662 02d8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 663 02dc 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 664 02e0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 665              	.LVL34:
 666              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 667              		.loc 1 83 5 discriminator 3 view .LVU158
 668 02e4 060054E1 		cmp	r4, r6	@ ivtmp.52, _26
 669 02e8 F2FFFF1A 		bne	.L36		@,
 670              	@ armwave.c:86: }
  86:armwave.c     **** 
 671              		.loc 1 86 1 view .LVU159
 672 02ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 16
 680 02f0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 681              	.LVL35:
 682              	.L40:
  86:armwave.c     **** 
 683              		.loc 1 86 1 view .LVU160
 684 02f4 0000A0E1 		.align	3
 685              	.L39:
 686 02f8 000000C0 		.word	-1073741824
 687 02fc CCCCEC3F 		.word	1072483532
 688 0300 00000000 		.word	0
 689 0304 00E06F40 		.word	1081073664
 690 0308 00007F43 		.word	1132396544
 691 030c FFFFFFFF 		.word	gamma_table-1
 692              		.cfi_endproc
 693              	.LFE58:
 695              		.align	2
 696              		.global	render_nonaa_to_buffer_1ch_slice
 697              		.syntax unified
 698              		.arm
 699              		.fpu vfp
 701              	render_nonaa_to_buffer_1ch_slice:
 702              	.LVL36:
 703              	.LFB59:
  96:armwave.c     ****     int yy, ys, w, scale_value;
 704              		.loc 1 96 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
  97:armwave.c     ****     uint32_t value, word;
 708              		.loc 1 97 5 view .LVU162
  98:armwave.c     ****     uint8_t *wave_base;
 709              		.loc 1 98 5 view .LVU163
  99:armwave.c     ****     uint8_t *write_buffer_base;
 710              		.loc 1 99 5 view .LVU164
 100:armwave.c     ****     uint8_t *write_buffer;
 711              		.loc 1 100 5 view .LVU165
 101:armwave.c     ****     
 712              		.loc 1 101 5 view .LVU166
 103:armwave.c     **** 
 713              		.loc 1 103 5 view .LVU167
 714              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 715              		.loc 1 103 40 is_stmt 0 view .LVU168
 716 0310 F4209FE5 		ldr	r2, .L53	@ tmp257,
 717              	@ armwave.c:96: {
  96:armwave.c     ****     int yy, ys, w, scale_value;
 718              		.loc 1 96 1 view .LVU169
 719 0314 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 720              		.cfi_def_cfa_offset 36
 721              		.cfi_offset 4, -36
 722              		.cfi_offset 5, -32
 723              		.cfi_offset 6, -28
 724              		.cfi_offset 7, -24
 725              		.cfi_offset 8, -20
 726              		.cfi_offset 9, -16
 727              		.cfi_offset 10, -12
 728              		.cfi_offset 11, -8
 729              		.cfi_offset 14, -4
 730              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 731              		.loc 1 106 5 view .LVU170
 732 0318 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 733              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 734              		.loc 1 103 63 view .LVU171
 735 031c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 736              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 737              		.loc 1 106 5 view .LVU172
 738 0320 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 739              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 740              		.loc 1 103 40 view .LVU173
 741 0324 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 742              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 743              		.loc 1 103 63 view .LVU174
 744 0328 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 745              	.LVL37:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 106 5 is_stmt 1 view .LVU175
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 747              		.loc 1 106 5 is_stmt 0 view .LVU176
 748 032c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 749 0330 000051E3 		cmp	r1, #0	@ height,
 750 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 751 0338 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 752              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 753              		.loc 1 106 11 view .LVU177
 754 033c 0080A0E3 		mov	r8, #0	@ w,
 755              	.LVL38:
 756              	.L45:
 107:armwave.c     **** 
 757              		.loc 1 107 9 is_stmt 1 view .LVU178
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 758              		.loc 1 117 9 view .LVU179
 759              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 760              		.loc 1 107 64 is_stmt 0 view .LVU180
 761 0340 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 762 0344 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 763              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 764              		.loc 1 117 16 view .LVU181
 765 0348 0000A0E3 		mov	r0, #0	@ yy,
 766 034c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 767 0350 037087E0 		add	r7, r7, r3	@ ivtmp.58, g_armwave_state.wave_buffer, tmp195
 768              	.LVL39:
 769              	.L44:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 770              		.loc 1 132 13 is_stmt 1 view .LVU182
 771              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 772              		.loc 1 132 18 is_stmt 0 view .LVU183
 773 0354 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 774              	.LVL40:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 775              		.loc 1 136 13 is_stmt 1 view .LVU184
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 776              		.loc 1 137 14 view .LVU185
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 777              		.loc 1 138 14 view .LVU186
 139:armwave.c     ****             	word >>= 8;
 778              		.loc 1 139 14 view .LVU187
 779              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 780              		.loc 1 137 42 is_stmt 0 view .LVU188
 781 0358 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 782              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 783              		.loc 1 138 60 view .LVU189
 784 035c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 785              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 786              		.loc 1 137 34 view .LVU190
 787 0360 73E0EFE6 		uxtb	lr, r3	@ word, word
 788              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 789              		.loc 1 140 19 view .LVU191
 790 0364 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 791              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 792              		.loc 1 139 44 view .LVU192
 793 0368 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 794              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 137 34 view .LVU193
 796 036c 7440EFE6 		uxtb	r4, r4	@ word, word
 797              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 798              		.loc 1 139 44 view .LVU194
 799 0370 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 800              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 801              		.loc 1 138 60 view .LVU195
 802 0374 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 803              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 804              		.loc 1 140 19 view .LVU196
 805 0378 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 806              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 807              		.loc 1 139 44 view .LVU197
 808 037c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 809              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 137 34 view .LVU198
 811 0380 7EE0EFE6 		uxtb	lr, lr	@ word, word
 812              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 813              		.loc 1 140 19 view .LVU199
 814 0384 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 815              	.LVL41:
 816              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 817              		.loc 1 139 44 view .LVU200
 818 0388 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 819 038c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 820              	.LVL42:
 140:armwave.c     ****     		}
 821              		.loc 1 140 14 is_stmt 1 view .LVU201
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 822              		.loc 1 137 14 view .LVU202
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 823              		.loc 1 138 14 view .LVU203
 139:armwave.c     ****             	word >>= 8;
 824              		.loc 1 139 14 view .LVU204
 825              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 826              		.loc 1 137 42 is_stmt 0 view .LVU205
 827 0390 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 828              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 829              		.loc 1 138 60 view .LVU206
 830 0394 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 831              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 832              		.loc 1 139 44 view .LVU207
 833 0398 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 834              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 835              		.loc 1 138 60 view .LVU208
 836 039c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 837              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 838              		.loc 1 139 44 view .LVU209
 839 03a0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 840              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 841              		.loc 1 138 60 view .LVU210
 842 03a4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 843              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 844              		.loc 1 117 37 view .LVU211
 845 03a8 040080E2 		add	r0, r0, #4	@ yy, yy,
 846              	.LVL43:
 847              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 848              		.loc 1 139 44 view .LVU212
 849 03ac 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 850              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 851              		.loc 1 117 9 view .LVU213
 852 03b0 000051E1 		cmp	r1, r0	@ height, yy
 853              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 854              		.loc 1 139 44 view .LVU214
 855 03b4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 856 03b8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 857              	.LVL44:
 140:armwave.c     ****     		}
 858              		.loc 1 140 14 is_stmt 1 view .LVU215
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 859              		.loc 1 137 14 view .LVU216
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 860              		.loc 1 138 14 view .LVU217
 139:armwave.c     ****             	word >>= 8;
 861              		.loc 1 139 14 view .LVU218
 862              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 863              		.loc 1 137 42 is_stmt 0 view .LVU219
 864 03bc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 865              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 866              		.loc 1 138 60 view .LVU220
 867 03c0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 868              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 869              		.loc 1 139 44 view .LVU221
 870 03c4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 871 03c8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 872 03cc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 873 03d0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 874 03d4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 140:armwave.c     ****     		}
 875              		.loc 1 140 14 is_stmt 1 view .LVU222
 876              	.LVL45:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 877              		.loc 1 137 14 view .LVU223
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 878              		.loc 1 138 14 view .LVU224
 139:armwave.c     ****             	word >>= 8;
 879              		.loc 1 139 14 view .LVU225
 880              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 881              		.loc 1 137 42 is_stmt 0 view .LVU226
 882 03d8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 883              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 884              		.loc 1 138 60 view .LVU227
 885 03dc 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 886              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 887              		.loc 1 139 44 view .LVU228
 888 03e0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 889 03e4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 890 03e8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 891 03ec 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 892 03f0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 140:armwave.c     ****     		}
 893              		.loc 1 140 14 is_stmt 1 view .LVU229
 894              	.LVL46:
 895              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 896              		.loc 1 117 9 is_stmt 0 view .LVU230
 897 03f4 D6FFFF8A 		bhi	.L44		@,
 898              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 899              		.loc 1 106 5 view .LVU231
 900 03f8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 901              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 902              		.loc 1 106 44 view .LVU232
 903 03fc 018088E2 		add	r8, r8, #1	@ w, w,
 904              	.LVL47:
 905              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 106 5 view .LVU233
 907 0400 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 908 0404 CDFFFF3A 		bcc	.L45		@,
 909 0408 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 910              	.L54:
 911              		.align	2
 912              	.L53:
 913 040c 00000000 		.word	g_armwave_state
 914              		.cfi_endproc
 915              	.LFE59:
 917              		.align	2
 918              		.global	armwave_init
 919              		.syntax unified
 920              		.arm
 921              		.fpu vfp
 923              	armwave_init:
 924              	.LFB60:
 149:armwave.c     ****     g_armwave_state.flags = 0;
 925              		.loc 1 149 1 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 150:armwave.c     **** }
 930              		.loc 1 150 5 view .LVU235
 931              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 932              		.loc 1 150 27 is_stmt 0 view .LVU236
 933 0410 08309FE5 		ldr	r3, .L56	@ tmp110,
 934 0414 0020A0E3 		mov	r2, #0	@ tmp111,
 935 0418 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 936              	@ armwave.c:151: }
 151:armwave.c     **** 
 937              		.loc 1 151 1 view .LVU237
 938 041c 1EFF2FE1 		bx	lr	@
 939              	.L57:
 940              		.align	2
 941              	.L56:
 942 0420 00000000 		.word	g_armwave_state
 943              		.cfi_endproc
 944              	.LFE60:
 946              		.align	2
 947              		.global	armwave_setup_render
 948              		.syntax unified
 949              		.arm
 950              		.fpu vfp
 952              	armwave_setup_render:
 953              	.LVL48:
 954              	.LFB61:
 154:armwave.c     ****     uint32_t length, xx;
 955              		.loc 1 154 1 is_stmt 1 view -0
 956              		.cfi_startproc
 957              		@ args = 16, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 155:armwave.c     ****     float points_per_pixel;
 959              		.loc 1 155 5 view .LVU239
 156:armwave.c     **** 
 960              		.loc 1 156 5 view .LVU240
 158:armwave.c     **** 
 961              		.loc 1 158 5 view .LVU241
 962              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 963              		.loc 1 154 1 is_stmt 0 view .LVU242
 964 0424 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 965              		.cfi_def_cfa_offset 32
 966              		.cfi_offset 4, -32
 967              		.cfi_offset 5, -28
 968              		.cfi_offset 6, -24
 969              		.cfi_offset 7, -20
 970              		.cfi_offset 8, -16
 971              		.cfi_offset 9, -12
 972              		.cfi_offset 10, -8
 973              		.cfi_offset 14, -4
 974              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 975              		.loc 1 158 5 view .LVU243
 976 0428 020051E1 		cmp	r1, r2	@ start_point, end_point
 977              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 154 1 view .LVU244
 979 042c 028B2DED 		vpush.64	{d8}	@
 980              		.cfi_def_cfa_offset 40
 981              		.cfi_offset 80, -40
 982              		.cfi_offset 81, -36
 983              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 984              		.loc 1 154 1 view .LVU245
 985 0430 0190A0E1 		mov	r9, r1	@ start_point, start_point
 986 0434 0260A0E1 		mov	r6, r2	@ end_point, end_point
 987 0438 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 988              	.LVL49:
 154:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 154 1 view .LVU246
 990 043c 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 991 0440 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 992              	.LVL50:
 993              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 994              		.loc 1 158 5 view .LVU247
 995 0444 3E00002A 		bcs	.L70		@,
 161:armwave.c     **** 
 996              		.loc 1 161 5 is_stmt 1 view .LVU248
 997              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 998              		.loc 1 161 33 is_stmt 0 view .LVU249
 999 0448 48519FE5 		ldr	r5, .L74+4	@ tmp194,
 1000              	@ armwave.c:164:     assert((target_height % 256) == 0);
 164:armwave.c     **** 
 1001              		.loc 1 164 5 view .LVU250
 1002 044c FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1003              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 1004              		.loc 1 161 33 view .LVU251
 1005 0450 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 1006              		.loc 1 164 5 is_stmt 1 view .LVU252
 1007 0454 4900001A 		bne	.L71		@,
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1008              		.loc 1 167 5 view .LVU253
 1009              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1010              		.loc 1 171 42 is_stmt 0 view .LVU254
 1011 0458 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1012              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1013              		.loc 1 180 23 view .LVU255
 1014 045c 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1015              	.LVL51:
 1016              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1017              		.loc 1 169 33 view .LVU256
 1018 0460 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1019              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1020              		.loc 1 170 27 view .LVU257
 1021 0464 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1022              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1023              		.loc 1 168 44 view .LVU258
 1024 0468 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1025              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1026              		.loc 1 178 34 view .LVU259
 1027 046c 4030A0E3 		mov	r3, #64	@ tmp159,
 1028              	.LVL52:
 1029              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1030              		.loc 1 180 7 view .LVU260
 1031 0470 000050E3 		cmp	r0, #0	@ _4,
 1032              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1033              		.loc 1 167 29 view .LVU261
 1034 0474 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1035              		.loc 1 168 5 is_stmt 1 view .LVU262
 1036              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1037              		.loc 1 172 34 is_stmt 0 view .LVU263
 1038 0478 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1039              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 1040              		.loc 1 173 35 view .LVU264
 1041 047c 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1042              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1043              		.loc 1 171 26 view .LVU265
 1044 0480 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1045              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1046              		.loc 1 168 28 view .LVU266
 1047 0484 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1048              		.loc 1 169 5 is_stmt 1 view .LVU267
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1049              		.loc 1 170 5 view .LVU268
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1050              		.loc 1 171 5 view .LVU269
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1051              		.loc 1 172 5 view .LVU270
 173:armwave.c     **** 
 1052              		.loc 1 173 5 view .LVU271
 178:armwave.c     **** 
 1053              		.loc 1 178 5 view .LVU272
 1054              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1055              		.loc 1 178 34 is_stmt 0 view .LVU273
 1056 0488 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1057              		.loc 1 180 5 is_stmt 1 view .LVU274
 1058              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 180 7 is_stmt 0 view .LVU275
 1060 048c 0100000A 		beq	.L61		@,
 181:armwave.c     **** 
 1061              		.loc 1 181 9 is_stmt 1 view .LVU276
 1062 0490 FEFFFFEB 		bl	free		@
 1063              	.LVL53:
 181:armwave.c     **** 
 1064              		.loc 1 181 9 is_stmt 0 view .LVU277
 1065 0494 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1066              	.L61:
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1067              		.loc 1 183 5 is_stmt 1 view .LVU278
 1068              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1069              		.loc 1 183 34 is_stmt 0 view .LVU279
 1070 0498 0110A0E3 		mov	r1, #1	@,
 1071 049c 0700A0E1 		mov	r0, r7	@, _3
 1072 04a0 FEFFFFEB 		bl	calloc		@
 1073              	.LVL54:
 1074              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1075              		.loc 1 184 33 view .LVU280
 1076 04a4 F0209FE5 		ldr	r2, .L74+8	@ tmp166,
 1077              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1078              		.loc 1 186 33 view .LVU281
 1079 04a8 0B30E0E3 		mvn	r3, #11	@ tmp168,
 1080              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1081              		.loc 1 184 33 view .LVU282
 1082 04ac B024C5E1 		strh	r2, [r5, #64]	@ movhi	@ tmp166, MEM[(unsigned char *)&g_armwave_state + 64B]
 1083              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1084              		.loc 1 186 33 view .LVU283
 1085 04b0 4230C5E5 		strb	r3, [r5, #66]	@ tmp168, g_armwave_state.ch1_color.b
 1086              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 188:armwave.c     **** 
 1087              		.loc 1 188 5 view .LVU284
 1088 04b4 000050E3 		cmp	r0, #0	@ tmp162,
 1089              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1090              		.loc 1 183 32 view .LVU285
 1091 04b8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1092              		.loc 1 184 5 is_stmt 1 view .LVU286
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1093              		.loc 1 185 5 view .LVU287
 186:armwave.c     **** 
 1094              		.loc 1 186 5 view .LVU288
 188:armwave.c     **** 
 1095              		.loc 1 188 5 view .LVU289
 1096 04bc 2A00000A 		beq	.L72		@,
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1097              		.loc 1 191 5 view .LVU290
 1098              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1099              		.loc 1 192 34 is_stmt 0 view .LVU291
 1100 04c0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1101              	@ armwave.c:191:     length = end_point - start_point;
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1102              		.loc 1 191 12 view .LVU292
 1103 04c4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1104              	.LVL55:
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1105              		.loc 1 192 5 is_stmt 1 view .LVU293
 1106              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1107              		.loc 1 194 40 is_stmt 0 view .LVU294
 1108 04c8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1109              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 192 34 view .LVU295
 1111 04cc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp174, target_width
 1112              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1113              		.loc 1 192 31 view .LVU296
 1114 04d0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1115 04d4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp173, length
 1116              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1117              		.loc 1 193 60 view .LVU297
 1118 04d8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp198, g_armwave_state.slice_height
 1119 04dc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp177, tmp198
 1120              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 192 22 view .LVU298
 1122 04e0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp173, tmp174
 1123              	.LVL56:
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 193 5 is_stmt 1 view .LVU299
 1125              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1126              		.loc 1 193 60 is_stmt 0 view .LVU300
 1127 04e4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp179, tmp177, points_per_pixel
 1128              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1129              		.loc 1 193 41 view .LVU301
 1130 04e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp180, tmp179
 1131 04ec 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp180, g_armwave_state.slice_record_height
 194:armwave.c     **** 
 1132              		.loc 1 194 5 is_stmt 1 view .LVU302
 1133              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1134              		.loc 1 194 40 is_stmt 0 view .LVU303
 1135 04f0 FEFFFFEB 		bl	malloc		@
 1136              	.LVL57:
 1137              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 1138              		.loc 1 196 5 view .LVU304
 1139 04f4 000050E3 		cmp	r0, #0	@ tmp182,
 1140              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1141              		.loc 1 194 38 view .LVU305
 1142 04f8 4C0085E5 		str	r0, [r5, #76]	@ tmp182, g_armwave_state.xcoord_to_xpixel
 196:armwave.c     **** 
 1143              		.loc 1 196 5 is_stmt 1 view .LVU306
 1144 04fc 1500000A 		beq	.L73		@,
 1145              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1146              		.loc 1 199 54 is_stmt 0 view .LVU307
 1147 0500 237ADFED 		vldr.32	s15, .L74	@ tmp187,
 1148 0504 020040E2 		sub	r0, r0, #2	@ ivtmp.68, tmp182,
 1149 0508 887A87EE 		vdiv.f32	s14, s15, s16	@ _15, tmp187, points_per_pixel
 1150              	.L64:
 1151              	.LVL58:
 199:armwave.c     **** 
 1152              		.loc 1 199 9 is_stmt 1 discriminator 3 view .LVU308
 1153              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1154              		.loc 1 199 74 is_stmt 0 discriminator 3 view .LVU309
 1155 050c 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1156              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1157              		.loc 1 198 32 discriminator 3 view .LVU310
 1158 0510 014084E2 		add	r4, r4, #1	@ xx, xx,
 1159              	.LVL59:
 1160              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 198 5 discriminator 3 view .LVU311
 1162 0514 040056E1 		cmp	r6, r4	@ length, xx
 1163              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1164              		.loc 1 199 74 discriminator 3 view .LVU312
 1165 0518 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp188, xx
 1166 051c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp188, _15
 1167              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1168              		.loc 1 199 46 discriminator 3 view .LVU313
 1169 0520 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp190, tmp189
 1170 0524 903A17EE 		vmov	r3, s15	@ int	@ tmp190, tmp190
 1171 0528 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp190, MEM[base: _64, offset: 0B]
 1172              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1173              		.loc 1 198 5 discriminator 3 view .LVU314
 1174 052c F6FFFF1A 		bne	.L64		@,
 204:armwave.c     **** }
 1175              		.loc 1 204 5 is_stmt 1 view .LVU315
 1176              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1177              		.loc 1 204 34 is_stmt 0 view .LVU316
 1178 0530 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1179 0534 FEFFFFEB 		bl	malloc		@
 1180              	.LVL60:
 1181              	@ armwave.c:205: }
 1182              		.loc 1 205 1 view .LVU317
 1183 0538 028BBDEC 		vldm	sp!, {d8}	@
 1184              		.cfi_remember_state
 1185              		.cfi_restore 80
 1186              		.cfi_restore 81
 1187              		.cfi_def_cfa_offset 32
 1188              	.LVL61:
 1189              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1190              		.loc 1 204 32 view .LVU318
 1191 053c 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1192              	@ armwave.c:205: }
 1193              		.loc 1 205 1 view .LVU319
 1194 0540 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1195              	.LVL62:
 1196              	.L70:
 1197              		.cfi_restore_state
 158:armwave.c     **** 
 1198              		.loc 1 158 5 is_stmt 1 discriminator 1 view .LVU320
 1199 0544 54309FE5 		ldr	r3, .L74+12	@,
 1200              	.LVL63:
 158:armwave.c     **** 
 1201              		.loc 1 158 5 is_stmt 0 discriminator 1 view .LVU321
 1202 0548 9E20A0E3 		mov	r2, #158	@,
 1203 054c 50109FE5 		ldr	r1, .L74+16	@,
 1204 0550 50009FE5 		ldr	r0, .L74+20	@,
 1205              	.LVL64:
 158:armwave.c     **** 
 1206              		.loc 1 158 5 discriminator 1 view .LVU322
 1207 0554 FEFFFFEB 		bl	__assert_fail		@
 1208              	.LVL65:
 1209              	.L73:
 196:armwave.c     **** 
 1210              		.loc 1 196 5 is_stmt 1 discriminator 1 view .LVU323
 1211 0558 40309FE5 		ldr	r3, .L74+12	@,
 1212 055c C420A0E3 		mov	r2, #196	@,
 1213 0560 3C109FE5 		ldr	r1, .L74+16	@,
 1214 0564 40009FE5 		ldr	r0, .L74+24	@,
 1215 0568 FEFFFFEB 		bl	__assert_fail		@
 1216              	.LVL66:
 1217              	.L72:
 188:armwave.c     **** 
 1218              		.loc 1 188 5 discriminator 1 view .LVU324
 1219 056c 2C309FE5 		ldr	r3, .L74+12	@,
 1220 0570 BC20A0E3 		mov	r2, #188	@,
 1221 0574 28109FE5 		ldr	r1, .L74+16	@,
 1222 0578 30009FE5 		ldr	r0, .L74+28	@,
 1223 057c FEFFFFEB 		bl	__assert_fail		@
 1224              	.LVL67:
 1225              	.L71:
 164:armwave.c     **** 
 1226              		.loc 1 164 5 discriminator 1 view .LVU325
 1227 0580 18309FE5 		ldr	r3, .L74+12	@,
 1228              	.LVL68:
 164:armwave.c     **** 
 1229              		.loc 1 164 5 is_stmt 0 discriminator 1 view .LVU326
 1230 0584 A420A0E3 		mov	r2, #164	@,
 1231 0588 14109FE5 		ldr	r1, .L74+16	@,
 1232 058c 20009FE5 		ldr	r0, .L74+32	@,
 1233              	.LVL69:
 164:armwave.c     **** 
 1234              		.loc 1 164 5 discriminator 1 view .LVU327
 1235 0590 FEFFFFEB 		bl	__assert_fail		@
 1236              	.LVL70:
 1237              	.L75:
 164:armwave.c     **** 
 1238              		.loc 1 164 5 discriminator 1 view .LVU328
 1239              		.align	2
 1240              	.L74:
 1241 0594 0000803F 		.word	1065353216
 1242 0598 00000000 		.word	g_armwave_state
 1243 059c ECE8FFFF 		.word	-5908
 1244 05a0 00000000 		.word	.LANCHOR0
 1245 05a4 00000000 		.word	.LC0
 1246 05a8 5C000000 		.word	.LC3
 1247 05ac 30000000 		.word	.LC2
 1248 05b0 0C000000 		.word	.LC1
 1249 05b4 74000000 		.word	.LC4
 1250              		.cfi_endproc
 1251              	.LFE61:
 1253              		.align	2
 1254              		.global	armwave_clear_buffer
 1255              		.syntax unified
 1256              		.arm
 1257              		.fpu vfp
 1259              	armwave_clear_buffer:
 1260              	.LVL71:
 1261              	.LFB62:
 206:armwave.c     **** 
 207:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 208:armwave.c     **** {
 1262              		.loc 1 208 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 209:armwave.c     ****     // Flags ignored, only one buffer cleared
 210:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1267              		.loc 1 210 5 view .LVU330
 1268 05b8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1269 05bc 0010A0E3 		mov	r1, #0	@,
 1270 05c0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1271 05c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1272              	.LVL72:
 1273              		.loc 1 210 5 is_stmt 0 view .LVU331
 1274 05c8 FEFFFFEA 		b	memset		@
 1275              	.LVL73:
 1276              	.L78:
 1277              		.align	2
 1278              	.L77:
 1279 05cc 00000000 		.word	g_armwave_state
 1280              		.cfi_endproc
 1281              	.LFE62:
 1283              		.align	2
 1284              		.global	armwave_fill_pixbuf
 1285              		.syntax unified
 1286              		.arm
 1287              		.fpu vfp
 1289              	armwave_fill_pixbuf:
 1290              	.LVL74:
 1291              	.LFB63:
 211:armwave.c     **** }
 212:armwave.c     **** 
 213:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 214:armwave.c     **** {
 1292              		.loc 1 214 1 is_stmt 1 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 215:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1296              		.loc 1 215 5 view .LVU333
 216:armwave.c     ****     int rr, gg, bb;
 1297              		.loc 1 216 5 view .LVU334
 217:armwave.c     ****     uint8_t r, g, b;
 1298              		.loc 1 217 5 view .LVU335
 218:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1299              		.loc 1 218 5 view .LVU336
 1300              	@ armwave.c:218:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1301              		.loc 1 218 14 is_stmt 0 view .LVU337
 1302 05d0 A0109FE5 		ldr	r1, .L91	@ tmp176,
 1303              	@ armwave.c:221:     assert(out_buffer != NULL);
 219:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 220:armwave.c     **** 
 221:armwave.c     ****     assert(out_buffer != NULL);
 1304              		.loc 1 221 5 view .LVU338
 1305 05d4 000050E3 		cmp	r0, #0	@ out_buffer
 1306              	@ armwave.c:214: {
 214:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1307              		.loc 1 214 1 view .LVU339
 1308 05d8 70402DE9 		push	{r4, r5, r6, lr}	@
 1309              		.cfi_def_cfa_offset 16
 1310              		.cfi_offset 4, -16
 1311              		.cfi_offset 5, -12
 1312              		.cfi_offset 6, -8
 1313              		.cfi_offset 14, -4
 1314              	@ armwave.c:218:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 218:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1315              		.loc 1 218 14 view .LVU340
 1316 05dc 044091E5 		ldr	r4, [r1, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1317              	.LVL75:
 219:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1318              		.loc 1 219 5 is_stmt 1 view .LVU341
 1319              		.loc 1 221 5 view .LVU342
 1320 05e0 1F00000A 		beq	.L80		@,
 1321              	.LVL76:
 1322              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 222:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 223:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 224:armwave.c     **** 
 225:armwave.c     **** #if 0
 226:armwave.c     ****     // Pixbuf tests
 227:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 228:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 229:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 230:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 231:armwave.c     ****         }
 232:armwave.c     ****     }
 233:armwave.c     **** #endif
 234:armwave.c     **** 
 235:armwave.c     **** #if 1
 236:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 237:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1323              		.loc 1 237 37 is_stmt 0 view .LVU343
 1324 05e4 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_105, g_armwave_state.target_height
 1325              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1326              		.loc 1 237 5 view .LVU344
 1327 05e8 000052E3 		cmp	r2, #0	@ prephitmp_105,
 1328 05ec 7080BD08 		popeq	{r4, r5, r6, pc}	@
 1329 05f0 343091E5 		ldr	r3, [r1, #52]	@ _28, g_armwave_state.target_width
 1330              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1331              		.loc 1 237 12 view .LVU345
 1332 05f4 00E0A0E3 		mov	lr, #0	@ yy,
 1333              	.LVL77:
 1334              	.L82:
 1335              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1336              		.loc 1 238 9 view .LVU346
 1337 05f8 000053E3 		cmp	r3, #0	@ _28,
 1338              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1339              		.loc 1 238 16 view .LVU347
 1340 05fc 00C0A013 		movne	ip, #0	@ xx,
 1341              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1342              		.loc 1 238 9 view .LVU348
 1343 0600 1300000A 		beq	.L84		@,
 1344              	.LVL78:
 1345              	.L83:
 239:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 240:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1346              		.loc 1 240 13 is_stmt 1 discriminator 3 view .LVU349
 1347              	@ armwave.c:240:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1348              		.loc 1 240 21 is_stmt 0 discriminator 3 view .LVU350
 1349 0604 9E4325E0 		mla	r5, lr, r3, r4	@ tmp152, yy, _28, base_ptr
 1350              	@ armwave.c:255:             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 241:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 242:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 243:armwave.c     **** 
 244:armwave.c     **** #if 0
 245:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 246:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 247:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 248:armwave.c     **** 
 249:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 250:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 251:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 252:armwave.c     **** #endif
 253:armwave.c     **** 
 254:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 12;
 255:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 1351              		.loc 1 255 47 discriminator 3 view .LVU351
 1352 0608 4130D1E5 		ldrb	r3, [r1, #65]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1353              	@ armwave.c:256:             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 256:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 1354              		.loc 1 256 47 discriminator 3 view .LVU352
 1355 060c 4220D1E5 		ldrb	r2, [r1, #66]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1356              	@ armwave.c:240:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 240:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 1357              		.loc 1 240 21 discriminator 3 view .LVU353
 1358 0610 0C60D5E7 		ldrb	r6, [r5, ip]	@ zero_extendqisi2	@ _5, *_4
 1359              	.LVL79:
 254:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 1360              		.loc 1 254 13 is_stmt 1 discriminator 3 view .LVU354
 255:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 1361              		.loc 1 255 13 discriminator 3 view .LVU355
 1362              		.loc 1 256 13 discriminator 3 view .LVU356
 257:armwave.c     **** 
 258:armwave.c     ****             r = MIN(rr, 255);
 1363              		.loc 1 258 13 discriminator 3 view .LVU357
 259:armwave.c     ****             g = MIN(gg, 255);
 1364              		.loc 1 259 13 discriminator 3 view .LVU358
 260:armwave.c     ****             b = MIN(bb, 255);
 1365              		.loc 1 260 13 discriminator 3 view .LVU359
 261:armwave.c     **** 
 262:armwave.c     ****             // ensure 100% alpha channel, if it is used
 263:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1366              		.loc 1 263 13 discriminator 3 view .LVU360
 264:armwave.c     **** 
 265:armwave.c     ****             //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, val
 266:armwave.c     **** 
 267:armwave.c     ****             *out_buffer++ = word;
 1367              		.loc 1 267 13 discriminator 3 view .LVU361
 1368              	@ armwave.c:254:             rr = (g_armwave_state.ch1_color.r * value) >> 12;
 254:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 1369              		.loc 1 254 47 is_stmt 0 discriminator 3 view .LVU362
 1370 0614 4050D1E5 		ldrb	r5, [r1, #64]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1371              	.LVL80:
 1372              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1373              		.loc 1 238 58 discriminator 3 view .LVU363
 1374 0618 01C08CE2 		add	ip, ip, #1	@ xx, xx,
 1375              	.LVL81:
 1376              	@ armwave.c:255:             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 255:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 1377              		.loc 1 255 47 discriminator 3 view .LVU364
 1378 061c 830663E1 		smulbb	r3, r3, r6	@ tmp163, g_armwave_state.ch1_color.g, _5
 1379              	@ armwave.c:256:             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 256:armwave.c     **** 
 1380              		.loc 1 256 47 discriminator 3 view .LVU365
 1381 0620 820662E1 		smulbb	r2, r2, r6	@ tmp157, g_armwave_state.ch1_color.b, _5
 1382              	@ armwave.c:254:             rr = (g_armwave_state.ch1_color.r * value) >> 12;
 254:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 1383              		.loc 1 254 47 discriminator 3 view .LVU366
 1384 0624 850665E1 		smulbb	r5, r5, r6	@ tmp170, g_armwave_state.ch1_color.r, _5
 1385              	.LVL82:
 1386              	@ armwave.c:255:             gg = (g_armwave_state.ch1_color.g * value) >> 12;
 255:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 1387              		.loc 1 255 56 discriminator 3 view .LVU367
 1388 0628 2336A0E1 		lsr	r3, r3, #12	@ gg, tmp163,
 1389              	@ armwave.c:256:             bb = (g_armwave_state.ch1_color.b * value) >> 12;
 256:armwave.c     **** 
 1390              		.loc 1 256 56 discriminator 3 view .LVU368
 1391 062c 2226A0E1 		lsr	r2, r2, #12	@ bb, tmp157,
 1392              	@ armwave.c:263:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 263:armwave.c     **** 
 1393              		.loc 1 263 43 discriminator 3 view .LVU369
 1394 0630 0334A0E1 		lsl	r3, r3, #8	@ tmp165, gg,
 1395 0634 023883E1 		orr	r3, r3, r2, lsl #16	@ tmp166, tmp165, bb,
 1396              	@ armwave.c:263:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 263:armwave.c     **** 
 1397              		.loc 1 263 54 discriminator 3 view .LVU370
 1398 0638 253683E1 		orr	r3, r3, r5, lsr #12	@ tmp172, tmp166, tmp170,
 1399              	@ armwave.c:263:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 263:armwave.c     **** 
 1400              		.loc 1 263 18 discriminator 3 view .LVU371
 1401 063c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp172,
 1402              	@ armwave.c:267:             *out_buffer++ = word;
 1403              		.loc 1 267 27 discriminator 3 view .LVU372
 1404 0640 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_46, offset: 4294967292B]
 1405              	.LVL83:
 1406              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1407              		.loc 1 238 41 discriminator 3 view .LVU373
 1408 0644 343091E5 		ldr	r3, [r1, #52]	@ _28, g_armwave_state.target_width
 1409              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1410              		.loc 1 238 9 discriminator 3 view .LVU374
 1411 0648 0C0053E1 		cmp	r3, ip	@ _28, xx
 1412 064c ECFFFF8A 		bhi	.L83		@,
 1413 0650 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_105, g_armwave_state.target_height
 1414              	.LVL84:
 1415              	.L84:
 1416              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 237:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1417              		.loc 1 237 55 discriminator 2 view .LVU375
 1418 0654 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1419              	.LVL85:
 1420              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 237:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1421              		.loc 1 237 5 discriminator 2 view .LVU376
 1422 0658 02005EE1 		cmp	lr, r2	@ yy, prephitmp_105
 1423 065c E5FFFF3A 		bcc	.L82		@,
 237:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1424              		.loc 1 237 5 discriminator 2 view .LVU377
 1425 0660 7080BDE8 		pop	{r4, r5, r6, pc}	@
 1426              	.LVL86:
 1427              	.L80:
 221:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1428              		.loc 1 221 5 is_stmt 1 discriminator 1 view .LVU378
 1429 0664 10309FE5 		ldr	r3, .L91+4	@,
 1430 0668 DD20A0E3 		mov	r2, #221	@,
 1431 066c 0C109FE5 		ldr	r1, .L91+8	@,
 1432 0670 0C009FE5 		ldr	r0, .L91+12	@,
 1433              	.LVL87:
 221:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1434              		.loc 1 221 5 is_stmt 0 discriminator 1 view .LVU379
 1435 0674 FEFFFFEB 		bl	__assert_fail		@
 1436              	.LVL88:
 1437              	.L92:
 1438              		.align	2
 1439              	.L91:
 1440 0678 00000000 		.word	g_armwave_state
 1441 067c 18000000 		.word	.LANCHOR0+24
 1442 0680 00000000 		.word	.LC0
 1443 0684 90000000 		.word	.LC5
 1444              		.cfi_endproc
 1445              	.LFE63:
 1447              		.align	2
 1448              		.global	armwave_fill_pixbuf2
 1449              		.syntax unified
 1450              		.arm
 1451              		.fpu vfp
 1453              	armwave_fill_pixbuf2:
 1454              	.LVL89:
 1455              	.LFB64:
 268:armwave.c     ****         }
 269:armwave.c     ****     }
 270:armwave.c     **** #endif
 271:armwave.c     **** }
 272:armwave.c     **** 
 273:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 274:armwave.c     **** {
 1456              		.loc 1 274 1 is_stmt 1 view -0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 275:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1460              		.loc 1 275 5 view .LVU381
 276:armwave.c     ****     int rr, gg, bb;
 1461              		.loc 1 276 5 view .LVU382
 277:armwave.c     ****     uint8_t r, g, b;
 1462              		.loc 1 277 5 view .LVU383
 278:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1463              		.loc 1 278 5 view .LVU384
 1464              	@ armwave.c:278:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1465              		.loc 1 278 14 is_stmt 0 view .LVU385
 1466 0688 F4109FE5 		ldr	r1, .L110	@ tmp194,
 1467              	@ armwave.c:281:     assert(out_buffer != NULL);
 279:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 280:armwave.c     **** 
 281:armwave.c     ****     assert(out_buffer != NULL);
 1468              		.loc 1 281 5 view .LVU386
 1469 068c 000050E3 		cmp	r0, #0	@ out_buffer
 1470              	@ armwave.c:274: {
 274:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1471              		.loc 1 274 1 view .LVU387
 1472 0690 70402DE9 		push	{r4, r5, r6, lr}	@
 1473              		.cfi_def_cfa_offset 16
 1474              		.cfi_offset 4, -16
 1475              		.cfi_offset 5, -12
 1476              		.cfi_offset 6, -8
 1477              		.cfi_offset 14, -4
 1478              	@ armwave.c:278:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 278:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1479              		.loc 1 278 14 view .LVU388
 1480 0694 044091E5 		ldr	r4, [r1, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1481              	.LVL90:
 279:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1482              		.loc 1 279 5 is_stmt 1 view .LVU389
 1483              		.loc 1 281 5 view .LVU390
 1484 0698 3400000A 		beq	.L94		@,
 1485              	.LVL91:
 1486              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 282:armwave.c     **** 
 283:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 284:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1487              		.loc 1 284 37 is_stmt 0 view .LVU391
 1488 069c 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_112, g_armwave_state.target_height
 1489              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1490              		.loc 1 284 5 view .LVU392
 1491 06a0 000052E3 		cmp	r2, #0	@ prephitmp_112,
 1492 06a4 7080BD08 		popeq	{r4, r5, r6, pc}	@
 1493 06a8 343091E5 		ldr	r3, [r1, #52]	@ _4, g_armwave_state.target_width
 1494              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1495              		.loc 1 284 12 view .LVU393
 1496 06ac 00E0A0E3 		mov	lr, #0	@ yy,
 1497              	.LVL92:
 1498              	.L96:
 1499              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1500              		.loc 1 285 9 view .LVU394
 1501 06b0 000053E3 		cmp	r3, #0	@ _4,
 1502              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1503              		.loc 1 285 16 view .LVU395
 1504 06b4 00C0A013 		movne	ip, #0	@ xx,
 1505              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1506              		.loc 1 285 9 view .LVU396
 1507 06b8 1F00000A 		beq	.L103		@,
 1508              	.LVL93:
 1509              	.L102:
 286:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 287:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1510              		.loc 1 287 13 is_stmt 1 view .LVU397
 1511              	@ armwave.c:287:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1512              		.loc 1 287 21 is_stmt 0 view .LVU398
 1513 06bc 934E22E0 		mla	r2, r3, lr, r4	@ tmp159, _4, yy, base_ptr
 1514              	@ armwave.c:289:             rr = g_armwave_state.ch1_color.r * value;
 288:armwave.c     **** 
 289:armwave.c     ****             rr = g_armwave_state.ch1_color.r * value;
 1515              		.loc 1 289 46 view .LVU399
 1516 06c0 4030D1E5 		ldrb	r3, [r1, #64]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1517              	@ armwave.c:290:             gg = g_armwave_state.ch1_color.g * value;
 290:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1518              		.loc 1 290 46 view .LVU400
 1519 06c4 4150D1E5 		ldrb	r5, [r1, #65]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1520              	@ armwave.c:287:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 287:armwave.c     **** 
 1521              		.loc 1 287 21 view .LVU401
 1522 06c8 0C60D2E7 		ldrb	r6, [r2, ip]	@ zero_extendqisi2	@ _123, *_124
 1523              	.LVL94:
 289:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1524              		.loc 1 289 13 is_stmt 1 view .LVU402
 1525              		.loc 1 290 13 view .LVU403
 1526              	@ armwave.c:291:             bb = g_armwave_state.ch1_color.b * value;
 291:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1527              		.loc 1 291 46 is_stmt 0 view .LVU404
 1528 06cc 4220D1E5 		ldrb	r2, [r1, #66]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1529              	@ armwave.c:289:             rr = g_armwave_state.ch1_color.r * value;
 289:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1530              		.loc 1 289 46 view .LVU405
 1531 06d0 830663E1 		smulbb	r3, r3, r6	@ rr, g_armwave_state.ch1_color.r, _123
 1532              	@ armwave.c:290:             gg = g_armwave_state.ch1_color.g * value;
 290:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1533              		.loc 1 290 46 view .LVU406
 1534 06d4 850665E1 		smulbb	r5, r5, r6	@ gg, g_armwave_state.ch1_color.g, _123
 1535              	.LVL95:
 1536              		.loc 1 291 13 is_stmt 1 view .LVU407
 1537              	@ armwave.c:291:             bb = g_armwave_state.ch1_color.b * value;
 1538              		.loc 1 291 46 is_stmt 0 view .LVU408
 1539 06d8 820662E1 		smulbb	r2, r2, r6	@ bb, g_armwave_state.ch1_color.b, _123
 1540              	.LVL96:
 292:armwave.c     **** 
 293:armwave.c     ****             r = CLAMP(rr * overall_scale, 0, 255);
 1541              		.loc 1 293 13 is_stmt 1 view .LVU409
 1542              	@ armwave.c:293:             r = CLAMP(rr * overall_scale, 0, 255);
 1543              		.loc 1 293 17 is_stmt 0 view .LVU410
 1544 06dc 033183E0 		add	r3, r3, r3, lsl #2	@ tmp173, rr, rr,
 1545              	@ armwave.c:294:             g = CLAMP(gg * overall_scale, 0, 255);
 294:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1546              		.loc 1 294 17 view .LVU411
 1547 06e0 055185E0 		add	r5, r5, r5, lsl #2	@ tmp177, gg, gg,
 1548              	.LVL97:
 1549              	@ armwave.c:293:             r = CLAMP(rr * overall_scale, 0, 255);
 293:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1550              		.loc 1 293 17 view .LVU412
 1551 06e4 0331A0E1 		lsl	r3, r3, #2	@ _17, tmp173,
 1552              	@ armwave.c:295:             b = CLAMP(bb * overall_scale, 0, 255);
 295:armwave.c     ****             b = CLAMP(bb * overall_scale, 0, 255);
 1553              		.loc 1 295 17 view .LVU413
 1554 06e8 022182E0 		add	r2, r2, r2, lsl #2	@ tmp181, bb, bb,
 1555              	.LVL98:
 1556              	@ armwave.c:294:             g = CLAMP(gg * overall_scale, 0, 255);
 294:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1557              		.loc 1 294 17 view .LVU414
 1558 06ec 0561A0E1 		lsl	r6, r5, #2	@ tmp178, tmp177,
 1559              	.LVL99:
 1560              	@ armwave.c:293:             r = CLAMP(rr * overall_scale, 0, 255);
 293:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1561              		.loc 1 293 15 view .LVU415
 1562 06f0 FF0053E3 		cmp	r3, #255	@ _17,
 1563 06f4 FF30A0A3 		movge	r3, #255	@ _17,
 294:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1564              		.loc 1 294 13 is_stmt 1 view .LVU416
 1565              		.loc 1 295 13 view .LVU417
 1566              	@ armwave.c:294:             g = CLAMP(gg * overall_scale, 0, 255);
 294:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1567              		.loc 1 294 15 is_stmt 0 view .LVU418
 1568 06f8 FE0056E3 		cmp	r6, #254	@ tmp178,
 1569              	@ armwave.c:295:             b = CLAMP(bb * overall_scale, 0, 255);
 1570              		.loc 1 295 17 view .LVU419
 1571 06fc 0261A0E1 		lsl	r6, r2, #2	@ tmp182, tmp181,
 1572 0700 0555A0D1 		lslle	r5, r5, #10	@ prephitmp_99, tmp177,
 1573              	@ armwave.c:294:             g = CLAMP(gg * overall_scale, 0, 255);
 294:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1574              		.loc 1 294 15 view .LVU420
 1575 0704 FF5CA0C3 		movgt	r5, #65280	@ prephitmp_99,
 1576              	@ armwave.c:295:             b = CLAMP(bb * overall_scale, 0, 255);
 1577              		.loc 1 295 15 view .LVU421
 1578 0708 FE0056E3 		cmp	r6, #254	@ tmp182,
 1579 070c 0E0000CA 		bgt	.L99		@,
 296:armwave.c     **** 
 297:armwave.c     ****             // ensure 100% alpha channel, if it is used
 298:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1580              		.loc 1 298 13 is_stmt 1 view .LVU422
 1581              	.LVL100:
 299:armwave.c     **** 
 300:armwave.c     ****             *out_buffer++ = word;
 1582              		.loc 1 300 13 view .LVU423
 1583              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1584              		.loc 1 298 54 is_stmt 0 view .LVU424
 1585 0710 0229A0E1 		lsl	r2, r2, #18	@ tmp183, tmp181,
 1586 0714 FF2802E2 		and	r2, r2, #16711680	@ tmp184, tmp183,
 1587 0718 033082E1 		orr	r3, r2, r3	@ tmp185, tmp184, _17
 1588 071c 053083E1 		orr	r3, r3, r5	@ tmp186, tmp185, prephitmp_99
 1589              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1590              		.loc 1 298 18 view .LVU425
 1591 0720 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp186,
 1592              	@ armwave.c:300:             *out_buffer++ = word;
 1593              		.loc 1 300 27 view .LVU426
 1594 0724 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_60, offset: 4294967292B]
 1595              	.LVL101:
 1596              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1597              		.loc 1 285 41 view .LVU427
 1598 0728 343091E5 		ldr	r3, [r1, #52]	@ _4, g_armwave_state.target_width
 1599              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1600              		.loc 1 285 58 view .LVU428
 1601 072c 01C08CE2 		add	ip, ip, #1	@ xx, xx,
 1602              	.LVL102:
 1603              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1604              		.loc 1 285 9 view .LVU429
 1605 0730 03005CE1 		cmp	ip, r3	@ xx, _4
 1606 0734 E0FFFF3A 		bcc	.L102		@,
 1607              	.L101:
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1608              		.loc 1 285 9 view .LVU430
 1609 0738 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_112, g_armwave_state.target_height
 1610              	.LVL103:
 1611              	.L103:
 1612              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 284:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1613              		.loc 1 284 55 discriminator 2 view .LVU431
 1614 073c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1615              	.LVL104:
 1616              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 284:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1617              		.loc 1 284 5 discriminator 2 view .LVU432
 1618 0740 02005EE1 		cmp	lr, r2	@ yy, prephitmp_112
 1619 0744 D9FFFF3A 		bcc	.L96		@,
 284:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1620              		.loc 1 284 5 discriminator 2 view .LVU433
 1621 0748 7080BDE8 		pop	{r4, r5, r6, pc}	@
 1622              	.LVL105:
 1623              	.L99:
 298:armwave.c     **** 
 1624              		.loc 1 298 13 is_stmt 1 view .LVU434
 1625              		.loc 1 300 13 view .LVU435
 1626              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1627              		.loc 1 298 54 is_stmt 0 view .LVU436
 1628 074c 053083E1 		orr	r3, r3, r5	@ tmp190, _17, prephitmp_99
 1629              	.LVL106:
 1630              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1631              		.loc 1 285 58 view .LVU437
 1632 0750 01C08CE2 		add	ip, ip, #1	@ xx, xx,
 1633              	.LVL107:
 1634              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1635              		.loc 1 298 18 view .LVU438
 1636 0754 0338E0E1 		mvn	r3, r3, lsl #16	@ word, tmp190,
 1637 0758 2338E0E1 		mvn	r3, r3, lsr #16	@ word, word,
 1638              	@ armwave.c:300:             *out_buffer++ = word;
 1639              		.loc 1 300 27 view .LVU439
 1640 075c 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_90, offset: 4294967292B]
 1641              	.LVL108:
 1642              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1643              		.loc 1 285 41 view .LVU440
 1644 0760 343091E5 		ldr	r3, [r1, #52]	@ _4, g_armwave_state.target_width
 1645              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1646              		.loc 1 285 9 view .LVU441
 1647 0764 0C0053E1 		cmp	r3, ip	@ _4, xx
 1648 0768 D3FFFF8A 		bhi	.L102		@,
 1649 076c F1FFFFEA 		b	.L101		@
 1650              	.LVL109:
 1651              	.L94:
 281:armwave.c     **** 
 1652              		.loc 1 281 5 is_stmt 1 discriminator 1 view .LVU442
 1653 0770 10309FE5 		ldr	r3, .L110+4	@,
 1654 0774 10209FE5 		ldr	r2, .L110+8	@,
 1655 0778 10109FE5 		ldr	r1, .L110+12	@,
 1656 077c 10009FE5 		ldr	r0, .L110+16	@,
 1657              	.LVL110:
 281:armwave.c     **** 
 1658              		.loc 1 281 5 is_stmt 0 discriminator 1 view .LVU443
 1659 0780 FEFFFFEB 		bl	__assert_fail		@
 1660              	.LVL111:
 1661              	.L111:
 1662              		.align	2
 1663              	.L110:
 1664 0784 00000000 		.word	g_armwave_state
 1665 0788 2C000000 		.word	.LANCHOR0+44
 1666 078c 19010000 		.word	281
 1667 0790 00000000 		.word	.LC0
 1668 0794 90000000 		.word	.LC5
 1669              		.cfi_endproc
 1670              	.LFE64:
 1672              		.align	2
 1673              		.global	armwave_dump_ppm_debug
 1674              		.syntax unified
 1675              		.arm
 1676              		.fpu vfp
 1678              	armwave_dump_ppm_debug:
 1679              	.LVL112:
 1680              	.LFB65:
 301:armwave.c     ****         }
 302:armwave.c     ****     }
 303:armwave.c     **** }
 304:armwave.c     **** 
 305:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 306:armwave.c     **** {
 1681              		.loc 1 306 1 is_stmt 1 view -0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 0
 1684              		@ frame_needed = 0, uses_anonymous_args = 0
 307:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1685              		.loc 1 307 5 view .LVU445
 1686              	@ armwave.c:306: {
 306:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1687              		.loc 1 306 1 is_stmt 0 view .LVU446
 1688 0798 0130A0E1 		mov	r3, r1	@ fn, fn
 1689 079c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1690              		.cfi_def_cfa_offset 28
 1691              		.cfi_offset 4, -28
 1692              		.cfi_offset 5, -24
 1693              		.cfi_offset 6, -20
 1694              		.cfi_offset 7, -16
 1695              		.cfi_offset 8, -12
 1696              		.cfi_offset 9, -8
 1697              		.cfi_offset 14, -4
 1698 07a0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1699 07a4 0CD04DE2 		sub	sp, sp, #12	@,,
 1700              		.cfi_def_cfa_offset 40
 1701              	@ armwave.c:307:     FILE *fp = fopen(fn, "wb");
 1702              		.loc 1 307 16 view .LVU447
 1703 07a8 D8109FE5 		ldr	r1, .L124	@,
 1704              	.LVL113:
 1705              		.loc 1 307 16 view .LVU448
 1706 07ac 0300A0E1 		mov	r0, r3	@, fn
 1707              	.LVL114:
 1708              		.loc 1 307 16 view .LVU449
 1709 07b0 FEFFFFEB 		bl	fopen64		@
 1710              	.LVL115:
 1711              	@ armwave.c:314:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 308:armwave.c     ****     uint32_t data;
 309:armwave.c     ****     int xx, yy;
 310:armwave.c     **** 
 311:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 312:armwave.c     **** 
 313:armwave.c     ****     fputs("P3\n", fp);
 314:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1712              		.loc 1 314 5 view .LVU450
 1713 07b4 D0609FE5 		ldr	r6, .L124+4	@ tmp154,
 1714              	@ armwave.c:313:     fputs("P3\n", fp);
 313:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1715              		.loc 1 313 5 view .LVU451
 1716 07b8 0320A0E3 		mov	r2, #3	@,
 1717 07bc 0110A0E3 		mov	r1, #1	@,
 1718              	@ armwave.c:307:     FILE *fp = fopen(fn, "wb");
 307:armwave.c     ****     uint32_t data;
 1719              		.loc 1 307 16 view .LVU452
 1720 07c0 0070A0E1 		mov	r7, r0	@ fp,
 1721              	.LVL116:
 308:armwave.c     ****     uint32_t data;
 1722              		.loc 1 308 5 is_stmt 1 view .LVU453
 309:armwave.c     **** 
 1723              		.loc 1 309 5 view .LVU454
 313:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1724              		.loc 1 313 5 view .LVU455
 1725 07c4 0030A0E1 		mov	r3, r0	@, fp
 1726 07c8 C0009FE5 		ldr	r0, .L124+8	@,
 1727              	.LVL117:
 313:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1728              		.loc 1 313 5 is_stmt 0 view .LVU456
 1729 07cc FEFFFFEB 		bl	fwrite		@
 1730              	.LVL118:
 1731              		.loc 1 314 5 is_stmt 1 view .LVU457
 1732 07d0 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1733 07d4 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1734 07d8 B4109FE5 		ldr	r1, .L124+12	@,
 1735 07dc 0700A0E1 		mov	r0, r7	@, fp
 1736 07e0 FEFFFFEB 		bl	fprintf		@
 1737              	.LVL119:
 315:armwave.c     ****     fputs("255\n", fp);
 1738              		.loc 1 315 5 view .LVU458
 1739 07e4 0420A0E3 		mov	r2, #4	@,
 1740 07e8 0730A0E1 		mov	r3, r7	@, fp
 1741 07ec 0110A0E3 		mov	r1, #1	@,
 1742 07f0 A0009FE5 		ldr	r0, .L124+16	@,
 1743 07f4 FEFFFFEB 		bl	fwrite		@
 1744              	.LVL120:
 316:armwave.c     **** 
 317:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1745              		.loc 1 317 5 view .LVU459
 1746              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1747              		.loc 1 317 37 is_stmt 0 view .LVU460
 1748 07f8 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1749              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1750              		.loc 1 317 5 view .LVU461
 1751 07fc 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1752 0800 1800000A 		beq	.L113		@,
 1753 0804 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1754              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 319:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 320:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 321:armwave.c     **** 
 322:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1755              		.loc 1 322 13 view .LVU462
 1756 0808 8C909FE5 		ldr	r9, .L124+20	@ tmp156,
 1757              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1758              		.loc 1 317 12 view .LVU463
 1759 080c 0050A0E3 		mov	r5, #0	@ yy,
 1760              	.LVL121:
 1761              	.L114:
 1762              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1763              		.loc 1 318 9 view .LVU464
 1764 0810 000053E3 		cmp	r3, #0	@ _12,
 1765              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1766              		.loc 1 318 16 view .LVU465
 1767 0814 0040A013 		movne	r4, #0	@ xx,
 1768              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1769              		.loc 1 318 9 view .LVU466
 1770 0818 1600000A 		beq	.L123		@,
 1771              	.LVL122:
 1772              	.L115:
 319:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1773              		.loc 1 319 13 is_stmt 1 discriminator 3 view .LVU467
 1774              	@ armwave.c:319:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 319:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1775              		.loc 1 319 29 is_stmt 0 discriminator 3 view .LVU468
 1776 081c 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1777              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1778              		.loc 1 322 13 discriminator 3 view .LVU469
 1779 0820 0910A0E1 		mov	r1, r9	@, tmp156
 1780 0824 0700A0E1 		mov	r0, r7	@, fp
 1781              	@ armwave.c:319:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 319:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1782              		.loc 1 319 18 discriminator 3 view .LVU470
 1783 0828 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1784              	.LVL123:
 1785              		.loc 1 322 13 is_stmt 1 discriminator 3 view .LVU471
 1786              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1787              		.loc 1 318 58 is_stmt 0 discriminator 3 view .LVU472
 1788 082c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1789              	.LVL124:
 1790              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1791              		.loc 1 322 81 discriminator 3 view .LVU473
 1792 0830 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1793              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1794              		.loc 1 322 61 discriminator 3 view .LVU474
 1795 0834 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1796              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1797              		.loc 1 322 13 discriminator 3 view .LVU475
 1798 0838 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1799 083c 7330EFE6 		uxtb	r3, r3	@, tmp146
 1800 0840 00C08DE5 		str	ip, [sp]	@ tmp151,
 1801 0844 7220EFE6 		uxtb	r2, r2	@, data
 1802              	.LVL125:
 1803              		.loc 1 322 13 discriminator 3 view .LVU476
 1804 0848 FEFFFFEB 		bl	fprintf		@
 1805              	.LVL126:
 1806              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1807              		.loc 1 318 41 discriminator 3 view .LVU477
 1808 084c 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1809              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1810              		.loc 1 318 9 discriminator 3 view .LVU478
 1811 0850 040053E1 		cmp	r3, r4	@ _12, xx
 1812 0854 F0FFFF8A 		bhi	.L115		@,
 1813 0858 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1814              	.LVL127:
 1815              	.L116:
 1816              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1817              		.loc 1 317 55 discriminator 2 view .LVU479
 1818 085c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1819              	.LVL128:
 1820              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1821              		.loc 1 317 5 discriminator 2 view .LVU480
 1822 0860 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1823 0864 E9FFFF3A 		bcc	.L114		@,
 1824              	.LVL129:
 1825              	.L113:
 323:armwave.c     ****         }
 324:armwave.c     ****     }
 325:armwave.c     **** 
 326:armwave.c     ****     fclose(fp);
 1826              		.loc 1 326 5 is_stmt 1 view .LVU481
 1827 0868 0700A0E1 		mov	r0, r7	@, fp
 1828              	@ armwave.c:327: }
 327:armwave.c     **** }
 1829              		.loc 1 327 1 is_stmt 0 view .LVU482
 1830 086c 0CD08DE2 		add	sp, sp, #12	@,,
 1831              		.cfi_remember_state
 1832              		.cfi_def_cfa_offset 28
 1833              		@ sp needed	@
 1834 0870 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1835              		.cfi_restore 14
 1836              		.cfi_restore 9
 1837              		.cfi_restore 8
 1838              		.cfi_restore 7
 1839              		.cfi_restore 6
 1840              		.cfi_restore 5
 1841              		.cfi_restore 4
 1842              		.cfi_def_cfa_offset 0
 1843              	.LVL130:
 1844              	@ armwave.c:326:     fclose(fp);
 326:armwave.c     **** }
 1845              		.loc 1 326 5 view .LVU483
 1846 0874 FEFFFFEA 		b	fclose		@
 1847              	.LVL131:
 1848              	.L123:
 1849              		.cfi_restore_state
 1850              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1851              		.loc 1 317 55 view .LVU484
 1852 0878 015085E2 		add	r5, r5, #1	@ yy, yy,
 1853              	.LVL132:
 1854              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1855              		.loc 1 317 5 view .LVU485
 1856 087c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1857 0880 F5FFFF8A 		bhi	.L116		@,
 1858 0884 F7FFFFEA 		b	.L113		@
 1859              	.L125:
 1860              		.align	2
 1861              	.L124:
 1862 0888 A4000000 		.word	.LC6
 1863 088c 00000000 		.word	g_armwave_state
 1864 0890 A8000000 		.word	.LC7
 1865 0894 AC000000 		.word	.LC8
 1866 0898 B4000000 		.word	.LC9
 1867 089c BC000000 		.word	.LC10
 1868              		.cfi_endproc
 1869              	.LFE65:
 1871              		.align	2
 1872              		.global	armwave_test_init
 1873              		.syntax unified
 1874              		.arm
 1875              		.fpu vfp
 1877              	armwave_test_init:
 1878              	.LVL133:
 1879              	.LFB66:
 328:armwave.c     **** 
 329:armwave.c     **** void armwave_test_init(float mod)
 330:armwave.c     **** {
 1880              		.loc 1 330 1 is_stmt 1 view -0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 331:armwave.c     **** 	mod_depth = mod;
 1884              		.loc 1 331 2 view .LVU487
 1885              	@ armwave.c:331: 	mod_depth = mod;
 1886              		.loc 1 331 12 is_stmt 0 view .LVU488
 1887 08a0 8C309FE5 		ldr	r3, .L130+20	@ tmp124,
 1888              	@ armwave.c:330: {
 330:armwave.c     **** 	mod_depth = mod;
 1889              		.loc 1 330 1 view .LVU489
 1890 08a4 70402DE9 		push	{r4, r5, r6, lr}	@
 1891              		.cfi_def_cfa_offset 16
 1892              		.cfi_offset 4, -16
 1893              		.cfi_offset 5, -12
 1894              		.cfi_offset 6, -8
 1895              		.cfi_offset 14, -4
 1896 08a8 068B2DED 		vpush.64	{d8, d9, d10}	@
 1897              		.cfi_def_cfa_offset 40
 1898              		.cfi_offset 80, -40
 1899              		.cfi_offset 81, -36
 1900              		.cfi_offset 82, -32
 1901              		.cfi_offset 83, -28
 1902              		.cfi_offset 84, -24
 1903              		.cfi_offset 85, -20
 1904 08ac 84409FE5 		ldr	r4, .L130+24	@ ivtmp.98,
 1905              	.LBB6:
 1906              	.LBB7:
 1907              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1908              		.loc 1 84 32 view .LVU490
 1909 08b0 1EAA9FED 		vldr.32	s20, .L130+16	@ tmp130,
 1910              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1911              		.loc 1 84 26 view .LVU491
 1912 08b4 199B9FED 		vldr.64	d9, .L130	@ tmp139,
 1913              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1914              		.loc 1 84 49 view .LVU492
 1915 08b8 1A8B9FED 		vldr.64	d8, .L130+8	@ tmp133,
 1916              	.LBE7:
 1917              	.LBE6:
 1918              	@ armwave.c:331: 	mod_depth = mod;
 1919              		.loc 1 331 12 view .LVU493
 1920 08bc 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 332:armwave.c     **** 
 333:armwave.c     ****     test_create_waveform();
 1921              		.loc 1 333 5 is_stmt 1 view .LVU494
 1922 08c0 FEFFFFEB 		bl	test_create_waveform		@
 1923              	.LVL134:
 334:armwave.c     ****     test_create_gamma();
 1924              		.loc 1 334 5 view .LVU495
 1925              	.LBB9:
 1926              	.LBI6:
  78:armwave.c     **** {
 1927              		.loc 1 78 6 view .LVU496
  78:armwave.c     **** {
 1928              		.loc 1 78 6 is_stmt 0 view .LVU497
 1929 08c4 013084E2 		add	r3, r4, #1	@ _30, ivtmp.98,
 1930 08c8 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.98,
 1931 08cc 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1932              	.LVL135:
 1933              	.L127:
 1934              	.LBB8:
  84:armwave.c     ****     }
 1935              		.loc 1 84 9 is_stmt 1 view .LVU498
 1936              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1937              		.loc 1 84 32 is_stmt 0 view .LVU499
 1938 08d0 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.98
 1939              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1940              		.loc 1 84 26 view .LVU500
 1941 08d4 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1942              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1943              		.loc 1 84 32 view .LVU501
 1944 08d8 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1945 08dc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1946 08e0 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1947              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1948              		.loc 1 84 26 view .LVU502
 1949 08e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1950 08e8 FEFFFFEB 		bl	pow		@
 1951              	.LVL136:
 1952              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1953              		.loc 1 84 49 view .LVU503
 1954 08ec 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1955              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1956              		.loc 1 84 24 view .LVU504
 1957 08f0 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1958 08f4 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1959 08f8 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1960              	.LVL137:
 1961              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1962              		.loc 1 83 5 view .LVU505
 1963 08fc 060054E1 		cmp	r4, r6	@ ivtmp.98, _31
 1964 0900 F2FFFF1A 		bne	.L127		@,
 1965              	.LVL138:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1966              		.loc 1 83 5 view .LVU506
 1967              	.LBE8:
 1968              	.LBE9:
 335:armwave.c     **** 
 336:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1969              		.loc 1 336 5 is_stmt 1 view .LVU507
 1970 0904 BDFDFFEB 		bl	armwave_setup_render.constprop.0		@
 1971              	.LVL139:
 337:armwave.c     **** 
 338:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1972              		.loc 1 338 5 view .LVU508
 1973              	@ armwave.c:339: }
 339:armwave.c     **** }
 1974              		.loc 1 339 1 is_stmt 0 view .LVU509
 1975 0908 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1976              		.cfi_restore 84
 1977              		.cfi_restore 85
 1978              		.cfi_restore 82
 1979              		.cfi_restore 83
 1980              		.cfi_restore 80
 1981              		.cfi_restore 81
 1982              		.cfi_def_cfa_offset 16
 1983              	@ armwave.c:338:     printf("armwave version: %s\n", ARMWAVE_VER);
 338:armwave.c     **** }
 1984              		.loc 1 338 5 view .LVU510
 1985 090c 28109FE5 		ldr	r1, .L130+28	@,
 1986 0910 28009FE5 		ldr	r0, .L130+32	@,
 1987              	@ armwave.c:339: }
 1988              		.loc 1 339 1 view .LVU511
 1989 0914 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1990              		.cfi_restore 14
 1991              		.cfi_restore 6
 1992              		.cfi_restore 5
 1993              		.cfi_restore 4
 1994              		.cfi_def_cfa_offset 0
 1995              	@ armwave.c:338:     printf("armwave version: %s\n", ARMWAVE_VER);
 338:armwave.c     **** }
 1996              		.loc 1 338 5 view .LVU512
 1997 0918 FEFFFFEA 		b	printf		@
 1998              	.LVL140:
 1999              	.L131:
 2000 091c 0000A0E1 		.align	3
 2001              	.L130:
 2002 0920 000000C0 		.word	-1073741824
 2003 0924 CCCCEC3F 		.word	1072483532
 2004 0928 00000000 		.word	0
 2005 092c 00E06F40 		.word	1081073664
 2006 0930 00007F43 		.word	1132396544
 2007 0934 00000000 		.word	.LANCHOR1
 2008 0938 FFFFFFFF 		.word	gamma_table-1
 2009 093c CC000000 		.word	.LC11
 2010 0940 D4000000 		.word	.LC12
 2011              		.cfi_endproc
 2012              	.LFE66:
 2014              		.global	__aeabi_uidiv
 2015              		.align	2
 2016              		.global	armwave_test_generate
 2017              		.syntax unified
 2018              		.arm
 2019              		.fpu vfp
 2021              	armwave_test_generate:
 2022              	.LFB67:
 340:armwave.c     **** 
 341:armwave.c     **** void armwave_test_generate()
 342:armwave.c     **** {
 2023              		.loc 1 342 1 is_stmt 1 view -0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 8
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 343:armwave.c     **** 	uint32_t yy;
 2027              		.loc 1 343 2 view .LVU514
 344:armwave.c     **** 
 345:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2028              		.loc 1 345 5 view .LVU515
 2029              	@ armwave.c:342: {
 342:armwave.c     **** 	uint32_t yy;
 2030              		.loc 1 342 1 is_stmt 0 view .LVU516
 2031 0944 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2032              		.cfi_def_cfa_offset 36
 2033              		.cfi_offset 4, -36
 2034              		.cfi_offset 5, -32
 2035              		.cfi_offset 6, -28
 2036              		.cfi_offset 7, -24
 2037              		.cfi_offset 8, -20
 2038              		.cfi_offset 9, -16
 2039              		.cfi_offset 10, -12
 2040              		.cfi_offset 11, -8
 2041              		.cfi_offset 14, -4
 2042              	@ armwave.c:345:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2043              		.loc 1 345 5 view .LVU517
 2044 0948 0010A0E3 		mov	r1, #0	@,
 2045 094c 44419FE5 		ldr	r4, .L150	@ tmp269,
 2046              	@ armwave.c:342: {
 342:armwave.c     **** 	uint32_t yy;
 2047              		.loc 1 342 1 view .LVU518
 2048 0950 0CD04DE2 		sub	sp, sp, #12	@,,
 2049              		.cfi_def_cfa_offset 48
 2050              	@ armwave.c:345:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2051              		.loc 1 345 5 view .LVU519
 2052 0954 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 2053 0958 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2054 095c FEFFFFEB 		bl	memset		@
 2055              	.LVL141:
 346:armwave.c     **** 
 347:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2056              		.loc 1 347 5 is_stmt 1 view .LVU520
 2057              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2058              		.loc 1 347 45 is_stmt 0 view .LVU521
 2059 0960 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2060              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2061              		.loc 1 347 5 view .LVU522
 2062 0964 020B55E3 		cmp	r5, #2048	@ _72,
 2063 0968 4800008A 		bhi	.L132		@,
 2064 096c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2065              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2066              		.loc 1 347 12 view .LVU523
 2067 0970 00A0A0E3 		mov	r10, #0	@ yy,
 2068              	.LVL142:
 2069              	.L138:
 348:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2070              		.loc 1 348 9 is_stmt 1 discriminator 3 view .LVU524
 2071 0974 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 2072              	.LBB12:
 2073              	.LBB13:
 2074              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2075              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU525
 2076 0978 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2077              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2078              		.loc 1 106 5 discriminator 3 view .LVU526
 2079 097c 000056E3 		cmp	r6, #0	@ prephitmp_171,
 2080              	.LBE13:
 2081              	.LBE12:
 2082              	@ armwave.c:348:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2083              		.loc 1 348 9 discriminator 3 view .LVU527
 2084 0980 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 2085              	.LVL143:
 2086              	.LBB15:
 2087              	.LBI12:
  95:armwave.c     **** {
 2088              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU528
 2089              	.LBB14:
  97:armwave.c     ****     uint32_t value, word;
 2090              		.loc 1 97 5 discriminator 3 view .LVU529
  98:armwave.c     ****     uint8_t *wave_base;
 2091              		.loc 1 98 5 discriminator 3 view .LVU530
  99:armwave.c     ****     uint8_t *write_buffer_base;
 2092              		.loc 1 99 5 discriminator 3 view .LVU531
 100:armwave.c     ****     uint8_t *write_buffer;
 2093              		.loc 1 100 5 discriminator 3 view .LVU532
 101:armwave.c     ****     
 2094              		.loc 1 101 5 discriminator 3 view .LVU533
 103:armwave.c     **** 
 2095              		.loc 1 103 5 discriminator 3 view .LVU534
 2096              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2097              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU535
 2098 0984 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 2099              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2100              		.loc 1 103 40 discriminator 3 view .LVU536
 2101 0988 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2102              	.LVL144:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2103              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU537
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2104              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU538
 2105 098c 3900000A 		beq	.L134		@,
 2106              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2107              		.loc 1 106 11 view .LVU539
 2108 0990 0080A0E3 		mov	r8, #0	@ w,
 2109 0994 043043E2 		sub	r3, r3, #4	@ _77, _3,
 2110              	.LVL145:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2111              		.loc 1 106 11 view .LVU540
 2112 0998 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 2113              	.LVL146:
 2114              	.L137:
 107:armwave.c     **** 
 2115              		.loc 1 107 9 is_stmt 1 view .LVU541
 2116              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2117              		.loc 1 107 64 is_stmt 0 view .LVU542
 2118 099c 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2119              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2120              		.loc 1 117 9 view .LVU543
 2121 09a0 000059E3 		cmp	r9, #0	@ _4,
 2122              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2123              		.loc 1 107 36 view .LVU544
 2124 09a4 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2125              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2126              		.loc 1 107 64 view .LVU545
 2127 09a8 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 2128              	.LVL147:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2129              		.loc 1 117 9 is_stmt 1 view .LVU546
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2130              		.loc 1 117 9 is_stmt 0 view .LVU547
 2131 09ac 2D00000A 		beq	.L135		@,
 2132 09b0 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 2133 09b4 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 2134              	.LVL148:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2135              		.loc 1 117 9 view .LVU548
 2136 09b8 03E08EE0 		add	lr, lr, r3	@ ivtmp.104, _16, tmp205
 2137              	.LVL149:
 2138              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2139              		.loc 1 117 16 view .LVU549
 2140 09bc 0010A0E3 		mov	r1, #0	@ yy,
 2141              	.LVL150:
 2142              	.L136:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2143              		.loc 1 132 13 is_stmt 1 view .LVU550
 2144              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2145              		.loc 1 132 18 is_stmt 0 view .LVU551
 2146 09c0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 2147              	.LVL151:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2148              		.loc 1 136 13 is_stmt 1 view .LVU552
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2149              		.loc 1 137 14 view .LVU553
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2150              		.loc 1 138 14 view .LVU554
 139:armwave.c     ****             	word >>= 8;
 2151              		.loc 1 139 14 view .LVU555
 2152              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2153              		.loc 1 137 42 is_stmt 0 view .LVU556
 2154 09c4 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2155              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2156              		.loc 1 138 60 view .LVU557
 2157 09c8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2158              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2159              		.loc 1 137 34 view .LVU558
 2160 09cc 73C0EFE6 		uxtb	ip, r3	@ word, word
 2161              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2162              		.loc 1 140 19 view .LVU559
 2163 09d0 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 2164              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2165              		.loc 1 139 44 view .LVU560
 2166 09d4 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 2167              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2168              		.loc 1 137 34 view .LVU561
 2169 09d8 7550EFE6 		uxtb	r5, r5	@ word, word
 2170              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2171              		.loc 1 139 44 view .LVU562
 2172 09dc 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2173              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2174              		.loc 1 138 60 view .LVU563
 2175 09e0 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2176              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2177              		.loc 1 140 19 view .LVU564
 2178 09e4 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2179              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2180              		.loc 1 139 44 view .LVU565
 2181 09e8 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2182              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2183              		.loc 1 137 34 view .LVU566
 2184 09ec 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2185              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2186              		.loc 1 140 19 view .LVU567
 2187 09f0 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2188              	.LVL152:
 2189              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2190              		.loc 1 139 44 view .LVU568
 2191 09f4 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2192 09f8 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2193              	.LVL153:
 140:armwave.c     ****     		}
 2194              		.loc 1 140 14 is_stmt 1 view .LVU569
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2195              		.loc 1 137 14 view .LVU570
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2196              		.loc 1 138 14 view .LVU571
 139:armwave.c     ****             	word >>= 8;
 2197              		.loc 1 139 14 view .LVU572
 2198              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2199              		.loc 1 137 42 is_stmt 0 view .LVU573
 2200 09fc 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2201              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2202              		.loc 1 138 60 view .LVU574
 2203 0a00 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2204              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2205              		.loc 1 139 44 view .LVU575
 2206 0a04 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2207              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2208              		.loc 1 138 60 view .LVU576
 2209 0a08 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2210              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2211              		.loc 1 139 44 view .LVU577
 2212 0a0c 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2213              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2214              		.loc 1 138 60 view .LVU578
 2215 0a10 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2216              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2217              		.loc 1 117 37 view .LVU579
 2218 0a14 041081E2 		add	r1, r1, #4	@ yy, yy,
 2219              	.LVL154:
 2220              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2221              		.loc 1 139 44 view .LVU580
 2222 0a18 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2223              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2224              		.loc 1 117 9 view .LVU581
 2225 0a1c 010059E1 		cmp	r9, r1	@ _4, yy
 2226              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2227              		.loc 1 139 44 view .LVU582
 2228 0a20 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2229 0a24 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2230              	.LVL155:
 140:armwave.c     ****     		}
 2231              		.loc 1 140 14 is_stmt 1 view .LVU583
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2232              		.loc 1 137 14 view .LVU584
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2233              		.loc 1 138 14 view .LVU585
 139:armwave.c     ****             	word >>= 8;
 2234              		.loc 1 139 14 view .LVU586
 2235              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2236              		.loc 1 137 42 is_stmt 0 view .LVU587
 2237 0a28 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2238              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2239              		.loc 1 138 60 view .LVU588
 2240 0a2c 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2241              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2242              		.loc 1 139 44 view .LVU589
 2243 0a30 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2244 0a34 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2245 0a38 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2246 0a3c 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2247 0a40 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 140:armwave.c     ****     		}
 2248              		.loc 1 140 14 is_stmt 1 view .LVU590
 2249              	.LVL156:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2250              		.loc 1 137 14 view .LVU591
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2251              		.loc 1 138 14 view .LVU592
 139:armwave.c     ****             	word >>= 8;
 2252              		.loc 1 139 14 view .LVU593
 2253              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2254              		.loc 1 137 42 is_stmt 0 view .LVU594
 2255 0a44 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2256              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2257              		.loc 1 138 60 view .LVU595
 2258 0a48 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2259              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2260              		.loc 1 139 44 view .LVU596
 2261 0a4c 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2262 0a50 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2263 0a54 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2264 0a58 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2265 0a5c 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 140:armwave.c     ****     		}
 2266              		.loc 1 140 14 is_stmt 1 view .LVU597
 2267              	.LVL157:
 2268              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2269              		.loc 1 117 9 is_stmt 0 view .LVU598
 2270 0a60 D6FFFF8A 		bhi	.L136		@,
 2271 0a64 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2272              	.LVL158:
 2273              	.L135:
 2274              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2275              		.loc 1 106 44 view .LVU599
 2276 0a68 018088E2 		add	r8, r8, #1	@ w, w,
 2277              	.LVL159:
 2278              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2279              		.loc 1 106 5 view .LVU600
 2280 0a6c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2281 0a70 C9FFFF3A 		bcc	.L137		@,
 2282 0a74 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2283              	.LVL160:
 2284              	.L134:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2285              		.loc 1 106 5 view .LVU601
 2286              	.LBE14:
 2287              	.LBE15:
 2288              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2289              		.loc 1 347 28 discriminator 3 view .LVU602
 2290 0a78 0510A0E1 		mov	r1, r5	@, _72
 2291 0a7c 020BA0E3 		mov	r0, #2048	@,
 2292              	.LVL161:
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2293              		.loc 1 347 28 discriminator 3 view .LVU603
 2294 0a80 FEFFFFEB 		bl	__aeabi_uidiv		@
 2295              	.LVL162:
 2296              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2297              		.loc 1 347 63 discriminator 3 view .LVU604
 2298 0a84 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2299              	.LVL163:
 2300              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2301              		.loc 1 347 5 discriminator 3 view .LVU605
 2302 0a88 0A0050E1 		cmp	r0, r10	@, yy
 2303 0a8c B8FFFF8A 		bhi	.L138		@,
 2304              	.LVL164:
 2305              	.L132:
 2306              	@ armwave.c:350: }
 349:armwave.c     ****     }
 350:armwave.c     **** }
 2307              		.loc 1 350 1 view .LVU606
 2308 0a90 0CD08DE2 		add	sp, sp, #12	@,,
 2309              		.cfi_def_cfa_offset 36
 2310              		@ sp needed	@
 2311 0a94 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2312              	.L151:
 2313              		.align	2
 2314              	.L150:
 2315 0a98 00000000 		.word	g_armwave_state
 2316              		.cfi_endproc
 2317              	.LFE67:
 2319              		.align	2
 2320              		.global	armwave_test_get_buffer
 2321              		.syntax unified
 2322              		.arm
 2323              		.fpu vfp
 2325              	armwave_test_get_buffer:
 2326              	.LFB68:
 351:armwave.c     **** 
 352:armwave.c     **** PyObject *armwave_test_get_buffer()
 353:armwave.c     **** {
 2327              		.loc 1 353 1 is_stmt 1 view -0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 0
 2330              		@ frame_needed = 0, uses_anonymous_args = 0
 354:armwave.c     ****     PyObject *mv;
 2331              		.loc 1 354 5 view .LVU608
 355:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2332              		.loc 1 355 5 view .LVU609
 2333              	@ armwave.c:353: {
 353:armwave.c     ****     PyObject *mv;
 2334              		.loc 1 353 1 is_stmt 0 view .LVU610
 2335 0a9c 30402DE9 		push	{r4, r5, lr}	@
 2336              		.cfi_def_cfa_offset 12
 2337              		.cfi_offset 4, -12
 2338              		.cfi_offset 5, -8
 2339              		.cfi_offset 14, -4
 2340              	@ armwave.c:355:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2341              		.loc 1 355 22 view .LVU611
 2342 0aa0 2C00A0E3 		mov	r0, #44	@,
 2343              	@ armwave.c:353: {
 353:armwave.c     ****     PyObject *mv;
 2344              		.loc 1 353 1 view .LVU612
 2345 0aa4 0CD04DE2 		sub	sp, sp, #12	@,,
 2346              		.cfi_def_cfa_offset 24
 2347              	@ armwave.c:355:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2348              		.loc 1 355 22 view .LVU613
 2349 0aa8 FEFFFFEB 		bl	malloc		@
 2350              	.LVL165:
 2351              	@ armwave.c:357:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 356:armwave.c     ****     
 357:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2352              		.loc 1 357 5 view .LVU614
 2353 0aac 3C409FE5 		ldr	r4, .L154	@ tmp118,
 2354              	@ armwave.c:355:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 355:armwave.c     ****     
 2355              		.loc 1 355 22 view .LVU615
 2356 0ab0 0050A0E1 		mov	r5, r0	@ tmp117,
 2357              	.LVL166:
 2358              		.loc 1 357 5 is_stmt 1 view .LVU616
 2359 0ab4 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2360              	.LVL167:
 2361              		.loc 1 357 5 is_stmt 0 view .LVU617
 2362 0ab8 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2363              	.LVL168:
 358:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2364              		.loc 1 358 5 is_stmt 1 view .LVU618
 2365              	@ armwave.c:358:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2366              		.loc 1 358 79 is_stmt 0 view .LVU619
 2367 0abc 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2368              	@ armwave.c:358:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2369              		.loc 1 358 5 view .LVU620
 2370 0ac0 08C0A0E3 		mov	ip, #8	@ tmp125,
 2371 0ac4 0110A0E3 		mov	r1, #1	@ tmp126,
 2372 0ac8 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2373 0acc 02108DE8 		stm	sp, {r1, ip}	@,,
 2374 0ad0 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2375 0ad4 0500A0E1 		mov	r0, r5	@, tmp117
 2376 0ad8 0010A0E3 		mov	r1, #0	@,
 2377 0adc FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2378              	.LVL169:
 359:armwave.c     **** 
 360:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2379              		.loc 1 360 2 is_stmt 1 view .LVU621
 2380              	@ armwave.c:360: 	mv = PyMemoryView_FromBuffer(buf);
 2381              		.loc 1 360 7 is_stmt 0 view .LVU622
 2382 0ae0 0500A0E1 		mov	r0, r5	@, tmp117
 2383              	@ armwave.c:361: }
 361:armwave.c     **** }
 2384              		.loc 1 361 1 view .LVU623
 2385 0ae4 0CD08DE2 		add	sp, sp, #12	@,,
 2386              		.cfi_def_cfa_offset 12
 2387              		@ sp needed	@
 2388 0ae8 3040BDE8 		pop	{r4, r5, lr}	@
 2389              		.cfi_restore 14
 2390              		.cfi_restore 5
 2391              		.cfi_restore 4
 2392              		.cfi_def_cfa_offset 0
 2393              	.LVL170:
 2394              	@ armwave.c:360: 	mv = PyMemoryView_FromBuffer(buf);
 360:armwave.c     **** }
 2395              		.loc 1 360 7 view .LVU624
 2396 0aec FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2397              	.LVL171:
 2398              	.L155:
 360:armwave.c     **** }
 2399              		.loc 1 360 7 view .LVU625
 2400              		.align	2
 2401              	.L154:
 2402 0af0 00000000 		.word	g_armwave_state
 2403              		.cfi_endproc
 2404              	.LFE68:
 2406              		.align	2
 2407              		.global	armwave_test_dump_buffer_to_ppm
 2408              		.syntax unified
 2409              		.arm
 2410              		.fpu vfp
 2412              	armwave_test_dump_buffer_to_ppm:
 2413              	.LVL172:
 2414              	.LFB69:
 362:armwave.c     **** 
 363:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 364:armwave.c     **** {
 2415              		.loc 1 364 1 is_stmt 1 view -0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              		@ link register save eliminated.
 365:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2420              		.loc 1 365 2 view .LVU627
 2421 0af4 08309FE5 		ldr	r3, .L157	@ tmp112,
 2422 0af8 0010A0E1 		mov	r1, r0	@, fn
 2423 0afc 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2424              	.LVL173:
 2425              		.loc 1 365 2 is_stmt 0 view .LVU628
 2426 0b00 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2427              	.LVL174:
 2428              	.L158:
 2429              		.loc 1 365 2 view .LVU629
 2430              		.align	2
 2431              	.L157:
 2432 0b04 00000000 		.word	g_armwave_state
 2433              		.cfi_endproc
 2434              	.LFE69:
 2436              		.align	2
 2437              		.global	armwave_cleanup
 2438              		.syntax unified
 2439              		.arm
 2440              		.fpu vfp
 2442              	armwave_cleanup:
 2443              	.LFB70:
 366:armwave.c     **** }
 367:armwave.c     **** 
 368:armwave.c     **** void armwave_cleanup()
 369:armwave.c     **** {
 2444              		.loc 1 369 1 is_stmt 1 view -0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 370:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2448              		.loc 1 370 2 view .LVU631
 2449              	@ armwave.c:369: {
 369:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2450              		.loc 1 369 1 is_stmt 0 view .LVU632
 2451 0b08 10402DE9 		push	{r4, lr}	@
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 4, -8
 2454              		.cfi_offset 14, -4
 2455              	@ armwave.c:370: 	free(g_armwave_state.out_pixbuf);
 2456              		.loc 1 370 22 view .LVU633
 2457 0b0c 28409FE5 		ldr	r4, .L161	@ tmp113,
 2458              	@ armwave.c:370: 	free(g_armwave_state.out_pixbuf);
 2459              		.loc 1 370 2 view .LVU634
 2460 0b10 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2461 0b14 FEFFFFEB 		bl	free		@
 2462              	.LVL175:
 371:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2463              		.loc 1 371 2 is_stmt 1 view .LVU635
 2464 0b18 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2465 0b1c FEFFFFEB 		bl	free		@
 2466              	.LVL176:
 372:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2467              		.loc 1 372 2 view .LVU636
 2468 0b20 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.xcoord_to_xpixel
 2469 0b24 FEFFFFEB 		bl	free		@
 2470              	.LVL177:
 373:armwave.c     **** 
 374:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2471              		.loc 1 374 2 view .LVU637
 2472              	@ armwave.c:374: 	g_armwave_state.out_pixbuf = NULL;
 2473              		.loc 1 374 29 is_stmt 0 view .LVU638
 2474 0b28 0030A0E3 		mov	r3, #0	@ tmp120,
 2475 0b2c 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 375:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2476              		.loc 1 375 2 is_stmt 1 view .LVU639
 2477              	@ armwave.c:375: 	g_armwave_state.ch1_buffer = NULL;
 2478              		.loc 1 375 29 is_stmt 0 view .LVU640
 2479 0b30 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 376:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2480              		.loc 1 376 2 is_stmt 1 view .LVU641
 2481              	@ armwave.c:376: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2482              		.loc 1 376 35 is_stmt 0 view .LVU642
 2483 0b34 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2484              	@ armwave.c:377: }
 377:armwave.c     **** }
 2485              		.loc 1 377 1 view .LVU643
 2486 0b38 1080BDE8 		pop	{r4, pc}	@
 2487              	.L162:
 2488              		.align	2
 2489              	.L161:
 2490 0b3c 00000000 		.word	g_armwave_state
 2491              		.cfi_endproc
 2492              	.LFE70:
 2494              		.section	.text.startup,"ax",%progbits
 2495              		.align	2
 2496              		.global	main
 2497              		.syntax unified
 2498              		.arm
 2499              		.fpu vfp
 2501              	main:
 2502              	.LVL178:
 2503              	.LFB71:
 378:armwave.c     **** 
 379:armwave.c     **** int main(int argc, char *argv[])
 380:armwave.c     **** {
 2504              		.loc 1 380 1 is_stmt 1 view -0
 2505              		.cfi_startproc
 2506              		@ args = 0, pretend = 0, frame = 8
 2507              		@ frame_needed = 0, uses_anonymous_args = 0
 381:armwave.c     ****     uint32_t *out_buffer;
 2508              		.loc 1 381 5 view .LVU645
 382:armwave.c     ****     uint32_t xx, yy, n;
 2509              		.loc 1 382 5 view .LVU646
 383:armwave.c     **** 
 384:armwave.c     ****     //printf("Starting armwave...\n");
 385:armwave.c     ****     armwave_init();
 2510              		.loc 1 385 5 view .LVU647
 2511              	.LBB20:
 2512              	.LBI20:
 148:armwave.c     **** {
 2513              		.loc 1 148 6 view .LVU648
 2514              	.LBB21:
 150:armwave.c     **** }
 2515              		.loc 1 150 5 view .LVU649
 2516              	.LBE21:
 2517              	.LBE20:
 2518              	@ armwave.c:380: {
 380:armwave.c     ****     uint32_t *out_buffer;
 2519              		.loc 1 380 1 is_stmt 0 view .LVU650
 2520 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2521              		.cfi_def_cfa_offset 36
 2522              		.cfi_offset 4, -36
 2523              		.cfi_offset 5, -32
 2524              		.cfi_offset 6, -28
 2525              		.cfi_offset 7, -24
 2526              		.cfi_offset 8, -20
 2527              		.cfi_offset 9, -16
 2528              		.cfi_offset 10, -12
 2529              		.cfi_offset 11, -8
 2530              		.cfi_offset 14, -4
 2531 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2532              		.cfi_def_cfa_offset 48
 2533              	.LBB25:
 2534              	.LBB22:
 2535              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2536              		.loc 1 150 27 view .LVU651
 2537 0008 68919FE5 		ldr	r9, .L183	@ tmp267,
 2538              	.LBE22:
 2539              	.LBE25:
 2540              	@ armwave.c:394:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 386:armwave.c     **** 
 387:armwave.c     ****     //printf("Creating test waveform...\n");
 388:armwave.c     ****     test_create_waveform();
 389:armwave.c     **** 
 390:armwave.c     ****     //printf("Creating gamma LUT...\n");
 391:armwave.c     ****     test_create_gamma();
 392:armwave.c     **** 
 393:armwave.c     ****     //printf("Setting up render...\n");
 394:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2541              		.loc 1 394 5 view .LVU652
 2542 000c 68219FE5 		ldr	r2, .L183+4	@ ivtmp_191,
 2543              	.LBB26:
 2544              	.LBB23:
 2545              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2546              		.loc 1 150 27 view .LVU653
 2547 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2548              	.LBE23:
 2549              	.LBE26:
 2550              	@ armwave.c:394:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2551              		.loc 1 394 5 view .LVU654
 2552 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2553              	.LBB27:
 2554              	.LBB24:
 2555              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2556              		.loc 1 150 27 view .LVU655
 2557 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2558              	.LBE24:
 2559              	.LBE27:
 388:armwave.c     **** 
 2560              		.loc 1 388 5 is_stmt 1 view .LVU656
 2561 001c FEFFFFEB 		bl	test_create_waveform		@
 2562              	.LVL179:
 391:armwave.c     **** 
 2563              		.loc 1 391 5 view .LVU657
 2564 0020 FEFFFFEB 		bl	test_create_gamma		@
 2565              	.LVL180:
 2566              		.loc 1 394 5 view .LVU658
 2567 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2568              	.LVL181:
 395:armwave.c     **** 
 396:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 397:armwave.c     **** 
 398:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2569              		.loc 1 398 5 view .LVU659
 2570              		.loc 1 398 5 is_stmt 0 view .LVU660
 2571 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2572              	.LVL182:
 2573              	.L164:
 2574              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2575              		.loc 1 399 9 view .LVU661
 2576 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2577 0030 4900008A 		bhi	.L172		@,
 2578 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2579              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2580              		.loc 1 399 16 view .LVU662
 2581 0038 0080A0E3 		mov	r8, #0	@ yy,
 2582 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2583              	.LVL183:
 2584              	.L169:
 400:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 401:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2585              		.loc 1 401 13 is_stmt 1 discriminator 3 view .LVU663
 2586 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2587              	.LBB28:
 2588              	.LBB29:
 2589              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2590              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU664
 2591 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2592              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2593              		.loc 1 106 5 discriminator 3 view .LVU665
 2594 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2595              	.LBE29:
 2596              	.LBE28:
 2597              	@ armwave.c:401:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2598              		.loc 1 401 13 discriminator 3 view .LVU666
 2599 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2600              	.LVL184:
 2601              	.LBB31:
 2602              	.LBI28:
  95:armwave.c     **** {
 2603              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU667
 2604              	.LBB30:
  97:armwave.c     ****     uint32_t value, word;
 2605              		.loc 1 97 5 discriminator 3 view .LVU668
  98:armwave.c     ****     uint8_t *wave_base;
 2606              		.loc 1 98 5 discriminator 3 view .LVU669
  99:armwave.c     ****     uint8_t *write_buffer_base;
 2607              		.loc 1 99 5 discriminator 3 view .LVU670
 100:armwave.c     ****     uint8_t *write_buffer;
 2608              		.loc 1 100 5 discriminator 3 view .LVU671
 101:armwave.c     ****     
 2609              		.loc 1 101 5 discriminator 3 view .LVU672
 103:armwave.c     **** 
 2610              		.loc 1 103 5 discriminator 3 view .LVU673
 2611              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2612              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU674
 2613 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2614              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2615              		.loc 1 103 40 discriminator 3 view .LVU675
 2616 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2617              	.LVL185:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2618              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU676
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2619              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU677
 2620 0058 3900000A 		beq	.L165		@,
 2621              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2622              		.loc 1 106 11 view .LVU678
 2623 005c 0070A0E3 		mov	r7, #0	@ w,
 2624 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2625              	.LVL186:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2626              		.loc 1 106 11 view .LVU679
 2627 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2628              	.LVL187:
 2629              	.L168:
 107:armwave.c     **** 
 2630              		.loc 1 107 9 is_stmt 1 view .LVU680
 2631              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2632              		.loc 1 107 64 is_stmt 0 view .LVU681
 2633 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2634              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2635              		.loc 1 117 9 view .LVU682
 2636 006c 00005AE3 		cmp	r10, #0	@ _2,
 2637              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2638              		.loc 1 107 36 view .LVU683
 2639 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2640              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2641              		.loc 1 107 64 view .LVU684
 2642 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2643              	.LVL188:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2644              		.loc 1 117 9 is_stmt 1 view .LVU685
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2645              		.loc 1 117 9 is_stmt 0 view .LVU686
 2646 0078 2D00000A 		beq	.L166		@,
 2647 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2648 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2649              	.LVL189:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2650              		.loc 1 117 9 view .LVU687
 2651 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.117, _20, tmp202
 2652              	.LVL190:
 2653              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2654              		.loc 1 117 16 view .LVU688
 2655 0088 0010A0E3 		mov	r1, #0	@ yy,
 2656              	.LVL191:
 2657              	.L167:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2658              		.loc 1 132 13 is_stmt 1 view .LVU689
 2659              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2660              		.loc 1 132 18 is_stmt 0 view .LVU690
 2661 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2662              	.LVL192:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2663              		.loc 1 136 13 is_stmt 1 view .LVU691
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2664              		.loc 1 137 14 view .LVU692
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2665              		.loc 1 138 14 view .LVU693
 139:armwave.c     ****             	word >>= 8;
 2666              		.loc 1 139 14 view .LVU694
 2667              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2668              		.loc 1 137 42 is_stmt 0 view .LVU695
 2669 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2670              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2671              		.loc 1 138 60 view .LVU696
 2672 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2673              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2674              		.loc 1 137 34 view .LVU697
 2675 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2676              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2677              		.loc 1 140 19 view .LVU698
 2678 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2679              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2680              		.loc 1 139 44 view .LVU699
 2681 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2682              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2683              		.loc 1 137 34 view .LVU700
 2684 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2685              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2686              		.loc 1 139 44 view .LVU701
 2687 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2688              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2689              		.loc 1 138 60 view .LVU702
 2690 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2691              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2692              		.loc 1 140 19 view .LVU703
 2693 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2694              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2695              		.loc 1 139 44 view .LVU704
 2696 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2697              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2698              		.loc 1 137 34 view .LVU705
 2699 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2700              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2701              		.loc 1 140 19 view .LVU706
 2702 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2703              	.LVL193:
 2704              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2705              		.loc 1 139 44 view .LVU707
 2706 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2707 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2708              	.LVL194:
 140:armwave.c     ****     		}
 2709              		.loc 1 140 14 is_stmt 1 view .LVU708
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2710              		.loc 1 137 14 view .LVU709
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2711              		.loc 1 138 14 view .LVU710
 139:armwave.c     ****             	word >>= 8;
 2712              		.loc 1 139 14 view .LVU711
 2713              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2714              		.loc 1 137 42 is_stmt 0 view .LVU712
 2715 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2716              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2717              		.loc 1 138 60 view .LVU713
 2718 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2719              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2720              		.loc 1 139 44 view .LVU714
 2721 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2722              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2723              		.loc 1 138 60 view .LVU715
 2724 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2725              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2726              		.loc 1 139 44 view .LVU716
 2727 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2728              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2729              		.loc 1 138 60 view .LVU717
 2730 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2731              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2732              		.loc 1 117 37 view .LVU718
 2733 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2734              	.LVL195:
 2735              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2736              		.loc 1 139 44 view .LVU719
 2737 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2738              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2739              		.loc 1 117 9 view .LVU720
 2740 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2741              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2742              		.loc 1 139 44 view .LVU721
 2743 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2744 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2745              	.LVL196:
 140:armwave.c     ****     		}
 2746              		.loc 1 140 14 is_stmt 1 view .LVU722
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2747              		.loc 1 137 14 view .LVU723
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2748              		.loc 1 138 14 view .LVU724
 139:armwave.c     ****             	word >>= 8;
 2749              		.loc 1 139 14 view .LVU725
 2750              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2751              		.loc 1 137 42 is_stmt 0 view .LVU726
 2752 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2753              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2754              		.loc 1 138 60 view .LVU727
 2755 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2756              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2757              		.loc 1 139 44 view .LVU728
 2758 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2759 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2760 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2761 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2762 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 140:armwave.c     ****     		}
 2763              		.loc 1 140 14 is_stmt 1 view .LVU729
 2764              	.LVL197:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2765              		.loc 1 137 14 view .LVU730
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2766              		.loc 1 138 14 view .LVU731
 139:armwave.c     ****             	word >>= 8;
 2767              		.loc 1 139 14 view .LVU732
 2768              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2769              		.loc 1 137 42 is_stmt 0 view .LVU733
 2770 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2771              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2772              		.loc 1 138 60 view .LVU734
 2773 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2774              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2775              		.loc 1 139 44 view .LVU735
 2776 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2777 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2778 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2779 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2780 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 140:armwave.c     ****     		}
 2781              		.loc 1 140 14 is_stmt 1 view .LVU736
 2782              	.LVL198:
 2783              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2784              		.loc 1 117 9 is_stmt 0 view .LVU737
 2785 012c D6FFFF8A 		bhi	.L167		@,
 2786 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2787              	.LVL199:
 2788              	.L166:
 2789              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2790              		.loc 1 106 44 view .LVU738
 2791 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2792              	.LVL200:
 2793              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2794              		.loc 1 106 5 view .LVU739
 2795 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2796 013c C9FFFF3A 		bcc	.L168		@,
 2797 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2798              	.LVL201:
 2799              	.L165:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2800              		.loc 1 106 5 view .LVU740
 2801              	.LBE30:
 2802              	.LBE31:
 2803              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2804              		.loc 1 399 32 discriminator 3 view .LVU741
 2805 0144 0510A0E1 		mov	r1, r5	@, _61
 2806 0148 020BA0E3 		mov	r0, #2048	@,
 2807              	.LVL202:
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2808              		.loc 1 399 32 discriminator 3 view .LVU742
 2809 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2810              	.LVL203:
 2811              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2812              		.loc 1 399 67 discriminator 3 view .LVU743
 2813 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2814              	.LVL204:
 2815              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2816              		.loc 1 399 9 discriminator 3 view .LVU744
 2817 0154 080050E1 		cmp	r0, r8	@, yy
 2818 0158 B8FFFF8A 		bhi	.L169		@,
 2819              	.LVL205:
 2820              	.L172:
 2821              	@ armwave.c:398:     for(n = 0; n < 5000; n++) {
 398:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2822              		.loc 1 398 5 discriminator 2 view .LVU745
 2823 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2824 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2825 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2826 0168 AFFFFF1A 		bne	.L164		@,
 2827 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 402:armwave.c     ****         }
 403:armwave.c     ****     }
 404:armwave.c     **** 
 405:armwave.c     ****     /*
 406:armwave.c     ****     printf("Creating pixbuf\n");
 407:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 408:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 409:armwave.c     **** 
 410:armwave.c     ****     printf("Dumping pixbuf\n");
 411:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 412:armwave.c     ****     */
 413:armwave.c     **** 
 414:armwave.c     ****     return 0;
 2828              		.loc 1 414 5 is_stmt 1 view .LVU746
 2829              	@ armwave.c:415: }
 415:armwave.c     **** }...
 2830              		.loc 1 415 1 is_stmt 0 view .LVU747
 2831 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2832              		.cfi_def_cfa_offset 36
 2833              		@ sp needed	@
 2834 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2835              	.L184:
 2836              		.align	2
 2837              	.L183:
 2838 0178 00000000 		.word	g_armwave_state
 2839 017c 88130000 		.word	5000
 2840              		.cfi_endproc
 2841              	.LFE71:
 2843              		.global	mod_depth
 2844              		.global	overall_scale
 2845              		.comm	gamma_table,256,4
 2846              		.comm	test_wave_buffer,131072,4
 2847              		.comm	g_armwave_state,80,4
 2848              		.section	.rodata
 2849              		.align	2
 2850              		.set	.LANCHOR0,. + 0
 2853              	__PRETTY_FUNCTION__.16995:
 2854 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2854      6176655F 
 2854      73657475 
 2854      705F7265 
 2854      6E646572 
 2855 0015 000000   		.space	3
 2858              	__PRETTY_FUNCTION__.17018:
 2859 0018 61726D77 		.ascii	"armwave_fill_pixbuf\000"
 2859      6176655F 
 2859      66696C6C 
 2859      5F706978 
 2859      62756600 
 2862              	__PRETTY_FUNCTION__.17041:
 2863 002c 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2863      6176655F 
 2863      66696C6C 
 2863      5F706978 
 2863      62756632 
 2864 0041 000000   		.space	3
 2867              	overall_scale:
 2868 0044 14000000 		.word	20
 2869              		.bss
 2870              		.align	2
 2871              		.set	.LANCHOR1,. + 0
 2874              	mod_depth:
 2875 0000 00000000 		.space	4
 2876              		.section	.rodata.str1.4,"aMS",%progbits,1
 2877              		.align	2
 2878              	.LC0:
 2879 0000 61726D77 		.ascii	"armwave.c\000"
 2879      6176652E 
 2879      6300
 2880 000a 0000     		.space	2
 2881              	.LC1:
 2882 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2882      6D776176 
 2882      655F7374 
 2882      6174652E 
 2882      6368315F 
 2883 002f 00       		.space	1
 2884              	.LC2:
 2885 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2885      6D776176 
 2885      655F7374 
 2885      6174652E 
 2885      78636F6F 
 2886 0059 000000   		.space	3
 2887              	.LC3:
 2888 005c 73746172 		.ascii	"start_point < end_point\000"
 2888      745F706F 
 2888      696E7420 
 2888      3C20656E 
 2888      645F706F 
 2889              	.LC4:
 2890 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 2890      6765745F 
 2890      68656967 
 2890      68742025 
 2890      20323536 
 2891 008f 00       		.space	1
 2892              	.LC5:
 2893 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2893      62756666 
 2893      65722021 
 2893      3D204E55 
 2893      4C4C00
 2894 00a3 00       		.space	1
 2895              	.LC6:
 2896 00a4 776200   		.ascii	"wb\000"
 2897 00a7 00       		.space	1
 2898              	.LC7:
 2899 00a8 50330A00 		.ascii	"P3\012\000"
 2900              	.LC8:
 2901 00ac 25642025 		.ascii	"%d %d\012\000"
 2901      640A00
 2902 00b3 00       		.space	1
 2903              	.LC9:
 2904 00b4 3235350A 		.ascii	"255\012\000"
 2904      00
 2905 00b9 000000   		.space	3
 2906              	.LC10:
 2907 00bc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2907      25336420 
 2907      2533640A 
 2907      00
 2908 00c9 000000   		.space	3
 2909              	.LC11:
 2910 00cc 76302E30 		.ascii	"v0.0.1\000"
 2910      2E3100
 2911 00d3 00       		.space	1
 2912              	.LC12:
 2913 00d4 61726D77 		.ascii	"armwave version: %s\012\000"
 2913      61766520 
 2913      76657273 
 2913      696F6E3A 
 2913      2025730A 
 2914              		.text
 2915              	.Letext0:
 2916              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2917              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2918              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2919              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2920              		.file 6 "/usr/include/stdio.h"
 2921              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2922              		.file 8 "/usr/include/errno.h"
 2923              		.file 9 "/usr/include/unistd.h"
 2924              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2925              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2926              		.file 12 "/usr/local/include/python3.8/pyport.h"
 2927              		.file 13 "/usr/include/math.h"
 2928              		.file 14 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2929              		.file 15 "/usr/include/time.h"
 2930              		.file 16 "/usr/local/include/python3.8/pymem.h"
 2931              		.file 17 "/usr/local/include/python3.8/object.h"
 2932              		.file 18 "/usr/local/include/python3.8/cpython/object.h"
 2933              		.file 19 "/usr/local/include/python3.8/methodobject.h"
 2934              		.file 20 "/usr/local/include/python3.8/descrobject.h"
 2935              		.file 21 "/usr/local/include/python3.8/pyhash.h"
 2936              		.file 22 "/usr/local/include/python3.8/pydebug.h"
 2937              		.file 23 "/usr/local/include/python3.8/bytearrayobject.h"
 2938              		.file 24 "/usr/local/include/python3.8/bytesobject.h"
 2939              		.file 25 "/usr/local/include/python3.8/unicodeobject.h"
 2940              		.file 26 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2941              		.file 27 "/usr/local/include/python3.8/longintrepr.h"
 2942              		.file 28 "/usr/local/include/python3.8/longobject.h"
 2943              		.file 29 "/usr/local/include/python3.8/boolobject.h"
 2944              		.file 30 "/usr/local/include/python3.8/floatobject.h"
 2945              		.file 31 "/usr/local/include/python3.8/complexobject.h"
 2946              		.file 32 "/usr/local/include/python3.8/rangeobject.h"
 2947              		.file 33 "/usr/local/include/python3.8/memoryobject.h"
 2948              		.file 34 "/usr/local/include/python3.8/tupleobject.h"
 2949              		.file 35 "/usr/local/include/python3.8/listobject.h"
 2950              		.file 36 "/usr/local/include/python3.8/dictobject.h"
 2951              		.file 37 "/usr/local/include/python3.8/odictobject.h"
 2952              		.file 38 "/usr/local/include/python3.8/enumobject.h"
 2953              		.file 39 "/usr/local/include/python3.8/setobject.h"
 2954              		.file 40 "/usr/local/include/python3.8/moduleobject.h"
 2955              		.file 41 "/usr/local/include/python3.8/funcobject.h"
 2956              		.file 42 "/usr/local/include/python3.8/classobject.h"
 2957              		.file 43 "/usr/local/include/python3.8/fileobject.h"
 2958              		.file 44 "/usr/local/include/python3.8/cpython/fileobject.h"
 2959              		.file 45 "/usr/local/include/python3.8/pycapsule.h"
 2960              		.file 46 "/usr/local/include/python3.8/traceback.h"
 2961              		.file 47 "/usr/local/include/python3.8/sliceobject.h"
 2962              		.file 48 "/usr/local/include/python3.8/cellobject.h"
 2963              		.file 49 "/usr/local/include/python3.8/iterobject.h"
 2964              		.file 50 "/usr/local/include/python3.8/pystate.h"
 2965              		.file 51 "/usr/local/include/python3.8/cpython/pystate.h"
 2966              		.file 52 "/usr/local/include/python3.8/genobject.h"
 2967              		.file 53 "/usr/local/include/python3.8/weakrefobject.h"
 2968              		.file 54 "/usr/local/include/python3.8/structseq.h"
 2969              		.file 55 "/usr/local/include/python3.8/namespaceobject.h"
 2970              		.file 56 "/usr/local/include/python3.8/picklebufobject.h"
 2971              		.file 57 "/usr/local/include/python3.8/codecs.h"
 2972              		.file 58 "/usr/local/include/python3.8/pyerrors.h"
 2973              		.file 59 "/usr/local/include/python3.8/context.h"
 2974              		.file 60 "/usr/local/include/python3.8/modsupport.h"
 2975              		.file 61 "/usr/local/include/python3.8/code.h"
 2976              		.file 62 "/usr/local/include/python3.8/pythonrun.h"
 2977              		.file 63 "/usr/local/include/python3.8/ceval.h"
 2978              		.file 64 "/usr/local/include/python3.8/import.h"
 2979              		.file 65 "/usr/local/include/python3.8/bltinmodule.h"
 2980              		.file 66 "/usr/local/include/python3.8/pyctype.h"
 2981              		.file 67 "armwave.h"
 2982              		.file 68 "/usr/include/stdlib.h"
 2983              		.file 69 "/usr/local/include/python3.8/cpython/abstract.h"
 2984              		.file 70 "<built-in>"
 2985              		.file 71 "/usr/include/assert.h"
 2986              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
