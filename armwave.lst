   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 48319FE5 		ldr	r3, .L21	@ tmp189,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 1CD04DE2 		sub	sp, sp, #28	@,,
 252              		.cfi_def_cfa_offset 64
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 247093E5 		ldr	r7, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 257              		.loc 1 79 35 view .LVU34
 258 00ac 382093E5 		ldr	r2, [r3, #56]	@ _135, g_armwave_state.waves
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 260              		.loc 1 71 147 view .LVU35
 261 00b0 405093E5 		ldr	r5, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 900704E0 		mul	r4, r0, r7	@ tmp192, slice_y, _2
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ _135,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01C0A0E1 		mov	ip, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2448A0E1 		lsr	r4, r4, #16	@ tmp193, tmp192,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 00108DE5 		str	r1, [sp]	@ height, %sfp
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU41
 279 00c8 0C208DE5 		str	r2, [sp, #12]	@ _135, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 041093E5 		ldr	r1, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 285              		.loc 1 71 130 view .LVU43
 286 00d0 950404E0 		mul	r4, r5, r4	@ _7, _6, tmp193
 287              	.LVL8:
 288              		.loc 1 79 5 is_stmt 1 view .LVU44
 289              		.loc 1 79 5 is_stmt 0 view .LVU45
 290 00d4 420000DA 		ble	.L11		@,
 291              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 292              		.loc 1 80 36 view .LVU46
 293 00d8 142093E5 		ldr	r2, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 294              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 295              		.loc 1 80 81 view .LVU47
 296 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 297 00e0 00005CE3 		cmp	ip, #0	@ height,
 298 00e4 10308DE5 		str	r3, [sp, #16]	@ _9, %sfp
 299 00e8 3D00000A 		beq	.L11		@,
 300 00ec 003082E0 		add	r3, r2, r0	@ ivtmp.48, _8, slice_y
 301 00f0 8720A0E1 		lsl	r2, r7, #1	@ tmp239, _2,
 302 00f4 078082E0 		add	r8, r2, r7	@ tmp237, tmp239, _2
 303 00f8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.48, %sfp
 304 00fc 00B063E2 		rsb	fp, r3, #0	@ ivtmp.49, ivtmp.48
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 306              		.loc 1 79 11 view .LVU48
 307 0100 0030A0E3 		mov	r3, #0	@ w,
 308 0104 14208DE5 		str	r2, [sp, #20]	@ tmp239, %sfp
 309 0108 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 310              	.LVL9:
 311              	.L14:
 312              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 313              		.loc 1 84 9 view .LVU50
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 315              		.loc 1 79 11 is_stmt 0 view .LVU51
 316 010c 14E09DE5 		ldr	lr, [sp, #20]	@ ivtmp.44, %sfp
 317 0110 04609DE5 		ldr	r6, [sp, #4]	@ ivtmp.41, %sfp
 318 0114 00C0A0E3 		mov	ip, #0	@ ivtmp.42,
 319              	.LVL10:
 320              	.L13:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 321              		.loc 1 87 13 is_stmt 1 view .LVU52
 322              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 103 74 is_stmt 0 view .LVU53
 324 0118 2C28A0E1 		lsr	r2, ip, #16	@ tmp197, ivtmp.42,
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 view .LVU54
 327 011c 043096E4 		ldr	r3, [r6], #4	@ word, MEM[base: _264, offset: 0B]
 328              	.LVL11:
  89:armwave.c     ****                 scale_value = word & 0xff;
 329              		.loc 1 89 13 is_stmt 1 view .LVU55
  90:armwave.c     ****                 
 330              		.loc 1 90 17 view .LVU56
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 17 view .LVU57
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 332              		.loc 1 107 17 view .LVU58
 333              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 107 47 is_stmt 0 view .LVU59
 335 0120 954222E0 		mla	r2, r5, r2, r4	@ tmp199, _6, tmp197, _7
 336              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 337              		.loc 1 103 34 view .LVU60
 338 0124 0CC087E0 		add	ip, r7, ip	@ _78, _2, ivtmp.42
 339              	.LVL12:
 340              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 341              		.loc 1 107 47 view .LVU61
 342 0128 7320E2E6 		uxtab	r2, r2, r3	@ tmp201, tmp199, word
 343              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 344              		.loc 1 103 74 view .LVU62
 345 012c 2C08A0E1 		lsr	r0, ip, #16	@ tmp206, _78,
 346              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 347              		.loc 1 107 47 view .LVU63
 348 0130 8220A0E1 		lsl	r2, r2, #1	@ tmp202, tmp201,
 349 0134 954020E0 		mla	r0, r5, r0, r4	@ tmp208, _6, tmp206, _7
 350              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 351              		.loc 1 108 22 view .LVU64
 352 0138 23A4A0E1 		lsr	r10, r3, #8	@ word, word,
 353              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 354              		.loc 1 107 47 view .LVU65
 355 013c B29091E1 		ldrh	r9, [r1, r2]	@ *_63, *_63
 356 0140 7A00E0E6 		uxtab	r0, r0, r10	@ tmp211, tmp208, word
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 74 view .LVU66
 359 0144 2EA8A0E1 		lsr	r10, lr, #16	@ tmp216, ivtmp.44,
 360              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 361              		.loc 1 107 47 view .LVU67
 362 0148 019089E2 		add	r9, r9, #1	@ tmp205, *_63,
 363 014c 954A2AE0 		mla	r10, r5, r10, r4	@ tmp218, _6, tmp216, _7
 364 0150 B29081E1 		strh	r9, [r1, r2]	@ movhi	@ tmp205, *_63
 365              		.loc 1 108 17 is_stmt 1 view .LVU68
 366              	.LVL13:
  90:armwave.c     ****                 
 367              		.loc 1 90 17 view .LVU69
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 368              		.loc 1 102 17 view .LVU70
 107:armwave.c     ****                 word >>= 8;
 369              		.loc 1 107 17 view .LVU71
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 34 is_stmt 0 view .LVU72
 372 0154 0EE087E0 		add	lr, r7, lr	@ _122, _2, ivtmp.44
 373              	@ armwave.c:108:                 word >>= 8;
 374              		.loc 1 108 22 view .LVU73
 375 0158 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU74
 378 015c 8000A0E1 		lsl	r0, r0, #1	@ tmp212, tmp211,
 379 0160 7220EAE6 		uxtab	r2, r10, r2	@ tmp221, tmp218, word
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 74 view .LVU75
 382 0164 2EA8A0E1 		lsr	r10, lr, #16	@ tmp226, _122,
 383              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 384              		.loc 1 107 47 view .LVU76
 385 0168 B09091E1 		ldrh	r9, [r1, r0]	@ *_85, *_85
 386              	@ armwave.c:108:                 word >>= 8;
 387              		.loc 1 108 22 view .LVU77
 388 016c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 389              	.LVL14:
 390              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 391              		.loc 1 107 47 view .LVU78
 392 0170 953A23E0 		mla	r3, r5, r10, r3	@ tmp229, _6, tmp226, word
 393 0174 8220A0E1 		lsl	r2, r2, #1	@ tmp222, tmp221,
 394 0178 019089E2 		add	r9, r9, #1	@ tmp215, *_85,
 395 017c B09081E1 		strh	r9, [r1, r0]	@ movhi	@ tmp215, *_85
 396              		.loc 1 108 17 is_stmt 1 view .LVU79
 397              	.LVL15:
  90:armwave.c     ****                 
 398              		.loc 1 90 17 view .LVU80
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 399              		.loc 1 102 17 view .LVU81
 107:armwave.c     ****                 word >>= 8;
 400              		.loc 1 107 17 view .LVU82
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 is_stmt 0 view .LVU83
 403 0180 043083E0 		add	r3, r3, r4	@ tmp230, tmp229, _7
 404 0184 B20091E1 		ldrh	r0, [r1, r2]	@ *_107, *_107
 405 0188 8330A0E1 		lsl	r3, r3, #1	@ tmp231, tmp230,
 406              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 407              		.loc 1 84 9 view .LVU84
 408 018c 00909DE5 		ldr	r9, [sp]	@ height, %sfp
 409              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 47 view .LVU85
 411 0190 010080E2 		add	r0, r0, #1	@ tmp225, *_107,
 412 0194 B20081E1 		strh	r0, [r1, r2]	@ movhi	@ tmp225, *_107
 413              		.loc 1 108 17 is_stmt 1 view .LVU86
 414              	.LVL16:
  90:armwave.c     ****                 
 415              		.loc 1 90 17 view .LVU87
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 416              		.loc 1 102 17 view .LVU88
 107:armwave.c     ****                 word >>= 8;
 417              		.loc 1 107 17 view .LVU89
 418              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 419              		.loc 1 107 47 is_stmt 0 view .LVU90
 420 0198 B32091E1 		ldrh	r2, [r1, r3]	@ *_129, *_129
 421              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 422              		.loc 1 84 9 view .LVU91
 423 019c 06008BE0 		add	r0, fp, r6	@ tmp238, ivtmp.49, ivtmp.41
 424 01a0 000059E1 		cmp	r9, r0	@ height, tmp238
 425              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 426              		.loc 1 107 47 view .LVU92
 427 01a4 012082E2 		add	r2, r2, #1	@ tmp234, *_129,
 428 01a8 08C08CE0 		add	ip, ip, r8	@ ivtmp.42, _78, tmp237
 429 01ac 08E08EE0 		add	lr, lr, r8	@ ivtmp.44, _122, tmp237
 430              	.LVL17:
 107:armwave.c     ****                 word >>= 8;
 431              		.loc 1 107 47 view .LVU93
 432 01b0 B32081E1 		strh	r2, [r1, r3]	@ movhi	@ tmp234, *_129
 433              		.loc 1 108 17 is_stmt 1 view .LVU94
 434              	.LVL18:
 435              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 436              		.loc 1 84 9 is_stmt 0 view .LVU95
 437 01b4 D7FFFF8A 		bhi	.L13		@,
 438              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 439              		.loc 1 79 44 view .LVU96
 440 01b8 08309DE5 		ldr	r3, [sp, #8]	@ w, %sfp
 441              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 442              		.loc 1 79 5 view .LVU97
 443 01bc 0C209DE5 		ldr	r2, [sp, #12]	@ _135, %sfp
 444              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 445              		.loc 1 79 44 view .LVU98
 446 01c0 013083E2 		add	r3, r3, #1	@ w, w,
 447              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 448              		.loc 1 79 5 view .LVU99
 449 01c4 020053E1 		cmp	r3, r2	@ w, _135
 450              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 451              		.loc 1 79 44 view .LVU100
 452 01c8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 453              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 454              		.loc 1 79 44 view .LVU101
 455 01cc 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.48, %sfp
 456 01d0 10309DE5 		ldr	r3, [sp, #16]	@ _9, %sfp
 457              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 458              		.loc 1 79 44 view .LVU102
 459 01d4 032082E0 		add	r2, r2, r3	@ ivtmp.48, ivtmp.48, _9
 460 01d8 04208DE5 		str	r2, [sp, #4]	@ ivtmp.48, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 461              		.loc 1 79 44 view .LVU103
 462 01dc 03B04BE0 		sub	fp, fp, r3	@ ivtmp.49, ivtmp.49, _9
 463              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 464              		.loc 1 79 5 view .LVU104
 465 01e0 C9FFFF1A 		bne	.L14		@,
 466              	.LVL21:
 467              	.L11:
 468              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 469              		.loc 1 112 1 view .LVU105
 470 01e4 1CD08DE2 		add	sp, sp, #28	@,,
 471              		.cfi_def_cfa_offset 36
 472              	.LVL22:
 473              		.loc 1 112 1 view .LVU106
 474              		@ sp needed	@
 475 01e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 476              	.LVL23:
 477              	.L22:
 478              		.loc 1 112 1 view .LVU107
 479              		.align	2
 480              	.L21:
 481 01ec 00000000 		.word	g_armwave_state
 482              		.cfi_endproc
 483              	.LFE59:
 485              		.align	2
 486              		.global	armwave_fill_pixbuf_scaled
 487              		.syntax unified
 488              		.arm
 489              		.fpu vfp
 491              	armwave_fill_pixbuf_scaled:
 492              	.LVL24:
 493              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 494              		.loc 1 119 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 8
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 498              		.loc 1 120 5 view .LVU109
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 499              		.loc 1 122 5 view .LVU110
 123:armwave.c     ****     uint8_t r, g, b;
 500              		.loc 1 123 5 view .LVU111
 124:armwave.c     ****     int value; 
 501              		.loc 1 124 5 view .LVU112
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 502              		.loc 1 126 5 view .LVU113
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 503              		.loc 1 127 5 view .LVU114
 128:armwave.c     ****     uint32_t offset;
 504              		.loc 1 128 5 view .LVU115
 129:armwave.c     **** 
 130:armwave.c     ****     if(out_buffer == NULL)
 505              		.loc 1 130 5 view .LVU116
 506              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 507              		.loc 1 119 1 is_stmt 0 view .LVU117
 508 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_def_cfa_offset 36
 510              		.cfi_offset 4, -36
 511              		.cfi_offset 5, -32
 512              		.cfi_offset 6, -28
 513              		.cfi_offset 7, -24
 514              		.cfi_offset 8, -20
 515              		.cfi_offset 9, -16
 516              		.cfi_offset 10, -12
 517              		.cfi_offset 11, -8
 518              		.cfi_offset 14, -4
 519              	@ armwave.c:130:     if(out_buffer == NULL)
 520              		.loc 1 130 7 view .LVU118
 521 01f4 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 522              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 523              		.loc 1 119 1 view .LVU119
 524 01f8 0CD04DE2 		sub	sp, sp, #12	@,,
 525              		.cfi_def_cfa_offset 48
 526              	@ armwave.c:130:     if(out_buffer == NULL)
 527              		.loc 1 130 7 view .LVU120
 528 01fc 1A00000A 		beq	.L23		@,
 529              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 530              		.loc 1 126 15 view .LVU121
 531 0200 54519FE5 		ldr	r5, .L44	@ tmp221,
 532              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     ****         return;
 132:armwave.c     **** 
 133:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 134:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 533              		.loc 1 134 5 view .LVU122
 534 0204 0010A0E3 		mov	r1, #0	@,
 535              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 536              		.loc 1 134 59 view .LVU123
 537 0208 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 538 020c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 539              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 540              		.loc 1 126 15 view .LVU124
 541 0210 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 542              		.loc 1 134 5 is_stmt 1 view .LVU125
 543              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 544              		.loc 1 134 59 is_stmt 0 view .LVU126
 545 0214 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 546              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 547              		.loc 1 134 5 view .LVU127
 548 0218 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 549 021c FEFFFFEB 		bl	memset		@
 550              	.LVL25:
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 551              		.loc 1 136 5 is_stmt 1 view .LVU128
 552              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 553              		.loc 1 136 10 is_stmt 0 view .LVU129
 554 0220 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 555 0224 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 556 0228 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 557              	.LVL26:
 137:armwave.c     ****     
 138:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 558              		.loc 1 138 5 is_stmt 1 view .LVU130
 559              		.loc 1 138 5 is_stmt 0 view .LVU131
 560 022c 000050E3 		cmp	r0, #0	@ npix,
 561 0230 0D0000DA 		ble	.L23		@,
 562              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 139:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 140:armwave.c     ****         wave_word = *base_32ptr++;
 141:armwave.c     **** 
 142:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 143:armwave.c     ****             for(w = 0; w < 2; w++) {
 144:armwave.c     ****                 value = wave_word & 0xffff;
 145:armwave.c     ****                 wave_word >>= 16;
 146:armwave.c     **** 
 147:armwave.c     ****                 if(value != 0) {
 148:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 149:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 563              		.loc 1 149 52 view .LVU132
 564 0234 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 565              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 148 52 view .LVU133
 567 0238 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 568              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 151:armwave.c     **** 
 152:armwave.c     ****                     r = MIN(rr, 255);
 153:armwave.c     ****                     g = MIN(gg, 255);
 154:armwave.c     ****                     b = MIN(bb, 255);
 155:armwave.c     **** 
 156:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 157:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 158:armwave.c     **** 
 159:armwave.c     ****                     // Plot the pixels
 160:armwave.c     ****                     nsub = n + w;
 161:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 569              		.loc 1 161 57 view .LVU134
 570 023c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 571              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 572              		.loc 1 149 52 view .LVU135
 573 0240 00308DE5 		str	r3, [sp]	@ _16, %sfp
 574              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 575              		.loc 1 150 52 view .LVU136
 576 0244 F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 577 0248 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 578              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 579              		.loc 1 138 11 view .LVU137
 580 024c 0030A0E3 		mov	r3, #0	@ n,
 581              	.LVL27:
 582              	.L29:
 140:armwave.c     **** 
 583              		.loc 1 140 9 is_stmt 1 view .LVU138
 584              	@ armwave.c:140:         wave_word = *base_32ptr++;
 140:armwave.c     **** 
 585              		.loc 1 140 19 is_stmt 0 view .LVU139
 586 0250 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 587              	.LVL28:
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 588              		.loc 1 142 9 is_stmt 1 view .LVU140
 589              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 590              		.loc 1 142 11 is_stmt 0 view .LVU141
 591 0254 000052E3 		cmp	r2, #0	@ wave_word,
 592              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 593              		.loc 1 143 19 view .LVU142
 594 0258 0080A013 		movne	r8, #0	@ w,
 595              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 596              		.loc 1 142 11 view .LVU143
 597 025c 0400001A 		bne	.L28		@,
 598              	.L25:
 599              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 600              		.loc 1 138 28 view .LVU144
 601 0260 023083E2 		add	r3, r3, #2	@ n, n,
 602              	.LVL29:
 603              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 604              		.loc 1 138 5 view .LVU145
 605 0264 030050E1 		cmp	r0, r3	@ npix, n
 606 0268 F8FFFFCA 		bgt	.L29		@,
 607              	.LVL30:
 608              	.L23:
 609              	@ armwave.c:173: }
 162:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     xx = (nsub >> 8) / 2;
 164:armwave.c     **** 
 165:armwave.c     ****                     for(y = yy; y < ye; y++) {
 166:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 167:armwave.c     ****                         *(out_buffer_base + offset) = word;
 168:armwave.c     ****                     }
 169:armwave.c     ****                 }
 170:armwave.c     ****             }
 171:armwave.c     ****         }
 172:armwave.c     ****     }
 173:armwave.c     **** }
 610              		.loc 1 173 1 view .LVU146
 611 026c 0CD08DE2 		add	sp, sp, #12	@,,
 612              		.cfi_remember_state
 613              		.cfi_def_cfa_offset 36
 614              		@ sp needed	@
 615 0270 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 616              	.LVL31:
 617              	.L28:
 618              		.cfi_restore_state
 144:armwave.c     ****                 wave_word >>= 16;
 619              		.loc 1 144 17 is_stmt 1 view .LVU147
 620              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 621              		.loc 1 144 23 is_stmt 0 view .LVU148
 622 0274 7290FFE6 		uxth	r9, r2	@ value, wave_word
 623              	.LVL32:
 145:armwave.c     **** 
 624              		.loc 1 145 17 is_stmt 1 view .LVU149
 625              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 626              		.loc 1 147 19 is_stmt 0 view .LVU150
 627 0278 000059E3 		cmp	r9, #0	@ value,
 628              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 629              		.loc 1 145 27 view .LVU151
 630 027c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 631              	.LVL33:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 147 17 is_stmt 1 view .LVU152
 633              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 634              		.loc 1 147 19 is_stmt 0 view .LVU153
 635 0280 0600001A 		bne	.L43		@,
 636              	.LVL34:
 637              	.L26:
 638              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 639              		.loc 1 143 13 view .LVU154
 640 0284 010058E3 		cmp	r8, #1	@ w,
 641 0288 F4FFFF0A 		beq	.L25		@,
 642              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 643              		.loc 1 144 23 view .LVU155
 644 028c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 645              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 646              		.loc 1 147 19 view .LVU156
 647 0290 000059E3 		cmp	r9, #0	@ value,
 648 0294 0180A0E3 		mov	r8, #1	@ w,
 649              	.LVL35:
 144:armwave.c     ****                 wave_word >>= 16;
 650              		.loc 1 144 17 is_stmt 1 view .LVU157
 145:armwave.c     **** 
 651              		.loc 1 145 17 view .LVU158
 652              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 653              		.loc 1 145 27 is_stmt 0 view .LVU159
 654 0298 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 655              	.LVL36:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 656              		.loc 1 147 17 is_stmt 1 view .LVU160
 657              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 658              		.loc 1 147 19 is_stmt 0 view .LVU161
 659 029c F8FFFF0A 		beq	.L26		@,
 660              	.L43:
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 661              		.loc 1 148 21 is_stmt 1 view .LVU162
 662              	.LVL37:
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 149 21 view .LVU163
 150:armwave.c     **** 
 664              		.loc 1 150 21 view .LVU164
 152:armwave.c     ****                     g = MIN(gg, 255);
 665              		.loc 1 152 21 view .LVU165
 153:armwave.c     ****                     b = MIN(bb, 255);
 666              		.loc 1 153 21 view .LVU166
 154:armwave.c     **** 
 667              		.loc 1 154 21 view .LVU167
 157:armwave.c     **** 
 668              		.loc 1 157 21 view .LVU168
 669              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 670              		.loc 1 150 55 is_stmt 0 view .LVU169
 671 02a0 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 672 02a4 08E083E0 		add	lr, r3, r8	@ _130, n, w
 673 02a8 99010CE0 		mul	ip, r9, r1	@ tmp195, value, _19
 674              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 675              		.loc 1 161 32 view .LVU170
 676 02ac 7E10EFE6 		uxtb	r1, lr	@ _31, _130
 677              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 678              		.loc 1 162 41 view .LVU171
 679 02b0 017081E2 		add	r7, r1, #1	@ tmp210, _31,
 680              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 681              		.loc 1 161 40 view .LVU172
 682 02b4 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 683              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 684              		.loc 1 162 41 view .LVU173
 685 02b8 107A07EE 		vmov	s14, r7	@ int	@ tmp210, tmp210
 686              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 687              		.loc 1 149 55 view .LVU174
 688 02bc 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 689              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 690              		.loc 1 150 24 view .LVU175
 691 02c0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp195,
 692              	.LVL38:
 693              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 161 40 view .LVU176
 695 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp208, _31
 696              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 697              		.loc 1 162 46 view .LVU177
 698 02c8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp211, tmp210
 699              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 700              		.loc 1 149 55 view .LVU178
 701 02cc 99010AE0 		mul	r10, r9, r1	@ tmp199, value, _16
 702              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 703              		.loc 1 148 55 view .LVU179
 704 02d0 990B09E0 		mul	r9, r9, fp	@ tmp205, value, _13
 705              	.LVL39:
 706              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 707              		.loc 1 154 25 view .LVU180
 708 02d4 FF005CE3 		cmp	ip, #255	@ bb,
 709              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 149 24 view .LVU181
 711 02d8 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp199,
 712              	.LVL40:
 713              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 161 40 view .LVU182
 715 02dc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp209, tmp208, _33
 716              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 717              		.loc 1 162 46 view .LVU183
 718 02e0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp212, tmp211, _33
 719              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 720              		.loc 1 154 25 view .LVU184
 721 02e4 FFC0A0A3 		movge	ip, #255	@ bb,
 722              	.LVL41:
 723              	@ armwave.c:153:                     g = MIN(gg, 255);
 153:armwave.c     ****                     b = MIN(bb, 255);
 724              		.loc 1 153 25 view .LVU185
 725 02e8 FF005AE3 		cmp	r10, #255	@ gg,
 726 02ec FFA0A0A3 		movge	r10, #255	@ gg,
 727              	.LVL42:
 728              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 729              		.loc 1 148 24 view .LVU186
 730 02f0 4994A0E1 		asr	r9, r9, #8	@ rr, tmp205,
 731              	.LVL43:
 732              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 733              		.loc 1 152 25 view .LVU187
 734 02f4 FF0059E3 		cmp	r9, #255	@ rr,
 735              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 736              		.loc 1 157 56 view .LVU188
 737 02f8 0AA4A0E1 		lsl	r10, r10, #8	@ tmp200, gg,
 738              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 161 24 view .LVU189
 740 02fc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp209
 741              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 152 25 view .LVU190
 743 0300 FF90A0A3 		movge	r9, #255	@ rr,
 744              	.LVL44:
 745              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 746              		.loc 1 163 32 view .LVU191
 747 0304 4EE4A0E1 		asr	lr, lr, #8	@ tmp213, _130,
 748              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 749              		.loc 1 157 44 view .LVU192
 750 0308 0CC8A0E1 		lsl	ip, ip, #16	@ tmp196, bb,
 751              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 752              		.loc 1 157 56 view .LVU193
 753 030c 7AA0FFE6 		uxth	r10, r10	@ tmp201, tmp200
 754              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 755              		.loc 1 157 44 view .LVU194
 756 0310 FFC80CE2 		and	ip, ip, #16711680	@ tmp197, tmp196,
 757              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 758              		.loc 1 157 51 view .LVU195
 759 0314 0AC08CE1 		orr	ip, ip, r10	@ tmp203, tmp197, tmp201
 760              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 761              		.loc 1 157 62 view .LVU196
 762 0318 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 763              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 161 24 view .LVU197
 765 031c 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 766              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 767              		.loc 1 162 24 view .LVU198
 768 0320 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp212
 769              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 770              		.loc 1 163 38 view .LVU199
 771 0324 AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp215, tmp213, tmp213,
 772              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 773              		.loc 1 157 62 view .LVU200
 774 0328 0AC08CE1 		orr	ip, ip, r10	@ tmp207, tmp203, rr
 775              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 776              		.loc 1 157 26 view .LVU201
 777 032c FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp207,
 778              	.LVL45:
 160:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 779              		.loc 1 160 21 is_stmt 1 view .LVU202
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 161 21 view .LVU203
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 781              		.loc 1 162 21 view .LVU204
 782              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 783              		.loc 1 163 38 is_stmt 0 view .LVU205
 784 0330 C990A0E1 		asr	r9, r9, #1	@ xx, tmp215,
 785              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 786              		.loc 1 162 24 view .LVU206
 787 0334 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 788              	.LVL46:
 163:armwave.c     **** 
 789              		.loc 1 163 21 is_stmt 1 view .LVU207
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 790              		.loc 1 165 21 view .LVU208
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 791              		.loc 1 165 21 is_stmt 0 view .LVU209
 792 0338 070051E1 		cmp	r1, r7	@ yy, ye
 793 033c D0FFFF2A 		bcs	.L26		@,
 794              	.LVL47:
 795              	.L27:
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 796              		.loc 1 166 25 is_stmt 1 discriminator 3 view .LVU210
 167:armwave.c     ****                     }
 797              		.loc 1 167 25 discriminator 3 view .LVU211
 798              	@ armwave.c:166:                         offset = (xx + (y * g_armwave_state.target_width)); 
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 799              		.loc 1 166 43 is_stmt 0 discriminator 3 view .LVU212
 800 0340 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 801              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 802              		.loc 1 167 43 discriminator 3 view .LVU213
 803 0344 9C912CE0 		mla	ip, ip, r1, r9	@ tmp220, g_armwave_state.target_width, yy, xx
 804              	.LVL48:
 805              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 806              		.loc 1 165 42 discriminator 3 view .LVU214
 807 0348 011081E2 		add	r1, r1, #1	@ yy, yy,
 808              	.LVL49:
 809              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 165 21 discriminator 3 view .LVU215
 811 034c 010057E1 		cmp	r7, r1	@ ye, yy
 812              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 813              		.loc 1 167 53 discriminator 3 view .LVU216
 814 0350 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 815              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 816              		.loc 1 165 21 discriminator 3 view .LVU217
 817 0354 F9FFFF1A 		bne	.L27		@,
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 818              		.loc 1 165 21 discriminator 3 view .LVU218
 819 0358 C9FFFFEA 		b	.L26		@
 820              	.L45:
 821              		.align	2
 822              	.L44:
 823 035c 00000000 		.word	g_armwave_state
 824              		.cfi_endproc
 825              	.LFE60:
 827              		.global	__aeabi_idiv
 828              		.align	2
 829              		.global	armwave_generate
 830              		.syntax unified
 831              		.arm
 832              		.fpu vfp
 834              	armwave_generate:
 835              	.LFB61:
 174:armwave.c     **** 
 175:armwave.c     **** /*
 176:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 177:armwave.c     ****  */
 178:armwave.c     **** void armwave_generate()
 179:armwave.c     **** {
 836              		.loc 1 179 1 is_stmt 1 view -0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 40
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 180:armwave.c     ****     uint32_t yy;
 840              		.loc 1 180 5 view .LVU220
 181:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 841              		.loc 1 181 5 view .LVU221
 842              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 843              		.loc 1 179 1 is_stmt 0 view .LVU222
 844 0360 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 845              		.cfi_def_cfa_offset 36
 846              		.cfi_offset 4, -36
 847              		.cfi_offset 5, -32
 848              		.cfi_offset 6, -28
 849              		.cfi_offset 7, -24
 850              		.cfi_offset 8, -20
 851              		.cfi_offset 9, -16
 852              		.cfi_offset 10, -12
 853              		.cfi_offset 11, -8
 854              		.cfi_offset 14, -4
 855 0364 34D04DE2 		sub	sp, sp, #52	@,,
 856              		.cfi_def_cfa_offset 88
 857              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 858              		.loc 1 181 38 view .LVU223
 859 0368 3C729FE5 		ldr	r7, .L64	@ tmp287,
 860              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 182:armwave.c     **** 
 183:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 861              		.loc 1 183 5 view .LVU224
 862 036c 0010A0E3 		mov	r1, #0	@,
 863              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 864              		.loc 1 181 14 view .LVU225
 865 0370 4C3097E5 		ldr	r3, [r7, #76]	@ xx_rem, g_armwave_state.wave_length
 866              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 867              		.loc 1 183 5 view .LVU226
 868 0374 502097E5 		ldr	r2, [r7, #80]	@, g_armwave_state.ch_buff_size
 869 0378 040097E5 		ldr	r0, [r7, #4]	@, g_armwave_state.ch1_buffer
 870              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 871              		.loc 1 181 14 view .LVU227
 872 037c 18308DE5 		str	r3, [sp, #24]	@ xx_rem, %sfp
 873              	.LVL50:
 874              		.loc 1 183 5 is_stmt 1 view .LVU228
 875 0380 FEFFFFEB 		bl	memset		@
 876              	.LVL51:
 184:armwave.c     **** 
 185:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 877              		.loc 1 185 5 view .LVU229
 878              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 879              		.loc 1 185 68 is_stmt 0 view .LVU230
 880 0384 449097E5 		ldr	r9, [r7, #68]	@ _12, g_armwave_state.slice_height
 881              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 882              		.loc 1 185 51 view .LVU231
 883 0388 4C0097E5 		ldr	r0, [r7, #76]	@, g_armwave_state.wave_length
 884 038c 0910A0E1 		mov	r1, r9	@, _12
 885 0390 FEFFFFEB 		bl	__aeabi_idiv		@
 886              	.LVL52:
 887              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 888              		.loc 1 185 5 view .LVU232
 889 0394 000050E3 		cmp	r0, #0	@ tmp222
 890 0398 7F00000A 		beq	.L55		@,
 891              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 892              		.loc 1 181 52 view .LVU233
 893 039c 0030A0E3 		mov	r3, #0	@ ypos,
 894 03a0 24A097E5 		ldr	r10, [r7, #36]	@ _43, g_armwave_state.cmp_x_bitdepth_scale
 895              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 896              		.loc 1 185 12 view .LVU234
 897 03a4 03B0A0E1 		mov	fp, r3	@ yy, ypos
 898              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 899              		.loc 1 181 52 view .LVU235
 900 03a8 1C308DE5 		str	r3, [sp, #28]	@ ypos, %sfp
 901              	.LVL53:
 902              	.L49:
 186:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 187:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 903              		.loc 1 187 9 is_stmt 1 discriminator 3 view .LVU236
 904 03ac 9B0901E0 		mul	r1, fp, r9	@ _7, yy, _12
 905 03b0 0930A0E1 		mov	r3, r9	@, _12
 906 03b4 0120A0E1 		mov	r2, r1	@, _7
 907              	@ armwave.c:189:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 188:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 189:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 908              		.loc 1 189 48 is_stmt 0 discriminator 3 view .LVU237
 909 03b8 9A010AE0 		mul	r10, r10, r1	@ tmp225, _43, _7
 910              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 187:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 911              		.loc 1 187 9 discriminator 3 view .LVU238
 912 03bc EC019FE5 		ldr	r0, .L64+4	@,
 913 03c0 0B10A0E1 		mov	r1, fp	@, yy
 914 03c4 2AA8A0E1 		lsr	r10, r10, #16	@ tmp226, tmp225,
 915 03c8 00A08DE5 		str	r10, [sp]	@ tmp226,
 916 03cc FEFFFFEB 		bl	printf		@
 917              	.LVL54:
 190:armwave.c     **** 
 191:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 918              		.loc 1 191 9 is_stmt 1 discriminator 3 view .LVU239
 919              	@ armwave.c:191:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 920              		.loc 1 191 62 is_stmt 0 discriminator 3 view .LVU240
 921 03d0 449097E5 		ldr	r9, [r7, #68]	@ _12, g_armwave_state.slice_height
 922              	.LBB10:
 923              	.LBB11:
 924              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 925              		.loc 1 71 82 discriminator 3 view .LVU241
 926 03d4 24A097E5 		ldr	r10, [r7, #36]	@ _43, g_armwave_state.cmp_x_bitdepth_scale
 927              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 928              		.loc 1 79 35 discriminator 3 view .LVU242
 929 03d8 383097E5 		ldr	r3, [r7, #56]	@ _155, g_armwave_state.waves
 930              	.LBE11:
 931              	.LBE10:
 932              	@ armwave.c:191:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 933              		.loc 1 191 9 discriminator 3 view .LVU243
 934 03dc 9B0902E0 		mul	r2, fp, r9	@ _14, yy, _12
 935              	.LVL55:
 936              	.LBB13:
 937              	.LBI10:
  62:armwave.c     **** {
 938              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU244
 939              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 940              		.loc 1 64 5 discriminator 3 view .LVU245
  65:armwave.c     ****     uint8_t *wave_base;
 941              		.loc 1 65 5 discriminator 3 view .LVU246
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 942              		.loc 1 66 5 discriminator 3 view .LVU247
  67:armwave.c     ****     bufftyp_t *write_buffer;
 943              		.loc 1 67 5 discriminator 3 view .LVU248
  68:armwave.c     **** 
 944              		.loc 1 68 5 discriminator 3 view .LVU249
  71:armwave.c     **** 
 945              		.loc 1 71 5 discriminator 3 view .LVU250
 946              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 947              		.loc 1 79 35 is_stmt 0 discriminator 3 view .LVU251
 948 03e0 0310A0E1 		mov	r1, r3	@ _155, _155
 949 03e4 20308DE5 		str	r3, [sp, #32]	@ _155, %sfp
 950              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 951              		.loc 1 71 65 discriminator 3 view .LVU252
 952 03e8 9A0203E0 		mul	r3, r10, r2	@ tmp231, _43, _14
 953              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 954              		.loc 1 71 147 discriminator 3 view .LVU253
 955 03ec 40E097E5 		ldr	lr, [r7, #64]	@ _47, g_armwave_state.bitdepth_height
 956              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 957              		.loc 1 79 5 discriminator 3 view .LVU254
 958 03f0 000051E3 		cmp	r1, #0	@ _155,
 959              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 960              		.loc 1 71 105 discriminator 3 view .LVU255
 961 03f4 2338A0E1 		lsr	r3, r3, #16	@ tmp232, tmp231,
 962              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 963              		.loc 1 71 40 discriminator 3 view .LVU256
 964 03f8 04C097E5 		ldr	ip, [r7, #4]	@ _42, g_armwave_state.ch1_buffer
 965              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 966              		.loc 1 71 130 discriminator 3 view .LVU257
 967 03fc 9E0304E0 		mul	r4, lr, r3	@ _48, _47, tmp232
 968              	.LVL56:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 969              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU258
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 970              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU259
 971 0400 4A0000DA 		ble	.L53		@,
 972              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 973              		.loc 1 80 81 view .LVU260
 974 0404 341097E5 		ldr	r1, [r7, #52]	@ _50, g_armwave_state.wave_stride
 975 0408 000059E3 		cmp	r9, #0	@ _12,
 976              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 977              		.loc 1 80 36 view .LVU261
 978 040c 143097E5 		ldr	r3, [r7, #20]	@ _49, g_armwave_state.wave_buffer
 979              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 980              		.loc 1 80 81 view .LVU262
 981 0410 24108DE5 		str	r1, [sp, #36]	@ _50, %sfp
 982 0414 4500000A 		beq	.L53		@,
 983 0418 023083E0 		add	r3, r3, r2	@ ivtmp.79, _49, _14
 984 041c 0C308DE5 		str	r3, [sp, #12]	@ ivtmp.79, %sfp
 985 0420 8A20A0E1 		lsl	r2, r10, #1	@ tmp286, _43,
 986              	.LVL57:
  80:armwave.c     **** 
 987              		.loc 1 80 81 view .LVU263
 988 0424 003063E2 		rsb	r3, r3, #0	@ ivtmp.80, ivtmp.79
 989 0428 08308DE5 		str	r3, [sp, #8]	@ ivtmp.80, %sfp
 990 042c 0A3082E0 		add	r3, r2, r10	@ tmp281, tmp286, _43
 991 0430 14308DE5 		str	r3, [sp, #20]	@ tmp281, %sfp
 992              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 993              		.loc 1 79 11 view .LVU264
 994 0434 0030A0E3 		mov	r3, #0	@ w,
 995 0438 28208DE5 		str	r2, [sp, #40]	@ tmp286, %sfp
 996 043c 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 997 0440 2CB08DE5 		str	fp, [sp, #44]	@ yy, %sfp
 998              	.LVL58:
 999              	.L54:
  80:armwave.c     **** 
 1000              		.loc 1 80 9 is_stmt 1 view .LVU265
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1001              		.loc 1 84 9 view .LVU266
 1002              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1003              		.loc 1 79 11 is_stmt 0 view .LVU267
 1004 0444 28009DE5 		ldr	r0, [sp, #40]	@ ivtmp.75, %sfp
 1005 0448 0CB09DE5 		ldr	fp, [sp, #12]	@ ivtmp.72, %sfp
 1006 044c 0010A0E3 		mov	r1, #0	@ ivtmp.73,
 1007              	.LVL59:
 1008              	.L52:
  87:armwave.c     **** 
 1009              		.loc 1 87 13 is_stmt 1 view .LVU268
 1010              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1011              		.loc 1 103 74 is_stmt 0 view .LVU269
 1012 0450 2128A0E1 		lsr	r2, r1, #16	@ tmp241, ivtmp.73,
 1013              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1014              		.loc 1 87 18 view .LVU270
 1015 0454 04309BE4 		ldr	r3, [fp], #4	@ word, MEM[base: _312, offset: 0B]
 1016              	.LVL60:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1017              		.loc 1 89 13 is_stmt 1 view .LVU271
  90:armwave.c     ****                 
 1018              		.loc 1 90 17 view .LVU272
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1019              		.loc 1 102 17 view .LVU273
 107:armwave.c     ****                 word >>= 8;
 1020              		.loc 1 107 17 view .LVU274
 1021              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1022              		.loc 1 107 47 is_stmt 0 view .LVU275
 1023 0458 9E4222E0 		mla	r2, lr, r2, r4	@ tmp243, _47, tmp241, _48
 1024              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1025              		.loc 1 103 34 view .LVU276
 1026 045c 01108AE0 		add	r1, r10, r1	@ _114, _43, ivtmp.73
 1027              	.LVL61:
 1028              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1029              		.loc 1 107 47 view .LVU277
 1030 0460 7320E2E6 		uxtab	r2, r2, r3	@ tmp245, tmp243, word
 1031              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1032              		.loc 1 103 74 view .LVU278
 1033 0464 2158A0E1 		lsr	r5, r1, #16	@ tmp250, _114,
 1034              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1035              		.loc 1 107 47 view .LVU279
 1036 0468 8220A0E1 		lsl	r2, r2, #1	@ tmp246, tmp245,
 1037 046c 14609DE5 		ldr	r6, [sp, #20]	@ tmp281, %sfp
 1038 0470 9E4525E0 		mla	r5, lr, r5, r4	@ tmp252, _47, tmp250, _48
 1039              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1040              		.loc 1 108 22 view .LVU280
 1041 0474 2384A0E1 		lsr	r8, r3, #8	@ word, word,
 1042 0478 061081E0 		add	r1, r1, r6	@ ivtmp.73, _114, tmp281
 1043              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1044              		.loc 1 107 47 view .LVU281
 1045 047c B2609CE1 		ldrh	r6, [ip, r2]	@ *_99, *_99
 1046 0480 7850E5E6 		uxtab	r5, r5, r8	@ tmp255, tmp252, word
 1047              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1048              		.loc 1 103 74 view .LVU282
 1049 0484 2088A0E1 		lsr	r8, r0, #16	@ tmp260, ivtmp.75,
 1050              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1051              		.loc 1 107 47 view .LVU283
 1052 0488 016086E2 		add	r6, r6, #1	@ tmp249, *_99,
 1053 048c 9E4828E0 		mla	r8, lr, r8, r4	@ tmp262, _47, tmp260, _48
 1054 0490 B2608CE1 		strh	r6, [ip, r2]	@ movhi	@ tmp249, *_99
 108:armwave.c     ****             }
 1055              		.loc 1 108 17 is_stmt 1 view .LVU284
 1056              	.LVL62:
  90:armwave.c     ****                 
 1057              		.loc 1 90 17 view .LVU285
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1058              		.loc 1 102 17 view .LVU286
 107:armwave.c     ****                 word >>= 8;
 1059              		.loc 1 107 17 view .LVU287
 1060              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1061              		.loc 1 103 34 is_stmt 0 view .LVU288
 1062 0494 00008AE0 		add	r0, r10, r0	@ _158, _43, ivtmp.75
 1063              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1064              		.loc 1 108 22 view .LVU289
 1065 0498 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 1066              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1067              		.loc 1 107 47 view .LVU290
 1068 049c 8550A0E1 		lsl	r5, r5, #1	@ tmp256, tmp255,
 1069 04a0 7220E8E6 		uxtab	r2, r8, r2	@ tmp265, tmp262, word
 1070              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1071              		.loc 1 103 74 view .LVU291
 1072 04a4 2088A0E1 		lsr	r8, r0, #16	@ tmp270, _158,
 1073              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1074              		.loc 1 107 47 view .LVU292
 1075 04a8 B5609CE1 		ldrh	r6, [ip, r5]	@ *_121, *_121
 1076              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1077              		.loc 1 108 22 view .LVU293
 1078 04ac 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1079              	.LVL63:
 1080              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1081              		.loc 1 107 47 view .LVU294
 1082 04b0 9E3823E0 		mla	r3, lr, r8, r3	@ tmp273, _47, tmp270, word
 1083 04b4 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 1084 04b8 016086E2 		add	r6, r6, #1	@ tmp259, *_121,
 1085 04bc B5608CE1 		strh	r6, [ip, r5]	@ movhi	@ tmp259, *_121
 108:armwave.c     ****             }
 1086              		.loc 1 108 17 is_stmt 1 view .LVU295
 1087              	.LVL64:
  90:armwave.c     ****                 
 1088              		.loc 1 90 17 view .LVU296
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1089              		.loc 1 102 17 view .LVU297
 107:armwave.c     ****                 word >>= 8;
 1090              		.loc 1 107 17 view .LVU298
 1091              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1092              		.loc 1 107 47 is_stmt 0 view .LVU299
 1093 04c0 043083E0 		add	r3, r3, r4	@ tmp274, tmp273, _48
 1094 04c4 B2509CE1 		ldrh	r5, [ip, r2]	@ *_143, *_143
 1095 04c8 8330A0E1 		lsl	r3, r3, #1	@ tmp275, tmp274,
 1096 04cc 14609DE5 		ldr	r6, [sp, #20]	@ tmp281, %sfp
 1097 04d0 015085E2 		add	r5, r5, #1	@ tmp269, *_143,
 1098 04d4 B2508CE1 		strh	r5, [ip, r2]	@ movhi	@ tmp269, *_143
 108:armwave.c     ****             }
 1099              		.loc 1 108 17 is_stmt 1 view .LVU300
 1100              	.LVL65:
  90:armwave.c     ****                 
 1101              		.loc 1 90 17 view .LVU301
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1102              		.loc 1 102 17 view .LVU302
 107:armwave.c     ****                 word >>= 8;
 1103              		.loc 1 107 17 view .LVU303
 1104              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1105              		.loc 1 84 9 is_stmt 0 view .LVU304
 1106 04d8 08509DE5 		ldr	r5, [sp, #8]	@ ivtmp.80, %sfp
 1107              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1108              		.loc 1 107 47 view .LVU305
 1109 04dc B3209CE1 		ldrh	r2, [ip, r3]	@ *_165, *_165
 1110              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1111              		.loc 1 84 9 view .LVU306
 1112 04e0 0B5085E0 		add	r5, r5, fp	@ tmp282, ivtmp.80, ivtmp.72
 1113 04e4 050059E1 		cmp	r9, r5	@ _12, tmp282
 1114              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1115              		.loc 1 107 47 view .LVU307
 1116 04e8 012082E2 		add	r2, r2, #1	@ tmp278, *_165,
 1117 04ec 060080E0 		add	r0, r0, r6	@ ivtmp.75, _158, tmp281
 1118              	.LVL66:
 107:armwave.c     ****                 word >>= 8;
 1119              		.loc 1 107 47 view .LVU308
 1120 04f0 B3208CE1 		strh	r2, [ip, r3]	@ movhi	@ tmp278, *_165
 108:armwave.c     ****             }
 1121              		.loc 1 108 17 is_stmt 1 view .LVU309
 1122              	.LVL67:
 1123              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1124              		.loc 1 84 9 is_stmt 0 view .LVU310
 1125 04f4 D5FFFF8A 		bhi	.L52		@,
 1126              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1127              		.loc 1 79 44 view .LVU311
 1128 04f8 10309DE5 		ldr	r3, [sp, #16]	@ w, %sfp
 1129              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1130              		.loc 1 79 5 view .LVU312
 1131 04fc 20209DE5 		ldr	r2, [sp, #32]	@ _155, %sfp
 1132              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1133              		.loc 1 79 44 view .LVU313
 1134 0500 013083E2 		add	r3, r3, #1	@ w, w,
 1135              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1136              		.loc 1 79 5 view .LVU314
 1137 0504 020053E1 		cmp	r3, r2	@ w, _155
 1138              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1139              		.loc 1 79 44 view .LVU315
 1140 0508 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 1141              	.LVL68:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1142              		.loc 1 79 44 view .LVU316
 1143 050c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.79, %sfp
 1144 0510 24309DE5 		ldr	r3, [sp, #36]	@ _50, %sfp
 1145              	.LVL69:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1146              		.loc 1 79 44 view .LVU317
 1147 0514 032082E0 		add	r2, r2, r3	@ ivtmp.79, ivtmp.79, _50
 1148 0518 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.79, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1149              		.loc 1 79 44 view .LVU318
 1150 051c 08209DE5 		ldr	r2, [sp, #8]	@ ivtmp.80, %sfp
 1151 0520 033042E0 		sub	r3, r2, r3	@ ivtmp.80, ivtmp.80, _50
 1152 0524 08308DE5 		str	r3, [sp, #8]	@ ivtmp.80, %sfp
 1153              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1154              		.loc 1 79 5 view .LVU319
 1155 0528 C5FFFF1A 		bne	.L54		@,
 1156 052c 2CB09DE5 		ldr	fp, [sp, #44]	@ yy, %sfp
 1157              	.LVL70:
 1158              	.L53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1159              		.loc 1 79 5 view .LVU320
 1160              	.LBE12:
 1161              	.LBE13:
 192:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1162              		.loc 1 192 9 is_stmt 1 view .LVU321
 1163              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1164              		.loc 1 185 51 is_stmt 0 view .LVU322
 1165 0530 0910A0E1 		mov	r1, r9	@, _12
 1166 0534 4C0097E5 		ldr	r0, [r7, #76]	@, g_armwave_state.wave_length
 1167 0538 FEFFFFEB 		bl	__aeabi_idiv		@
 1168              	.LVL71:
 1169              	@ armwave.c:192:         xx_rem -= g_armwave_state.slice_height;
 1170              		.loc 1 192 16 view .LVU323
 1171 053c 18309DE5 		ldr	r3, [sp, #24]	@ xx_rem, %sfp
 1172              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1173              		.loc 1 185 86 view .LVU324
 1174 0540 01B08BE2 		add	fp, fp, #1	@ yy, yy,
 1175              	@ armwave.c:192:         xx_rem -= g_armwave_state.slice_height;
 1176              		.loc 1 192 16 view .LVU325
 1177 0544 093043E0 		sub	r3, r3, r9	@ xx_rem, xx_rem, _12
 1178 0548 18308DE5 		str	r3, [sp, #24]	@ xx_rem, %sfp
 1179              	.LVL72:
 193:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1180              		.loc 1 193 9 is_stmt 1 view .LVU326
 1181              	@ armwave.c:193:         ypos += g_armwave_state.slice_height;   
 1182              		.loc 1 193 14 is_stmt 0 view .LVU327
 1183 054c 1C309DE5 		ldr	r3, [sp, #28]	@ ypos, %sfp
 1184              	.LVL73:
 1185              		.loc 1 193 14 view .LVU328
 1186 0550 093083E0 		add	r3, r3, r9	@ ypos, ypos, _12
 1187 0554 1C308DE5 		str	r3, [sp, #28]	@ ypos, %sfp
 1188              	.LVL74:
 1189              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1190              		.loc 1 185 5 view .LVU329
 1191 0558 0B0050E1 		cmp	r0, fp	@, yy
 1192 055c 92FFFF8A 		bhi	.L49		@,
 1193 0560 9A0900E0 		mul	r0, r10, r9	@ tmp283, _43, _12
 1194 0564 0340A0E1 		mov	r4, r3	@ ypos, ypos
 1195 0568 9B0000E0 		mul	r0, fp, r0	@ tmp284, yy, tmp283
 1196 056c 2008A0E1 		lsr	r0, r0, #16	@ _334, tmp284,
 1197              	.LVL75:
 1198              	.L47:
 194:armwave.c     ****     }
 195:armwave.c     **** 
 196:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 1199              		.loc 1 196 5 is_stmt 1 view .LVU330
 1200 0570 00008DE5 		str	r0, [sp]	@ _334,
 1201 0574 0B10A0E1 		mov	r1, fp	@, yy
 1202 0578 0930A0E1 		mov	r3, r9	@, _12
 1203 057c 0420A0E1 		mov	r2, r4	@, ypos
 1204 0580 2C009FE5 		ldr	r0, .L64+8	@,
 1205 0584 FEFFFFEB 		bl	printf		@
 1206              	.LVL76:
 197:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 198:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 199:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 1207              		.loc 1 199 5 view .LVU331
 1208 0588 18109DE5 		ldr	r1, [sp, #24]	@, %sfp
 1209 058c 0400A0E1 		mov	r0, r4	@, ypos
 1210              	@ armwave.c:200: }
 200:armwave.c     **** }
 1211              		.loc 1 200 1 is_stmt 0 view .LVU332
 1212 0590 34D08DE2 		add	sp, sp, #52	@,,
 1213              		.cfi_remember_state
 1214              		.cfi_def_cfa_offset 36
 1215              		@ sp needed	@
 1216 0594 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1217              		.cfi_restore 14
 1218              		.cfi_restore 11
 1219              		.cfi_restore 10
 1220              		.cfi_restore 9
 1221              		.cfi_restore 8
 1222              		.cfi_restore 7
 1223              		.cfi_restore 6
 1224              		.cfi_restore 5
 1225              		.cfi_restore 4
 1226              		.cfi_def_cfa_offset 0
 1227              	@ armwave.c:199:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 199:armwave.c     **** }
 1228              		.loc 1 199 5 view .LVU333
 1229 0598 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 1230              	.LVL77:
 1231              	.L55:
 1232              		.cfi_restore_state
 1233              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 1234              		.loc 1 181 52 view .LVU334
 1235 059c 1C008DE5 		str	r0, [sp, #28]	@ _334, %sfp
 1236              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1237              		.loc 1 185 12 view .LVU335
 1238 05a0 00B0A0E1 		mov	fp, r0	@ yy, _334
 1239 05a4 0040A0E1 		mov	r4, r0	@ ypos, _334
 1240 05a8 F0FFFFEA 		b	.L47		@
 1241              	.L65:
 1242              		.align	2
 1243              	.L64:
 1244 05ac 00000000 		.word	g_armwave_state
 1245 05b0 20000000 		.word	.LC2
 1246 05b4 54000000 		.word	.LC3
 1247              		.cfi_endproc
 1248              	.LFE61:
 1250              		.align	2
 1251              		.global	armwave_setup_render
 1252              		.syntax unified
 1253              		.arm
 1254              		.fpu vfp
 1256              	armwave_setup_render:
 1257              	.LVL78:
 1258              	.LFB62:
 201:armwave.c     **** 
 202:armwave.c     **** /*
 203:armwave.c     ****  * Setup the renderer with passed parameters.
 204:armwave.c     ****  */
 205:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 206:armwave.c     **** {
 1259              		.loc 1 206 1 is_stmt 1 view -0
 1260              		.cfi_startproc
 1261              		@ args = 12, pretend = 0, frame = 0
 1262              		@ frame_needed = 0, uses_anonymous_args = 0
 207:armwave.c     ****     uint32_t length, xx;
 1263              		.loc 1 207 5 view .LVU337
 208:armwave.c     ****     float points_per_pixel;
 1264              		.loc 1 208 5 view .LVU338
 209:armwave.c     **** 
 210:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1265              		.loc 1 210 5 view .LVU339
 1266              	@ armwave.c:206: {
 206:armwave.c     ****     uint32_t length, xx;
 1267              		.loc 1 206 1 is_stmt 0 view .LVU340
 1268 05b8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1269              		.cfi_def_cfa_offset 32
 1270              		.cfi_offset 4, -32
 1271              		.cfi_offset 5, -28
 1272              		.cfi_offset 6, -24
 1273              		.cfi_offset 7, -20
 1274              		.cfi_offset 8, -16
 1275              		.cfi_offset 9, -12
 1276              		.cfi_offset 10, -8
 1277              		.cfi_offset 14, -4
 1278 05bc 028B2DED 		vpush.64	{d8}	@
 1279              		.cfi_def_cfa_offset 40
 1280              		.cfi_offset 80, -40
 1281              		.cfi_offset 81, -36
 1282 05c0 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1283 05c4 0170A0E1 		mov	r7, r1	@ end_point, end_point
 1284 05c8 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 1285 05cc 10D04DE2 		sub	sp, sp, #16	@,,
 1286              		.cfi_def_cfa_offset 56
 1287              	@ armwave.c:206: {
 206:armwave.c     ****     uint32_t length, xx;
 1288              		.loc 1 206 1 view .LVU341
 1289 05d0 38608DE2 		add	r6, sp, #56	@,,
 1290 05d4 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1291 05d8 401196E8 		ldm	r6, {r6, r8, ip}	@,,,
 1292              	@ armwave.c:210:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1293              		.loc 1 210 5 view .LVU342
 1294 05dc 00308DE5 		str	r3, [sp]	@ wave_stride,
 1295 05e0 0230A0E1 		mov	r3, r2	@, waves_max
 1296              	.LVL79:
 1297              		.loc 1 210 5 view .LVU343
 1298 05e4 40118DE9 		stmib	sp, {r6, r8, ip}	@,,,
 1299 05e8 0120A0E1 		mov	r2, r1	@, end_point
 1300              	.LVL80:
 1301              		.loc 1 210 5 view .LVU344
 1302 05ec 0010A0E1 		mov	r1, r0	@, start_point
 1303              	.LVL81:
 1304              		.loc 1 210 5 view .LVU345
 1305 05f0 CC019FE5 		ldr	r0, .L80+8	@,
 1306              	.LVL82:
 1307              		.loc 1 210 5 view .LVU346
 1308 05f4 FEFFFFEB 		bl	printf		@
 1309              	.LVL83:
 211:armwave.c     **** 
 212:armwave.c     ****     // TODO these asserts should instead raise PyExc
 213:armwave.c     ****     assert(start_point < end_point);
 1310              		.loc 1 213 5 is_stmt 1 view .LVU347
 1311 05f8 070055E1 		cmp	r5, r7	@ start_point, end_point
 1312 05fc 5F00002A 		bcs	.L77		@,
 214:armwave.c     **** 
 215:armwave.c     ****     /*
 216:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 217:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 218:armwave.c     ****     if(target_height == 256) {
 219:armwave.c     ****         g_armwave_state.row_shift = 8;
 220:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 221:armwave.c     ****     } else if(target_height == 512) {
 222:armwave.c     ****         g_armwave_state.row_shift = 9;
 223:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 224:armwave.c     ****     } else if(target_height == 1024) {
 225:armwave.c     ****         g_armwave_state.row_shift = 10;
 226:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 227:armwave.c     ****     } else if(target_height == 2048) {
 228:armwave.c     ****         g_armwave_state.row_shift = 11;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 230:armwave.c     ****     }
 231:armwave.c     ****     */
 232:armwave.c     **** 
 233:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 234:armwave.c     ****     g_armwave_state.xstride = target_height;
 1313              		.loc 1 234 5 view .LVU348
 1314              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1315              		.loc 1 235 49 is_stmt 0 view .LVU349
 1316 0600 908A07EE 		vmov	s15, r8	@ int	@ target_height, target_height
 1317 0604 6C7A9FED 		vldr.32	s14, .L80	@ tmp171,
 1318              	@ armwave.c:245:     g_armwave_state.wave_length = end_point - start_point;
 236:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 237:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 238:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 239:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 240:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 241:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 242:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 243:armwave.c     ****     g_armwave_state.target_width = target_width;
 244:armwave.c     ****     g_armwave_state.target_height = target_height;
 245:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1319              		.loc 1 245 45 view .LVU350
 1320 0608 055047E0 		sub	r5, r7, r5	@ _13, end_point, start_point
 1321              	.LVL84:
 1322              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1323              		.loc 1 242 90 view .LVU351
 1324 060c 047086E2 		add	r7, r6, #4	@ tmp182, target_width,
 1325              	.LVL85:
 1326              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1327              		.loc 1 235 49 view .LVU352
 1328 0610 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp170, target_height
 1329              	@ armwave.c:234:     g_armwave_state.xstride = target_height;
 234:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1330              		.loc 1 234 29 view .LVU353
 1331 0614 AC419FE5 		ldr	r4, .L80+12	@ tmp236,
 1332              	@ armwave.c:240:     g_armwave_state.size = target_height * target_width;
 240:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1333              		.loc 1 240 42 view .LVU354
 1334 0618 980602E0 		mul	r2, r8, r6	@ tmp179, target_height, target_width
 1335              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1336              		.loc 1 242 95 view .LVU355
 1337 061c 877387E0 		add	r7, r7, r7, lsl #7	@ tmp185, tmp182, tmp182,
 1338              	@ armwave.c:241:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 241:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1339              		.loc 1 241 37 view .LVU356
 1340 0620 023CA0E3 		mov	r3, #512	@ tmp181,
 1341              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1342              		.loc 1 242 95 view .LVU357
 1343 0624 8771A0E1 		lsl	r7, r7, #3	@ tmp186, tmp185,
 1344              	@ armwave.c:249:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 246:armwave.c     **** 
 247:armwave.c     ****     // Calculate compound scaler
 248:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 249:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1345              		.loc 1 249 40 view .LVU358
 1346 0628 0510A0E1 		mov	r1, r5	@, _13
 1347              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1348              		.loc 1 235 49 view .LVU359
 1349 062c 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp170, tmp171
 1350              	@ armwave.c:240:     g_armwave_state.size = target_height * target_width;
 240:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1351              		.loc 1 240 26 view .LVU360
 1352 0630 542084E5 		str	r2, [r4, #84]	@ tmp179, g_armwave_state.size
 1353              	@ armwave.c:241:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 241:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1354              		.loc 1 241 37 view .LVU361
 1355 0634 403084E5 		str	r3, [r4, #64]	@ tmp181, g_armwave_state.bitdepth_height
 1356              	@ armwave.c:234:     g_armwave_state.xstride = target_height;
 234:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1357              		.loc 1 234 29 view .LVU362
 1358 0638 2C8084E5 		str	r8, [r4, #44]	@ target_height, g_armwave_state.xstride
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1359              		.loc 1 235 5 is_stmt 1 view .LVU363
 1360              	@ armwave.c:237:     g_armwave_state.wave_stride = wave_stride;
 237:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1361              		.loc 1 237 33 is_stmt 0 view .LVU364
 1362 063c 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1363              	@ armwave.c:238:     g_armwave_state.waves_max = waves_max;
 238:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1364              		.loc 1 238 31 view .LVU365
 1365 0640 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1366              	@ armwave.c:239:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 239:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1367              		.loc 1 239 27 view .LVU366
 1368 0644 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 1369              	@ armwave.c:243:     g_armwave_state.target_width = target_width;
 243:armwave.c     ****     g_armwave_state.target_height = target_height;
 1370              		.loc 1 243 34 view .LVU367
 1371 0648 586084E5 		str	r6, [r4, #88]	@ target_width, g_armwave_state.target_width
 1372              	@ armwave.c:244:     g_armwave_state.target_height = target_height;
 244:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1373              		.loc 1 244 35 view .LVU368
 1374 064c 5C8084E5 		str	r8, [r4, #92]	@ target_height, g_armwave_state.target_height
 1375              	@ armwave.c:245:     g_armwave_state.wave_length = end_point - start_point;
 245:armwave.c     **** 
 1376              		.loc 1 245 33 view .LVU369
 1377 0650 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1378              	@ armwave.c:249:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1379              		.loc 1 249 40 view .LVU370
 1380 0654 0600A0E1 		mov	r0, r6	@, target_width
 1381              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1382              		.loc 1 242 34 view .LVU371
 1383 0658 507084E5 		str	r7, [r4, #80]	@ tmp186, g_armwave_state.ch_buff_size
 1384              	@ armwave.c:236:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 236:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1385              		.loc 1 236 30 view .LVU372
 1386 065c E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp174, _3
 1387              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1388              		.loc 1 235 33 view .LVU373
 1389 0660 0A7AC4ED 		vstr.32	s15, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 236:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1390              		.loc 1 236 5 is_stmt 1 view .LVU374
 1391              	@ armwave.c:236:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 236:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1392              		.loc 1 236 30 is_stmt 0 view .LVU375
 1393 0664 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp174, g_armwave_state.vscale
 237:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1394              		.loc 1 237 5 is_stmt 1 view .LVU376
 238:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1395              		.loc 1 238 5 view .LVU377
 239:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1396              		.loc 1 239 5 view .LVU378
 240:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1397              		.loc 1 240 5 view .LVU379
 241:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1398              		.loc 1 241 5 view .LVU380
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1399              		.loc 1 242 5 view .LVU381
 243:armwave.c     ****     g_armwave_state.target_height = target_height;
 1400              		.loc 1 243 5 view .LVU382
 244:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1401              		.loc 1 244 5 view .LVU383
 245:armwave.c     **** 
 1402              		.loc 1 245 5 view .LVU384
 248:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1403              		.loc 1 248 5 view .LVU385
 1404              	@ armwave.c:249:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1405              		.loc 1 249 40 is_stmt 0 view .LVU386
 1406 0668 FEFFFFEB 		bl	__aeabi_idiv		@
 1407              	.LVL86:
 1408              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 250:armwave.c     **** 
 251:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1409              		.loc 1 251 5 view .LVU387
 1410 066c 0138A0E3 		mov	r3, #65536	@ tmp197,
 1411 0670 08308DE5 		str	r3, [sp, #8]	@ tmp197,
 1412 0674 0710A0E1 		mov	r1, r7	@, tmp186
 1413 0678 04508DE5 		str	r5, [sp, #4]	@ _13,
 1414 067c 00608DE5 		str	r6, [sp]	@ target_width,
 1415              	@ armwave.c:249:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 249:armwave.c     **** 
 1416              		.loc 1 249 72 view .LVU388
 1417 0680 00C8A0E1 		lsl	ip, r0, #16	@ _17,,
 1418              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1419              		.loc 1 251 5 view .LVU389
 1420 0684 0C30A0E1 		mov	r3, ip	@, _17
 1421 0688 0C20A0E1 		mov	r2, ip	@, tmp3
 1422 068c 38019FE5 		ldr	r0, .L80+16	@,
 1423              	@ armwave.c:248:     g_armwave_state.cmp_x_bitdepth_scale = \
 248:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1424              		.loc 1 248 42 view .LVU390
 1425 0690 24C084E5 		str	ip, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1426              		.loc 1 251 5 is_stmt 1 view .LVU391
 1427 0694 FEFFFFEB 		bl	printf		@
 1428              	.LVL87:
 252:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 253:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 254:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 255:armwave.c     **** 
 256:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 257:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 258:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 259:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1429              		.loc 1 259 5 view .LVU392
 1430              	@ armwave.c:261:     if(g_armwave_state.ch1_buffer != NULL)
 260:armwave.c     **** 
 261:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1431              		.loc 1 261 23 is_stmt 0 view .LVU393
 1432 0698 040094E5 		ldr	r0, [r4, #4]	@ _18, g_armwave_state.ch1_buffer
 1433              	@ armwave.c:259:     g_armwave_state.slice_height = 64; // 64;  
 259:armwave.c     **** 
 1434              		.loc 1 259 34 view .LVU394
 1435 069c 4030A0E3 		mov	r3, #64	@ tmp199,
 1436              	@ armwave.c:261:     if(g_armwave_state.ch1_buffer != NULL)
 1437              		.loc 1 261 7 view .LVU395
 1438 06a0 000050E3 		cmp	r0, #0	@ _18,
 1439              	@ armwave.c:259:     g_armwave_state.slice_height = 64; // 64;  
 259:armwave.c     **** 
 1440              		.loc 1 259 34 view .LVU396
 1441 06a4 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1442              		.loc 1 261 5 is_stmt 1 view .LVU397
 1443              	@ armwave.c:261:     if(g_armwave_state.ch1_buffer != NULL)
 1444              		.loc 1 261 7 is_stmt 0 view .LVU398
 1445 06a8 0000000A 		beq	.L68		@,
 262:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1446              		.loc 1 262 9 is_stmt 1 view .LVU399
 1447 06ac FEFFFFEB 		bl	free		@
 1448              	.LVL88:
 1449              	.L68:
 263:armwave.c     **** 
 264:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1450              		.loc 1 264 5 view .LVU400
 1451              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1452              		.loc 1 264 34 is_stmt 0 view .LVU401
 1453 06b0 0110A0E3 		mov	r1, #1	@,
 1454 06b4 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1455 06b8 FEFFFFEB 		bl	calloc		@
 1456              	.LVL89:
 1457              	@ armwave.c:266:     assert(g_armwave_state.ch1_buffer != NULL);
 265:armwave.c     **** 
 266:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1458              		.loc 1 266 5 view .LVU402
 1459 06bc 000050E3 		cmp	r0, #0	@ _21,
 1460              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 264:armwave.c     **** 
 1461              		.loc 1 264 34 view .LVU403
 1462 06c0 0070A0E1 		mov	r7, r0	@ _21,
 1463              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 264:armwave.c     **** 
 1464              		.loc 1 264 32 view .LVU404
 1465 06c4 040084E5 		str	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1466              		.loc 1 266 5 is_stmt 1 view .LVU405
 1467 06c8 3600000A 		beq	.L78		@,
 267:armwave.c     **** 
 268:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 269:armwave.c     ****     length = end_point - start_point;
 1468              		.loc 1 269 5 view .LVU406
 1469              	.LVL90:
 270:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1470              		.loc 1 270 5 view .LVU407
 1471              	@ armwave.c:270:     points_per_pixel = length / ((float)(target_width));
 1472              		.loc 1 270 34 is_stmt 0 view .LVU408
 1473 06cc 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1474              	@ armwave.c:270:     points_per_pixel = length / ((float)(target_width));
 1475              		.loc 1 270 22 view .LVU409
 1476 06d0 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1477              	@ armwave.c:271:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1478              		.loc 1 271 60 view .LVU410
 1479 06d4 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp243, g_armwave_state.slice_height
 1480              	@ armwave.c:272:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 272:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1481              		.loc 1 272 40 view .LVU411
 1482 06d8 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1483              	@ armwave.c:270:     points_per_pixel = length / ((float)(target_width));
 270:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1484              		.loc 1 270 34 view .LVU412
 1485 06dc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp210, target_width
 1486              	@ armwave.c:270:     points_per_pixel = length / ((float)(target_width));
 270:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1487              		.loc 1 270 22 view .LVU413
 1488 06e0 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp209, _13
 1489              	@ armwave.c:271:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1490              		.loc 1 271 60 view .LVU414
 1491 06e4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp213, tmp243
 1492              	@ armwave.c:270:     points_per_pixel = length / ((float)(target_width));
 270:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1493              		.loc 1 270 22 view .LVU415
 1494 06e8 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp209, tmp210
 1495              	.LVL91:
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1496              		.loc 1 271 5 is_stmt 1 view .LVU416
 1497              	@ armwave.c:271:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1498              		.loc 1 271 60 is_stmt 0 view .LVU417
 1499 06ec 087A67EE 		vmul.f32	s15, s14, s16	@ tmp215, tmp213, points_per_pixel
 1500              	@ armwave.c:271:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 271:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1501              		.loc 1 271 41 view .LVU418
 1502 06f0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp216, tmp215
 1503 06f4 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp216, g_armwave_state.slice_record_height
 1504              		.loc 1 272 5 is_stmt 1 view .LVU419
 1505              	@ armwave.c:272:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1506              		.loc 1 272 40 is_stmt 0 view .LVU420
 1507 06f8 FEFFFFEB 		bl	malloc		@
 1508              	.LVL92:
 1509              	@ armwave.c:274:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 273:armwave.c     **** 
 274:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1510              		.loc 1 274 5 view .LVU421
 1511 06fc 000050E3 		cmp	r0, #0	@ _29,
 1512              	@ armwave.c:272:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 272:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1513              		.loc 1 272 40 view .LVU422
 1514 0700 0060A0E1 		mov	r6, r0	@ _29,
 1515              	@ armwave.c:272:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 272:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1516              		.loc 1 272 38 view .LVU423
 1517 0704 840084E5 		str	r0, [r4, #132]	@ _29, g_armwave_state.xcoord_to_xpixel
 1518              		.loc 1 274 5 is_stmt 1 view .LVU424
 1519 0708 2100000A 		beq	.L79		@,
 1520              	@ armwave.c:277:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 275:armwave.c     **** 
 276:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 277:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1521              		.loc 1 277 54 is_stmt 0 view .LVU425
 1522 070c 2B7ADFED 		vldr.32	s15, .L80+4	@ tmp224,
 1523 0710 020040E2 		sub	r0, r0, #2	@ ivtmp.86, _29,
 1524              	@ armwave.c:276:     for(xx = 0; xx < length; xx++) {
 276:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1525              		.loc 1 276 12 view .LVU426
 1526 0714 0030A0E3 		mov	r3, #0	@ xx,
 1527              	@ armwave.c:277:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1528              		.loc 1 277 54 view .LVU427
 1529 0718 887A87EE 		vdiv.f32	s14, s15, s16	@ _30, tmp224, points_per_pixel
 1530              	.L71:
 1531              	.LVL93:
 1532              		.loc 1 277 9 is_stmt 1 discriminator 3 view .LVU428
 1533              	@ armwave.c:277:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1534              		.loc 1 277 74 is_stmt 0 discriminator 3 view .LVU429
 1535 071c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1536              	@ armwave.c:276:     for(xx = 0; xx < length; xx++) {
 276:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1537              		.loc 1 276 32 discriminator 3 view .LVU430
 1538 0720 013083E2 		add	r3, r3, #1	@ xx, xx,
 1539              	.LVL94:
 1540              	@ armwave.c:276:     for(xx = 0; xx < length; xx++) {
 276:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1541              		.loc 1 276 5 discriminator 3 view .LVU431
 1542 0724 030055E1 		cmp	r5, r3	@ _13, xx
 1543              	@ armwave.c:277:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1544              		.loc 1 277 74 discriminator 3 view .LVU432
 1545 0728 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, xx
 1546 072c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, _30
 1547              	@ armwave.c:277:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1548              		.loc 1 277 46 discriminator 3 view .LVU433
 1549 0730 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp227, tmp226
 1550 0734 902A17EE 		vmov	r2, s15	@ int	@ tmp227, tmp227
 1551 0738 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp227, MEM[base: _99, offset: 0B]
 1552              	@ armwave.c:276:     for(xx = 0; xx < length; xx++) {
 276:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 276 5 discriminator 3 view .LVU434
 1554 073c F6FFFF1A 		bne	.L71		@,
 278:armwave.c     **** 
 279:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 280:armwave.c     ****     }
 281:armwave.c     **** 
 282:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1555              		.loc 1 282 5 is_stmt 1 view .LVU435
 1556              	@ armwave.c:282:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1557              		.loc 1 282 34 is_stmt 0 view .LVU436
 1558 0740 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1559 0744 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1560 0748 FEFFFFEB 		bl	malloc		@
 1561              	.LVL95:
 1562              	@ armwave.c:284:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 283:armwave.c     **** 
 284:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1563              		.loc 1 284 5 view .LVU437
 1564 074c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1565 0750 0620A0E1 		mov	r2, r6	@, _29
 1566 0754 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1567 0758 0710A0E1 		mov	r1, r7	@, _21
 1568              	@ armwave.c:282:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 282:armwave.c     **** 
 1569              		.loc 1 282 34 view .LVU438
 1570 075c 00C0A0E1 		mov	ip, r0	@ tmp231,
 1571              	@ armwave.c:284:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1572              		.loc 1 284 5 view .LVU439
 1573 0760 0030A0E1 		mov	r3, r0	@, tmp231
 1574 0764 64009FE5 		ldr	r0, .L80+20	@,
 1575              	@ armwave.c:282:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 282:armwave.c     **** 
 1576              		.loc 1 282 32 view .LVU440
 1577 0768 68C084E5 		str	ip, [r4, #104]	@ tmp231, g_armwave_state.out_pixbuf
 1578              		.loc 1 284 5 is_stmt 1 view .LVU441
 1579 076c FEFFFFEB 		bl	printf		@
 1580              	.LVL96:
 285:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 286:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 287:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 288:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 289:armwave.c     **** 
 290:armwave.c     ****     malloc_stats();
 1581              		.loc 1 290 5 view .LVU442
 1582              	@ armwave.c:291: }
 291:armwave.c     **** }
 1583              		.loc 1 291 1 is_stmt 0 view .LVU443
 1584 0770 10D08DE2 		add	sp, sp, #16	@,,
 1585              		.cfi_remember_state
 1586              		.cfi_def_cfa_offset 40
 1587              		@ sp needed	@
 1588 0774 028BBDEC 		vldm	sp!, {d8}	@
 1589              		.cfi_restore 80
 1590              		.cfi_restore 81
 1591              		.cfi_def_cfa_offset 32
 1592              	.LVL97:
 1593              		.loc 1 291 1 view .LVU444
 1594 0778 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1595              		.cfi_restore 14
 1596              		.cfi_restore 10
 1597              		.cfi_restore 9
 1598              		.cfi_restore 8
 1599              		.cfi_restore 7
 1600              		.cfi_restore 6
 1601              		.cfi_restore 5
 1602              		.cfi_restore 4
 1603              		.cfi_def_cfa_offset 0
 1604              	.LVL98:
 1605              	@ armwave.c:290:     malloc_stats();
 290:armwave.c     **** }
 1606              		.loc 1 290 5 view .LVU445
 1607 077c FEFFFFEA 		b	malloc_stats		@
 1608              	.LVL99:
 1609              	.L77:
 1610              		.cfi_restore_state
 213:armwave.c     **** 
 1611              		.loc 1 213 5 is_stmt 1 discriminator 1 view .LVU446
 1612 0780 4C309FE5 		ldr	r3, .L80+24	@,
 1613 0784 D520A0E3 		mov	r2, #213	@,
 1614 0788 48109FE5 		ldr	r1, .L80+28	@,
 1615 078c 48009FE5 		ldr	r0, .L80+32	@,
 1616 0790 FEFFFFEB 		bl	__assert_fail		@
 1617              	.LVL100:
 1618              	.L79:
 274:armwave.c     **** 
 1619              		.loc 1 274 5 discriminator 1 view .LVU447
 1620 0794 38309FE5 		ldr	r3, .L80+24	@,
 1621 0798 40209FE5 		ldr	r2, .L80+36	@,
 1622 079c 34109FE5 		ldr	r1, .L80+28	@,
 1623 07a0 3C009FE5 		ldr	r0, .L80+40	@,
 1624 07a4 FEFFFFEB 		bl	__assert_fail		@
 1625              	.LVL101:
 1626              	.L78:
 266:armwave.c     **** 
 1627              		.loc 1 266 5 discriminator 1 view .LVU448
 1628 07a8 24309FE5 		ldr	r3, .L80+24	@,
 1629 07ac 34209FE5 		ldr	r2, .L80+44	@,
 1630 07b0 20109FE5 		ldr	r1, .L80+28	@,
 1631 07b4 30009FE5 		ldr	r0, .L80+48	@,
 1632 07b8 FEFFFFEB 		bl	__assert_fail		@
 1633              	.LVL102:
 1634              	.L81:
 1635              		.align	2
 1636              	.L80:
 1637 07bc 00007F43 		.word	1132396544
 1638 07c0 0000803F 		.word	1065353216
 1639 07c4 8C000000 		.word	.LC4
 1640 07c8 00000000 		.word	g_armwave_state
 1641 07cc DC000000 		.word	.LC7
 1642 07d0 8C010000 		.word	.LC10
 1643 07d4 00000000 		.word	.LANCHOR0
 1644 07d8 B8000000 		.word	.LC5
 1645 07dc C4000000 		.word	.LC6
 1646 07e0 12010000 		.word	274
 1647 07e4 60010000 		.word	.LC9
 1648 07e8 0A010000 		.word	266
 1649 07ec 3C010000 		.word	.LC8
 1650              		.cfi_endproc
 1651              	.LFE62:
 1653              		.align	2
 1654              		.global	armwave_set_wave_pointer
 1655              		.syntax unified
 1656              		.arm
 1657              		.fpu vfp
 1659              	armwave_set_wave_pointer:
 1660              	.LVL103:
 1661              	.LFB63:
 292:armwave.c     **** 
 293:armwave.c     **** /*
 294:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 295:armwave.c     ****  * in the future.
 296:armwave.c     ****  */
 297:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 298:armwave.c     **** {
 1662              		.loc 1 298 1 view -0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 299:armwave.c     ****     assert(wave_buffer != NULL);
 1666              		.loc 1 299 5 view .LVU450
 1667 07f0 000050E3 		cmp	r0, #0	@ wave_buffer
 1668              		.loc 1 299 5 is_stmt 0 view .LVU451
 1669 07f4 0200000A 		beq	.L87		@,
 300:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1670              		.loc 1 300 5 is_stmt 1 view .LVU452
 1671              	@ armwave.c:300:     g_armwave_state.wave_buffer = wave_buffer;
 1672              		.loc 1 300 33 is_stmt 0 view .LVU453
 1673 07f8 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1674 07fc 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1675 0800 1EFF2FE1 		bx	lr	@
 1676              	.L87:
 299:armwave.c     ****     assert(wave_buffer != NULL);
 1677              		.loc 1 299 5 is_stmt 1 discriminator 1 view .LVU454
 1678              	@ armwave.c:298: {
 298:armwave.c     ****     assert(wave_buffer != NULL);
 1679              		.loc 1 298 1 is_stmt 0 discriminator 1 view .LVU455
 1680 0804 10402DE9 		push	{r4, lr}	@
 1681              		.cfi_def_cfa_offset 8
 1682              		.cfi_offset 4, -8
 1683              		.cfi_offset 14, -4
 1684              	@ armwave.c:299:     assert(wave_buffer != NULL);
 299:armwave.c     ****     assert(wave_buffer != NULL);
 1685              		.loc 1 299 5 discriminator 1 view .LVU456
 1686 0808 10309FE5 		ldr	r3, .L88+4	@,
 1687 080c 10209FE5 		ldr	r2, .L88+8	@,
 1688 0810 10109FE5 		ldr	r1, .L88+12	@,
 1689 0814 10009FE5 		ldr	r0, .L88+16	@,
 1690              	.LVL104:
 299:armwave.c     ****     assert(wave_buffer != NULL);
 1691              		.loc 1 299 5 discriminator 1 view .LVU457
 1692 0818 FEFFFFEB 		bl	__assert_fail		@
 1693              	.LVL105:
 1694              	.L89:
 1695              		.align	2
 1696              	.L88:
 1697 081c 00000000 		.word	g_armwave_state
 1698 0820 18000000 		.word	.LANCHOR0+24
 1699 0824 2B010000 		.word	299
 1700 0828 B8000000 		.word	.LC5
 1701 082c B0010000 		.word	.LC11
 1702              		.cfi_endproc
 1703              	.LFE63:
 1705              		.align	2
 1706              		.global	armwave_set_wave_pointer_as_testbuf
 1707              		.syntax unified
 1708              		.arm
 1709              		.fpu vfp
 1711              	armwave_set_wave_pointer_as_testbuf:
 1712              	.LVL106:
 1713              	.LFB64:
 301:armwave.c     **** }
 302:armwave.c     **** 
 303:armwave.c     **** /*
 304:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 305:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 306:armwave.c     ****  */
 307:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 308:armwave.c     **** {
 1714              		.loc 1 308 1 is_stmt 1 view -0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 309:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1719              		.loc 1 309 5 view .LVU459
 1720              	@ armwave.c:309:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1721              		.loc 1 309 29 is_stmt 0 view .LVU460
 1722 0830 24309FE5 		ldr	r3, .L93	@ tmp117,
 1723              	@ armwave.c:309:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1724              		.loc 1 309 7 view .LVU461
 1725 0834 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1726 0838 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1727 083c 0400003A 		bcc	.L92		@,
 310:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 311:armwave.c     ****         return;
 312:armwave.c     ****     }
 313:armwave.c     **** 
 314:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1728              		.loc 1 314 5 is_stmt 1 view .LVU462
 1729              	@ armwave.c:314:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1730              		.loc 1 314 111 is_stmt 0 view .LVU463
 1731 0840 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1732              	@ armwave.c:314:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1733              		.loc 1 314 68 view .LVU464
 1734 0844 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1735 0848 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1736              	.LVL107:
 1737              	@ armwave.c:314:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1738              		.loc 1 314 33 view .LVU465
 1739 084c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1740              	@ armwave.c:315: }
 315:armwave.c     **** }
 1741              		.loc 1 315 1 view .LVU466
 1742 0850 1EFF2FE1 		bx	lr	@
 1743              	.LVL108:
 1744              	.L92:
 310:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1745              		.loc 1 310 9 is_stmt 1 view .LVU467
 1746 0854 04009FE5 		ldr	r0, .L93+4	@,
 1747              	.LVL109:
 310:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1748              		.loc 1 310 9 is_stmt 0 view .LVU468
 1749 0858 FEFFFFEA 		b	puts		@
 1750              	.LVL110:
 1751              	.L94:
 1752              		.align	2
 1753              	.L93:
 1754 085c 00000000 		.word	g_armwave_state
 1755 0860 C4010000 		.word	.LC12
 1756              		.cfi_endproc
 1757              	.LFE64:
 1759              		.align	2
 1760              		.global	armwave_set_wave_pointer_u32
 1761              		.syntax unified
 1762              		.arm
 1763              		.fpu vfp
 1765              	armwave_set_wave_pointer_u32:
 1766              	.LVL111:
 1767              	.LFB65:
 316:armwave.c     **** 
 317:armwave.c     **** /*
 318:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 319:armwave.c     ****  * disjointed buffers in the future.
 320:armwave.c     ****  */
 321:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 322:armwave.c     **** {
 1768              		.loc 1 322 1 is_stmt 1 view -0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1772              		.loc 1 323 5 view .LVU470
 1773 0864 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1774              		.loc 1 323 5 is_stmt 0 view .LVU471
 1775 0868 0200000A 		beq	.L100		@,
 324:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1776              		.loc 1 324 5 is_stmt 1 view .LVU472
 1777              	@ armwave.c:324:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1778              		.loc 1 324 33 is_stmt 0 view .LVU473
 1779 086c 1C309FE5 		ldr	r3, .L101	@ tmp117,
 1780 0870 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1781 0874 1EFF2FE1 		bx	lr	@
 1782              	.L100:
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1783              		.loc 1 323 5 is_stmt 1 discriminator 1 view .LVU474
 1784              	@ armwave.c:322: {
 322:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1785              		.loc 1 322 1 is_stmt 0 discriminator 1 view .LVU475
 1786 0878 10402DE9 		push	{r4, lr}	@
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 4, -8
 1789              		.cfi_offset 14, -4
 1790              	@ armwave.c:323:     assert(wave_buffer_ptr != 0);
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1791              		.loc 1 323 5 discriminator 1 view .LVU476
 1792 087c 10309FE5 		ldr	r3, .L101+4	@,
 1793 0880 10209FE5 		ldr	r2, .L101+8	@,
 1794 0884 10109FE5 		ldr	r1, .L101+12	@,
 1795 0888 10009FE5 		ldr	r0, .L101+16	@,
 1796              	.LVL112:
 323:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1797              		.loc 1 323 5 discriminator 1 view .LVU477
 1798 088c FEFFFFEB 		bl	__assert_fail		@
 1799              	.LVL113:
 1800              	.L102:
 1801              		.align	2
 1802              	.L101:
 1803 0890 00000000 		.word	g_armwave_state
 1804 0894 34000000 		.word	.LANCHOR0+52
 1805 0898 43010000 		.word	323
 1806 089c B8000000 		.word	.LC5
 1807 08a0 00020000 		.word	.LC13
 1808              		.cfi_endproc
 1809              	.LFE65:
 1811              		.align	2
 1812              		.global	armwave_clear_buffer
 1813              		.syntax unified
 1814              		.arm
 1815              		.fpu vfp
 1817              	armwave_clear_buffer:
 1818              	.LVL114:
 1819              	.LFB66:
 325:armwave.c     **** }
 326:armwave.c     **** 
 327:armwave.c     **** /*
 328:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 329:armwave.c     ****  */
 330:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 331:armwave.c     **** {
 1820              		.loc 1 331 1 is_stmt 1 view -0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 332:armwave.c     ****     // Flags ignored, only one buffer cleared
 333:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1825              		.loc 1 333 5 view .LVU479
 1826              	@ armwave.c:333:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1827              		.loc 1 333 58 is_stmt 0 view .LVU480
 1828 08a4 0C309FE5 		ldr	r3, .L104	@ tmp114,
 1829              	@ armwave.c:333:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1830              		.loc 1 333 5 view .LVU481
 1831 08a8 0010A0E3 		mov	r1, #0	@,
 1832 08ac 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1833 08b0 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1834              	.LVL115:
 1835              		.loc 1 333 5 view .LVU482
 1836 08b4 FEFFFFEA 		b	memset		@
 1837              	.LVL116:
 1838              	.L105:
 1839              		.align	2
 1840              	.L104:
 1841 08b8 00000000 		.word	g_armwave_state
 1842              		.cfi_endproc
 1843              	.LFE66:
 1845              		.align	2
 1846              		.global	armwave_set_channel_colour
 1847              		.syntax unified
 1848              		.arm
 1849              		.fpu vfp
 1851              	armwave_set_channel_colour:
 1852              	.LVL117:
 1853              	.LFB67:
 334:armwave.c     **** }
 335:armwave.c     **** 
 336:armwave.c     **** /*
 337:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 338:armwave.c     ****  */
 339:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 340:armwave.c     **** {
 1854              		.loc 1 340 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 0
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 1858              		@ link register save eliminated.
 341:armwave.c     ****     // Only 1ch supported for now
 342:armwave.c     ****     switch(ch) {
 1859              		.loc 1 342 5 view .LVU484
 1860 08bc 010050E3 		cmp	r0, #1	@ ch,
 343:armwave.c     ****         case 1:
 344:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1861              		.loc 1 344 13 view .LVU485
 1862              	@ armwave.c:344:             g_armwave_state.ch1_color.r = r;
 1863              		.loc 1 344 41 is_stmt 0 view .LVU486
 1864 08c0 0C009F05 		ldreq	r0, .L108	@ tmp117,
 1865              	.LVL118:
 1866              		.loc 1 344 41 view .LVU487
 1867 08c4 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 345:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1868              		.loc 1 345 13 is_stmt 1 view .LVU488
 1869              	@ armwave.c:345:             g_armwave_state.ch1_color.g = g;
 1870              		.loc 1 345 41 is_stmt 0 view .LVU489
 1871 08c8 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 346:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1872              		.loc 1 346 13 is_stmt 1 view .LVU490
 1873              	@ armwave.c:346:             g_armwave_state.ch1_color.b = b;
 1874              		.loc 1 346 41 is_stmt 0 view .LVU491
 1875 08cc B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 347:armwave.c     ****             break;
 1876              		.loc 1 347 13 is_stmt 1 view .LVU492
 1877              	@ armwave.c:349: }
 348:armwave.c     ****     }
 349:armwave.c     **** }
 1878              		.loc 1 349 1 is_stmt 0 view .LVU493
 1879 08d0 1EFF2FE1 		bx	lr	@
 1880              	.L109:
 1881              		.align	2
 1882              	.L108:
 1883 08d4 00000000 		.word	g_armwave_state
 1884              		.cfi_endproc
 1885              	.LFE67:
 1887              		.align	2
 1888              		.global	armwave_dump_ppm_debug
 1889              		.syntax unified
 1890              		.arm
 1891              		.fpu vfp
 1893              	armwave_dump_ppm_debug:
 1894              	.LVL119:
 1895              	.LFB68:
 350:armwave.c     **** 
 351:armwave.c     **** /*
 352:armwave.c     ****  * Dump a ppm of a buffer to a file.
 353:armwave.c     ****  */
 354:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 355:armwave.c     **** {
 1896              		.loc 1 355 1 is_stmt 1 view -0
 1897              		.cfi_startproc
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 0, uses_anonymous_args = 0
 356:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1900              		.loc 1 356 5 view .LVU495
 1901              	@ armwave.c:355: {
 355:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1902              		.loc 1 355 1 is_stmt 0 view .LVU496
 1903 08d8 0130A0E1 		mov	r3, r1	@ fn, fn
 1904 08dc F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1905              		.cfi_def_cfa_offset 28
 1906              		.cfi_offset 4, -28
 1907              		.cfi_offset 5, -24
 1908              		.cfi_offset 6, -20
 1909              		.cfi_offset 7, -16
 1910              		.cfi_offset 8, -12
 1911              		.cfi_offset 9, -8
 1912              		.cfi_offset 14, -4
 1913 08e0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1914 08e4 0CD04DE2 		sub	sp, sp, #12	@,,
 1915              		.cfi_def_cfa_offset 40
 1916              	@ armwave.c:356:     FILE *fp = fopen(fn, "wb");
 1917              		.loc 1 356 16 view .LVU497
 1918 08e8 C4109FE5 		ldr	r1, .L118	@,
 1919              	.LVL120:
 1920              		.loc 1 356 16 view .LVU498
 1921 08ec 0300A0E1 		mov	r0, r3	@, fn
 1922              	.LVL121:
 1923              		.loc 1 356 16 view .LVU499
 1924 08f0 FEFFFFEB 		bl	fopen64		@
 1925              	.LVL122:
 1926              	@ armwave.c:363:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 357:armwave.c     ****     uint32_t data;
 358:armwave.c     ****     int xx, yy;
 359:armwave.c     **** 
 360:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 361:armwave.c     **** 
 362:armwave.c     ****     fputs("P3\n", fp);
 363:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1927              		.loc 1 363 5 view .LVU500
 1928 08f4 BC609FE5 		ldr	r6, .L118+4	@ tmp150,
 1929              	@ armwave.c:362:     fputs("P3\n", fp);
 362:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1930              		.loc 1 362 5 view .LVU501
 1931 08f8 0320A0E3 		mov	r2, #3	@,
 1932 08fc 0110A0E3 		mov	r1, #1	@,
 1933              	@ armwave.c:356:     FILE *fp = fopen(fn, "wb");
 356:armwave.c     ****     uint32_t data;
 1934              		.loc 1 356 16 view .LVU502
 1935 0900 0070A0E1 		mov	r7, r0	@ fp,
 1936              	.LVL123:
 357:armwave.c     ****     uint32_t data;
 1937              		.loc 1 357 5 is_stmt 1 view .LVU503
 358:armwave.c     **** 
 1938              		.loc 1 358 5 view .LVU504
 362:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1939              		.loc 1 362 5 view .LVU505
 1940 0904 0030A0E1 		mov	r3, r0	@, fp
 1941 0908 AC009FE5 		ldr	r0, .L118+8	@,
 1942              	.LVL124:
 362:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1943              		.loc 1 362 5 is_stmt 0 view .LVU506
 1944 090c FEFFFFEB 		bl	fwrite		@
 1945              	.LVL125:
 1946              		.loc 1 363 5 is_stmt 1 view .LVU507
 1947 0910 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1948 0914 A4109FE5 		ldr	r1, .L118+12	@,
 1949 0918 0700A0E1 		mov	r0, r7	@, fp
 1950 091c FEFFFFEB 		bl	fprintf		@
 1951              	.LVL126:
 364:armwave.c     ****     fputs("255\n", fp);
 1952              		.loc 1 364 5 view .LVU508
 1953 0920 0420A0E3 		mov	r2, #4	@,
 1954 0924 0730A0E1 		mov	r3, r7	@, fp
 1955 0928 0110A0E3 		mov	r1, #1	@,
 1956 092c 90009FE5 		ldr	r0, .L118+16	@,
 1957 0930 FEFFFFEB 		bl	fwrite		@
 1958              	.LVL127:
 365:armwave.c     **** 
 366:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1959              		.loc 1 366 5 view .LVU509
 1960              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1961              		.loc 1 366 37 is_stmt 0 view .LVU510
 1962 0934 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1963              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1964              		.loc 1 366 5 view .LVU511
 1965 0938 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1966 093c 180000DA 		ble	.L111		@,
 1967 0940 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1968              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 368:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 369:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 370:armwave.c     **** 
 371:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1969              		.loc 1 371 13 view .LVU512
 1970 0944 7C909FE5 		ldr	r9, .L118+20	@ tmp152,
 1971              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1972              		.loc 1 366 12 view .LVU513
 1973 0948 0050A0E3 		mov	r5, #0	@ yy,
 1974              	.LVL128:
 1975              	.L112:
 1976              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1977              		.loc 1 367 9 view .LVU514
 1978 094c 000053E3 		cmp	r3, #0	@ _13,
 1979              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1980              		.loc 1 367 16 view .LVU515
 1981 0950 0040A0C3 		movgt	r4, #0	@ xx,
 1982              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1983              		.loc 1 367 9 view .LVU516
 1984 0954 0F0000DA 		ble	.L114		@,
 1985              	.LVL129:
 1986              	.L113:
 368:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1987              		.loc 1 368 13 is_stmt 1 discriminator 3 view .LVU517
 1988              	@ armwave.c:368:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 368:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1989              		.loc 1 368 29 is_stmt 0 discriminator 3 view .LVU518
 1990 0958 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1991              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1992              		.loc 1 371 13 discriminator 3 view .LVU519
 1993 095c 0910A0E1 		mov	r1, r9	@, tmp152
 1994 0960 0700A0E1 		mov	r0, r7	@, fp
 1995              	@ armwave.c:368:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 368:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1996              		.loc 1 368 18 discriminator 3 view .LVU520
 1997 0964 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1998              	.LVL130:
 1999              		.loc 1 371 13 is_stmt 1 discriminator 3 view .LVU521
 2000              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2001              		.loc 1 367 58 is_stmt 0 discriminator 3 view .LVU522
 2002 0968 014084E2 		add	r4, r4, #1	@ xx, xx,
 2003              	.LVL131:
 2004              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2005              		.loc 1 371 81 discriminator 3 view .LVU523
 2006 096c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2007              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2008              		.loc 1 371 61 discriminator 3 view .LVU524
 2009 0970 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2010              	@ armwave.c:371:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2011              		.loc 1 371 13 discriminator 3 view .LVU525
 2012 0974 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2013 0978 7330EFE6 		uxtb	r3, r3	@, tmp142
 2014 097c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2015 0980 7220EFE6 		uxtb	r2, r2	@, data
 2016              	.LVL132:
 2017              		.loc 1 371 13 discriminator 3 view .LVU526
 2018 0984 FEFFFFEB 		bl	fprintf		@
 2019              	.LVL133:
 2020              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2021              		.loc 1 367 41 discriminator 3 view .LVU527
 2022 0988 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2023              	@ armwave.c:367:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 367:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2024              		.loc 1 367 9 discriminator 3 view .LVU528
 2025 098c 040053E1 		cmp	r3, r4	@ _13, xx
 2026 0990 F0FFFFCA 		bgt	.L113		@,
 2027 0994 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2028              	.LVL134:
 2029              	.L114:
 2030              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2031              		.loc 1 366 55 discriminator 2 view .LVU529
 2032 0998 015085E2 		add	r5, r5, #1	@ yy, yy,
 2033              	.LVL135:
 2034              	@ armwave.c:366:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 366:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2035              		.loc 1 366 5 discriminator 2 view .LVU530
 2036 099c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2037 09a0 E9FFFFBA 		blt	.L112		@,
 2038              	.LVL136:
 2039              	.L111:
 372:armwave.c     ****         }
 373:armwave.c     ****     }
 374:armwave.c     **** 
 375:armwave.c     ****     fclose(fp);
 2040              		.loc 1 375 5 is_stmt 1 view .LVU531
 2041 09a4 0700A0E1 		mov	r0, r7	@, fp
 2042              	@ armwave.c:376: }
 376:armwave.c     **** }
 2043              		.loc 1 376 1 is_stmt 0 view .LVU532
 2044 09a8 0CD08DE2 		add	sp, sp, #12	@,,
 2045              		.cfi_def_cfa_offset 28
 2046              		@ sp needed	@
 2047 09ac F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2048              		.cfi_restore 14
 2049              		.cfi_restore 9
 2050              		.cfi_restore 8
 2051              		.cfi_restore 7
 2052              		.cfi_restore 6
 2053              		.cfi_restore 5
 2054              		.cfi_restore 4
 2055              		.cfi_def_cfa_offset 0
 2056              	.LVL137:
 2057              	@ armwave.c:375:     fclose(fp);
 375:armwave.c     **** }
 2058              		.loc 1 375 5 view .LVU533
 2059 09b0 FEFFFFEA 		b	fclose		@
 2060              	.LVL138:
 2061              	.L119:
 375:armwave.c     **** }
 2062              		.loc 1 375 5 view .LVU534
 2063              		.align	2
 2064              	.L118:
 2065 09b4 18020000 		.word	.LC14
 2066 09b8 00000000 		.word	g_armwave_state
 2067 09bc 1C020000 		.word	.LC15
 2068 09c0 20020000 		.word	.LC16
 2069 09c4 28020000 		.word	.LC17
 2070 09c8 30020000 		.word	.LC18
 2071              		.cfi_endproc
 2072              	.LFE68:
 2074              		.align	2
 2075              		.global	armwave_test_init
 2076              		.syntax unified
 2077              		.arm
 2078              		.fpu vfp
 2080              	armwave_test_init:
 2081              	.LVL139:
 2082              	.LFB69:
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Initialise some test functionry.
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 382:armwave.c     **** {
 2083              		.loc 1 382 1 is_stmt 1 view -0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 0
 2086              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     test_create_gamma();
 2087              		.loc 1 383 5 view .LVU536
 2088              	.LBB18:
 2089              	.LBI18:
  34:armwave.c     **** {
 2090              		.loc 1 34 6 view .LVU537
  34:armwave.c     **** {
 2091              		.loc 1 34 6 is_stmt 0 view .LVU538
 2092              	.LBE18:
 2093              	@ armwave.c:382: {
 382:armwave.c     ****     test_create_gamma();
 2094              		.loc 1 382 1 view .LVU539
 2095 09cc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2096              		.cfi_def_cfa_offset 32
 2097              		.cfi_offset 4, -32
 2098              		.cfi_offset 5, -28
 2099              		.cfi_offset 6, -24
 2100              		.cfi_offset 7, -20
 2101              		.cfi_offset 8, -16
 2102              		.cfi_offset 9, -12
 2103              		.cfi_offset 10, -8
 2104              		.cfi_offset 14, -4
 2105 09d0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2106              		.cfi_def_cfa_offset 56
 2107              		.cfi_offset 80, -56
 2108              		.cfi_offset 81, -52
 2109              		.cfi_offset 82, -48
 2110              		.cfi_offset 83, -44
 2111              		.cfi_offset 84, -40
 2112              		.cfi_offset 85, -36
 2113 09d4 C0409FE5 		ldr	r4, .L124+20	@ ivtmp.100,
 2114              	.LBB21:
 2115              	.LBB19:
 2116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2117              		.loc 1 40 32 view .LVU540
 2118 09d8 2EAA9FED 		vldr.32	s20, .L124+16	@ tmp136,
 2119              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2120              		.loc 1 40 26 view .LVU541
 2121 09dc 299B9FED 		vldr.64	d9, .L124	@ tmp151,
 2122              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2123              		.loc 1 40 49 view .LVU542
 2124 09e0 2A8B9FED 		vldr.64	d8, .L124+8	@ tmp139,
 2125 09e4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.100,
 2126              	.LBE19:
 2127              	.LBE21:
 2128              	@ armwave.c:382: {
 382:armwave.c     ****     test_create_gamma();
 2129              		.loc 1 382 1 view .LVU543
 2130 09e8 10D04DE2 		sub	sp, sp, #16	@,,
 2131              		.cfi_def_cfa_offset 72
 2132              	@ armwave.c:382: {
 382:armwave.c     ****     test_create_gamma();
 2133              		.loc 1 382 1 view .LVU544
 2134 09ec 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2135 09f0 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2136 09f4 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2137 09f8 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2138 09fc 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.100,
 2139 0a00 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2140              	.LVL140:
 2141              	.L121:
 2142              	.LBB22:
 2143              	.LBB20:
  40:armwave.c     ****     }
 2144              		.loc 1 40 9 is_stmt 1 view .LVU545
 2145              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2146              		.loc 1 40 32 is_stmt 0 view .LVU546
 2147 0a04 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.100
 2148              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2149              		.loc 1 40 26 view .LVU547
 2150 0a08 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2151              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2152              		.loc 1 40 32 view .LVU548
 2153 0a0c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2154 0a10 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2155 0a14 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2156              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2157              		.loc 1 40 26 view .LVU549
 2158 0a18 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2159 0a1c FEFFFFEB 		bl	pow		@
 2160              	.LVL141:
 2161              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2162              		.loc 1 40 49 view .LVU550
 2163 0a20 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2164              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2165              		.loc 1 40 24 view .LVU551
 2166 0a24 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2167 0a28 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2168 0a2c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2169              	.LVL142:
 2170              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2171              		.loc 1 39 5 view .LVU552
 2172 0a30 0A0054E1 		cmp	r4, r10	@ ivtmp.100, _39
 2173 0a34 F2FFFF1A 		bne	.L121		@,
 2174              	.LVL143:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2175              		.loc 1 39 5 view .LVU553
 2176              	.LBE20:
 2177              	.LBE22:
 384:armwave.c     **** 
 385:armwave.c     ****     // make ch1 yellowish by default
 386:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2178              		.loc 1 386 5 is_stmt 1 view .LVU554
 2179              	.LBB23:
 2180              	.LBI23:
 339:armwave.c     **** {
 2181              		.loc 1 339 6 view .LVU555
 2182              	.LBB24:
 342:armwave.c     ****         case 1:
 2183              		.loc 1 342 5 view .LVU556
 344:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2184              		.loc 1 344 13 view .LVU557
 345:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2185              		.loc 1 345 13 view .LVU558
 2186              	@ armwave.c:344:             g_armwave_state.ch1_color.r = r;
 344:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2187              		.loc 1 344 41 is_stmt 0 view .LVU559
 2188 0a38 60C09FE5 		ldr	ip, .L124+24	@ tmp142,
 2189 0a3c 60409FE5 		ldr	r4, .L124+28	@ tmp143,
 2190              	.LBE24:
 2191              	.LBE23:
 2192              	@ armwave.c:388:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 387:armwave.c     **** 
 388:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2193              		.loc 1 388 5 view .LVU560
 2194 0a40 0000A0E3 		mov	r0, #0	@ tmp147,
 2195              	.LBB28:
 2196              	.LBB25:
 2197              	@ armwave.c:346:             g_armwave_state.ch1_color.b = b;
 346:armwave.c     ****             break;
 2198              		.loc 1 346 41 view .LVU561
 2199 0a44 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2200              	.LBE25:
 2201              	.LBE28:
 2202              	@ armwave.c:388:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2203              		.loc 1 388 5 view .LVU562
 2204 0a48 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2205 0a4c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2206 0a50 00808DE5 		str	r8, [sp]	@ render_width,
 2207 0a54 0610A0E1 		mov	r1, r6	@, tmp3
 2208 0a58 0720A0E1 		mov	r2, r7	@, nwaves
 2209              	.LBB29:
 2210              	.LBB26:
 2211              	@ armwave.c:344:             g_armwave_state.ch1_color.r = r;
 344:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2212              		.loc 1 344 41 view .LVU563
 2213 0a5c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 346:armwave.c     ****             break;
 2214              		.loc 1 346 13 is_stmt 1 view .LVU564
 2215              	.LBE26:
 2216              	.LBE29:
 2217              	@ armwave.c:388:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2218              		.loc 1 388 5 is_stmt 0 view .LVU565
 2219 0a60 0630A0E1 		mov	r3, r6	@, wave_size
 2220              	.LBB30:
 2221              	.LBB27:
 2222              	@ armwave.c:346:             g_armwave_state.ch1_color.b = b;
 346:armwave.c     ****             break;
 2223              		.loc 1 346 41 view .LVU566
 2224 0a64 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 347:armwave.c     ****     }
 2225              		.loc 1 347 13 is_stmt 1 view .LVU567
 2226              	.LVL144:
 347:armwave.c     ****     }
 2227              		.loc 1 347 13 is_stmt 0 view .LVU568
 2228              	.LBE27:
 2229              	.LBE30:
 2230              		.loc 1 388 5 is_stmt 1 view .LVU569
 2231 0a68 FEFFFFEB 		bl	armwave_setup_render		@
 2232              	.LVL145:
 389:armwave.c     **** 
 390:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2233              		.loc 1 390 5 view .LVU570
 2234 0a6c 34109FE5 		ldr	r1, .L124+32	@,
 2235 0a70 34009FE5 		ldr	r0, .L124+36	@,
 2236              	@ armwave.c:391: }
 391:armwave.c     **** }
 2237              		.loc 1 391 1 is_stmt 0 view .LVU571
 2238 0a74 10D08DE2 		add	sp, sp, #16	@,,
 2239              		.cfi_def_cfa_offset 56
 2240              		@ sp needed	@
 2241 0a78 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2242              		.cfi_restore 84
 2243              		.cfi_restore 85
 2244              		.cfi_restore 82
 2245              		.cfi_restore 83
 2246              		.cfi_restore 80
 2247              		.cfi_restore 81
 2248              		.cfi_def_cfa_offset 32
 2249 0a7c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2250              		.cfi_restore 14
 2251              		.cfi_restore 10
 2252              		.cfi_restore 9
 2253              		.cfi_restore 8
 2254              		.cfi_restore 7
 2255              		.cfi_restore 6
 2256              		.cfi_restore 5
 2257              		.cfi_restore 4
 2258              		.cfi_def_cfa_offset 0
 2259              	.LVL146:
 2260              	@ armwave.c:390:     printf("armwave version: %s\n", ARMWAVE_VER);
 390:armwave.c     **** }
 2261              		.loc 1 390 5 view .LVU572
 2262 0a80 FEFFFFEA 		b	printf		@
 2263              	.LVL147:
 2264              	.L125:
 2265 0a84 0000A0E1 		.align	3
 2266              	.L124:
 2267 0a88 000000C0 		.word	-1073741824
 2268 0a8c CCCCEC3F 		.word	1072483532
 2269 0a90 00000000 		.word	0
 2270 0a94 00E06F40 		.word	1081073664
 2271 0a98 00007F43 		.word	1132396544
 2272 0a9c FFFFFFFF 		.word	gamma_table-1
 2273 0aa0 00000000 		.word	g_armwave_state
 2274 0aa4 F609F406 		.word	116656630
 2275 0aa8 00000000 		.word	.LC0
 2276 0aac 08000000 		.word	.LC1
 2277              		.cfi_endproc
 2278              	.LFE69:
 2280              		.align	2
 2281              		.global	armwave_test_fill_outbuf
 2282              		.syntax unified
 2283              		.arm
 2284              		.fpu vfp
 2286              	armwave_test_fill_outbuf:
 2287              	.LFB70:
 392:armwave.c     **** 
 393:armwave.c     **** /*
 394:armwave.c     ****  * Render image to the local allocated buffer.
 395:armwave.c     ****  */
 396:armwave.c     **** void armwave_test_fill_outbuf()
 397:armwave.c     **** {
 2288              		.loc 1 397 1 is_stmt 1 view -0
 2289              		.cfi_startproc
 2290              		@ args = 0, pretend = 0, frame = 0
 2291              		@ frame_needed = 0, uses_anonymous_args = 0
 2292              		@ link register save eliminated.
 398:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2293              		.loc 1 398 5 view .LVU574
 2294 0ab0 04309FE5 		ldr	r3, .L127	@ tmp111,
 2295 0ab4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2296 0ab8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2297              	.LVL148:
 2298              	.L128:
 2299              		.align	2
 2300              	.L127:
 2301 0abc 00000000 		.word	g_armwave_state
 2302              		.cfi_endproc
 2303              	.LFE70:
 2305              		.align	2
 2306              		.global	armwave_test_dump_buffer_to_ppm
 2307              		.syntax unified
 2308              		.arm
 2309              		.fpu vfp
 2311              	armwave_test_dump_buffer_to_ppm:
 2312              	.LVL149:
 2313              	.LFB71:
 399:armwave.c     **** }
 400:armwave.c     **** 
 401:armwave.c     **** /*
 402:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 403:armwave.c     ****  */
 404:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 405:armwave.c     **** {
 2314              		.loc 1 405 1 view -0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 0
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 2318              		@ link register save eliminated.
 406:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2319              		.loc 1 406 5 view .LVU576
 2320 0ac0 08309FE5 		ldr	r3, .L130	@ tmp112,
 2321 0ac4 0010A0E1 		mov	r1, r0	@, fn
 2322 0ac8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2323              	.LVL150:
 2324              		.loc 1 406 5 is_stmt 0 view .LVU577
 2325 0acc FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2326              	.LVL151:
 2327              	.L131:
 2328              		.loc 1 406 5 view .LVU578
 2329              		.align	2
 2330              	.L130:
 2331 0ad0 00000000 		.word	g_armwave_state
 2332              		.cfi_endproc
 2333              	.LFE71:
 2335              		.align	2
 2336              		.global	armwave_test_fill_gdkbuf
 2337              		.syntax unified
 2338              		.arm
 2339              		.fpu vfp
 2341              	armwave_test_fill_gdkbuf:
 2342              	.LVL152:
 2343              	.LFB72:
 407:armwave.c     **** }
 408:armwave.c     **** 
 409:armwave.c     **** /*
 410:armwave.c     ****  * Render GDK buffer with test funtionry.
 411:armwave.c     ****  */
 412:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 413:armwave.c     **** {
 2344              		.loc 1 413 1 is_stmt 1 view -0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 414:armwave.c     ****     //PyObject *mv;
 415:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 416:armwave.c     **** 
 417:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 418:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2349              		.loc 1 418 5 view .LVU580
 419:armwave.c     ****     
 420:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 421:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2350              		.loc 1 421 5 view .LVU581
 2351              	@ armwave.c:418:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 418:armwave.c     ****     
 2352              		.loc 1 418 11 is_stmt 0 view .LVU582
 2353 0ad4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2354              	@ armwave.c:421:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2355              		.loc 1 421 5 view .LVU583
 2356 0ad8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2357              	.LVL153:
 2358              		.loc 1 421 5 view .LVU584
 2359 0adc FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2360              	.LVL154:
 2361              		.loc 1 421 5 view .LVU585
 2362              		.cfi_endproc
 2363              	.LFE72:
 2365              		.align	2
 2366              		.global	armwave_test_buffer_alloc
 2367              		.syntax unified
 2368              		.arm
 2369              		.fpu vfp
 2371              	armwave_test_buffer_alloc:
 2372              	.LVL155:
 2373              	.LFB73:
 422:armwave.c     **** }
 423:armwave.c     **** 
 424:armwave.c     **** /*
 425:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 426:armwave.c     ****  */
 427:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 428:armwave.c     **** {
 2374              		.loc 1 428 1 is_stmt 1 view -0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 0
 2377              		@ frame_needed = 0, uses_anonymous_args = 0
 429:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2378              		.loc 1 429 5 view .LVU587
 2379              	@ armwave.c:428: {
 428:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2380              		.loc 1 428 1 is_stmt 0 view .LVU588
 2381 0ae0 70402DE9 		push	{r4, r5, r6, lr}	@
 2382              		.cfi_def_cfa_offset 16
 2383              		.cfi_offset 4, -16
 2384              		.cfi_offset 5, -12
 2385              		.cfi_offset 6, -8
 2386              		.cfi_offset 14, -4
 2387              	@ armwave.c:428: {
 428:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2388              		.loc 1 428 1 view .LVU589
 2389 0ae4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2390              	@ armwave.c:429:     if(g_armwave_state.test_wave_buffer != NULL) {
 2391              		.loc 1 429 23 view .LVU590
 2392 0ae8 44409FE5 		ldr	r4, .L140	@ tmp128,
 2393 0aec 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2394              	.LVL156:
 2395              	@ armwave.c:429:     if(g_armwave_state.test_wave_buffer != NULL) {
 2396              		.loc 1 429 7 view .LVU591
 2397 0af0 000050E3 		cmp	r0, #0	@ _1,
 2398 0af4 0000000A 		beq	.L134		@,
 430:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2399              		.loc 1 430 9 is_stmt 1 view .LVU592
 2400 0af8 FEFFFFEB 		bl	free		@
 2401              	.LVL157:
 2402              	.L134:
 431:armwave.c     ****     }
 432:armwave.c     **** 
 433:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 434:armwave.c     **** 
 435:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2403              		.loc 1 435 5 view .LVU593
 2404              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2405              		.loc 1 435 75 is_stmt 0 view .LVU594
 2406 0afc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2407 0b00 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2408              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2409              		.loc 1 435 40 view .LVU595
 2410 0b04 0610A0E1 		mov	r1, r6	@, nsets
 2411              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2412              		.loc 1 435 75 view .LVU596
 2413 0b08 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2414              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2415              		.loc 1 435 40 view .LVU597
 2416 0b0c 0500A0E1 		mov	r0, r5	@, _4
 2417 0b10 FEFFFFEB 		bl	calloc		@
 2418              	.LVL158:
 2419              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer == NULL) {
 436:armwave.c     **** 
 437:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2420              		.loc 1 437 7 view .LVU598
 2421 0b14 000050E3 		cmp	r0, #0	@ tmp124,
 2422              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 435:armwave.c     **** 
 2423              		.loc 1 435 38 view .LVU599
 2424 0b18 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2425              		.loc 1 437 5 is_stmt 1 view .LVU600
 2426              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer == NULL) {
 2427              		.loc 1 437 7 is_stmt 0 view .LVU601
 2428 0b1c 7080BD18 		popne	{r4, r5, r6, pc}	@
 438:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2429              		.loc 1 438 9 is_stmt 1 view .LVU602
 2430 0b20 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2431 0b24 0620A0E1 		mov	r2, r6	@, nsets
 2432 0b28 08009FE5 		ldr	r0, .L140+4	@,
 2433              	@ armwave.c:442: }
 439:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 440:armwave.c     ****         return;
 441:armwave.c     ****     }
 442:armwave.c     **** }
 2434              		.loc 1 442 1 is_stmt 0 view .LVU603
 2435 0b2c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2436              		.cfi_restore 14
 2437              		.cfi_restore 6
 2438              		.cfi_restore 5
 2439              		.cfi_restore 4
 2440              		.cfi_def_cfa_offset 0
 2441              	.LVL159:
 2442              	@ armwave.c:438:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 438:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2443              		.loc 1 438 9 view .LVU604
 2444 0b30 FEFFFFEA 		b	printf		@
 2445              	.LVL160:
 2446              	.L141:
 438:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2447              		.loc 1 438 9 view .LVU605
 2448              		.align	2
 2449              	.L140:
 2450 0b34 00000000 		.word	g_armwave_state
 2451 0b38 40020000 		.word	.LC19
 2452              		.cfi_endproc
 2453              	.LFE73:
 2455              		.align	2
 2456              		.global	armwave_fill_pixbuf_into_pybuffer
 2457              		.syntax unified
 2458              		.arm
 2459              		.fpu vfp
 2461              	armwave_fill_pixbuf_into_pybuffer:
 2462              	.LVL161:
 2463              	.LFB74:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 446:armwave.c     ****  */
 447:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 448:armwave.c     **** {
 2464              		.loc 1 448 1 is_stmt 1 view -0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 48
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 449:armwave.c     ****     Py_buffer buffer;
 2468              		.loc 1 449 5 view .LVU607
 450:armwave.c     ****     int ret;
 2469              		.loc 1 450 5 view .LVU608
 451:armwave.c     **** 
 452:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 453:armwave.c     **** 
 454:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2470              		.loc 1 454 5 view .LVU609
 2471              	@ armwave.c:448: {
 448:armwave.c     ****     Py_buffer buffer;
 2472              		.loc 1 448 1 is_stmt 0 view .LVU610
 2473 0b3c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2474              		.cfi_def_cfa_offset 4
 2475              		.cfi_offset 14, -4
 2476 0b40 34D04DE2 		sub	sp, sp, #52	@,,
 2477              		.cfi_def_cfa_offset 56
 2478              	@ armwave.c:454:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2479              		.loc 1 454 11 view .LVU611
 2480 0b44 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2481 0b48 0120A0E3 		mov	r2, #1	@,
 2482 0b4c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2483              	.LVL162:
 455:armwave.c     **** 
 456:armwave.c     ****     if(ret != 0) {
 2484              		.loc 1 456 5 is_stmt 1 view .LVU612
 2485              	@ armwave.c:456:     if(ret != 0) {
 2486              		.loc 1 456 7 is_stmt 0 view .LVU613
 2487 0b50 000050E3 		cmp	r0, #0	@,
 2488 0b54 0A00001A 		bne	.L146		@,
 457:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 458:armwave.c     ****         Py_RETURN_FALSE;
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 462:armwave.c     **** 
 463:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2489              		.loc 1 463 5 is_stmt 1 view .LVU614
 2490 0b58 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2491              	.LVL163:
 2492              		.loc 1 463 5 is_stmt 0 view .LVU615
 2493 0b5c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2494              	.LVL164:
 464:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 465:armwave.c     **** 
 466:armwave.c     ****     PyBuffer_Release(&buffer);
 2495              		.loc 1 466 5 is_stmt 1 view .LVU616
 2496 0b60 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2497 0b64 FEFFFFEB 		bl	PyBuffer_Release		@
 2498              	.LVL165:
 467:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 468:armwave.c     **** 
 469:armwave.c     ****     Py_RETURN_TRUE;
 2499              		.loc 1 469 5 view .LVU617
 2500              	.LBB31:
 2501              	.LBI31:
 2502              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2503              		.loc 2 456 20 view .LVU618
 2504              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2505              		.loc 2 458 21 view .LVU619
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2506              		.loc 2 459 5 view .LVU620
 2507              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2508              		.loc 2 459 18 is_stmt 0 view .LVU621
 2509 0b68 38309FE5 		ldr	r3, .L147	@ tmp126,
 2510              	.LBE32:
 2511              	.LBE31:
 2512              	@ armwave.c:469:     Py_RETURN_TRUE;
 2513              		.loc 1 469 5 view .LVU622
 2514 0b6c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2515              	.LBB34:
 2516              	.LBB33:
 2517              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2518              		.loc 2 459 18 view .LVU623
 2519 0b70 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2520 0b74 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2521 0b78 002083E5 		str	r2, [r3]	@ tmp128,
 2522              	.LBE33:
 2523              	.LBE34:
 2524              	@ armwave.c:470: }
 470:armwave.c     **** }
 2525              		.loc 1 470 1 view .LVU624
 2526 0b7c 34D08DE2 		add	sp, sp, #52	@,,
 2527              		.cfi_remember_state
 2528              		.cfi_def_cfa_offset 4
 2529              		@ sp needed	@
 2530 0b80 04F09DE4 		ldr	pc, [sp], #4	@
 2531              	.LVL166:
 2532              	.L146:
 2533              		.cfi_restore_state
 457:armwave.c     ****         Py_RETURN_FALSE;
 2534              		.loc 1 457 9 is_stmt 1 view .LVU625
 2535 0b84 20009FE5 		ldr	r0, .L147+4	@,
 2536              	.LVL167:
 457:armwave.c     ****         Py_RETURN_FALSE;
 2537              		.loc 1 457 9 is_stmt 0 view .LVU626
 2538 0b88 FEFFFFEB 		bl	puts		@
 2539              	.LVL168:
 458:armwave.c     ****     }
 2540              		.loc 1 458 9 is_stmt 1 view .LVU627
 2541              	.LBB35:
 2542              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2543              		.loc 2 456 20 view .LVU628
 2544              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2545              		.loc 2 458 21 view .LVU629
 2546              		.loc 2 459 5 view .LVU630
 2547              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2548              		.loc 2 459 18 is_stmt 0 view .LVU631
 2549 0b8c 1C309FE5 		ldr	r3, .L147+8	@ tmp120,
 2550              	.LBE36:
 2551              	.LBE35:
 2552              	@ armwave.c:458:         Py_RETURN_FALSE;
 458:armwave.c     ****     }
 2553              		.loc 1 458 9 view .LVU632
 2554 0b90 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2555              	.LBB38:
 2556              	.LBB37:
 2557              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2558              		.loc 2 459 18 view .LVU633
 2559 0b94 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2560 0b98 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2561 0b9c 002083E5 		str	r2, [r3]	@ tmp122,
 2562              	.LBE37:
 2563              	.LBE38:
 2564              	@ armwave.c:470: }
 2565              		.loc 1 470 1 view .LVU634
 2566 0ba0 34D08DE2 		add	sp, sp, #52	@,,
 2567              		.cfi_def_cfa_offset 4
 2568              		@ sp needed	@
 2569 0ba4 04F09DE4 		ldr	pc, [sp], #4	@
 2570              	.L148:
 2571              		.align	2
 2572              	.L147:
 2573 0ba8 00000000 		.word	_Py_TrueStruct
 2574 0bac 94020000 		.word	.LC20
 2575 0bb0 00000000 		.word	_Py_FalseStruct
 2576              		.cfi_endproc
 2577              	.LFE74:
 2579              		.align	2
 2580              		.global	armwave_test_create_am_sine
 2581              		.syntax unified
 2582              		.arm
 2583              		.fpu vfp
 2585              	armwave_test_create_am_sine:
 2586              	.LVL169:
 2587              	.LFB75:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Make a test AM waveform for render tests.
 474:armwave.c     ****  *
 475:armwave.c     ****  * @param   mod                     modulation depth
 476:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 477:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 478:armwave.c     ****  */
 479:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 480:armwave.c     **** {
 2588              		.loc 1 480 1 is_stmt 1 view -0
 2589              		.cfi_startproc
 2590              		@ args = 0, pretend = 0, frame = 8
 2591              		@ frame_needed = 0, uses_anonymous_args = 0
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 2592              		.loc 1 481 5 view .LVU636
 482:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2593              		.loc 1 482 5 view .LVU637
 2594              	@ armwave.c:480: {
 480:armwave.c     ****     float v, noise, xnoise, mod_val;
 2595              		.loc 1 480 1 is_stmt 0 view .LVU638
 2596 0bb4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2597              		.cfi_def_cfa_offset 32
 2598              		.cfi_offset 4, -32
 2599              		.cfi_offset 5, -28
 2600              		.cfi_offset 6, -24
 2601              		.cfi_offset 7, -20
 2602              		.cfi_offset 8, -16
 2603              		.cfi_offset 9, -12
 2604              		.cfi_offset 10, -8
 2605              		.cfi_offset 14, -4
 2606              	@ armwave.c:482:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2607              		.loc 1 482 38 view .LVU639
 2608 0bb8 7A7A9FED 		vldr.32	s14, .L180	@ tmp180,
 2609              	@ armwave.c:482:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2610              		.loc 1 482 55 view .LVU640
 2611 0bbc 00529FE5 		ldr	r5, .L180+28	@ tmp250,
 2612              	@ armwave.c:480: {
 480:armwave.c     ****     float v, noise, xnoise, mod_val;
 2613              		.loc 1 480 1 view .LVU641
 2614 0bc0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2615              		.cfi_def_cfa_offset 80
 2616              		.cfi_offset 80, -80
 2617              		.cfi_offset 81, -76
 2618              		.cfi_offset 82, -72
 2619              		.cfi_offset 83, -68
 2620              		.cfi_offset 84, -64
 2621              		.cfi_offset 85, -60
 2622              		.cfi_offset 86, -56
 2623              		.cfi_offset 87, -52
 2624              		.cfi_offset 88, -48
 2625              		.cfi_offset 89, -44
 2626              		.cfi_offset 90, -40
 2627              		.cfi_offset 91, -36
 2628 0bc4 0090A0E1 		mov	r9, r0	@ sets, sets
 2629              	@ armwave.c:482:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2630              		.loc 1 482 38 view .LVU642
 2631 0bc8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2632              	@ armwave.c:486:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 483:armwave.c     ****     int s, set_offset = 0;
 484:armwave.c     ****     int w, x;
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2633              		.loc 1 486 70 view .LVU643
 2634 0bcc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2635 0bd0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2636              	.LBB41:
 2637              	.LBB42:
 2638              	@ armwave.c:429:     if(g_armwave_state.test_wave_buffer != NULL) {
 429:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2639              		.loc 1 429 23 view .LVU644
 2640 0bd4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2641              	.LVL170:
 429:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2642              		.loc 1 429 23 view .LVU645
 2643              	.LBE42:
 2644              	.LBE41:
 2645              	@ armwave.c:482:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 482:armwave.c     ****     int s, set_offset = 0;
 2646              		.loc 1 482 38 view .LVU646
 2647 0bd8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2648              	@ armwave.c:486:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2649              		.loc 1 486 70 view .LVU647
 2650 0bdc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2651              	@ armwave.c:480: {
 480:armwave.c     ****     float v, noise, xnoise, mod_val;
 2652              		.loc 1 480 1 view .LVU648
 2653 0be0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2654              	.LBB46:
 2655              	.LBB43:
 2656              	@ armwave.c:429:     if(g_armwave_state.test_wave_buffer != NULL) {
 429:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2657              		.loc 1 429 7 view .LVU649
 2658 0be4 000050E3 		cmp	r0, #0	@ _82,
 2659              	.LBE43:
 2660              	.LBE46:
 2661              	@ armwave.c:480: {
 480:armwave.c     ****     float v, noise, xnoise, mod_val;
 2662              		.loc 1 480 1 view .LVU650
 2663 0be8 08D04DE2 		sub	sp, sp, #8	@,,
 2664              		.cfi_def_cfa_offset 88
 2665              	@ armwave.c:487:     g_armwave_state.test_wave_buffer_nsets = sets;
 487:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2666              		.loc 1 487 44 view .LVU651
 2667 0bec 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2668              	@ armwave.c:486:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 486:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2669              		.loc 1 486 45 view .LVU652
 2670 0bf0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2671              	@ armwave.c:482:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 482:armwave.c     ****     int s, set_offset = 0;
 2672              		.loc 1 482 38 view .LVU653
 2673 0bf4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2674              	@ armwave.c:482:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 482:armwave.c     ****     int s, set_offset = 0;
 2675              		.loc 1 482 11 view .LVU654
 2676 0bf8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2677              	.LVL171:
 483:armwave.c     ****     int w, x;
 2678              		.loc 1 483 5 is_stmt 1 view .LVU655
 484:armwave.c     **** 
 2679              		.loc 1 484 5 view .LVU656
 486:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2680              		.loc 1 486 5 view .LVU657
 2681              		.loc 1 487 5 view .LVU658
 488:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2682              		.loc 1 488 5 view .LVU659
 2683              	.LBB47:
 2684              	.LBI41:
 427:armwave.c     **** {
 2685              		.loc 1 427 6 view .LVU660
 2686              	.LBB44:
 429:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2687              		.loc 1 429 5 view .LVU661
 2688              	@ armwave.c:429:     if(g_armwave_state.test_wave_buffer != NULL) {
 429:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2689              		.loc 1 429 7 is_stmt 0 view .LVU662
 2690 0bfc 0000000A 		beq	.L150		@,
 430:armwave.c     ****     }
 2691              		.loc 1 430 9 is_stmt 1 view .LVU663
 2692 0c00 FEFFFFEB 		bl	free		@
 2693              	.LVL172:
 2694              	.L150:
 435:armwave.c     **** 
 2695              		.loc 1 435 5 view .LVU664
 2696              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 435:armwave.c     **** 
 2697              		.loc 1 435 75 is_stmt 0 view .LVU665
 2698 0c04 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2699 0c08 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2700              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 435:armwave.c     **** 
 2701              		.loc 1 435 40 view .LVU666
 2702 0c0c 0910A0E1 		mov	r1, r9	@, sets
 2703              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 435:armwave.c     **** 
 2704              		.loc 1 435 75 view .LVU667
 2705 0c10 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2706              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 435:armwave.c     **** 
 2707              		.loc 1 435 40 view .LVU668
 2708 0c14 0400A0E1 		mov	r0, r4	@, _85
 2709 0c18 FEFFFFEB 		bl	calloc		@
 2710              	.LVL173:
 2711              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer == NULL) {
 437:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2712              		.loc 1 437 7 view .LVU669
 2713 0c1c 000050E3 		cmp	r0, #0	@ tmp191,
 2714              	@ armwave.c:435:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 435:armwave.c     **** 
 2715              		.loc 1 435 38 view .LVU670
 2716 0c20 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 437:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2717              		.loc 1 437 5 is_stmt 1 view .LVU671
 2718              	@ armwave.c:437:     if(g_armwave_state.test_wave_buffer == NULL) {
 437:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2719              		.loc 1 437 7 is_stmt 0 view .LVU672
 2720 0c24 5A00000A 		beq	.L179		@,
 2721              	.L151:
 2722              	.LVL174:
 437:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2723              		.loc 1 437 7 view .LVU673
 2724              	.LBE44:
 2725              	.LBE47:
 2726              	@ armwave.c:490:     for(s = 0; s < sets; s++) {
 489:armwave.c     **** 
 490:armwave.c     ****     for(s = 0; s < sets; s++) {
 2727              		.loc 1 490 5 discriminator 1 view .LVU674
 2728 0c28 000059E3 		cmp	r9, #0	@ sets,
 2729 0c2c 550000DA 		ble	.L149		@,
 2730              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 491:armwave.c     ****         printf("Calculating test set %d\n", s);
 492:armwave.c     ****     
 493:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 494:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 495:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 496:armwave.c     **** 
 497:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 498:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 499:armwave.c     ****                 noise *= noise;
 500:armwave.c     ****                 noise *= noise;
 501:armwave.c     ****                 noise *= noise;
 502:armwave.c     **** 
 503:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 504:armwave.c     ****                     noise = -noise;
 505:armwave.c     **** 
 506:armwave.c     ****                 noise += 1.0f;
 507:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 508:armwave.c     **** 
 509:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2731              		.loc 1 509 45 view .LVU675
 2732 0c30 5C8A9FED 		vldr.32	s16, .L180	@ tmp258,
 2733              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 510:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 511:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 512:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2734              		.loc 1 512 104 view .LVU676
 2735 0c34 5CCA9FED 		vldr.32	s24, .L180+4	@ tmp259,
 2736              	@ armwave.c:490:     for(s = 0; s < sets; s++) {
 490:armwave.c     ****         printf("Calculating test set %d\n", s);
 2737              		.loc 1 490 5 view .LVU677
 2738 0c38 0070A0E3 		mov	r7, #0	@ set_offset,
 2739              	@ armwave.c:491:         printf("Calculating test set %d\n", s);
 491:armwave.c     ****         printf("Calculating test set %d\n", s);
 2740              		.loc 1 491 9 view .LVU678
 2741 0c3c 84A19FE5 		ldr	r10, .L180+32	@ tmp257,
 2742              	@ armwave.c:490:     for(s = 0; s < sets; s++) {
 490:armwave.c     ****         printf("Calculating test set %d\n", s);
 2743              		.loc 1 490 5 view .LVU679
 2744 0c40 0780A0E1 		mov	r8, r7	@ s, set_offset
 2745              	.LVL175:
 2746              	.L152:
 491:armwave.c     ****         printf("Calculating test set %d\n", s);
 2747              		.loc 1 491 9 is_stmt 1 view .LVU680
 2748 0c44 0810A0E1 		mov	r1, r8	@, s
 2749 0c48 0A00A0E1 		mov	r0, r10	@, tmp257
 2750 0c4c FEFFFFEB 		bl	printf		@
 2751              	.LVL176:
 493:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2752              		.loc 1 493 9 view .LVU681
 2753              	@ armwave.c:493:         for(w = 0; w < g_armwave_state.waves; w++) {
 493:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2754              		.loc 1 493 39 is_stmt 0 view .LVU682
 2755 0c50 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2756              	@ armwave.c:493:         for(w = 0; w < g_armwave_state.waves; w++) {
 493:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2757              		.loc 1 493 9 view .LVU683
 2758 0c54 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2759 0c58 450000DA 		ble	.L153		@,
 2760              	@ armwave.c:495:             mod_val = 0.5f + (_1_waves_mod * w);
 495:armwave.c     **** 
 2761              		.loc 1 495 21 view .LVU684
 2762 0c5c 53CADFED 		vldr.32	s25, .L180+8	@ tmp200,
 2763              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2764              		.loc 1 509 33 view .LVU685
 2765 0c60 53BA9FED 		vldr.32	s22, .L180+12	@ tmp253,
 2766              	@ armwave.c:507:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 507:armwave.c     **** 
 2767              		.loc 1 507 24 view .LVU686
 2768 0c64 53AADFED 		vldr.32	s21, .L180+16	@ tmp254,
 2769 0c68 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2770              	@ armwave.c:493:         for(w = 0; w < g_armwave_state.waves; w++) {
 493:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2771              		.loc 1 493 15 view .LVU687
 2772 0c6c 0060A0E3 		mov	r6, #0	@ w,
 2773              	.LVL177:
 2774              	.L160:
 495:armwave.c     **** 
 2775              		.loc 1 495 13 is_stmt 1 view .LVU688
 2776              	@ armwave.c:495:             mod_val = 0.5f + (_1_waves_mod * w);
 495:armwave.c     **** 
 2777              		.loc 1 495 21 is_stmt 0 view .LVU689
 2778 0c70 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2779 0c74 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2780              	@ armwave.c:497:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2781              		.loc 1 497 13 view .LVU690
 2782 0c78 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2783              	@ armwave.c:495:             mod_val = 0.5f + (_1_waves_mod * w);
 495:armwave.c     **** 
 2784              		.loc 1 495 21 view .LVU691
 2785 0c7c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2786 0c80 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2787              	.LVL178:
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2788              		.loc 1 497 13 is_stmt 1 view .LVU692
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2789              		.loc 1 497 13 is_stmt 0 view .LVU693
 2790 0c84 370000DA 		ble	.L154		@,
 2791 0c88 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2792              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2793              		.loc 1 512 113 view .LVU694
 2794 0c8c 4AAA9FED 		vldr.32	s20, .L180+20	@ tmp229,
 2795 0c90 4A8ADFED 		vldr.32	s17, .L180+24	@ tmp230,
 2796              	@ armwave.c:497:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2797              		.loc 1 497 19 view .LVU695
 2798 0c94 0040A0E3 		mov	r4, #0	@ x,
 2799              	.LVL179:
 2800              	.L159:
 498:armwave.c     ****                 noise *= noise;
 2801              		.loc 1 498 17 is_stmt 1 view .LVU696
 2802              	@ armwave.c:498:                 noise  = ((rand() & 0xffff) * noise_fraction);
 498:armwave.c     ****                 noise *= noise;
 2803              		.loc 1 498 28 is_stmt 0 view .LVU697
 2804 0c98 FEFFFFEB 		bl	rand		@
 2805              	.LVL180:
 2806              	@ armwave.c:498:                 noise  = ((rand() & 0xffff) * noise_fraction);
 498:armwave.c     ****                 noise *= noise;
 2807              		.loc 1 498 35 view .LVU698
 2808 0c9c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2809              	@ armwave.c:498:                 noise  = ((rand() & 0xffff) * noise_fraction);
 498:armwave.c     ****                 noise *= noise;
 2810              		.loc 1 498 45 view .LVU699
 2811 0ca0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2812 0ca4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2813              	@ armwave.c:498:                 noise  = ((rand() & 0xffff) * noise_fraction);
 498:armwave.c     ****                 noise *= noise;
 2814              		.loc 1 498 24 view .LVU700
 2815 0ca8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2816              	.LVL181:
 499:armwave.c     ****                 noise *= noise;
 2817              		.loc 1 499 17 is_stmt 1 view .LVU701
 2818              	@ armwave.c:499:                 noise *= noise;
 499:armwave.c     ****                 noise *= noise;
 2819              		.loc 1 499 23 is_stmt 0 view .LVU702
 2820 0cac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2821              	.LVL182:
 500:armwave.c     ****                 noise *= noise;
 2822              		.loc 1 500 17 is_stmt 1 view .LVU703
 2823              	@ armwave.c:500:                 noise *= noise;
 500:armwave.c     ****                 noise *= noise;
 2824              		.loc 1 500 23 is_stmt 0 view .LVU704
 2825 0cb0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2826              	.LVL183:
 501:armwave.c     **** 
 2827              		.loc 1 501 17 is_stmt 1 view .LVU705
 2828              	@ armwave.c:501:                 noise *= noise;
 501:armwave.c     **** 
 2829              		.loc 1 501 23 is_stmt 0 view .LVU706
 2830 0cb4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2831              	.LVL184:
 503:armwave.c     ****                     noise = -noise;
 2832              		.loc 1 503 17 is_stmt 1 view .LVU707
 2833              	@ armwave.c:503:                 if((rand() & 0xffff) > 0x7fff)
 503:armwave.c     ****                     noise = -noise;
 2834              		.loc 1 503 21 is_stmt 0 view .LVU708
 2835 0cb8 FEFFFFEB 		bl	rand		@
 2836              	.LVL185:
 504:armwave.c     **** 
 2837              		.loc 1 504 21 is_stmt 1 view .LVU709
 2838              	@ armwave.c:503:                 if((rand() & 0xffff) > 0x7fff)
 503:armwave.c     ****                     noise = -noise;
 2839              		.loc 1 503 19 is_stmt 0 view .LVU710
 2840 0cbc 020910E3 		tst	r0, #32768	@,
 2841              	@ armwave.c:504:                     noise = -noise;
 504:armwave.c     **** 
 2842              		.loc 1 504 27 view .LVU711
 2843 0cc0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2844              	.LVL186:
 506:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2845              		.loc 1 506 17 is_stmt 1 view .LVU712
 507:armwave.c     **** 
 2846              		.loc 1 507 17 view .LVU713
 2847              	@ armwave.c:507:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 507:armwave.c     **** 
 2848              		.loc 1 507 27 is_stmt 0 view .LVU714
 2849 0cc4 FEFFFFEB 		bl	rand		@
 2850              	.LVL187:
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2851              		.loc 1 509 17 is_stmt 1 view .LVU715
 2852              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2853              		.loc 1 509 45 is_stmt 0 view .LVU716
 2854 0cc8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2855              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2856              		.loc 1 509 33 view .LVU717
 2857 0ccc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2858              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2859              		.loc 1 509 45 view .LVU718
 2860 0cd0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2861              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2862              		.loc 1 509 33 view .LVU719
 2863 0cd4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2864              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2865              		.loc 1 509 45 view .LVU720
 2866 0cd8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2867              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2868              		.loc 1 509 33 view .LVU721
 2869 0cdc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2870              	@ armwave.c:507:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 507:armwave.c     **** 
 2871              		.loc 1 507 34 view .LVU722
 2872 0ce0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2873              	.LVL188:
 2874              	@ armwave.c:507:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 507:armwave.c     **** 
 2875              		.loc 1 507 44 view .LVU723
 2876 0ce4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2877 0ce8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2878              	@ armwave.c:507:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 507:armwave.c     **** 
 2879              		.loc 1 507 24 view .LVU724
 2880 0cec 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2881              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2882              		.loc 1 509 77 view .LVU725
 2883 0cf0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2884              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2885              		.loc 1 509 22 view .LVU726
 2886 0cf4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2887 0cf8 FEFFFFEB 		bl	sin		@
 2888              	.LVL189:
 2889              		.loc 1 512 17 is_stmt 1 view .LVU727
 2890              	@ armwave.c:506:                 noise += 1.0f;
 506:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2891              		.loc 1 506 23 is_stmt 0 view .LVU728
 2892 0cfc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2893              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2894              		.loc 1 512 104 view .LVU729
 2895 0d00 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 2896              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2897              		.loc 1 509 98 view .LVU730
 2898 0d04 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2899              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2900              		.loc 1 509 87 view .LVU731
 2901 0d08 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2902              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2903              		.loc 1 509 98 view .LVU732
 2904 0d0c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2905              	@ armwave.c:509:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 509:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2906              		.loc 1 509 19 view .LVU733
 2907 0d10 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2908              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2909              		.loc 1 512 113 view .LVU734
 2910 0d14 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2911 0d18 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2912 0d1c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2913 0d20 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2914 0d24 050000DA 		ble	.L156		@,
 2915              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2916              		.loc 1 512 104 discriminator 1 view .LVU735
 2917 0d28 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2918 0d2c FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 2919 0d30 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2920 0d34 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2921 0d38 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2922 0d3c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 2923              	.L156:
 2924              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2925              		.loc 1 512 57 discriminator 12 view .LVU736
 2926 0d40 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2927              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2928              		.loc 1 512 102 discriminator 12 view .LVU737
 2929 0d44 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2930 0d48 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2931 0d4c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2932              	@ armwave.c:497:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2933              		.loc 1 497 58 discriminator 12 view .LVU738
 2934 0d50 014084E2 		add	r4, r4, #1	@ x, x,
 2935              	.LVL190:
 2936              	@ armwave.c:512:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2937              		.loc 1 512 102 discriminator 12 view .LVU739
 2938 0d54 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 2939              	@ armwave.c:497:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2940              		.loc 1 497 43 discriminator 12 view .LVU740
 2941 0d58 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2942              	@ armwave.c:497:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 497:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2943              		.loc 1 497 13 discriminator 12 view .LVU741
 2944 0d5c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2945 0d60 CCFFFFCA 		bgt	.L159		@,
 2946 0d64 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2947              	.LVL191:
 2948              	.L154:
 2949              	@ armwave.c:493:         for(w = 0; w < g_armwave_state.waves; w++) {
 493:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2950              		.loc 1 493 48 discriminator 2 view .LVU742
 2951 0d68 016086E2 		add	r6, r6, #1	@ w, w,
 2952              	.LVL192:
 2953              	@ armwave.c:493:         for(w = 0; w < g_armwave_state.waves; w++) {
 493:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2954              		.loc 1 493 9 discriminator 2 view .LVU743
 2955 0d6c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2956 0d70 BEFFFFBA 		blt	.L160		@,
 2957              	.LVL193:
 2958              	.L153:
 513:armwave.c     ****             }
 514:armwave.c     ****         }
 515:armwave.c     **** 
 516:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2959              		.loc 1 516 9 is_stmt 1 discriminator 2 view .LVU744
 2960              	@ armwave.c:516:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2961              		.loc 1 516 46 is_stmt 0 discriminator 2 view .LVU745
 2962 0d74 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2963              	@ armwave.c:490:     for(s = 0; s < sets; s++) {
 490:armwave.c     ****         printf("Calculating test set %d\n", s);
 2964              		.loc 1 490 27 discriminator 2 view .LVU746
 2965 0d78 018088E2 		add	r8, r8, #1	@ s, s,
 2966              	.LVL194:
 2967              	@ armwave.c:490:     for(s = 0; s < sets; s++) {
 490:armwave.c     ****         printf("Calculating test set %d\n", s);
 2968              		.loc 1 490 5 discriminator 2 view .LVU747
 2969 0d7c 080059E1 		cmp	r9, r8	@ sets, s
 2970              	@ armwave.c:516:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2971              		.loc 1 516 20 discriminator 2 view .LVU748
 2972 0d80 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2973              	.LVL195:
 2974              	@ armwave.c:490:     for(s = 0; s < sets; s++) {
 490:armwave.c     ****         printf("Calculating test set %d\n", s);
 2975              		.loc 1 490 5 discriminator 2 view .LVU749
 2976 0d84 AEFFFF1A 		bne	.L152		@,
 2977              	.LVL196:
 2978              	.L149:
 2979              	@ armwave.c:518: }
 517:armwave.c     ****     }
 518:armwave.c     **** }
 2980              		.loc 1 518 1 view .LVU750
 2981 0d88 08D08DE2 		add	sp, sp, #8	@,,
 2982              		.cfi_remember_state
 2983              		.cfi_def_cfa_offset 80
 2984              		@ sp needed	@
 2985 0d8c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2986              		.cfi_restore 90
 2987              		.cfi_restore 91
 2988              		.cfi_restore 88
 2989              		.cfi_restore 89
 2990              		.cfi_restore 86
 2991              		.cfi_restore 87
 2992              		.cfi_restore 84
 2993              		.cfi_restore 85
 2994              		.cfi_restore 82
 2995              		.cfi_restore 83
 2996              		.cfi_restore 80
 2997              		.cfi_restore 81
 2998              		.cfi_def_cfa_offset 32
 2999              	.LVL197:
 3000              		.loc 1 518 1 view .LVU751
 3001 0d90 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3002              	.LVL198:
 3003              	.L179:
 3004              		.cfi_restore_state
 3005              	.LBB48:
 3006              	.LBB45:
 438:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3007              		.loc 1 438 9 is_stmt 1 view .LVU752
 3008 0d94 940901E0 		mul	r1, r4, r9	@, _85, sets
 3009 0d98 0920A0E1 		mov	r2, r9	@, sets
 3010 0d9c 28009FE5 		ldr	r0, .L180+36	@,
 3011 0da0 FEFFFFEB 		bl	printf		@
 3012              	.LVL199:
 440:armwave.c     ****     }
 3013              		.loc 1 440 9 view .LVU753
 3014 0da4 9FFFFFEA 		b	.L151		@
 3015              	.L181:
 3016              		.align	2
 3017              	.L180:
 3018 0da8 0000803F 		.word	1065353216
 3019 0dac 00007F43 		.word	1132396544
 3020 0db0 0000003F 		.word	1056964608
 3021 0db4 C3F5C840 		.word	1086911939
 3022 0db8 38FFC74A 		.word	1254620984
 3023 0dbc 0000FE42 		.word	1123942400
 3024 0dc0 00000043 		.word	1124073472
 3025 0dc4 00000000 		.word	g_armwave_state
 3026 0dc8 E8020000 		.word	.LC21
 3027 0dcc 40020000 		.word	.LC19
 3028              	.LBE45:
 3029              	.LBE48:
 3030              		.cfi_endproc
 3031              	.LFE75:
 3033              		.align	2
 3034              		.global	armwave_cleanup
 3035              		.syntax unified
 3036              		.arm
 3037              		.fpu vfp
 3039              	armwave_cleanup:
 3040              	.LFB76:
 519:armwave.c     **** 
 520:armwave.c     **** /*
 521:armwave.c     ****  * Make a test square waveform.
 522:armwave.c     ****  *
 523:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 524:armwave.c     ****  */
 525:armwave.c     **** #if 0
 526:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 527:armwave.c     **** {
 528:armwave.c     ****     uint8_t v;
 529:armwave.c     ****     float noise, xnoise;
 530:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 531:armwave.c     ****     int w, x;
 532:armwave.c     **** 
 533:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 534:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 535:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 536:armwave.c     ****             noise *= noise;
 537:armwave.c     ****             noise *= noise;
 538:armwave.c     ****             noise *= noise;
 539:armwave.c     **** 
 540:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 541:armwave.c     ****                 noise = -noise;
 542:armwave.c     **** 
 543:armwave.c     ****             //noise += 1.0f;
 544:armwave.c     **** 
 545:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 546:armwave.c     ****                 new_level = 0.2f;
 547:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 548:armwave.c     ****                 new_level = 0.8f;
 549:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 550:armwave.c     ****                 new_level = 0.2f;
 551:armwave.c     ****             } else {
 552:armwave.c     ****                 new_level = 0.8f;
 553:armwave.c     ****             }
 554:armwave.c     **** 
 555:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 556:armwave.c     **** 
 557:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 558:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 559:armwave.c     ****         }
 560:armwave.c     ****     }
 561:armwave.c     **** }
 562:armwave.c     **** #endif
 563:armwave.c     **** 
 564:armwave.c     **** /*
 565:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 566:armwave.c     ****  */
 567:armwave.c     **** void armwave_cleanup()
 568:armwave.c     **** {
 3041              		.loc 1 568 1 view -0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 0
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 569:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3045              		.loc 1 569 5 view .LVU755
 3046              	@ armwave.c:568: {
 568:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3047              		.loc 1 568 1 is_stmt 0 view .LVU756
 3048 0dd0 10402DE9 		push	{r4, lr}	@
 3049              		.cfi_def_cfa_offset 8
 3050              		.cfi_offset 4, -8
 3051              		.cfi_offset 14, -4
 3052              	@ armwave.c:569:     free(g_armwave_state.out_pixbuf);
 3053              		.loc 1 569 25 view .LVU757
 3054 0dd4 34409FE5 		ldr	r4, .L184	@ tmp114,
 3055              	@ armwave.c:569:     free(g_armwave_state.out_pixbuf);
 3056              		.loc 1 569 5 view .LVU758
 3057 0dd8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3058 0ddc FEFFFFEB 		bl	free		@
 3059              	.LVL200:
 570:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3060              		.loc 1 570 5 is_stmt 1 view .LVU759
 3061 0de0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3062 0de4 FEFFFFEB 		bl	free		@
 3063              	.LVL201:
 571:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3064              		.loc 1 571 5 view .LVU760
 3065 0de8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3066 0dec FEFFFFEB 		bl	free		@
 3067              	.LVL202:
 572:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3068              		.loc 1 572 5 view .LVU761
 3069 0df0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3070 0df4 FEFFFFEB 		bl	free		@
 3071              	.LVL203:
 573:armwave.c     **** 
 574:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3072              		.loc 1 574 5 view .LVU762
 3073              	@ armwave.c:574:     g_armwave_state.out_pixbuf = NULL;
 3074              		.loc 1 574 32 is_stmt 0 view .LVU763
 3075 0df8 0030A0E3 		mov	r3, #0	@ tmp123,
 3076 0dfc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 575:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3077              		.loc 1 575 5 is_stmt 1 view .LVU764
 3078              	@ armwave.c:575:     g_armwave_state.ch1_buffer = NULL;
 3079              		.loc 1 575 32 is_stmt 0 view .LVU765
 3080 0e00 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 576:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3081              		.loc 1 576 5 is_stmt 1 view .LVU766
 3082              	@ armwave.c:576:     g_armwave_state.xcoord_to_xpixel = NULL;
 3083              		.loc 1 576 38 is_stmt 0 view .LVU767
 3084 0e04 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 577:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3085              		.loc 1 577 5 is_stmt 1 view .LVU768
 3086              	@ armwave.c:577:     g_armwave_state.test_wave_buffer = NULL;
 3087              		.loc 1 577 38 is_stmt 0 view .LVU769
 3088 0e08 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3089              	@ armwave.c:578: }
 578:armwave.c     **** }
 3090              		.loc 1 578 1 view .LVU770
 3091 0e0c 1080BDE8 		pop	{r4, pc}	@
 3092              	.L185:
 3093              		.align	2
 3094              	.L184:
 3095 0e10 00000000 		.word	g_armwave_state
 3096              		.cfi_endproc
 3097              	.LFE76:
 3099              		.comm	gamma_table,256,4
 3100              		.comm	g_armwave_state,136,4
 3101              		.section	.rodata
 3102              		.align	2
 3103              		.set	.LANCHOR0,. + 0
 3106              	__PRETTY_FUNCTION__.17124:
 3107 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3107      6176655F 
 3107      73657475 
 3107      705F7265 
 3107      6E646572 
 3108 0015 000000   		.space	3
 3111              	__PRETTY_FUNCTION__.17131:
 3112 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3112      6176655F 
 3112      7365745F 
 3112      77617665 
 3112      5F706F69 
 3113 0031 000000   		.space	3
 3116              	__PRETTY_FUNCTION__.17138:
 3117 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3117      6176655F 
 3117      7365745F 
 3117      77617665 
 3117      5F706F69 
 3118              		.section	.rodata.str1.4,"aMS",%progbits,1
 3119              		.align	2
 3120              	.LC0:
 3121 0000 76302E30 		.ascii	"v0.0.1\000"
 3121      2E3100
 3122 0007 00       		.space	1
 3123              	.LC1:
 3124 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3124      61766520 
 3124      76657273 
 3124      696F6E3A 
 3124      2025730A 
 3125 001d 000000   		.space	3
 3126              	.LC2:
 3127 0020 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 3127      6176655F 
 3127      67656E65 
 3127      72617465 
 3127      3A20736C 
 3128 0051 00       		.ascii	"\000"
 3129 0052 0000     		.space	2
 3130              	.LC3:
 3131 0054 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d) la"
 3131      6176655F 
 3131      67656E65 
 3131      72617465 
 3131      3A20736C 
 3132 0087 73740A00 		.ascii	"st\012\000"
 3133 008b 00       		.space	1
 3134              	.LC4:
 3135 008c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3135      20653D25 
 3135      6420773D 
 3135      25642077 
 3135      733D2564 
 3136              	.LC5:
 3137 00b8 61726D77 		.ascii	"armwave.c\000"
 3137      6176652E 
 3137      6300
 3138 00c2 0000     		.space	2
 3139              	.LC6:
 3140 00c4 73746172 		.ascii	"start_point < end_point\000"
 3140      745F706F 
 3140      696E7420 
 3140      3C20656E 
 3140      645F706F 
 3141              	.LC7:
 3142 00dc 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3142      7566665F 
 3142      73697A65 
 3142      3D25642C 
 3142      20636D70 
 3143 010f 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3143      5F776964 
 3143      74683D25 
 3143      642C2077 
 3143      6176655F 
 3144 0139 000000   		.space	3
 3145              	.LC8:
 3146 013c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3146      6D776176 
 3146      655F7374 
 3146      6174652E 
 3146      6368315F 
 3147 015f 00       		.space	1
 3148              	.LC9:
 3149 0160 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3149      6D776176 
 3149      655F7374 
 3149      6174652E 
 3149      78636F6F 
 3150 0189 000000   		.space	3
 3151              	.LC10:
 3152 018c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3152      3A203078 
 3152      25303878 
 3152      20307825 
 3152      30387820 
 3153              	.LC11:
 3154 01b0 77617665 		.ascii	"wave_buffer != NULL\000"
 3154      5F627566 
 3154      66657220 
 3154      213D204E 
 3154      554C4C00 
 3155              	.LC12:
 3156 01c4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3156      6176655F 
 3156      7365745F 
 3156      77617665 
 3156      5F706F69 
 3157 01f7 78636565 		.ascii	"xceeded\000"
 3157      64656400 
 3158 01ff 00       		.space	1
 3159              	.LC13:
 3160 0200 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3160      5F627566 
 3160      6665725F 
 3160      70747220 
 3160      213D2030 
 3161 0215 000000   		.space	3
 3162              	.LC14:
 3163 0218 776200   		.ascii	"wb\000"
 3164 021b 00       		.space	1
 3165              	.LC15:
 3166 021c 50330A00 		.ascii	"P3\012\000"
 3167              	.LC16:
 3168 0220 25642025 		.ascii	"%d %d\012\000"
 3168      640A00
 3169 0227 00       		.space	1
 3170              	.LC17:
 3171 0228 3235350A 		.ascii	"255\012\000"
 3171      00
 3172 022d 000000   		.space	3
 3173              	.LC18:
 3174 0230 25336420 		.ascii	"%3d %3d %3d\012\000"
 3174      25336420 
 3174      2533640A 
 3174      00
 3175 023d 000000   		.space	3
 3176              	.LC19:
 3177 0240 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3177      6176655F 
 3177      74657374 
 3177      5F627566 
 3177      6665725F 
 3178 0273 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3178      20627566 
 3178      66657220 
 3178      28256420 
 3178      62797465 
 3179              	.LC20:
 3180 0294 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3180      6176655F 
 3180      66696C6C 
 3180      5F706978 
 3180      6275665F 
 3181 02c7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3181      20666169 
 3181      6C65642C 
 3181      20726574 
 3181      75726E69 
 3182 02e6 0000     		.space	2
 3183              	.LC21:
 3184 02e8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3184      756C6174 
 3184      696E6720 
 3184      74657374 
 3184      20736574 
 3185              		.text
 3186              	.Letext0:
 3187              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3188              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3189              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3190              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3191              		.file 7 "/usr/include/stdio.h"
 3192              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3193              		.file 9 "/usr/include/errno.h"
 3194              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3195              		.file 11 "/usr/include/unistd.h"
 3196              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3197              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3198              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3199              		.file 15 "/usr/include/math.h"
 3200              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3201              		.file 17 "/usr/include/time.h"
 3202              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3203              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3204              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3205              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3206              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3207              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3208              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3209              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3210              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3211              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3212              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3213              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3214              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3215              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3216              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3217              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3218              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3219              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3220              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3221              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3222              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3223              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3224              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3225              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3226              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3227              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3228              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3229              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3230              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3231              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3232              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3233              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3234              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3235              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3236              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3237              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3238              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3239              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3240              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3241              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3242              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3243              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3244              		.file 60 "/usr/local/include/python3.8/context.h"
 3245              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3246              		.file 62 "/usr/local/include/python3.8/code.h"
 3247              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3248              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3249              		.file 65 "/usr/local/include/python3.8/import.h"
 3250              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3251              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3252              		.file 68 "/usr/include/malloc.h"
 3253              		.file 69 "armwave.h"
 3254              		.file 70 "/usr/include/stdlib.h"
 3255              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3256              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3257              		.file 73 "<built-in>"
 3258              		.file 74 "/usr/include/assert.h"
