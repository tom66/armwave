   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.31,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.31,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.31,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.31
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.31, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     ****     
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 85 9 is_stmt 1 view .LVU41
  86:armwave.c     **** 
  87:armwave.c     ****         // roll through y and render the slice into the out buffer
  88:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  89:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 89 9 view .LVU42
 280              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 281              		.loc 1 85 64 is_stmt 0 view .LVU43
 282 00cc 200094E5 		ldr	r0, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 89 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.38, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 90 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 90 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  91:armwave.c     **** 
  92:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 92 13 is_stmt 1 view .LVU47
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  94:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 94 17 view .LVU48
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 95 17 view .LVU49
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 96 17 view .LVU50
 300              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 95 63 is_stmt 0 view .LVU51
 302 00e4 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 96 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****                 word >>= 8;
 309              		.loc 1 97 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 96 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 97 17 is_stmt 1 view .LVU55
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 94 17 view .LVU56
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 95 17 view .LVU57
  96:armwave.c     ****                 word >>= 8;
 322              		.loc 1 96 17 view .LVU58
 323              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 95 63 is_stmt 0 view .LVU59
 325 010c 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 327              		.loc 1 96 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 95 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 335              		.loc 1 96 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 89 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 344              		.loc 1 96 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 97 17 is_stmt 1 view .LVU65
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 94 17 view .LVU66
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 95 17 view .LVU67
  96:armwave.c     ****                 word >>= 8;
 351              		.loc 1 96 17 view .LVU68
 352              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 95 63 is_stmt 0 view .LVU69
 354 0134 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 89 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 359              		.loc 1 96 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 97 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 94 17 view .LVU73
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 95 17 view .LVU74
  96:armwave.c     ****                 word >>= 8;
 368              		.loc 1 96 17 view .LVU75
 369              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 95 63 is_stmt 0 view .LVU76
 371 014c 2CC094E5 		ldr	ip, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 373              		.loc 1 96 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 97 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 89 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 384              		.loc 1 84 5 view .LVU80
 385 0164 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  98:armwave.c     ****             }
  99:armwave.c     ****         }
 100:armwave.c     ****     }
 101:armwave.c     **** }
 102:armwave.c     **** 
 103:armwave.c     **** /*
 104:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 105:armwave.c     ****  */
 106:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 107:armwave.c     **** {
 412              		.loc 1 107 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 108 5 view .LVU84
 109:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 109 5 view .LVU85
 110:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 110 5 view .LVU86
 111:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 111 5 view .LVU87
 420              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 107 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:115:     assert(out_buffer != NULL);
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 113:armwave.c     ****     uint32_t offset;
 114:armwave.c     **** 
 115:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 115 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 111 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 107 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 111 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 112 5 is_stmt 1 view .LVU93
 113:armwave.c     **** 
 448              		.loc 1 113 5 view .LVU94
 449              		.loc 1 115 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 116:armwave.c     **** 
 117:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 118:armwave.c     **** 
 119:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 119 5 view .LVU96
 452              	@ armwave.c:119:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 119 41 is_stmt 0 view .LVU97
 454 0194 40C095E5 		ldr	ip, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 120:armwave.c     **** 
 121:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 121 5 is_stmt 1 view .LVU98
 458              		.loc 1 121 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 123:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 124:armwave.c     ****         // most normal waveforms.
 125:armwave.c     ****         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 127:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 129:armwave.c     ****                 value = wave_word & 0xff;
 130:armwave.c     ****                 wave_word >>= 8;
 131:armwave.c     **** 
 132:armwave.c     ****                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 133 52 view .LVU100
 463 01a4 F4A5D5E1 		ldrsh	r10, [r5, #84]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 134 52 view .LVU101
 466 01a8 F695D5E1 		ldrsh	r9, [r5, #86]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 135 52 view .LVU102
 469 01ac F8B5D5E1 		ldrsh	fp, [r5, #88]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 121 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 125:armwave.c     **** 
 476              		.loc 1 125 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:125:         wave_word = *base_32ptr++;
 125:armwave.c     **** 
 478              		.loc 1 125 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 127 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:127:         if(COND_UNLIKELY(wave_word != 0)) {
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 127 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 121 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 121 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:154: }
 136:armwave.c     **** 
 137:armwave.c     ****                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 140:armwave.c     **** 
 141:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 142:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 144:armwave.c     ****                     // Is there a better way?
 145:armwave.c     ****                     nsub = n + i;
 146:armwave.c     ****                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 151:armwave.c     ****             }
 152:armwave.c     ****         } 
 153:armwave.c     ****     }
 154:armwave.c     **** }
 499              		.loc 1 154 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 129:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 129 17 is_stmt 1 view .LVU111
 130:armwave.c     **** 
 509              		.loc 1 130 17 view .LVU112
 510              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 132 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 514              		.loc 1 130 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 132 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 132 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 133 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 134 21 view .LVU118
 135:armwave.c     **** 
 524              		.loc 1 135 21 view .LVU119
 137:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 137 21 view .LVU120
 138:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 138 21 view .LVU121
 139:armwave.c     **** 
 527              		.loc 1 139 21 view .LVU122
 142:armwave.c     **** 
 528              		.loc 1 142 21 view .LVU123
 145:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 145 21 view .LVU124
 146:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 146 21 view .LVU125
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 147 21 view .LVU126
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 148 21 view .LVU127
 149:armwave.c     ****                 }
 533              		.loc 1 149 21 view .LVU128
 534              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 535              		.loc 1 135 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 134 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 541              		.loc 1 135 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 545              		.loc 1 139 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 134 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 552              		.loc 1 139 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 133 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 138 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 133 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 569              		.loc 1 142 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 572              		.loc 1 149 39 view .LVU139
 573 0210 400095E5 		ldr	r0, [r5, #64]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 575              		.loc 1 142 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 137 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 581              		.loc 1 142 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 146 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 587              		.loc 1 142 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 590              		.loc 1 142 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 137 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 147 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 601              		.loc 1 149 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 604              		.loc 1 142 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 607              		.loc 1 149 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 610              		.loc 1 142 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 613              		.loc 1 142 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 616              		.loc 1 149 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 129:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 129 17 is_stmt 1 view .LVU154
 130:armwave.c     **** 
 621              		.loc 1 130 17 view .LVU155
 622              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 132 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 627              		.loc 1 130 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 132 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 132 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 133 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 134 21 view .LVU161
 135:armwave.c     **** 
 637              		.loc 1 135 21 view .LVU162
 137:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 137 21 view .LVU163
 138:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 138 21 view .LVU164
 139:armwave.c     **** 
 640              		.loc 1 139 21 view .LVU165
 142:armwave.c     **** 
 641              		.loc 1 142 21 view .LVU166
 145:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 145 21 view .LVU167
 643              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 644              		.loc 1 135 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 134 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 650              		.loc 1 135 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 654              		.loc 1 139 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 133 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 134 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 667              		.loc 1 142 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 138 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 146 21 is_stmt 1 view .LVU176
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 147 21 view .LVU177
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 148 21 view .LVU178
 149:armwave.c     ****                 }
 676              		.loc 1 149 21 view .LVU179
 677              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 678              		.loc 1 142 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 138 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 685              		.loc 1 142 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 688              		.loc 1 149 39 view .LVU183
 689 028c 404095E5 		ldr	r4, [r5, #64]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 133 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 146 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 137 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 701              		.loc 1 142 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 147 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 707              		.loc 1 149 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 137 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 714              		.loc 1 142 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 717              		.loc 1 142 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 720              		.loc 1 142 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 723              		.loc 1 142 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 726              		.loc 1 149 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 729              		.loc 1 142 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 732              		.loc 1 142 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 735              		.loc 1 149 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 129:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 129 17 is_stmt 1 view .LVU199
 130:armwave.c     **** 
 740              		.loc 1 130 17 view .LVU200
 741              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 132 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 745              		.loc 1 130 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 132 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 132 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 133 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 134 21 view .LVU206
 135:armwave.c     **** 
 755              		.loc 1 135 21 view .LVU207
 137:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 137 21 view .LVU208
 138:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 138 21 view .LVU209
 139:armwave.c     **** 
 758              		.loc 1 139 21 view .LVU210
 142:armwave.c     **** 
 759              		.loc 1 142 21 view .LVU211
 145:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 145 21 view .LVU212
 761              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 762              		.loc 1 135 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 134 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 768              		.loc 1 135 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 133 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 776              		.loc 1 139 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 134 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 783              		.loc 1 139 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 138 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 138:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 138 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 146 21 is_stmt 1 view .LVU222
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 147 21 view .LVU223
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 148 21 view .LVU224
 149:armwave.c     ****                 }
 796              		.loc 1 149 21 view .LVU225
 797              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 133 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 802              		.loc 1 149 39 view .LVU227
 803 0304 400095E5 		ldr	r0, [r5, #64]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 137 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 146 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 812              		.loc 1 142 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 815              		.loc 1 142 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 137 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 147 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 825              		.loc 1 149 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 828              		.loc 1 142 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 831              		.loc 1 142 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 834              		.loc 1 142 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 837              		.loc 1 142 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 840              		.loc 1 149 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 843              		.loc 1 142 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 846              		.loc 1 142 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 849              		.loc 1 149 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 129:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 129 17 is_stmt 1 view .LVU243
 130:armwave.c     **** 
 854              		.loc 1 130 17 view .LVU244
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 132 17 view .LVU245
 856              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 132 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 133 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 134 21 view .LVU248
 135:armwave.c     **** 
 863              		.loc 1 135 21 view .LVU249
 137:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 137 21 view .LVU250
 138:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 138 21 view .LVU251
 139:armwave.c     **** 
 866              		.loc 1 139 21 view .LVU252
 142:armwave.c     **** 
 867              		.loc 1 142 21 view .LVU253
 145:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 145 21 view .LVU254
 869              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 870              		.loc 1 135 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 134 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 876              		.loc 1 135 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 133 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 884              		.loc 1 139 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 134 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 891              		.loc 1 139 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 138 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 138:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 138 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 146 21 is_stmt 1 view .LVU264
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 147 21 view .LVU265
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 148 21 view .LVU266
 149:armwave.c     ****                 }
 904              		.loc 1 149 21 view .LVU267
 905              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 133 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:148:                     offset = yy + (xx * g_armwave_state.target_width);
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 148 39 view .LVU269
 911 0378 407095E5 		ldr	r7, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 137 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 146 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 919              		.loc 1 142 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 922              		.loc 1 142 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 137 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 147 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 932              		.loc 1 142 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 935              		.loc 1 142 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 938              		.loc 1 149 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 941              		.loc 1 142 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 944              		.loc 1 142 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 947              		.loc 1 149 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 950              		.loc 1 142 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 953              		.loc 1 142 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 956              		.loc 1 149 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 115:armwave.c     **** 
 961              		.loc 1 115 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7320A0E3 		mov	r2, #115	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 115:armwave.c     **** 
 966              		.loc 1 115 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 115:armwave.c     **** 
 969              		.loc 1 115 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 115:armwave.c     **** 
 973              		.loc 1 115 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 155:armwave.c     **** 
 156:armwave.c     **** /*
 157:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 158:armwave.c     ****  * Rows are repeated as necessary.
 159:armwave.c     ****  */
 160:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 161:armwave.c     **** {
 992              		.loc 1 161 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 996              		.loc 1 162 5 view .LVU290
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 163 5 view .LVU291
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 164 5 view .LVU292
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 165 5 view .LVU293
 1000              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1001              		.loc 1 161 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:169:     assert(out_buffer != NULL);
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 167:armwave.c     ****     uint32_t offset;
 168:armwave.c     **** 
 169:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 169 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 165 15 view .LVU296
 1018 03e8 34519FE5 		ldr	r5, .L79	@ tmp202,
 1019              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1020              		.loc 1 161 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 165 15 view .LVU298
 1025 03f0 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 166 5 is_stmt 1 view .LVU299
 167:armwave.c     **** 
 1028              		.loc 1 167 5 view .LVU300
 1029              		.loc 1 169 5 view .LVU301
 1030 03f4 4500000A 		beq	.L76		@,
 170:armwave.c     **** 
 171:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 171 5 view .LVU302
 1032              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 171 41 is_stmt 0 view .LVU303
 1034 03f8 408095E5 		ldr	r8, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 172 5 is_stmt 1 view .LVU304
 173:armwave.c     **** 
 174:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 174 5 view .LVU305
 1039              		.loc 1 174 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0B0000DA 		ble	.L54		@,
 1042              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 176:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 177:armwave.c     ****         // most normal waveforms.
 178:armwave.c     ****         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 180:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 183:armwave.c     ****                 wave_word >>= 8;
 184:armwave.c     **** 
 185:armwave.c     ****                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 187 52 view .LVU307
 1044 0408 F635D5E1 		ldrsh	r3, [r5, #86]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 186 52 view .LVU308
 1047 040c F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1049              		.loc 1 174 11 view .LVU309
 1050 0410 00E0A0E3 		mov	lr, #0	@ n,
 1051              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1052              		.loc 1 187 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 188 52 view .LVU311
 1056 0418 F835D5E1 		ldrsh	r3, [r5, #88]	@ _14, g_armwave_state.ch1_color.b
 1057 041c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1058              	.LVL76:
 1059              	.L61:
 178:armwave.c     **** 
 1060              		.loc 1 178 9 is_stmt 1 view .LVU312
 1061              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 1062              		.loc 1 178 19 is_stmt 0 view .LVU313
 1063 0420 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1064              	.LVL77:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1065              		.loc 1 180 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1067              		.loc 1 180 11 is_stmt 0 view .LVU315
 1068 0424 00005CE3 		cmp	ip, #0	@ wave_word,
 1069 0428 0400001A 		bne	.L77		@,
 1070              	.L57:
 1071              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1072              		.loc 1 174 28 view .LVU316
 1073 042c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1074              	.LVL78:
 1075              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1076              		.loc 1 174 5 view .LVU317
 1077 0430 0E0058E1 		cmp	r8, lr	@ npix, n
 1078 0434 F9FFFFCA 		bgt	.L61		@,
 1079              	.LVL79:
 1080              	.L54:
 1081              	@ armwave.c:210: }
 189:armwave.c     **** 
 190:armwave.c     ****                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 193:armwave.c     **** 
 194:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 195:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 197:armwave.c     ****                     // Do line scaling as necessary.
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                 }
 207:armwave.c     ****             }
 208:armwave.c     ****         }
 209:armwave.c     ****     }
 210:armwave.c     **** }
 1082              		.loc 1 210 1 view .LVU318
 1083 0438 0CD08DE2 		add	sp, sp, #12	@,,
 1084              		.cfi_remember_state
 1085              		.cfi_def_cfa_offset 36
 1086              		@ sp needed	@
 1087 043c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1088              	.LVL80:
 1089              	.L77:
 1090              		.cfi_restore_state
 1091              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1092              		.loc 1 185 19 view .LVU319
 1093 0440 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1094              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1095              		.loc 1 181 19 view .LVU320
 1096 0444 0090A0E3 		mov	r9, #0	@ w,
 1097              	.LVL81:
 182:armwave.c     ****                 wave_word >>= 8;
 1098              		.loc 1 182 17 is_stmt 1 view .LVU321
 183:armwave.c     **** 
 1099              		.loc 1 183 17 view .LVU322
 1100              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1101              		.loc 1 183 27 is_stmt 0 view .LVU323
 1102 0448 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1103              	.LVL82:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1104              		.loc 1 185 17 is_stmt 1 view .LVU324
 1105              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1106              		.loc 1 185 19 is_stmt 0 view .LVU325
 1107 044c 0500001A 		bne	.L78		@,
 1108              	.L58:
 1109              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1110              		.loc 1 181 32 view .LVU326
 1111 0450 019089E2 		add	r9, r9, #1	@ w, w,
 1112              	.LVL83:
 1113              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1114              		.loc 1 181 13 view .LVU327
 1115 0454 040059E3 		cmp	r9, #4	@ w,
 1116 0458 F3FFFF0A 		beq	.L57		@,
 182:armwave.c     ****                 wave_word >>= 8;
 1117              		.loc 1 182 17 is_stmt 1 view .LVU328
 1118              	.LVL84:
 183:armwave.c     **** 
 1119              		.loc 1 183 17 view .LVU329
 1120              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1121              		.loc 1 185 19 is_stmt 0 view .LVU330
 1122 045c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1123              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1124              		.loc 1 183 27 view .LVU331
 1125 0460 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1126              	.LVL85:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1127              		.loc 1 185 17 is_stmt 1 view .LVU332
 1128              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1129              		.loc 1 185 19 is_stmt 0 view .LVU333
 1130 0464 F9FFFF0A 		beq	.L58		@,
 1131              	.L78:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1132              		.loc 1 186 21 is_stmt 1 view .LVU334
 1133              	.LVL86:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1134              		.loc 1 187 21 view .LVU335
 188:armwave.c     **** 
 1135              		.loc 1 188 21 view .LVU336
 190:armwave.c     ****                     g = MIN(gg, 255);
 1136              		.loc 1 190 21 view .LVU337
 191:armwave.c     ****                     b = MIN(bb, 255);
 1137              		.loc 1 191 21 view .LVU338
 192:armwave.c     **** 
 1138              		.loc 1 192 21 view .LVU339
 195:armwave.c     **** 
 1139              		.loc 1 195 21 view .LVU340
 1140              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1141              		.loc 1 188 55 is_stmt 0 view .LVU341
 1142 0468 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1143              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1144              		.loc 1 187 55 view .LVU342
 1145 046c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1146 0470 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1147              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1148              		.loc 1 188 55 view .LVU343
 1149 0474 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1150              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1151              		.loc 1 187 55 view .LVU344
 1152 0478 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1153              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1154              		.loc 1 188 24 view .LVU345
 1155 047c 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1156              	.LVL87:
 1157              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1158              		.loc 1 186 55 view .LVU346
 1159 0480 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1160              	.LVL88:
 1161              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1162              		.loc 1 187 24 view .LVU347
 1163 0484 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1164              	.LVL89:
 1165              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 1166              		.loc 1 192 25 view .LVU348
 1167 0488 FF0052E3 		cmp	r2, #255	@ bb,
 1168 048c FF20A0A3 		movge	r2, #255	@ bb,
 1169              	.LVL90:
 1170              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 1171              		.loc 1 191 25 view .LVU349
 1172 0490 FF0051E3 		cmp	r1, #255	@ gg,
 1173 0494 FF10A0A3 		movge	r1, #255	@ gg,
 1174              	.LVL91:
 1175              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1176              		.loc 1 186 24 view .LVU350
 1177 0498 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1178              	.LVL92:
 1179              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1180              		.loc 1 190 25 view .LVU351
 1181 049c FF0053E3 		cmp	r3, #255	@ rr,
 1182              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1183              		.loc 1 195 56 view .LVU352
 1184 04a0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1185              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1186              		.loc 1 190 25 view .LVU353
 1187 04a4 FF30A0A3 		movge	r3, #255	@ rr,
 1188              	.LVL93:
 1189              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1190              		.loc 1 195 44 view .LVU354
 1191 04a8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1192              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1193              		.loc 1 195 56 view .LVU355
 1194 04ac 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1195              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1196              		.loc 1 199 57 view .LVU356
 1197 04b0 1CA095E5 		ldr	r10, [r5, #28]	@ _28, g_armwave_state.vscale
 1198              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1199              		.loc 1 195 44 view .LVU357
 1200 04b4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1201              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1202              		.loc 1 195 51 view .LVU358
 1203 04b8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1204              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1205              		.loc 1 195 62 view .LVU359
 1206 04bc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1207              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1208              		.loc 1 199 32 view .LVU360
 1209 04c0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1210              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1211              		.loc 1 195 62 view .LVU361
 1212 04c4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1213              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1214              		.loc 1 202 21 view .LVU362
 1215 04c8 00005AE3 		cmp	r10, #0	@ _28,
 1216              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1217              		.loc 1 195 26 view .LVU363
 1218 04cc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1219              	.LVL94:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1220              		.loc 1 198 21 is_stmt 1 view .LVU364
 199:armwave.c     ****                     xx = (nsub >> 8);
 1221              		.loc 1 199 21 view .LVU365
 1222              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 1223              		.loc 1 200 32 is_stmt 0 view .LVU366
 1224 04d0 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1225              	.LVL95:
 1226              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1227              		.loc 1 199 24 view .LVU367
 1228 04d4 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1229              	.LVL96:
 200:armwave.c     **** 
 1230              		.loc 1 200 21 is_stmt 1 view .LVU368
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1231              		.loc 1 202 21 view .LVU369
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1232              		.loc 1 202 21 is_stmt 0 view .LVU370
 1233 04d8 DCFFFF0A 		beq	.L58		@,
 1234              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1235              		.loc 1 202 29 view .LVU371
 1236 04dc 0030A0E3 		mov	r3, #0	@ row,
 1237              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1238              		.loc 1 202 38 view .LVU372
 1239 04e0 0320A0E1 		mov	r2, r3	@ _35, row
 1240              	.LVL97:
 1241              	.L59:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1242              		.loc 1 203 25 is_stmt 1 discriminator 3 view .LVU373
 204:armwave.c     ****                     }
 1243              		.loc 1 204 25 discriminator 3 view .LVU374
 1244              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1245              		.loc 1 203 52 is_stmt 0 discriminator 3 view .LVU375
 1246 04e4 401095E5 		ldr	r1, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1247              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1248              		.loc 1 203 45 discriminator 3 view .LVU376
 1249 04e8 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1250              	.LVL98:
 1251              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1252              		.loc 1 202 67 discriminator 3 view .LVU377
 1253 04ec 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1254              	.LVL99:
 1255              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1256              		.loc 1 204 43 discriminator 3 view .LVU378
 1257 04f0 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1258              	.LVL100:
 1259              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1260              		.loc 1 202 67 discriminator 3 view .LVU379
 1261 04f4 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1262              	.LVL101:
 1263              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1264              		.loc 1 202 38 discriminator 3 view .LVU380
 1265 04f8 0320A0E1 		mov	r2, r3	@ _35, row
 1266              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1267              		.loc 1 204 53 discriminator 3 view .LVU381
 1268 04fc 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1269              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1270              		.loc 1 202 21 discriminator 3 view .LVU382
 1271 0500 1C1095E5 		ldr	r1, [r5, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1272              	.LVL102:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1273              		.loc 1 202 21 discriminator 3 view .LVU383
 1274 0504 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1275 0508 F5FFFF3A 		bcc	.L59		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 202 21 discriminator 3 view .LVU384
 1277 050c CFFFFFEA 		b	.L58		@
 1278              	.LVL103:
 1279              	.L76:
 169:armwave.c     **** 
 1280              		.loc 1 169 5 is_stmt 1 discriminator 1 view .LVU385
 1281 0510 10309FE5 		ldr	r3, .L79+4	@,
 1282 0514 A920A0E3 		mov	r2, #169	@,
 1283 0518 0C109FE5 		ldr	r1, .L79+8	@,
 1284 051c 0C009FE5 		ldr	r0, .L79+12	@,
 1285              	.LVL104:
 169:armwave.c     **** 
 1286              		.loc 1 169 5 is_stmt 0 discriminator 1 view .LVU386
 1287 0520 FEFFFFEB 		bl	__assert_fail		@
 1288              	.LVL105:
 1289              	.L80:
 1290              		.align	2
 1291              	.L79:
 1292 0524 00000000 		.word	g_armwave_state
 1293 0528 18000000 		.word	.LANCHOR0+24
 1294 052c 20000000 		.word	.LC2
 1295 0530 2C000000 		.word	.LC3
 1296              		.cfi_endproc
 1297              	.LFE61:
 1299              		.align	2
 1300              		.global	armwave_setup_render
 1301              		.syntax unified
 1302              		.arm
 1303              		.fpu vfp
 1305              	armwave_setup_render:
 1306              	.LVL106:
 1307              	.LFB62:
 211:armwave.c     **** 
 212:armwave.c     **** /*
 213:armwave.c     ****  * Setup the renderer with passed parameters.
 214:armwave.c     ****  */
 215:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 216:armwave.c     **** {
 1308              		.loc 1 216 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 12, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 217:armwave.c     ****     uint32_t length, xx;
 1312              		.loc 1 217 5 view .LVU388
 218:armwave.c     ****     float points_per_pixel;
 1313              		.loc 1 218 5 view .LVU389
 219:armwave.c     **** 
 220:armwave.c     ****     assert(start_point < end_point);
 1314              		.loc 1 220 5 view .LVU390
 1315              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1316              		.loc 1 216 1 is_stmt 0 view .LVU391
 1317 0534 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1318              		.cfi_def_cfa_offset 24
 1319              		.cfi_offset 4, -24
 1320              		.cfi_offset 5, -20
 1321              		.cfi_offset 6, -16
 1322              		.cfi_offset 7, -12
 1323              		.cfi_offset 8, -8
 1324              		.cfi_offset 14, -4
 1325              	@ armwave.c:220:     assert(start_point < end_point);
 1326              		.loc 1 220 5 view .LVU392
 1327 0538 010050E1 		cmp	r0, r1	@ start_point, end_point
 1328              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1329              		.loc 1 216 1 view .LVU393
 1330 053c 028B2DED 		vpush.64	{d8}	@
 1331              		.cfi_def_cfa_offset 32
 1332              		.cfi_offset 80, -32
 1333              		.cfi_offset 81, -28
 1334              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1335              		.loc 1 216 1 view .LVU394
 1336 0540 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1337 0544 20609DE5 		ldr	r6, [sp, #32]	@ target_width, target_width
 1338 0548 24109DE5 		ldr	r1, [sp, #36]	@ target_height, target_height
 1339              	.LVL107:
 1340              	@ armwave.c:220:     assert(start_point < end_point);
 1341              		.loc 1 220 5 view .LVU395
 1342 054c 6B00002A 		bcs	.L99		@,
 221:armwave.c     **** 
 222:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 223:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1343              		.loc 1 223 5 is_stmt 1 view .LVU396
 1344 0550 0070A0E1 		mov	r7, r0	@ start_point, start_point
 1345 0554 010C41E2 		sub	r0, r1, #256	@ tmp153, target_height,
 1346              	.LVL108:
 1347              		.loc 1 223 5 is_stmt 0 view .LVU397
 1348 0558 010CD0E3 		bics	r0, r0, #256	@ tmp230, tmp153,
 1349 055c 4A00000A 		beq	.L83		@,
 1350              	@ armwave.c:223:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1351              		.loc 1 223 5 discriminator 1 view .LVU398
 1352 0560 010B41E2 		sub	r0, r1, #1024	@ tmp155, target_height,
 1353 0564 010BD0E3 		bics	r0, r0, #1024	@ tmp231, tmp155,
 1354 0568 5500001A 		bne	.L100		@,
 224:armwave.c     **** 
 225:armwave.c     ****     if(target_height == 256) {
 1355              		.loc 1 225 5 is_stmt 1 view .LVU399
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 227:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 228:armwave.c     ****     } else if(target_height == 512) {
 229:armwave.c     ****         g_armwave_state.row_shift = 9;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 231:armwave.c     ****     } else if(target_height == 1024) {
 1356              		.loc 1 231 12 view .LVU400
 1357              	@ armwave.c:231:     } else if(target_height == 1024) {
 1358              		.loc 1 231 14 is_stmt 0 view .LVU401
 1359 056c 010B51E3 		cmp	r1, #1024	@ target_height,
 1360              	@ armwave.c:232:         g_armwave_state.row_shift = 10;
 232:armwave.c     ****         g_armwave_state.row_shift = 10;
 1361              		.loc 1 232 35 view .LVU402
 1362 0570 A0419FE5 		ldr	r4, .L104+4	@ tmp228,
 1363              	@ armwave.c:231:     } else if(target_height == 1024) {
 231:armwave.c     ****         g_armwave_state.row_shift = 10;
 1364              		.loc 1 231 14 view .LVU403
 1365 0574 4D00000A 		beq	.L101		@,
 233:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 234:armwave.c     ****     } else if(target_height == 2048) {
 1366              		.loc 1 234 12 is_stmt 1 view .LVU404
 1367              	@ armwave.c:234:     } else if(target_height == 2048) {
 1368              		.loc 1 234 14 is_stmt 0 view .LVU405
 1369 0578 020B51E3 		cmp	r1, #2048	@ target_height,
 235:armwave.c     ****         g_armwave_state.row_shift = 11;
 1370              		.loc 1 235 9 is_stmt 1 view .LVU406
 1371              	@ armwave.c:235:         g_armwave_state.row_shift = 11;
 1372              		.loc 1 235 35 is_stmt 0 view .LVU407
 1373 057c 0BC0A003 		moveq	ip, #11	@ tmp174,
 1374              	@ armwave.c:236:         g_armwave_state.row_mask = 0x7ff;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1375              		.loc 1 236 34 view .LVU408
 1376 0580 94019F05 		ldreq	r0, .L104+8	@ tmp176,
 1377              	@ armwave.c:235:         g_armwave_state.row_shift = 11;
 235:armwave.c     ****         g_armwave_state.row_shift = 11;
 1378              		.loc 1 235 35 view .LVU409
 1379 0584 48C08405 		streq	ip, [r4, #72]	@ tmp174, g_armwave_state.row_shift
 1380              		.loc 1 236 9 is_stmt 1 view .LVU410
 1381              	@ armwave.c:236:         g_armwave_state.row_mask = 0x7ff;
 1382              		.loc 1 236 34 is_stmt 0 view .LVU411
 1383 0588 4C008405 		streq	r0, [r4, #76]	@ tmp176, g_armwave_state.row_mask
 1384              	.L86:
 237:armwave.c     ****     } 
 238:armwave.c     **** 
 239:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 240:armwave.c     ****     g_armwave_state.xstride = target_height;
 1385              		.loc 1 240 5 is_stmt 1 view .LVU412
 1386              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 243:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 244:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 245:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1387              		.loc 1 245 42 is_stmt 0 view .LVU413
 1388 058c 96010CE0 		mul	ip, r6, r1	@ tmp184, target_width, target_height
 1389              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1390              		.loc 1 241 44 view .LVU414
 1391 0590 2104A0E1 		lsr	r0, r1, #8	@ tmp179, target_height,
 1392              	@ armwave.c:242:     g_armwave_state.wave_stride = wave_stride;
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1393              		.loc 1 242 33 view .LVU415
 1394 0594 203084E5 		str	r3, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1395              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1396              		.loc 1 247 68 view .LVU416
 1397 0598 0634A0E1 		lsl	r3, r6, #8	@ _9, target_width,
 1398              	.LVL109:
 1399              	@ armwave.c:240:     g_armwave_state.xstride = target_height;
 240:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1400              		.loc 1 240 29 view .LVU417
 1401 059c 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1402              		.loc 1 241 5 is_stmt 1 view .LVU418
 1403              	@ armwave.c:243:     g_armwave_state.waves_max = waves_max;
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1404              		.loc 1 243 31 is_stmt 0 view .LVU419
 1405 05a0 282084E5 		str	r2, [r4, #40]	@ waves_max, g_armwave_state.waves_max
 1406              	@ armwave.c:244:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1407              		.loc 1 244 27 view .LVU420
 1408 05a4 242084E5 		str	r2, [r4, #36]	@ waves_max, g_armwave_state.waves
 1409              	@ armwave.c:249:     g_armwave_state.target_height = target_height;
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 249:armwave.c     ****     g_armwave_state.target_height = target_height;
 1410              		.loc 1 249 35 view .LVU421
 1411 05a8 441084E5 		str	r1, [r4, #68]	@ target_height, g_armwave_state.target_height
 1412              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1413              		.loc 1 246 37 view .LVU422
 1414 05ac 012CA0E3 		mov	r2, #256	@ tmp186,
 1415              	.LVL110:
 1416              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 250:armwave.c     **** 
 251:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1417              		.loc 1 251 5 view .LVU423
 1418 05b0 0310A0E1 		mov	r1, r3	@, _9
 1419              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1420              		.loc 1 241 28 view .LVU424
 1421 05b4 1C0084E5 		str	r0, [r4, #28]	@ tmp179, g_armwave_state.vscale
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1422              		.loc 1 242 5 is_stmt 1 view .LVU425
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1423              		.loc 1 243 5 view .LVU426
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1424              		.loc 1 244 5 view .LVU427
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1425              		.loc 1 245 5 view .LVU428
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1426              		.loc 1 246 5 view .LVU429
 1427              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1428              		.loc 1 251 5 is_stmt 0 view .LVU430
 1429 05b8 60019FE5 		ldr	r0, .L104+12	@,
 1430              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 1431              		.loc 1 247 34 view .LVU431
 1432 05bc 383084E5 		str	r3, [r4, #56]	@ _9, g_armwave_state.ch_buff_size
 1433              	@ armwave.c:248:     g_armwave_state.target_width = target_width;
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 1434              		.loc 1 248 34 view .LVU432
 1435 05c0 406084E5 		str	r6, [r4, #64]	@ target_width, g_armwave_state.target_width
 1436              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1437              		.loc 1 245 26 view .LVU433
 1438 05c4 3CC084E5 		str	ip, [r4, #60]	@ tmp184, g_armwave_state.size
 1439              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1440              		.loc 1 246 37 view .LVU434
 1441 05c8 2C2084E5 		str	r2, [r4, #44]	@ tmp186, g_armwave_state.bitdepth_height
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 1442              		.loc 1 247 5 is_stmt 1 view .LVU435
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 1443              		.loc 1 248 5 view .LVU436
 249:armwave.c     **** 
 1444              		.loc 1 249 5 view .LVU437
 1445              		.loc 1 251 5 view .LVU438
 1446 05cc FEFFFFEB 		bl	printf		@
 1447              	.LVL111:
 252:armwave.c     **** 
 253:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 254:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 255:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 256:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1448              		.loc 1 256 5 view .LVU439
 1449              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 257:armwave.c     **** 
 258:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1450              		.loc 1 258 23 is_stmt 0 view .LVU440
 1451 05d0 040094E5 		ldr	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1452              	@ armwave.c:256:     g_armwave_state.slice_height = 64;  
 256:armwave.c     **** 
 1453              		.loc 1 256 34 view .LVU441
 1454 05d4 4030A0E3 		mov	r3, #64	@ tmp192,
 1455              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 1456              		.loc 1 258 7 view .LVU442
 1457 05d8 000050E3 		cmp	r0, #0	@ _10,
 1458              	@ armwave.c:256:     g_armwave_state.slice_height = 64;  
 256:armwave.c     **** 
 1459              		.loc 1 256 34 view .LVU443
 1460 05dc 303084E5 		str	r3, [r4, #48]	@ tmp192, g_armwave_state.slice_height
 1461              		.loc 1 258 5 is_stmt 1 view .LVU444
 1462              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 1463              		.loc 1 258 7 is_stmt 0 view .LVU445
 1464 05e0 0000000A 		beq	.L88		@,
 259:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1465              		.loc 1 259 9 is_stmt 1 view .LVU446
 1466 05e4 FEFFFFEB 		bl	free		@
 1467              	.LVL112:
 1468              	.L88:
 260:armwave.c     **** 
 261:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1469              		.loc 1 261 5 view .LVU447
 1470              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1471              		.loc 1 261 34 is_stmt 0 view .LVU448
 1472 05e8 0110A0E3 		mov	r1, #1	@,
 1473 05ec 380094E5 		ldr	r0, [r4, #56]	@, g_armwave_state.ch_buff_size
 1474 05f0 FEFFFFEB 		bl	calloc		@
 1475              	.LVL113:
 1476              	@ armwave.c:263:     assert(g_armwave_state.ch1_buffer != NULL);
 262:armwave.c     **** 
 263:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1477              		.loc 1 263 5 view .LVU449
 1478 05f4 000050E3 		cmp	r0, #0	@ tmp196,
 1479              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 261:armwave.c     **** 
 1480              		.loc 1 261 32 view .LVU450
 1481 05f8 040084E5 		str	r0, [r4, #4]	@ tmp196, g_armwave_state.ch1_buffer
 1482              		.loc 1 263 5 is_stmt 1 view .LVU451
 1483 05fc 3500000A 		beq	.L102		@,
 264:armwave.c     **** 
 265:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 266:armwave.c     ****     length = end_point - start_point;
 1484              		.loc 1 266 5 view .LVU452
 1485              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1486              		.loc 1 267 34 is_stmt 0 view .LVU453
 1487 0600 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1488              	@ armwave.c:266:     length = end_point - start_point;
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1489              		.loc 1 266 12 view .LVU454
 1490 0604 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1491              	.LVL114:
 1492              		.loc 1 267 5 is_stmt 1 view .LVU455
 1493              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 269:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1494              		.loc 1 269 40 is_stmt 0 view .LVU456
 1495 0608 8500A0E1 		lsl	r0, r5, #1	@, length,
 1496              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1497              		.loc 1 267 34 view .LVU457
 1498 060c 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp204, target_width
 1499              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1500              		.loc 1 267 31 view .LVU458
 1501 0610 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1502 0614 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp203, length
 1503              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1504              		.loc 1 268 60 view .LVU459
 1505 0618 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp234, g_armwave_state.slice_height
 1506 061c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp207, tmp234
 1507              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1508              		.loc 1 267 22 view .LVU460
 1509 0620 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp203, tmp204
 1510              	.LVL115:
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1511              		.loc 1 268 5 is_stmt 1 view .LVU461
 1512              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1513              		.loc 1 268 60 is_stmt 0 view .LVU462
 1514 0624 887A67EE 		vmul.f32	s15, s15, s16	@ tmp209, tmp207, points_per_pixel
 1515              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1516              		.loc 1 268 41 view .LVU463
 1517 0628 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp210, tmp209
 1518 062c 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp210, g_armwave_state.slice_record_height
 1519              		.loc 1 269 5 is_stmt 1 view .LVU464
 1520              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1521              		.loc 1 269 40 is_stmt 0 view .LVU465
 1522 0630 FEFFFFEB 		bl	malloc		@
 1523              	.LVL116:
 1524              	@ armwave.c:271:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 270:armwave.c     **** 
 271:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1525              		.loc 1 271 5 view .LVU466
 1526 0634 000050E3 		cmp	r0, #0	@ tmp212,
 1527              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 1528              		.loc 1 269 38 view .LVU467
 1529 0638 6C0084E5 		str	r0, [r4, #108]	@ tmp212, g_armwave_state.xcoord_to_xpixel
 1530              		.loc 1 271 5 is_stmt 1 view .LVU468
 1531 063c 2A00000A 		beq	.L103		@,
 1532              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 272:armwave.c     **** 
 273:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 274:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1533              		.loc 1 274 54 is_stmt 0 view .LVU469
 1534 0640 337ADFED 		vldr.32	s15, .L104	@ tmp219,
 1535 0644 020040E2 		sub	r0, r0, #2	@ ivtmp.74, tmp212,
 1536              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1537              		.loc 1 273 12 view .LVU470
 1538 0648 0030A0E3 		mov	r3, #0	@ xx,
 1539              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1540              		.loc 1 274 54 view .LVU471
 1541 064c 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp219, points_per_pixel
 1542              	.L91:
 1543              	.LVL117:
 1544              		.loc 1 274 9 is_stmt 1 discriminator 3 view .LVU472
 1545              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1546              		.loc 1 274 74 is_stmt 0 discriminator 3 view .LVU473
 1547 0650 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1548              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1549              		.loc 1 273 32 discriminator 3 view .LVU474
 1550 0654 013083E2 		add	r3, r3, #1	@ xx, xx,
 1551              	.LVL118:
 1552              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 273 5 discriminator 3 view .LVU475
 1554 0658 030055E1 		cmp	r5, r3	@ length, xx
 1555              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1556              		.loc 1 274 74 discriminator 3 view .LVU476
 1557 065c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1558 0660 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _21
 1559              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1560              		.loc 1 274 46 discriminator 3 view .LVU477
 1561 0664 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1562 0668 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1563 066c B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _77, offset: 0B]
 1564              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1565              		.loc 1 273 5 discriminator 3 view .LVU478
 1566 0670 F6FFFF1A 		bne	.L91		@,
 275:armwave.c     **** 
 276:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 277:armwave.c     ****     }
 278:armwave.c     **** 
 279:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1567              		.loc 1 279 5 is_stmt 1 view .LVU479
 1568              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1569              		.loc 1 279 34 is_stmt 0 view .LVU480
 1570 0674 3C0094E5 		ldr	r0, [r4, #60]	@ g_armwave_state.size, g_armwave_state.size
 1571 0678 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1572 067c FEFFFFEB 		bl	malloc		@
 1573              	.LVL119:
 1574              	@ armwave.c:280: }
 280:armwave.c     **** }
 1575              		.loc 1 280 1 view .LVU481
 1576 0680 028BBDEC 		vldm	sp!, {d8}	@
 1577              		.cfi_remember_state
 1578              		.cfi_restore 80
 1579              		.cfi_restore 81
 1580              		.cfi_def_cfa_offset 24
 1581              	.LVL120:
 1582              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 279:armwave.c     **** }
 1583              		.loc 1 279 32 view .LVU482
 1584 0684 500084E5 		str	r0, [r4, #80]	@, g_armwave_state.out_pixbuf
 1585              	@ armwave.c:280: }
 1586              		.loc 1 280 1 view .LVU483
 1587 0688 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1588              	.LVL121:
 1589              	.L83:
 1590              		.cfi_restore_state
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 1591              		.loc 1 225 5 is_stmt 1 view .LVU484
 1592              	@ armwave.c:225:     if(target_height == 256) {
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 1593              		.loc 1 225 7 is_stmt 0 view .LVU485
 1594 068c 010C51E3 		cmp	r1, #256	@ target_height,
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1595              		.loc 1 226 9 is_stmt 1 view .LVU486
 1596              	@ armwave.c:226:         g_armwave_state.row_shift = 8;
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1597              		.loc 1 226 35 is_stmt 0 view .LVU487
 1598 0690 80409FE5 		ldr	r4, .L104+4	@ tmp228,
 1599              	@ armwave.c:230:         g_armwave_state.row_mask = 0x1ff;
 230:armwave.c     ****     } else if(target_height == 1024) {
 1600              		.loc 1 230 34 view .LVU488
 1601 0694 88009F15 		ldrne	r0, .L104+16	@ tmp168,
 1602              	@ armwave.c:226:         g_armwave_state.row_shift = 8;
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1603              		.loc 1 226 35 view .LVU489
 1604 0698 08C0A003 		moveq	ip, #8	@ tmp162,
 1605              	@ armwave.c:227:         g_armwave_state.row_mask = 0x0ff;
 227:armwave.c     ****     } else if(target_height == 512) {
 1606              		.loc 1 227 34 view .LVU490
 1607 069c FF00A003 		moveq	r0, #255	@ tmp164,
 228:armwave.c     ****         g_armwave_state.row_shift = 9;
 1608              		.loc 1 228 12 is_stmt 1 view .LVU491
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1609              		.loc 1 229 9 view .LVU492
 1610              	@ armwave.c:229:         g_armwave_state.row_shift = 9;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1611              		.loc 1 229 35 is_stmt 0 view .LVU493
 1612 06a0 09C0A013 		movne	ip, #9	@ tmp166,
 1613 06a4 48C084E5 		str	ip, [r4, #72]	@ tmp166, g_armwave_state.row_shift
 230:armwave.c     ****     } else if(target_height == 1024) {
 1614              		.loc 1 230 9 is_stmt 1 view .LVU494
 1615              	@ armwave.c:230:         g_armwave_state.row_mask = 0x1ff;
 230:armwave.c     ****     } else if(target_height == 1024) {
 1616              		.loc 1 230 34 is_stmt 0 view .LVU495
 1617 06a8 4C0084E5 		str	r0, [r4, #76]	@ tmp168, g_armwave_state.row_mask
 1618 06ac B6FFFFEA 		b	.L86		@
 1619              	.L101:
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1620              		.loc 1 232 9 is_stmt 1 view .LVU496
 1621              	@ armwave.c:233:         g_armwave_state.row_mask = 0x3ff;
 233:armwave.c     ****     } else if(target_height == 2048) {
 1622              		.loc 1 233 34 is_stmt 0 view .LVU497
 1623 06b0 70009FE5 		ldr	r0, .L104+20	@ tmp172,
 1624              	@ armwave.c:232:         g_armwave_state.row_shift = 10;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1625              		.loc 1 232 35 view .LVU498
 1626 06b4 0AC0A0E3 		mov	ip, #10	@ tmp170,
 1627 06b8 48C084E5 		str	ip, [r4, #72]	@ tmp170, g_armwave_state.row_shift
 233:armwave.c     ****     } else if(target_height == 2048) {
 1628              		.loc 1 233 9 is_stmt 1 view .LVU499
 1629              	@ armwave.c:233:         g_armwave_state.row_mask = 0x3ff;
 233:armwave.c     ****     } else if(target_height == 2048) {
 1630              		.loc 1 233 34 is_stmt 0 view .LVU500
 1631 06bc 4C0084E5 		str	r0, [r4, #76]	@ tmp172, g_armwave_state.row_mask
 1632 06c0 B1FFFFEA 		b	.L86		@
 1633              	.L100:
 223:armwave.c     **** 
 1634              		.loc 1 223 5 is_stmt 1 discriminator 2 view .LVU501
 1635 06c4 60309FE5 		ldr	r3, .L104+24	@,
 1636              	.LVL122:
 223:armwave.c     **** 
 1637              		.loc 1 223 5 is_stmt 0 discriminator 2 view .LVU502
 1638 06c8 DF20A0E3 		mov	r2, #223	@,
 1639              	.LVL123:
 223:armwave.c     **** 
 1640              		.loc 1 223 5 discriminator 2 view .LVU503
 1641 06cc 5C109FE5 		ldr	r1, .L104+28	@,
 1642 06d0 5C009FE5 		ldr	r0, .L104+32	@,
 1643 06d4 FEFFFFEB 		bl	__assert_fail		@
 1644              	.LVL124:
 1645              	.L102:
 263:armwave.c     **** 
 1646              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU504
 1647 06d8 4C309FE5 		ldr	r3, .L104+24	@,
 1648 06dc 54209FE5 		ldr	r2, .L104+36	@,
 1649 06e0 48109FE5 		ldr	r1, .L104+28	@,
 1650 06e4 50009FE5 		ldr	r0, .L104+40	@,
 1651 06e8 FEFFFFEB 		bl	__assert_fail		@
 1652              	.LVL125:
 1653              	.L103:
 271:armwave.c     **** 
 1654              		.loc 1 271 5 discriminator 1 view .LVU505
 1655 06ec 38309FE5 		ldr	r3, .L104+24	@,
 1656 06f0 48209FE5 		ldr	r2, .L104+44	@,
 1657 06f4 34109FE5 		ldr	r1, .L104+28	@,
 1658 06f8 44009FE5 		ldr	r0, .L104+48	@,
 1659 06fc FEFFFFEB 		bl	__assert_fail		@
 1660              	.LVL126:
 1661              	.L99:
 220:armwave.c     **** 
 1662              		.loc 1 220 5 discriminator 1 view .LVU506
 1663 0700 24309FE5 		ldr	r3, .L104+24	@,
 1664              	.LVL127:
 220:armwave.c     **** 
 1665              		.loc 1 220 5 is_stmt 0 discriminator 1 view .LVU507
 1666 0704 DC20A0E3 		mov	r2, #220	@,
 1667              	.LVL128:
 220:armwave.c     **** 
 1668              		.loc 1 220 5 discriminator 1 view .LVU508
 1669 0708 20109FE5 		ldr	r1, .L104+28	@,
 1670 070c 34009FE5 		ldr	r0, .L104+52	@,
 1671              	.LVL129:
 220:armwave.c     **** 
 1672              		.loc 1 220 5 discriminator 1 view .LVU509
 1673 0710 FEFFFFEB 		bl	__assert_fail		@
 1674              	.LVL130:
 1675              	.L105:
 1676              		.align	2
 1677              	.L104:
 1678 0714 0000803F 		.word	1065353216
 1679 0718 00000000 		.word	g_armwave_state
 1680 071c FF070000 		.word	2047
 1681 0720 B8000000 		.word	.LC6
 1682 0724 FF010000 		.word	511
 1683 0728 FF030000 		.word	1023
 1684 072c 34000000 		.word	.LANCHOR0+52
 1685 0730 20000000 		.word	.LC2
 1686 0734 58000000 		.word	.LC5
 1687 0738 07010000 		.word	263
 1688 073c CC000000 		.word	.LC7
 1689 0740 0F010000 		.word	271
 1690 0744 F0000000 		.word	.LC8
 1691 0748 40000000 		.word	.LC4
 1692              		.cfi_endproc
 1693              	.LFE62:
 1695              		.align	2
 1696              		.global	armwave_set_wave_pointer
 1697              		.syntax unified
 1698              		.arm
 1699              		.fpu vfp
 1701              	armwave_set_wave_pointer:
 1702              	.LVL131:
 1703              	.LFB63:
 281:armwave.c     **** 
 282:armwave.c     **** /*
 283:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 284:armwave.c     ****  * in the future.
 285:armwave.c     ****  */
 286:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 287:armwave.c     **** {
 1704              		.loc 1 287 1 is_stmt 1 view -0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1708              		.loc 1 288 5 view .LVU511
 1709 074c 000050E3 		cmp	r0, #0	@ wave_buffer
 1710              		.loc 1 288 5 is_stmt 0 view .LVU512
 1711 0750 0200000A 		beq	.L111		@,
 289:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1712              		.loc 1 289 5 is_stmt 1 view .LVU513
 1713              	@ armwave.c:289:     g_armwave_state.wave_buffer = wave_buffer;
 1714              		.loc 1 289 33 is_stmt 0 view .LVU514
 1715 0754 1C309FE5 		ldr	r3, .L112	@ tmp115,
 1716 0758 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1717 075c 1EFF2FE1 		bx	lr	@
 1718              	.L111:
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1719              		.loc 1 288 5 is_stmt 1 discriminator 1 view .LVU515
 1720              	@ armwave.c:287: {
 287:armwave.c     ****     assert(wave_buffer != NULL);
 1721              		.loc 1 287 1 is_stmt 0 discriminator 1 view .LVU516
 1722 0760 10402DE9 		push	{r4, lr}	@
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 4, -8
 1725              		.cfi_offset 14, -4
 1726              	@ armwave.c:288:     assert(wave_buffer != NULL);
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1727              		.loc 1 288 5 discriminator 1 view .LVU517
 1728 0764 122EA0E3 		mov	r2, #288	@,
 1729 0768 0C309FE5 		ldr	r3, .L112+4	@,
 1730 076c 0C109FE5 		ldr	r1, .L112+8	@,
 1731 0770 0C009FE5 		ldr	r0, .L112+12	@,
 1732              	.LVL132:
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1733              		.loc 1 288 5 discriminator 1 view .LVU518
 1734 0774 FEFFFFEB 		bl	__assert_fail		@
 1735              	.LVL133:
 1736              	.L113:
 1737              		.align	2
 1738              	.L112:
 1739 0778 00000000 		.word	g_armwave_state
 1740 077c 4C000000 		.word	.LANCHOR0+76
 1741 0780 20000000 		.word	.LC2
 1742 0784 1C010000 		.word	.LC9
 1743              		.cfi_endproc
 1744              	.LFE63:
 1746              		.align	2
 1747              		.global	armwave_set_wave_pointer_as_testbuf
 1748              		.syntax unified
 1749              		.arm
 1750              		.fpu vfp
 1752              	armwave_set_wave_pointer_as_testbuf:
 1753              	.LFB64:
 290:armwave.c     **** }
 291:armwave.c     **** 
 292:armwave.c     **** /*
 293:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 294:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 295:armwave.c     ****  */
 296:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 297:armwave.c     **** {
 1754              		.loc 1 297 1 is_stmt 1 view -0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 1758              		@ link register save eliminated.
 298:armwave.c     ****     g_armwave_state.wave_buffer = &test_wave_buffer;
 1759              		.loc 1 298 5 view .LVU520
 1760              	@ armwave.c:298:     g_armwave_state.wave_buffer = &test_wave_buffer;
 1761              		.loc 1 298 33 is_stmt 0 view .LVU521
 1762 0788 08309FE5 		ldr	r3, .L115	@ tmp110,
 1763 078c 08209FE5 		ldr	r2, .L115+4	@ tmp111,
 1764 0790 142083E5 		str	r2, [r3, #20]	@ tmp111, g_armwave_state.wave_buffer
 1765              	@ armwave.c:299: }
 299:armwave.c     **** }
 1766              		.loc 1 299 1 view .LVU522
 1767 0794 1EFF2FE1 		bx	lr	@
 1768              	.L116:
 1769              		.align	2
 1770              	.L115:
 1771 0798 00000000 		.word	g_armwave_state
 1772 079c 00000000 		.word	test_wave_buffer
 1773              		.cfi_endproc
 1774              	.LFE64:
 1776              		.align	2
 1777              		.global	armwave_set_wave_pointer_u32
 1778              		.syntax unified
 1779              		.arm
 1780              		.fpu vfp
 1782              	armwave_set_wave_pointer_u32:
 1783              	.LVL134:
 1784              	.LFB65:
 300:armwave.c     **** 
 301:armwave.c     **** /*
 302:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 303:armwave.c     ****  * disjointed buffers in the future.
 304:armwave.c     ****  */
 305:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 306:armwave.c     **** {
 1785              		.loc 1 306 1 is_stmt 1 view -0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 307:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1789              		.loc 1 307 5 view .LVU524
 1790 07a0 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1791              		.loc 1 307 5 is_stmt 0 view .LVU525
 1792 07a4 0200000A 		beq	.L122		@,
 308:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1793              		.loc 1 308 5 is_stmt 1 view .LVU526
 1794              	@ armwave.c:308:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1795              		.loc 1 308 33 is_stmt 0 view .LVU527
 1796 07a8 1C309FE5 		ldr	r3, .L123	@ tmp117,
 1797 07ac 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1798 07b0 1EFF2FE1 		bx	lr	@
 1799              	.L122:
 307:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1800              		.loc 1 307 5 is_stmt 1 discriminator 1 view .LVU528
 1801              	@ armwave.c:306: {
 306:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1802              		.loc 1 306 1 is_stmt 0 discriminator 1 view .LVU529
 1803 07b4 10402DE9 		push	{r4, lr}	@
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 4, -8
 1806              		.cfi_offset 14, -4
 1807              	@ armwave.c:307:     assert(wave_buffer_ptr != 0);
 307:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1808              		.loc 1 307 5 discriminator 1 view .LVU530
 1809 07b8 10309FE5 		ldr	r3, .L123+4	@,
 1810 07bc 10209FE5 		ldr	r2, .L123+8	@,
 1811 07c0 10109FE5 		ldr	r1, .L123+12	@,
 1812 07c4 10009FE5 		ldr	r0, .L123+16	@,
 1813              	.LVL135:
 307:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1814              		.loc 1 307 5 discriminator 1 view .LVU531
 1815 07c8 FEFFFFEB 		bl	__assert_fail		@
 1816              	.LVL136:
 1817              	.L124:
 1818              		.align	2
 1819              	.L123:
 1820 07cc 00000000 		.word	g_armwave_state
 1821 07d0 68000000 		.word	.LANCHOR0+104
 1822 07d4 33010000 		.word	307
 1823 07d8 20000000 		.word	.LC2
 1824 07dc 30010000 		.word	.LC10
 1825              		.cfi_endproc
 1826              	.LFE65:
 1828              		.align	2
 1829              		.global	armwave_clear_buffer
 1830              		.syntax unified
 1831              		.arm
 1832              		.fpu vfp
 1834              	armwave_clear_buffer:
 1835              	.LVL137:
 1836              	.LFB66:
 309:armwave.c     **** }
 310:armwave.c     **** 
 311:armwave.c     **** /*
 312:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 313:armwave.c     ****  */
 314:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 315:armwave.c     **** {
 1837              		.loc 1 315 1 is_stmt 1 view -0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 1841              		@ link register save eliminated.
 316:armwave.c     ****     // Flags ignored, only one buffer cleared
 317:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1842              		.loc 1 317 5 view .LVU533
 1843 07e0 0C309FE5 		ldr	r3, .L126	@ tmp113,
 1844 07e4 0010A0E3 		mov	r1, #0	@,
 1845 07e8 3C2093E5 		ldr	r2, [r3, #60]	@, g_armwave_state.size
 1846 07ec 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1847              	.LVL138:
 1848              		.loc 1 317 5 is_stmt 0 view .LVU534
 1849 07f0 FEFFFFEA 		b	memset		@
 1850              	.LVL139:
 1851              	.L127:
 1852              		.align	2
 1853              	.L126:
 1854 07f4 00000000 		.word	g_armwave_state
 1855              		.cfi_endproc
 1856              	.LFE66:
 1858              		.align	2
 1859              		.global	armwave_set_channel_colour
 1860              		.syntax unified
 1861              		.arm
 1862              		.fpu vfp
 1864              	armwave_set_channel_colour:
 1865              	.LVL140:
 1866              	.LFB67:
 318:armwave.c     **** }
 319:armwave.c     **** 
 320:armwave.c     **** /*
 321:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 322:armwave.c     ****  */
 323:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 324:armwave.c     **** {
 1867              		.loc 1 324 1 is_stmt 1 view -0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 325:armwave.c     ****     // Only 1ch supported for now
 326:armwave.c     ****     switch(ch) {
 1872              		.loc 1 326 5 view .LVU536
 1873 07f8 010050E3 		cmp	r0, #1	@ ch,
 327:armwave.c     ****         case 1:
 328:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1874              		.loc 1 328 13 view .LVU537
 1875              	@ armwave.c:328:             g_armwave_state.ch1_color.r = r;
 1876              		.loc 1 328 41 is_stmt 0 view .LVU538
 1877 07fc 0C009F05 		ldreq	r0, .L130	@ tmp117,
 1878              	.LVL141:
 1879              		.loc 1 328 41 view .LVU539
 1880 0800 B415C001 		strheq	r1, [r0, #84]	@ movhi	@ r, g_armwave_state.ch1_color.r
 329:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1881              		.loc 1 329 13 is_stmt 1 view .LVU540
 1882              	@ armwave.c:329:             g_armwave_state.ch1_color.g = g;
 1883              		.loc 1 329 41 is_stmt 0 view .LVU541
 1884 0804 B625C001 		strheq	r2, [r0, #86]	@ movhi	@ g, g_armwave_state.ch1_color.g
 330:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1885              		.loc 1 330 13 is_stmt 1 view .LVU542
 1886              	@ armwave.c:330:             g_armwave_state.ch1_color.b = b;
 1887              		.loc 1 330 41 is_stmt 0 view .LVU543
 1888 0808 B835C001 		strheq	r3, [r0, #88]	@ movhi	@ b, g_armwave_state.ch1_color.b
 331:armwave.c     ****             break;
 1889              		.loc 1 331 13 is_stmt 1 view .LVU544
 1890              	@ armwave.c:333: }
 332:armwave.c     ****     }
 333:armwave.c     **** }
 1891              		.loc 1 333 1 is_stmt 0 view .LVU545
 1892 080c 1EFF2FE1 		bx	lr	@
 1893              	.L131:
 1894              		.align	2
 1895              	.L130:
 1896 0810 00000000 		.word	g_armwave_state
 1897              		.cfi_endproc
 1898              	.LFE67:
 1900              		.align	2
 1901              		.global	armwave_dump_ppm_debug
 1902              		.syntax unified
 1903              		.arm
 1904              		.fpu vfp
 1906              	armwave_dump_ppm_debug:
 1907              	.LVL142:
 1908              	.LFB68:
 334:armwave.c     **** 
 335:armwave.c     **** /*
 336:armwave.c     ****  * Dump a ppm of a buffer to a file.
 337:armwave.c     ****  */
 338:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 339:armwave.c     **** {
 1909              		.loc 1 339 1 is_stmt 1 view -0
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 0
 1912              		@ frame_needed = 0, uses_anonymous_args = 0
 340:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1913              		.loc 1 340 5 view .LVU547
 1914              	@ armwave.c:339: {
 339:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1915              		.loc 1 339 1 is_stmt 0 view .LVU548
 1916 0814 0130A0E1 		mov	r3, r1	@ fn, fn
 1917 0818 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1918              		.cfi_def_cfa_offset 28
 1919              		.cfi_offset 4, -28
 1920              		.cfi_offset 5, -24
 1921              		.cfi_offset 6, -20
 1922              		.cfi_offset 7, -16
 1923              		.cfi_offset 8, -12
 1924              		.cfi_offset 9, -8
 1925              		.cfi_offset 14, -4
 1926 081c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1927 0820 0CD04DE2 		sub	sp, sp, #12	@,,
 1928              		.cfi_def_cfa_offset 40
 1929              	@ armwave.c:340:     FILE *fp = fopen(fn, "wb");
 1930              		.loc 1 340 16 view .LVU549
 1931 0824 D4109FE5 		ldr	r1, .L144	@,
 1932              	.LVL143:
 1933              		.loc 1 340 16 view .LVU550
 1934 0828 0300A0E1 		mov	r0, r3	@, fn
 1935              	.LVL144:
 1936              		.loc 1 340 16 view .LVU551
 1937 082c FEFFFFEB 		bl	fopen64		@
 1938              	.LVL145:
 1939              	@ armwave.c:347:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 341:armwave.c     ****     uint32_t data;
 342:armwave.c     ****     int xx, yy;
 343:armwave.c     **** 
 344:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 345:armwave.c     **** 
 346:armwave.c     ****     fputs("P3\n", fp);
 347:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1940              		.loc 1 347 5 view .LVU552
 1941 0830 CC609FE5 		ldr	r6, .L144+4	@ tmp154,
 1942              	@ armwave.c:346:     fputs("P3\n", fp);
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1943              		.loc 1 346 5 view .LVU553
 1944 0834 0320A0E3 		mov	r2, #3	@,
 1945 0838 0110A0E3 		mov	r1, #1	@,
 1946              	@ armwave.c:340:     FILE *fp = fopen(fn, "wb");
 340:armwave.c     ****     uint32_t data;
 1947              		.loc 1 340 16 view .LVU554
 1948 083c 0070A0E1 		mov	r7, r0	@ fp,
 1949              	.LVL146:
 341:armwave.c     ****     uint32_t data;
 1950              		.loc 1 341 5 is_stmt 1 view .LVU555
 342:armwave.c     **** 
 1951              		.loc 1 342 5 view .LVU556
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1952              		.loc 1 346 5 view .LVU557
 1953 0840 0030A0E1 		mov	r3, r0	@, fp
 1954 0844 BC009FE5 		ldr	r0, .L144+8	@,
 1955              	.LVL147:
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1956              		.loc 1 346 5 is_stmt 0 view .LVU558
 1957 0848 FEFFFFEB 		bl	fwrite		@
 1958              	.LVL148:
 1959              		.loc 1 347 5 is_stmt 1 view .LVU559
 1960 084c D024C6E1 		ldrd	r2, [r6, #64]	@, tmp154,
 1961 0850 B4109FE5 		ldr	r1, .L144+12	@,
 1962 0854 0700A0E1 		mov	r0, r7	@, fp
 1963 0858 FEFFFFEB 		bl	fprintf		@
 1964              	.LVL149:
 348:armwave.c     ****     fputs("255\n", fp);
 1965              		.loc 1 348 5 view .LVU560
 1966 085c 0420A0E3 		mov	r2, #4	@,
 1967 0860 0730A0E1 		mov	r3, r7	@, fp
 1968 0864 0110A0E3 		mov	r1, #1	@,
 1969 0868 A0009FE5 		ldr	r0, .L144+16	@,
 1970 086c FEFFFFEB 		bl	fwrite		@
 1971              	.LVL150:
 349:armwave.c     **** 
 350:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1972              		.loc 1 350 5 view .LVU561
 1973              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1974              		.loc 1 350 37 is_stmt 0 view .LVU562
 1975 0870 442096E5 		ldr	r2, [r6, #68]	@ prephitmp_57, g_armwave_state.target_height
 1976              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1977              		.loc 1 350 5 view .LVU563
 1978 0874 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1979 0878 1800000A 		beq	.L133		@,
 1980 087c 403096E5 		ldr	r3, [r6, #64]	@ _12, g_armwave_state.target_width
 1981              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 352:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 353:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 354:armwave.c     **** 
 355:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1982              		.loc 1 355 13 view .LVU564
 1983 0880 8C909FE5 		ldr	r9, .L144+20	@ tmp156,
 1984              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1985              		.loc 1 350 12 view .LVU565
 1986 0884 0050A0E3 		mov	r5, #0	@ yy,
 1987              	.LVL151:
 1988              	.L134:
 1989              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1990              		.loc 1 351 9 view .LVU566
 1991 0888 000053E3 		cmp	r3, #0	@ _12,
 1992              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1993              		.loc 1 351 16 view .LVU567
 1994 088c 0040A013 		movne	r4, #0	@ xx,
 1995              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1996              		.loc 1 351 9 view .LVU568
 1997 0890 1600000A 		beq	.L143		@,
 1998              	.LVL152:
 1999              	.L135:
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2000              		.loc 1 352 13 is_stmt 1 discriminator 3 view .LVU569
 2001              	@ armwave.c:352:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2002              		.loc 1 352 29 is_stmt 0 discriminator 3 view .LVU570
 2003 0894 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2004              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2005              		.loc 1 355 13 discriminator 3 view .LVU571
 2006 0898 0910A0E1 		mov	r1, r9	@, tmp156
 2007 089c 0700A0E1 		mov	r0, r7	@, fp
 2008              	@ armwave.c:352:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2009              		.loc 1 352 18 discriminator 3 view .LVU572
 2010 08a0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2011              	.LVL153:
 2012              		.loc 1 355 13 is_stmt 1 discriminator 3 view .LVU573
 2013              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2014              		.loc 1 351 58 is_stmt 0 discriminator 3 view .LVU574
 2015 08a4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2016              	.LVL154:
 2017              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2018              		.loc 1 355 81 discriminator 3 view .LVU575
 2019 08a8 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2020              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2021              		.loc 1 355 61 discriminator 3 view .LVU576
 2022 08ac 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2023              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2024              		.loc 1 355 13 discriminator 3 view .LVU577
 2025 08b0 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2026 08b4 7330EFE6 		uxtb	r3, r3	@, tmp146
 2027 08b8 00C08DE5 		str	ip, [sp]	@ tmp151,
 2028 08bc 7220EFE6 		uxtb	r2, r2	@, data
 2029              	.LVL155:
 2030              		.loc 1 355 13 discriminator 3 view .LVU578
 2031 08c0 FEFFFFEB 		bl	fprintf		@
 2032              	.LVL156:
 2033              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2034              		.loc 1 351 41 discriminator 3 view .LVU579
 2035 08c4 403096E5 		ldr	r3, [r6, #64]	@ _12, g_armwave_state.target_width
 2036              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2037              		.loc 1 351 9 discriminator 3 view .LVU580
 2038 08c8 040053E1 		cmp	r3, r4	@ _12, xx
 2039 08cc F0FFFF8A 		bhi	.L135		@,
 2040 08d0 442096E5 		ldr	r2, [r6, #68]	@ prephitmp_57, g_armwave_state.target_height
 2041              	.LVL157:
 2042              	.L136:
 2043              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2044              		.loc 1 350 55 discriminator 2 view .LVU581
 2045 08d4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2046              	.LVL158:
 2047              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2048              		.loc 1 350 5 discriminator 2 view .LVU582
 2049 08d8 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2050 08dc E9FFFF3A 		bcc	.L134		@,
 2051              	.LVL159:
 2052              	.L133:
 356:armwave.c     ****         }
 357:armwave.c     ****     }
 358:armwave.c     **** 
 359:armwave.c     ****     fclose(fp);
 2053              		.loc 1 359 5 is_stmt 1 view .LVU583
 2054 08e0 0700A0E1 		mov	r0, r7	@, fp
 2055              	@ armwave.c:360: }
 360:armwave.c     **** }
 2056              		.loc 1 360 1 is_stmt 0 view .LVU584
 2057 08e4 0CD08DE2 		add	sp, sp, #12	@,,
 2058              		.cfi_remember_state
 2059              		.cfi_def_cfa_offset 28
 2060              		@ sp needed	@
 2061 08e8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2062              		.cfi_restore 14
 2063              		.cfi_restore 9
 2064              		.cfi_restore 8
 2065              		.cfi_restore 7
 2066              		.cfi_restore 6
 2067              		.cfi_restore 5
 2068              		.cfi_restore 4
 2069              		.cfi_def_cfa_offset 0
 2070              	.LVL160:
 2071              	@ armwave.c:359:     fclose(fp);
 359:armwave.c     **** }
 2072              		.loc 1 359 5 view .LVU585
 2073 08ec FEFFFFEA 		b	fclose		@
 2074              	.LVL161:
 2075              	.L143:
 2076              		.cfi_restore_state
 2077              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2078              		.loc 1 350 55 view .LVU586
 2079 08f0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2080              	.LVL162:
 2081              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2082              		.loc 1 350 5 view .LVU587
 2083 08f4 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2084 08f8 F5FFFF8A 		bhi	.L136		@,
 2085 08fc F7FFFFEA 		b	.L133		@
 2086              	.L145:
 2087              		.align	2
 2088              	.L144:
 2089 0900 48010000 		.word	.LC11
 2090 0904 00000000 		.word	g_armwave_state
 2091 0908 4C010000 		.word	.LC12
 2092 090c 50010000 		.word	.LC13
 2093 0910 58010000 		.word	.LC14
 2094 0914 60010000 		.word	.LC15
 2095              		.cfi_endproc
 2096              	.LFE68:
 2098              		.align	2
 2099              		.global	armwave_test_init
 2100              		.syntax unified
 2101              		.arm
 2102              		.fpu vfp
 2104              	armwave_test_init:
 2105              	.LVL163:
 2106              	.LFB69:
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Initialise some test functionry.
 364:armwave.c     ****  */
 365:armwave.c     **** void armwave_test_init(int render_width, int render_height)
 366:armwave.c     **** {
 2107              		.loc 1 366 1 is_stmt 1 view -0
 2108              		.cfi_startproc
 2109              		@ args = 0, pretend = 0, frame = 0
 2110              		@ frame_needed = 0, uses_anonymous_args = 0
 367:armwave.c     ****     test_create_gamma();
 2111              		.loc 1 367 5 view .LVU589
 2112              	.LBB10:
 2113              	.LBI10:
  45:armwave.c     **** {
 2114              		.loc 1 45 6 view .LVU590
  45:armwave.c     **** {
 2115              		.loc 1 45 6 is_stmt 0 view .LVU591
 2116              	.LBE10:
 2117              	@ armwave.c:366: {
 366:armwave.c     ****     test_create_gamma();
 2118              		.loc 1 366 1 view .LVU592
 2119 0918 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2120              		.cfi_def_cfa_offset 24
 2121              		.cfi_offset 4, -24
 2122              		.cfi_offset 5, -20
 2123              		.cfi_offset 6, -16
 2124              		.cfi_offset 7, -12
 2125              		.cfi_offset 8, -8
 2126              		.cfi_offset 14, -4
 2127 091c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2128              		.cfi_def_cfa_offset 48
 2129              		.cfi_offset 80, -48
 2130              		.cfi_offset 81, -44
 2131              		.cfi_offset 82, -40
 2132              		.cfi_offset 83, -36
 2133              		.cfi_offset 84, -32
 2134              		.cfi_offset 85, -28
 2135 0920 24429FE5 		ldr	r4, .L167+28	@ ivtmp.96,
 2136              	.LBB13:
 2137              	.LBB11:
 2138              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2139              		.loc 1 51 32 view .LVU593
 2140 0924 85AA9FED 		vldr.32	s20, .L167+16	@ tmp161,
 2141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2142              		.loc 1 51 26 view .LVU594
 2143 0928 809B9FED 		vldr.64	d9, .L167	@ tmp253,
 2144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2145              		.loc 1 51 49 view .LVU595
 2146 092c 818B9FED 		vldr.64	d8, .L167+8	@ tmp164,
 2147 0930 013084E2 		add	r3, r4, #1	@ _32, ivtmp.96,
 2148              	.LBE11:
 2149              	.LBE13:
 2150              	@ armwave.c:366: {
 366:armwave.c     ****     test_create_gamma();
 2151              		.loc 1 366 1 view .LVU596
 2152 0934 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2153 0938 0150A0E1 		mov	r5, r1	@ render_height, render_height
 2154 093c 018C84E2 		add	r8, r4, #256	@ _25, ivtmp.96,
 2155 0940 017063E2 		rsb	r7, r3, #1	@ tmp251, _32,
 2156              	.LVL164:
 2157              	.L147:
 2158              	.LBB14:
 2159              	.LBB12:
  51:armwave.c     ****     }
 2160              		.loc 1 51 9 is_stmt 1 view .LVU597
 2161              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2162              		.loc 1 51 32 is_stmt 0 view .LVU598
 2163 0944 043087E0 		add	r3, r7, r4	@ tmp158, tmp251, ivtmp.96
 2164              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2165              		.loc 1 51 26 view .LVU599
 2166 0948 491BB0EE 		vmov.f64	d1, d9	@, tmp253
 2167              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2168              		.loc 1 51 32 view .LVU600
 2169 094c 903A07EE 		vmov	s15, r3	@ int	@ tmp158, tmp158
 2170 0950 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp159, tmp158
 2171 0954 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp160, tmp159, tmp161
 2172              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2173              		.loc 1 51 26 view .LVU601
 2174 0958 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp160
 2175 095c FEFFFFEB 		bl	pow		@
 2176              	.LVL165:
 2177              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2178              		.loc 1 51 49 view .LVU602
 2179 0960 080B20EE 		vmul.f64	d0, d0, d8	@ tmp163,, tmp164
 2180              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2181              		.loc 1 51 24 view .LVU603
 2182 0964 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp165, tmp163
 2183 0968 903A17EE 		vmov	r3, s15	@ int	@ tmp165, tmp165
 2184 096c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp165, MEM[base: _4, offset: 0B]
 2185              	.LVL166:
 2186              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2187              		.loc 1 50 5 view .LVU604
 2188 0970 080054E1 		cmp	r4, r8	@ ivtmp.96, _25
 2189 0974 F2FFFF1A 		bne	.L147		@,
 2190              	.LVL167:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2191              		.loc 1 50 5 view .LVU605
 2192              	.LBE12:
 2193              	.LBE14:
 368:armwave.c     **** 
 369:armwave.c     ****     // make ch1 yellowish by default
 370:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2194              		.loc 1 370 5 is_stmt 1 view .LVU606
 2195              	.LBB15:
 2196              	.LBI15:
 323:armwave.c     **** {
 2197              		.loc 1 323 6 view .LVU607
 2198              	.LBB16:
 326:armwave.c     ****         case 1:
 2199              		.loc 1 326 5 view .LVU608
 328:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2200              		.loc 1 328 13 view .LVU609
 329:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2201              		.loc 1 329 13 view .LVU610
 2202              	@ armwave.c:328:             g_armwave_state.ch1_color.r = r;
 328:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2203              		.loc 1 328 41 is_stmt 0 view .LVU611
 2204 0978 D0419FE5 		ldr	r4, .L167+32	@ tmp252,
 2205              	.LBE16:
 2206              	.LBE15:
 2207              	.LBB19:
 2208              	.LBB20:
 2209              	@ armwave.c:223:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 223:armwave.c     **** 
 2210              		.loc 1 223 5 view .LVU612
 2211 097c 013C45E2 		sub	r3, r5, #256	@ tmp172, render_height,
 2212              	.LBE20:
 2213              	.LBE19:
 2214              	.LBB25:
 2215              	.LBB17:
 2216              	@ armwave.c:328:             g_armwave_state.ch1_color.r = r;
 328:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2217              		.loc 1 328 41 view .LVU613
 2218 0980 CC219FE5 		ldr	r2, .L167+36	@ tmp168,
 2219              	.LBE17:
 2220              	.LBE25:
 2221              	.LBB26:
 2222              	.LBB21:
 2223              	@ armwave.c:223:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 223:armwave.c     **** 
 2224              		.loc 1 223 5 view .LVU614
 2225 0984 013CD3E3 		bics	r3, r3, #256	@ tmp255, tmp172,
 2226              	.LBE21:
 2227              	.LBE26:
 2228              	.LBB27:
 2229              	.LBB18:
 2230              	@ armwave.c:330:             g_armwave_state.ch1_color.b = b;
 330:armwave.c     ****             break;
 2231              		.loc 1 330 41 view .LVU615
 2232 0988 FA30A0E3 		mov	r3, #250	@ tmp171,
 2233              	@ armwave.c:328:             g_armwave_state.ch1_color.r = r;
 328:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2234              		.loc 1 328 41 view .LVU616
 2235 098c 542084E5 		str	r2, [r4, #84]	@ tmp168, MEM[(short int *)&g_armwave_state + 84B]
 330:armwave.c     ****             break;
 2236              		.loc 1 330 13 is_stmt 1 view .LVU617
 2237              	@ armwave.c:330:             g_armwave_state.ch1_color.b = b;
 330:armwave.c     ****             break;
 2238              		.loc 1 330 41 is_stmt 0 view .LVU618
 2239 0990 B835C4E1 		strh	r3, [r4, #88]	@ movhi	@ tmp171, g_armwave_state.ch1_color.b
 331:armwave.c     ****     }
 2240              		.loc 1 331 13 is_stmt 1 view .LVU619
 2241              	.LVL168:
 331:armwave.c     ****     }
 2242              		.loc 1 331 13 is_stmt 0 view .LVU620
 2243              	.LBE18:
 2244              	.LBE27:
 371:armwave.c     **** 
 372:armwave.c     ****     armwave_setup_render(0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_width, render_heigh
 2245              		.loc 1 372 5 is_stmt 1 view .LVU621
 2246              	.LBB28:
 2247              	.LBI19:
 215:armwave.c     **** {
 2248              		.loc 1 215 6 view .LVU622
 2249              	.LBB22:
 217:armwave.c     ****     float points_per_pixel;
 2250              		.loc 1 217 5 view .LVU623
 218:armwave.c     **** 
 2251              		.loc 1 218 5 view .LVU624
 220:armwave.c     **** 
 2252              		.loc 1 220 5 view .LVU625
 223:armwave.c     **** 
 2253              		.loc 1 223 5 view .LVU626
 2254 0994 0900000A 		beq	.L148		@,
 2255 0998 013B45E2 		sub	r3, r5, #1024	@ tmp174, render_height,
 2256 099c 013BD3E3 		bics	r3, r3, #1024	@ tmp256, tmp174,
 2257 09a0 5200001A 		bne	.L163		@,
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 2258              		.loc 1 225 5 view .LVU627
 231:armwave.c     ****         g_armwave_state.row_shift = 10;
 2259              		.loc 1 231 12 view .LVU628
 2260              	@ armwave.c:231:     } else if(target_height == 1024) {
 231:armwave.c     ****         g_armwave_state.row_shift = 10;
 2261              		.loc 1 231 14 is_stmt 0 view .LVU629
 2262 09a4 010B55E3 		cmp	r5, #1024	@ render_height,
 2263 09a8 4C00000A 		beq	.L164		@,
 234:armwave.c     ****         g_armwave_state.row_shift = 11;
 2264              		.loc 1 234 12 is_stmt 1 view .LVU630
 2265              	@ armwave.c:234:     } else if(target_height == 2048) {
 234:armwave.c     ****         g_armwave_state.row_shift = 11;
 2266              		.loc 1 234 14 is_stmt 0 view .LVU631
 2267 09ac 020B55E3 		cmp	r5, #2048	@ render_height,
 235:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 2268              		.loc 1 235 9 is_stmt 1 view .LVU632
 2269              	@ armwave.c:235:         g_armwave_state.row_shift = 11;
 235:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 2270              		.loc 1 235 35 is_stmt 0 view .LVU633
 2271 09b0 0B20A003 		moveq	r2, #11	@ tmp195,
 2272 09b4 9C319F05 		ldreq	r3, .L167+40	@ tmp193,
 2273 09b8 F824C401 		strdeq	r2, [r4, #72]	@, tmp252,
 236:armwave.c     ****     } 
 2274              		.loc 1 236 9 is_stmt 1 view .LVU634
 2275 09bc 050000EA 		b	.L151		@
 2276              	.L148:
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 2277              		.loc 1 225 5 view .LVU635
 2278              	@ armwave.c:225:     if(target_height == 256) {
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 2279              		.loc 1 225 7 is_stmt 0 view .LVU636
 2280 09c0 010C55E3 		cmp	r5, #256	@ render_height,
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 2281              		.loc 1 226 9 is_stmt 1 view .LVU637
 2282              	@ armwave.c:227:         g_armwave_state.row_mask = 0x0ff;
 227:armwave.c     ****     } else if(target_height == 512) {
 2283              		.loc 1 227 34 is_stmt 0 view .LVU638
 2284 09c4 0820A003 		moveq	r2, #8	@ tmp181,
 2285              	@ armwave.c:229:         g_armwave_state.row_shift = 9;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2286              		.loc 1 229 35 view .LVU639
 2287 09c8 8C319F15 		ldrne	r3, .L167+44	@ tmp185,
 2288              	@ armwave.c:227:         g_armwave_state.row_mask = 0x0ff;
 227:armwave.c     ****     } else if(target_height == 512) {
 2289              		.loc 1 227 34 view .LVU640
 2290 09cc FF30A003 		moveq	r3, #255	@ tmp183,
 228:armwave.c     ****         g_armwave_state.row_shift = 9;
 2291              		.loc 1 228 12 is_stmt 1 view .LVU641
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2292              		.loc 1 229 9 view .LVU642
 2293              	@ armwave.c:229:         g_armwave_state.row_shift = 9;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2294              		.loc 1 229 35 is_stmt 0 view .LVU643
 2295 09d0 0920A013 		movne	r2, #9	@ tmp187,
 2296 09d4 F824C4E1 		strd	r2, [r4, #72]	@, tmp252,
 230:armwave.c     ****     } else if(target_height == 1024) {
 2297              		.loc 1 230 9 is_stmt 1 view .LVU644
 2298              	.L151:
 240:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 2299              		.loc 1 240 5 view .LVU645
 2300              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2301              		.loc 1 245 42 is_stmt 0 view .LVU646
 2302 09d8 950602E0 		mul	r2, r5, r6	@ tmp206, render_height, render_width
 2303              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 2304              		.loc 1 247 68 view .LVU647
 2305 09dc 0634A0E1 		lsl	r3, r6, #8	@ _20, render_width,
 2306              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2307              		.loc 1 241 44 view .LVU648
 2308 09e0 2504A0E1 		lsr	r0, r5, #8	@ tmp198, render_height,
 2309              	@ armwave.c:240:     g_armwave_state.xstride = target_height;
 240:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 2310              		.loc 1 240 29 view .LVU649
 2311 09e4 185084E5 		str	r5, [r4, #24]	@ render_height, g_armwave_state.xstride
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2312              		.loc 1 241 5 is_stmt 1 view .LVU650
 2313              	@ armwave.c:249:     g_armwave_state.target_height = target_height;
 249:armwave.c     **** 
 2314              		.loc 1 249 35 is_stmt 0 view .LVU651
 2315 09e8 445084E5 		str	r5, [r4, #68]	@ render_height, g_armwave_state.target_height
 2316              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 251:armwave.c     **** 
 2317              		.loc 1 251 5 view .LVU652
 2318 09ec 0310A0E1 		mov	r1, r3	@, _20
 2319              	@ armwave.c:243:     g_armwave_state.waves_max = waves_max;
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2320              		.loc 1 243 31 view .LVU653
 2321 09f0 4050A0E3 		mov	r5, #64	@ tmp202,
 2322              	.LVL169:
 2323              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2324              		.loc 1 245 26 view .LVU654
 2325 09f4 3C2084E5 		str	r2, [r4, #60]	@ tmp206, g_armwave_state.size
 2326              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2327              		.loc 1 241 28 view .LVU655
 2328 09f8 1C0084E5 		str	r0, [r4, #28]	@ tmp198, g_armwave_state.vscale
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2329              		.loc 1 242 5 is_stmt 1 view .LVU656
 2330              	@ armwave.c:242:     g_armwave_state.wave_stride = wave_stride;
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2331              		.loc 1 242 33 is_stmt 0 view .LVU657
 2332 09fc 022BA0E3 		mov	r2, #2048	@ tmp200,
 2333              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 2334              		.loc 1 247 34 view .LVU658
 2335 0a00 383084E5 		str	r3, [r4, #56]	@ _20, g_armwave_state.ch_buff_size
 2336              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 251:armwave.c     **** 
 2337              		.loc 1 251 5 view .LVU659
 2338 0a04 54019FE5 		ldr	r0, .L167+48	@,
 2339              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2340              		.loc 1 246 37 view .LVU660
 2341 0a08 013CA0E3 		mov	r3, #256	@ tmp208,
 2342              	@ armwave.c:248:     g_armwave_state.target_width = target_width;
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 2343              		.loc 1 248 34 view .LVU661
 2344 0a0c 406084E5 		str	r6, [r4, #64]	@ render_width, g_armwave_state.target_width
 2345              	@ armwave.c:242:     g_armwave_state.wave_stride = wave_stride;
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2346              		.loc 1 242 33 view .LVU662
 2347 0a10 202084E5 		str	r2, [r4, #32]	@ tmp200, g_armwave_state.wave_stride
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2348              		.loc 1 243 5 is_stmt 1 view .LVU663
 2349              	@ armwave.c:243:     g_armwave_state.waves_max = waves_max;
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2350              		.loc 1 243 31 is_stmt 0 view .LVU664
 2351 0a14 285084E5 		str	r5, [r4, #40]	@ tmp202, g_armwave_state.waves_max
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2352              		.loc 1 244 5 is_stmt 1 view .LVU665
 2353              	@ armwave.c:244:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2354              		.loc 1 244 27 is_stmt 0 view .LVU666
 2355 0a18 245084E5 		str	r5, [r4, #36]	@ tmp202, g_armwave_state.waves
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2356              		.loc 1 245 5 is_stmt 1 view .LVU667
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2357              		.loc 1 246 5 view .LVU668
 2358              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2359              		.loc 1 246 37 is_stmt 0 view .LVU669
 2360 0a1c 2C3084E5 		str	r3, [r4, #44]	@ tmp208, g_armwave_state.bitdepth_height
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 2361              		.loc 1 247 5 is_stmt 1 view .LVU670
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 2362              		.loc 1 248 5 view .LVU671
 249:armwave.c     **** 
 2363              		.loc 1 249 5 view .LVU672
 251:armwave.c     **** 
 2364              		.loc 1 251 5 view .LVU673
 2365 0a20 FEFFFFEB 		bl	printf		@
 2366              	.LVL170:
 256:armwave.c     **** 
 2367              		.loc 1 256 5 view .LVU674
 2368              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2369              		.loc 1 258 23 is_stmt 0 view .LVU675
 2370 0a24 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 2371              	@ armwave.c:256:     g_armwave_state.slice_height = 64;  
 256:armwave.c     **** 
 2372              		.loc 1 256 34 view .LVU676
 2373 0a28 305084E5 		str	r5, [r4, #48]	@ tmp202, g_armwave_state.slice_height
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2374              		.loc 1 258 5 is_stmt 1 view .LVU677
 2375              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2376              		.loc 1 258 7 is_stmt 0 view .LVU678
 2377 0a2c 000050E3 		cmp	r0, #0	@ _21,
 2378 0a30 0000000A 		beq	.L153		@,
 259:armwave.c     **** 
 2379              		.loc 1 259 9 is_stmt 1 view .LVU679
 2380 0a34 FEFFFFEB 		bl	free		@
 2381              	.LVL171:
 2382              	.L153:
 261:armwave.c     **** 
 2383              		.loc 1 261 5 view .LVU680
 2384              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 261:armwave.c     **** 
 2385              		.loc 1 261 34 is_stmt 0 view .LVU681
 2386 0a38 0110A0E3 		mov	r1, #1	@,
 2387 0a3c 380094E5 		ldr	r0, [r4, #56]	@, g_armwave_state.ch_buff_size
 2388 0a40 FEFFFFEB 		bl	calloc		@
 2389              	.LVL172:
 2390              	@ armwave.c:263:     assert(g_armwave_state.ch1_buffer != NULL);
 263:armwave.c     **** 
 2391              		.loc 1 263 5 view .LVU682
 2392 0a44 000050E3 		cmp	r0, #0	@ tmp218,
 2393              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 261:armwave.c     **** 
 2394              		.loc 1 261 32 view .LVU683
 2395 0a48 040084E5 		str	r0, [r4, #4]	@ tmp218, g_armwave_state.ch1_buffer
 263:armwave.c     **** 
 2396              		.loc 1 263 5 is_stmt 1 view .LVU684
 2397 0a4c 3100000A 		beq	.L165		@,
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 2398              		.loc 1 266 5 view .LVU685
 2399              	.LVL173:
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2400              		.loc 1 267 5 view .LVU686
 2401              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2402              		.loc 1 267 34 is_stmt 0 view .LVU687
 2403 0a50 906A07EE 		vmov	s15, r6	@ int	@ render_width, render_width
 2404              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2405              		.loc 1 267 22 view .LVU688
 2406 0a54 3A6ADFED 		vldr.32	s13, .L167+20	@ tmp226,
 2407              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 2408              		.loc 1 269 40 view .LVU689
 2409 0a58 010AA0E3 		mov	r0, #4096	@,
 2410              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2411              		.loc 1 267 34 view .LVU690
 2412 0a5c 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp225, render_width
 2413              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2414              		.loc 1 268 60 view .LVU691
 2415 0a60 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp260, g_armwave_state.slice_height
 2416 0a64 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp229, tmp260
 2417              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2418              		.loc 1 267 22 view .LVU692
 2419 0a68 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp226, tmp225
 2420              	.LVL174:
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2421              		.loc 1 268 5 is_stmt 1 view .LVU693
 2422              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2423              		.loc 1 268 60 is_stmt 0 view .LVU694
 2424 0a6c 887A67EE 		vmul.f32	s15, s15, s16	@ tmp231, tmp229, points_per_pixel
 2425              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2426              		.loc 1 268 41 view .LVU695
 2427 0a70 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 2428 0a74 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp232, g_armwave_state.slice_record_height
 269:armwave.c     **** 
 2429              		.loc 1 269 5 is_stmt 1 view .LVU696
 2430              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 2431              		.loc 1 269 40 is_stmt 0 view .LVU697
 2432 0a78 FEFFFFEB 		bl	malloc		@
 2433              	.LVL175:
 2434              	@ armwave.c:271:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 271:armwave.c     **** 
 2435              		.loc 1 271 5 view .LVU698
 2436 0a7c 000050E3 		cmp	r0, #0	@ tmp233,
 2437              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 2438              		.loc 1 269 38 view .LVU699
 2439 0a80 6C0084E5 		str	r0, [r4, #108]	@ tmp233, g_armwave_state.xcoord_to_xpixel
 271:armwave.c     **** 
 2440              		.loc 1 271 5 is_stmt 1 view .LVU700
 2441 0a84 1E00000A 		beq	.L166		@,
 2442              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2443              		.loc 1 274 54 is_stmt 0 view .LVU701
 2444 0a88 2E7ADFED 		vldr.32	s15, .L167+24	@ tmp240,
 2445 0a8c 020040E2 		sub	r0, r0, #2	@ ivtmp.88, tmp233,
 2446              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2447              		.loc 1 273 12 view .LVU702
 2448 0a90 0030A0E3 		mov	r3, #0	@ xx,
 2449              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2450              		.loc 1 274 54 view .LVU703
 2451 0a94 887A87EE 		vdiv.f32	s14, s15, s16	@ _34, tmp240, points_per_pixel
 2452              	.L156:
 2453              	.LVL176:
 274:armwave.c     **** 
 2454              		.loc 1 274 9 is_stmt 1 view .LVU704
 2455              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2456              		.loc 1 274 74 is_stmt 0 view .LVU705
 2457 0a98 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 2458              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2459              		.loc 1 273 32 view .LVU706
 2460 0a9c 013083E2 		add	r3, r3, #1	@ xx, xx,
 2461              	.LVL177:
 2462              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2463              		.loc 1 273 5 view .LVU707
 2464 0aa0 020B53E3 		cmp	r3, #2048	@ xx,
 2465              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2466              		.loc 1 274 74 view .LVU708
 2467 0aa4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp241, xx
 2468 0aa8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp242, tmp241, _34
 2469              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2470              		.loc 1 274 46 view .LVU709
 2471 0aac E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp243, tmp242
 2472 0ab0 902A17EE 		vmov	r2, s15	@ int	@ tmp243, tmp243
 2473 0ab4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp243, MEM[base: _16, offset: 0B]
 2474              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2475              		.loc 1 273 5 view .LVU710
 2476 0ab8 F6FFFF1A 		bne	.L156		@,
 279:armwave.c     **** }
 2477              		.loc 1 279 5 is_stmt 1 view .LVU711
 2478              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 279:armwave.c     **** }
 2479              		.loc 1 279 34 is_stmt 0 view .LVU712
 2480 0abc 3C0094E5 		ldr	r0, [r4, #60]	@ g_armwave_state.size, g_armwave_state.size
 2481 0ac0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 2482 0ac4 FEFFFFEB 		bl	malloc		@
 2483              	.LVL178:
 279:armwave.c     **** }
 2484              		.loc 1 279 34 view .LVU713
 2485              	.LBE22:
 2486              	.LBE28:
 2487              	@ armwave.c:375: }
 373:armwave.c     **** 
 374:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 375:armwave.c     **** }
 2488              		.loc 1 375 1 view .LVU714
 2489 0ac8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2490              		.cfi_remember_state
 2491              		.cfi_restore 84
 2492              		.cfi_restore 85
 2493              		.cfi_restore 82
 2494              		.cfi_restore 83
 2495              		.cfi_restore 80
 2496              		.cfi_restore 81
 2497              		.cfi_def_cfa_offset 24
 2498              	.LVL179:
 2499              	@ armwave.c:374:     printf("armwave version: %s\n", ARMWAVE_VER);
 374:armwave.c     **** }
 2500              		.loc 1 374 5 view .LVU715
 2501 0acc 90109FE5 		ldr	r1, .L167+52	@,
 2502              	.LBB29:
 2503              	.LBB23:
 2504              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 279:armwave.c     **** }
 2505              		.loc 1 279 32 view .LVU716
 2506 0ad0 500084E5 		str	r0, [r4, #80]	@, g_armwave_state.out_pixbuf
 2507              	.LVL180:
 279:armwave.c     **** }
 2508              		.loc 1 279 32 view .LVU717
 2509              	.LBE23:
 2510              	.LBE29:
 374:armwave.c     **** }
 2511              		.loc 1 374 5 is_stmt 1 view .LVU718
 2512 0ad4 8C009FE5 		ldr	r0, .L167+56	@,
 2513              	@ armwave.c:375: }
 2514              		.loc 1 375 1 is_stmt 0 view .LVU719
 2515 0ad8 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2516              		.cfi_restore 14
 2517              		.cfi_restore 8
 2518              		.cfi_restore 7
 2519              		.cfi_restore 6
 2520              		.cfi_restore 5
 2521              		.cfi_restore 4
 2522              		.cfi_def_cfa_offset 0
 2523              	.LVL181:
 2524              	@ armwave.c:374:     printf("armwave version: %s\n", ARMWAVE_VER);
 374:armwave.c     **** }
 2525              		.loc 1 374 5 view .LVU720
 2526 0adc FEFFFFEA 		b	printf		@
 2527              	.LVL182:
 2528              	.L164:
 2529              		.cfi_restore_state
 2530              	.LBB30:
 2531              	.LBB24:
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 2532              		.loc 1 232 9 is_stmt 1 view .LVU721
 2533              	@ armwave.c:232:         g_armwave_state.row_shift = 10;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 2534              		.loc 1 232 35 is_stmt 0 view .LVU722
 2535 0ae0 84309FE5 		ldr	r3, .L167+60	@ tmp189,
 2536 0ae4 0A20A0E3 		mov	r2, #10	@ tmp191,
 2537 0ae8 F824C4E1 		strd	r2, [r4, #72]	@, tmp252,
 233:armwave.c     ****     } else if(target_height == 2048) {
 2538              		.loc 1 233 9 is_stmt 1 view .LVU723
 2539 0aec B9FFFFEA 		b	.L151		@
 2540              	.L163:
 223:armwave.c     **** 
 2541              		.loc 1 223 5 view .LVU724
 2542 0af0 78309FE5 		ldr	r3, .L167+64	@,
 2543 0af4 DF20A0E3 		mov	r2, #223	@,
 2544 0af8 74109FE5 		ldr	r1, .L167+68	@,
 2545 0afc 74009FE5 		ldr	r0, .L167+72	@,
 2546 0b00 FEFFFFEB 		bl	__assert_fail		@
 2547              	.LVL183:
 2548              	.L166:
 271:armwave.c     **** 
 2549              		.loc 1 271 5 view .LVU725
 2550 0b04 64309FE5 		ldr	r3, .L167+64	@,
 2551 0b08 6C209FE5 		ldr	r2, .L167+76	@,
 2552 0b0c 60109FE5 		ldr	r1, .L167+68	@,
 2553 0b10 68009FE5 		ldr	r0, .L167+80	@,
 2554 0b14 FEFFFFEB 		bl	__assert_fail		@
 2555              	.LVL184:
 2556              	.L165:
 263:armwave.c     **** 
 2557              		.loc 1 263 5 view .LVU726
 2558 0b18 50309FE5 		ldr	r3, .L167+64	@,
 2559 0b1c 60209FE5 		ldr	r2, .L167+84	@,
 2560 0b20 4C109FE5 		ldr	r1, .L167+68	@,
 2561 0b24 5C009FE5 		ldr	r0, .L167+88	@,
 2562 0b28 FEFFFFEB 		bl	__assert_fail		@
 2563              	.LVL185:
 2564              	.L168:
 2565 0b2c 0000A0E1 		.align	3
 2566              	.L167:
 2567 0b30 000000C0 		.word	-1073741824
 2568 0b34 CCCCEC3F 		.word	1072483532
 2569 0b38 00000000 		.word	0
 2570 0b3c 00E06F40 		.word	1081073664
 2571 0b40 00007F43 		.word	1132396544
 2572 0b44 00000045 		.word	1157627904
 2573 0b48 0000803F 		.word	1065353216
 2574 0b4c FFFFFFFF 		.word	gamma_table-1
 2575 0b50 00000000 		.word	g_armwave_state
 2576 0b54 F609F406 		.word	116656630
 2577 0b58 FF070000 		.word	2047
 2578 0b5c FF010000 		.word	511
 2579 0b60 B8000000 		.word	.LC6
 2580 0b64 00000000 		.word	.LC0
 2581 0b68 08000000 		.word	.LC1
 2582 0b6c FF030000 		.word	1023
 2583 0b70 34000000 		.word	.LANCHOR0+52
 2584 0b74 20000000 		.word	.LC2
 2585 0b78 58000000 		.word	.LC5
 2586 0b7c 0F010000 		.word	271
 2587 0b80 F0000000 		.word	.LC8
 2588 0b84 07010000 		.word	263
 2589 0b88 CC000000 		.word	.LC7
 2590              	.LBE24:
 2591              	.LBE30:
 2592              		.cfi_endproc
 2593              	.LFE69:
 2595              		.global	__aeabi_uidiv
 2596              		.align	2
 2597              		.global	armwave_test_generate
 2598              		.syntax unified
 2599              		.arm
 2600              		.fpu vfp
 2602              	armwave_test_generate:
 2603              	.LFB70:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Fill buffers with test funtionry.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_test_generate()
 381:armwave.c     **** {
 2604              		.loc 1 381 1 view -0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 0
 2607              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     uint32_t yy;
 2608              		.loc 1 382 5 view .LVU728
 383:armwave.c     **** 
 384:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2609              		.loc 1 384 5 view .LVU729
 2610              	@ armwave.c:381: {
 381:armwave.c     ****     uint32_t yy;
 2611              		.loc 1 381 1 is_stmt 0 view .LVU730
 2612 0b8c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2613              		.cfi_def_cfa_offset 40
 2614              		.cfi_offset 3, -40
 2615              		.cfi_offset 4, -36
 2616              		.cfi_offset 5, -32
 2617              		.cfi_offset 6, -28
 2618              		.cfi_offset 7, -24
 2619              		.cfi_offset 8, -20
 2620              		.cfi_offset 9, -16
 2621              		.cfi_offset 10, -12
 2622              		.cfi_offset 11, -8
 2623              		.cfi_offset 14, -4
 2624              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2625              		.loc 1 384 5 view .LVU731
 2626 0b90 0010A0E3 		mov	r1, #0	@,
 2627 0b94 14419FE5 		ldr	r4, .L187	@ tmp255,
 2628 0b98 382094E5 		ldr	r2, [r4, #56]	@, g_armwave_state.ch_buff_size
 2629 0b9c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2630 0ba0 FEFFFFEB 		bl	memset		@
 2631              	.LVL186:
 385:armwave.c     **** 
 386:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2632              		.loc 1 386 5 is_stmt 1 view .LVU732
 2633              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2634              		.loc 1 386 45 is_stmt 0 view .LVU733
 2635 0ba4 309094E5 		ldr	r9, [r4, #48]	@ _92, g_armwave_state.slice_height
 2636              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2637              		.loc 1 386 5 view .LVU734
 2638 0ba8 020B59E3 		cmp	r9, #2048	@ _92,
 2639 0bac F88FBD88 		pophi	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2640 0bb0 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2641              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2642              		.loc 1 386 12 view .LVU735
 2643 0bb4 0050A0E3 		mov	r5, #0	@ yy,
 2644              	.LVL187:
 2645              	.L175:
 387:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2646              		.loc 1 387 9 is_stmt 1 discriminator 3 view .LVU736
 2647 0bb8 990506E0 		mul	r6, r9, r5	@ _3, _92, yy
 2648              	.LBB33:
 2649              	.LBB34:
 2650              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2651              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU737
 2652 0bbc 2C0094E5 		ldr	r0, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2653              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2654              		.loc 1 84 5 discriminator 3 view .LVU738
 2655 0bc0 000058E3 		cmp	r8, #0	@ prephitmp_177,
 2656              	.LBE34:
 2657              	.LBE33:
 2658              	@ armwave.c:387:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2659              		.loc 1 387 9 discriminator 3 view .LVU739
 2660 0bc4 347094E5 		ldr	r7, [r4, #52]	@ _4, g_armwave_state.slice_record_height
 2661              	.LVL188:
 2662              	.LBB36:
 2663              	.LBI33:
  73:armwave.c     **** {
 2664              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU740
 2665              	.LBB35:
  75:armwave.c     ****     uint32_t value, word;
 2666              		.loc 1 75 5 discriminator 3 view .LVU741
  76:armwave.c     ****     uint8_t *wave_base;
 2667              		.loc 1 76 5 discriminator 3 view .LVU742
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2668              		.loc 1 77 5 discriminator 3 view .LVU743
  78:armwave.c     ****     uint8_t *write_buffer;
 2669              		.loc 1 78 5 discriminator 3 view .LVU744
  79:armwave.c     ****     
 2670              		.loc 1 79 5 discriminator 3 view .LVU745
  81:armwave.c     **** 
 2671              		.loc 1 81 5 discriminator 3 view .LVU746
 2672              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2673              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU747
 2674 0bc8 900600E0 		mul	r0, r0, r6	@ _15, g_armwave_state.bitdepth_height, _3
 2675              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2676              		.loc 1 81 40 discriminator 3 view .LVU748
 2677 0bcc 043094E5 		ldr	r3, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2678              	.LVL189:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2679              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU749
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2680              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU750
 2681 0bd0 2F00000A 		beq	.L171		@,
 2682 0bd4 046046E2 		sub	r6, r6, #4	@ _76, _3,
 2683              	.LVL190:
 2684              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2685              		.loc 1 84 11 view .LVU751
 2686 0bd8 00E0A0E3 		mov	lr, #0	@ w,
 2687              	.LVL191:
 2688              	.L174:
  85:armwave.c     **** 
 2689              		.loc 1 85 9 is_stmt 1 view .LVU752
 2690              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2691              		.loc 1 85 64 is_stmt 0 view .LVU753
 2692 0bdc 202094E5 		ldr	r2, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2693              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2694              		.loc 1 89 9 view .LVU754
 2695 0be0 000057E3 		cmp	r7, #0	@ _4,
 2696              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2697              		.loc 1 85 36 view .LVU755
 2698 0be4 14C094E5 		ldr	ip, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2699              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2700              		.loc 1 85 64 view .LVU756
 2701 0be8 920E02E0 		mul	r2, r2, lr	@ _19, g_armwave_state.wave_stride, w
 2702              	.LVL192:
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2703              		.loc 1 89 9 is_stmt 1 view .LVU757
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2704              		.loc 1 89 9 is_stmt 0 view .LVU758
 2705 0bec 2400000A 		beq	.L172		@,
 2706 0bf0 062082E0 		add	r2, r2, r6	@ tmp203, _19, _76
 2707              	.LVL193:
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2708              		.loc 1 89 9 view .LVU759
 2709 0bf4 02C08CE0 		add	ip, ip, r2	@ ivtmp.102, _16, tmp203
 2710              	.LVL194:
 2711              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2712              		.loc 1 89 16 view .LVU760
 2713 0bf8 0020A0E3 		mov	r2, #0	@ yy,
 2714              	.LVL195:
 2715              	.L173:
  90:armwave.c     **** 
 2716              		.loc 1 90 13 is_stmt 1 view .LVU761
 2717              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
  90:armwave.c     **** 
 2718              		.loc 1 90 18 is_stmt 0 view .LVU762
 2719 0bfc 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _189, offset: 0B]
 2720              	.LVL196:
  92:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2721              		.loc 1 92 13 is_stmt 1 view .LVU763
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2722              		.loc 1 94 17 view .LVU764
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2723              		.loc 1 95 17 view .LVU765
  96:armwave.c     ****                 word >>= 8;
 2724              		.loc 1 96 17 view .LVU766
 2725              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2726              		.loc 1 95 63 is_stmt 0 view .LVU767
 2727 0c00 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2728 0c04 01B082E2 		add	fp, r2, #1	@ tmp215, yy,
 2729              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2730              		.loc 1 96 47 view .LVU768
 2731 0c08 7180E0E6 		uxtab	r8, r0, r1	@ tmp208, _15, word
 2732 0c0c 998229E0 		mla	r9, r9, r2, r8	@ tmp209, g_armwave_state.bitdepth_height, yy, tmp208
 2733              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2734              		.loc 1 97 22 view .LVU769
 2735 0c10 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2736              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2737              		.loc 1 96 47 view .LVU770
 2738 0c14 0980D3E7 		ldrb	r8, [r3, r9]	@ zero_extendqisi2	@ *_63, *_63
 2739 0c18 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp220, _15, word
 2740 0c1c 018088E2 		add	r8, r8, #1	@ tmp212, *_63,
 2741 0c20 0980C3E7 		strb	r8, [r3, r9]	@ tmp212, *_63
 2742              	.LVL197:
  97:armwave.c     ****             }
 2743              		.loc 1 97 17 is_stmt 1 view .LVU771
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2744              		.loc 1 94 17 view .LVU772
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2745              		.loc 1 95 17 view .LVU773
  96:armwave.c     ****                 word >>= 8;
 2746              		.loc 1 96 17 view .LVU774
 2747              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2748              		.loc 1 95 63 is_stmt 0 view .LVU775
 2749 0c24 2C8094E5 		ldr	r8, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2750              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2751              		.loc 1 97 22 view .LVU776
 2752 0c28 2198A0E1 		lsr	r9, r1, #16	@ word, word,
 2753              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2754              		.loc 1 96 47 view .LVU777
 2755 0c2c 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp243, _15, word,
 2756              	.LVL198:
  96:armwave.c     ****                 word >>= 8;
 2757              		.loc 1 96 47 view .LVU778
 2758 0c30 98AB28E0 		mla	r8, r8, fp, r10	@ tmp221, g_armwave_state.bitdepth_height, tmp215, tmp220
 2759 0c34 79A0E0E6 		uxtab	r10, r0, r9	@ tmp228, _15, word
 2760 0c38 08B0D3E7 		ldrb	fp, [r3, r8]	@ zero_extendqisi2	@ *_83, *_83
 2761              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2762              		.loc 1 95 63 view .LVU779
 2763 0c3c 029082E2 		add	r9, r2, #2	@ tmp230, yy,
 2764              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2765              		.loc 1 96 47 view .LVU780
 2766 0c40 01B08BE2 		add	fp, fp, #1	@ tmp224, *_83,
 2767 0c44 08B0C3E7 		strb	fp, [r3, r8]	@ tmp224, *_83
 2768              	.LVL199:
  97:armwave.c     ****             }
 2769              		.loc 1 97 17 is_stmt 1 view .LVU781
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2770              		.loc 1 94 17 view .LVU782
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2771              		.loc 1 95 17 view .LVU783
  96:armwave.c     ****                 word >>= 8;
 2772              		.loc 1 96 17 view .LVU784
 2773              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2774              		.loc 1 95 63 is_stmt 0 view .LVU785
 2775 0c48 2CB094E5 		ldr	fp, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2776 0c4c 038082E2 		add	r8, r2, #3	@ tmp239, yy,
 2777              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2778              		.loc 1 89 37 view .LVU786
 2779 0c50 042082E2 		add	r2, r2, #4	@ yy, yy,
 2780              	.LVL200:
 2781              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2782              		.loc 1 96 47 view .LVU787
 2783 0c54 9BA929E0 		mla	r9, fp, r9, r10	@ tmp233, g_armwave_state.bitdepth_height, tmp230, tmp228
 2784              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2785              		.loc 1 89 9 view .LVU788
 2786 0c58 020057E1 		cmp	r7, r2	@ _4, yy
 2787              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2788              		.loc 1 96 47 view .LVU789
 2789 0c5c 09A0D3E7 		ldrb	r10, [r3, r9]	@ zero_extendqisi2	@ *_103, *_103
 2790 0c60 01A08AE2 		add	r10, r10, #1	@ tmp236, *_103,
 2791 0c64 09A0C3E7 		strb	r10, [r3, r9]	@ tmp236, *_103
 2792              	.LVL201:
  97:armwave.c     ****             }
 2793              		.loc 1 97 17 is_stmt 1 view .LVU790
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2794              		.loc 1 94 17 view .LVU791
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2795              		.loc 1 95 17 view .LVU792
  96:armwave.c     ****                 word >>= 8;
 2796              		.loc 1 96 17 view .LVU793
 2797              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2798              		.loc 1 95 63 is_stmt 0 view .LVU794
 2799 0c68 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2800              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2801              		.loc 1 96 47 view .LVU795
 2802 0c6c 991821E0 		mla	r1, r9, r8, r1	@ tmp244, g_armwave_state.bitdepth_height, tmp239, tmp243
 2803 0c70 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ *_123, *_123
 2804 0c74 018088E2 		add	r8, r8, #1	@ tmp247, *_123,
 2805 0c78 0180C3E7 		strb	r8, [r3, r1]	@ tmp247, *_123
  97:armwave.c     ****             }
 2806              		.loc 1 97 17 is_stmt 1 view .LVU796
 2807              	.LVL202:
 2808              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2809              		.loc 1 89 9 is_stmt 0 view .LVU797
 2810 0c7c DEFFFF8A 		bhi	.L173		@,
 2811 0c80 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2812              	.LVL203:
 2813              	.L172:
 2814              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2815              		.loc 1 84 44 view .LVU798
 2816 0c84 01E08EE2 		add	lr, lr, #1	@ w, w,
 2817              	.LVL204:
 2818              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2819              		.loc 1 84 5 view .LVU799
 2820 0c88 08005EE1 		cmp	lr, r8	@ w, prephitmp_177
 2821 0c8c D2FFFF3A 		bcc	.L174		@,
 2822 0c90 309094E5 		ldr	r9, [r4, #48]	@ _92, g_armwave_state.slice_height
 2823              	.LVL205:
 2824              	.L171:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2825              		.loc 1 84 5 view .LVU800
 2826              	.LBE35:
 2827              	.LBE36:
 2828              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2829              		.loc 1 386 28 discriminator 3 view .LVU801
 2830 0c94 0910A0E1 		mov	r1, r9	@, _92
 2831 0c98 020BA0E3 		mov	r0, #2048	@,
 2832              	.LVL206:
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2833              		.loc 1 386 28 discriminator 3 view .LVU802
 2834 0c9c FEFFFFEB 		bl	__aeabi_uidiv		@
 2835              	.LVL207:
 2836              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2837              		.loc 1 386 63 discriminator 3 view .LVU803
 2838 0ca0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2839              	.LVL208:
 2840              	@ armwave.c:386:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 386:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2841              		.loc 1 386 5 discriminator 3 view .LVU804
 2842 0ca4 050050E1 		cmp	r0, r5	@, yy
 2843 0ca8 C2FFFF8A 		bhi	.L175		@,
 2844 0cac F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2845              	.L188:
 2846              		.align	2
 2847              	.L187:
 2848 0cb0 00000000 		.word	g_armwave_state
 2849              		.cfi_endproc
 2850              	.LFE70:
 2852              		.align	2
 2853              		.global	armwave_test_fill_outbuf
 2854              		.syntax unified
 2855              		.arm
 2856              		.fpu vfp
 2858              	armwave_test_fill_outbuf:
 2859              	.LFB71:
 388:armwave.c     ****     }
 389:armwave.c     **** }
 390:armwave.c     **** 
 391:armwave.c     **** /*
 392:armwave.c     ****  * Render image to the local allocated buffer.
 393:armwave.c     ****  */
 394:armwave.c     **** void armwave_test_fill_outbuf()
 395:armwave.c     **** {
 2860              		.loc 1 395 1 is_stmt 1 view -0
 2861              		.cfi_startproc
 2862              		@ args = 0, pretend = 0, frame = 8
 2863              		@ frame_needed = 0, uses_anonymous_args = 0
 396:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2864              		.loc 1 396 5 view .LVU806
 2865 0cb4 40219FE5 		ldr	r2, .L213	@ tmp203,
 2866              	@ armwave.c:395: {
 395:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2867              		.loc 1 395 1 is_stmt 0 view .LVU807
 2868 0cb8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2869              		.cfi_def_cfa_offset 36
 2870              		.cfi_offset 4, -36
 2871              		.cfi_offset 5, -32
 2872              		.cfi_offset 6, -28
 2873              		.cfi_offset 7, -24
 2874              		.cfi_offset 8, -20
 2875              		.cfi_offset 9, -16
 2876              		.cfi_offset 10, -12
 2877              		.cfi_offset 11, -8
 2878              		.cfi_offset 14, -4
 2879 0cbc 0CD04DE2 		sub	sp, sp, #12	@,,
 2880              		.cfi_def_cfa_offset 48
 2881              	@ armwave.c:396:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2882              		.loc 1 396 5 view .LVU808
 2883 0cc0 508092E5 		ldr	r8, [r2, #80]	@ _1, g_armwave_state.out_pixbuf
 2884              	.LVL209:
 2885              	.LBB39:
 2886              	.LBI39:
 160:armwave.c     **** {
 2887              		.loc 1 160 6 is_stmt 1 view .LVU809
 2888              	.LBB40:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2889              		.loc 1 162 5 view .LVU810
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 2890              		.loc 1 163 5 view .LVU811
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2891              		.loc 1 164 5 view .LVU812
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2892              		.loc 1 165 5 view .LVU813
 2893              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2894              		.loc 1 165 15 is_stmt 0 view .LVU814
 2895 0cc4 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2896              	.LVL210:
 166:armwave.c     ****     uint32_t offset;
 2897              		.loc 1 166 5 is_stmt 1 view .LVU815
 167:armwave.c     **** 
 2898              		.loc 1 167 5 view .LVU816
 169:armwave.c     **** 
 2899              		.loc 1 169 5 view .LVU817
 2900 0cc8 000058E3 		cmp	r8, #0	@ _1,
 2901 0ccc 4500000A 		beq	.L211		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2902              		.loc 1 171 5 view .LVU818
 2903              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2904              		.loc 1 171 41 is_stmt 0 view .LVU819
 2905 0cd0 405092E5 		ldr	r5, [r2, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2906 0cd4 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2907              	.LVL211:
 172:armwave.c     **** 
 2908              		.loc 1 172 5 is_stmt 1 view .LVU820
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2909              		.loc 1 174 5 view .LVU821
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2910              		.loc 1 174 5 is_stmt 0 view .LVU822
 2911 0cd8 000055E3 		cmp	r5, #0	@ npix,
 2912 0cdc 0B0000DA 		ble	.L189		@,
 2913              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2914              		.loc 1 187 52 view .LVU823
 2915 0ce0 F635D2E1 		ldrsh	r3, [r2, #86]	@ _24, g_armwave_state.ch1_color.g
 2916              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2917              		.loc 1 186 52 view .LVU824
 2918 0ce4 F4B5D2E1 		ldrsh	fp, [r2, #84]	@ _18, g_armwave_state.ch1_color.r
 2919              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2920              		.loc 1 174 11 view .LVU825
 2921 0ce8 0010A0E3 		mov	r1, #0	@ n,
 2922              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2923              		.loc 1 187 52 view .LVU826
 2924 0cec 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2925              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2926              		.loc 1 188 52 view .LVU827
 2927 0cf0 F835D2E1 		ldrsh	r3, [r2, #88]	@ _28, g_armwave_state.ch1_color.b
 2928 0cf4 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2929              	.LVL212:
 2930              	.L196:
 178:armwave.c     **** 
 2931              		.loc 1 178 9 is_stmt 1 view .LVU828
 2932              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 2933              		.loc 1 178 19 is_stmt 0 view .LVU829
 2934 0cf8 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2935              	.LVL213:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2936              		.loc 1 180 9 is_stmt 1 view .LVU830
 2937              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2938              		.loc 1 180 11 is_stmt 0 view .LVU831
 2939 0cfc 000050E3 		cmp	r0, #0	@ wave_word,
 2940 0d00 0400001A 		bne	.L208		@,
 2941 0d04 041081E2 		add	r1, r1, #4	@ n, n,
 2942              	.L192:
 2943              	.LVL214:
 2944              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2945              		.loc 1 174 5 view .LVU832
 2946 0d08 010055E1 		cmp	r5, r1	@ npix, n
 2947 0d0c F9FFFFCA 		bgt	.L196		@,
 2948              	.LVL215:
 2949              	.L189:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2950              		.loc 1 174 5 view .LVU833
 2951              	.LBE40:
 2952              	.LBE39:
 2953              	@ armwave.c:397: }
 397:armwave.c     **** }
 2954              		.loc 1 397 1 view .LVU834
 2955 0d10 0CD08DE2 		add	sp, sp, #12	@,,
 2956              		.cfi_remember_state
 2957              		.cfi_def_cfa_offset 36
 2958              		@ sp needed	@
 2959 0d14 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2960              	.LVL216:
 2961              	.L208:
 2962              		.cfi_restore_state
 2963              	.LBB42:
 2964              	.LBB41:
 2965              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2966              		.loc 1 185 19 view .LVU835
 2967 0d18 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2968              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2969              		.loc 1 180 11 view .LVU836
 2970 0d1c 0160A0E1 		mov	r6, r1	@ ivtmp.119, n
 2971              	.LVL217:
 182:armwave.c     ****                 wave_word >>= 8;
 2972              		.loc 1 182 17 is_stmt 1 view .LVU837
 183:armwave.c     **** 
 2973              		.loc 1 183 17 view .LVU838
 2974              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 2975              		.loc 1 183 27 is_stmt 0 view .LVU839
 2976 0d20 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2977              	.LVL218:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2978              		.loc 1 185 17 is_stmt 1 view .LVU840
 2979 0d24 041081E2 		add	r1, r1, #4	@ n, ivtmp.119,
 2980              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2981              		.loc 1 185 19 is_stmt 0 view .LVU841
 2982 0d28 0500001A 		bne	.L212		@,
 2983              	.L193:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2984              		.loc 1 185 19 view .LVU842
 2985 0d2c 016086E2 		add	r6, r6, #1	@ ivtmp.119, ivtmp.119,
 2986              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 2987              		.loc 1 181 13 view .LVU843
 2988 0d30 060051E1 		cmp	r1, r6	@ n, ivtmp.119
 2989 0d34 F3FFFF0A 		beq	.L192		@,
 182:armwave.c     ****                 wave_word >>= 8;
 2990              		.loc 1 182 17 is_stmt 1 view .LVU844
 2991              	.LVL219:
 183:armwave.c     **** 
 2992              		.loc 1 183 17 view .LVU845
 2993              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2994              		.loc 1 185 19 is_stmt 0 view .LVU846
 2995 0d38 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2996              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 2997              		.loc 1 183 27 view .LVU847
 2998 0d3c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2999              	.LVL220:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3000              		.loc 1 185 17 is_stmt 1 view .LVU848
 3001              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3002              		.loc 1 185 19 is_stmt 0 view .LVU849
 3003 0d40 F9FFFF0A 		beq	.L193		@,
 3004              	.L212:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3005              		.loc 1 186 21 is_stmt 1 view .LVU850
 3006              	.LVL221:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3007              		.loc 1 187 21 view .LVU851
 188:armwave.c     **** 
 3008              		.loc 1 188 21 view .LVU852
 190:armwave.c     ****                     g = MIN(gg, 255);
 3009              		.loc 1 190 21 view .LVU853
 191:armwave.c     ****                     b = MIN(bb, 255);
 3010              		.loc 1 191 21 view .LVU854
 192:armwave.c     **** 
 3011              		.loc 1 192 21 view .LVU855
 195:armwave.c     **** 
 3012              		.loc 1 195 21 view .LVU856
 3013              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3014              		.loc 1 188 55 is_stmt 0 view .LVU857
 3015 0d44 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 3016              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3017              		.loc 1 199 57 view .LVU858
 3018 0d48 1CA092E5 		ldr	r10, [r2, #28]	@ _50, g_armwave_state.vscale
 3019              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3020              		.loc 1 199 32 view .LVU859
 3021 0d4c 7670EFE6 		uxtb	r7, r6	@ ivtmp.119, ivtmp.119
 3022              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3023              		.loc 1 188 55 view .LVU860
 3024 0d50 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 3025              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3026              		.loc 1 187 55 view .LVU861
 3027 0d54 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 3028              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3029              		.loc 1 199 24 view .LVU862
 3030 0d58 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.119
 3031              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3032              		.loc 1 187 55 view .LVU863
 3033 0d5c 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 3034              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3035              		.loc 1 188 24 view .LVU864
 3036 0d60 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 3037              	.LVL222:
 3038              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3039              		.loc 1 186 55 view .LVU865
 3040 0d64 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 3041              	.LVL223:
 3042              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3043              		.loc 1 187 24 view .LVU866
 3044 0d68 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 3045              	.LVL224:
 3046              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 3047              		.loc 1 192 25 view .LVU867
 3048 0d6c FF005CE3 		cmp	ip, #255	@ bb,
 3049 0d70 FFC0A0A3 		movge	ip, #255	@ bb,
 3050              	.LVL225:
 3051              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 3052              		.loc 1 191 25 view .LVU868
 3053 0d74 FF0054E3 		cmp	r4, #255	@ gg,
 3054 0d78 FF40A0A3 		movge	r4, #255	@ gg,
 3055              	.LVL226:
 3056              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3057              		.loc 1 186 24 view .LVU869
 3058 0d7c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 3059              	.LVL227:
 3060              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3061              		.loc 1 190 25 view .LVU870
 3062 0d80 FF005EE3 		cmp	lr, #255	@ rr,
 3063              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3064              		.loc 1 195 56 view .LVU871
 3065 0d84 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 3066              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3067              		.loc 1 190 25 view .LVU872
 3068 0d88 FFE0A0A3 		movge	lr, #255	@ rr,
 3069              	.LVL228:
 3070              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3071              		.loc 1 195 44 view .LVU873
 3072 0d8c 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 3073 0d90 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 3074              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3075              		.loc 1 195 56 view .LVU874
 3076 0d94 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 3077              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3078              		.loc 1 195 51 view .LVU875
 3079 0d98 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 3080              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3081              		.loc 1 195 62 view .LVU876
 3082 0d9c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3083 0da0 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 3084              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3085              		.loc 1 202 21 view .LVU877
 3086 0da4 00005AE3 		cmp	r10, #0	@ _50,
 3087              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3088              		.loc 1 195 26 view .LVU878
 3089 0da8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 3090              	.LVL229:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3091              		.loc 1 198 21 is_stmt 1 view .LVU879
 199:armwave.c     ****                     xx = (nsub >> 8);
 3092              		.loc 1 199 21 view .LVU880
 200:armwave.c     **** 
 3093              		.loc 1 200 21 view .LVU881
 3094              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 3095              		.loc 1 200 32 is_stmt 0 view .LVU882
 3096 0dac 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.119,
 3097              	.LVL230:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3098              		.loc 1 202 21 is_stmt 1 view .LVU883
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3099              		.loc 1 202 21 is_stmt 0 view .LVU884
 3100 0db0 DDFFFF0A 		beq	.L193		@,
 3101              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3102              		.loc 1 202 29 view .LVU885
 3103 0db4 00C0A0E3 		mov	ip, #0	@ row,
 3104              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3105              		.loc 1 202 38 view .LVU886
 3106 0db8 0CE0A0E1 		mov	lr, ip	@ _54, row
 3107              	.LVL231:
 3108              	.L194:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3109              		.loc 1 203 25 is_stmt 1 view .LVU887
 204:armwave.c     ****                     }
 3110              		.loc 1 204 25 view .LVU888
 3111              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3112              		.loc 1 203 52 is_stmt 0 view .LVU889
 3113 0dbc 404092E5 		ldr	r4, [r2, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3114              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3115              		.loc 1 203 45 view .LVU890
 3116 0dc0 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 3117              	.LVL232:
 3118              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3119              		.loc 1 202 67 view .LVU891
 3120 0dc4 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 3121              	.LVL233:
 3122              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3123              		.loc 1 204 43 view .LVU892
 3124 0dc8 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 3125              	.LVL234:
 3126              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3127              		.loc 1 202 67 view .LVU893
 3128 0dcc 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 3129              	.LVL235:
 3130              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3131              		.loc 1 202 38 view .LVU894
 3132 0dd0 0CE0A0E1 		mov	lr, ip	@ _54, row
 3133              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3134              		.loc 1 204 53 view .LVU895
 3135 0dd4 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 3136              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3137              		.loc 1 202 21 view .LVU896
 3138 0dd8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3139              	.LVL236:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3140              		.loc 1 202 21 view .LVU897
 3141 0ddc 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3142 0de0 F5FFFF3A 		bcc	.L194		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3143              		.loc 1 202 21 view .LVU898
 3144 0de4 D0FFFFEA 		b	.L193		@
 3145              	.LVL237:
 3146              	.L211:
 169:armwave.c     **** 
 3147              		.loc 1 169 5 is_stmt 1 view .LVU899
 3148 0de8 10309FE5 		ldr	r3, .L213+4	@,
 3149 0dec A920A0E3 		mov	r2, #169	@,
 3150 0df0 0C109FE5 		ldr	r1, .L213+8	@,
 3151 0df4 0C009FE5 		ldr	r0, .L213+12	@,
 3152 0df8 FEFFFFEB 		bl	__assert_fail		@
 3153              	.LVL238:
 3154              	.L214:
 3155              		.align	2
 3156              	.L213:
 3157 0dfc 00000000 		.word	g_armwave_state
 3158 0e00 18000000 		.word	.LANCHOR0+24
 3159 0e04 20000000 		.word	.LC2
 3160 0e08 2C000000 		.word	.LC3
 3161              	.LBE41:
 3162              	.LBE42:
 3163              		.cfi_endproc
 3164              	.LFE71:
 3166              		.align	2
 3167              		.global	armwave_test_dump_buffer_to_ppm
 3168              		.syntax unified
 3169              		.arm
 3170              		.fpu vfp
 3172              	armwave_test_dump_buffer_to_ppm:
 3173              	.LVL239:
 3174              	.LFB72:
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 403:armwave.c     **** {
 3175              		.loc 1 403 1 view -0
 3176              		.cfi_startproc
 3177              		@ args = 0, pretend = 0, frame = 0
 3178              		@ frame_needed = 0, uses_anonymous_args = 0
 3179              		@ link register save eliminated.
 404:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3180              		.loc 1 404 5 view .LVU901
 3181 0e0c 08309FE5 		ldr	r3, .L216	@ tmp112,
 3182 0e10 0010A0E1 		mov	r1, r0	@, fn
 3183 0e14 500093E5 		ldr	r0, [r3, #80]	@, g_armwave_state.out_pixbuf
 3184              	.LVL240:
 3185              		.loc 1 404 5 is_stmt 0 view .LVU902
 3186 0e18 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3187              	.LVL241:
 3188              	.L217:
 3189              		.loc 1 404 5 view .LVU903
 3190              		.align	2
 3191              	.L216:
 3192 0e1c 00000000 		.word	g_armwave_state
 3193              		.cfi_endproc
 3194              	.LFE72:
 3196              		.align	2
 3197              		.global	armwave_test_fill_gdkbuf
 3198              		.syntax unified
 3199              		.arm
 3200              		.fpu vfp
 3202              	armwave_test_fill_gdkbuf:
 3203              	.LVL242:
 3204              	.LFB73:
 405:armwave.c     **** }
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Render GDK buffer with test funtionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 411:armwave.c     **** {
 3205              		.loc 1 411 1 is_stmt 1 view -0
 3206              		.cfi_startproc
 3207              		@ args = 0, pretend = 0, frame = 8
 3208              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     //PyObject *mv;
 413:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 414:armwave.c     **** 
 415:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 416:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3209              		.loc 1 416 5 view .LVU905
 3210              	@ armwave.c:416:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3211              		.loc 1 416 11 is_stmt 0 view .LVU906
 3212 0e20 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3213              	@ armwave.c:411: {
 411:armwave.c     ****     //PyObject *mv;
 3214              		.loc 1 411 1 view .LVU907
 3215 0e24 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3216              		.cfi_def_cfa_offset 36
 3217              		.cfi_offset 4, -36
 3218              		.cfi_offset 5, -32
 3219              		.cfi_offset 6, -28
 3220              		.cfi_offset 7, -24
 3221              		.cfi_offset 8, -20
 3222              		.cfi_offset 9, -16
 3223              		.cfi_offset 10, -12
 3224              		.cfi_offset 11, -8
 3225              		.cfi_offset 14, -4
 3226 0e28 0CD04DE2 		sub	sp, sp, #12	@,,
 3227              		.cfi_def_cfa_offset 48
 3228              	.LBB45:
 3229              	.LBB46:
 3230              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3231              		.loc 1 165 15 view .LVU908
 3232 0e2c 38219FE5 		ldr	r2, .L242	@ tmp206,
 3233              	.LBE46:
 3234              	.LBE45:
 3235              	@ armwave.c:416:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3236              		.loc 1 416 11 view .LVU909
 3237 0e30 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3238              	.LVL243:
 417:armwave.c     ****     
 418:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 419:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3239              		.loc 1 419 5 is_stmt 1 view .LVU910
 3240              	.LBB49:
 3241              	.LBI45:
 160:armwave.c     **** {
 3242              		.loc 1 160 6 view .LVU911
 3243              	.LBB47:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3244              		.loc 1 162 5 view .LVU912
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 3245              		.loc 1 163 5 view .LVU913
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3246              		.loc 1 164 5 view .LVU914
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3247              		.loc 1 165 5 view .LVU915
 3248              	@ armwave.c:169:     assert(out_buffer != NULL);
 169:armwave.c     **** 
 3249              		.loc 1 169 5 is_stmt 0 view .LVU916
 3250 0e34 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3251              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3252              		.loc 1 165 15 view .LVU917
 3253 0e38 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3254              	.LVL244:
 166:armwave.c     ****     uint32_t offset;
 3255              		.loc 1 166 5 is_stmt 1 view .LVU918
 167:armwave.c     **** 
 3256              		.loc 1 167 5 view .LVU919
 169:armwave.c     **** 
 3257              		.loc 1 169 5 view .LVU920
 3258 0e3c 4500000A 		beq	.L240		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3259              		.loc 1 171 5 view .LVU921
 3260              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3261              		.loc 1 171 41 is_stmt 0 view .LVU922
 3262 0e40 405092E5 		ldr	r5, [r2, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3263 0e44 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 3264              	.LVL245:
 172:armwave.c     **** 
 3265              		.loc 1 172 5 is_stmt 1 view .LVU923
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3266              		.loc 1 174 5 view .LVU924
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3267              		.loc 1 174 5 is_stmt 0 view .LVU925
 3268 0e48 000055E3 		cmp	r5, #0	@ npix,
 3269 0e4c 0B0000DA 		ble	.L218		@,
 3270              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3271              		.loc 1 187 52 view .LVU926
 3272 0e50 F635D2E1 		ldrsh	r3, [r2, #86]	@ _26, g_armwave_state.ch1_color.g
 3273              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3274              		.loc 1 186 52 view .LVU927
 3275 0e54 F4B5D2E1 		ldrsh	fp, [r2, #84]	@ _20, g_armwave_state.ch1_color.r
 3276              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3277              		.loc 1 174 11 view .LVU928
 3278 0e58 0010A0E3 		mov	r1, #0	@ n,
 3279              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3280              		.loc 1 187 52 view .LVU929
 3281 0e5c 00308DE5 		str	r3, [sp]	@ _26, %sfp
 3282              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3283              		.loc 1 188 52 view .LVU930
 3284 0e60 F835D2E1 		ldrsh	r3, [r2, #88]	@ _30, g_armwave_state.ch1_color.b
 3285 0e64 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 3286              	.LVL246:
 3287              	.L225:
 178:armwave.c     **** 
 3288              		.loc 1 178 9 is_stmt 1 view .LVU931
 3289              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 3290              		.loc 1 178 19 is_stmt 0 view .LVU932
 3291 0e68 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3292              	.LVL247:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3293              		.loc 1 180 9 is_stmt 1 view .LVU933
 3294              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3295              		.loc 1 180 11 is_stmt 0 view .LVU934
 3296 0e6c 000050E3 		cmp	r0, #0	@ wave_word,
 3297 0e70 0400001A 		bne	.L237		@,
 3298 0e74 041081E2 		add	r1, r1, #4	@ n, n,
 3299              	.L221:
 3300              	.LVL248:
 3301              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3302              		.loc 1 174 5 view .LVU935
 3303 0e78 010055E1 		cmp	r5, r1	@ npix, n
 3304 0e7c F9FFFFCA 		bgt	.L225		@,
 3305              	.LVL249:
 3306              	.L218:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3307              		.loc 1 174 5 view .LVU936
 3308              	.LBE47:
 3309              	.LBE49:
 3310              	@ armwave.c:420: }
 420:armwave.c     **** }
 3311              		.loc 1 420 1 view .LVU937
 3312 0e80 0CD08DE2 		add	sp, sp, #12	@,,
 3313              		.cfi_remember_state
 3314              		.cfi_def_cfa_offset 36
 3315              		@ sp needed	@
 3316 0e84 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3317              	.LVL250:
 3318              	.L237:
 3319              		.cfi_restore_state
 3320              	.LBB50:
 3321              	.LBB48:
 3322              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3323              		.loc 1 185 19 view .LVU938
 3324 0e88 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3325              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 3326              		.loc 1 180 11 view .LVU939
 3327 0e8c 0160A0E1 		mov	r6, r1	@ ivtmp.135, n
 3328              	.LVL251:
 182:armwave.c     ****                 wave_word >>= 8;
 3329              		.loc 1 182 17 is_stmt 1 view .LVU940
 183:armwave.c     **** 
 3330              		.loc 1 183 17 view .LVU941
 3331              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3332              		.loc 1 183 27 is_stmt 0 view .LVU942
 3333 0e90 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3334              	.LVL252:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3335              		.loc 1 185 17 is_stmt 1 view .LVU943
 3336 0e94 041081E2 		add	r1, r1, #4	@ n, ivtmp.135,
 3337              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3338              		.loc 1 185 19 is_stmt 0 view .LVU944
 3339 0e98 0500001A 		bne	.L241		@,
 3340              	.L222:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3341              		.loc 1 185 19 view .LVU945
 3342 0e9c 016086E2 		add	r6, r6, #1	@ ivtmp.135, ivtmp.135,
 3343              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 3344              		.loc 1 181 13 view .LVU946
 3345 0ea0 060051E1 		cmp	r1, r6	@ n, ivtmp.135
 3346 0ea4 F3FFFF0A 		beq	.L221		@,
 182:armwave.c     ****                 wave_word >>= 8;
 3347              		.loc 1 182 17 is_stmt 1 view .LVU947
 3348              	.LVL253:
 183:armwave.c     **** 
 3349              		.loc 1 183 17 view .LVU948
 3350              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3351              		.loc 1 185 19 is_stmt 0 view .LVU949
 3352 0ea8 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 3353              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 3354              		.loc 1 183 27 view .LVU950
 3355 0eac 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3356              	.LVL254:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3357              		.loc 1 185 17 is_stmt 1 view .LVU951
 3358              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3359              		.loc 1 185 19 is_stmt 0 view .LVU952
 3360 0eb0 F9FFFF0A 		beq	.L222		@,
 3361              	.L241:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3362              		.loc 1 186 21 is_stmt 1 view .LVU953
 3363              	.LVL255:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3364              		.loc 1 187 21 view .LVU954
 188:armwave.c     **** 
 3365              		.loc 1 188 21 view .LVU955
 190:armwave.c     ****                     g = MIN(gg, 255);
 3366              		.loc 1 190 21 view .LVU956
 191:armwave.c     ****                     b = MIN(bb, 255);
 3367              		.loc 1 191 21 view .LVU957
 192:armwave.c     **** 
 3368              		.loc 1 192 21 view .LVU958
 195:armwave.c     **** 
 3369              		.loc 1 195 21 view .LVU959
 3370              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3371              		.loc 1 188 55 is_stmt 0 view .LVU960
 3372 0eb4 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 3373              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3374              		.loc 1 199 57 view .LVU961
 3375 0eb8 1CA092E5 		ldr	r10, [r2, #28]	@ _52, g_armwave_state.vscale
 3376              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3377              		.loc 1 199 32 view .LVU962
 3378 0ebc 7670EFE6 		uxtb	r7, r6	@ ivtmp.135, ivtmp.135
 3379              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3380              		.loc 1 188 55 view .LVU963
 3381 0ec0 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 3382              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3383              		.loc 1 187 55 view .LVU964
 3384 0ec4 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 3385              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 3386              		.loc 1 199 24 view .LVU965
 3387 0ec8 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.135
 3388              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3389              		.loc 1 187 55 view .LVU966
 3390 0ecc 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 3391              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 3392              		.loc 1 188 24 view .LVU967
 3393 0ed0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 3394              	.LVL256:
 3395              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3396              		.loc 1 186 55 view .LVU968
 3397 0ed4 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3398              	.LVL257:
 3399              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3400              		.loc 1 187 24 view .LVU969
 3401 0ed8 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3402              	.LVL258:
 3403              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 3404              		.loc 1 192 25 view .LVU970
 3405 0edc FF005CE3 		cmp	ip, #255	@ bb,
 3406 0ee0 FFC0A0A3 		movge	ip, #255	@ bb,
 3407              	.LVL259:
 3408              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 3409              		.loc 1 191 25 view .LVU971
 3410 0ee4 FF0054E3 		cmp	r4, #255	@ gg,
 3411 0ee8 FF40A0A3 		movge	r4, #255	@ gg,
 3412              	.LVL260:
 3413              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3414              		.loc 1 186 24 view .LVU972
 3415 0eec 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3416              	.LVL261:
 3417              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3418              		.loc 1 190 25 view .LVU973
 3419 0ef0 FF005EE3 		cmp	lr, #255	@ rr,
 3420              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3421              		.loc 1 195 56 view .LVU974
 3422 0ef4 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3423              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3424              		.loc 1 190 25 view .LVU975
 3425 0ef8 FFE0A0A3 		movge	lr, #255	@ rr,
 3426              	.LVL262:
 3427              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3428              		.loc 1 195 44 view .LVU976
 3429 0efc 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3430 0f00 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3431              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3432              		.loc 1 195 56 view .LVU977
 3433 0f04 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3434              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3435              		.loc 1 195 51 view .LVU978
 3436 0f08 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3437              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3438              		.loc 1 195 62 view .LVU979
 3439 0f0c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3440 0f10 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3441              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3442              		.loc 1 202 21 view .LVU980
 3443 0f14 00005AE3 		cmp	r10, #0	@ _52,
 3444              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3445              		.loc 1 195 26 view .LVU981
 3446 0f18 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3447              	.LVL263:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3448              		.loc 1 198 21 is_stmt 1 view .LVU982
 199:armwave.c     ****                     xx = (nsub >> 8);
 3449              		.loc 1 199 21 view .LVU983
 200:armwave.c     **** 
 3450              		.loc 1 200 21 view .LVU984
 3451              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 3452              		.loc 1 200 32 is_stmt 0 view .LVU985
 3453 0f1c 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.135,
 3454              	.LVL264:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3455              		.loc 1 202 21 is_stmt 1 view .LVU986
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3456              		.loc 1 202 21 is_stmt 0 view .LVU987
 3457 0f20 DDFFFF0A 		beq	.L222		@,
 3458              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3459              		.loc 1 202 29 view .LVU988
 3460 0f24 00C0A0E3 		mov	ip, #0	@ row,
 3461              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3462              		.loc 1 202 38 view .LVU989
 3463 0f28 0CE0A0E1 		mov	lr, ip	@ _56, row
 3464              	.LVL265:
 3465              	.L223:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3466              		.loc 1 203 25 is_stmt 1 view .LVU990
 204:armwave.c     ****                     }
 3467              		.loc 1 204 25 view .LVU991
 3468              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3469              		.loc 1 203 52 is_stmt 0 view .LVU992
 3470 0f2c 404092E5 		ldr	r4, [r2, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3471              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3472              		.loc 1 203 45 view .LVU993
 3473 0f30 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3474              	.LVL266:
 3475              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3476              		.loc 1 202 67 view .LVU994
 3477 0f34 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3478              	.LVL267:
 3479              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3480              		.loc 1 204 43 view .LVU995
 3481 0f38 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3482              	.LVL268:
 3483              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3484              		.loc 1 202 67 view .LVU996
 3485 0f3c 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3486              	.LVL269:
 3487              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3488              		.loc 1 202 38 view .LVU997
 3489 0f40 0CE0A0E1 		mov	lr, ip	@ _56, row
 3490              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3491              		.loc 1 204 53 view .LVU998
 3492 0f44 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3493              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3494              		.loc 1 202 21 view .LVU999
 3495 0f48 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3496              	.LVL270:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3497              		.loc 1 202 21 view .LVU1000
 3498 0f4c 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3499 0f50 F5FFFF3A 		bcc	.L223		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3500              		.loc 1 202 21 view .LVU1001
 3501 0f54 D0FFFFEA 		b	.L222		@
 3502              	.LVL271:
 3503              	.L240:
 169:armwave.c     **** 
 3504              		.loc 1 169 5 is_stmt 1 view .LVU1002
 3505 0f58 10309FE5 		ldr	r3, .L242+4	@,
 3506 0f5c A920A0E3 		mov	r2, #169	@,
 3507 0f60 0C109FE5 		ldr	r1, .L242+8	@,
 3508 0f64 0C009FE5 		ldr	r0, .L242+12	@,
 3509              	.LVL272:
 169:armwave.c     **** 
 3510              		.loc 1 169 5 is_stmt 0 view .LVU1003
 3511 0f68 FEFFFFEB 		bl	__assert_fail		@
 3512              	.LVL273:
 3513              	.L243:
 3514              		.align	2
 3515              	.L242:
 3516 0f6c 00000000 		.word	g_armwave_state
 3517 0f70 18000000 		.word	.LANCHOR0+24
 3518 0f74 20000000 		.word	.LC2
 3519 0f78 2C000000 		.word	.LC3
 3520              	.LBE48:
 3521              	.LBE50:
 3522              		.cfi_endproc
 3523              	.LFE73:
 3525              		.align	2
 3526              		.global	armwave_fill_pixbuf_into_pybuffer
 3527              		.syntax unified
 3528              		.arm
 3529              		.fpu vfp
 3531              	armwave_fill_pixbuf_into_pybuffer:
 3532              	.LVL274:
 3533              	.LFB74:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 426:armwave.c     **** {
 3534              		.loc 1 426 1 is_stmt 1 view -0
 3535              		.cfi_startproc
 3536              		@ args = 0, pretend = 0, frame = 0
 3537              		@ frame_needed = 0, uses_anonymous_args = 0
 427:armwave.c     ****     Py_buffer *buffer = malloc(sizeof(Py_buffer));
 3538              		.loc 1 427 5 view .LVU1005
 3539              	@ armwave.c:426: {
 426:armwave.c     ****     Py_buffer *buffer = malloc(sizeof(Py_buffer));
 3540              		.loc 1 426 1 is_stmt 0 view .LVU1006
 3541 0f7c 70402DE9 		push	{r4, r5, r6, lr}	@
 3542              		.cfi_def_cfa_offset 16
 3543              		.cfi_offset 4, -16
 3544              		.cfi_offset 5, -12
 3545              		.cfi_offset 6, -8
 3546              		.cfi_offset 14, -4
 3547              	@ armwave.c:426: {
 426:armwave.c     ****     Py_buffer *buffer = malloc(sizeof(Py_buffer));
 3548              		.loc 1 426 1 view .LVU1007
 3549 0f80 0050A0E1 		mov	r5, r0	@ buf_obj, buf_obj
 3550              	@ armwave.c:427:     Py_buffer *buffer = malloc(sizeof(Py_buffer));
 3551              		.loc 1 427 25 view .LVU1008
 3552 0f84 2C00A0E3 		mov	r0, #44	@,
 3553              	.LVL275:
 3554              		.loc 1 427 25 view .LVU1009
 3555 0f88 FEFFFFEB 		bl	malloc		@
 3556              	.LVL276:
 3557 0f8c 0040A0E1 		mov	r4, r0	@ tmp117,
 3558              	.LVL277:
 428:armwave.c     ****     printf("buffer=0x%08x\n", buffer);
 3559              		.loc 1 428 5 is_stmt 1 view .LVU1010
 3560 0f90 0010A0E1 		mov	r1, r0	@, tmp117
 3561 0f94 84009FE5 		ldr	r0, .L250	@,
 3562              	.LVL278:
 3563              		.loc 1 428 5 is_stmt 0 view .LVU1011
 3564 0f98 FEFFFFEB 		bl	printf		@
 3565              	.LVL279:
 429:armwave.c     **** 
 430:armwave.c     ****     assert(buffer != NULL);
 3566              		.loc 1 430 5 is_stmt 1 view .LVU1012
 3567 0f9c 000054E3 		cmp	r4, #0	@ tmp117,
 3568 0fa0 1400000A 		beq	.L248		@,
 431:armwave.c     ****     printf("buffer is not null\n");
 3569              		.loc 1 431 5 view .LVU1013
 3570 0fa4 78009FE5 		ldr	r0, .L250+4	@,
 3571 0fa8 FEFFFFEB 		bl	puts		@
 3572              	.LVL280:
 432:armwave.c     **** 
 433:armwave.c     ****     assert(PyObject_GetBuffer(buf_obj, buffer, PyBUF_SIMPLE | PyBUF_WRITABLE) != 0);
 3573              		.loc 1 433 5 view .LVU1014
 3574 0fac 0500A0E1 		mov	r0, r5	@, buf_obj
 3575 0fb0 0120A0E3 		mov	r2, #1	@,
 3576 0fb4 0410A0E1 		mov	r1, r4	@, tmp117
 3577 0fb8 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3578              	.LVL281:
 3579 0fbc 000050E3 		cmp	r0, #0	@,
 3580 0fc0 1100000A 		beq	.L249		@,
 434:armwave.c     ****     printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, buff
 3581              		.loc 1 434 5 view .LVU1015
 3582 0fc4 D420C4E1 		ldrd	r2, [r4, #4]	@, tmp117,
 3583 0fc8 001094E5 		ldr	r1, [r4]	@, buffer_8->buf
 3584 0fcc 54009FE5 		ldr	r0, .L250+8	@,
 3585 0fd0 FEFFFFEB 		bl	printf		@
 3586              	.LVL282:
 435:armwave.c     **** 
 436:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer->buf);
 3587              		.loc 1 436 5 view .LVU1016
 3588 0fd4 000094E5 		ldr	r0, [r4]	@, buffer_8->buf
 3589 0fd8 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3590              	.LVL283:
 437:armwave.c     ****     printf("buffer fill done\n");
 3591              		.loc 1 437 5 view .LVU1017
 3592 0fdc 48009FE5 		ldr	r0, .L250+12	@,
 3593 0fe0 FEFFFFEB 		bl	puts		@
 3594              	.LVL284:
 438:armwave.c     **** 
 439:armwave.c     ****     PyBuffer_Release(buffer);
 3595              		.loc 1 439 5 view .LVU1018
 3596 0fe4 0400A0E1 		mov	r0, r4	@, tmp117
 3597 0fe8 FEFFFFEB 		bl	PyBuffer_Release		@
 3598              	.LVL285:
 440:armwave.c     ****     printf("buffer released from reality\n");
 3599              		.loc 1 440 5 view .LVU1019
 3600 0fec 3C009FE5 		ldr	r0, .L250+16	@,
 3601              	@ armwave.c:441: }
 441:armwave.c     **** }
 3602              		.loc 1 441 1 is_stmt 0 view .LVU1020
 3603 0ff0 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3604              		.cfi_remember_state
 3605              		.cfi_restore 14
 3606              		.cfi_restore 6
 3607              		.cfi_restore 5
 3608              		.cfi_restore 4
 3609              		.cfi_def_cfa_offset 0
 3610              	.LVL286:
 3611              	@ armwave.c:440:     printf("buffer released from reality\n");
 440:armwave.c     ****     printf("buffer released from reality\n");
 3612              		.loc 1 440 5 view .LVU1021
 3613 0ff4 FEFFFFEA 		b	puts		@
 3614              	.LVL287:
 3615              	.L248:
 3616              		.cfi_restore_state
 430:armwave.c     ****     printf("buffer is not null\n");
 3617              		.loc 1 430 5 is_stmt 1 discriminator 1 view .LVU1022
 3618 0ff8 34309FE5 		ldr	r3, .L250+20	@,
 3619 0ffc 34209FE5 		ldr	r2, .L250+24	@,
 3620 1000 34109FE5 		ldr	r1, .L250+28	@,
 3621 1004 34009FE5 		ldr	r0, .L250+32	@,
 3622 1008 FEFFFFEB 		bl	__assert_fail		@
 3623              	.LVL288:
 3624              	.L249:
 433:armwave.c     ****     printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, buff
 3625              		.loc 1 433 5 discriminator 1 view .LVU1023
 3626 100c 20309FE5 		ldr	r3, .L250+20	@,
 3627 1010 2C209FE5 		ldr	r2, .L250+36	@,
 3628 1014 20109FE5 		ldr	r1, .L250+28	@,
 3629 1018 28009FE5 		ldr	r0, .L250+40	@,
 3630 101c FEFFFFEB 		bl	__assert_fail		@
 3631              	.LVL289:
 3632              	.L251:
 3633              		.align	2
 3634              	.L250:
 3635 1020 70010000 		.word	.LC16
 3636 1024 90010000 		.word	.LC18
 3637 1028 EC010000 		.word	.LC20
 3638 102c 50020000 		.word	.LC21
 3639 1030 64020000 		.word	.LC22
 3640 1034 88000000 		.word	.LANCHOR0+136
 3641 1038 AE010000 		.word	430
 3642 103c 20000000 		.word	.LC2
 3643 1040 80010000 		.word	.LC17
 3644 1044 B1010000 		.word	433
 3645 1048 A4010000 		.word	.LC19
 3646              		.cfi_endproc
 3647              	.LFE74:
 3649              		.align	2
 3650              		.global	armwave_test_create_am_sine
 3651              		.syntax unified
 3652              		.arm
 3653              		.fpu vfp
 3655              	armwave_test_create_am_sine:
 3656              	.LVL290:
 3657              	.LFB75:
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Make a test AM waveform for render tests.
 445:armwave.c     ****  *
 446:armwave.c     ****  * @param   mod                 modulation depth
 447:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 448:armwave.c     ****  */
 449:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 450:armwave.c     **** {
 3658              		.loc 1 450 1 view -0
 3659              		.cfi_startproc
 3660              		@ args = 0, pretend = 0, frame = 8
 3661              		@ frame_needed = 0, uses_anonymous_args = 0
 451:armwave.c     ****     float v, noise, xnoise, mod_val;
 3662              		.loc 1 451 5 view .LVU1025
 452:armwave.c     ****     int w, x;
 3663              		.loc 1 452 5 view .LVU1026
 453:armwave.c     **** 
 454:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
 3664              		.loc 1 454 5 view .LVU1027
 3665              	@ armwave.c:450: {
 450:armwave.c     ****     float v, noise, xnoise, mod_val;
 3666              		.loc 1 450 1 is_stmt 0 view .LVU1028
 3667 104c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3668              		.cfi_def_cfa_offset 32
 3669              		.cfi_offset 4, -32
 3670              		.cfi_offset 5, -28
 3671              		.cfi_offset 6, -24
 3672              		.cfi_offset 7, -20
 3673              		.cfi_offset 8, -16
 3674              		.cfi_offset 9, -12
 3675              		.cfi_offset 10, -8
 3676              		.cfi_offset 14, -4
 3677 1050 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3678              		.cfi_def_cfa_offset 88
 3679              		.cfi_offset 80, -88
 3680              		.cfi_offset 81, -84
 3681              		.cfi_offset 82, -80
 3682              		.cfi_offset 83, -76
 3683              		.cfi_offset 84, -72
 3684              		.cfi_offset 85, -68
 3685              		.cfi_offset 86, -64
 3686              		.cfi_offset 87, -60
 3687              		.cfi_offset 88, -56
 3688              		.cfi_offset 89, -52
 3689              		.cfi_offset 90, -48
 3690              		.cfi_offset 91, -44
 3691              		.cfi_offset 92, -40
 3692              		.cfi_offset 93, -36
 3693 1054 54819FE5 		ldr	r8, .L271+36	@ _76,
 3694 1058 40DAF0EE 		vmov.f32	s27, s0	@ mod, mod
 3695 105c 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.156, _76,
 3696 1060 60CAB0EE 		vmov.f32	s24, s1	@ noise_fraction, noise_fraction
 3697              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 455:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3698              		.loc 1 455 37 view .LVU1029
 3699 1064 48DA9FED 		vldr.32	s26, .L271	@ tmp158,
 3700              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3701              		.loc 1 455 17 view .LVU1030
 3702 1068 48CADFED 		vldr.32	s25, .L271+4	@ tmp160,
 3703              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 456:armwave.c     ****         //mod = 1.0f;
 457:armwave.c     **** 
 458:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 459:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 460:armwave.c     ****             noise *= noise;
 461:armwave.c     ****             noise *= noise;
 462:armwave.c     ****             noise *= noise;
 463:armwave.c     **** 
 464:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 465:armwave.c     ****                 noise = -noise;
 466:armwave.c     **** 
 467:armwave.c     ****             noise += 1.0f;
 468:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 469:armwave.c     **** 
 470:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * noise;
 3704              		.loc 1 470 29 view .LVU1031
 3705 106c 48BADFED 		vldr.32	s23, .L271+8	@ tmp168,
 3706              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 3707              		.loc 1 470 33 view .LVU1032
 3708 1070 48BA9FED 		vldr.32	s22, .L271+12	@ tmp170,
 3709              	@ armwave.c:468:             xnoise = (rand() & 0xffff) / 6553500.0f;
 468:armwave.c     **** 
 3710              		.loc 1 468 20 view .LVU1033
 3711 1074 48AADFED 		vldr.32	s21, .L271+16	@ tmp175,
 3712              	@ armwave.c:467:             noise += 1.0f;
 467:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3713              		.loc 1 467 19 view .LVU1034
 3714 1078 48AA9FED 		vldr.32	s20, .L271+20	@ tmp181,
 3715 107c 02A886E2 		add	r10, r6, #131072	@ _82,,
 3716              	@ armwave.c:450: {
 450:armwave.c     ****     float v, noise, xnoise, mod_val;
 3717              		.loc 1 450 1 view .LVU1035
 3718 1080 08D04DE2 		sub	sp, sp, #8	@,,
 3719              		.cfi_def_cfa_offset 96
 3720 1084 0FA08AE2 		add	r10, r10, #15	@ _82, _82,
 3721 1088 0F6086E2 		add	r6, r6, #15	@ ivtmp.156, ivtmp.156,
 3722 108c 008068E2 		rsb	r8, r8, #0	@ ivtmp.159, _76
 3723              	@ armwave.c:454:     for(w = 0; w < TEST_NWAVES; w++) {
 454:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3724              		.loc 1 454 11 view .LVU1036
 3725 1090 0090A0E3 		mov	r9, #0	@ w,
 3726              	.LVL291:
 3727              	.L258:
 455:armwave.c     ****         //mod = 1.0f;
 3728              		.loc 1 455 9 is_stmt 1 view .LVU1037
 3729              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 455:armwave.c     ****         //mod = 1.0f;
 3730              		.loc 1 455 28 is_stmt 0 view .LVU1038
 3731 1094 909A07EE 		vmov	s15, r9	@ int	@ w, w
 3732              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 455:armwave.c     ****         //mod = 1.0f;
 3733              		.loc 1 455 17 view .LVU1039
 3734 1098 6C8AB0EE 		vmov.f32	s16, s25	@ mod_val, tmp160
 3735              	@ armwave.c:472:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 471:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 472:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
 3736              		.loc 1 472 58 view .LVU1040
 3737 109c 409ADFED 		vldr.32	s19, .L271+24	@ tmp186,
 3738 10a0 409A9FED 		vldr.32	s18, .L271+28	@ tmp187,
 3739              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 455:armwave.c     ****         //mod = 1.0f;
 3740              		.loc 1 455 28 view .LVU1041
 3741 10a4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp156, w
 3742 10a8 025B46E2 		sub	r5, r6, #2048	@ ivtmp.149, ivtmp.156,
 3743 10ac 017088E2 		add	r7, r8, #1	@ tmp193, ivtmp.159,
 3744              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 455:armwave.c     ****         //mod = 1.0f;
 3745              		.loc 1 455 37 view .LVU1042
 3746 10b0 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp157, tmp156, tmp158
 3747              	@ armwave.c:455:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 455:armwave.c     ****         //mod = 1.0f;
 3748              		.loc 1 455 17 view .LVU1043
 3749 10b4 AD8A07EE 		vmla.f32	s16, s15, s27	@ mod_val, tmp157, mod
 3750              	.LVL292:
 458:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3751              		.loc 1 458 9 is_stmt 1 view .LVU1044
 458:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3752              		.loc 1 458 9 is_stmt 0 view .LVU1045
 3753 10b8 C88AB7EE 		vcvt.f64.f32	d8, s16	@ tmp194, mod_val
 3754              	.LVL293:
 3755              	.L257:
 3756              	@ armwave.c:459:             noise  = ((rand() & 0xffff) * noise_fraction);
 459:armwave.c     ****             noise *= noise;
 3757              		.loc 1 459 24 view .LVU1046
 3758 10bc FEFFFFEB 		bl	rand		@
 3759              	.LVL294:
 3760 10c0 054087E0 		add	r4, r7, r5	@ _72, tmp193, ivtmp.149
 3761              	.LVL295:
 459:armwave.c     ****             noise *= noise;
 3762              		.loc 1 459 13 is_stmt 1 view .LVU1047
 3763              	@ armwave.c:459:             noise  = ((rand() & 0xffff) * noise_fraction);
 459:armwave.c     ****             noise *= noise;
 3764              		.loc 1 459 31 is_stmt 0 view .LVU1048
 3765 10c4 7000FFE6 		uxth	r0, r0	@ tmp162,
 3766              	@ armwave.c:459:             noise  = ((rand() & 0xffff) * noise_fraction);
 459:armwave.c     ****             noise *= noise;
 3767              		.loc 1 459 41 view .LVU1049
 3768 10c8 900A07EE 		vmov	s15, r0	@ int	@ tmp162, tmp162
 3769 10cc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp164, tmp162
 3770              	@ armwave.c:459:             noise  = ((rand() & 0xffff) * noise_fraction);
 459:armwave.c     ****             noise *= noise;
 3771              		.loc 1 459 20 view .LVU1050
 3772 10d0 8C7A67EE 		vmul.f32	s15, s15, s24	@ noise, tmp164, noise_fraction
 3773              	.LVL296:
 460:armwave.c     ****             noise *= noise;
 3774              		.loc 1 460 13 is_stmt 1 view .LVU1051
 3775              	@ armwave.c:460:             noise *= noise;
 460:armwave.c     ****             noise *= noise;
 3776              		.loc 1 460 19 is_stmt 0 view .LVU1052
 3777 10d4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3778              	.LVL297:
 461:armwave.c     ****             noise *= noise;
 3779              		.loc 1 461 13 is_stmt 1 view .LVU1053
 3780              	@ armwave.c:461:             noise *= noise;
 461:armwave.c     ****             noise *= noise;
 3781              		.loc 1 461 19 is_stmt 0 view .LVU1054
 3782 10d8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3783              	.LVL298:
 462:armwave.c     **** 
 3784              		.loc 1 462 13 is_stmt 1 view .LVU1055
 3785              	@ armwave.c:462:             noise *= noise;
 462:armwave.c     **** 
 3786              		.loc 1 462 19 is_stmt 0 view .LVU1056
 3787 10dc A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3788              	.LVL299:
 464:armwave.c     ****                 noise = -noise;
 3789              		.loc 1 464 13 is_stmt 1 view .LVU1057
 3790              	@ armwave.c:464:             if((rand() & 0xffff) > 0x7fff)
 464:armwave.c     ****                 noise = -noise;
 3791              		.loc 1 464 17 is_stmt 0 view .LVU1058
 3792 10e0 FEFFFFEB 		bl	rand		@
 3793              	.LVL300:
 465:armwave.c     **** 
 3794              		.loc 1 465 17 is_stmt 1 view .LVU1059
 3795              	@ armwave.c:464:             if((rand() & 0xffff) > 0x7fff)
 464:armwave.c     ****                 noise = -noise;
 3796              		.loc 1 464 15 is_stmt 0 view .LVU1060
 3797 10e4 020910E3 		tst	r0, #32768	@,
 3798              	@ armwave.c:465:                 noise = -noise;
 465:armwave.c     **** 
 3799              		.loc 1 465 23 view .LVU1061
 3800 10e8 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3801              	.LVL301:
 467:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3802              		.loc 1 467 13 is_stmt 1 view .LVU1062
 468:armwave.c     **** 
 3803              		.loc 1 468 13 view .LVU1063
 3804              	@ armwave.c:468:             xnoise = (rand() & 0xffff) / 6553500.0f;
 468:armwave.c     **** 
 3805              		.loc 1 468 23 is_stmt 0 view .LVU1064
 3806 10ec FEFFFFEB 		bl	rand		@
 3807              	.LVL302:
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3808              		.loc 1 470 13 is_stmt 1 view .LVU1065
 3809              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3810              		.loc 1 470 29 is_stmt 0 view .LVU1066
 3811 10f0 904A07EE 		vmov	s15, r4	@ int	@ _72, _72
 3812 10f4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, _72
 3813 10f8 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp167, tmp166, tmp168
 3814              	@ armwave.c:468:             xnoise = (rand() & 0xffff) / 6553500.0f;
 468:armwave.c     **** 
 3815              		.loc 1 468 30 view .LVU1067
 3816 10fc 7000FFE6 		uxth	r0, r0	@ tmp171,
 3817              	.LVL303:
 3818              	@ armwave.c:468:             xnoise = (rand() & 0xffff) / 6553500.0f;
 468:armwave.c     **** 
 3819              		.loc 1 468 40 view .LVU1068
 3820 1100 100A07EE 		vmov	s14, r0	@ int	@ tmp171, tmp171
 3821 1104 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp173, tmp171
 3822              	@ armwave.c:468:             xnoise = (rand() & 0xffff) / 6553500.0f;
 468:armwave.c     **** 
 3823              		.loc 1 468 20 view .LVU1069
 3824 1108 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp173, tmp175
 3825              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3826              		.loc 1 470 60 view .LVU1070
 3827 110c 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp176, tmp167, tmp170
 3828              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3829              		.loc 1 470 18 view .LVU1071
 3830 1110 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp176
 3831 1114 FEFFFFEB 		bl	sin		@
 3832              	.LVL304:
 3833              		.loc 1 472 13 is_stmt 1 view .LVU1072
 3834              	@ armwave.c:467:             noise += 1.0f;
 467:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3835              		.loc 1 467 19 is_stmt 0 view .LVU1073
 3836 1118 0A7A7EEE 		vadd.f32	s15, s28, s20	@ noise, noise, tmp181
 3837              	@ armwave.c:472:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3838              		.loc 1 472 56 view .LVU1074
 3839 111c 226ADFED 		vldr.32	s13, .L271+32	@ tmp189,
 3840 1120 0030A0E3 		mov	r3, #0	@ iftmp.19_29,
 3841              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3842              		.loc 1 470 81 view .LVU1075
 3843 1124 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp182, noise
 3844              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3845              		.loc 1 470 70 view .LVU1076
 3846 1128 000B28EE 		vmul.f64	d0, d8, d0	@ tmp179, tmp194,
 3847              	.LVL305:
 3848              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3849              		.loc 1 470 81 view .LVU1077
 3850 112c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp183, tmp179, tmp182
 3851              	@ armwave.c:470:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 470:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3852              		.loc 1 470 15 view .LVU1078
 3853 1130 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp183
 3854              	@ armwave.c:472:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3855              		.loc 1 472 58 view .LVU1079
 3856 1134 497AF0EE 		vmov.f32	s15, s18	@ _23, tmp187
 3857 1138 297A47EE 		vmla.f32	s15, s14, s19	@ _23, v, tmp186
 3858 113c C07AF5EE 		vcmpe.f32	s15, #0	@ _23
 3859 1140 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3860 1144 050000DA 		ble	.L254		@,
 3861              	@ armwave.c:472:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3862              		.loc 1 472 56 discriminator 1 view .LVU1080
 3863 1148 E67AF4EE 		vcmpe.f32	s15, s13	@ _23, tmp189
 3864 114c FF30A0E3 		mov	r3, #255	@ iftmp.19_29,
 3865 1150 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3866 1154 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp191, _23
 3867 1158 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp191, %sfp
 3868 115c 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.19_29, %sfp
 3869              	.L254:
 3870              	@ armwave.c:472:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3871              		.loc 1 472 56 discriminator 12 view .LVU1081
 3872 1160 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.19_29, MEM[base: _61, offset: 0B]
 3873              	.LVL306:
 3874              	@ armwave.c:458:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 458:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3875              		.loc 1 458 9 discriminator 12 view .LVU1082
 3876 1164 060055E1 		cmp	r5, r6	@ ivtmp.149, ivtmp.156
 3877 1168 D3FFFF1A 		bne	.L257		@,
 3878 116c 026B85E2 		add	r6, r5, #2048	@ ivtmp.156, ivtmp.149,
 3879              	.LVL307:
 3880              	@ armwave.c:454:     for(w = 0; w < TEST_NWAVES; w++) {
 454:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3881              		.loc 1 454 5 discriminator 2 view .LVU1083
 3882 1170 0A0056E1 		cmp	r6, r10	@ ivtmp.156, _82
 3883              	@ armwave.c:454:     for(w = 0; w < TEST_NWAVES; w++) {
 454:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3884              		.loc 1 454 34 discriminator 2 view .LVU1084
 3885 1174 019089E2 		add	r9, r9, #1	@ w, w,
 3886              	.LVL308:
 454:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3887              		.loc 1 454 34 discriminator 2 view .LVU1085
 3888 1178 028B48E2 		sub	r8, r8, #2048	@ ivtmp.159, ivtmp.159,
 3889              	@ armwave.c:454:     for(w = 0; w < TEST_NWAVES; w++) {
 454:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3890              		.loc 1 454 5 discriminator 2 view .LVU1086
 3891 117c C4FFFF1A 		bne	.L258		@,
 3892              	@ armwave.c:475: }
 473:armwave.c     ****         }
 474:armwave.c     ****     }
 475:armwave.c     **** }
 3893              		.loc 1 475 1 view .LVU1087
 3894 1180 08D08DE2 		add	sp, sp, #8	@,,
 3895              		.cfi_def_cfa_offset 88
 3896              		@ sp needed	@
 3897 1184 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3898              		.cfi_restore 92
 3899              		.cfi_restore 93
 3900              		.cfi_restore 90
 3901              		.cfi_restore 91
 3902              		.cfi_restore 88
 3903              		.cfi_restore 89
 3904              		.cfi_restore 86
 3905              		.cfi_restore 87
 3906              		.cfi_restore 84
 3907              		.cfi_restore 85
 3908              		.cfi_restore 82
 3909              		.cfi_restore 83
 3910              		.cfi_restore 80
 3911              		.cfi_restore 81
 3912              		.cfi_def_cfa_offset 32
 3913              	.LVL309:
 3914              		.loc 1 475 1 view .LVU1088
 3915 1188 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3916              	.LVL310:
 3917              	.L272:
 3918              		.loc 1 475 1 view .LVU1089
 3919              		.align	2
 3920              	.L271:
 3921 118c 0000803C 		.word	1015021568
 3922 1190 0000003F 		.word	1056964608
 3923 1194 C3F5C840 		.word	1086911939
 3924 1198 0000003A 		.word	973078528
 3925 119c 38FFC74A 		.word	1254620984
 3926 11a0 0000803F 		.word	1065353216
 3927 11a4 0000FE42 		.word	1123942400
 3928 11a8 00000043 		.word	1124073472
 3929 11ac 00007F43 		.word	1132396544
 3930 11b0 00000000 		.word	test_wave_buffer
 3931              		.cfi_endproc
 3932              	.LFE75:
 3934              		.align	2
 3935              		.global	armwave_test_create_square
 3936              		.syntax unified
 3937              		.arm
 3938              		.fpu vfp
 3940              	armwave_test_create_square:
 3941              	.LVL311:
 3942              	.LFB76:
 476:armwave.c     **** 
 477:armwave.c     **** /*
 478:armwave.c     ****  * Make a test square waveform.
 479:armwave.c     ****  *
 480:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 481:armwave.c     ****  */
 482:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 483:armwave.c     **** {
 3943              		.loc 1 483 1 is_stmt 1 view -0
 3944              		.cfi_startproc
 3945              		@ args = 0, pretend = 0, frame = 8
 3946              		@ frame_needed = 0, uses_anonymous_args = 0
 484:armwave.c     ****     uint8_t v;
 3947              		.loc 1 484 5 view .LVU1091
 485:armwave.c     ****     float noise, xnoise;
 3948              		.loc 1 485 5 view .LVU1092
 486:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3949              		.loc 1 486 5 view .LVU1093
 487:armwave.c     ****     int w, x;
 3950              		.loc 1 487 5 view .LVU1094
 488:armwave.c     **** 
 489:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
 3951              		.loc 1 489 5 view .LVU1095
 3952              	@ armwave.c:483: {
 483:armwave.c     ****     uint8_t v;
 3953              		.loc 1 483 1 is_stmt 0 view .LVU1096
 3954 11b4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 3955              		.cfi_def_cfa_offset 28
 3956              		.cfi_offset 4, -28
 3957              		.cfi_offset 5, -24
 3958              		.cfi_offset 6, -20
 3959              		.cfi_offset 7, -16
 3960              		.cfi_offset 8, -12
 3961              		.cfi_offset 9, -8
 3962              		.cfi_offset 14, -4
 3963 11b8 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3964              		.cfi_def_cfa_offset 68
 3965              		.cfi_offset 80, -68
 3966              		.cfi_offset 81, -64
 3967              		.cfi_offset 82, -60
 3968              		.cfi_offset 83, -56
 3969              		.cfi_offset 84, -52
 3970              		.cfi_offset 85, -48
 3971              		.cfi_offset 86, -44
 3972              		.cfi_offset 87, -40
 3973              		.cfi_offset 88, -36
 3974              		.cfi_offset 89, -32
 3975              	@ armwave.c:486:     float level = 0.8f, new_level = 0.8f;
 486:armwave.c     ****     int w, x;
 3976              		.loc 1 486 11 view .LVU1097
 3977 11bc 438ADFED 		vldr.32	s17, .L296	@ level,
 3978 11c0 2C819FE5 		ldr	r8, .L296+36	@ _62,
 3979              	@ armwave.c:483: {
 483:armwave.c     ****     uint8_t v;
 3980              		.loc 1 483 1 view .LVU1098
 3981 11c4 40AAB0EE 		vmov.f32	s20, s0	@ noise_fraction, noise_fraction
 3982 11c8 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.174, _62,
 3983              	@ armwave.c:504:                 new_level = 0.8f;
 490:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 493:armwave.c     ****             noise *= noise;
 494:armwave.c     ****             noise *= noise;
 495:armwave.c     **** 
 496:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 497:armwave.c     ****                 noise = -noise;
 498:armwave.c     **** 
 499:armwave.c     ****             //noise += 1.0f;
 500:armwave.c     **** 
 501:armwave.c     ****             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 502:armwave.c     ****                 new_level = 0.2f;
 503:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 504:armwave.c     ****                 new_level = 0.8f;
 3984              		.loc 1 504 27 view .LVU1099
 3985 11cc 68BAF0EE 		vmov.f32	s23, s17	@ new_level, level
 3986              	@ armwave.c:501:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 501:armwave.c     ****                 new_level = 0.2f;
 3987              		.loc 1 501 15 view .LVU1100
 3988 11d0 3F9ADFED 		vldr.32	s19, .L296+4	@ tmp144,
 3989              	@ armwave.c:506:                 new_level = 0.2f;
 505:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 506:armwave.c     ****                 new_level = 0.2f;
 3990              		.loc 1 506 27 view .LVU1101
 3991 11d4 3FAADFED 		vldr.32	s21, .L296+8	@ new_level,
 3992              	@ armwave.c:503:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 503:armwave.c     ****                 new_level = 0.8f;
 3993              		.loc 1 503 22 view .LVU1102
 3994 11d8 3FBA9FED 		vldr.32	s22, .L296+12	@ tmp161,
 3995 11dc 0F6086E2 		add	r6, r6, #15	@ ivtmp.174, ivtmp.174,
 3996              	@ armwave.c:483: {
 483:armwave.c     ****     uint8_t v;
 3997              		.loc 1 483 1 view .LVU1103
 3998 11e0 0CD04DE2 		sub	sp, sp, #12	@,,
 3999              		.cfi_def_cfa_offset 80
 4000 11e4 008068E2 		rsb	r8, r8, #0	@ ivtmp.177, _62
 4001 11e8 029886E2 		add	r9, r6, #131072	@ _68,,
 4002              	.LVL312:
 4003              	.L274:
 4004              	@ armwave.c:505:             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 505:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 4005              		.loc 1 505 22 view .LVU1104
 4006 11ec 3BCA9FED 		vldr.32	s24, .L296+16	@ tmp163,
 4007              	@ armwave.c:511:             level = ((level * 3) + new_level) * 0.25f;
 507:armwave.c     ****             } else {
 508:armwave.c     ****                 new_level = 0.8f;
 509:armwave.c     ****             }
 510:armwave.c     **** 
 511:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 4008              		.loc 1 511 29 view .LVU1105
 4009 11f0 3B9A9FED 		vldr.32	s18, .L296+20	@ tmp148,
 4010 11f4 025B46E2 		sub	r5, r6, #2048	@ ivtmp.167, ivtmp.174,
 4011 11f8 017088E2 		add	r7, r8, #1	@ tmp157, ivtmp.177,
 4012              	.LVL313:
 4013              	.L280:
 4014              	@ armwave.c:491:             noise  = ((rand() & 0xffff) * noise_fraction);
 491:armwave.c     ****             noise *= noise;
 4015              		.loc 1 491 24 view .LVU1106
 4016 11fc FEFFFFEB 		bl	rand		@
 4017              	.LVL314:
 4018 1200 054087E0 		add	r4, r7, r5	@ _58, tmp157, ivtmp.167
 4019              	.LVL315:
 491:armwave.c     ****             noise *= noise;
 4020              		.loc 1 491 13 is_stmt 1 view .LVU1107
 4021              	@ armwave.c:491:             noise  = ((rand() & 0xffff) * noise_fraction);
 491:armwave.c     ****             noise *= noise;
 4022              		.loc 1 491 31 is_stmt 0 view .LVU1108
 4023 1204 7000FFE6 		uxth	r0, r0	@ tmp140,
 4024              	@ armwave.c:491:             noise  = ((rand() & 0xffff) * noise_fraction);
 491:armwave.c     ****             noise *= noise;
 4025              		.loc 1 491 41 view .LVU1109
 4026 1208 900A07EE 		vmov	s15, r0	@ int	@ tmp140, tmp140
 4027 120c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp142, tmp140
 4028              	@ armwave.c:491:             noise  = ((rand() & 0xffff) * noise_fraction);
 491:armwave.c     ****             noise *= noise;
 4029              		.loc 1 491 20 view .LVU1110
 4030 1210 8A7A67EE 		vmul.f32	s15, s15, s20	@ noise, tmp142, noise_fraction
 4031              	.LVL316:
 492:armwave.c     ****             noise *= noise;
 4032              		.loc 1 492 13 is_stmt 1 view .LVU1111
 4033              	@ armwave.c:492:             noise *= noise;
 492:armwave.c     ****             noise *= noise;
 4034              		.loc 1 492 19 is_stmt 0 view .LVU1112
 4035 1214 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4036              	.LVL317:
 493:armwave.c     ****             noise *= noise;
 4037              		.loc 1 493 13 is_stmt 1 view .LVU1113
 4038              	@ armwave.c:493:             noise *= noise;
 493:armwave.c     ****             noise *= noise;
 4039              		.loc 1 493 19 is_stmt 0 view .LVU1114
 4040 1218 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4041              	.LVL318:
 494:armwave.c     **** 
 4042              		.loc 1 494 13 is_stmt 1 view .LVU1115
 4043              	@ armwave.c:494:             noise *= noise;
 494:armwave.c     **** 
 4044              		.loc 1 494 19 is_stmt 0 view .LVU1116
 4045 121c A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 4046              	.LVL319:
 496:armwave.c     ****                 noise = -noise;
 4047              		.loc 1 496 13 is_stmt 1 view .LVU1117
 4048              	@ armwave.c:496:             if((rand() & 0xff) > 0x7f)
 496:armwave.c     ****                 noise = -noise;
 4049              		.loc 1 496 17 is_stmt 0 view .LVU1118
 4050 1220 FEFFFFEB 		bl	rand		@
 4051              	.LVL320:
 4052              	@ armwave.c:501:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 501:armwave.c     ****                 new_level = 0.2f;
 4053              		.loc 1 501 18 view .LVU1119
 4054 1224 904A07EE 		vmov	s15, r4	@ int	@ _58, _58
 4055 1228 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _6, _58
 4056              	@ armwave.c:501:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 501:armwave.c     ****                 new_level = 0.2f;
 4057              		.loc 1 501 15 view .LVU1120
 4058 122c E97AF4EE 		vcmpe.f32	s15, s19	@ _6, tmp144
 4059              	@ armwave.c:496:             if((rand() & 0xff) > 0x7f)
 496:armwave.c     ****                 noise = -noise;
 4060              		.loc 1 496 15 view .LVU1121
 4061 1230 800010E3 		tst	r0, #128	@,
 497:armwave.c     **** 
 4062              		.loc 1 497 17 is_stmt 1 view .LVU1122
 4063              	@ armwave.c:497:                 noise = -noise;
 497:armwave.c     **** 
 4064              		.loc 1 497 23 is_stmt 0 view .LVU1123
 4065 1234 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 4066              	.LVL321:
 501:armwave.c     ****                 new_level = 0.2f;
 4067              		.loc 1 501 13 is_stmt 1 view .LVU1124
 4068              	@ armwave.c:501:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 501:armwave.c     ****                 new_level = 0.2f;
 4069              		.loc 1 501 15 is_stmt 0 view .LVU1125
 4070 1238 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4071              	@ armwave.c:506:                 new_level = 0.2f;
 506:armwave.c     ****             } else {
 4072              		.loc 1 506 27 view .LVU1126
 4073 123c 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 4074              	@ armwave.c:501:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 501:armwave.c     ****                 new_level = 0.2f;
 4075              		.loc 1 501 15 view .LVU1127
 4076 1240 070000CA 		bgt	.L276		@,
 503:armwave.c     ****                 new_level = 0.8f;
 4077              		.loc 1 503 20 is_stmt 1 view .LVU1128
 4078              	@ armwave.c:503:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 503:armwave.c     ****                 new_level = 0.8f;
 4079              		.loc 1 503 22 is_stmt 0 view .LVU1129
 4080 1244 CB7AF4EE 		vcmpe.f32	s15, s22	@ _6, tmp161
 4081 1248 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4082              	@ armwave.c:504:                 new_level = 0.8f;
 504:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 4083              		.loc 1 504 27 view .LVU1130
 4084 124c 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 4085              	@ armwave.c:503:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 503:armwave.c     ****                 new_level = 0.8f;
 4086              		.loc 1 503 22 view .LVU1131
 4087 1250 030000CA 		bgt	.L276		@,
 505:armwave.c     ****                 new_level = 0.2f;
 4088              		.loc 1 505 20 is_stmt 1 view .LVU1132
 4089              	@ armwave.c:504:                 new_level = 0.8f;
 504:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 4090              		.loc 1 504 27 is_stmt 0 view .LVU1133
 4091 1254 CC7AF4EE 		vcmpe.f32	s15, s24	@ _6, tmp163
 4092 1258 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4093 125c 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 4094 1260 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4095              	.L276:
 4096              	.LVL322:
 4097              		.loc 1 511 13 is_stmt 1 view .LVU1134
 4098              	@ armwave.c:511:             level = ((level * 3) + new_level) * 0.25f;
 4099              		.loc 1 511 34 is_stmt 0 view .LVU1135
 4100 1264 897A48EE 		vmla.f32	s15, s17, s18	@ _9, level, tmp148
 4101              	.LVL323:
 4102              	@ armwave.c:511:             level = ((level * 3) + new_level) * 0.25f;
 4103              		.loc 1 511 19 view .LVU1136
 4104 1268 1E8ADFED 		vldr.32	s17, .L296+24	@ tmp149,
 4105              	.LVL324:
 4106              		.loc 1 511 19 view .LVU1137
 4107 126c A88A67EE 		vmul.f32	s17, s15, s17	@ level, _9, tmp149
 4108              	.LVL325:
 512:armwave.c     **** 
 513:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4109              		.loc 1 513 13 is_stmt 1 view .LVU1138
 4110              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4111              		.loc 1 513 27 is_stmt 0 view .LVU1139
 4112 1270 287A78EE 		vadd.f32	s15, s16, s17	@ _10, noise, level
 4113 1274 C07AF5EE 		vcmpe.f32	s15, #0	@ _10
 4114 1278 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4115              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4116              		.loc 1 513 17 view .LVU1140
 4117 127c 0030A0D3 		movle	r3, #0	@ iftmp.22_20,
 4118              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4119              		.loc 1 513 27 view .LVU1141
 4120 1280 080000DA 		ble	.L277		@,
 4121              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4122              		.loc 1 513 17 discriminator 1 view .LVU1142
 4123 1284 187A9FED 		vldr.32	s14, .L296+28	@ tmp151,
 4124 1288 C77AF4EE 		vcmpe.f32	s15, s14	@ _10, tmp151
 4125 128c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4126              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4127              		.loc 1 513 60 discriminator 1 view .LVU1143
 4128 1290 167A9F4D 		vldrmi.32	s14, .L296+32	@ tmp153,
 4129              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4130              		.loc 1 513 17 discriminator 1 view .LVU1144
 4131 1294 FF30A053 		movpl	r3, #255	@ iftmp.22_20,
 4132              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4133              		.loc 1 513 60 discriminator 1 view .LVU1145
 4134 1298 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp152, _10, tmp153
 4135              	@ armwave.c:513:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4136              		.loc 1 513 17 discriminator 1 view .LVU1146
 4137 129c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp155, tmp152
 4138 12a0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp155, %sfp
 4139 12a4 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_20, %sfp
 4140              	.L277:
 4141              	.LVL326:
 514:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = v;
 4142              		.loc 1 514 13 is_stmt 1 discriminator 12 view .LVU1147
 4143              	@ armwave.c:514:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = v;
 4144              		.loc 1 514 56 is_stmt 0 discriminator 12 view .LVU1148
 4145 12a8 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.22_20, MEM[base: _43, offset: 0B]
 4146              	.LVL327:
 4147              	@ armwave.c:490:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 490:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4148              		.loc 1 490 9 discriminator 12 view .LVU1149
 4149 12ac 060055E1 		cmp	r5, r6	@ ivtmp.167, ivtmp.174
 4150 12b0 D1FFFF1A 		bne	.L280		@,
 490:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4151              		.loc 1 490 9 discriminator 12 view .LVU1150
 4152 12b4 026B85E2 		add	r6, r5, #2048	@ ivtmp.174, ivtmp.167,
 4153              	.LVL328:
 4154              	@ armwave.c:489:     for(w = 0; w < TEST_NWAVES; w++) {
 489:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 4155              		.loc 1 489 5 discriminator 2 view .LVU1151
 4156 12b8 090056E1 		cmp	r6, r9	@ ivtmp.174, _68
 4157 12bc 028B48E2 		sub	r8, r8, #2048	@ ivtmp.177, ivtmp.177,
 4158 12c0 C9FFFF1A 		bne	.L274		@,
 4159              	@ armwave.c:517: }
 515:armwave.c     ****         }
 516:armwave.c     ****     }
 517:armwave.c     **** }
 4160              		.loc 1 517 1 view .LVU1152
 4161 12c4 0CD08DE2 		add	sp, sp, #12	@,,
 4162              		.cfi_def_cfa_offset 68
 4163              		@ sp needed	@
 4164 12c8 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4165              		.cfi_restore 88
 4166              		.cfi_restore 89
 4167              		.cfi_restore 86
 4168              		.cfi_restore 87
 4169              		.cfi_restore 84
 4170              		.cfi_restore 85
 4171              		.cfi_restore 82
 4172              		.cfi_restore 83
 4173              		.cfi_restore 80
 4174              		.cfi_restore 81
 4175              		.cfi_def_cfa_offset 28
 4176              	.LVL329:
 4177              		.loc 1 517 1 view .LVU1153
 4178 12cc F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 4179              	.L297:
 4180              		.loc 1 517 1 view .LVU1154
 4181              		.align	2
 4182              	.L296:
 4183 12d0 CDCC4C3F 		.word	1061997773
 4184 12d4 0000C044 		.word	1153433600
 4185 12d8 CDCC4C3E 		.word	1045220557
 4186 12dc 00008044 		.word	1149239296
 4187 12e0 00000044 		.word	1140850688
 4188 12e4 00004040 		.word	1077936128
 4189 12e8 0000803E 		.word	1048576000
 4190 12ec 0000803F 		.word	1065353216
 4191 12f0 00007F43 		.word	1132396544
 4192 12f4 00000000 		.word	test_wave_buffer
 4193              		.cfi_endproc
 4194              	.LFE76:
 4196              		.align	2
 4197              		.global	armwave_cleanup
 4198              		.syntax unified
 4199              		.arm
 4200              		.fpu vfp
 4202              	armwave_cleanup:
 4203              	.LFB77:
 518:armwave.c     **** 
 519:armwave.c     **** /*
 520:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 521:armwave.c     ****  */
 522:armwave.c     **** void armwave_cleanup()
 523:armwave.c     **** {
 4204              		.loc 1 523 1 is_stmt 1 view -0
 4205              		.cfi_startproc
 4206              		@ args = 0, pretend = 0, frame = 0
 4207              		@ frame_needed = 0, uses_anonymous_args = 0
 524:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4208              		.loc 1 524 5 view .LVU1156
 4209              	@ armwave.c:523: {
 523:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4210              		.loc 1 523 1 is_stmt 0 view .LVU1157
 4211 12f8 10402DE9 		push	{r4, lr}	@
 4212              		.cfi_def_cfa_offset 8
 4213              		.cfi_offset 4, -8
 4214              		.cfi_offset 14, -4
 4215              	@ armwave.c:524:     free(g_armwave_state.out_pixbuf);
 4216              		.loc 1 524 25 view .LVU1158
 4217 12fc 28409FE5 		ldr	r4, .L300	@ tmp113,
 4218              	@ armwave.c:524:     free(g_armwave_state.out_pixbuf);
 4219              		.loc 1 524 5 view .LVU1159
 4220 1300 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.out_pixbuf
 4221 1304 FEFFFFEB 		bl	free		@
 4222              	.LVL330:
 525:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4223              		.loc 1 525 5 is_stmt 1 view .LVU1160
 4224 1308 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4225 130c FEFFFFEB 		bl	free		@
 4226              	.LVL331:
 526:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4227              		.loc 1 526 5 view .LVU1161
 4228 1310 6C0094E5 		ldr	r0, [r4, #108]	@, g_armwave_state.xcoord_to_xpixel
 4229 1314 FEFFFFEB 		bl	free		@
 4230              	.LVL332:
 527:armwave.c     **** 
 528:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4231              		.loc 1 528 5 view .LVU1162
 4232              	@ armwave.c:528:     g_armwave_state.out_pixbuf = NULL;
 4233              		.loc 1 528 32 is_stmt 0 view .LVU1163
 4234 1318 0030A0E3 		mov	r3, #0	@ tmp120,
 4235 131c 503084E5 		str	r3, [r4, #80]	@ tmp120, g_armwave_state.out_pixbuf
 529:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4236              		.loc 1 529 5 is_stmt 1 view .LVU1164
 4237              	@ armwave.c:529:     g_armwave_state.ch1_buffer = NULL;
 4238              		.loc 1 529 32 is_stmt 0 view .LVU1165
 4239 1320 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 530:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4240              		.loc 1 530 5 is_stmt 1 view .LVU1166
 4241              	@ armwave.c:530:     g_armwave_state.xcoord_to_xpixel = NULL;
 4242              		.loc 1 530 38 is_stmt 0 view .LVU1167
 4243 1324 6C3084E5 		str	r3, [r4, #108]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 4244              	@ armwave.c:531: }
 531:armwave.c     **** }
 4245              		.loc 1 531 1 view .LVU1168
 4246 1328 1080BDE8 		pop	{r4, pc}	@
 4247              	.L301:
 4248              		.align	2
 4249              	.L300:
 4250 132c 00000000 		.word	g_armwave_state
 4251              		.cfi_endproc
 4252              	.LFE77:
 4254              		.comm	gamma_table,256,4
 4255              		.comm	test_wave_buffer,131072,4
 4256              		.comm	g_armwave_state,112,4
 4257              		.section	.rodata
 4258              		.align	2
 4259              		.set	.LANCHOR0,. + 0
 4262              	__PRETTY_FUNCTION__.17013:
 4263 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4263      6176655F 
 4263      66696C6C 
 4263      5F706978 
 4263      6275665F 
 4266              	__PRETTY_FUNCTION__.17044:
 4267 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4267      6176655F 
 4267      66696C6C 
 4267      5F706978 
 4267      6275665F 
 4268 0033 00       		.space	1
 4271              	__PRETTY_FUNCTION__.17066:
 4272 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4272      6176655F 
 4272      73657475 
 4272      705F7265 
 4272      6E646572 
 4273 0049 000000   		.space	3
 4276              	__PRETTY_FUNCTION__.17073:
 4277 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4277      6176655F 
 4277      7365745F 
 4277      77617665 
 4277      5F706F69 
 4278 0065 000000   		.space	3
 4281              	__PRETTY_FUNCTION__.17079:
 4282 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4282      6176655F 
 4282      7365745F 
 4282      77617665 
 4282      5F706F69 
 4283 0085 000000   		.space	3
 4286              	__PRETTY_FUNCTION__.17128:
 4287 0088 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer\000"
 4287      6176655F 
 4287      66696C6C 
 4287      5F706978 
 4287      6275665F 
 4288              		.section	.rodata.str1.4,"aMS",%progbits,1
 4289              		.align	2
 4290              	.LC0:
 4291 0000 76302E30 		.ascii	"v0.0.1\000"
 4291      2E3100
 4292 0007 00       		.space	1
 4293              	.LC1:
 4294 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4294      61766520 
 4294      76657273 
 4294      696F6E3A 
 4294      2025730A 
 4295 001d 000000   		.space	3
 4296              	.LC2:
 4297 0020 61726D77 		.ascii	"armwave.c\000"
 4297      6176652E 
 4297      6300
 4298 002a 0000     		.space	2
 4299              	.LC3:
 4300 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4300      62756666 
 4300      65722021 
 4300      3D204E55 
 4300      4C4C00
 4301 003f 00       		.space	1
 4302              	.LC4:
 4303 0040 73746172 		.ascii	"start_point < end_point\000"
 4303      745F706F 
 4303      696E7420 
 4303      3C20656E 
 4303      645F706F 
 4304              	.LC5:
 4305 0058 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4305      65745F68 
 4305      65696768 
 4305      74203D3D 
 4305      20323536 
 4306 008b 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4306      68656967 
 4306      6874203D 
 4306      3D203130 
 4306      3234207C 
 4307 00b7 00       		.space	1
 4308              	.LC6:
 4309 00b8 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4309      7566665F 
 4309      73697A65 
 4309      3D25640A 
 4309      00
 4310 00c9 000000   		.space	3
 4311              	.LC7:
 4312 00cc 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4312      6D776176 
 4312      655F7374 
 4312      6174652E 
 4312      6368315F 
 4313 00ef 00       		.space	1
 4314              	.LC8:
 4315 00f0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4315      6D776176 
 4315      655F7374 
 4315      6174652E 
 4315      78636F6F 
 4316 0119 000000   		.space	3
 4317              	.LC9:
 4318 011c 77617665 		.ascii	"wave_buffer != NULL\000"
 4318      5F627566 
 4318      66657220 
 4318      213D204E 
 4318      554C4C00 
 4319              	.LC10:
 4320 0130 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4320      5F627566 
 4320      6665725F 
 4320      70747220 
 4320      213D2030 
 4321 0145 000000   		.space	3
 4322              	.LC11:
 4323 0148 776200   		.ascii	"wb\000"
 4324 014b 00       		.space	1
 4325              	.LC12:
 4326 014c 50330A00 		.ascii	"P3\012\000"
 4327              	.LC13:
 4328 0150 25642025 		.ascii	"%d %d\012\000"
 4328      640A00
 4329 0157 00       		.space	1
 4330              	.LC14:
 4331 0158 3235350A 		.ascii	"255\012\000"
 4331      00
 4332 015d 000000   		.space	3
 4333              	.LC15:
 4334 0160 25336420 		.ascii	"%3d %3d %3d\012\000"
 4334      25336420 
 4334      2533640A 
 4334      00
 4335 016d 000000   		.space	3
 4336              	.LC16:
 4337 0170 62756666 		.ascii	"buffer=0x%08x\012\000"
 4337      65723D30 
 4337      78253038 
 4337      780A00
 4338 017f 00       		.space	1
 4339              	.LC17:
 4340 0180 62756666 		.ascii	"buffer != NULL\000"
 4340      65722021 
 4340      3D204E55 
 4340      4C4C00
 4341 018f 00       		.space	1
 4342              	.LC18:
 4343 0190 62756666 		.ascii	"buffer is not null\000"
 4343      65722069 
 4343      73206E6F 
 4343      74206E75 
 4343      6C6C00
 4344 01a3 00       		.space	1
 4345              	.LC19:
 4346 01a4 50794F62 		.ascii	"PyObject_GetBuffer(buf_obj, buffer, PyBUF_SIMPLE | "
 4346      6A656374 
 4346      5F476574 
 4346      42756666 
 4346      65722862 
 4347 01d7 50794255 		.ascii	"PyBUF_WRITABLE) != 0\000"
 4347      465F5752 
 4347      49544142 
 4347      4C452920 
 4347      213D2030 
 4348              	.LC20:
 4349 01ec 50794F62 		.ascii	"PyObject_GetBuffer did not trigger assert: buffer->"
 4349      6A656374 
 4349      5F476574 
 4349      42756666 
 4349      65722064 
 4350 021f 6275663D 		.ascii	"buf=0x%08x, buffer->obj=0x%08x, buffer->len=%d\012\000"
 4350      30782530 
 4350      38782C20 
 4350      62756666 
 4350      65722D3E 
 4351 024f 00       		.space	1
 4352              	.LC21:
 4353 0250 62756666 		.ascii	"buffer fill done\000"
 4353      65722066 
 4353      696C6C20 
 4353      646F6E65 
 4353      00
 4354 0261 000000   		.space	3
 4355              	.LC22:
 4356 0264 62756666 		.ascii	"buffer released from reality\000"
 4356      65722072 
 4356      656C6561 
 4356      73656420 
 4356      66726F6D 
 4357              		.text
 4358              	.Letext0:
 4359              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4360              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4361              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4362              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4363              		.file 6 "/usr/include/stdio.h"
 4364              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4365              		.file 8 "/usr/include/errno.h"
 4366              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4367              		.file 10 "/usr/include/unistd.h"
 4368              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4369              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4370              		.file 13 "/usr/local/include/python3.8/pyport.h"
 4371              		.file 14 "/usr/include/math.h"
 4372              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4373              		.file 16 "/usr/include/time.h"
 4374              		.file 17 "/usr/local/include/python3.8/pymem.h"
 4375              		.file 18 "/usr/local/include/python3.8/object.h"
 4376              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4377              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4378              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4379              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4380              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4381              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4382              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4383              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4384              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4385              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4386              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4387              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4388              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4389              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4390              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4391              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4392              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4393              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4394              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4395              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4396              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4397              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4398              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4399              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4400              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4401              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4402              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4403              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4404              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4405              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4406              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4407              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4408              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4409              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4410              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4411              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4412              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4413              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4414              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4415              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4416              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4417              		.file 60 "/usr/local/include/python3.8/context.h"
 4418              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4419              		.file 62 "/usr/local/include/python3.8/code.h"
 4420              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4421              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4422              		.file 65 "/usr/local/include/python3.8/import.h"
 4423              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4424              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4425              		.file 68 "armwave.h"
 4426              		.file 69 "/usr/include/stdlib.h"
 4427              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4428              		.file 71 "/usr/include/assert.h"
 4429              		.file 72 "<built-in>"
 4430              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
