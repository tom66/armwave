   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB71:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)		__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)		__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 143:armwave.c     ****             	word >>= 8;
 144:armwave.c     ****     		}
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 156 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 167:armwave.c     ****     assert((target_height % 256) == 0);
 168:armwave.c     **** 
 169:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 170:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 170 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 F4409FE5 		ldr	r4, .L12	@ tmp171,
 107 000c F4309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 171:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 172:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 172 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 173:armwave.c     ****     g_armwave_state.waves = waves;
 174:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 175:armwave.c     ****     g_armwave_state.target_width = target_width;
 176:armwave.c     ****     g_armwave_state.target_height = target_height;
 177:armwave.c     **** 
 178:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 179:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 180:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 181:armwave.c     ****     g_armwave_state.slice_height = 64;  
 182:armwave.c     **** 
 183:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 183 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 171 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 118              		.loc 1 164 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 120              		.loc 1 167 5 is_stmt 1 view .LVU12
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 170 5 view .LVU13
 122              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 174 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 173 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 183 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 171 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 170 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 171 5 is_stmt 1 view .LVU19
 172:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 172 5 view .LVU20
 139              	@ armwave.c:176:     g_armwave_state.target_height = target_height;
 176:armwave.c     **** 
 140              		.loc 1 176 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 172:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 172 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 173 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:175:     g_armwave_state.target_width = target_width;
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 175 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 173 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 174 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 154              		.loc 1 181 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 174 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 175 5 is_stmt 1 view .LVU29
 176:armwave.c     **** 
 160              		.loc 1 176 5 view .LVU30
 181:armwave.c     **** 
 161              		.loc 1 181 5 view .LVU31
 162              		.loc 1 183 5 view .LVU32
 163              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 183 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 184:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 184 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 185:armwave.c     **** 
 186:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 186 5 view .LVU35
 172              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 186 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 179              		.loc 1 187 33 view .LVU37
 180 0064 A0209FE5 		ldr	r2, .L12+8	@ tmp149,
 181              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 189:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182              		.loc 1 189 33 view .LVU38
 183 0068 FA30A0E3 		mov	r3, #250	@ tmp152,
 184              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 185              		.loc 1 187 33 view .LVU39
 186 006c 402084E5 		str	r2, [r4, #64]	@ tmp149, MEM[(short int *)&g_armwave_state + 64B]
 187              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188              		.loc 1 189 33 view .LVU40
 189 0070 B434C4E1 		strh	r3, [r4, #68]	@ movhi	@ tmp152, g_armwave_state.ch1_color.b
 190              	@ armwave.c:191:     assert(g_armwave_state.ch1_buffer != NULL);
 190:armwave.c     **** 
 191:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 191              		.loc 1 191 5 view .LVU41
 192 0074 000050E3 		cmp	r0, #0	@ tmp146,
 193              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 186 32 view .LVU42
 195 0078 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 196              		.loc 1 187 5 is_stmt 1 view .LVU43
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 188 5 view .LVU44
 189:armwave.c     **** 
 198              		.loc 1 189 5 view .LVU45
 199              		.loc 1 191 5 view .LVU46
 200 007c 1600000A 		beq	.L10		@,
 192:armwave.c     **** 
 193:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 194:armwave.c     ****     length = end_point - start_point;
 201              		.loc 1 194 5 view .LVU47
 202              	.LVL3:
 195:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 203              		.loc 1 195 5 view .LVU48
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 204              		.loc 1 196 5 view .LVU49
 205              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 206              		.loc 1 196 60 is_stmt 0 view .LVU50
 207 0080 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp173, g_armwave_state.slice_height
 208              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 209              		.loc 1 197 40 view .LVU51
 210 0084 010AA0E3 		mov	r0, #4096	@,
 211              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 212              		.loc 1 196 60 view .LVU52
 213 0088 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp158, tmp173
 214              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 215              		.loc 1 196 41 view .LVU53
 216 008c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp160, tmp158
 217 0090 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp160, g_armwave_state.slice_record_height
 218              		.loc 1 197 5 is_stmt 1 view .LVU54
 219              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 220              		.loc 1 197 40 is_stmt 0 view .LVU55
 221 0094 FEFFFFEB 		bl	malloc		@
 222              	.LVL4:
 223              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 198:armwave.c     **** 
 199:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 224              		.loc 1 199 5 view .LVU56
 225 0098 000050E3 		cmp	r0, #0	@ tmp161,
 226              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 227              		.loc 1 197 38 view .LVU57
 228 009c 580084E5 		str	r0, [r4, #88]	@ tmp161, g_armwave_state.xcoord_to_xpixel
 229              		.loc 1 199 5 is_stmt 1 view .LVU58
 230              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 200:armwave.c     **** 
 201:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 231              		.loc 1 201 12 is_stmt 0 view .LVU59
 232 00a0 0030A013 		movne	r3, #0	@ xx,
 233 00a4 02004012 		subne	r0, r0, #2	@ ivtmp.23, tmp161,
 234              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 199:armwave.c     **** 
 235              		.loc 1 199 5 view .LVU60
 236 00a8 1000000A 		beq	.L11		@,
 237              	.L5:
 238              	.LVL5:
 202:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 239              		.loc 1 202 9 is_stmt 1 view .LVU61
 240              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 241              		.loc 1 202 74 is_stmt 0 view .LVU62
 242 00ac 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 243              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 244              		.loc 1 201 32 view .LVU63
 245 00b0 013083E2 		add	r3, r3, #1	@ xx, xx,
 246              	.LVL6:
 247              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 201 5 view .LVU64
 249 00b4 020B53E3 		cmp	r3, #2048	@ xx,
 250              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 251              		.loc 1 202 74 view .LVU65
 252 00b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, xx
 253              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 202 46 view .LVU66
 255 00bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp167, tmp166
 256 00c0 902A17EE 		vmov	r2, s15	@ int	@ tmp167, tmp167
 257 00c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp167, MEM[base: _20, offset: 0B]
 258              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 201 5 view .LVU67
 260 00c8 F7FFFF1A 		bne	.L5		@,
 203:armwave.c     **** 
 204:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 205:armwave.c     ****     }
 206:armwave.c     **** 
 207:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 261              		.loc 1 207 5 is_stmt 1 view .LVU68
 262              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 263              		.loc 1 207 34 is_stmt 0 view .LVU69
 264 00cc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 265 00d0 FEFFFFEB 		bl	malloc		@
 266              	.LVL7:
 267              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 268              		.loc 1 207 32 view .LVU70
 269 00d4 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 270              	@ armwave.c:208: }
 208:armwave.c     **** }
 271              		.loc 1 208 1 view .LVU71
 272 00d8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 273              	.LVL8:
 274              	.L10:
 191:armwave.c     **** 
 275              		.loc 1 191 5 is_stmt 1 view .LVU72
 276 00dc 2C309FE5 		ldr	r3, .L12+12	@,
 277 00e0 BF20A0E3 		mov	r2, #191	@,
 278 00e4 28109FE5 		ldr	r1, .L12+16	@,
 279 00e8 28009FE5 		ldr	r0, .L12+20	@,
 280 00ec FEFFFFEB 		bl	__assert_fail		@
 281              	.LVL9:
 282              	.L11:
 199:armwave.c     **** 
 283              		.loc 1 199 5 view .LVU73
 284 00f0 18309FE5 		ldr	r3, .L12+12	@,
 285 00f4 C720A0E3 		mov	r2, #199	@,
 286 00f8 14109FE5 		ldr	r1, .L12+16	@,
 287 00fc 18009FE5 		ldr	r0, .L12+24	@,
 288 0100 FEFFFFEB 		bl	__assert_fail		@
 289              	.LVL10:
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 0104 00000000 		.word	g_armwave_state
 294 0108 00000000 		.word	test_wave_buffer
 295 010c F609F406 		.word	116656630
 296 0110 00000000 		.word	.LANCHOR0
 297 0114 00000000 		.word	.LC0
 298 0118 0C000000 		.word	.LC1
 299 011c 30000000 		.word	.LC2
 300              		.cfi_endproc
 301              	.LFE71:
 303              		.align	2
 304              		.global	test_create_waveform
 305              		.syntax unified
 306              		.arm
 307              		.fpu vfp
 309              	test_create_waveform:
 310              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 311              		.loc 1 51 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 315              		.loc 1 52 5 view .LVU75
  53:armwave.c     **** 
 316              		.loc 1 53 5 view .LVU76
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 317              		.loc 1 55 5 view .LVU77
 318              	.LVL11:
 319              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 320              		.loc 1 51 1 is_stmt 0 view .LVU78
 321 0120 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 322              		.cfi_def_cfa_offset 36
 323              		.cfi_offset 4, -36
 324              		.cfi_offset 5, -32
 325              		.cfi_offset 6, -28
 326              		.cfi_offset 7, -24
 327              		.cfi_offset 8, -20
 328              		.cfi_offset 9, -16
 329              		.cfi_offset 10, -12
 330              		.cfi_offset 11, -8
 331              		.cfi_offset 14, -4
 332 0124 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 333              		.cfi_def_cfa_offset 84
 334              		.cfi_offset 80, -84
 335              		.cfi_offset 81, -80
 336              		.cfi_offset 82, -76
 337              		.cfi_offset 83, -72
 338              		.cfi_offset 84, -68
 339              		.cfi_offset 85, -64
 340              		.cfi_offset 86, -60
 341              		.cfi_offset 87, -56
 342              		.cfi_offset 88, -52
 343              		.cfi_offset 89, -48
 344              		.cfi_offset 90, -44
 345              		.cfi_offset 91, -40
 346 0128 5C819FE5 		ldr	r8, .L33+40	@ _75,
 347              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 348              		.loc 1 56 33 view .LVU79
 349 012c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 350 0130 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.39, _75,
 351              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 352              		.loc 1 56 13 view .LVU80
 353 0134 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 354              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 355              		.loc 1 60 20 view .LVU81
 356 0138 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 357              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 358              		.loc 1 71 29 view .LVU82
 359 013c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 360              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 361              		.loc 1 71 33 view .LVU83
 362 0140 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 363              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 364              		.loc 1 69 20 view .LVU84
 365 0144 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 366 0148 02B886E2 		add	fp, r6, #131072	@ _81,,
 367 014c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 368              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 369              		.loc 1 51 1 view .LVU85
 370 0150 0CD04DE2 		sub	sp, sp, #12	@,,
 371              		.cfi_def_cfa_offset 96
 372 0154 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 373 0158 0F6086E2 		add	r6, r6, #15	@ ivtmp.39, ivtmp.39,
 374 015c 008068E2 		rsb	r8, r8, #0	@ ivtmp.42, _75
 375              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 376              		.loc 1 55 11 view .LVU86
 377 0160 0090A0E3 		mov	r9, #0	@ w,
 378              	.LVL12:
 379              	.L20:
  56:armwave.c     ****         //mod = 1.0f;
 380              		.loc 1 56 9 is_stmt 1 view .LVU87
 381              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 382              		.loc 1 56 24 is_stmt 0 view .LVU88
 383 0164 909A07EE 		vmov	s15, r9	@ int	@ w, w
 384              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 56 48 view .LVU89
 386 0168 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 387              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 388              		.loc 1 56 13 view .LVU90
 389 016c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 390              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 391              		.loc 1 68 19 view .LVU91
 392 0170 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 393              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 394              		.loc 1 56 24 view .LVU92
 395 0174 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 396              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 397              		.loc 1 73 58 view .LVU93
 398 0178 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 399 017c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.32, ivtmp.39,
 400 0180 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.42,
 401              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 402              		.loc 1 56 33 view .LVU94
 403 0184 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 404              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 405              		.loc 1 56 13 view .LVU95
 406 0188 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 407              	.LVL13:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 408              		.loc 1 59 9 is_stmt 1 view .LVU96
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 409              		.loc 1 59 9 is_stmt 0 view .LVU97
 410 018c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 411              	.LVL14:
 412              	.L19:
 413              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 414              		.loc 1 60 24 view .LVU98
 415 0190 FEFFFFEB 		bl	rand		@
 416              	.LVL15:
 417 0194 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.32
 418              	.LVL16:
  60:armwave.c     ****             noise *= noise;
 419              		.loc 1 60 13 is_stmt 1 view .LVU99
 420              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 421              		.loc 1 60 31 is_stmt 0 view .LVU100
 422 0198 7000FFE6 		uxth	r0, r0	@ tmp163,
 423              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 424              		.loc 1 60 41 view .LVU101
 425 019c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 426 01a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 427              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 428              		.loc 1 60 20 view .LVU102
 429 01a4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 430              	.LVL17:
  61:armwave.c     ****             noise *= noise;
 431              		.loc 1 61 13 is_stmt 1 view .LVU103
 432              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 433              		.loc 1 61 19 is_stmt 0 view .LVU104
 434 01a8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 435              	.LVL18:
  62:armwave.c     ****             noise *= noise;
 436              		.loc 1 62 13 is_stmt 1 view .LVU105
 437              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 438              		.loc 1 62 19 is_stmt 0 view .LVU106
 439 01ac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL19:
  63:armwave.c     **** 
 441              		.loc 1 63 13 is_stmt 1 view .LVU107
 442              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 443              		.loc 1 63 19 is_stmt 0 view .LVU108
 444 01b0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 445              	.LVL20:
  65:armwave.c     ****                 noise = -noise;
 446              		.loc 1 65 13 is_stmt 1 view .LVU109
 447              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 448              		.loc 1 65 17 is_stmt 0 view .LVU110
 449 01b4 FEFFFFEB 		bl	rand		@
 450              	.LVL21:
  66:armwave.c     **** 
 451              		.loc 1 66 17 is_stmt 1 view .LVU111
 452              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 453              		.loc 1 65 15 is_stmt 0 view .LVU112
 454 01b8 020910E3 		tst	r0, #32768	@,
 455              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 456              		.loc 1 66 23 view .LVU113
 457 01bc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 458              	.LVL22:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 459              		.loc 1 68 13 is_stmt 1 view .LVU114
  69:armwave.c     **** 
 460              		.loc 1 69 13 view .LVU115
 461              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 462              		.loc 1 69 23 is_stmt 0 view .LVU116
 463 01c0 FEFFFFEB 		bl	rand		@
 464              	.LVL23:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 465              		.loc 1 71 13 is_stmt 1 view .LVU117
 466              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 467              		.loc 1 71 29 is_stmt 0 view .LVU118
 468 01c4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 469 01c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 470 01cc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 471              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 472              		.loc 1 69 30 view .LVU119
 473 01d0 7000FFE6 		uxth	r0, r0	@ tmp173,
 474              	.LVL24:
 475              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 476              		.loc 1 69 40 view .LVU120
 477 01d4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 478 01d8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 479              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 480              		.loc 1 69 20 view .LVU121
 481 01dc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 482              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 483              		.loc 1 71 60 view .LVU122
 484 01e0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 485              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 486              		.loc 1 71 18 view .LVU123
 487 01e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 488 01e8 FEFFFFEB 		bl	sin		@
 489              	.LVL25:
  73:armwave.c     ****         }
 490              		.loc 1 73 13 is_stmt 1 view .LVU124
 491              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 492              		.loc 1 68 19 is_stmt 0 view .LVU125
 493 01ec 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 494              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 495              		.loc 1 73 58 view .LVU126
 496 01f0 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 497              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 498              		.loc 1 73 56 view .LVU127
 499 01f4 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 500 01f8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 501              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 502              		.loc 1 71 77 view .LVU128
 503 01fc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 504              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505              		.loc 1 71 70 view .LVU129
 506 0200 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 507              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 508              		.loc 1 71 77 view .LVU130
 509 0204 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 510              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 511              		.loc 1 71 15 view .LVU131
 512 0208 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 513              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 514              		.loc 1 73 58 view .LVU132
 515 020c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 516 0210 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 517 0214 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 518 0218 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 519 021c 050000DA 		ble	.L16		@,
 520              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 521              		.loc 1 73 56 discriminator 1 view .LVU133
 522 0220 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 523 0224 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 524 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 525 022c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 526 0230 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 527 0234 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 528              	.L16:
 529              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 530              		.loc 1 73 56 discriminator 12 view .LVU134
 531 0238 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 532              	.LVL26:
 533              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 534              		.loc 1 59 9 discriminator 12 view .LVU135
 535 023c 060055E1 		cmp	r5, r6	@ ivtmp.32, ivtmp.39
 536 0240 D2FFFF1A 		bne	.L19		@,
 537 0244 026B85E2 		add	r6, r5, #2048	@ ivtmp.39, ivtmp.32,
 538              	.LVL27:
 539              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 540              		.loc 1 55 5 discriminator 2 view .LVU136
 541 0248 0B0056E1 		cmp	r6, fp	@ ivtmp.39, _81
 542              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 543              		.loc 1 55 34 discriminator 2 view .LVU137
 544 024c 019089E2 		add	r9, r9, #1	@ w, w,
 545              	.LVL28:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 546              		.loc 1 55 34 discriminator 2 view .LVU138
 547 0250 028B48E2 		sub	r8, r8, #2048	@ ivtmp.42, ivtmp.42,
 548              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 549              		.loc 1 55 5 discriminator 2 view .LVU139
 550 0254 C2FFFF1A 		bne	.L20		@,
 551              	@ armwave.c:76: }
  76:armwave.c     **** 
 552              		.loc 1 76 1 view .LVU140
 553 0258 0CD08DE2 		add	sp, sp, #12	@,,
 554              		.cfi_def_cfa_offset 84
 555              		@ sp needed	@
 556 025c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 557              		.cfi_restore 90
 558              		.cfi_restore 91
 559              		.cfi_restore 88
 560              		.cfi_restore 89
 561              		.cfi_restore 86
 562              		.cfi_restore 87
 563              		.cfi_restore 84
 564              		.cfi_restore 85
 565              		.cfi_restore 82
 566              		.cfi_restore 83
 567              		.cfi_restore 80
 568              		.cfi_restore 81
 569              		.cfi_def_cfa_offset 36
 570              	.LVL29:
  76:armwave.c     **** 
 571              		.loc 1 76 1 view .LVU141
 572 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 573              	.LVL30:
 574              	.L34:
  76:armwave.c     **** 
 575              		.loc 1 76 1 view .LVU142
 576              		.align	2
 577              	.L33:
 578 0264 0000803C 		.word	1015021568
 579 0268 0000003F 		.word	1056964608
 580 026c 0050C347 		.word	1203982336
 581 0270 C3F5C840 		.word	1086911939
 582 0274 0000003A 		.word	973078528
 583 0278 38FFC74A 		.word	1254620984
 584 027c 0000803F 		.word	1065353216
 585 0280 0000FE42 		.word	1123942400
 586 0284 00000043 		.word	1124073472
 587 0288 00007F43 		.word	1132396544
 588 028c 00000000 		.word	test_wave_buffer
 589 0290 00000000 		.word	.LANCHOR1
 590              		.cfi_endproc
 591              	.LFE57:
 593              		.align	2
 594              		.global	test_create_gamma
 595              		.syntax unified
 596              		.arm
 597              		.fpu vfp
 599              	test_create_gamma:
 600              	.LFB58:
  82:armwave.c     ****     int i;
 601              		.loc 1 82 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 605              		.loc 1 83 5 view .LVU144
  84:armwave.c     **** 
 606              		.loc 1 84 5 view .LVU145
 607              	.LVL31:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 608              		.loc 1 86 5 view .LVU146
 609              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 610              		.loc 1 82 1 is_stmt 0 view .LVU147
 611 0294 70402DE9 		push	{r4, r5, r6, lr}	@
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 4, -16
 614              		.cfi_offset 5, -12
 615              		.cfi_offset 6, -8
 616              		.cfi_offset 14, -4
 617 0298 068B2DED 		vpush.64	{d8, d9, d10}	@
 618              		.cfi_def_cfa_offset 40
 619              		.cfi_offset 80, -40
 620              		.cfi_offset 81, -36
 621              		.cfi_offset 82, -32
 622              		.cfi_offset 83, -28
 623              		.cfi_offset 84, -24
 624              		.cfi_offset 85, -20
 625 029c 68409FE5 		ldr	r4, .L39+20	@ ivtmp.50,
 626              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 627              		.loc 1 87 32 view .LVU148
 628 02a0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 629              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 630              		.loc 1 87 26 view .LVU149
 631 02a4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 632              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 633              		.loc 1 87 49 view .LVU150
 634 02a8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 635 02ac 015084E2 		add	r5, r4, #1	@ _25, ivtmp.50,
 636 02b0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.50,
 637 02b4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 638              	.LVL32:
 639              	.L36:
  87:armwave.c     ****     }
 640              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU151
 641              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 642              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU152
 643 02b8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.50
 644              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 645              		.loc 1 87 26 discriminator 3 view .LVU153
 646 02bc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 647              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 648              		.loc 1 87 32 discriminator 3 view .LVU154
 649 02c0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 650 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 651 02c8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 652              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 653              		.loc 1 87 26 discriminator 3 view .LVU155
 654 02cc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 655 02d0 FEFFFFEB 		bl	pow		@
 656              	.LVL33:
 657              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 658              		.loc 1 87 49 discriminator 3 view .LVU156
 659 02d4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 660              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 661              		.loc 1 87 24 discriminator 3 view .LVU157
 662 02d8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 663 02dc 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 664 02e0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 665              	.LVL34:
 666              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 667              		.loc 1 86 5 discriminator 3 view .LVU158
 668 02e4 060054E1 		cmp	r4, r6	@ ivtmp.50, _26
 669 02e8 F2FFFF1A 		bne	.L36		@,
 670              	@ armwave.c:89: }
  89:armwave.c     **** 
 671              		.loc 1 89 1 view .LVU159
 672 02ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 16
 680 02f0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 681              	.LVL35:
 682              	.L40:
  89:armwave.c     **** 
 683              		.loc 1 89 1 view .LVU160
 684 02f4 0000A0E1 		.align	3
 685              	.L39:
 686 02f8 000000C0 		.word	-1073741824
 687 02fc CCCCEC3F 		.word	1072483532
 688 0300 00000000 		.word	0
 689 0304 00E06F40 		.word	1081073664
 690 0308 00007F43 		.word	1132396544
 691 030c FFFFFFFF 		.word	gamma_table-1
 692              		.cfi_endproc
 693              	.LFE58:
 695              		.align	2
 696              		.global	render_nonaa_to_buffer_1ch_slice
 697              		.syntax unified
 698              		.arm
 699              		.fpu vfp
 701              	render_nonaa_to_buffer_1ch_slice:
 702              	.LVL36:
 703              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 704              		.loc 1 99 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 708              		.loc 1 100 5 view .LVU162
 101:armwave.c     ****     uint8_t *wave_base;
 709              		.loc 1 101 5 view .LVU163
 102:armwave.c     ****     uint8_t *write_buffer_base;
 710              		.loc 1 102 5 view .LVU164
 103:armwave.c     ****     uint8_t *write_buffer;
 711              		.loc 1 103 5 view .LVU165
 104:armwave.c     ****     
 712              		.loc 1 104 5 view .LVU166
 106:armwave.c     **** 
 713              		.loc 1 106 5 view .LVU167
 714              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 715              		.loc 1 106 40 is_stmt 0 view .LVU168
 716 0310 F4209FE5 		ldr	r2, .L53	@ tmp257,
 717              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 718              		.loc 1 99 1 view .LVU169
 719 0314 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 720              		.cfi_def_cfa_offset 36
 721              		.cfi_offset 4, -36
 722              		.cfi_offset 5, -32
 723              		.cfi_offset 6, -28
 724              		.cfi_offset 7, -24
 725              		.cfi_offset 8, -20
 726              		.cfi_offset 9, -16
 727              		.cfi_offset 10, -12
 728              		.cfi_offset 11, -8
 729              		.cfi_offset 14, -4
 730              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 731              		.loc 1 109 5 view .LVU170
 732 0318 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 733              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 734              		.loc 1 106 63 view .LVU171
 735 031c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 736              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 737              		.loc 1 109 5 view .LVU172
 738 0320 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 739              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 740              		.loc 1 106 40 view .LVU173
 741 0324 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 742              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 743              		.loc 1 106 63 view .LVU174
 744 0328 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 745              	.LVL37:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 109 5 is_stmt 1 view .LVU175
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 747              		.loc 1 109 5 is_stmt 0 view .LVU176
 748 032c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 749 0330 000051E3 		cmp	r1, #0	@ height,
 750 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 751 0338 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 752              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 753              		.loc 1 109 11 view .LVU177
 754 033c 0080A0E3 		mov	r8, #0	@ w,
 755              	.LVL38:
 756              	.L45:
 110:armwave.c     **** 
 757              		.loc 1 110 9 is_stmt 1 view .LVU178
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 758              		.loc 1 120 9 view .LVU179
 759              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 760              		.loc 1 110 64 is_stmt 0 view .LVU180
 761 0340 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 762 0344 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 763              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 764              		.loc 1 120 16 view .LVU181
 765 0348 0000A0E3 		mov	r0, #0	@ yy,
 766 034c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 767 0350 037087E0 		add	r7, r7, r3	@ ivtmp.56, g_armwave_state.wave_buffer, tmp195
 768              	.LVL39:
 769              	.L44:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 770              		.loc 1 135 13 is_stmt 1 view .LVU182
 771              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 772              		.loc 1 135 18 is_stmt 0 view .LVU183
 773 0354 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 774              	.LVL40:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 775              		.loc 1 139 13 is_stmt 1 view .LVU184
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 776              		.loc 1 140 14 view .LVU185
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 777              		.loc 1 141 14 view .LVU186
 142:armwave.c     ****             	word >>= 8;
 778              		.loc 1 142 14 view .LVU187
 779              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 780              		.loc 1 140 42 is_stmt 0 view .LVU188
 781 0358 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 782              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 783              		.loc 1 141 60 view .LVU189
 784 035c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 785              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 786              		.loc 1 140 34 view .LVU190
 787 0360 73E0EFE6 		uxtb	lr, r3	@ word, word
 788              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 789              		.loc 1 143 19 view .LVU191
 790 0364 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 791              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 792              		.loc 1 142 44 view .LVU192
 793 0368 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 794              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 140 34 view .LVU193
 796 036c 7440EFE6 		uxtb	r4, r4	@ word, word
 797              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 798              		.loc 1 142 44 view .LVU194
 799 0370 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 800              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 801              		.loc 1 141 60 view .LVU195
 802 0374 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 803              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 804              		.loc 1 143 19 view .LVU196
 805 0378 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 806              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 807              		.loc 1 142 44 view .LVU197
 808 037c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 809              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 140 34 view .LVU198
 811 0380 7EE0EFE6 		uxtb	lr, lr	@ word, word
 812              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 813              		.loc 1 143 19 view .LVU199
 814 0384 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 815              	.LVL41:
 816              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 817              		.loc 1 142 44 view .LVU200
 818 0388 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 819 038c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 820              	.LVL42:
 143:armwave.c     ****     		}
 821              		.loc 1 143 14 is_stmt 1 view .LVU201
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 822              		.loc 1 140 14 view .LVU202
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 823              		.loc 1 141 14 view .LVU203
 142:armwave.c     ****             	word >>= 8;
 824              		.loc 1 142 14 view .LVU204
 825              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 826              		.loc 1 140 42 is_stmt 0 view .LVU205
 827 0390 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 828              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 829              		.loc 1 141 60 view .LVU206
 830 0394 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 831              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 832              		.loc 1 142 44 view .LVU207
 833 0398 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 834              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 835              		.loc 1 141 60 view .LVU208
 836 039c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 837              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 838              		.loc 1 142 44 view .LVU209
 839 03a0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 840              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 841              		.loc 1 141 60 view .LVU210
 842 03a4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 843              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 844              		.loc 1 120 37 view .LVU211
 845 03a8 040080E2 		add	r0, r0, #4	@ yy, yy,
 846              	.LVL43:
 847              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 848              		.loc 1 142 44 view .LVU212
 849 03ac 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 850              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 851              		.loc 1 120 9 view .LVU213
 852 03b0 000051E1 		cmp	r1, r0	@ height, yy
 853              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 854              		.loc 1 142 44 view .LVU214
 855 03b4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 856 03b8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 857              	.LVL44:
 143:armwave.c     ****     		}
 858              		.loc 1 143 14 is_stmt 1 view .LVU215
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 859              		.loc 1 140 14 view .LVU216
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 860              		.loc 1 141 14 view .LVU217
 142:armwave.c     ****             	word >>= 8;
 861              		.loc 1 142 14 view .LVU218
 862              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 863              		.loc 1 140 42 is_stmt 0 view .LVU219
 864 03bc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 865              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 866              		.loc 1 141 60 view .LVU220
 867 03c0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 868              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 869              		.loc 1 142 44 view .LVU221
 870 03c4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 871 03c8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 872 03cc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 873 03d0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 874 03d4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****     		}
 875              		.loc 1 143 14 is_stmt 1 view .LVU222
 876              	.LVL45:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 877              		.loc 1 140 14 view .LVU223
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 878              		.loc 1 141 14 view .LVU224
 142:armwave.c     ****             	word >>= 8;
 879              		.loc 1 142 14 view .LVU225
 880              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 881              		.loc 1 140 42 is_stmt 0 view .LVU226
 882 03d8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 883              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 884              		.loc 1 141 60 view .LVU227
 885 03dc 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 886              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 887              		.loc 1 142 44 view .LVU228
 888 03e0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 889 03e4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 890 03e8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 891 03ec 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 892 03f0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****     		}
 893              		.loc 1 143 14 is_stmt 1 view .LVU229
 894              	.LVL46:
 895              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 896              		.loc 1 120 9 is_stmt 0 view .LVU230
 897 03f4 D6FFFF8A 		bhi	.L44		@,
 898              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 899              		.loc 1 109 5 view .LVU231
 900 03f8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 901              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 902              		.loc 1 109 44 view .LVU232
 903 03fc 018088E2 		add	r8, r8, #1	@ w, w,
 904              	.LVL47:
 905              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 109 5 view .LVU233
 907 0400 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 908 0404 CDFFFF3A 		bcc	.L45		@,
 909 0408 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 910              	.L54:
 911              		.align	2
 912              	.L53:
 913 040c 00000000 		.word	g_armwave_state
 914              		.cfi_endproc
 915              	.LFE59:
 917              		.align	2
 918              		.global	armwave_init
 919              		.syntax unified
 920              		.arm
 921              		.fpu vfp
 923              	armwave_init:
 924              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 925              		.loc 1 152 1 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 153:armwave.c     **** }
 930              		.loc 1 153 5 view .LVU235
 931              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 932              		.loc 1 153 27 is_stmt 0 view .LVU236
 933 0410 08309FE5 		ldr	r3, .L56	@ tmp110,
 934 0414 0020A0E3 		mov	r2, #0	@ tmp111,
 935 0418 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 936              	@ armwave.c:154: }
 154:armwave.c     **** 
 937              		.loc 1 154 1 view .LVU237
 938 041c 1EFF2FE1 		bx	lr	@
 939              	.L57:
 940              		.align	2
 941              	.L56:
 942 0420 00000000 		.word	g_armwave_state
 943              		.cfi_endproc
 944              	.LFE60:
 946              		.align	2
 947              		.global	armwave_setup_render
 948              		.syntax unified
 949              		.arm
 950              		.fpu vfp
 952              	armwave_setup_render:
 953              	.LVL48:
 954              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 955              		.loc 1 157 1 is_stmt 1 view -0
 956              		.cfi_startproc
 957              		@ args = 16, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 959              		.loc 1 158 5 view .LVU239
 159:armwave.c     **** 
 960              		.loc 1 159 5 view .LVU240
 161:armwave.c     **** 
 961              		.loc 1 161 5 view .LVU241
 962              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 963              		.loc 1 157 1 is_stmt 0 view .LVU242
 964 0424 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 965              		.cfi_def_cfa_offset 32
 966              		.cfi_offset 4, -32
 967              		.cfi_offset 5, -28
 968              		.cfi_offset 6, -24
 969              		.cfi_offset 7, -20
 970              		.cfi_offset 8, -16
 971              		.cfi_offset 9, -12
 972              		.cfi_offset 10, -8
 973              		.cfi_offset 14, -4
 974              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 975              		.loc 1 161 5 view .LVU243
 976 0428 020051E1 		cmp	r1, r2	@ start_point, end_point
 977              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 157 1 view .LVU244
 979 042c 028B2DED 		vpush.64	{d8}	@
 980              		.cfi_def_cfa_offset 40
 981              		.cfi_offset 80, -40
 982              		.cfi_offset 81, -36
 983              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 984              		.loc 1 157 1 view .LVU245
 985 0430 0190A0E1 		mov	r9, r1	@ start_point, start_point
 986 0434 0260A0E1 		mov	r6, r2	@ end_point, end_point
 987 0438 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 988              	.LVL49:
 157:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 157 1 view .LVU246
 990 043c 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 991 0440 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 992              	.LVL50:
 993              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 994              		.loc 1 161 5 view .LVU247
 995 0444 3E00002A 		bcs	.L70		@,
 164:armwave.c     **** 
 996              		.loc 1 164 5 is_stmt 1 view .LVU248
 997              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 998              		.loc 1 164 33 is_stmt 0 view .LVU249
 999 0448 48519FE5 		ldr	r5, .L74+4	@ tmp193,
 1000              	@ armwave.c:167:     assert((target_height % 256) == 0);
 167:armwave.c     **** 
 1001              		.loc 1 167 5 view .LVU250
 1002 044c FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1003              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1004              		.loc 1 164 33 view .LVU251
 1005 0450 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1006              		.loc 1 167 5 is_stmt 1 view .LVU252
 1007 0454 4900001A 		bne	.L71		@,
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1008              		.loc 1 170 5 view .LVU253
 1009              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1010              		.loc 1 174 42 is_stmt 0 view .LVU254
 1011 0458 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1012              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1013              		.loc 1 183 23 view .LVU255
 1014 045c 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1015              	.LVL51:
 1016              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 172:armwave.c     ****     g_armwave_state.waves = waves;
 1017              		.loc 1 172 33 view .LVU256
 1018 0460 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1019              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1020              		.loc 1 173 27 view .LVU257
 1021 0464 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1022              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1023              		.loc 1 171 44 view .LVU258
 1024 0468 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1025              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 1026              		.loc 1 181 34 view .LVU259
 1027 046c 4030A0E3 		mov	r3, #64	@ tmp159,
 1028              	.LVL52:
 1029              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1030              		.loc 1 183 7 view .LVU260
 1031 0470 000050E3 		cmp	r0, #0	@ _4,
 1032              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1033              		.loc 1 170 29 view .LVU261
 1034 0474 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1035              		.loc 1 171 5 is_stmt 1 view .LVU262
 1036              	@ armwave.c:175:     g_armwave_state.target_width = target_width;
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 1037              		.loc 1 175 34 is_stmt 0 view .LVU263
 1038 0478 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1039              	@ armwave.c:176:     g_armwave_state.target_height = target_height;
 176:armwave.c     **** 
 1040              		.loc 1 176 35 view .LVU264
 1041 047c 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1042              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1043              		.loc 1 174 26 view .LVU265
 1044 0480 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1045              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1046              		.loc 1 171 28 view .LVU266
 1047 0484 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 172:armwave.c     ****     g_armwave_state.waves = waves;
 1048              		.loc 1 172 5 is_stmt 1 view .LVU267
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1049              		.loc 1 173 5 view .LVU268
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1050              		.loc 1 174 5 view .LVU269
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 1051              		.loc 1 175 5 view .LVU270
 176:armwave.c     **** 
 1052              		.loc 1 176 5 view .LVU271
 181:armwave.c     **** 
 1053              		.loc 1 181 5 view .LVU272
 1054              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 1055              		.loc 1 181 34 is_stmt 0 view .LVU273
 1056 0488 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1057              		.loc 1 183 5 is_stmt 1 view .LVU274
 1058              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 183 7 is_stmt 0 view .LVU275
 1060 048c 0100000A 		beq	.L61		@,
 184:armwave.c     **** 
 1061              		.loc 1 184 9 is_stmt 1 view .LVU276
 1062 0490 FEFFFFEB 		bl	free		@
 1063              	.LVL53:
 184:armwave.c     **** 
 1064              		.loc 1 184 9 is_stmt 0 view .LVU277
 1065 0494 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1066              	.L61:
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1067              		.loc 1 186 5 is_stmt 1 view .LVU278
 1068              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1069              		.loc 1 186 34 is_stmt 0 view .LVU279
 1070 0498 0110A0E3 		mov	r1, #1	@,
 1071 049c 0700A0E1 		mov	r0, r7	@, _3
 1072 04a0 FEFFFFEB 		bl	calloc		@
 1073              	.LVL54:
 1074              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1075              		.loc 1 187 33 view .LVU280
 1076 04a4 F0209FE5 		ldr	r2, .L74+8	@ tmp165,
 1077              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 189:armwave.c     **** 
 1078              		.loc 1 189 33 view .LVU281
 1079 04a8 FA30A0E3 		mov	r3, #250	@ tmp168,
 1080              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1081              		.loc 1 187 33 view .LVU282
 1082 04ac 402085E5 		str	r2, [r5, #64]	@ tmp165, MEM[(short int *)&g_armwave_state + 64B]
 1083              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 189:armwave.c     **** 
 1084              		.loc 1 189 33 view .LVU283
 1085 04b0 B434C5E1 		strh	r3, [r5, #68]	@ movhi	@ tmp168, g_armwave_state.ch1_color.b
 1086              	@ armwave.c:191:     assert(g_armwave_state.ch1_buffer != NULL);
 191:armwave.c     **** 
 1087              		.loc 1 191 5 view .LVU284
 1088 04b4 000050E3 		cmp	r0, #0	@ tmp162,
 1089              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1090              		.loc 1 186 32 view .LVU285
 1091 04b8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1092              		.loc 1 187 5 is_stmt 1 view .LVU286
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1093              		.loc 1 188 5 view .LVU287
 189:armwave.c     **** 
 1094              		.loc 1 189 5 view .LVU288
 191:armwave.c     **** 
 1095              		.loc 1 191 5 view .LVU289
 1096 04bc 2A00000A 		beq	.L72		@,
 194:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1097              		.loc 1 194 5 view .LVU290
 1098              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1099              		.loc 1 195 34 is_stmt 0 view .LVU291
 1100 04c0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1101              	@ armwave.c:194:     length = end_point - start_point;
 194:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1102              		.loc 1 194 12 view .LVU292
 1103 04c4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1104              	.LVL55:
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1105              		.loc 1 195 5 is_stmt 1 view .LVU293
 1106              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1107              		.loc 1 197 40 is_stmt 0 view .LVU294
 1108 04c8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1109              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 195 34 view .LVU295
 1111 04cc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp173, target_width
 1112              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1113              		.loc 1 195 31 view .LVU296
 1114 04d0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1115 04d4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp172, length
 1116              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1117              		.loc 1 196 60 view .LVU297
 1118 04d8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp197, g_armwave_state.slice_height
 1119 04dc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp176, tmp197
 1120              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 195 22 view .LVU298
 1122 04e0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp172, tmp173
 1123              	.LVL56:
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 196 5 is_stmt 1 view .LVU299
 1125              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1126              		.loc 1 196 60 is_stmt 0 view .LVU300
 1127 04e4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp178, tmp176, points_per_pixel
 1128              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1129              		.loc 1 196 41 view .LVU301
 1130 04e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 1131 04ec 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp179, g_armwave_state.slice_record_height
 197:armwave.c     **** 
 1132              		.loc 1 197 5 is_stmt 1 view .LVU302
 1133              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1134              		.loc 1 197 40 is_stmt 0 view .LVU303
 1135 04f0 FEFFFFEB 		bl	malloc		@
 1136              	.LVL57:
 1137              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 199:armwave.c     **** 
 1138              		.loc 1 199 5 view .LVU304
 1139 04f4 000050E3 		cmp	r0, #0	@ tmp181,
 1140              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1141              		.loc 1 197 38 view .LVU305
 1142 04f8 580085E5 		str	r0, [r5, #88]	@ tmp181, g_armwave_state.xcoord_to_xpixel
 199:armwave.c     **** 
 1143              		.loc 1 199 5 is_stmt 1 view .LVU306
 1144 04fc 1500000A 		beq	.L73		@,
 1145              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1146              		.loc 1 202 54 is_stmt 0 view .LVU307
 1147 0500 237ADFED 		vldr.32	s15, .L74	@ tmp186,
 1148 0504 020040E2 		sub	r0, r0, #2	@ ivtmp.68, tmp181,
 1149 0508 887A87EE 		vdiv.f32	s14, s15, s16	@ _15, tmp186, points_per_pixel
 1150              	.L64:
 1151              	.LVL58:
 202:armwave.c     **** 
 1152              		.loc 1 202 9 is_stmt 1 discriminator 3 view .LVU308
 1153              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1154              		.loc 1 202 74 is_stmt 0 discriminator 3 view .LVU309
 1155 050c 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1156              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1157              		.loc 1 201 32 discriminator 3 view .LVU310
 1158 0510 014084E2 		add	r4, r4, #1	@ xx, xx,
 1159              	.LVL59:
 1160              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 201 5 discriminator 3 view .LVU311
 1162 0514 040056E1 		cmp	r6, r4	@ length, xx
 1163              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1164              		.loc 1 202 74 discriminator 3 view .LVU312
 1165 0518 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp187, xx
 1166 051c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp188, tmp187, _15
 1167              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1168              		.loc 1 202 46 discriminator 3 view .LVU313
 1169 0520 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp189, tmp188
 1170 0524 903A17EE 		vmov	r3, s15	@ int	@ tmp189, tmp189
 1171 0528 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp189, MEM[base: _64, offset: 0B]
 1172              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1173              		.loc 1 201 5 discriminator 3 view .LVU314
 1174 052c F6FFFF1A 		bne	.L64		@,
 207:armwave.c     **** }
 1175              		.loc 1 207 5 is_stmt 1 view .LVU315
 1176              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 207:armwave.c     **** }
 1177              		.loc 1 207 34 is_stmt 0 view .LVU316
 1178 0530 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1179 0534 FEFFFFEB 		bl	malloc		@
 1180              	.LVL60:
 1181              	@ armwave.c:208: }
 1182              		.loc 1 208 1 view .LVU317
 1183 0538 028BBDEC 		vldm	sp!, {d8}	@
 1184              		.cfi_remember_state
 1185              		.cfi_restore 80
 1186              		.cfi_restore 81
 1187              		.cfi_def_cfa_offset 32
 1188              	.LVL61:
 1189              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 207:armwave.c     **** }
 1190              		.loc 1 207 32 view .LVU318
 1191 053c 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1192              	@ armwave.c:208: }
 1193              		.loc 1 208 1 view .LVU319
 1194 0540 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1195              	.LVL62:
 1196              	.L70:
 1197              		.cfi_restore_state
 161:armwave.c     **** 
 1198              		.loc 1 161 5 is_stmt 1 discriminator 1 view .LVU320
 1199 0544 54309FE5 		ldr	r3, .L74+12	@,
 1200              	.LVL63:
 161:armwave.c     **** 
 1201              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU321
 1202 0548 A120A0E3 		mov	r2, #161	@,
 1203 054c 50109FE5 		ldr	r1, .L74+16	@,
 1204 0550 50009FE5 		ldr	r0, .L74+20	@,
 1205              	.LVL64:
 161:armwave.c     **** 
 1206              		.loc 1 161 5 discriminator 1 view .LVU322
 1207 0554 FEFFFFEB 		bl	__assert_fail		@
 1208              	.LVL65:
 1209              	.L73:
 199:armwave.c     **** 
 1210              		.loc 1 199 5 is_stmt 1 discriminator 1 view .LVU323
 1211 0558 40309FE5 		ldr	r3, .L74+12	@,
 1212 055c C720A0E3 		mov	r2, #199	@,
 1213 0560 3C109FE5 		ldr	r1, .L74+16	@,
 1214 0564 40009FE5 		ldr	r0, .L74+24	@,
 1215 0568 FEFFFFEB 		bl	__assert_fail		@
 1216              	.LVL66:
 1217              	.L72:
 191:armwave.c     **** 
 1218              		.loc 1 191 5 discriminator 1 view .LVU324
 1219 056c 2C309FE5 		ldr	r3, .L74+12	@,
 1220 0570 BF20A0E3 		mov	r2, #191	@,
 1221 0574 28109FE5 		ldr	r1, .L74+16	@,
 1222 0578 30009FE5 		ldr	r0, .L74+28	@,
 1223 057c FEFFFFEB 		bl	__assert_fail		@
 1224              	.LVL67:
 1225              	.L71:
 167:armwave.c     **** 
 1226              		.loc 1 167 5 discriminator 1 view .LVU325
 1227 0580 18309FE5 		ldr	r3, .L74+12	@,
 1228              	.LVL68:
 167:armwave.c     **** 
 1229              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU326
 1230 0584 A720A0E3 		mov	r2, #167	@,
 1231 0588 14109FE5 		ldr	r1, .L74+16	@,
 1232 058c 20009FE5 		ldr	r0, .L74+32	@,
 1233              	.LVL69:
 167:armwave.c     **** 
 1234              		.loc 1 167 5 discriminator 1 view .LVU327
 1235 0590 FEFFFFEB 		bl	__assert_fail		@
 1236              	.LVL70:
 1237              	.L75:
 167:armwave.c     **** 
 1238              		.loc 1 167 5 discriminator 1 view .LVU328
 1239              		.align	2
 1240              	.L74:
 1241 0594 0000803F 		.word	1065353216
 1242 0598 00000000 		.word	g_armwave_state
 1243 059c F609F406 		.word	116656630
 1244 05a0 00000000 		.word	.LANCHOR0
 1245 05a4 00000000 		.word	.LC0
 1246 05a8 5C000000 		.word	.LC3
 1247 05ac 30000000 		.word	.LC2
 1248 05b0 0C000000 		.word	.LC1
 1249 05b4 74000000 		.word	.LC4
 1250              		.cfi_endproc
 1251              	.LFE61:
 1253              		.align	2
 1254              		.global	armwave_clear_buffer
 1255              		.syntax unified
 1256              		.arm
 1257              		.fpu vfp
 1259              	armwave_clear_buffer:
 1260              	.LVL71:
 1261              	.LFB62:
 209:armwave.c     **** 
 210:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 211:armwave.c     **** {
 1262              		.loc 1 211 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 212:armwave.c     ****     // Flags ignored, only one buffer cleared
 213:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1267              		.loc 1 213 5 view .LVU330
 1268 05b8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1269 05bc 0010A0E3 		mov	r1, #0	@,
 1270 05c0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1271 05c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1272              	.LVL72:
 1273              		.loc 1 213 5 is_stmt 0 view .LVU331
 1274 05c8 FEFFFFEA 		b	memset		@
 1275              	.LVL73:
 1276              	.L78:
 1277              		.align	2
 1278              	.L77:
 1279 05cc 00000000 		.word	g_armwave_state
 1280              		.cfi_endproc
 1281              	.LFE62:
 1283              		.global	__aeabi_uidivmod
 1284              		.align	2
 1285              		.global	armwave_fill_pixbuf2
 1286              		.syntax unified
 1287              		.arm
 1288              		.fpu vfp
 1290              	armwave_fill_pixbuf2:
 1291              	.LVL74:
 1292              	.LFB63:
 214:armwave.c     **** }
 215:armwave.c     **** 
 216:armwave.c     **** /*
 217:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 218:armwave.c     **** {
 219:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 220:armwave.c     ****     int rr, gg, bb;
 221:armwave.c     ****     uint8_t r, g, b;
 222:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 223:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 224:armwave.c     **** 
 225:armwave.c     ****     assert(out_buffer != NULL);
 226:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 227:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 228:armwave.c     **** 
 229:armwave.c     **** #if 0
 230:armwave.c     ****     // Pixbuf tests
 231:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 232:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 233:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 234:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 235:armwave.c     ****         }
 236:armwave.c     ****     }
 237:armwave.c     **** #endif
 238:armwave.c     **** 
 239:armwave.c     **** #if 1
 240:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 241:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 242:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 243:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 244:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 245:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 246:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 247:armwave.c     **** 
 248:armwave.c     **** #if 0
 249:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 250:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 251:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 252:armwave.c     **** 
 253:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 254:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 255:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 256:armwave.c     **** #endif
 257:armwave.c     **** 
 258:armwave.c     ****             if(value != 0) {
 259:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 263:armwave.c     **** 	            r = MIN(rr, 255);
 264:armwave.c     **** 	            g = MIN(gg, 255);
 265:armwave.c     **** 	            b = MIN(bb, 255);
 266:armwave.c     **** 
 267:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 268:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 270:armwave.c     **** 	            //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, va
 271:armwave.c     **** 
 272:armwave.c     **** 	            *out_buffer++ = word;
 273:armwave.c     **** 	        }
 274:armwave.c     ****         }
 275:armwave.c     ****     }
 276:armwave.c     **** #endif
 277:armwave.c     **** }
 278:armwave.c     **** */
 279:armwave.c     **** 
 280:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 281:armwave.c     **** {
 1293              		.loc 1 281 1 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 282:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1297              		.loc 1 282 5 view .LVU333
 283:armwave.c     ****     int rr, gg, bb;
 1298              		.loc 1 283 5 view .LVU334
 284:armwave.c     ****     uint8_t r, g, b;
 1299              		.loc 1 284 5 view .LVU335
 285:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1300              		.loc 1 285 5 view .LVU336
 1301              	@ armwave.c:281: {
 281:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1302              		.loc 1 281 1 is_stmt 0 view .LVU337
 1303 05d0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1304              		.cfi_def_cfa_offset 36
 1305              		.cfi_offset 4, -36
 1306              		.cfi_offset 5, -32
 1307              		.cfi_offset 6, -28
 1308              		.cfi_offset 7, -24
 1309              		.cfi_offset 8, -20
 1310              		.cfi_offset 9, -16
 1311              		.cfi_offset 10, -12
 1312              		.cfi_offset 11, -8
 1313              		.cfi_offset 14, -4
 1314              	@ armwave.c:289:     assert(out_buffer != NULL);
 286:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 287:armwave.c     ****     uint32_t npix, n, offset;
 288:armwave.c     **** 
 289:armwave.c     ****     assert(out_buffer != NULL);
 1315              		.loc 1 289 5 view .LVU338
 1316 05d4 009050E2 		subs	r9, r0, #0	@ out_buffer, out_buffer
 1317              	@ armwave.c:285:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 285:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1318              		.loc 1 285 14 view .LVU339
 1319 05d8 DC809FE5 		ldr	r8, .L94	@ tmp187,
 1320              	@ armwave.c:281: {
 281:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1321              		.loc 1 281 1 view .LVU340
 1322 05dc 0CD04DE2 		sub	sp, sp, #12	@,,
 1323              		.cfi_def_cfa_offset 48
 1324              	@ armwave.c:285:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 285:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1325              		.loc 1 285 14 view .LVU341
 1326 05e0 044098E5 		ldr	r4, [r8, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1327              	.LVL75:
 286:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1328              		.loc 1 286 5 is_stmt 1 view .LVU342
 287:armwave.c     **** 
 1329              		.loc 1 287 5 view .LVU343
 1330              		.loc 1 289 5 view .LVU344
 1331 05e4 2F00000A 		beq	.L92		@,
 290:armwave.c     **** 
 291:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 292:armwave.c     **** 
 293:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1332              		.loc 1 293 5 view .LVU345
 1333              	@ armwave.c:293:     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1334              		.loc 1 293 10 is_stmt 0 view .LVU346
 1335 05e8 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1336 05ec 387098E5 		ldr	r7, [r8, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1337 05f0 970307E0 		mul	r7, r7, r3	@ npix, g_armwave_state.target_height, g_armwave_state.target_width
 1338              	.LVL76:
 294:armwave.c     **** 
 295:armwave.c     ****     for(n = 0; n < npix; n++) {
 1339              		.loc 1 295 5 is_stmt 1 view .LVU347
 1340              		.loc 1 295 5 is_stmt 0 view .LVU348
 1341 05f4 000057E3 		cmp	r7, #0	@ npix,
 1342 05f8 0800000A 		beq	.L79		@,
 1343              	@ armwave.c:325:             printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 296:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 297:armwave.c     ****         value = *base_ptr++;
 298:armwave.c     **** 
 299:armwave.c     ****         // yup, this is generally not going to happen, for most waveforms
 300:armwave.c     ****         if(COND_UNLIKELY(value != 0)) {
 301:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 302:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 303:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 304:armwave.c     **** 
 305:armwave.c     ****             r = MIN(rr, 255);
 306:armwave.c     ****             g = MIN(gg, 255);
 307:armwave.c     ****             b = MIN(bb, 255);
 308:armwave.c     **** 
 309:armwave.c     ****             // ensure 100% alpha channel, if it is used
 310:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 311:armwave.c     **** 
 312:armwave.c     ****             // Is there a better way?
 313:armwave.c     ****             /** works but wrong orientation **
 314:armwave.c     ****             xx = n % g_armwave_state.target_width;
 315:armwave.c     ****             yy = n / g_armwave_state.target_width;
 316:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 317:armwave.c     ****             *(out_buffer_base + offset) = word;
 318:armwave.c     ****             */
 319:armwave.c     **** 
 320:armwave.c     ****             xx = n / g_armwave_state.target_width;
 321:armwave.c     ****             yy = n % g_armwave_state.target_width;
 322:armwave.c     ****             offset = xx + (yy * g_armwave_state.target_width); //((xx * g_armwave_state.target_heig
 323:armwave.c     ****             *(out_buffer_base + offset) = word;
 324:armwave.c     **** 
 325:armwave.c     ****             printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1344              		.loc 1 325 13 view .LVU349
 1345 05fc BCA09FE5 		ldr	r10, .L94+4	@ tmp188,
 1346 0600 077084E0 		add	r7, r4, r7	@ _57, base_ptr, npix
 1347              	.LVL77:
 1348              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 295:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1349              		.loc 1 295 11 view .LVU350
 1350 0604 0050A0E3 		mov	r5, #0	@ n,
 1351              	.LVL78:
 1352              	.L83:
 297:armwave.c     **** 
 1353              		.loc 1 297 9 is_stmt 1 view .LVU351
 1354              	@ armwave.c:297:         value = *base_ptr++;
 297:armwave.c     **** 
 1355              		.loc 1 297 17 is_stmt 0 view .LVU352
 1356 0608 0160D4E4 		ldrb	r6, [r4], #1	@ zero_extendqisi2	@ _3, MEM[base: base_ptr_43, offset: 4294967295B]
 1357              	.LVL79:
 300:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1358              		.loc 1 300 9 is_stmt 1 view .LVU353
 1359              	@ armwave.c:300:         if(COND_UNLIKELY(value != 0)) {
 300:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1360              		.loc 1 300 11 is_stmt 0 view .LVU354
 1361 060c 000056E3 		cmp	r6, #0	@ _3,
 1362 0610 0400001A 		bne	.L93		@,
 1363              	.LVL80:
 1364              	.L82:
 1365              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 295:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1366              		.loc 1 295 5 discriminator 2 view .LVU355
 1367 0614 070054E1 		cmp	r4, r7	@ base_ptr, _57
 1368              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 295:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1369              		.loc 1 295 27 discriminator 2 view .LVU356
 1370 0618 015085E2 		add	r5, r5, #1	@ n, n,
 1371              	.LVL81:
 1372              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 295:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1373              		.loc 1 295 5 discriminator 2 view .LVU357
 1374 061c F9FFFF1A 		bne	.L83		@,
 1375              	.LVL82:
 1376              	.L79:
 1377              	@ armwave.c:328: }
 326:armwave.c     ****         } 
 327:armwave.c     ****     }
 328:armwave.c     **** }
 1378              		.loc 1 328 1 view .LVU358
 1379 0620 0CD08DE2 		add	sp, sp, #12	@,,
 1380              		.cfi_remember_state
 1381              		.cfi_def_cfa_offset 36
 1382              		@ sp needed	@
 1383 0624 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1384              	.LVL83:
 1385              	.L93:
 1386              		.cfi_restore_state
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1387              		.loc 1 301 13 is_stmt 1 view .LVU359
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1388              		.loc 1 302 13 view .LVU360
 303:armwave.c     **** 
 1389              		.loc 1 303 13 view .LVU361
 305:armwave.c     ****             g = MIN(gg, 255);
 1390              		.loc 1 305 13 view .LVU362
 306:armwave.c     ****             b = MIN(bb, 255);
 1391              		.loc 1 306 13 view .LVU363
 307:armwave.c     **** 
 1392              		.loc 1 307 13 view .LVU364
 310:armwave.c     **** 
 1393              		.loc 1 310 13 view .LVU365
 320:armwave.c     ****             yy = n % g_armwave_state.target_width;
 1394              		.loc 1 320 13 view .LVU366
 1395              	@ armwave.c:320:             xx = n / g_armwave_state.target_width;
 320:armwave.c     ****             yy = n % g_armwave_state.target_width;
 1396              		.loc 1 320 37 is_stmt 0 view .LVU367
 1397 0628 34B098E5 		ldr	fp, [r8, #52]	@ _29, g_armwave_state.target_width
 1398 062c 0500A0E1 		mov	r0, r5	@, n
 1399 0630 0B10A0E1 		mov	r1, fp	@, _29
 1400 0634 FEFFFFEB 		bl	__aeabi_uidivmod		@
 1401              	.LVL84:
 1402              	@ armwave.c:303:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 303:armwave.c     **** 
 1403              		.loc 1 303 47 view .LVU368
 1404 0638 B4C4D8E1 		ldrh	ip, [r8, #68]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1405              	.LVL85:
 303:armwave.c     **** 
 1406              		.loc 1 303 47 view .LVU369
 1407 063c 8C066CE1 		smulbb	ip, ip, r6	@ tmp168, g_armwave_state.ch1_color.b, _3
 1408              	.LVL86:
 303:armwave.c     **** 
 1409              		.loc 1 303 47 view .LVU370
 1410 0640 0130A0E1 		mov	r3, r1	@ divmod_tmp_86,
 1411              	@ armwave.c:302:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1412              		.loc 1 302 47 view .LVU371
 1413 0644 B214D8E1 		ldrh	r1, [r8, #66]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1414              	.LVL87:
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1415              		.loc 1 302 47 view .LVU372
 1416 0648 0020A0E1 		mov	r2, r0	@ divmod_tmp_86,
 1417              	.LVL88:
 321:armwave.c     ****             offset = xx + (yy * g_armwave_state.target_width); //((xx * g_armwave_state.target_heig
 1418              		.loc 1 321 13 is_stmt 1 view .LVU373
 322:armwave.c     ****             *(out_buffer_base + offset) = word;
 1419              		.loc 1 322 13 view .LVU374
 1420              	@ armwave.c:322:             offset = xx + (yy * g_armwave_state.target_width); //((xx * g_armwave_
 322:armwave.c     ****             *(out_buffer_base + offset) = word;
 1421              		.loc 1 322 20 is_stmt 0 view .LVU375
 1422 064c 932B2EE0 		mla	lr, r3, fp, r2	@ offset, divmod_tmp_86, _29, divmod_tmp_86
 1423              	.LVL89:
 323:armwave.c     **** 
 1424              		.loc 1 323 13 is_stmt 1 view .LVU376
 1425              	@ armwave.c:302:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1426              		.loc 1 302 47 is_stmt 0 view .LVU377
 1427 0650 810661E1 		smulbb	r1, r1, r6	@ tmp174, g_armwave_state.ch1_color.g, _3
 1428              	.LVL90:
 1429              	@ armwave.c:301:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1430              		.loc 1 301 47 view .LVU378
 1431 0654 B0B4D8E1 		ldrh	fp, [r8, #64]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1432              	.LVL91:
 1433              	@ armwave.c:303:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 303:armwave.c     **** 
 1434              		.loc 1 303 56 view .LVU379
 1435 0658 2C04A0E1 		lsr	r0, ip, #8	@ bb, tmp168,
 1436              	.LVL92:
 1437              	@ armwave.c:307:             b = MIN(bb, 255);
 307:armwave.c     **** 
 1438              		.loc 1 307 17 view .LVU380
 1439 065c FF0050E3 		cmp	r0, #255	@ bb,
 1440              	@ armwave.c:302:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1441              		.loc 1 302 56 view .LVU381
 1442 0660 21C4A0E1 		lsr	ip, r1, #8	@ gg, tmp174,
 1443              	@ armwave.c:307:             b = MIN(bb, 255);
 307:armwave.c     **** 
 1444              		.loc 1 307 17 view .LVU382
 1445 0664 FF00A0A3 		movge	r0, #255	@ bb,
 1446              	@ armwave.c:306:             g = MIN(gg, 255);
 306:armwave.c     ****             b = MIN(bb, 255);
 1447              		.loc 1 306 17 view .LVU383
 1448 0668 FF005CE3 		cmp	ip, #255	@ gg,
 1449 066c FFC0A0A3 		movge	ip, #255	@ gg,
 1450              	@ armwave.c:301:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1451              		.loc 1 301 47 view .LVU384
 1452 0670 8B0666E1 		smulbb	r6, fp, r6	@ tmp181, g_armwave_state.ch1_color.r, _3
 1453              	.LVL93:
 1454              	@ armwave.c:310:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 310:armwave.c     **** 
 1455              		.loc 1 310 43 view .LVU385
 1456 0674 0CC4A0E1 		lsl	ip, ip, #8	@ tmp177, gg,
 1457 0678 00C88CE1 		orr	ip, ip, r0, lsl #16	@ tmp178, tmp177, bb,
 1458              	@ armwave.c:301:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1459              		.loc 1 301 56 view .LVU386
 1460 067c 2664A0E1 		lsr	r6, r6, #8	@ rr, tmp181,
 1461              	@ armwave.c:310:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 310:armwave.c     **** 
 1462              		.loc 1 310 54 view .LVU387
 1463 0680 FF0056E3 		cmp	r6, #255	@ rr,
 1464 0684 06C08CD1 		orrle	ip, ip, r6	@,, tmp184, tmp178, rr
 1465 0688 FFC08CC3 		orrgt	ip, ip, #255	@,, tmp184, tmp178,
 1466              	@ armwave.c:310:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 310:armwave.c     **** 
 1467              		.loc 1 310 18 view .LVU388
 1468 068c FFC48CE3 		orr	ip, ip, #-16777216	@ word, tmp184,
 1469              	@ armwave.c:323:             *(out_buffer_base + offset) = word;
 323:armwave.c     **** 
 1470              		.loc 1 323 41 view .LVU389
 1471 0690 0EC189E7 		str	ip, [r9, lr, lsl #2]	@ word, *_32
 325:armwave.c     ****         } 
 1472              		.loc 1 325 13 is_stmt 1 view .LVU390
 1473 0694 0510A0E1 		mov	r1, r5	@, n
 1474 0698 00E08DE5 		str	lr, [sp]	@ offset,
 1475 069c 0A00A0E1 		mov	r0, r10	@, tmp188
 1476 06a0 FEFFFFEB 		bl	printf		@
 1477              	.LVL94:
 325:armwave.c     ****         } 
 1478              		.loc 1 325 13 is_stmt 0 view .LVU391
 1479 06a4 DAFFFFEA 		b	.L82		@
 1480              	.LVL95:
 1481              	.L92:
 289:armwave.c     **** 
 1482              		.loc 1 289 5 is_stmt 1 discriminator 1 view .LVU392
 1483 06a8 14309FE5 		ldr	r3, .L94+8	@,
 1484 06ac 14209FE5 		ldr	r2, .L94+12	@,
 1485 06b0 14109FE5 		ldr	r1, .L94+16	@,
 1486 06b4 14009FE5 		ldr	r0, .L94+20	@,
 1487              	.LVL96:
 289:armwave.c     **** 
 1488              		.loc 1 289 5 is_stmt 0 discriminator 1 view .LVU393
 1489 06b8 FEFFFFEB 		bl	__assert_fail		@
 1490              	.LVL97:
 1491              	.L95:
 1492              		.align	2
 1493              	.L94:
 1494 06bc 00000000 		.word	g_armwave_state
 1495 06c0 A4000000 		.word	.LC6
 1496 06c4 18000000 		.word	.LANCHOR0+24
 1497 06c8 21010000 		.word	289
 1498 06cc 00000000 		.word	.LC0
 1499 06d0 90000000 		.word	.LC5
 1500              		.cfi_endproc
 1501              	.LFE63:
 1503              		.align	2
 1504              		.global	armwave_dump_ppm_debug
 1505              		.syntax unified
 1506              		.arm
 1507              		.fpu vfp
 1509              	armwave_dump_ppm_debug:
 1510              	.LVL98:
 1511              	.LFB64:
 329:armwave.c     **** 
 330:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 331:armwave.c     **** {
 1512              		.loc 1 331 1 is_stmt 1 view -0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 332:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1516              		.loc 1 332 5 view .LVU395
 1517              	@ armwave.c:331: {
 331:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1518              		.loc 1 331 1 is_stmt 0 view .LVU396
 1519 06d4 0130A0E1 		mov	r3, r1	@ fn, fn
 1520 06d8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1521              		.cfi_def_cfa_offset 28
 1522              		.cfi_offset 4, -28
 1523              		.cfi_offset 5, -24
 1524              		.cfi_offset 6, -20
 1525              		.cfi_offset 7, -16
 1526              		.cfi_offset 8, -12
 1527              		.cfi_offset 9, -8
 1528              		.cfi_offset 14, -4
 1529 06dc 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1530 06e0 0CD04DE2 		sub	sp, sp, #12	@,,
 1531              		.cfi_def_cfa_offset 40
 1532              	@ armwave.c:332:     FILE *fp = fopen(fn, "wb");
 1533              		.loc 1 332 16 view .LVU397
 1534 06e4 D8109FE5 		ldr	r1, .L108	@,
 1535              	.LVL99:
 1536              		.loc 1 332 16 view .LVU398
 1537 06e8 0300A0E1 		mov	r0, r3	@, fn
 1538              	.LVL100:
 1539              		.loc 1 332 16 view .LVU399
 1540 06ec FEFFFFEB 		bl	fopen64		@
 1541              	.LVL101:
 1542              	@ armwave.c:339:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 333:armwave.c     ****     uint32_t data;
 334:armwave.c     ****     int xx, yy;
 335:armwave.c     **** 
 336:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 337:armwave.c     **** 
 338:armwave.c     ****     fputs("P3\n", fp);
 339:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1543              		.loc 1 339 5 view .LVU400
 1544 06f0 D0609FE5 		ldr	r6, .L108+4	@ tmp154,
 1545              	@ armwave.c:338:     fputs("P3\n", fp);
 338:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1546              		.loc 1 338 5 view .LVU401
 1547 06f4 0320A0E3 		mov	r2, #3	@,
 1548 06f8 0110A0E3 		mov	r1, #1	@,
 1549              	@ armwave.c:332:     FILE *fp = fopen(fn, "wb");
 332:armwave.c     ****     uint32_t data;
 1550              		.loc 1 332 16 view .LVU402
 1551 06fc 0070A0E1 		mov	r7, r0	@ fp,
 1552              	.LVL102:
 333:armwave.c     ****     uint32_t data;
 1553              		.loc 1 333 5 is_stmt 1 view .LVU403
 334:armwave.c     **** 
 1554              		.loc 1 334 5 view .LVU404
 338:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1555              		.loc 1 338 5 view .LVU405
 1556 0700 0030A0E1 		mov	r3, r0	@, fp
 1557 0704 C0009FE5 		ldr	r0, .L108+8	@,
 1558              	.LVL103:
 338:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1559              		.loc 1 338 5 is_stmt 0 view .LVU406
 1560 0708 FEFFFFEB 		bl	fwrite		@
 1561              	.LVL104:
 1562              		.loc 1 339 5 is_stmt 1 view .LVU407
 1563 070c 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1564 0710 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1565 0714 B4109FE5 		ldr	r1, .L108+12	@,
 1566 0718 0700A0E1 		mov	r0, r7	@, fp
 1567 071c FEFFFFEB 		bl	fprintf		@
 1568              	.LVL105:
 340:armwave.c     ****     fputs("255\n", fp);
 1569              		.loc 1 340 5 view .LVU408
 1570 0720 0420A0E3 		mov	r2, #4	@,
 1571 0724 0730A0E1 		mov	r3, r7	@, fp
 1572 0728 0110A0E3 		mov	r1, #1	@,
 1573 072c A0009FE5 		ldr	r0, .L108+16	@,
 1574 0730 FEFFFFEB 		bl	fwrite		@
 1575              	.LVL106:
 341:armwave.c     **** 
 342:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1576              		.loc 1 342 5 view .LVU409
 1577              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1578              		.loc 1 342 37 is_stmt 0 view .LVU410
 1579 0734 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1580              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1581              		.loc 1 342 5 view .LVU411
 1582 0738 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1583 073c 1800000A 		beq	.L97		@,
 1584 0740 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1585              	@ armwave.c:347:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 344:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 345:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 346:armwave.c     **** 
 347:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1586              		.loc 1 347 13 view .LVU412
 1587 0744 8C909FE5 		ldr	r9, .L108+20	@ tmp156,
 1588              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 342:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1589              		.loc 1 342 12 view .LVU413
 1590 0748 0050A0E3 		mov	r5, #0	@ yy,
 1591              	.LVL107:
 1592              	.L98:
 1593              	@ armwave.c:343:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1594              		.loc 1 343 9 view .LVU414
 1595 074c 000053E3 		cmp	r3, #0	@ _12,
 1596              	@ armwave.c:343:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1597              		.loc 1 343 16 view .LVU415
 1598 0750 0040A013 		movne	r4, #0	@ xx,
 1599              	@ armwave.c:343:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1600              		.loc 1 343 9 view .LVU416
 1601 0754 1600000A 		beq	.L107		@,
 1602              	.LVL108:
 1603              	.L99:
 344:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1604              		.loc 1 344 13 is_stmt 1 discriminator 3 view .LVU417
 1605              	@ armwave.c:344:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 344:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1606              		.loc 1 344 29 is_stmt 0 discriminator 3 view .LVU418
 1607 0758 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1608              	@ armwave.c:347:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1609              		.loc 1 347 13 discriminator 3 view .LVU419
 1610 075c 0910A0E1 		mov	r1, r9	@, tmp156
 1611 0760 0700A0E1 		mov	r0, r7	@, fp
 1612              	@ armwave.c:344:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 344:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1613              		.loc 1 344 18 discriminator 3 view .LVU420
 1614 0764 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1615              	.LVL109:
 1616              		.loc 1 347 13 is_stmt 1 discriminator 3 view .LVU421
 1617              	@ armwave.c:343:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1618              		.loc 1 343 58 is_stmt 0 discriminator 3 view .LVU422
 1619 0768 014084E2 		add	r4, r4, #1	@ xx, xx,
 1620              	.LVL110:
 1621              	@ armwave.c:347:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1622              		.loc 1 347 81 discriminator 3 view .LVU423
 1623 076c 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1624              	@ armwave.c:347:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1625              		.loc 1 347 61 discriminator 3 view .LVU424
 1626 0770 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1627              	@ armwave.c:347:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1628              		.loc 1 347 13 discriminator 3 view .LVU425
 1629 0774 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1630 0778 7330EFE6 		uxtb	r3, r3	@, tmp146
 1631 077c 00C08DE5 		str	ip, [sp]	@ tmp151,
 1632 0780 7220EFE6 		uxtb	r2, r2	@, data
 1633              	.LVL111:
 1634              		.loc 1 347 13 discriminator 3 view .LVU426
 1635 0784 FEFFFFEB 		bl	fprintf		@
 1636              	.LVL112:
 1637              	@ armwave.c:343:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1638              		.loc 1 343 41 discriminator 3 view .LVU427
 1639 0788 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1640              	@ armwave.c:343:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 343:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1641              		.loc 1 343 9 discriminator 3 view .LVU428
 1642 078c 040053E1 		cmp	r3, r4	@ _12, xx
 1643 0790 F0FFFF8A 		bhi	.L99		@,
 1644 0794 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1645              	.LVL113:
 1646              	.L100:
 1647              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 342:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1648              		.loc 1 342 55 discriminator 2 view .LVU429
 1649 0798 015085E2 		add	r5, r5, #1	@ yy, yy,
 1650              	.LVL114:
 1651              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 342:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1652              		.loc 1 342 5 discriminator 2 view .LVU430
 1653 079c 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1654 07a0 E9FFFF3A 		bcc	.L98		@,
 1655              	.LVL115:
 1656              	.L97:
 348:armwave.c     ****         }
 349:armwave.c     ****     }
 350:armwave.c     **** 
 351:armwave.c     ****     fclose(fp);
 1657              		.loc 1 351 5 is_stmt 1 view .LVU431
 1658 07a4 0700A0E1 		mov	r0, r7	@, fp
 1659              	@ armwave.c:352: }
 352:armwave.c     **** }
 1660              		.loc 1 352 1 is_stmt 0 view .LVU432
 1661 07a8 0CD08DE2 		add	sp, sp, #12	@,,
 1662              		.cfi_remember_state
 1663              		.cfi_def_cfa_offset 28
 1664              		@ sp needed	@
 1665 07ac F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1666              		.cfi_restore 14
 1667              		.cfi_restore 9
 1668              		.cfi_restore 8
 1669              		.cfi_restore 7
 1670              		.cfi_restore 6
 1671              		.cfi_restore 5
 1672              		.cfi_restore 4
 1673              		.cfi_def_cfa_offset 0
 1674              	.LVL116:
 1675              	@ armwave.c:351:     fclose(fp);
 351:armwave.c     **** }
 1676              		.loc 1 351 5 view .LVU433
 1677 07b0 FEFFFFEA 		b	fclose		@
 1678              	.LVL117:
 1679              	.L107:
 1680              		.cfi_restore_state
 1681              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 342:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1682              		.loc 1 342 55 view .LVU434
 1683 07b4 015085E2 		add	r5, r5, #1	@ yy, yy,
 1684              	.LVL118:
 1685              	@ armwave.c:342:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 342:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1686              		.loc 1 342 5 view .LVU435
 1687 07b8 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1688 07bc F5FFFF8A 		bhi	.L100		@,
 1689 07c0 F7FFFFEA 		b	.L97		@
 1690              	.L109:
 1691              		.align	2
 1692              	.L108:
 1693 07c4 B4000000 		.word	.LC7
 1694 07c8 00000000 		.word	g_armwave_state
 1695 07cc B8000000 		.word	.LC8
 1696 07d0 BC000000 		.word	.LC9
 1697 07d4 C4000000 		.word	.LC10
 1698 07d8 CC000000 		.word	.LC11
 1699              		.cfi_endproc
 1700              	.LFE64:
 1702              		.align	2
 1703              		.global	armwave_test_init
 1704              		.syntax unified
 1705              		.arm
 1706              		.fpu vfp
 1708              	armwave_test_init:
 1709              	.LVL119:
 1710              	.LFB65:
 353:armwave.c     **** 
 354:armwave.c     **** void armwave_test_init(float mod)
 355:armwave.c     **** {
 1711              		.loc 1 355 1 is_stmt 1 view -0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 356:armwave.c     **** 	mod_depth = mod;
 1715              		.loc 1 356 2 view .LVU437
 1716              	@ armwave.c:356: 	mod_depth = mod;
 1717              		.loc 1 356 12 is_stmt 0 view .LVU438
 1718 07dc 88309FE5 		ldr	r3, .L114+20	@ tmp124,
 1719              	@ armwave.c:355: {
 355:armwave.c     **** 	mod_depth = mod;
 1720              		.loc 1 355 1 view .LVU439
 1721 07e0 70402DE9 		push	{r4, r5, r6, lr}	@
 1722              		.cfi_def_cfa_offset 16
 1723              		.cfi_offset 4, -16
 1724              		.cfi_offset 5, -12
 1725              		.cfi_offset 6, -8
 1726              		.cfi_offset 14, -4
 1727 07e4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1728              		.cfi_def_cfa_offset 40
 1729              		.cfi_offset 80, -40
 1730              		.cfi_offset 81, -36
 1731              		.cfi_offset 82, -32
 1732              		.cfi_offset 83, -28
 1733              		.cfi_offset 84, -24
 1734              		.cfi_offset 85, -20
 1735 07e8 80409FE5 		ldr	r4, .L114+24	@ ivtmp.86,
 1736              	.LBB6:
 1737              	.LBB7:
 1738              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1739              		.loc 1 87 32 view .LVU440
 1740 07ec 1DAA9FED 		vldr.32	s20, .L114+16	@ tmp130,
 1741              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1742              		.loc 1 87 26 view .LVU441
 1743 07f0 189B9FED 		vldr.64	d9, .L114	@ tmp139,
 1744              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1745              		.loc 1 87 49 view .LVU442
 1746 07f4 198B9FED 		vldr.64	d8, .L114+8	@ tmp133,
 1747              	.LBE7:
 1748              	.LBE6:
 1749              	@ armwave.c:356: 	mod_depth = mod;
 1750              		.loc 1 356 12 view .LVU443
 1751 07f8 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 357:armwave.c     **** 
 358:armwave.c     ****     test_create_waveform();
 1752              		.loc 1 358 5 is_stmt 1 view .LVU444
 1753 07fc FEFFFFEB 		bl	test_create_waveform		@
 1754              	.LVL120:
 359:armwave.c     ****     test_create_gamma();
 1755              		.loc 1 359 5 view .LVU445
 1756              	.LBB9:
 1757              	.LBI6:
  81:armwave.c     **** {
 1758              		.loc 1 81 6 view .LVU446
  81:armwave.c     **** {
 1759              		.loc 1 81 6 is_stmt 0 view .LVU447
 1760 0800 013084E2 		add	r3, r4, #1	@ _30, ivtmp.86,
 1761 0804 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.86,
 1762 0808 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1763              	.LVL121:
 1764              	.L111:
 1765              	.LBB8:
  87:armwave.c     ****     }
 1766              		.loc 1 87 9 is_stmt 1 view .LVU448
 1767              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1768              		.loc 1 87 32 is_stmt 0 view .LVU449
 1769 080c 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.86
 1770              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1771              		.loc 1 87 26 view .LVU450
 1772 0810 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1773              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1774              		.loc 1 87 32 view .LVU451
 1775 0814 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1776 0818 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1777 081c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1778              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1779              		.loc 1 87 26 view .LVU452
 1780 0820 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1781 0824 FEFFFFEB 		bl	pow		@
 1782              	.LVL122:
 1783              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1784              		.loc 1 87 49 view .LVU453
 1785 0828 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1786              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1787              		.loc 1 87 24 view .LVU454
 1788 082c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1789 0830 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1790 0834 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1791              	.LVL123:
 1792              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1793              		.loc 1 86 5 view .LVU455
 1794 0838 060054E1 		cmp	r4, r6	@ ivtmp.86, _31
 1795 083c F2FFFF1A 		bne	.L111		@,
 1796              	.LVL124:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1797              		.loc 1 86 5 view .LVU456
 1798              	.LBE8:
 1799              	.LBE9:
 360:armwave.c     **** 
 361:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1800              		.loc 1 361 5 is_stmt 1 view .LVU457
 1801 0840 EEFDFFEB 		bl	armwave_setup_render.constprop.0		@
 1802              	.LVL125:
 362:armwave.c     **** 
 363:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1803              		.loc 1 363 5 view .LVU458
 1804              	@ armwave.c:364: }
 364:armwave.c     **** }
 1805              		.loc 1 364 1 is_stmt 0 view .LVU459
 1806 0844 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1807              		.cfi_restore 84
 1808              		.cfi_restore 85
 1809              		.cfi_restore 82
 1810              		.cfi_restore 83
 1811              		.cfi_restore 80
 1812              		.cfi_restore 81
 1813              		.cfi_def_cfa_offset 16
 1814              	@ armwave.c:363:     printf("armwave version: %s\n", ARMWAVE_VER);
 363:armwave.c     **** }
 1815              		.loc 1 363 5 view .LVU460
 1816 0848 24109FE5 		ldr	r1, .L114+28	@,
 1817 084c 24009FE5 		ldr	r0, .L114+32	@,
 1818              	@ armwave.c:364: }
 1819              		.loc 1 364 1 view .LVU461
 1820 0850 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1821              		.cfi_restore 14
 1822              		.cfi_restore 6
 1823              		.cfi_restore 5
 1824              		.cfi_restore 4
 1825              		.cfi_def_cfa_offset 0
 1826              	@ armwave.c:363:     printf("armwave version: %s\n", ARMWAVE_VER);
 363:armwave.c     **** }
 1827              		.loc 1 363 5 view .LVU462
 1828 0854 FEFFFFEA 		b	printf		@
 1829              	.LVL126:
 1830              	.L115:
 1831              		.align	3
 1832              	.L114:
 1833 0858 000000C0 		.word	-1073741824
 1834 085c CCCCEC3F 		.word	1072483532
 1835 0860 00000000 		.word	0
 1836 0864 00E06F40 		.word	1081073664
 1837 0868 00007F43 		.word	1132396544
 1838 086c 00000000 		.word	.LANCHOR1
 1839 0870 FFFFFFFF 		.word	gamma_table-1
 1840 0874 DC000000 		.word	.LC12
 1841 0878 E4000000 		.word	.LC13
 1842              		.cfi_endproc
 1843              	.LFE65:
 1845              		.global	__aeabi_uidiv
 1846              		.align	2
 1847              		.global	armwave_test_generate
 1848              		.syntax unified
 1849              		.arm
 1850              		.fpu vfp
 1852              	armwave_test_generate:
 1853              	.LFB66:
 365:armwave.c     **** 
 366:armwave.c     **** void armwave_test_generate()
 367:armwave.c     **** {
 1854              		.loc 1 367 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		@ args = 0, pretend = 0, frame = 8
 1857              		@ frame_needed = 0, uses_anonymous_args = 0
 368:armwave.c     **** 	uint32_t yy;
 1858              		.loc 1 368 2 view .LVU464
 369:armwave.c     **** 
 370:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1859              		.loc 1 370 5 view .LVU465
 1860              	@ armwave.c:367: {
 367:armwave.c     **** 	uint32_t yy;
 1861              		.loc 1 367 1 is_stmt 0 view .LVU466
 1862 087c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1863              		.cfi_def_cfa_offset 36
 1864              		.cfi_offset 4, -36
 1865              		.cfi_offset 5, -32
 1866              		.cfi_offset 6, -28
 1867              		.cfi_offset 7, -24
 1868              		.cfi_offset 8, -20
 1869              		.cfi_offset 9, -16
 1870              		.cfi_offset 10, -12
 1871              		.cfi_offset 11, -8
 1872              		.cfi_offset 14, -4
 1873              	@ armwave.c:370:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1874              		.loc 1 370 5 view .LVU467
 1875 0880 0010A0E3 		mov	r1, #0	@,
 1876 0884 44419FE5 		ldr	r4, .L134	@ tmp269,
 1877              	@ armwave.c:367: {
 367:armwave.c     **** 	uint32_t yy;
 1878              		.loc 1 367 1 view .LVU468
 1879 0888 0CD04DE2 		sub	sp, sp, #12	@,,
 1880              		.cfi_def_cfa_offset 48
 1881              	@ armwave.c:370:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1882              		.loc 1 370 5 view .LVU469
 1883 088c 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 1884 0890 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 1885 0894 FEFFFFEB 		bl	memset		@
 1886              	.LVL127:
 371:armwave.c     **** 
 372:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1887              		.loc 1 372 5 is_stmt 1 view .LVU470
 1888              	@ armwave.c:372:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1889              		.loc 1 372 45 is_stmt 0 view .LVU471
 1890 0898 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 1891              	@ armwave.c:372:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1892              		.loc 1 372 5 view .LVU472
 1893 089c 020B55E3 		cmp	r5, #2048	@ _72,
 1894 08a0 4800008A 		bhi	.L116		@,
 1895 08a4 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 1896              	@ armwave.c:372:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1897              		.loc 1 372 12 view .LVU473
 1898 08a8 00A0A0E3 		mov	r10, #0	@ yy,
 1899              	.LVL128:
 1900              	.L122:
 373:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1901              		.loc 1 373 9 is_stmt 1 discriminator 3 view .LVU474
 1902 08ac 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 1903              	.LBB12:
 1904              	.LBB13:
 1905              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1906              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU475
 1907 08b0 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1908              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1909              		.loc 1 109 5 discriminator 3 view .LVU476
 1910 08b4 000056E3 		cmp	r6, #0	@ prephitmp_171,
 1911              	.LBE13:
 1912              	.LBE12:
 1913              	@ armwave.c:373:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1914              		.loc 1 373 9 discriminator 3 view .LVU477
 1915 08b8 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 1916              	.LVL129:
 1917              	.LBB15:
 1918              	.LBI12:
  98:armwave.c     **** {
 1919              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU478
 1920              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 1921              		.loc 1 100 5 discriminator 3 view .LVU479
 101:armwave.c     ****     uint8_t *wave_base;
 1922              		.loc 1 101 5 discriminator 3 view .LVU480
 102:armwave.c     ****     uint8_t *write_buffer_base;
 1923              		.loc 1 102 5 discriminator 3 view .LVU481
 103:armwave.c     ****     uint8_t *write_buffer;
 1924              		.loc 1 103 5 discriminator 3 view .LVU482
 104:armwave.c     ****     
 1925              		.loc 1 104 5 discriminator 3 view .LVU483
 106:armwave.c     **** 
 1926              		.loc 1 106 5 discriminator 3 view .LVU484
 1927              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1928              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU485
 1929 08bc 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 1930              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1931              		.loc 1 106 40 discriminator 3 view .LVU486
 1932 08c0 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 1933              	.LVL130:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1934              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU487
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1935              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU488
 1936 08c4 3900000A 		beq	.L118		@,
 1937              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1938              		.loc 1 109 11 view .LVU489
 1939 08c8 0080A0E3 		mov	r8, #0	@ w,
 1940 08cc 043043E2 		sub	r3, r3, #4	@ _77, _3,
 1941              	.LVL131:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1942              		.loc 1 109 11 view .LVU490
 1943 08d0 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 1944              	.LVL132:
 1945              	.L121:
 110:armwave.c     **** 
 1946              		.loc 1 110 9 is_stmt 1 view .LVU491
 1947              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 1948              		.loc 1 110 64 is_stmt 0 view .LVU492
 1949 08d4 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1950              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1951              		.loc 1 120 9 view .LVU493
 1952 08d8 000059E3 		cmp	r9, #0	@ _4,
 1953              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 1954              		.loc 1 110 36 view .LVU494
 1955 08dc 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 1956              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 1957              		.loc 1 110 64 view .LVU495
 1958 08e0 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 1959              	.LVL133:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1960              		.loc 1 120 9 is_stmt 1 view .LVU496
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1961              		.loc 1 120 9 is_stmt 0 view .LVU497
 1962 08e4 2D00000A 		beq	.L119		@,
 1963 08e8 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 1964 08ec 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 1965              	.LVL134:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1966              		.loc 1 120 9 view .LVU498
 1967 08f0 03E08EE0 		add	lr, lr, r3	@ ivtmp.92, _16, tmp205
 1968              	.LVL135:
 1969              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1970              		.loc 1 120 16 view .LVU499
 1971 08f4 0010A0E3 		mov	r1, #0	@ yy,
 1972              	.LVL136:
 1973              	.L120:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1974              		.loc 1 135 13 is_stmt 1 view .LVU500
 1975              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1976              		.loc 1 135 18 is_stmt 0 view .LVU501
 1977 08f8 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 1978              	.LVL137:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 1979              		.loc 1 139 13 is_stmt 1 view .LVU502
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1980              		.loc 1 140 14 view .LVU503
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1981              		.loc 1 141 14 view .LVU504
 142:armwave.c     ****             	word >>= 8;
 1982              		.loc 1 142 14 view .LVU505
 1983              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1984              		.loc 1 140 42 is_stmt 0 view .LVU506
 1985 08fc 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1986              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1987              		.loc 1 141 60 view .LVU507
 1988 0900 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1989              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1990              		.loc 1 140 34 view .LVU508
 1991 0904 73C0EFE6 		uxtb	ip, r3	@ word, word
 1992              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 1993              		.loc 1 143 19 view .LVU509
 1994 0908 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 1995              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 1996              		.loc 1 142 44 view .LVU510
 1997 090c 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 1998              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1999              		.loc 1 140 34 view .LVU511
 2000 0910 7550EFE6 		uxtb	r5, r5	@ word, word
 2001              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2002              		.loc 1 142 44 view .LVU512
 2003 0914 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2004              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2005              		.loc 1 141 60 view .LVU513
 2006 0918 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2007              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2008              		.loc 1 143 19 view .LVU514
 2009 091c 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2010              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2011              		.loc 1 142 44 view .LVU515
 2012 0920 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2013              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2014              		.loc 1 140 34 view .LVU516
 2015 0924 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2016              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2017              		.loc 1 143 19 view .LVU517
 2018 0928 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2019              	.LVL138:
 2020              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2021              		.loc 1 142 44 view .LVU518
 2022 092c 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2023 0930 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2024              	.LVL139:
 143:armwave.c     ****     		}
 2025              		.loc 1 143 14 is_stmt 1 view .LVU519
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2026              		.loc 1 140 14 view .LVU520
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2027              		.loc 1 141 14 view .LVU521
 142:armwave.c     ****             	word >>= 8;
 2028              		.loc 1 142 14 view .LVU522
 2029              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2030              		.loc 1 140 42 is_stmt 0 view .LVU523
 2031 0934 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2032              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2033              		.loc 1 141 60 view .LVU524
 2034 0938 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2035              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2036              		.loc 1 142 44 view .LVU525
 2037 093c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2038              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2039              		.loc 1 141 60 view .LVU526
 2040 0940 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2041              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2042              		.loc 1 142 44 view .LVU527
 2043 0944 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2044              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2045              		.loc 1 141 60 view .LVU528
 2046 0948 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2047              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2048              		.loc 1 120 37 view .LVU529
 2049 094c 041081E2 		add	r1, r1, #4	@ yy, yy,
 2050              	.LVL140:
 2051              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2052              		.loc 1 142 44 view .LVU530
 2053 0950 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2054              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2055              		.loc 1 120 9 view .LVU531
 2056 0954 010059E1 		cmp	r9, r1	@ _4, yy
 2057              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2058              		.loc 1 142 44 view .LVU532
 2059 0958 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2060 095c 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2061              	.LVL141:
 143:armwave.c     ****     		}
 2062              		.loc 1 143 14 is_stmt 1 view .LVU533
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2063              		.loc 1 140 14 view .LVU534
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2064              		.loc 1 141 14 view .LVU535
 142:armwave.c     ****             	word >>= 8;
 2065              		.loc 1 142 14 view .LVU536
 2066              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2067              		.loc 1 140 42 is_stmt 0 view .LVU537
 2068 0960 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2069              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2070              		.loc 1 141 60 view .LVU538
 2071 0964 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2072              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2073              		.loc 1 142 44 view .LVU539
 2074 0968 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2075 096c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2076 0970 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2077 0974 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2078 0978 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****     		}
 2079              		.loc 1 143 14 is_stmt 1 view .LVU540
 2080              	.LVL142:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2081              		.loc 1 140 14 view .LVU541
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2082              		.loc 1 141 14 view .LVU542
 142:armwave.c     ****             	word >>= 8;
 2083              		.loc 1 142 14 view .LVU543
 2084              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2085              		.loc 1 140 42 is_stmt 0 view .LVU544
 2086 097c 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2087              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2088              		.loc 1 141 60 view .LVU545
 2089 0980 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2090              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2091              		.loc 1 142 44 view .LVU546
 2092 0984 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2093 0988 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2094 098c 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2095 0990 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2096 0994 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****     		}
 2097              		.loc 1 143 14 is_stmt 1 view .LVU547
 2098              	.LVL143:
 2099              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2100              		.loc 1 120 9 is_stmt 0 view .LVU548
 2101 0998 D6FFFF8A 		bhi	.L120		@,
 2102 099c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2103              	.LVL144:
 2104              	.L119:
 2105              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2106              		.loc 1 109 44 view .LVU549
 2107 09a0 018088E2 		add	r8, r8, #1	@ w, w,
 2108              	.LVL145:
 2109              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2110              		.loc 1 109 5 view .LVU550
 2111 09a4 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2112 09a8 C9FFFF3A 		bcc	.L121		@,
 2113 09ac 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2114              	.LVL146:
 2115              	.L118:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2116              		.loc 1 109 5 view .LVU551
 2117              	.LBE14:
 2118              	.LBE15:
 2119              	@ armwave.c:372:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 372:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2120              		.loc 1 372 28 discriminator 3 view .LVU552
 2121 09b0 0510A0E1 		mov	r1, r5	@, _72
 2122 09b4 020BA0E3 		mov	r0, #2048	@,
 2123              	.LVL147:
 372:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2124              		.loc 1 372 28 discriminator 3 view .LVU553
 2125 09b8 FEFFFFEB 		bl	__aeabi_uidiv		@
 2126              	.LVL148:
 2127              	@ armwave.c:372:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 372:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2128              		.loc 1 372 63 discriminator 3 view .LVU554
 2129 09bc 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2130              	.LVL149:
 2131              	@ armwave.c:372:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 372:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2132              		.loc 1 372 5 discriminator 3 view .LVU555
 2133 09c0 0A0050E1 		cmp	r0, r10	@, yy
 2134 09c4 B8FFFF8A 		bhi	.L122		@,
 2135              	.LVL150:
 2136              	.L116:
 2137              	@ armwave.c:375: }
 374:armwave.c     ****     }
 375:armwave.c     **** }
 2138              		.loc 1 375 1 view .LVU556
 2139 09c8 0CD08DE2 		add	sp, sp, #12	@,,
 2140              		.cfi_def_cfa_offset 36
 2141              		@ sp needed	@
 2142 09cc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2143              	.L135:
 2144              		.align	2
 2145              	.L134:
 2146 09d0 00000000 		.word	g_armwave_state
 2147              		.cfi_endproc
 2148              	.LFE66:
 2150              		.align	2
 2151              		.global	armwave_test_get_buffer
 2152              		.syntax unified
 2153              		.arm
 2154              		.fpu vfp
 2156              	armwave_test_get_buffer:
 2157              	.LFB67:
 376:armwave.c     **** 
 377:armwave.c     **** PyObject *armwave_test_get_buffer()
 378:armwave.c     **** {
 2158              		.loc 1 378 1 is_stmt 1 view -0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 0
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     PyObject *mv;
 2162              		.loc 1 379 5 view .LVU558
 380:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2163              		.loc 1 380 5 view .LVU559
 2164              	@ armwave.c:378: {
 378:armwave.c     ****     PyObject *mv;
 2165              		.loc 1 378 1 is_stmt 0 view .LVU560
 2166 09d4 30402DE9 		push	{r4, r5, lr}	@
 2167              		.cfi_def_cfa_offset 12
 2168              		.cfi_offset 4, -12
 2169              		.cfi_offset 5, -8
 2170              		.cfi_offset 14, -4
 2171              	@ armwave.c:380:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2172              		.loc 1 380 22 view .LVU561
 2173 09d8 2C00A0E3 		mov	r0, #44	@,
 2174              	@ armwave.c:378: {
 378:armwave.c     ****     PyObject *mv;
 2175              		.loc 1 378 1 view .LVU562
 2176 09dc 0CD04DE2 		sub	sp, sp, #12	@,,
 2177              		.cfi_def_cfa_offset 24
 2178              	@ armwave.c:380:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2179              		.loc 1 380 22 view .LVU563
 2180 09e0 FEFFFFEB 		bl	malloc		@
 2181              	.LVL151:
 2182              	@ armwave.c:382:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 381:armwave.c     ****     
 382:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2183              		.loc 1 382 5 view .LVU564
 2184 09e4 3C409FE5 		ldr	r4, .L138	@ tmp118,
 2185              	@ armwave.c:380:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 380:armwave.c     ****     
 2186              		.loc 1 380 22 view .LVU565
 2187 09e8 0050A0E1 		mov	r5, r0	@ tmp117,
 2188              	.LVL152:
 2189              		.loc 1 382 5 is_stmt 1 view .LVU566
 2190 09ec 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2191              	.LVL153:
 2192              		.loc 1 382 5 is_stmt 0 view .LVU567
 2193 09f0 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2194              	.LVL154:
 383:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2195              		.loc 1 383 5 is_stmt 1 view .LVU568
 2196              	@ armwave.c:383:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2197              		.loc 1 383 79 is_stmt 0 view .LVU569
 2198 09f4 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2199              	@ armwave.c:383:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2200              		.loc 1 383 5 view .LVU570
 2201 09f8 08C0A0E3 		mov	ip, #8	@ tmp125,
 2202 09fc 0110A0E3 		mov	r1, #1	@ tmp126,
 2203 0a00 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2204 0a04 02108DE8 		stm	sp, {r1, ip}	@,,
 2205 0a08 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2206 0a0c 0500A0E1 		mov	r0, r5	@, tmp117
 2207 0a10 0010A0E3 		mov	r1, #0	@,
 2208 0a14 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2209              	.LVL155:
 384:armwave.c     **** 
 385:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2210              		.loc 1 385 2 is_stmt 1 view .LVU571
 2211              	@ armwave.c:385: 	mv = PyMemoryView_FromBuffer(buf);
 2212              		.loc 1 385 7 is_stmt 0 view .LVU572
 2213 0a18 0500A0E1 		mov	r0, r5	@, tmp117
 2214              	@ armwave.c:386: }
 386:armwave.c     **** }
 2215              		.loc 1 386 1 view .LVU573
 2216 0a1c 0CD08DE2 		add	sp, sp, #12	@,,
 2217              		.cfi_def_cfa_offset 12
 2218              		@ sp needed	@
 2219 0a20 3040BDE8 		pop	{r4, r5, lr}	@
 2220              		.cfi_restore 14
 2221              		.cfi_restore 5
 2222              		.cfi_restore 4
 2223              		.cfi_def_cfa_offset 0
 2224              	.LVL156:
 2225              	@ armwave.c:385: 	mv = PyMemoryView_FromBuffer(buf);
 385:armwave.c     **** }
 2226              		.loc 1 385 7 view .LVU574
 2227 0a24 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2228              	.LVL157:
 2229              	.L139:
 385:armwave.c     **** }
 2230              		.loc 1 385 7 view .LVU575
 2231              		.align	2
 2232              	.L138:
 2233 0a28 00000000 		.word	g_armwave_state
 2234              		.cfi_endproc
 2235              	.LFE67:
 2237              		.align	2
 2238              		.global	armwave_test_dump_buffer_to_ppm
 2239              		.syntax unified
 2240              		.arm
 2241              		.fpu vfp
 2243              	armwave_test_dump_buffer_to_ppm:
 2244              	.LVL158:
 2245              	.LFB68:
 387:armwave.c     **** 
 388:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 389:armwave.c     **** {
 2246              		.loc 1 389 1 is_stmt 1 view -0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 0
 2249              		@ frame_needed = 0, uses_anonymous_args = 0
 2250              		@ link register save eliminated.
 390:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2251              		.loc 1 390 2 view .LVU577
 2252 0a2c 08309FE5 		ldr	r3, .L141	@ tmp112,
 2253 0a30 0010A0E1 		mov	r1, r0	@, fn
 2254 0a34 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2255              	.LVL159:
 2256              		.loc 1 390 2 is_stmt 0 view .LVU578
 2257 0a38 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2258              	.LVL160:
 2259              	.L142:
 2260              		.loc 1 390 2 view .LVU579
 2261              		.align	2
 2262              	.L141:
 2263 0a3c 00000000 		.word	g_armwave_state
 2264              		.cfi_endproc
 2265              	.LFE68:
 2267              		.align	2
 2268              		.global	armwave_cleanup
 2269              		.syntax unified
 2270              		.arm
 2271              		.fpu vfp
 2273              	armwave_cleanup:
 2274              	.LFB69:
 391:armwave.c     **** }
 392:armwave.c     **** 
 393:armwave.c     **** void armwave_cleanup()
 394:armwave.c     **** {
 2275              		.loc 1 394 1 is_stmt 1 view -0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
 395:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2279              		.loc 1 395 2 view .LVU581
 2280              	@ armwave.c:394: {
 394:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2281              		.loc 1 394 1 is_stmt 0 view .LVU582
 2282 0a40 10402DE9 		push	{r4, lr}	@
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 4, -8
 2285              		.cfi_offset 14, -4
 2286              	@ armwave.c:395: 	free(g_armwave_state.out_pixbuf);
 2287              		.loc 1 395 22 view .LVU583
 2288 0a44 28409FE5 		ldr	r4, .L145	@ tmp113,
 2289              	@ armwave.c:395: 	free(g_armwave_state.out_pixbuf);
 2290              		.loc 1 395 2 view .LVU584
 2291 0a48 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2292 0a4c FEFFFFEB 		bl	free		@
 2293              	.LVL161:
 396:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2294              		.loc 1 396 2 is_stmt 1 view .LVU585
 2295 0a50 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2296 0a54 FEFFFFEB 		bl	free		@
 2297              	.LVL162:
 397:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2298              		.loc 1 397 2 view .LVU586
 2299 0a58 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.xcoord_to_xpixel
 2300 0a5c FEFFFFEB 		bl	free		@
 2301              	.LVL163:
 398:armwave.c     **** 
 399:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2302              		.loc 1 399 2 view .LVU587
 2303              	@ armwave.c:399: 	g_armwave_state.out_pixbuf = NULL;
 2304              		.loc 1 399 29 is_stmt 0 view .LVU588
 2305 0a60 0030A0E3 		mov	r3, #0	@ tmp120,
 2306 0a64 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 400:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2307              		.loc 1 400 2 is_stmt 1 view .LVU589
 2308              	@ armwave.c:400: 	g_armwave_state.ch1_buffer = NULL;
 2309              		.loc 1 400 29 is_stmt 0 view .LVU590
 2310 0a68 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 401:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2311              		.loc 1 401 2 is_stmt 1 view .LVU591
 2312              	@ armwave.c:401: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2313              		.loc 1 401 35 is_stmt 0 view .LVU592
 2314 0a6c 583084E5 		str	r3, [r4, #88]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2315              	@ armwave.c:402: }
 402:armwave.c     **** }
 2316              		.loc 1 402 1 view .LVU593
 2317 0a70 1080BDE8 		pop	{r4, pc}	@
 2318              	.L146:
 2319              		.align	2
 2320              	.L145:
 2321 0a74 00000000 		.word	g_armwave_state
 2322              		.cfi_endproc
 2323              	.LFE69:
 2325              		.section	.text.startup,"ax",%progbits
 2326              		.align	2
 2327              		.global	main
 2328              		.syntax unified
 2329              		.arm
 2330              		.fpu vfp
 2332              	main:
 2333              	.LVL164:
 2334              	.LFB70:
 403:armwave.c     **** 
 404:armwave.c     **** int main(int argc, char *argv[])
 405:armwave.c     **** {
 2335              		.loc 1 405 1 is_stmt 1 view -0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 8
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 406:armwave.c     ****     uint32_t *out_buffer;
 2339              		.loc 1 406 5 view .LVU595
 407:armwave.c     ****     uint32_t xx, yy, n;
 2340              		.loc 1 407 5 view .LVU596
 408:armwave.c     **** 
 409:armwave.c     ****     //printf("Starting armwave...\n");
 410:armwave.c     ****     armwave_init();
 2341              		.loc 1 410 5 view .LVU597
 2342              	.LBB20:
 2343              	.LBI20:
 151:armwave.c     **** {
 2344              		.loc 1 151 6 view .LVU598
 2345              	.LBB21:
 153:armwave.c     **** }
 2346              		.loc 1 153 5 view .LVU599
 2347              	.LBE21:
 2348              	.LBE20:
 2349              	@ armwave.c:405: {
 405:armwave.c     ****     uint32_t *out_buffer;
 2350              		.loc 1 405 1 is_stmt 0 view .LVU600
 2351 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2352              		.cfi_def_cfa_offset 36
 2353              		.cfi_offset 4, -36
 2354              		.cfi_offset 5, -32
 2355              		.cfi_offset 6, -28
 2356              		.cfi_offset 7, -24
 2357              		.cfi_offset 8, -20
 2358              		.cfi_offset 9, -16
 2359              		.cfi_offset 10, -12
 2360              		.cfi_offset 11, -8
 2361              		.cfi_offset 14, -4
 2362 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2363              		.cfi_def_cfa_offset 48
 2364              	.LBB25:
 2365              	.LBB22:
 2366              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2367              		.loc 1 153 27 view .LVU601
 2368 0008 68919FE5 		ldr	r9, .L167	@ tmp267,
 2369              	.LBE22:
 2370              	.LBE25:
 2371              	@ armwave.c:419:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 411:armwave.c     **** 
 412:armwave.c     ****     //printf("Creating test waveform...\n");
 413:armwave.c     ****     test_create_waveform();
 414:armwave.c     **** 
 415:armwave.c     ****     //printf("Creating gamma LUT...\n");
 416:armwave.c     ****     test_create_gamma();
 417:armwave.c     **** 
 418:armwave.c     ****     //printf("Setting up render...\n");
 419:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2372              		.loc 1 419 5 view .LVU602
 2373 000c 68219FE5 		ldr	r2, .L167+4	@ ivtmp_191,
 2374              	.LBB26:
 2375              	.LBB23:
 2376              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2377              		.loc 1 153 27 view .LVU603
 2378 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2379              	.LBE23:
 2380              	.LBE26:
 2381              	@ armwave.c:419:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2382              		.loc 1 419 5 view .LVU604
 2383 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2384              	.LBB27:
 2385              	.LBB24:
 2386              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2387              		.loc 1 153 27 view .LVU605
 2388 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2389              	.LBE24:
 2390              	.LBE27:
 413:armwave.c     **** 
 2391              		.loc 1 413 5 is_stmt 1 view .LVU606
 2392 001c FEFFFFEB 		bl	test_create_waveform		@
 2393              	.LVL165:
 416:armwave.c     **** 
 2394              		.loc 1 416 5 view .LVU607
 2395 0020 FEFFFFEB 		bl	test_create_gamma		@
 2396              	.LVL166:
 2397              		.loc 1 419 5 view .LVU608
 2398 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2399              	.LVL167:
 420:armwave.c     **** 
 421:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 422:armwave.c     **** 
 423:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2400              		.loc 1 423 5 view .LVU609
 2401              		.loc 1 423 5 is_stmt 0 view .LVU610
 2402 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2403              	.LVL168:
 2404              	.L148:
 2405              	@ armwave.c:424:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 424:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2406              		.loc 1 424 9 view .LVU611
 2407 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2408 0030 4900008A 		bhi	.L156		@,
 2409 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2410              	@ armwave.c:424:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2411              		.loc 1 424 16 view .LVU612
 2412 0038 0080A0E3 		mov	r8, #0	@ yy,
 2413 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2414              	.LVL169:
 2415              	.L153:
 425:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 426:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2416              		.loc 1 426 13 is_stmt 1 discriminator 3 view .LVU613
 2417 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2418              	.LBB28:
 2419              	.LBB29:
 2420              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2421              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU614
 2422 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2423              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2424              		.loc 1 109 5 discriminator 3 view .LVU615
 2425 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2426              	.LBE29:
 2427              	.LBE28:
 2428              	@ armwave.c:426:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2429              		.loc 1 426 13 discriminator 3 view .LVU616
 2430 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2431              	.LVL170:
 2432              	.LBB31:
 2433              	.LBI28:
  98:armwave.c     **** {
 2434              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU617
 2435              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 2436              		.loc 1 100 5 discriminator 3 view .LVU618
 101:armwave.c     ****     uint8_t *wave_base;
 2437              		.loc 1 101 5 discriminator 3 view .LVU619
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2438              		.loc 1 102 5 discriminator 3 view .LVU620
 103:armwave.c     ****     uint8_t *write_buffer;
 2439              		.loc 1 103 5 discriminator 3 view .LVU621
 104:armwave.c     ****     
 2440              		.loc 1 104 5 discriminator 3 view .LVU622
 106:armwave.c     **** 
 2441              		.loc 1 106 5 discriminator 3 view .LVU623
 2442              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2443              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU624
 2444 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2445              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2446              		.loc 1 106 40 discriminator 3 view .LVU625
 2447 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2448              	.LVL171:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2449              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU626
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2450              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU627
 2451 0058 3900000A 		beq	.L149		@,
 2452              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2453              		.loc 1 109 11 view .LVU628
 2454 005c 0070A0E3 		mov	r7, #0	@ w,
 2455 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2456              	.LVL172:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2457              		.loc 1 109 11 view .LVU629
 2458 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2459              	.LVL173:
 2460              	.L152:
 110:armwave.c     **** 
 2461              		.loc 1 110 9 is_stmt 1 view .LVU630
 2462              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2463              		.loc 1 110 64 is_stmt 0 view .LVU631
 2464 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2465              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2466              		.loc 1 120 9 view .LVU632
 2467 006c 00005AE3 		cmp	r10, #0	@ _2,
 2468              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2469              		.loc 1 110 36 view .LVU633
 2470 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2471              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2472              		.loc 1 110 64 view .LVU634
 2473 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2474              	.LVL174:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2475              		.loc 1 120 9 is_stmt 1 view .LVU635
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2476              		.loc 1 120 9 is_stmt 0 view .LVU636
 2477 0078 2D00000A 		beq	.L150		@,
 2478 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2479 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2480              	.LVL175:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2481              		.loc 1 120 9 view .LVU637
 2482 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.105, _20, tmp202
 2483              	.LVL176:
 2484              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2485              		.loc 1 120 16 view .LVU638
 2486 0088 0010A0E3 		mov	r1, #0	@ yy,
 2487              	.LVL177:
 2488              	.L151:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2489              		.loc 1 135 13 is_stmt 1 view .LVU639
 2490              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2491              		.loc 1 135 18 is_stmt 0 view .LVU640
 2492 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2493              	.LVL178:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2494              		.loc 1 139 13 is_stmt 1 view .LVU641
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2495              		.loc 1 140 14 view .LVU642
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2496              		.loc 1 141 14 view .LVU643
 142:armwave.c     ****             	word >>= 8;
 2497              		.loc 1 142 14 view .LVU644
 2498              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2499              		.loc 1 140 42 is_stmt 0 view .LVU645
 2500 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2501              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2502              		.loc 1 141 60 view .LVU646
 2503 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2504              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2505              		.loc 1 140 34 view .LVU647
 2506 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2507              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2508              		.loc 1 143 19 view .LVU648
 2509 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2510              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2511              		.loc 1 142 44 view .LVU649
 2512 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2513              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2514              		.loc 1 140 34 view .LVU650
 2515 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2516              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2517              		.loc 1 142 44 view .LVU651
 2518 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2519              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2520              		.loc 1 141 60 view .LVU652
 2521 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2522              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2523              		.loc 1 143 19 view .LVU653
 2524 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2525              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2526              		.loc 1 142 44 view .LVU654
 2527 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2528              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2529              		.loc 1 140 34 view .LVU655
 2530 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2531              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2532              		.loc 1 143 19 view .LVU656
 2533 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2534              	.LVL179:
 2535              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2536              		.loc 1 142 44 view .LVU657
 2537 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2538 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2539              	.LVL180:
 143:armwave.c     ****     		}
 2540              		.loc 1 143 14 is_stmt 1 view .LVU658
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2541              		.loc 1 140 14 view .LVU659
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2542              		.loc 1 141 14 view .LVU660
 142:armwave.c     ****             	word >>= 8;
 2543              		.loc 1 142 14 view .LVU661
 2544              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2545              		.loc 1 140 42 is_stmt 0 view .LVU662
 2546 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2547              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2548              		.loc 1 141 60 view .LVU663
 2549 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2550              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2551              		.loc 1 142 44 view .LVU664
 2552 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2553              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2554              		.loc 1 141 60 view .LVU665
 2555 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2556              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2557              		.loc 1 142 44 view .LVU666
 2558 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2559              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2560              		.loc 1 141 60 view .LVU667
 2561 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2562              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2563              		.loc 1 120 37 view .LVU668
 2564 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2565              	.LVL181:
 2566              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2567              		.loc 1 142 44 view .LVU669
 2568 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2569              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2570              		.loc 1 120 9 view .LVU670
 2571 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2572              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2573              		.loc 1 142 44 view .LVU671
 2574 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2575 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2576              	.LVL182:
 143:armwave.c     ****     		}
 2577              		.loc 1 143 14 is_stmt 1 view .LVU672
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2578              		.loc 1 140 14 view .LVU673
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2579              		.loc 1 141 14 view .LVU674
 142:armwave.c     ****             	word >>= 8;
 2580              		.loc 1 142 14 view .LVU675
 2581              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2582              		.loc 1 140 42 is_stmt 0 view .LVU676
 2583 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2584              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2585              		.loc 1 141 60 view .LVU677
 2586 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2587              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2588              		.loc 1 142 44 view .LVU678
 2589 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2590 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2591 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2592 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2593 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****     		}
 2594              		.loc 1 143 14 is_stmt 1 view .LVU679
 2595              	.LVL183:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2596              		.loc 1 140 14 view .LVU680
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2597              		.loc 1 141 14 view .LVU681
 142:armwave.c     ****             	word >>= 8;
 2598              		.loc 1 142 14 view .LVU682
 2599              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2600              		.loc 1 140 42 is_stmt 0 view .LVU683
 2601 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2602              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2603              		.loc 1 141 60 view .LVU684
 2604 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2605              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2606              		.loc 1 142 44 view .LVU685
 2607 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2608 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2609 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2610 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2611 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****     		}
 2612              		.loc 1 143 14 is_stmt 1 view .LVU686
 2613              	.LVL184:
 2614              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2615              		.loc 1 120 9 is_stmt 0 view .LVU687
 2616 012c D6FFFF8A 		bhi	.L151		@,
 2617 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2618              	.LVL185:
 2619              	.L150:
 2620              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2621              		.loc 1 109 44 view .LVU688
 2622 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2623              	.LVL186:
 2624              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2625              		.loc 1 109 5 view .LVU689
 2626 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2627 013c C9FFFF3A 		bcc	.L152		@,
 2628 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2629              	.LVL187:
 2630              	.L149:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2631              		.loc 1 109 5 view .LVU690
 2632              	.LBE30:
 2633              	.LBE31:
 2634              	@ armwave.c:424:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 424:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2635              		.loc 1 424 32 discriminator 3 view .LVU691
 2636 0144 0510A0E1 		mov	r1, r5	@, _61
 2637 0148 020BA0E3 		mov	r0, #2048	@,
 2638              	.LVL188:
 424:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2639              		.loc 1 424 32 discriminator 3 view .LVU692
 2640 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2641              	.LVL189:
 2642              	@ armwave.c:424:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 424:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2643              		.loc 1 424 67 discriminator 3 view .LVU693
 2644 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2645              	.LVL190:
 2646              	@ armwave.c:424:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 424:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2647              		.loc 1 424 9 discriminator 3 view .LVU694
 2648 0154 080050E1 		cmp	r0, r8	@, yy
 2649 0158 B8FFFF8A 		bhi	.L153		@,
 2650              	.LVL191:
 2651              	.L156:
 2652              	@ armwave.c:423:     for(n = 0; n < 5000; n++) {
 423:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2653              		.loc 1 423 5 discriminator 2 view .LVU695
 2654 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2655 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2656 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2657 0168 AFFFFF1A 		bne	.L148		@,
 2658 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 427:armwave.c     ****         }
 428:armwave.c     ****     }
 429:armwave.c     **** 
 430:armwave.c     ****     /*
 431:armwave.c     ****     printf("Creating pixbuf\n");
 432:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 433:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 434:armwave.c     **** 
 435:armwave.c     ****     printf("Dumping pixbuf\n");
 436:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 437:armwave.c     ****     */
 438:armwave.c     **** 
 439:armwave.c     ****     return 0;
 2659              		.loc 1 439 5 is_stmt 1 view .LVU696
 2660              	@ armwave.c:440: }
 440:armwave.c     **** }...
 2661              		.loc 1 440 1 is_stmt 0 view .LVU697
 2662 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2663              		.cfi_def_cfa_offset 36
 2664              		@ sp needed	@
 2665 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2666              	.L168:
 2667              		.align	2
 2668              	.L167:
 2669 0178 00000000 		.word	g_armwave_state
 2670 017c 88130000 		.word	5000
 2671              		.cfi_endproc
 2672              	.LFE70:
 2674              		.global	mod_depth
 2675              		.global	overall_scale
 2676              		.comm	gamma_table,256,4
 2677              		.comm	test_wave_buffer,131072,4
 2678              		.comm	g_armwave_state,92,4
 2679              		.section	.rodata
 2680              		.align	2
 2681              		.set	.LANCHOR0,. + 0
 2684              	__PRETTY_FUNCTION__.16995:
 2685 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2685      6176655F 
 2685      73657475 
 2685      705F7265 
 2685      6E646572 
 2686 0015 000000   		.space	3
 2689              	__PRETTY_FUNCTION__.17021:
 2690 0018 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2690      6176655F 
 2690      66696C6C 
 2690      5F706978 
 2690      62756632 
 2691 002d 000000   		.space	3
 2694              	overall_scale:
 2695 0030 00002041 		.word	1092616192
 2696              		.bss
 2697              		.align	2
 2698              		.set	.LANCHOR1,. + 0
 2701              	mod_depth:
 2702 0000 00000000 		.space	4
 2703              		.section	.rodata.str1.4,"aMS",%progbits,1
 2704              		.align	2
 2705              	.LC0:
 2706 0000 61726D77 		.ascii	"armwave.c\000"
 2706      6176652E 
 2706      6300
 2707 000a 0000     		.space	2
 2708              	.LC1:
 2709 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2709      6D776176 
 2709      655F7374 
 2709      6174652E 
 2709      6368315F 
 2710 002f 00       		.space	1
 2711              	.LC2:
 2712 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2712      6D776176 
 2712      655F7374 
 2712      6174652E 
 2712      78636F6F 
 2713 0059 000000   		.space	3
 2714              	.LC3:
 2715 005c 73746172 		.ascii	"start_point < end_point\000"
 2715      745F706F 
 2715      696E7420 
 2715      3C20656E 
 2715      645F706F 
 2716              	.LC4:
 2717 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 2717      6765745F 
 2717      68656967 
 2717      68742025 
 2717      20323536 
 2718 008f 00       		.space	1
 2719              	.LC5:
 2720 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2720      62756666 
 2720      65722021 
 2720      3D204E55 
 2720      4C4C00
 2721 00a3 00       		.space	1
 2722              	.LC6:
 2723 00a4 25642025 		.ascii	"%d %d,%d (%d)\012\000"
 2723      642C2564 
 2723      20282564 
 2723      290A00
 2724 00b3 00       		.space	1
 2725              	.LC7:
 2726 00b4 776200   		.ascii	"wb\000"
 2727 00b7 00       		.space	1
 2728              	.LC8:
 2729 00b8 50330A00 		.ascii	"P3\012\000"
 2730              	.LC9:
 2731 00bc 25642025 		.ascii	"%d %d\012\000"
 2731      640A00
 2732 00c3 00       		.space	1
 2733              	.LC10:
 2734 00c4 3235350A 		.ascii	"255\012\000"
 2734      00
 2735 00c9 000000   		.space	3
 2736              	.LC11:
 2737 00cc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2737      25336420 
 2737      2533640A 
 2737      00
 2738 00d9 000000   		.space	3
 2739              	.LC12:
 2740 00dc 76302E30 		.ascii	"v0.0.1\000"
 2740      2E3100
 2741 00e3 00       		.space	1
 2742              	.LC13:
 2743 00e4 61726D77 		.ascii	"armwave version: %s\012\000"
 2743      61766520 
 2743      76657273 
 2743      696F6E3A 
 2743      2025730A 
 2744              		.text
 2745              	.Letext0:
 2746              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2747              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2748              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2749              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2750              		.file 6 "/usr/include/stdio.h"
 2751              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2752              		.file 8 "/usr/include/errno.h"
 2753              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2754              		.file 10 "/usr/include/unistd.h"
 2755              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2756              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2757              		.file 13 "/usr/local/include/python3.8/pyport.h"
 2758              		.file 14 "/usr/include/math.h"
 2759              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2760              		.file 16 "/usr/include/time.h"
 2761              		.file 17 "/usr/local/include/python3.8/pymem.h"
 2762              		.file 18 "/usr/local/include/python3.8/object.h"
 2763              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2764              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2765              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2766              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2767              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2768              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2769              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2770              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2771              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2772              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2773              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2774              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2775              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2776              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2777              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2778              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2779              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2780              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2781              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2782              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2783              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2784              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2785              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2786              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2787              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2788              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2789              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2790              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2791              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2792              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2793              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2794              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2795              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2796              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2797              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2798              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2799              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2800              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2801              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2802              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2803              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2804              		.file 60 "/usr/local/include/python3.8/context.h"
 2805              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2806              		.file 62 "/usr/local/include/python3.8/code.h"
 2807              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2808              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2809              		.file 65 "/usr/local/include/python3.8/import.h"
 2810              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2811              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2812              		.file 68 "armwave.h"
 2813              		.file 69 "/usr/include/stdlib.h"
 2814              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 2815              		.file 71 "<built-in>"
 2816              		.file 72 "/usr/include/assert.h"
 2817              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
