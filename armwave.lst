   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 70 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0020A0E1 		mov	r2, r0	@ slice_y, slice_y
 249              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 250              		.loc 1 70 40 view .LVU32
 251 00a4 7C519FE5 		ldr	r5, .L27	@ tmp283,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 14D04DE2 		sub	sp, sp, #20	@,,
 255              		.cfi_def_cfa_offset 56
 256              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 257              		.loc 1 70 63 view .LVU34
 258 00ac 407095E5 		ldr	r7, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  71:armwave.c     **** 
  72:armwave.c     ****     // roll through each waveform
  73:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 73 5 view .LVU35
 261 00b0 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 263              		.loc 1 63 1 view .LVU36
 264 00b4 0C008DE5 		str	r0, [sp, #12]	@ slice_y, %sfp
 265              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 73 5 view .LVU37
 267 00b8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 271              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 272              		.loc 1 70 40 view .LVU39
 273 00c0 040095E5 		ldr	r0, [r5, #4]	@ _1, g_armwave_state.ch1_buffer
 274              	.LVL7:
 275              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 276              		.loc 1 70 63 view .LVU40
 277 00c4 970207E0 		mul	r7, r7, r2	@ _4, g_armwave_state.bitdepth_height, slice_y
 278              	.LVL8:
 279              		.loc 1 73 5 is_stmt 1 view .LVU41
 280              		.loc 1 73 5 is_stmt 0 view .LVU42
 281 00c8 540000DA 		ble	.L11		@,
 282 00cc 000051E3 		cmp	r1, #0	@ height,
 283 00d0 5200000A 		beq	.L11		@,
 284              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
 285              		.loc 1 73 11 view .LVU43
 286 00d4 0030A0E3 		mov	r3, #0	@ w,
 287 00d8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 288              	.LVL9:
 289              	.L18:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 74 9 is_stmt 1 view .LVU44
 291              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 292              		.loc 1 74 64 is_stmt 0 view .LVU45
 293 00dc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 294              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 295              		.loc 1 74 59 view .LVU46
 296 00e0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 297 00e4 0C109DE5 		ldr	r1, [sp, #12]	@ slice_y, %sfp
 298              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 299              		.loc 1 74 36 view .LVU47
 300 00e8 14A095E5 		ldr	r10, [r5, #20]	@ _5, g_armwave_state.wave_buffer
 301              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 302              		.loc 1 74 59 view .LVU48
 303 00ec 931223E0 		mla	r3, r3, r2, r1	@ _9, g_armwave_state.wave_stride, w, slice_y
 304              	.LVL10:
  75:armwave.c     **** 
  76:armwave.c     ****         // roll through y and render the slice into the out buffer
  77:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  78:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 305              		.loc 1 78 9 is_stmt 1 view .LVU49
 306              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 78 16 is_stmt 0 view .LVU50
 308 00f0 00C0A0E3 		mov	ip, #0	@ yy,
 309 00f4 03A08AE0 		add	r10, r10, r3	@ tmp282, _5, _9
 310              	.LVL11:
 311              	.L17:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 312              		.loc 1 79 13 is_stmt 1 view .LVU51
  80:armwave.c     **** 
  81:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  82:armwave.c     ****                 scale_value = word & 0xff;
  83:armwave.c     ****                 
  84:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  85:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  86:armwave.c     ****                     continue;
  87:armwave.c     **** 
  88:armwave.c     ****                 // Keep math in integer where possible using the compound X multiplier and a shift 
  89:armwave.c     ****                 // of X to 1/256 but this should not be an ultimate issue.
  90:armwave.c     ****                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cmp_x_bitdepth_sca
 313              		.loc 1 90 17 view .LVU52
 314              		.loc 1 90 17 view .LVU53
  91:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 91 17 view .LVU54
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 316              		.loc 1 90 17 view .LVU55
 317              		.loc 1 91 17 view .LVU56
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 90 17 view .LVU57
 319              		.loc 1 91 17 view .LVU58
 320              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 321              		.loc 1 79 50 is_stmt 0 view .LVU59
 322 00f8 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 90 64 view .LVU60
 325 00fc 01908CE2 		add	r9, ip, #1	@ tmp233, yy,
 326 0100 02808CE2 		add	r8, ip, #2	@ tmp252, yy,
 327              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 328              		.loc 1 79 50 view .LVU61
 329 0104 930C03E0 		mul	r3, r3, ip	@ tmp207, g_armwave_state.cmp_x_bitdepth_scale, yy
 330              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 90 64 view .LVU62
 332 0108 03608CE2 		add	r6, ip, #3	@ tmp269, yy,
 333              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 334              		.loc 1 79 18 view .LVU63
 335 010c 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 336              	.LVL12:
  79:armwave.c     **** 
 337              		.loc 1 79 18 view .LVU64
 338 0110 23249AE7 		ldr	r2, [r10, r3, lsr #8]	@ word, MEM[(uint32_t *)_14]
 339              	.LVL13:
  81:armwave.c     ****                 scale_value = word & 0xff;
 340              		.loc 1 81 13 is_stmt 1 view .LVU65
  82:armwave.c     ****                 
 341              		.loc 1 82 17 view .LVU66
  85:armwave.c     ****                     continue;
 342              		.loc 1 85 17 view .LVU67
 343              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 344              		.loc 1 79 90 is_stmt 0 view .LVU68
 345 0114 2334A0E1 		lsr	r3, r3, #8	@ _13, tmp207,
 346              	.LVL14:
 347              		.loc 1 91 17 is_stmt 1 view .LVU69
 348              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 349              		.loc 1 85 20 is_stmt 0 view .LVU70
 350 0118 FFB012E2 		ands	fp, r2, #255	@ scale_value, word,
 351 011c 0140A003 		moveq	r4, #1	@ tmp212,
 352 0120 0040A013 		movne	r4, #0	@ tmp212,
 353              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 354              		.loc 1 85 19 view .LVU71
 355 0124 FF005BE3 		cmp	fp, #255	@ scale_value,
 356 0128 01408403 		orreq	r4, r4, #1	@,, tmp217, tmp212
 357              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 91 47 view .LVU72
 359 012c 033087E0 		add	r3, r7, r3	@ tmp218, _4, _13
 360              	.LVL15:
 361              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 362              		.loc 1 85 19 view .LVU73
 363 0130 000054E3 		cmp	r4, #0	@ tmp217,
 364              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****                 word >>= 8;
 365              		.loc 1 92 22 view .LVU74
 366 0134 22E4A0E1 		lsr	lr, r2, #8	@ word, word,
 367 0138 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 368              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 369              		.loc 1 91 47 view .LVU75
 370 013c 0B3083E0 		add	r3, r3, fp	@ tmp219, tmp218, scale_value
 371              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 372              		.loc 1 85 19 view .LVU76
 373 0140 2D00001A 		bne	.L20		@,
 374              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 375              		.loc 1 85 20 view .LVU77
 376 0144 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 377              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 378              		.loc 1 91 47 view .LVU78
 379 0148 0340D0E7 		ldrb	r4, [r0, r3]	@ zero_extendqisi2	@ *_73, *_73
 380              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 381              		.loc 1 85 20 view .LVU79
 382 014c 01B0A003 		moveq	fp, #1	@ tmp226,
 383 0150 00B0A013 		movne	fp, #0	@ tmp226,
 384              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 385              		.loc 1 85 19 view .LVU80
 386 0154 FF005EE3 		cmp	lr, #255	@ scale_value,
 387 0158 01B08B03 		orreq	fp, fp, #1	@,, tmp231, tmp226
 388              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 389              		.loc 1 91 47 view .LVU81
 390 015c 014084E2 		add	r4, r4, #1	@ tmp222, *_73,
 391              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 392              		.loc 1 85 19 view .LVU82
 393 0160 00005BE3 		cmp	fp, #0	@ tmp231,
 394              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 395              		.loc 1 91 47 view .LVU83
 396 0164 0340C0E7 		strb	r4, [r0, r3]	@ tmp222, *_73
 397              	.LVL16:
 398              		.loc 1 92 17 is_stmt 1 view .LVU84
  82:armwave.c     ****                 
 399              		.loc 1 82 17 view .LVU85
  85:armwave.c     ****                     continue;
 400              		.loc 1 85 17 view .LVU86
 401              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 402              		.loc 1 85 19 is_stmt 0 view .LVU87
 403 0168 2300001A 		bne	.L20		@,
 404              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 405              		.loc 1 90 64 view .LVU88
 406 016c 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 407              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 408              		.loc 1 85 20 view .LVU89
 409 0170 FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 410 0174 0140A003 		moveq	r4, #1	@ tmp245,
 411              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 90 64 view .LVU90
 413 0178 930909E0 		mul	r9, r3, r9	@ tmp234, g_armwave_state.cmp_x_bitdepth_scale, tmp233
 414              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 415              		.loc 1 85 20 view .LVU91
 416 017c 0040A013 		movne	r4, #0	@ tmp245,
 417              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 418              		.loc 1 85 19 view .LVU92
 419 0180 FF0051E3 		cmp	r1, #255	@ scale_value,
 420 0184 01408403 		orreq	r4, r4, #1	@,, tmp250, tmp245
 421              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 422              		.loc 1 91 47 view .LVU93
 423 0188 299487E0 		add	r9, r7, r9, lsr #8	@ tmp237, _4, tmp234,
 424 018c 0EE089E0 		add	lr, r9, lr	@ tmp238, tmp237, scale_value
 425              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 426              		.loc 1 85 19 view .LVU94
 427 0190 000054E3 		cmp	r4, #0	@ tmp250,
 428              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 429              		.loc 1 91 47 view .LVU95
 430 0194 0E30D0E7 		ldrb	r3, [r0, lr]	@ zero_extendqisi2	@ *_101, *_101
 431 0198 013083E2 		add	r3, r3, #1	@ tmp241, *_101,
 432 019c 0E30C0E7 		strb	r3, [r0, lr]	@ tmp241, *_101
 433              		.loc 1 92 17 is_stmt 1 view .LVU96
 434              	.LVL17:
  82:armwave.c     ****                 
 435              		.loc 1 82 17 view .LVU97
  85:armwave.c     ****                     continue;
 436              		.loc 1 85 17 view .LVU98
 437              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 438              		.loc 1 85 19 is_stmt 0 view .LVU99
 439 01a0 1500001A 		bne	.L20		@,
 440              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 441              		.loc 1 90 64 view .LVU100
 442 01a4 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 443              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 444              		.loc 1 85 20 view .LVU101
 445 01a8 222CB0E1 		lsrs	r2, r2, #24	@ word, word,
 446              	.LVL18:
  85:armwave.c     ****                     continue;
 447              		.loc 1 85 20 view .LVU102
 448 01ac 01E0A003 		moveq	lr, #1	@ tmp263,
 449              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 450              		.loc 1 90 64 view .LVU103
 451 01b0 930808E0 		mul	r8, r3, r8	@ tmp253, g_armwave_state.cmp_x_bitdepth_scale, tmp252
 452              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 453              		.loc 1 85 20 view .LVU104
 454 01b4 00E0A013 		movne	lr, #0	@ tmp263,
 455              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 456              		.loc 1 85 19 view .LVU105
 457 01b8 FF0052E3 		cmp	r2, #255	@ word,
 458 01bc 0E30A011 		movne	r3, lr	@, tmp268, tmp263
 459 01c0 01308E03 		orreq	r3, lr, #1	@,, tmp268, tmp263
 460              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 461              		.loc 1 91 47 view .LVU106
 462 01c4 288487E0 		add	r8, r7, r8, lsr #8	@ tmp256, _4, tmp253,
 463 01c8 011088E0 		add	r1, r8, r1	@ tmp257, tmp256, scale_value
 464              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 465              		.loc 1 85 19 view .LVU107
 466 01cc 000053E3 		cmp	r3, #0	@ tmp268,
 467              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 468              		.loc 1 91 47 view .LVU108
 469 01d0 0130D0E7 		ldrb	r3, [r0, r1]	@ zero_extendqisi2	@ *_129, *_129
 470 01d4 013083E2 		add	r3, r3, #1	@ tmp260, *_129,
 471 01d8 0130C0E7 		strb	r3, [r0, r1]	@ tmp260, *_129
 472              		.loc 1 92 17 is_stmt 1 view .LVU109
 473              	.LVL19:
  82:armwave.c     ****                 
 474              		.loc 1 82 17 view .LVU110
  85:armwave.c     ****                     continue;
 475              		.loc 1 85 17 view .LVU111
 476              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 477              		.loc 1 85 19 is_stmt 0 view .LVU112
 478 01dc 0600001A 		bne	.L20		@,
 479              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 480              		.loc 1 90 64 view .LVU113
 481 01e0 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 482 01e4 930606E0 		mul	r6, r3, r6	@ tmp271, g_armwave_state.cmp_x_bitdepth_scale, tmp269
 483              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 484              		.loc 1 91 47 view .LVU114
 485 01e8 266487E0 		add	r6, r7, r6, lsr #8	@ tmp274, _4, tmp271,
 486 01ec 022086E0 		add	r2, r6, r2	@ tmp275, tmp274, word
 487 01f0 0230D0E7 		ldrb	r3, [r0, r2]	@ zero_extendqisi2	@ *_157, *_157
 488 01f4 013083E2 		add	r3, r3, #1	@ tmp278, *_157,
 489 01f8 0230C0E7 		strb	r3, [r0, r2]	@ tmp278, *_157
 490              		.loc 1 92 17 is_stmt 1 view .LVU115
 491              	.LVL20:
 492              	.L20:
 493              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 494              		.loc 1 78 9 is_stmt 0 view .LVU116
 495 01fc 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 496 0200 0C0053E1 		cmp	r3, ip	@ height, yy
 497 0204 BBFFFF8A 		bhi	.L17		@,
 498              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 499              		.loc 1 73 44 view .LVU117
 500 0208 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 501              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 502              		.loc 1 73 5 view .LVU118
 503 020c 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 504              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 505              		.loc 1 73 44 view .LVU119
 506 0210 012082E2 		add	r2, r2, #1	@ w, w,
 507              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 508              		.loc 1 73 5 view .LVU120
 509 0214 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 510              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 511              		.loc 1 73 44 view .LVU121
 512 0218 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 513              	.LVL21:
 514              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 515              		.loc 1 73 5 view .LVU122
 516 021c AEFFFFBA 		blt	.L18		@,
 517              	.LVL22:
 518              	.L11:
 519              	@ armwave.c:96: }
  93:armwave.c     ****             }
  94:armwave.c     ****         }
  95:armwave.c     ****     }
  96:armwave.c     **** }
 520              		.loc 1 96 1 view .LVU123
 521 0220 14D08DE2 		add	sp, sp, #20	@,,
 522              		.cfi_def_cfa_offset 36
 523              		@ sp needed	@
 524 0224 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 525              	.LVL23:
 526              	.L28:
 527              		.loc 1 96 1 view .LVU124
 528              		.align	2
 529              	.L27:
 530 0228 00000000 		.word	g_armwave_state
 531              		.cfi_endproc
 532              	.LFE59:
 534              		.align	2
 535              		.global	armwave_fill_pixbuf_scaled
 536              		.syntax unified
 537              		.arm
 538              		.fpu vfp
 540              	armwave_fill_pixbuf_scaled:
 541              	.LVL24:
 542              	.LFB60:
  97:armwave.c     **** 
  98:armwave.c     **** #if 0
  99:armwave.c     **** /*
 100:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 101:armwave.c     ****  */
 102:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 103:armwave.c     **** {
 104:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 105:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 106:armwave.c     ****     uint8_t r, g, b, value;
 107:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 108:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 109:armwave.c     ****     uint32_t offset;
 110:armwave.c     **** 
 111:armwave.c     ****     assert(out_buffer != NULL);
 112:armwave.c     **** 
 113:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 114:armwave.c     **** 
 115:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 116:armwave.c     **** 
 117:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 118:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 119:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 120:armwave.c     ****         // most normal waveforms.
 121:armwave.c     ****         wave_word = *base_32ptr++;
 122:armwave.c     **** 
 123:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 124:armwave.c     ****             for(i = 0; i < 4; i++) {
 125:armwave.c     ****                 value = wave_word & 0xff;
 126:armwave.c     ****                 wave_word >>= 8;
 127:armwave.c     **** 
 128:armwave.c     ****                 if(value != 0) {
 129:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 130:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 131:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 132:armwave.c     **** 
 133:armwave.c     ****                     r = MIN(rr, 255);
 134:armwave.c     ****                     g = MIN(gg, 255);
 135:armwave.c     ****                     b = MIN(bb, 255);
 136:armwave.c     **** 
 137:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 138:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 139:armwave.c     **** 
 140:armwave.c     ****                     // Is there a better way?
 141:armwave.c     ****                     nsub = n + i;
 142:armwave.c     ****                     xx = nsub & 0xff;
 143:armwave.c     ****                     yy = nsub >> 8;
 144:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 145:armwave.c     ****                     *(out_buffer_base + offset) = word;
 146:armwave.c     ****                 }
 147:armwave.c     ****             }
 148:armwave.c     ****         } 
 149:armwave.c     ****     }
 150:armwave.c     **** }
 151:armwave.c     **** #endif
 152:armwave.c     **** 
 153:armwave.c     **** /*
 154:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 155:armwave.c     ****  * Rows are repeated as necessary.
 156:armwave.c     ****  */
 157:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 158:armwave.c     **** {
 543              		.loc 1 158 1 is_stmt 1 view -0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 8
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 159:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 547              		.loc 1 159 5 view .LVU126
 160:armwave.c     ****     // uint32_t ysub;
 161:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 548              		.loc 1 161 5 view .LVU127
 162:armwave.c     ****     uint8_t r, g, b, value; 
 549              		.loc 1 162 5 view .LVU128
 163:armwave.c     ****     // uint8_t row;
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 164 5 view .LVU129
 551              	@ armwave.c:158: {
 158:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 552              		.loc 1 158 1 is_stmt 0 view .LVU130
 553 022c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564              	@ armwave.c:168:     assert(out_buffer != NULL);
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 166:armwave.c     ****     uint32_t offset;
 167:armwave.c     **** 
 168:armwave.c     ****     assert(out_buffer != NULL);
 565              		.loc 1 168 5 view .LVU131
 566 0230 000050E3 		cmp	r0, #0	@ out_buffer
 567              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 568              		.loc 1 164 15 view .LVU132
 569 0234 44619FE5 		ldr	r6, .L51	@ tmp203,
 570              	@ armwave.c:158: {
 158:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 571              		.loc 1 158 1 view .LVU133
 572 0238 0CD04DE2 		sub	sp, sp, #12	@,,
 573              		.cfi_def_cfa_offset 48
 574              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 575              		.loc 1 164 15 view .LVU134
 576 023c 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 577              	.LVL25:
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 578              		.loc 1 165 5 is_stmt 1 view .LVU135
 166:armwave.c     **** 
 579              		.loc 1 166 5 view .LVU136
 580              		.loc 1 168 5 view .LVU137
 581 0240 4900000A 		beq	.L48		@,
 169:armwave.c     **** 
 170:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 582              		.loc 1 170 5 view .LVU138
 583              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 584              		.loc 1 170 10 is_stmt 0 view .LVU139
 585 0244 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 586 0248 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 587              	.LVL26:
 171:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 172:armwave.c     **** 
 173:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 588              		.loc 1 173 5 is_stmt 1 view .LVU140
 589              		.loc 1 173 5 is_stmt 0 view .LVU141
 590 024c 000058E3 		cmp	r8, #0	@ npix,
 591 0250 0C0000DA 		ble	.L29		@,
 592              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 175:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 176:armwave.c     ****         // most normal waveforms.
 177:armwave.c     ****         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 179:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 182:armwave.c     ****                 wave_word >>= 8;
 183:armwave.c     **** 
 184:armwave.c     ****                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 593              		.loc 1 186 52 view .LVU142
 594 0254 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 595              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 596              		.loc 1 185 52 view .LVU143
 597 0258 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 598              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 189:armwave.c     ****                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 192:armwave.c     **** 
 193:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 194:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 196:armwave.c     ****                     // Do line scaling as necessary.
 197:armwave.c     ****                     /*
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                     */
 207:armwave.c     **** 
 208:armwave.c     ****                     nsub = n + w;
 209:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 599              		.loc 1 209 57 view .LVU144
 600 025c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 601              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 602              		.loc 1 186 52 view .LVU145
 603 0260 00308DE5 		str	r3, [sp]	@ _10, %sfp
 604              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 605              		.loc 1 187 52 view .LVU146
 606 0264 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 607              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 608              		.loc 1 173 11 view .LVU147
 609 0268 0010A0E3 		mov	r1, #0	@ n,
 610              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 611              		.loc 1 187 52 view .LVU148
 612 026c 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 613              	.LVL27:
 614              	.L36:
 177:armwave.c     **** 
 615              		.loc 1 177 9 is_stmt 1 view .LVU149
 616              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 617              		.loc 1 177 19 is_stmt 0 view .LVU150
 618 0270 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 619              	.LVL28:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 620              		.loc 1 179 9 is_stmt 1 view .LVU151
 621              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 622              		.loc 1 179 11 is_stmt 0 view .LVU152
 623 0274 000053E3 		cmp	r3, #0	@ wave_word,
 624 0278 0400001A 		bne	.L49		@,
 625              	.L32:
 626              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 627              		.loc 1 173 28 view .LVU153
 628 027c 041081E2 		add	r1, r1, #4	@ n, n,
 629              	.LVL29:
 630              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 631              		.loc 1 173 5 view .LVU154
 632 0280 010058E1 		cmp	r8, r1	@ npix, n
 633 0284 F9FFFFCA 		bgt	.L36		@,
 634              	.LVL30:
 635              	.L29:
 636              	@ armwave.c:221: }
 210:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 211:armwave.c     ****                     xx = (nsub >> 8);
 212:armwave.c     **** 
 213:armwave.c     ****                     for(y = yy; y < ye; y++) {
 214:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 215:armwave.c     ****                         *(out_buffer_base + offset) = word;
 216:armwave.c     ****                     }
 217:armwave.c     ****                 }
 218:armwave.c     ****             }
 219:armwave.c     ****         }
 220:armwave.c     ****     }
 221:armwave.c     **** }
 637              		.loc 1 221 1 view .LVU155
 638 0288 0CD08DE2 		add	sp, sp, #12	@,,
 639              		.cfi_remember_state
 640              		.cfi_def_cfa_offset 36
 641              		@ sp needed	@
 642 028c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 643              	.LVL31:
 644              	.L49:
 645              		.cfi_restore_state
 646              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 647              		.loc 1 184 19 view .LVU156
 648 0290 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 649              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 650              		.loc 1 180 19 view .LVU157
 651 0294 0070A0E3 		mov	r7, #0	@ w,
 652              	.LVL32:
 181:armwave.c     ****                 wave_word >>= 8;
 653              		.loc 1 181 17 is_stmt 1 view .LVU158
 182:armwave.c     **** 
 654              		.loc 1 182 17 view .LVU159
 655              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 656              		.loc 1 182 27 is_stmt 0 view .LVU160
 657 0298 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 658              	.LVL33:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 659              		.loc 1 184 17 is_stmt 1 view .LVU161
 660              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 661              		.loc 1 184 19 is_stmt 0 view .LVU162
 662 029c 0500001A 		bne	.L50		@,
 663              	.L33:
 664              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 665              		.loc 1 180 32 view .LVU163
 666 02a0 017087E2 		add	r7, r7, #1	@ w, w,
 667              	.LVL34:
 668              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 669              		.loc 1 180 13 view .LVU164
 670 02a4 040057E3 		cmp	r7, #4	@ w,
 671 02a8 F3FFFF0A 		beq	.L32		@,
 181:armwave.c     ****                 wave_word >>= 8;
 672              		.loc 1 181 17 is_stmt 1 view .LVU165
 673              	.LVL35:
 182:armwave.c     **** 
 674              		.loc 1 182 17 view .LVU166
 675              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 676              		.loc 1 184 19 is_stmt 0 view .LVU167
 677 02ac FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 678              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 679              		.loc 1 182 27 view .LVU168
 680 02b0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 681              	.LVL36:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 682              		.loc 1 184 17 is_stmt 1 view .LVU169
 683              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 684              		.loc 1 184 19 is_stmt 0 view .LVU170
 685 02b4 F9FFFF0A 		beq	.L33		@,
 686              	.L50:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 687              		.loc 1 185 21 is_stmt 1 view .LVU171
 688              	.LVL37:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 689              		.loc 1 186 21 view .LVU172
 187:armwave.c     **** 
 690              		.loc 1 187 21 view .LVU173
 189:armwave.c     ****                     g = MIN(gg, 255);
 691              		.loc 1 189 21 view .LVU174
 190:armwave.c     ****                     b = MIN(bb, 255);
 692              		.loc 1 190 21 view .LVU175
 191:armwave.c     **** 
 693              		.loc 1 191 21 view .LVU176
 194:armwave.c     **** 
 694              		.loc 1 194 21 view .LVU177
 695              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 696              		.loc 1 187 55 is_stmt 0 view .LVU178
 697 02b8 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 698 02bc 075081E0 		add	r5, r1, r7	@ _120, n, w
 699 02c0 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 700              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 701              		.loc 1 209 32 view .LVU179
 702 02c4 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 703              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 704              		.loc 1 210 41 view .LVU180
 705 02c8 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 706              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 707              		.loc 1 209 40 view .LVU181
 708 02cc 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 709              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 710              		.loc 1 210 41 view .LVU182
 711 02d0 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 712              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 713              		.loc 1 186 55 view .LVU183
 714 02d4 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 715              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 716              		.loc 1 187 24 view .LVU184
 717 02d8 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 718              	.LVL38:
 719              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 720              		.loc 1 209 40 view .LVU185
 721 02dc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 722              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 723              		.loc 1 210 46 view .LVU186
 724 02e0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 725              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 726              		.loc 1 186 55 view .LVU187
 727 02e4 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 728              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 729              		.loc 1 185 55 view .LVU188
 730 02e8 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 731              	.LVL39:
 732              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 733              		.loc 1 191 25 view .LVU189
 734 02ec FF005AE3 		cmp	r10, #255	@ bb,
 735              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 736              		.loc 1 186 24 view .LVU190
 737 02f0 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 738              	.LVL40:
 739              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 740              		.loc 1 209 40 view .LVU191
 741 02f4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 742              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 743              		.loc 1 210 46 view .LVU192
 744 02f8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 745              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 746              		.loc 1 185 24 view .LVU193
 747 02fc 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 748              	.LVL41:
 749              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 750              		.loc 1 191 25 view .LVU194
 751 0300 FFA0A0A3 		movge	r10, #255	@ bb,
 752              	.LVL42:
 753              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 754              		.loc 1 190 25 view .LVU195
 755 0304 FF0054E3 		cmp	r4, #255	@ gg,
 756 0308 FF40A0A3 		movge	r4, #255	@ gg,
 757              	.LVL43:
 758              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 759              		.loc 1 189 25 view .LVU196
 760 030c FF005CE3 		cmp	ip, #255	@ rr,
 761              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 762              		.loc 1 194 56 view .LVU197
 763 0310 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 764              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 209 24 view .LVU198
 766 0314 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 767              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 768              		.loc 1 189 25 view .LVU199
 769 0318 FFC0A0A3 		movge	ip, #255	@ rr,
 770              	.LVL44:
 771              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 772              		.loc 1 194 44 view .LVU200
 773 031c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 774 0320 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 775              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 776              		.loc 1 194 56 view .LVU201
 777 0324 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 778              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 779              		.loc 1 194 51 view .LVU202
 780 0328 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 781              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 782              		.loc 1 194 62 view .LVU203
 783 032c 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 784 0330 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 785              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 786              		.loc 1 209 24 view .LVU204
 787 0334 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 788              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 789              		.loc 1 210 24 view .LVU205
 790 0338 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 791              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 792              		.loc 1 194 26 view .LVU206
 793 033c FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 794              	.LVL45:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 795              		.loc 1 208 21 is_stmt 1 view .LVU207
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 796              		.loc 1 209 21 view .LVU208
 210:armwave.c     ****                     xx = (nsub >> 8);
 797              		.loc 1 210 21 view .LVU209
 798              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 799              		.loc 1 211 32 is_stmt 0 view .LVU210
 800 0340 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 801              	.LVL46:
 802              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 803              		.loc 1 210 24 view .LVU211
 804 0344 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 805              	.LVL47:
 211:armwave.c     **** 
 806              		.loc 1 211 21 is_stmt 1 view .LVU212
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 807              		.loc 1 213 21 view .LVU213
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 808              		.loc 1 213 21 is_stmt 0 view .LVU214
 809 0348 090052E1 		cmp	r2, r9	@ yy, ye
 810 034c D3FFFF2A 		bcs	.L33		@,
 811              	.LVL48:
 812              	.L34:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 813              		.loc 1 214 25 is_stmt 1 discriminator 3 view .LVU215
 215:armwave.c     ****                     }
 814              		.loc 1 215 25 discriminator 3 view .LVU216
 815              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 816              		.loc 1 214 43 is_stmt 0 discriminator 3 view .LVU217
 817 0350 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 818              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 819              		.loc 1 215 43 discriminator 3 view .LVU218
 820 0354 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 821              	.LVL49:
 822              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 823              		.loc 1 213 42 discriminator 3 view .LVU219
 824 0358 012082E2 		add	r2, r2, #1	@ yy, yy,
 825              	.LVL50:
 826              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 827              		.loc 1 213 21 discriminator 3 view .LVU220
 828 035c 020059E1 		cmp	r9, r2	@ ye, yy
 829              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 830              		.loc 1 215 53 discriminator 3 view .LVU221
 831 0360 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 832              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 833              		.loc 1 213 21 discriminator 3 view .LVU222
 834 0364 F9FFFF1A 		bne	.L34		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 835              		.loc 1 213 21 discriminator 3 view .LVU223
 836 0368 CCFFFFEA 		b	.L33		@
 837              	.LVL51:
 838              	.L48:
 168:armwave.c     **** 
 839              		.loc 1 168 5 is_stmt 1 discriminator 1 view .LVU224
 840 036c 10309FE5 		ldr	r3, .L51+4	@,
 841 0370 A820A0E3 		mov	r2, #168	@,
 842 0374 0C109FE5 		ldr	r1, .L51+8	@,
 843 0378 0C009FE5 		ldr	r0, .L51+12	@,
 844              	.LVL52:
 168:armwave.c     **** 
 845              		.loc 1 168 5 is_stmt 0 discriminator 1 view .LVU225
 846 037c FEFFFFEB 		bl	__assert_fail		@
 847              	.LVL53:
 848              	.L52:
 168:armwave.c     **** 
 849              		.loc 1 168 5 discriminator 1 view .LVU226
 850              		.align	2
 851              	.L51:
 852 0380 00000000 		.word	g_armwave_state
 853 0384 00000000 		.word	.LANCHOR0
 854 0388 20000000 		.word	.LC2
 855 038c 2C000000 		.word	.LC3
 856              		.cfi_endproc
 857              	.LFE60:
 859              		.align	2
 860              		.global	armwave_setup_render
 861              		.syntax unified
 862              		.arm
 863              		.fpu vfp
 865              	armwave_setup_render:
 866              	.LVL54:
 867              	.LFB61:
 222:armwave.c     **** 
 223:armwave.c     **** /*
 224:armwave.c     ****  * Setup the renderer with passed parameters.
 225:armwave.c     ****  */
 226:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 227:armwave.c     **** {
 868              		.loc 1 227 1 is_stmt 1 view -0
 869              		.cfi_startproc
 870              		@ args = 12, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 228:armwave.c     ****     uint32_t length, xx;
 872              		.loc 1 228 5 view .LVU228
 229:armwave.c     ****     float points_per_pixel;
 873              		.loc 1 229 5 view .LVU229
 230:armwave.c     **** 
 231:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 874              		.loc 1 231 5 view .LVU230
 875              	@ armwave.c:227: {
 227:armwave.c     ****     uint32_t length, xx;
 876              		.loc 1 227 1 is_stmt 0 view .LVU231
 877 0390 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 878              		.cfi_def_cfa_offset 28
 879              		.cfi_offset 4, -28
 880              		.cfi_offset 5, -24
 881              		.cfi_offset 6, -20
 882              		.cfi_offset 7, -16
 883              		.cfi_offset 8, -12
 884              		.cfi_offset 9, -8
 885              		.cfi_offset 14, -4
 886 0394 028B2DED 		vpush.64	{d8}	@
 887              		.cfi_def_cfa_offset 36
 888              		.cfi_offset 80, -36
 889              		.cfi_offset 81, -32
 890 0398 0040A0E1 		mov	r4, r0	@ start_point, start_point
 891 039c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 892 03a0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 893 03a4 14D04DE2 		sub	sp, sp, #20	@,,
 894              		.cfi_def_cfa_offset 56
 895              	@ armwave.c:227: {
 227:armwave.c     ****     uint32_t length, xx;
 896              		.loc 1 227 1 view .LVU232
 897 03a8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 898 03ac D863CDE1 		ldrd	r6, [sp, #56]	@,,
 899 03b0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 900              	@ armwave.c:231:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 901              		.loc 1 231 5 view .LVU233
 902 03b4 00308DE5 		str	r3, [sp]	@ wave_stride,
 903 03b8 F460CDE1 		strd	r6, [sp, #4]	@,,
 904 03bc 0230A0E1 		mov	r3, r2	@, waves_max
 905              	.LVL55:
 906              		.loc 1 231 5 view .LVU234
 907 03c0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 908 03c4 0120A0E1 		mov	r2, r1	@, end_point
 909              	.LVL56:
 910              		.loc 1 231 5 view .LVU235
 911 03c8 0010A0E1 		mov	r1, r0	@, start_point
 912              	.LVL57:
 913              		.loc 1 231 5 view .LVU236
 914 03cc CC019FE5 		ldr	r0, .L67+12	@,
 915              	.LVL58:
 916              		.loc 1 231 5 view .LVU237
 917 03d0 FEFFFFEB 		bl	printf		@
 918              	.LVL59:
 232:armwave.c     **** 
 233:armwave.c     ****     // TODO these asserts should instead raise PyExc
 234:armwave.c     ****     assert(start_point < end_point);
 919              		.loc 1 234 5 is_stmt 1 view .LVU238
 920 03d4 050054E1 		cmp	r4, r5	@ start_point, end_point
 921 03d8 5E00002A 		bcs	.L64		@,
 235:armwave.c     **** 
 236:armwave.c     ****     /*
 237:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 238:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 239:armwave.c     **** 
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 922              		.loc 1 256 5 view .LVU239
 923              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 264:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 924              		.loc 1 267 45 is_stmt 0 view .LVU240
 925 03dc 045045E0 		sub	r5, r5, r4	@ _12, end_point, start_point
 926              	.LVL60:
 927              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     //g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 << AM_XCOORD_MULT
 271:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 272:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 928              		.loc 1 272 46 view .LVU241
 929 03e0 6B6ADFED 		vldr.32	s13, .L67	@ tmp193,
 930              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 931              		.loc 1 272 87 view .LVU242
 932 03e4 905A07EE 		vmov	s15, r5	@ int	@ _12, _12
 933              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 934              		.loc 1 257 49 view .LVU243
 935 03e8 6A6A9FED 		vldr.32	s12, .L67+4	@ tmp174,
 936              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 937              		.loc 1 256 29 view .LVU244
 938 03ec B0419FE5 		ldr	r4, .L67+16	@ tmp238,
 939              	.LVL61:
 940              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 941              		.loc 1 262 42 view .LVU245
 942 03f0 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 943              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 944              		.loc 1 272 87 view .LVU246
 945 03f4 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp190, _12
 946              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 947              		.loc 1 257 49 view .LVU247
 948 03f8 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 949              	@ armwave.c:264:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 950              		.loc 1 264 68 view .LVU248
 951 03fc 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 952              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 953              		.loc 1 263 37 view .LVU249
 954 0400 012CA0E3 		mov	r2, #256	@ tmp184,
 955              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 956              		.loc 1 262 26 view .LVU250
 957 0404 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 958              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 959              		.loc 1 257 49 view .LVU251
 960 0408 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 961              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 962              		.loc 1 272 87 view .LVU252
 963 040c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 964              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 273:armwave.c     **** 
 274:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 965              		.loc 1 274 5 view .LVU253
 966 0410 0310A0E1 		mov	r1, r3	@, _10
 967              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 968              		.loc 1 263 37 view .LVU254
 969 0414 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 970              	@ armwave.c:264:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 971              		.loc 1 264 34 view .LVU255
 972 0418 503084E5 		str	r3, [r4, #80]	@ _10, g_armwave_state.ch_buff_size
 973              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 974              		.loc 1 272 87 view .LVU256
 975 041c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp189, target_width
 976              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 977              		.loc 1 274 5 view .LVU257
 978 0420 80019FE5 		ldr	r0, .L67+20	@,
 979              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 980              		.loc 1 256 29 view .LVU258
 981 0424 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 982              		.loc 1 257 5 is_stmt 1 view .LVU259
 983              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 984              		.loc 1 259 33 is_stmt 0 view .LVU260
 985 0428 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 986              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 987              		.loc 1 260 31 view .LVU261
 988 042c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 989              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 990              		.loc 1 261 27 view .LVU262
 991 0430 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 992              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 993              		.loc 1 266 35 view .LVU263
 994 0434 F865C4E1 		strd	r6, [r4, #88]	@, tmp238,
 995              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 996              		.loc 1 267 33 view .LVU264
 997 0438 4C5084E5 		str	r5, [r4, #76]	@ _12, g_armwave_state.wave_length
 998              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 999              		.loc 1 272 87 view .LVU265
 1000 043c 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp191, tmp189, tmp190
 1001              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1002              		.loc 1 257 49 view .LVU266
 1003 0440 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1004              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 1005              		.loc 1 272 46 view .LVU267
 1006 0444 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp192, tmp191, tmp193
 1007              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 1008              		.loc 1 272 118 view .LVU268
 1009 0448 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp194, tmp192, tmp193
 1010              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1011              		.loc 1 258 30 view .LVU269
 1012 044c C76AFDEE 		vcvt.s32.f32	s13, s14	@ tmp177, _3
 1013              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1014              		.loc 1 271 42 view .LVU270
 1015 0450 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp194
 1016              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1017              		.loc 1 257 33 view .LVU271
 1018 0454 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1019              		.loc 1 258 5 is_stmt 1 view .LVU272
 1020              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1021              		.loc 1 258 30 is_stmt 0 view .LVU273
 1022 0458 0C6AC4ED 		vstr.32	s13, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1023              		.loc 1 259 5 is_stmt 1 view .LVU274
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1024              		.loc 1 260 5 view .LVU275
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1025              		.loc 1 261 5 view .LVU276
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1026              		.loc 1 262 5 view .LVU277
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1027              		.loc 1 263 5 view .LVU278
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1028              		.loc 1 264 5 view .LVU279
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1029              		.loc 1 265 5 view .LVU280
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1030              		.loc 1 266 5 view .LVU281
 267:armwave.c     **** 
 1031              		.loc 1 267 5 view .LVU282
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1032              		.loc 1 271 5 view .LVU283
 1033              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1034              		.loc 1 271 42 is_stmt 0 view .LVU284
 1035 045c 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1036              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1037              		.loc 1 274 5 view .LVU285
 1038 0460 903A17EE 		vmov	r3, s15	@ int	@, _19
 1039              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1040              		.loc 1 271 42 view .LVU286
 1041 0464 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1042              		.loc 1 274 5 is_stmt 1 view .LVU287
 1043 0468 0C20A0E1 		mov	r2, ip	@, tmp3
 1044 046c FEFFFFEB 		bl	printf		@
 1045              	.LVL62:
 275:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 276:armwave.c     **** 
 277:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 278:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 279:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1046              		.loc 1 280 5 view .LVU288
 1047              	@ armwave.c:282:     if(g_armwave_state.ch1_buffer != NULL)
 281:armwave.c     **** 
 282:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1048              		.loc 1 282 23 is_stmt 0 view .LVU289
 1049 0470 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1050              	@ armwave.c:280:     g_armwave_state.slice_height = 64;  
 280:armwave.c     **** 
 1051              		.loc 1 280 34 view .LVU290
 1052 0474 4030A0E3 		mov	r3, #64	@ tmp199,
 1053              	@ armwave.c:282:     if(g_armwave_state.ch1_buffer != NULL)
 1054              		.loc 1 282 7 view .LVU291
 1055 0478 000050E3 		cmp	r0, #0	@ _20,
 1056              	@ armwave.c:280:     g_armwave_state.slice_height = 64;  
 280:armwave.c     **** 
 1057              		.loc 1 280 34 view .LVU292
 1058 047c 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1059              		.loc 1 282 5 is_stmt 1 view .LVU293
 1060              	@ armwave.c:282:     if(g_armwave_state.ch1_buffer != NULL)
 1061              		.loc 1 282 7 is_stmt 0 view .LVU294
 1062 0480 0000000A 		beq	.L55		@,
 283:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1063              		.loc 1 283 9 is_stmt 1 view .LVU295
 1064 0484 FEFFFFEB 		bl	free		@
 1065              	.LVL63:
 1066              	.L55:
 284:armwave.c     **** 
 285:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1067              		.loc 1 285 5 view .LVU296
 1068              	@ armwave.c:285:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1069              		.loc 1 285 34 is_stmt 0 view .LVU297
 1070 0488 0110A0E3 		mov	r1, #1	@,
 1071 048c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1072 0490 FEFFFFEB 		bl	calloc		@
 1073              	.LVL64:
 1074              	@ armwave.c:287:     assert(g_armwave_state.ch1_buffer != NULL);
 286:armwave.c     **** 
 287:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1075              		.loc 1 287 5 view .LVU298
 1076 0494 000050E3 		cmp	r0, #0	@ _23,
 1077              	@ armwave.c:285:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 285:armwave.c     **** 
 1078              		.loc 1 285 34 view .LVU299
 1079 0498 0070A0E1 		mov	r7, r0	@ _23,
 1080              	@ armwave.c:285:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 285:armwave.c     **** 
 1081              		.loc 1 285 32 view .LVU300
 1082 049c 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1083              		.loc 1 287 5 is_stmt 1 view .LVU301
 1084 04a0 3600000A 		beq	.L65		@,
 288:armwave.c     **** 
 289:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 290:armwave.c     ****     length = end_point - start_point;
 1085              		.loc 1 290 5 view .LVU302
 1086              	.LVL65:
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1087              		.loc 1 291 5 view .LVU303
 1088              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 1089              		.loc 1 291 34 is_stmt 0 view .LVU304
 1090 04a4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1091              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 1092              		.loc 1 291 22 view .LVU305
 1093 04a8 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 1094              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1095              		.loc 1 292 60 view .LVU306
 1096 04ac 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp248, g_armwave_state.slice_height
 1097              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 293:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1098              		.loc 1 293 40 view .LVU307
 1099 04b0 8500A0E1 		lsl	r0, r5, #1	@, _12,
 1100              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1101              		.loc 1 291 34 view .LVU308
 1102 04b4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp211, target_width
 1103              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1104              		.loc 1 291 22 view .LVU309
 1105 04b8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp210, _12
 1106              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1107              		.loc 1 292 60 view .LVU310
 1108 04bc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp214, tmp248
 1109              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1110              		.loc 1 291 22 view .LVU311
 1111 04c0 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp210, tmp211
 1112              	.LVL66:
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1113              		.loc 1 292 5 is_stmt 1 view .LVU312
 1114              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1115              		.loc 1 292 60 is_stmt 0 view .LVU313
 1116 04c4 087A67EE 		vmul.f32	s15, s14, s16	@ tmp216, tmp214, points_per_pixel
 1117              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1118              		.loc 1 292 41 view .LVU314
 1119 04c8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp217, tmp216
 1120 04cc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp217, g_armwave_state.slice_record_height
 1121              		.loc 1 293 5 is_stmt 1 view .LVU315
 1122              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1123              		.loc 1 293 40 is_stmt 0 view .LVU316
 1124 04d0 FEFFFFEB 		bl	malloc		@
 1125              	.LVL67:
 1126              	@ armwave.c:295:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 294:armwave.c     **** 
 295:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1127              		.loc 1 295 5 view .LVU317
 1128 04d4 000050E3 		cmp	r0, #0	@ _31,
 1129              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 293:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1130              		.loc 1 293 40 view .LVU318
 1131 04d8 0060A0E1 		mov	r6, r0	@ _31,
 1132              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 293:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1133              		.loc 1 293 38 view .LVU319
 1134 04dc 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1135              		.loc 1 295 5 is_stmt 1 view .LVU320
 1136 04e0 2100000A 		beq	.L66		@,
 1137              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 296:armwave.c     **** 
 297:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 298:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1138              		.loc 1 298 54 is_stmt 0 view .LVU321
 1139 04e4 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp226,
 1140 04e8 02C040E2 		sub	ip, r0, #2	@ ivtmp.62, _31,
 1141              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1142              		.loc 1 297 12 view .LVU322
 1143 04ec 0030A0E3 		mov	r3, #0	@ xx,
 1144              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1145              		.loc 1 298 54 view .LVU323
 1146 04f0 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp226, points_per_pixel
 1147              	.L58:
 1148              	.LVL68:
 1149              		.loc 1 298 9 is_stmt 1 discriminator 3 view .LVU324
 1150              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1151              		.loc 1 298 74 is_stmt 0 discriminator 3 view .LVU325
 1152 04f4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1153              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1154              		.loc 1 297 32 discriminator 3 view .LVU326
 1155 04f8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1156              	.LVL69:
 1157              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1158              		.loc 1 297 5 discriminator 3 view .LVU327
 1159 04fc 030055E1 		cmp	r5, r3	@ _12, xx
 1160              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 298 74 discriminator 3 view .LVU328
 1162 0500 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp227, xx
 1163 0504 877A67EE 		vmul.f32	s15, s15, s14	@ tmp228, tmp227, _32
 1164              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1165              		.loc 1 298 46 discriminator 3 view .LVU329
 1166 0508 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp229, tmp228
 1167 050c 902A17EE 		vmov	r2, s15	@ int	@ tmp229, tmp229
 1168 0510 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp229, MEM[base: _101, offset: 0B]
 1169              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1170              		.loc 1 297 5 discriminator 3 view .LVU330
 1171 0514 F6FFFF1A 		bne	.L58		@,
 299:armwave.c     **** 
 300:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 301:armwave.c     ****     }
 302:armwave.c     **** 
 303:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1172              		.loc 1 303 5 is_stmt 1 view .LVU331
 1173              	@ armwave.c:303:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1174              		.loc 1 303 34 is_stmt 0 view .LVU332
 1175 0518 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1176 051c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1177 0520 FEFFFFEB 		bl	malloc		@
 1178              	.LVL70:
 1179              	@ armwave.c:305:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 304:armwave.c     **** 
 305:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1180              		.loc 1 305 5 view .LVU333
 1181 0524 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1182 0528 0620A0E1 		mov	r2, r6	@, _31
 1183 052c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1184 0530 0710A0E1 		mov	r1, r7	@, _23
 1185              	@ armwave.c:303:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 303:armwave.c     **** 
 1186              		.loc 1 303 34 view .LVU334
 1187 0534 00C0A0E1 		mov	ip, r0	@ tmp233,
 1188              	@ armwave.c:305:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1189              		.loc 1 305 5 view .LVU335
 1190 0538 0030A0E1 		mov	r3, r0	@, tmp233
 1191              	@ armwave.c:303:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 303:armwave.c     **** 
 1192              		.loc 1 303 32 view .LVU336
 1193 053c 68C084E5 		str	ip, [r4, #104]	@ tmp233, g_armwave_state.out_pixbuf
 1194              		.loc 1 305 5 is_stmt 1 view .LVU337
 1195 0540 64009FE5 		ldr	r0, .L67+24	@,
 1196 0544 FEFFFFEB 		bl	printf		@
 1197              	.LVL71:
 306:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 307:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 308:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 309:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 310:armwave.c     **** 
 311:armwave.c     ****     malloc_stats();
 1198              		.loc 1 311 5 view .LVU338
 1199              	@ armwave.c:312: }
 312:armwave.c     **** }
 1200              		.loc 1 312 1 is_stmt 0 view .LVU339
 1201 0548 14D08DE2 		add	sp, sp, #20	@,,
 1202              		.cfi_remember_state
 1203              		.cfi_def_cfa_offset 36
 1204              		@ sp needed	@
 1205 054c 028BBDEC 		vldm	sp!, {d8}	@
 1206              		.cfi_restore 80
 1207              		.cfi_restore 81
 1208              		.cfi_def_cfa_offset 28
 1209              	.LVL72:
 1210              		.loc 1 312 1 view .LVU340
 1211 0550 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1212              		.cfi_restore 14
 1213              		.cfi_restore 9
 1214              		.cfi_restore 8
 1215              		.cfi_restore 7
 1216              		.cfi_restore 6
 1217              		.cfi_restore 5
 1218              		.cfi_restore 4
 1219              		.cfi_def_cfa_offset 0
 1220              	.LVL73:
 1221              	@ armwave.c:311:     malloc_stats();
 311:armwave.c     **** }
 1222              		.loc 1 311 5 view .LVU341
 1223 0554 FEFFFFEA 		b	malloc_stats		@
 1224              	.LVL74:
 1225              	.L64:
 1226              		.cfi_restore_state
 234:armwave.c     **** 
 1227              		.loc 1 234 5 is_stmt 1 discriminator 1 view .LVU342
 1228 0558 50309FE5 		ldr	r3, .L67+28	@,
 1229 055c EA20A0E3 		mov	r2, #234	@,
 1230 0560 4C109FE5 		ldr	r1, .L67+32	@,
 1231 0564 4C009FE5 		ldr	r0, .L67+36	@,
 1232 0568 FEFFFFEB 		bl	__assert_fail		@
 1233              	.LVL75:
 1234              	.L66:
 295:armwave.c     **** 
 1235              		.loc 1 295 5 discriminator 1 view .LVU343
 1236 056c 3C309FE5 		ldr	r3, .L67+28	@,
 1237 0570 44209FE5 		ldr	r2, .L67+40	@,
 1238 0574 38109FE5 		ldr	r1, .L67+32	@,
 1239 0578 40009FE5 		ldr	r0, .L67+44	@,
 1240 057c FEFFFFEB 		bl	__assert_fail		@
 1241              	.LVL76:
 1242              	.L65:
 287:armwave.c     **** 
 1243              		.loc 1 287 5 discriminator 1 view .LVU344
 1244 0580 28309FE5 		ldr	r3, .L67+28	@,
 1245 0584 38209FE5 		ldr	r2, .L67+48	@,
 1246 0588 24109FE5 		ldr	r1, .L67+32	@,
 1247 058c 34009FE5 		ldr	r0, .L67+52	@,
 1248 0590 FEFFFFEB 		bl	__assert_fail		@
 1249              	.LVL77:
 1250              	.L68:
 1251              		.align	2
 1252              	.L67:
 1253 0594 00008043 		.word	1132462080
 1254 0598 00007F43 		.word	1132396544
 1255 059c 0000803F 		.word	1065353216
 1256 05a0 40000000 		.word	.LC4
 1257 05a4 00000000 		.word	g_armwave_state
 1258 05a8 84000000 		.word	.LC6
 1259 05ac 08010000 		.word	.LC9
 1260 05b0 1C000000 		.word	.LANCHOR0+28
 1261 05b4 20000000 		.word	.LC2
 1262 05b8 6C000000 		.word	.LC5
 1263 05bc 27010000 		.word	295
 1264 05c0 DC000000 		.word	.LC8
 1265 05c4 1F010000 		.word	287
 1266 05c8 B8000000 		.word	.LC7
 1267              		.cfi_endproc
 1268              	.LFE61:
 1270              		.align	2
 1271              		.global	armwave_set_wave_pointer
 1272              		.syntax unified
 1273              		.arm
 1274              		.fpu vfp
 1276              	armwave_set_wave_pointer:
 1277              	.LVL78:
 1278              	.LFB62:
 313:armwave.c     **** 
 314:armwave.c     **** /*
 315:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 316:armwave.c     ****  * in the future.
 317:armwave.c     ****  */
 318:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 319:armwave.c     **** {
 1279              		.loc 1 319 1 view -0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1283              		.loc 1 320 5 view .LVU346
 1284 05cc 000050E3 		cmp	r0, #0	@ wave_buffer
 1285              		.loc 1 320 5 is_stmt 0 view .LVU347
 1286 05d0 0200000A 		beq	.L74		@,
 321:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1287              		.loc 1 321 5 is_stmt 1 view .LVU348
 1288              	@ armwave.c:321:     g_armwave_state.wave_buffer = wave_buffer;
 1289              		.loc 1 321 33 is_stmt 0 view .LVU349
 1290 05d4 1C309FE5 		ldr	r3, .L75	@ tmp115,
 1291 05d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1292 05dc 1EFF2FE1 		bx	lr	@
 1293              	.L74:
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1294              		.loc 1 320 5 is_stmt 1 discriminator 1 view .LVU350
 1295              	@ armwave.c:319: {
 319:armwave.c     ****     assert(wave_buffer != NULL);
 1296              		.loc 1 319 1 is_stmt 0 discriminator 1 view .LVU351
 1297 05e0 10402DE9 		push	{r4, lr}	@
 1298              		.cfi_def_cfa_offset 8
 1299              		.cfi_offset 4, -8
 1300              		.cfi_offset 14, -4
 1301              	@ armwave.c:320:     assert(wave_buffer != NULL);
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1302              		.loc 1 320 5 discriminator 1 view .LVU352
 1303 05e4 052DA0E3 		mov	r2, #320	@,
 1304 05e8 0C309FE5 		ldr	r3, .L75+4	@,
 1305 05ec 0C109FE5 		ldr	r1, .L75+8	@,
 1306 05f0 0C009FE5 		ldr	r0, .L75+12	@,
 1307              	.LVL79:
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1308              		.loc 1 320 5 discriminator 1 view .LVU353
 1309 05f4 FEFFFFEB 		bl	__assert_fail		@
 1310              	.LVL80:
 1311              	.L76:
 1312              		.align	2
 1313              	.L75:
 1314 05f8 00000000 		.word	g_armwave_state
 1315 05fc 34000000 		.word	.LANCHOR0+52
 1316 0600 20000000 		.word	.LC2
 1317 0604 2C010000 		.word	.LC10
 1318              		.cfi_endproc
 1319              	.LFE62:
 1321              		.align	2
 1322              		.global	armwave_set_wave_pointer_as_testbuf
 1323              		.syntax unified
 1324              		.arm
 1325              		.fpu vfp
 1327              	armwave_set_wave_pointer_as_testbuf:
 1328              	.LVL81:
 1329              	.LFB63:
 322:armwave.c     **** }
 323:armwave.c     **** 
 324:armwave.c     **** /*
 325:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 326:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 329:armwave.c     **** {
 1330              		.loc 1 329 1 is_stmt 1 view -0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              		@ link register save eliminated.
 330:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1335              		.loc 1 330 5 view .LVU355
 1336              	@ armwave.c:330:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1337              		.loc 1 330 29 is_stmt 0 view .LVU356
 1338 0608 24309FE5 		ldr	r3, .L80	@ tmp117,
 1339              	@ armwave.c:330:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1340              		.loc 1 330 7 view .LVU357
 1341 060c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1342 0610 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1343 0614 0400003A 		bcc	.L79		@,
 331:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 332:armwave.c     ****         return;
 333:armwave.c     ****     }
 334:armwave.c     **** 
 335:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1344              		.loc 1 335 5 is_stmt 1 view .LVU358
 1345              	@ armwave.c:335:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1346              		.loc 1 335 111 is_stmt 0 view .LVU359
 1347 0618 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1348              	@ armwave.c:335:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1349              		.loc 1 335 68 view .LVU360
 1350 061c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1351 0620 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1352              	.LVL82:
 1353              	@ armwave.c:335:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1354              		.loc 1 335 33 view .LVU361
 1355 0624 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1356              	@ armwave.c:336: }
 336:armwave.c     **** }
 1357              		.loc 1 336 1 view .LVU362
 1358 0628 1EFF2FE1 		bx	lr	@
 1359              	.LVL83:
 1360              	.L79:
 331:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1361              		.loc 1 331 9 is_stmt 1 view .LVU363
 1362 062c 04009FE5 		ldr	r0, .L80+4	@,
 1363              	.LVL84:
 331:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1364              		.loc 1 331 9 is_stmt 0 view .LVU364
 1365 0630 FEFFFFEA 		b	puts		@
 1366              	.LVL85:
 1367              	.L81:
 1368              		.align	2
 1369              	.L80:
 1370 0634 00000000 		.word	g_armwave_state
 1371 0638 40010000 		.word	.LC11
 1372              		.cfi_endproc
 1373              	.LFE63:
 1375              		.align	2
 1376              		.global	armwave_set_wave_pointer_u32
 1377              		.syntax unified
 1378              		.arm
 1379              		.fpu vfp
 1381              	armwave_set_wave_pointer_u32:
 1382              	.LVL86:
 1383              	.LFB64:
 337:armwave.c     **** 
 338:armwave.c     **** /*
 339:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 340:armwave.c     ****  * disjointed buffers in the future.
 341:armwave.c     ****  */
 342:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 343:armwave.c     **** {
 1384              		.loc 1 343 1 is_stmt 1 view -0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1388              		.loc 1 344 5 view .LVU366
 1389 063c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1390              		.loc 1 344 5 is_stmt 0 view .LVU367
 1391 0640 0200000A 		beq	.L87		@,
 345:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1392              		.loc 1 345 5 is_stmt 1 view .LVU368
 1393              	@ armwave.c:345:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1394              		.loc 1 345 33 is_stmt 0 view .LVU369
 1395 0644 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1396 0648 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1397 064c 1EFF2FE1 		bx	lr	@
 1398              	.L87:
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1399              		.loc 1 344 5 is_stmt 1 discriminator 1 view .LVU370
 1400              	@ armwave.c:343: {
 343:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1401              		.loc 1 343 1 is_stmt 0 discriminator 1 view .LVU371
 1402 0650 10402DE9 		push	{r4, lr}	@
 1403              		.cfi_def_cfa_offset 8
 1404              		.cfi_offset 4, -8
 1405              		.cfi_offset 14, -4
 1406              	@ armwave.c:344:     assert(wave_buffer_ptr != 0);
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1407              		.loc 1 344 5 discriminator 1 view .LVU372
 1408 0654 562FA0E3 		mov	r2, #344	@,
 1409 0658 0C309FE5 		ldr	r3, .L88+4	@,
 1410 065c 0C109FE5 		ldr	r1, .L88+8	@,
 1411 0660 0C009FE5 		ldr	r0, .L88+12	@,
 1412              	.LVL87:
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1413              		.loc 1 344 5 discriminator 1 view .LVU373
 1414 0664 FEFFFFEB 		bl	__assert_fail		@
 1415              	.LVL88:
 1416              	.L89:
 1417              		.align	2
 1418              	.L88:
 1419 0668 00000000 		.word	g_armwave_state
 1420 066c 50000000 		.word	.LANCHOR0+80
 1421 0670 20000000 		.word	.LC2
 1422 0674 7C010000 		.word	.LC12
 1423              		.cfi_endproc
 1424              	.LFE64:
 1426              		.align	2
 1427              		.global	armwave_clear_buffer
 1428              		.syntax unified
 1429              		.arm
 1430              		.fpu vfp
 1432              	armwave_clear_buffer:
 1433              	.LVL89:
 1434              	.LFB65:
 346:armwave.c     **** }
 347:armwave.c     **** 
 348:armwave.c     **** /*
 349:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 350:armwave.c     ****  */
 351:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 352:armwave.c     **** {
 1435              		.loc 1 352 1 is_stmt 1 view -0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439              		@ link register save eliminated.
 353:armwave.c     ****     // Flags ignored, only one buffer cleared
 354:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1440              		.loc 1 354 5 view .LVU375
 1441              	@ armwave.c:354:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1442              		.loc 1 354 58 is_stmt 0 view .LVU376
 1443 0678 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1444              	@ armwave.c:354:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1445              		.loc 1 354 5 view .LVU377
 1446 067c 0010A0E3 		mov	r1, #0	@,
 1447 0680 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1448 0684 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1449              	.LVL90:
 1450              		.loc 1 354 5 view .LVU378
 1451 0688 FEFFFFEA 		b	memset		@
 1452              	.LVL91:
 1453              	.L92:
 1454              		.align	2
 1455              	.L91:
 1456 068c 00000000 		.word	g_armwave_state
 1457              		.cfi_endproc
 1458              	.LFE65:
 1460              		.align	2
 1461              		.global	armwave_set_channel_colour
 1462              		.syntax unified
 1463              		.arm
 1464              		.fpu vfp
 1466              	armwave_set_channel_colour:
 1467              	.LVL92:
 1468              	.LFB66:
 355:armwave.c     **** }
 356:armwave.c     **** 
 357:armwave.c     **** /*
 358:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 359:armwave.c     ****  */
 360:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 361:armwave.c     **** {
 1469              		.loc 1 361 1 is_stmt 1 view -0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473              		@ link register save eliminated.
 362:armwave.c     ****     // Only 1ch supported for now
 363:armwave.c     ****     switch(ch) {
 1474              		.loc 1 363 5 view .LVU380
 1475 0690 010050E3 		cmp	r0, #1	@ ch,
 364:armwave.c     ****         case 1:
 365:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1476              		.loc 1 365 13 view .LVU381
 1477              	@ armwave.c:365:             g_armwave_state.ch1_color.r = r;
 1478              		.loc 1 365 41 is_stmt 0 view .LVU382
 1479 0694 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1480              	.LVL93:
 1481              		.loc 1 365 41 view .LVU383
 1482 0698 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 366:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1483              		.loc 1 366 13 is_stmt 1 view .LVU384
 1484              	@ armwave.c:366:             g_armwave_state.ch1_color.g = g;
 1485              		.loc 1 366 41 is_stmt 0 view .LVU385
 1486 069c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 367:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1487              		.loc 1 367 13 is_stmt 1 view .LVU386
 1488              	@ armwave.c:367:             g_armwave_state.ch1_color.b = b;
 1489              		.loc 1 367 41 is_stmt 0 view .LVU387
 1490 06a0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 368:armwave.c     ****             break;
 1491              		.loc 1 368 13 is_stmt 1 view .LVU388
 1492              	@ armwave.c:370: }
 369:armwave.c     ****     }
 370:armwave.c     **** }
 1493              		.loc 1 370 1 is_stmt 0 view .LVU389
 1494 06a4 1EFF2FE1 		bx	lr	@
 1495              	.L96:
 1496              		.align	2
 1497              	.L95:
 1498 06a8 00000000 		.word	g_armwave_state
 1499              		.cfi_endproc
 1500              	.LFE66:
 1502              		.align	2
 1503              		.global	armwave_dump_ppm_debug
 1504              		.syntax unified
 1505              		.arm
 1506              		.fpu vfp
 1508              	armwave_dump_ppm_debug:
 1509              	.LVL94:
 1510              	.LFB67:
 371:armwave.c     **** 
 372:armwave.c     **** /*
 373:armwave.c     ****  * Dump a ppm of a buffer to a file.
 374:armwave.c     ****  */
 375:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 376:armwave.c     **** {
 1511              		.loc 1 376 1 is_stmt 1 view -0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 377:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1515              		.loc 1 377 5 view .LVU391
 1516              	@ armwave.c:376: {
 376:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1517              		.loc 1 376 1 is_stmt 0 view .LVU392
 1518 06ac 0130A0E1 		mov	r3, r1	@ fn, fn
 1519 06b0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1520              		.cfi_def_cfa_offset 28
 1521              		.cfi_offset 4, -28
 1522              		.cfi_offset 5, -24
 1523              		.cfi_offset 6, -20
 1524              		.cfi_offset 7, -16
 1525              		.cfi_offset 8, -12
 1526              		.cfi_offset 9, -8
 1527              		.cfi_offset 14, -4
 1528 06b4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1529 06b8 0CD04DE2 		sub	sp, sp, #12	@,,
 1530              		.cfi_def_cfa_offset 40
 1531              	@ armwave.c:377:     FILE *fp = fopen(fn, "wb");
 1532              		.loc 1 377 16 view .LVU393
 1533 06bc C4109FE5 		ldr	r1, .L105	@,
 1534              	.LVL95:
 1535              		.loc 1 377 16 view .LVU394
 1536 06c0 0300A0E1 		mov	r0, r3	@, fn
 1537              	.LVL96:
 1538              		.loc 1 377 16 view .LVU395
 1539 06c4 FEFFFFEB 		bl	fopen64		@
 1540              	.LVL97:
 1541              	@ armwave.c:384:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 378:armwave.c     ****     uint32_t data;
 379:armwave.c     ****     int xx, yy;
 380:armwave.c     **** 
 381:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 382:armwave.c     **** 
 383:armwave.c     ****     fputs("P3\n", fp);
 384:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1542              		.loc 1 384 5 view .LVU396
 1543 06c8 BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1544              	@ armwave.c:383:     fputs("P3\n", fp);
 383:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1545              		.loc 1 383 5 view .LVU397
 1546 06cc 0320A0E3 		mov	r2, #3	@,
 1547 06d0 0110A0E3 		mov	r1, #1	@,
 1548              	@ armwave.c:377:     FILE *fp = fopen(fn, "wb");
 377:armwave.c     ****     uint32_t data;
 1549              		.loc 1 377 16 view .LVU398
 1550 06d4 0070A0E1 		mov	r7, r0	@ fp,
 1551              	.LVL98:
 378:armwave.c     ****     uint32_t data;
 1552              		.loc 1 378 5 is_stmt 1 view .LVU399
 379:armwave.c     **** 
 1553              		.loc 1 379 5 view .LVU400
 383:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1554              		.loc 1 383 5 view .LVU401
 1555 06d8 0030A0E1 		mov	r3, r0	@, fp
 1556 06dc AC009FE5 		ldr	r0, .L105+8	@,
 1557              	.LVL99:
 383:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1558              		.loc 1 383 5 is_stmt 0 view .LVU402
 1559 06e0 FEFFFFEB 		bl	fwrite		@
 1560              	.LVL100:
 1561              		.loc 1 384 5 is_stmt 1 view .LVU403
 1562 06e4 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1563 06e8 A4109FE5 		ldr	r1, .L105+12	@,
 1564 06ec 0700A0E1 		mov	r0, r7	@, fp
 1565 06f0 FEFFFFEB 		bl	fprintf		@
 1566              	.LVL101:
 385:armwave.c     ****     fputs("255\n", fp);
 1567              		.loc 1 385 5 view .LVU404
 1568 06f4 0420A0E3 		mov	r2, #4	@,
 1569 06f8 0730A0E1 		mov	r3, r7	@, fp
 1570 06fc 0110A0E3 		mov	r1, #1	@,
 1571 0700 90009FE5 		ldr	r0, .L105+16	@,
 1572 0704 FEFFFFEB 		bl	fwrite		@
 1573              	.LVL102:
 386:armwave.c     **** 
 387:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1574              		.loc 1 387 5 view .LVU405
 1575              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1576              		.loc 1 387 37 is_stmt 0 view .LVU406
 1577 0708 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1578              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1579              		.loc 1 387 5 view .LVU407
 1580 070c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1581 0710 180000DA 		ble	.L98		@,
 1582 0714 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1583              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 389:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 390:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 391:armwave.c     **** 
 392:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1584              		.loc 1 392 13 view .LVU408
 1585 0718 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1586              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 387:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1587              		.loc 1 387 12 view .LVU409
 1588 071c 0050A0E3 		mov	r5, #0	@ yy,
 1589              	.LVL103:
 1590              	.L99:
 1591              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1592              		.loc 1 388 9 view .LVU410
 1593 0720 000053E3 		cmp	r3, #0	@ _13,
 1594              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1595              		.loc 1 388 16 view .LVU411
 1596 0724 0040A0C3 		movgt	r4, #0	@ xx,
 1597              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1598              		.loc 1 388 9 view .LVU412
 1599 0728 0F0000DA 		ble	.L101		@,
 1600              	.LVL104:
 1601              	.L100:
 389:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1602              		.loc 1 389 13 is_stmt 1 discriminator 3 view .LVU413
 1603              	@ armwave.c:389:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 389:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1604              		.loc 1 389 29 is_stmt 0 discriminator 3 view .LVU414
 1605 072c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1606              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1607              		.loc 1 392 13 discriminator 3 view .LVU415
 1608 0730 0910A0E1 		mov	r1, r9	@, tmp152
 1609 0734 0700A0E1 		mov	r0, r7	@, fp
 1610              	@ armwave.c:389:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 389:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1611              		.loc 1 389 18 discriminator 3 view .LVU416
 1612 0738 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1613              	.LVL105:
 1614              		.loc 1 392 13 is_stmt 1 discriminator 3 view .LVU417
 1615              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1616              		.loc 1 388 58 is_stmt 0 discriminator 3 view .LVU418
 1617 073c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1618              	.LVL106:
 1619              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1620              		.loc 1 392 81 discriminator 3 view .LVU419
 1621 0740 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1622              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1623              		.loc 1 392 61 discriminator 3 view .LVU420
 1624 0744 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1625              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1626              		.loc 1 392 13 discriminator 3 view .LVU421
 1627 0748 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1628 074c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1629 0750 00C08DE5 		str	ip, [sp]	@ tmp147,
 1630 0754 7220EFE6 		uxtb	r2, r2	@, data
 1631              	.LVL107:
 1632              		.loc 1 392 13 discriminator 3 view .LVU422
 1633 0758 FEFFFFEB 		bl	fprintf		@
 1634              	.LVL108:
 1635              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1636              		.loc 1 388 41 discriminator 3 view .LVU423
 1637 075c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1638              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1639              		.loc 1 388 9 discriminator 3 view .LVU424
 1640 0760 040053E1 		cmp	r3, r4	@ _13, xx
 1641 0764 F0FFFFCA 		bgt	.L100		@,
 1642 0768 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1643              	.LVL109:
 1644              	.L101:
 1645              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 387:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1646              		.loc 1 387 55 discriminator 2 view .LVU425
 1647 076c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1648              	.LVL110:
 1649              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 387:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1650              		.loc 1 387 5 discriminator 2 view .LVU426
 1651 0770 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1652 0774 E9FFFFBA 		blt	.L99		@,
 1653              	.LVL111:
 1654              	.L98:
 393:armwave.c     ****         }
 394:armwave.c     ****     }
 395:armwave.c     **** 
 396:armwave.c     ****     fclose(fp);
 1655              		.loc 1 396 5 is_stmt 1 view .LVU427
 1656 0778 0700A0E1 		mov	r0, r7	@, fp
 1657              	@ armwave.c:397: }
 397:armwave.c     **** }
 1658              		.loc 1 397 1 is_stmt 0 view .LVU428
 1659 077c 0CD08DE2 		add	sp, sp, #12	@,,
 1660              		.cfi_def_cfa_offset 28
 1661              		@ sp needed	@
 1662 0780 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1663              		.cfi_restore 14
 1664              		.cfi_restore 9
 1665              		.cfi_restore 8
 1666              		.cfi_restore 7
 1667              		.cfi_restore 6
 1668              		.cfi_restore 5
 1669              		.cfi_restore 4
 1670              		.cfi_def_cfa_offset 0
 1671              	.LVL112:
 1672              	@ armwave.c:396:     fclose(fp);
 396:armwave.c     **** }
 1673              		.loc 1 396 5 view .LVU429
 1674 0784 FEFFFFEA 		b	fclose		@
 1675              	.LVL113:
 1676              	.L106:
 396:armwave.c     **** }
 1677              		.loc 1 396 5 view .LVU430
 1678              		.align	2
 1679              	.L105:
 1680 0788 94010000 		.word	.LC13
 1681 078c 00000000 		.word	g_armwave_state
 1682 0790 98010000 		.word	.LC14
 1683 0794 9C010000 		.word	.LC15
 1684 0798 A4010000 		.word	.LC16
 1685 079c AC010000 		.word	.LC17
 1686              		.cfi_endproc
 1687              	.LFE67:
 1689              		.align	2
 1690              		.global	armwave_test_init
 1691              		.syntax unified
 1692              		.arm
 1693              		.fpu vfp
 1695              	armwave_test_init:
 1696              	.LVL114:
 1697              	.LFB68:
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Initialise some test functionry.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 403:armwave.c     **** {
 1698              		.loc 1 403 1 is_stmt 1 view -0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 404:armwave.c     ****     test_create_gamma();
 1702              		.loc 1 404 5 view .LVU432
 1703              	.LBB12:
 1704              	.LBI12:
  34:armwave.c     **** {
 1705              		.loc 1 34 6 view .LVU433
  34:armwave.c     **** {
 1706              		.loc 1 34 6 is_stmt 0 view .LVU434
 1707              	.LBE12:
 1708              	@ armwave.c:403: {
 403:armwave.c     ****     test_create_gamma();
 1709              		.loc 1 403 1 view .LVU435
 1710 07a0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1711              		.cfi_def_cfa_offset 32
 1712              		.cfi_offset 4, -32
 1713              		.cfi_offset 5, -28
 1714              		.cfi_offset 6, -24
 1715              		.cfi_offset 7, -20
 1716              		.cfi_offset 8, -16
 1717              		.cfi_offset 9, -12
 1718              		.cfi_offset 10, -8
 1719              		.cfi_offset 14, -4
 1720 07a4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1721              		.cfi_def_cfa_offset 56
 1722              		.cfi_offset 80, -56
 1723              		.cfi_offset 81, -52
 1724              		.cfi_offset 82, -48
 1725              		.cfi_offset 83, -44
 1726              		.cfi_offset 84, -40
 1727              		.cfi_offset 85, -36
 1728 07a8 BC409FE5 		ldr	r4, .L111+20	@ ivtmp.76,
 1729              	.LBB15:
 1730              	.LBB13:
 1731              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1732              		.loc 1 40 32 view .LVU436
 1733 07ac 2DAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1734              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1735              		.loc 1 40 26 view .LVU437
 1736 07b0 289B9FED 		vldr.64	d9, .L111	@ tmp151,
 1737              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1738              		.loc 1 40 49 view .LVU438
 1739 07b4 298B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1740 07b8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.76,
 1741              	.LBE13:
 1742              	.LBE15:
 1743              	@ armwave.c:403: {
 403:armwave.c     ****     test_create_gamma();
 1744              		.loc 1 403 1 view .LVU439
 1745 07bc 10D04DE2 		sub	sp, sp, #16	@,,
 1746              		.cfi_def_cfa_offset 72
 1747              	@ armwave.c:403: {
 403:armwave.c     ****     test_create_gamma();
 1748              		.loc 1 403 1 view .LVU440
 1749 07c0 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1750 07c4 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1751 07c8 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1752 07cc 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1753 07d0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.76,
 1754 07d4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1755              	.LVL115:
 1756              	.L108:
 1757              	.LBB16:
 1758              	.LBB14:
  40:armwave.c     ****     }
 1759              		.loc 1 40 9 is_stmt 1 view .LVU441
 1760              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1761              		.loc 1 40 32 is_stmt 0 view .LVU442
 1762 07d8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.76
 1763              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1764              		.loc 1 40 26 view .LVU443
 1765 07dc 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1766              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1767              		.loc 1 40 32 view .LVU444
 1768 07e0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1769 07e4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1770 07e8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1771              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1772              		.loc 1 40 26 view .LVU445
 1773 07ec C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1774 07f0 FEFFFFEB 		bl	pow		@
 1775              	.LVL116:
 1776              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1777              		.loc 1 40 49 view .LVU446
 1778 07f4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1779              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1780              		.loc 1 40 24 view .LVU447
 1781 07f8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1782 07fc 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1783 0800 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1784              	.LVL117:
 1785              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1786              		.loc 1 39 5 view .LVU448
 1787 0804 0A0054E1 		cmp	r4, r10	@ ivtmp.76, _39
 1788 0808 F2FFFF1A 		bne	.L108		@,
 1789              	.LVL118:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1790              		.loc 1 39 5 view .LVU449
 1791              	.LBE14:
 1792              	.LBE16:
 405:armwave.c     **** 
 406:armwave.c     ****     // make ch1 yellowish by default
 407:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1793              		.loc 1 407 5 is_stmt 1 view .LVU450
 1794              	.LBB17:
 1795              	.LBI17:
 360:armwave.c     **** {
 1796              		.loc 1 360 6 view .LVU451
 1797              	.LBB18:
 363:armwave.c     ****         case 1:
 1798              		.loc 1 363 5 view .LVU452
 365:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1799              		.loc 1 365 13 view .LVU453
 366:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1800              		.loc 1 366 13 view .LVU454
 1801              	@ armwave.c:365:             g_armwave_state.ch1_color.r = r;
 365:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1802              		.loc 1 365 41 is_stmt 0 view .LVU455
 1803 080c 5CC09FE5 		ldr	ip, .L111+24	@ tmp142,
 1804 0810 5C409FE5 		ldr	r4, .L111+28	@ tmp143,
 1805              	.LBE18:
 1806              	.LBE17:
 1807              	@ armwave.c:409:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 408:armwave.c     **** 
 409:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1808              		.loc 1 409 5 view .LVU456
 1809 0814 0000A0E3 		mov	r0, #0	@ tmp147,
 1810              	.LBB22:
 1811              	.LBB19:
 1812              	@ armwave.c:367:             g_armwave_state.ch1_color.b = b;
 367:armwave.c     ****             break;
 1813              		.loc 1 367 41 view .LVU457
 1814 0818 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1815              	.LBE19:
 1816              	.LBE22:
 1817              	@ armwave.c:409:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1818              		.loc 1 409 5 view .LVU458
 1819 081c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1820 0820 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1821 0824 00808DE5 		str	r8, [sp]	@ render_width,
 1822 0828 0610A0E1 		mov	r1, r6	@, tmp3
 1823 082c 0720A0E1 		mov	r2, r7	@, nwaves
 1824              	.LBB23:
 1825              	.LBB20:
 1826              	@ armwave.c:365:             g_armwave_state.ch1_color.r = r;
 365:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1827              		.loc 1 365 41 view .LVU459
 1828 0830 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 367:armwave.c     ****             break;
 1829              		.loc 1 367 13 is_stmt 1 view .LVU460
 1830              	.LBE20:
 1831              	.LBE23:
 1832              	@ armwave.c:409:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1833              		.loc 1 409 5 is_stmt 0 view .LVU461
 1834 0834 0630A0E1 		mov	r3, r6	@, wave_size
 1835              	.LBB24:
 1836              	.LBB21:
 1837              	@ armwave.c:367:             g_armwave_state.ch1_color.b = b;
 367:armwave.c     ****             break;
 1838              		.loc 1 367 41 view .LVU462
 1839 0838 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 368:armwave.c     ****     }
 1840              		.loc 1 368 13 is_stmt 1 view .LVU463
 1841              	.LVL119:
 368:armwave.c     ****     }
 1842              		.loc 1 368 13 is_stmt 0 view .LVU464
 1843              	.LBE21:
 1844              	.LBE24:
 1845              		.loc 1 409 5 is_stmt 1 view .LVU465
 1846 083c FEFFFFEB 		bl	armwave_setup_render		@
 1847              	.LVL120:
 410:armwave.c     **** 
 411:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1848              		.loc 1 411 5 view .LVU466
 1849 0840 30109FE5 		ldr	r1, .L111+32	@,
 1850 0844 30009FE5 		ldr	r0, .L111+36	@,
 1851              	@ armwave.c:412: }
 412:armwave.c     **** }
 1852              		.loc 1 412 1 is_stmt 0 view .LVU467
 1853 0848 10D08DE2 		add	sp, sp, #16	@,,
 1854              		.cfi_def_cfa_offset 56
 1855              		@ sp needed	@
 1856 084c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1857              		.cfi_restore 84
 1858              		.cfi_restore 85
 1859              		.cfi_restore 82
 1860              		.cfi_restore 83
 1861              		.cfi_restore 80
 1862              		.cfi_restore 81
 1863              		.cfi_def_cfa_offset 32
 1864 0850 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1865              		.cfi_restore 14
 1866              		.cfi_restore 10
 1867              		.cfi_restore 9
 1868              		.cfi_restore 8
 1869              		.cfi_restore 7
 1870              		.cfi_restore 6
 1871              		.cfi_restore 5
 1872              		.cfi_restore 4
 1873              		.cfi_def_cfa_offset 0
 1874              	.LVL121:
 1875              	@ armwave.c:411:     printf("armwave version: %s\n", ARMWAVE_VER);
 411:armwave.c     **** }
 1876              		.loc 1 411 5 view .LVU468
 1877 0854 FEFFFFEA 		b	printf		@
 1878              	.LVL122:
 1879              	.L112:
 1880              		.align	3
 1881              	.L111:
 1882 0858 000000C0 		.word	-1073741824
 1883 085c CCCCEC3F 		.word	1072483532
 1884 0860 00000000 		.word	0
 1885 0864 00E06F40 		.word	1081073664
 1886 0868 00007F43 		.word	1132396544
 1887 086c FFFFFFFF 		.word	gamma_table-1
 1888 0870 00000000 		.word	g_armwave_state
 1889 0874 F609F406 		.word	116656630
 1890 0878 00000000 		.word	.LC0
 1891 087c 08000000 		.word	.LC1
 1892              		.cfi_endproc
 1893              	.LFE68:
 1895              		.global	__aeabi_idiv
 1896              		.align	2
 1897              		.global	armwave_test_generate
 1898              		.syntax unified
 1899              		.arm
 1900              		.fpu vfp
 1902              	armwave_test_generate:
 1903              	.LFB69:
 413:armwave.c     **** 
 414:armwave.c     **** /*
 415:armwave.c     ****  * Fill buffers with test funtionry.
 416:armwave.c     ****  */
 417:armwave.c     **** void armwave_test_generate()
 418:armwave.c     **** {
 1904              		.loc 1 418 1 is_stmt 1 view -0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 24
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 419:armwave.c     ****     uint32_t yy;
 1908              		.loc 1 419 5 view .LVU470
 420:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1909              		.loc 1 420 5 view .LVU471
 1910              	@ armwave.c:418: {
 418:armwave.c     ****     uint32_t yy;
 1911              		.loc 1 418 1 is_stmt 0 view .LVU472
 1912 0880 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1913              		.cfi_def_cfa_offset 36
 1914              		.cfi_offset 4, -36
 1915              		.cfi_offset 5, -32
 1916              		.cfi_offset 6, -28
 1917              		.cfi_offset 7, -24
 1918              		.cfi_offset 8, -20
 1919              		.cfi_offset 9, -16
 1920              		.cfi_offset 10, -12
 1921              		.cfi_offset 11, -8
 1922              		.cfi_offset 14, -4
 1923 0884 1CD04DE2 		sub	sp, sp, #28	@,,
 1924              		.cfi_def_cfa_offset 64
 1925              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1926              		.loc 1 420 38 view .LVU473
 1927 0888 20A29FE5 		ldr	r10, .L132	@ tmp316,
 1928              	@ armwave.c:422:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 421:armwave.c     **** 
 422:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1929              		.loc 1 422 5 view .LVU474
 1930 088c 0010A0E3 		mov	r1, #0	@,
 1931              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 1932              		.loc 1 420 14 view .LVU475
 1933 0890 58309AE5 		ldr	r3, [r10, #88]	@ xx_rem, g_armwave_state.target_width
 1934              	@ armwave.c:422:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1935              		.loc 1 422 5 view .LVU476
 1936 0894 50209AE5 		ldr	r2, [r10, #80]	@, g_armwave_state.ch_buff_size
 1937 0898 04009AE5 		ldr	r0, [r10, #4]	@, g_armwave_state.ch1_buffer
 1938              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 1939              		.loc 1 420 14 view .LVU477
 1940 089c 08308DE5 		str	r3, [sp, #8]	@ xx_rem, %sfp
 1941              	.LVL123:
 1942              		.loc 1 422 5 is_stmt 1 view .LVU478
 1943 08a0 FEFFFFEB 		bl	memset		@
 1944              	.LVL124:
 423:armwave.c     **** 
 424:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 1945              		.loc 1 424 5 view .LVU479
 1946              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1947              		.loc 1 424 38 is_stmt 0 view .LVU480
 1948 08a4 58509AE5 		ldr	r5, [r10, #88]	@ prephitmp_235, g_armwave_state.target_width
 1949              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1950              		.loc 1 424 69 view .LVU481
 1951 08a8 44709AE5 		ldr	r7, [r10, #68]	@ _108, g_armwave_state.slice_height
 1952              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1953              		.loc 1 424 52 view .LVU482
 1954 08ac 0500A0E1 		mov	r0, r5	@, prephitmp_235
 1955 08b0 0710A0E1 		mov	r1, r7	@, _108
 1956 08b4 FEFFFFEB 		bl	__aeabi_idiv		@
 1957              	.LVL125:
 1958              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1959              		.loc 1 424 5 view .LVU483
 1960 08b8 000050E3 		cmp	r0, #0	@ tmp224
 1961 08bc 7600000A 		beq	.L124		@,
 1962 08c0 38609AE5 		ldr	r6, [r10, #56]	@ prephitmp_244, g_armwave_state.waves
 1963              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 1964              		.loc 1 420 53 view .LVU484
 1965 08c4 0030A0E3 		mov	r3, #0	@ ypos,
 1966 08c8 10308DE5 		str	r3, [sp, #16]	@ ypos, %sfp
 1967              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1968              		.loc 1 424 12 view .LVU485
 1969 08cc 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1970              	.LVL126:
 1971              	.L122:
 425:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 426:armwave.c     **** 
 427:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1972              		.loc 1 427 9 is_stmt 1 discriminator 3 view .LVU486
 1973 08d0 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1974              	.LBB27:
 1975              	.LBB28:
 1976              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 1977              		.loc 1 70 63 is_stmt 0 discriminator 3 view .LVU487
 1978 08d4 40409AE5 		ldr	r4, [r10, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1979              	.LBE28:
 1980              	.LBE27:
 1981              	@ armwave.c:427:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1982              		.loc 1 427 9 discriminator 3 view .LVU488
 1983 08d8 48209AE5 		ldr	r2, [r10, #72]	@ _9, g_armwave_state.slice_record_height
 1984 08dc 930703E0 		mul	r3, r3, r7	@ _7, yy, _108
 1985              	.LBB31:
 1986              	.LBB29:
 1987              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1988              		.loc 1 73 5 discriminator 3 view .LVU489
 1989 08e0 000056E3 		cmp	r6, #0	@ prephitmp_244,
 1990              	.LBE29:
 1991              	.LBE31:
 1992              	@ armwave.c:427:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1993              		.loc 1 427 9 discriminator 3 view .LVU490
 1994 08e4 14308DE5 		str	r3, [sp, #20]	@ _7, %sfp
 1995 08e8 00208DE5 		str	r2, [sp]	@ _9, %sfp
 1996              	.LVL127:
 1997              	.LBB32:
 1998              	.LBI27:
  62:armwave.c     **** {
 1999              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU491
 2000              	.LBB30:
  64:armwave.c     ****     uint32_t value, word;
 2001              		.loc 1 64 5 discriminator 3 view .LVU492
  65:armwave.c     ****     uint8_t *wave_base;
 2002              		.loc 1 65 5 discriminator 3 view .LVU493
  66:armwave.c     ****     uint8_t *write_buffer_base;
 2003              		.loc 1 66 5 discriminator 3 view .LVU494
  67:armwave.c     ****     uint8_t *write_buffer;
 2004              		.loc 1 67 5 discriminator 3 view .LVU495
  68:armwave.c     **** 
 2005              		.loc 1 68 5 discriminator 3 view .LVU496
  70:armwave.c     **** 
 2006              		.loc 1 70 5 discriminator 3 view .LVU497
 2007              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 2008              		.loc 1 70 63 is_stmt 0 discriminator 3 view .LVU498
 2009 08ec 940304E0 		mul	r4, r4, r3	@ _32, g_armwave_state.bitdepth_height, _7
 2010              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 2011              		.loc 1 70 40 discriminator 3 view .LVU499
 2012 08f0 04C09AE5 		ldr	ip, [r10, #4]	@ _29, g_armwave_state.ch1_buffer
 2013              	.LVL128:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2014              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU500
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2015              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU501
 2016 08f4 550000DA 		ble	.L115		@,
 2017              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2018              		.loc 1 73 11 view .LVU502
 2019 08f8 0070A0E3 		mov	r7, #0	@ w,
 2020              	.LVL129:
 2021              	.L121:
  74:armwave.c     **** 
 2022              		.loc 1 74 9 is_stmt 1 view .LVU503
 2023              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2024              		.loc 1 78 9 is_stmt 0 view .LVU504
 2025 08fc 00209DE5 		ldr	r2, [sp]	@ _9, %sfp
 2026              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 2027              		.loc 1 74 64 view .LVU505
 2028 0900 34309AE5 		ldr	r3, [r10, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2029              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 2030              		.loc 1 74 59 view .LVU506
 2031 0904 14109DE5 		ldr	r1, [sp, #20]	@ _7, %sfp
 2032              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2033              		.loc 1 78 9 view .LVU507
 2034 0908 000052E3 		cmp	r2, #0	@ _9,
 2035              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 2036              		.loc 1 74 59 view .LVU508
 2037 090c 931723E0 		mla	r3, r3, r7, r1	@ _38, g_armwave_state.wave_stride, w, _7
 2038              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  74:armwave.c     **** 
 2039              		.loc 1 74 36 view .LVU509
 2040 0910 14209AE5 		ldr	r2, [r10, #20]	@ _33, g_armwave_state.wave_buffer
 2041              	.LVL130:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2042              		.loc 1 78 9 is_stmt 1 view .LVU510
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2043              		.loc 1 78 9 is_stmt 0 view .LVU511
 2044 0914 4800000A 		beq	.L116		@,
 2045              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2046              		.loc 1 78 16 view .LVU512
 2047 0918 0000A0E3 		mov	r0, #0	@ yy,
 2048 091c 033082E0 		add	r3, r2, r3	@ tmp315, _33, _38
 2049              	.LVL131:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2050              		.loc 1 78 16 view .LVU513
 2051 0920 0C308DE5 		str	r3, [sp, #12]	@ tmp315, %sfp
 2052              	.LVL132:
 2053              	.L120:
  79:armwave.c     **** 
 2054              		.loc 1 79 13 is_stmt 1 view .LVU514
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2055              		.loc 1 90 17 view .LVU515
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2056              		.loc 1 90 17 view .LVU516
  91:armwave.c     ****                 word >>= 8;
 2057              		.loc 1 91 17 view .LVU517
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2058              		.loc 1 90 17 view .LVU518
  91:armwave.c     ****                 word >>= 8;
 2059              		.loc 1 91 17 view .LVU519
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2060              		.loc 1 90 17 view .LVU520
  91:armwave.c     ****                 word >>= 8;
 2061              		.loc 1 91 17 view .LVU521
 2062              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2063              		.loc 1 79 50 is_stmt 0 view .LVU522
 2064 0924 24309AE5 		ldr	r3, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2065              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2066              		.loc 1 79 18 view .LVU523
 2067 0928 0C209DE5 		ldr	r2, [sp, #12]	@ tmp315, %sfp
 2068              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2069              		.loc 1 90 64 view .LVU524
 2070 092c 01B080E2 		add	fp, r0, #1	@ tmp261, yy,
 2071              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2072              		.loc 1 79 50 view .LVU525
 2073 0930 930003E0 		mul	r3, r3, r0	@ tmp235, g_armwave_state.cmp_x_bitdepth_scale, yy
 2074              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2075              		.loc 1 90 64 view .LVU526
 2076 0934 026080E2 		add	r6, r0, #2	@ tmp280, yy,
 2077 0938 035080E2 		add	r5, r0, #3	@ tmp298, yy,
 2078              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2079              		.loc 1 79 18 view .LVU527
 2080 093c 238492E7 		ldr	r8, [r2, r3, lsr #8]	@ word, MEM[(uint32_t *)_44]
 2081              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2082              		.loc 1 79 90 view .LVU528
 2083 0940 2334A0E1 		lsr	r3, r3, #8	@ _42, tmp235,
 2084              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2085              		.loc 1 85 20 view .LVU529
 2086 0944 FF2018E2 		ands	r2, r8, #255	@ scale_value, word,
 2087 0948 0190A003 		moveq	r9, #1	@ tmp240,
 2088 094c 0090A013 		movne	r9, #0	@ tmp240,
 2089              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2090              		.loc 1 91 47 view .LVU530
 2091 0950 033084E0 		add	r3, r4, r3	@ tmp246, _32, _42
 2092 0954 023083E0 		add	r3, r3, r2	@ tmp247, tmp246, scale_value
 2093              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2094              		.loc 1 85 19 view .LVU531
 2095 0958 FF0052E3 		cmp	r2, #255	@ scale_value,
 2096 095c 0920A011 		movne	r2, r9	@, tmp245, tmp240
 2097 0960 01208903 		orreq	r2, r9, #1	@,, tmp245, tmp240
 2098 0964 000052E3 		cmp	r2, #0	@ tmp245,
 2099              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2100              		.loc 1 79 18 view .LVU532
 2101 0968 040080E2 		add	r0, r0, #4	@ yy, yy,
 2102              	.LVL133:
  81:armwave.c     ****                 scale_value = word & 0xff;
 2103              		.loc 1 81 13 is_stmt 1 view .LVU533
  82:armwave.c     ****                 
 2104              		.loc 1 82 17 view .LVU534
  85:armwave.c     ****                     continue;
 2105              		.loc 1 85 17 view .LVU535
  91:armwave.c     ****                 word >>= 8;
 2106              		.loc 1 91 17 view .LVU536
 2107              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****             }
 2108              		.loc 1 92 22 is_stmt 0 view .LVU537
 2109 096c 28E4A0E1 		lsr	lr, r8, #8	@ word, word,
 2110 0970 2818A0E1 		lsr	r1, r8, #16	@ word, word,
 2111              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2112              		.loc 1 85 19 view .LVU538
 2113 0974 2C00001A 		bne	.L123		@,
 2114              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2115              		.loc 1 85 20 view .LVU539
 2116 0978 FF901EE2 		ands	r9, lr, #255	@ scale_value, word,
 2117              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2118              		.loc 1 91 47 view .LVU540
 2119 097c 0320DCE7 		ldrb	r2, [ip, r3]	@ zero_extendqisi2	@ *_97, *_97
 2120              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2121              		.loc 1 85 20 view .LVU541
 2122 0980 01E0A003 		moveq	lr, #1	@ tmp254,
 2123 0984 00E0A013 		movne	lr, #0	@ tmp254,
 2124              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2125              		.loc 1 85 19 view .LVU542
 2126 0988 FF0059E3 		cmp	r9, #255	@ scale_value,
 2127 098c 01E08E03 		orreq	lr, lr, #1	@,, tmp259, tmp254
 2128              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2129              		.loc 1 91 47 view .LVU543
 2130 0990 012082E2 		add	r2, r2, #1	@ tmp250, *_97,
 2131              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2132              		.loc 1 85 19 view .LVU544
 2133 0994 00005EE3 		cmp	lr, #0	@ tmp259,
 2134              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2135              		.loc 1 91 47 view .LVU545
 2136 0998 0320CCE7 		strb	r2, [ip, r3]	@ tmp250, *_97
  92:armwave.c     ****             }
 2137              		.loc 1 92 17 is_stmt 1 view .LVU546
 2138              	.LVL134:
  82:armwave.c     ****                 
 2139              		.loc 1 82 17 view .LVU547
  85:armwave.c     ****                     continue;
 2140              		.loc 1 85 17 view .LVU548
 2141              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2142              		.loc 1 85 19 is_stmt 0 view .LVU549
 2143 099c 2200001A 		bne	.L123		@,
 2144              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2145              		.loc 1 90 64 view .LVU550
 2146 09a0 24E09AE5 		ldr	lr, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2147              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2148              		.loc 1 85 20 view .LVU551
 2149 09a4 FF2011E2 		ands	r2, r1, #255	@ scale_value, word,
 2150 09a8 0130A003 		moveq	r3, #1	@ tmp273,
 2151              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2152              		.loc 1 90 64 view .LVU552
 2153 09ac 9E0B0EE0 		mul	lr, lr, fp	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 2154              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2155              		.loc 1 85 20 view .LVU553
 2156 09b0 0030A013 		movne	r3, #0	@ tmp273,
 2157              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2158              		.loc 1 85 19 view .LVU554
 2159 09b4 FF0052E3 		cmp	r2, #255	@ scale_value,
 2160 09b8 01308303 		orreq	r3, r3, #1	@,, tmp278, tmp273
 2161              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2162              		.loc 1 91 47 view .LVU555
 2163 09bc 2EE484E0 		add	lr, r4, lr, lsr #8	@ tmp265, _32, tmp262,
 2164 09c0 09E08EE0 		add	lr, lr, r9	@ tmp266, tmp265, scale_value
 2165              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2166              		.loc 1 85 19 view .LVU556
 2167 09c4 000053E3 		cmp	r3, #0	@ tmp278,
 2168              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2169              		.loc 1 91 47 view .LVU557
 2170 09c8 0E30DCE7 		ldrb	r3, [ip, lr]	@ zero_extendqisi2	@ *_125, *_125
 2171 09cc 013083E2 		add	r3, r3, #1	@ tmp269, *_125,
 2172 09d0 0E30CCE7 		strb	r3, [ip, lr]	@ tmp269, *_125
  92:armwave.c     ****             }
 2173              		.loc 1 92 17 is_stmt 1 view .LVU558
 2174              	.LVL135:
  82:armwave.c     ****                 
 2175              		.loc 1 82 17 view .LVU559
  85:armwave.c     ****                     continue;
 2176              		.loc 1 85 17 view .LVU560
 2177              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2178              		.loc 1 85 19 is_stmt 0 view .LVU561
 2179 09d4 1400001A 		bne	.L123		@,
 2180              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2181              		.loc 1 90 64 view .LVU562
 2182 09d8 24109AE5 		ldr	r1, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2183              	.LVL136:
 2184              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2185              		.loc 1 85 20 view .LVU563
 2186 09dc 283CB0E1 		lsrs	r3, r8, #24	@ word, word,
 2187 09e0 01E0A003 		moveq	lr, #1	@ tmp291,
 2188              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2189              		.loc 1 90 64 view .LVU564
 2190 09e4 910601E0 		mul	r1, r1, r6	@ tmp281, g_armwave_state.cmp_x_bitdepth_scale, tmp280
 2191              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2192              		.loc 1 85 20 view .LVU565
 2193 09e8 00E0A013 		movne	lr, #0	@ tmp291,
 2194              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2195              		.loc 1 85 19 view .LVU566
 2196 09ec FF0053E3 		cmp	r3, #255	@ word,
 2197 09f0 01E08E03 		orreq	lr, lr, #1	@,, tmp296, tmp291
 2198              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2199              		.loc 1 91 47 view .LVU567
 2200 09f4 211484E0 		add	r1, r4, r1, lsr #8	@ tmp284, _32, tmp281,
 2201 09f8 021081E0 		add	r1, r1, r2	@ tmp285, tmp284, scale_value
 2202              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2203              		.loc 1 85 19 view .LVU568
 2204 09fc 00005EE3 		cmp	lr, #0	@ tmp296,
 2205              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2206              		.loc 1 91 47 view .LVU569
 2207 0a00 0120DCE7 		ldrb	r2, [ip, r1]	@ zero_extendqisi2	@ *_153, *_153
 2208 0a04 012082E2 		add	r2, r2, #1	@ tmp288, *_153,
 2209 0a08 0120CCE7 		strb	r2, [ip, r1]	@ tmp288, *_153
  92:armwave.c     ****             }
 2210              		.loc 1 92 17 is_stmt 1 view .LVU570
 2211              	.LVL137:
  82:armwave.c     ****                 
 2212              		.loc 1 82 17 view .LVU571
  85:armwave.c     ****                     continue;
 2213              		.loc 1 85 17 view .LVU572
 2214              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2215              		.loc 1 85 19 is_stmt 0 view .LVU573
 2216 0a0c 0600001A 		bne	.L123		@,
 2217              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2218              		.loc 1 90 64 view .LVU574
 2219 0a10 24209AE5 		ldr	r2, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2220 0a14 920502E0 		mul	r2, r2, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 2221              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2222              		.loc 1 91 47 view .LVU575
 2223 0a18 222484E0 		add	r2, r4, r2, lsr #8	@ tmp302, _32, tmp299,
 2224 0a1c 033082E0 		add	r3, r2, r3	@ tmp303, tmp302, word
 2225 0a20 0320DCE7 		ldrb	r2, [ip, r3]	@ zero_extendqisi2	@ *_181, *_181
 2226 0a24 012082E2 		add	r2, r2, #1	@ tmp306, *_181,
 2227 0a28 0320CCE7 		strb	r2, [ip, r3]	@ tmp306, *_181
  92:armwave.c     ****             }
 2228              		.loc 1 92 17 is_stmt 1 view .LVU576
 2229              	.LVL138:
 2230              	.L123:
 2231              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2232              		.loc 1 78 9 is_stmt 0 view .LVU577
 2233 0a2c 00309DE5 		ldr	r3, [sp]	@ _9, %sfp
 2234 0a30 000053E1 		cmp	r3, r0	@ _9, yy
 2235 0a34 BAFFFF8A 		bhi	.L120		@,
 2236 0a38 38609AE5 		ldr	r6, [r10, #56]	@ prephitmp_244, g_armwave_state.waves
 2237              	.LVL139:
 2238              	.L116:
 2239              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2240              		.loc 1 73 44 view .LVU578
 2241 0a3c 017087E2 		add	r7, r7, #1	@ w, w,
 2242              	.LVL140:
 2243              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2244              		.loc 1 73 5 view .LVU579
 2245 0a40 060057E1 		cmp	r7, r6	@ w, prephitmp_244
 2246 0a44 ACFFFFBA 		blt	.L121		@,
 2247 0a48 44709AE5 		ldr	r7, [r10, #68]	@ _108, g_armwave_state.slice_height
 2248              	.LVL141:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2249              		.loc 1 73 5 view .LVU580
 2250 0a4c 58509AE5 		ldr	r5, [r10, #88]	@ prephitmp_235, g_armwave_state.target_width
 2251              	.L115:
 2252              	.LVL142:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2253              		.loc 1 73 5 view .LVU581
 2254              	.LBE30:
 2255              	.LBE32:
 428:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2256              		.loc 1 428 9 is_stmt 1 discriminator 3 view .LVU582
 2257              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2258              		.loc 1 424 52 is_stmt 0 discriminator 3 view .LVU583
 2259 0a50 0710A0E1 		mov	r1, r7	@, _108
 2260 0a54 0500A0E1 		mov	r0, r5	@, prephitmp_235
 2261 0a58 FEFFFFEB 		bl	__aeabi_idiv		@
 2262              	.LVL143:
 2263              	@ armwave.c:428:         xx_rem -= g_armwave_state.slice_height;
 2264              		.loc 1 428 16 discriminator 3 view .LVU584
 2265 0a5c 08209DE5 		ldr	r2, [sp, #8]	@ xx_rem, %sfp
 2266              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2267              		.loc 1 424 87 discriminator 3 view .LVU585
 2268 0a60 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 2269              	@ armwave.c:428:         xx_rem -= g_armwave_state.slice_height;
 2270              		.loc 1 428 16 discriminator 3 view .LVU586
 2271 0a64 072042E0 		sub	r2, r2, r7	@ xx_rem, xx_rem, _108
 2272 0a68 08208DE5 		str	r2, [sp, #8]	@ xx_rem, %sfp
 2273              	.LVL144:
 429:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2274              		.loc 1 429 9 is_stmt 1 discriminator 3 view .LVU587
 2275              	@ armwave.c:429:         ypos += g_armwave_state.slice_height;
 2276              		.loc 1 429 14 is_stmt 0 discriminator 3 view .LVU588
 2277 0a6c 10209DE5 		ldr	r2, [sp, #16]	@ ypos, %sfp
 2278              	.LVL145:
 2279              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2280              		.loc 1 424 87 discriminator 3 view .LVU589
 2281 0a70 013083E2 		add	r3, r3, #1	@ yy, yy,
 2282              	@ armwave.c:429:         ypos += g_armwave_state.slice_height;
 2283              		.loc 1 429 14 discriminator 3 view .LVU590
 2284 0a74 072082E0 		add	r2, r2, r7	@ ypos, ypos, _108
 2285              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2286              		.loc 1 424 87 discriminator 3 view .LVU591
 2287 0a78 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 2288              	.LVL146:
 2289              	@ armwave.c:429:         ypos += g_armwave_state.slice_height;
 2290              		.loc 1 429 14 discriminator 3 view .LVU592
 2291 0a7c 10208DE5 		str	r2, [sp, #16]	@ ypos, %sfp
 2292              	.LVL147:
 2293              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2294              		.loc 1 424 5 discriminator 3 view .LVU593
 2295 0a80 030050E1 		cmp	r0, r3	@, yy
 2296 0a84 91FFFF8A 		bhi	.L122		@,
 2297 0a88 0200A0E1 		mov	r0, r2	@, ypos
 430:armwave.c     ****     }
 431:armwave.c     **** 
 432:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2298              		.loc 1 432 5 is_stmt 1 view .LVU594
 2299 0a8c 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 2300              	@ armwave.c:433: }
 433:armwave.c     **** }
 2301              		.loc 1 433 1 is_stmt 0 view .LVU595
 2302 0a90 1CD08DE2 		add	sp, sp, #28	@,,
 2303              		.cfi_remember_state
 2304              		.cfi_def_cfa_offset 36
 2305              		@ sp needed	@
 2306 0a94 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2307              		.cfi_restore 14
 2308              		.cfi_restore 11
 2309              		.cfi_restore 10
 2310              		.cfi_restore 9
 2311              		.cfi_restore 8
 2312              		.cfi_restore 7
 2313              		.cfi_restore 6
 2314              		.cfi_restore 5
 2315              		.cfi_restore 4
 2316              		.cfi_def_cfa_offset 0
 2317              	@ armwave.c:432:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 432:armwave.c     **** }
 2318              		.loc 1 432 5 view .LVU596
 2319 0a98 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2320              	.LVL148:
 2321              	.L124:
 2322              		.cfi_restore_state
 2323              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 2324              		.loc 1 420 53 view .LVU597
 2325 0a9c 10008DE5 		str	r0, [sp, #16]	@ tmp224, %sfp
 432:armwave.c     **** }
 2326              		.loc 1 432 5 is_stmt 1 view .LVU598
 2327 0aa0 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 2328              	@ armwave.c:433: }
 2329              		.loc 1 433 1 is_stmt 0 view .LVU599
 2330 0aa4 1CD08DE2 		add	sp, sp, #28	@,,
 2331              		.cfi_def_cfa_offset 36
 2332              		@ sp needed	@
 2333 0aa8 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2334              		.cfi_restore 14
 2335              		.cfi_restore 11
 2336              		.cfi_restore 10
 2337              		.cfi_restore 9
 2338              		.cfi_restore 8
 2339              		.cfi_restore 7
 2340              		.cfi_restore 6
 2341              		.cfi_restore 5
 2342              		.cfi_restore 4
 2343              		.cfi_def_cfa_offset 0
 2344              	@ armwave.c:432:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 432:armwave.c     **** }
 2345              		.loc 1 432 5 view .LVU600
 2346 0aac FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2347              	.LVL149:
 2348              	.L133:
 2349              		.align	2
 2350              	.L132:
 2351 0ab0 00000000 		.word	g_armwave_state
 2352              		.cfi_endproc
 2353              	.LFE69:
 2355              		.align	2
 2356              		.global	armwave_test_fill_outbuf
 2357              		.syntax unified
 2358              		.arm
 2359              		.fpu vfp
 2361              	armwave_test_fill_outbuf:
 2362              	.LFB70:
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Render image to the local allocated buffer.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_fill_outbuf()
 439:armwave.c     **** {
 2363              		.loc 1 439 1 is_stmt 1 view -0
 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 8
 2366              		@ frame_needed = 0, uses_anonymous_args = 0
 440:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2367              		.loc 1 440 5 view .LVU602
 2368 0ab4 50C19FE5 		ldr	ip, .L155	@ tmp204,
 2369              	@ armwave.c:439: {
 439:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2370              		.loc 1 439 1 is_stmt 0 view .LVU603
 2371 0ab8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2372              		.cfi_def_cfa_offset 36
 2373              		.cfi_offset 4, -36
 2374              		.cfi_offset 5, -32
 2375              		.cfi_offset 6, -28
 2376              		.cfi_offset 7, -24
 2377              		.cfi_offset 8, -20
 2378              		.cfi_offset 9, -16
 2379              		.cfi_offset 10, -12
 2380              		.cfi_offset 11, -8
 2381              		.cfi_offset 14, -4
 2382 0abc 0CD04DE2 		sub	sp, sp, #12	@,,
 2383              		.cfi_def_cfa_offset 48
 2384              	@ armwave.c:440:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2385              		.loc 1 440 5 view .LVU604
 2386 0ac0 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2387              	.LVL150:
 2388              	.LBB35:
 2389              	.LBI35:
 157:armwave.c     **** {
 2390              		.loc 1 157 6 is_stmt 1 view .LVU605
 2391              	.LBB36:
 159:armwave.c     ****     // uint32_t ysub;
 2392              		.loc 1 159 5 view .LVU606
 161:armwave.c     ****     uint8_t r, g, b, value; 
 2393              		.loc 1 161 5 view .LVU607
 162:armwave.c     ****     // uint8_t row;
 2394              		.loc 1 162 5 view .LVU608
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2395              		.loc 1 164 5 view .LVU609
 2396              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2397              		.loc 1 164 15 is_stmt 0 view .LVU610
 2398 0ac4 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2399              	.LVL151:
 165:armwave.c     ****     uint32_t offset;
 2400              		.loc 1 165 5 is_stmt 1 view .LVU611
 166:armwave.c     **** 
 2401              		.loc 1 166 5 view .LVU612
 168:armwave.c     **** 
 2402              		.loc 1 168 5 view .LVU613
 2403 0ac8 000058E3 		cmp	r8, #0	@ _1,
 2404 0acc 4900000A 		beq	.L153		@,
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2405              		.loc 1 170 5 view .LVU614
 2406              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2407              		.loc 1 170 10 is_stmt 0 view .LVU615
 2408 0ad0 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2409 0ad4 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2410              	.LVL152:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2411              		.loc 1 173 5 is_stmt 1 view .LVU616
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2412              		.loc 1 173 5 is_stmt 0 view .LVU617
 2413 0ad8 000057E3 		cmp	r7, #0	@ npix,
 2414 0adc 0A0000DA 		ble	.L134		@,
 2415              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2416              		.loc 1 185 52 view .LVU618
 2417 0ae0 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2418              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2419              		.loc 1 186 52 view .LVU619
 2420 0ae4 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2421              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2422              		.loc 1 187 52 view .LVU620
 2423 0ae8 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2424              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2425              		.loc 1 209 57 view .LVU621
 2426 0aec 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2427              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2428              		.loc 1 173 11 view .LVU622
 2429 0af0 00E0A0E3 		mov	lr, #0	@ n,
 2430              	.LVL153:
 2431              	.L141:
 177:armwave.c     **** 
 2432              		.loc 1 177 9 is_stmt 1 view .LVU623
 2433              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 2434              		.loc 1 177 19 is_stmt 0 view .LVU624
 2435 0af4 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2436              	.LVL154:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2437              		.loc 1 179 9 is_stmt 1 view .LVU625
 2438              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2439              		.loc 1 179 11 is_stmt 0 view .LVU626
 2440 0af8 000050E3 		cmp	r0, #0	@ wave_word,
 2441 0afc 0400001A 		bne	.L150		@,
 2442 0b00 04E08EE2 		add	lr, lr, #4	@ n, n,
 2443              	.L137:
 2444              	.LVL155:
 2445              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2446              		.loc 1 173 5 view .LVU627
 2447 0b04 0E0057E1 		cmp	r7, lr	@ npix, n
 2448 0b08 F9FFFFCA 		bgt	.L141		@,
 2449              	.LVL156:
 2450              	.L134:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2451              		.loc 1 173 5 view .LVU628
 2452              	.LBE36:
 2453              	.LBE35:
 2454              	@ armwave.c:441: }
 441:armwave.c     **** }
 2455              		.loc 1 441 1 view .LVU629
 2456 0b0c 0CD08DE2 		add	sp, sp, #12	@,,
 2457              		.cfi_remember_state
 2458              		.cfi_def_cfa_offset 36
 2459              		@ sp needed	@
 2460 0b10 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2461              	.LVL157:
 2462              	.L150:
 2463              		.cfi_restore_state
 2464              	.LBB38:
 2465              	.LBB37:
 2466              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2467              		.loc 1 184 19 view .LVU630
 2468 0b14 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2469              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2470              		.loc 1 179 11 view .LVU631
 2471 0b18 0E60A0E1 		mov	r6, lr	@ ivtmp.96, n
 2472              	.LVL158:
 181:armwave.c     ****                 wave_word >>= 8;
 2473              		.loc 1 181 17 is_stmt 1 view .LVU632
 182:armwave.c     **** 
 2474              		.loc 1 182 17 view .LVU633
 2475              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2476              		.loc 1 182 27 is_stmt 0 view .LVU634
 2477 0b1c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2478              	.LVL159:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2479              		.loc 1 184 17 is_stmt 1 view .LVU635
 2480 0b20 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.96,
 2481              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2482              		.loc 1 184 19 is_stmt 0 view .LVU636
 2483 0b24 0500001A 		bne	.L154		@,
 2484              	.LVL160:
 2485              	.L138:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2486              		.loc 1 184 19 view .LVU637
 2487 0b28 016086E2 		add	r6, r6, #1	@ ivtmp.96, ivtmp.96,
 2488              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 2489              		.loc 1 180 13 view .LVU638
 2490 0b2c 06005EE1 		cmp	lr, r6	@ n, ivtmp.96
 2491 0b30 F3FFFF0A 		beq	.L137		@,
 181:armwave.c     ****                 wave_word >>= 8;
 2492              		.loc 1 181 17 is_stmt 1 view .LVU639
 2493              	.LVL161:
 182:armwave.c     **** 
 2494              		.loc 1 182 17 view .LVU640
 2495              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2496              		.loc 1 184 19 is_stmt 0 view .LVU641
 2497 0b34 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2498              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2499              		.loc 1 182 27 view .LVU642
 2500 0b38 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2501              	.LVL162:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2502              		.loc 1 184 17 is_stmt 1 view .LVU643
 2503              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2504              		.loc 1 184 19 is_stmt 0 view .LVU644
 2505 0b3c F9FFFF0A 		beq	.L138		@,
 2506              	.L154:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2507              		.loc 1 185 21 is_stmt 1 view .LVU645
 2508              	.LVL163:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2509              		.loc 1 186 21 view .LVU646
 187:armwave.c     **** 
 2510              		.loc 1 187 21 view .LVU647
 189:armwave.c     ****                     g = MIN(gg, 255);
 2511              		.loc 1 189 21 view .LVU648
 190:armwave.c     ****                     b = MIN(bb, 255);
 2512              		.loc 1 190 21 view .LVU649
 191:armwave.c     **** 
 2513              		.loc 1 191 21 view .LVU650
 194:armwave.c     **** 
 2514              		.loc 1 194 21 view .LVU651
 2515              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2516              		.loc 1 209 32 is_stmt 0 view .LVU652
 2517 0b40 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.96
 2518              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2519              		.loc 1 210 41 view .LVU653
 2520 0b44 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2521              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2522              		.loc 1 209 40 view .LVU654
 2523 0b48 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2524              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2525              		.loc 1 210 41 view .LVU655
 2526 0b4c 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2527              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2528              		.loc 1 187 55 view .LVU656
 2529 0b50 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2530              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2531              		.loc 1 209 40 view .LVU657
 2532 0b54 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2533              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2534              		.loc 1 210 46 view .LVU658
 2535 0b58 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2536              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2537              		.loc 1 186 55 view .LVU659
 2538 0b5c 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2539              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2540              		.loc 1 187 24 view .LVU660
 2541 0b60 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2542              	.LVL164:
 2543              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2544              		.loc 1 191 25 view .LVU661
 2545 0b64 FF0053E3 		cmp	r3, #255	@ bb,
 2546              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2547              		.loc 1 186 24 view .LVU662
 2548 0b68 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2549              	.LVL165:
 2550              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2551              		.loc 1 191 25 view .LVU663
 2552 0b6c FF30A0A3 		movge	r3, #255	@ bb,
 2553              	.LVL166:
 2554              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2555              		.loc 1 209 40 view .LVU664
 2556 0b70 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2557              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2558              		.loc 1 210 46 view .LVU665
 2559 0b74 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2560              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 2561              		.loc 1 190 25 view .LVU666
 2562 0b78 FF0052E3 		cmp	r2, #255	@ gg,
 2563 0b7c FF20A0A3 		movge	r2, #255	@ gg,
 2564              	.LVL167:
 2565              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2566              		.loc 1 185 55 view .LVU667
 2567 0b80 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2568              	.LVL168:
 2569              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2570              		.loc 1 194 56 view .LVU668
 2571 0b84 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2572              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2573              		.loc 1 194 44 view .LVU669
 2574 0b88 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2575              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2576              		.loc 1 209 24 view .LVU670
 2577 0b8c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2578              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2579              		.loc 1 185 24 view .LVU671
 2580 0b90 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2581              	.LVL169:
 2582              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2583              		.loc 1 194 56 view .LVU672
 2584 0b94 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2585              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2586              		.loc 1 194 44 view .LVU673
 2587 0b98 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2588              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2589              		.loc 1 189 25 view .LVU674
 2590 0b9c FF0051E3 		cmp	r1, #255	@ rr,
 2591              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2592              		.loc 1 194 51 view .LVU675
 2593 0ba0 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2594              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2595              		.loc 1 189 25 view .LVU676
 2596 0ba4 FF10A0A3 		movge	r1, #255	@ rr,
 2597              	.LVL170:
 2598              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2599              		.loc 1 209 24 view .LVU677
 2600 0ba8 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2601              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2602              		.loc 1 210 24 view .LVU678
 2603 0bac C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2604              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2605              		.loc 1 194 62 view .LVU679
 2606 0bb0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2607 0bb4 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2608              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2609              		.loc 1 194 26 view .LVU680
 2610 0bb8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2611              	.LVL171:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2612              		.loc 1 208 21 is_stmt 1 view .LVU681
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2613              		.loc 1 209 21 view .LVU682
 210:armwave.c     ****                     xx = (nsub >> 8);
 2614              		.loc 1 210 21 view .LVU683
 211:armwave.c     **** 
 2615              		.loc 1 211 21 view .LVU684
 2616              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 2617              		.loc 1 211 32 is_stmt 0 view .LVU685
 2618 0bbc 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.96,
 2619              	.LVL172:
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2620              		.loc 1 213 21 is_stmt 1 view .LVU686
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2621              		.loc 1 213 21 is_stmt 0 view .LVU687
 2622 0bc0 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2623              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2624              		.loc 1 210 24 view .LVU688
 2625 0bc4 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2626              	.LVL173:
 2627              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2628              		.loc 1 213 21 view .LVU689
 2629 0bc8 020054E1 		cmp	r4, r2	@ yy, ye
 2630 0bcc D5FFFF2A 		bcs	.L138		@,
 2631 0bd0 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2632              	.LVL174:
 2633              	.L139:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2634              		.loc 1 214 25 is_stmt 1 view .LVU690
 215:armwave.c     ****                     }
 2635              		.loc 1 215 25 view .LVU691
 2636              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2637              		.loc 1 214 43 is_stmt 0 view .LVU692
 2638 0bd4 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2639              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2640              		.loc 1 213 21 view .LVU693
 2641 0bd8 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2642              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2643              		.loc 1 215 43 view .LVU694
 2644 0bdc 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2645              	.LVL175:
 2646              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2647              		.loc 1 213 42 view .LVU695
 2648 0be0 014084E2 		add	r4, r4, #1	@ yy, yy,
 2649              	.LVL176:
 2650              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2651              		.loc 1 213 21 view .LVU696
 2652 0be4 040050E1 		cmp	r0, r4	@ ye, yy
 2653              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2654              		.loc 1 215 53 view .LVU697
 2655 0be8 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2656              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2657              		.loc 1 213 21 view .LVU698
 2658 0bec F8FFFF1A 		bne	.L139		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2659              		.loc 1 213 21 view .LVU699
 2660 0bf0 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2661 0bf4 CBFFFFEA 		b	.L138		@
 2662              	.LVL177:
 2663              	.L153:
 168:armwave.c     **** 
 2664              		.loc 1 168 5 is_stmt 1 view .LVU700
 2665 0bf8 10309FE5 		ldr	r3, .L155+4	@,
 2666 0bfc A820A0E3 		mov	r2, #168	@,
 2667 0c00 0C109FE5 		ldr	r1, .L155+8	@,
 2668 0c04 0C009FE5 		ldr	r0, .L155+12	@,
 2669 0c08 FEFFFFEB 		bl	__assert_fail		@
 2670              	.LVL178:
 2671              	.L156:
 2672              		.align	2
 2673              	.L155:
 2674 0c0c 00000000 		.word	g_armwave_state
 2675 0c10 00000000 		.word	.LANCHOR0
 2676 0c14 20000000 		.word	.LC2
 2677 0c18 2C000000 		.word	.LC3
 2678              	.LBE37:
 2679              	.LBE38:
 2680              		.cfi_endproc
 2681              	.LFE70:
 2683              		.align	2
 2684              		.global	armwave_test_dump_buffer_to_ppm
 2685              		.syntax unified
 2686              		.arm
 2687              		.fpu vfp
 2689              	armwave_test_dump_buffer_to_ppm:
 2690              	.LVL179:
 2691              	.LFB71:
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 445:armwave.c     ****  */
 446:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 447:armwave.c     **** {
 2692              		.loc 1 447 1 view -0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
 2696              		@ link register save eliminated.
 448:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2697              		.loc 1 448 5 view .LVU702
 2698 0c1c 08309FE5 		ldr	r3, .L158	@ tmp112,
 2699 0c20 0010A0E1 		mov	r1, r0	@, fn
 2700 0c24 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2701              	.LVL180:
 2702              		.loc 1 448 5 is_stmt 0 view .LVU703
 2703 0c28 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2704              	.LVL181:
 2705              	.L159:
 2706              		.loc 1 448 5 view .LVU704
 2707              		.align	2
 2708              	.L158:
 2709 0c2c 00000000 		.word	g_armwave_state
 2710              		.cfi_endproc
 2711              	.LFE71:
 2713              		.align	2
 2714              		.global	armwave_test_fill_gdkbuf
 2715              		.syntax unified
 2716              		.arm
 2717              		.fpu vfp
 2719              	armwave_test_fill_gdkbuf:
 2720              	.LVL182:
 2721              	.LFB72:
 449:armwave.c     **** }
 450:armwave.c     **** 
 451:armwave.c     **** /*
 452:armwave.c     ****  * Render GDK buffer with test funtionry.
 453:armwave.c     ****  */
 454:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 455:armwave.c     **** {
 2722              		.loc 1 455 1 is_stmt 1 view -0
 2723              		.cfi_startproc
 2724              		@ args = 0, pretend = 0, frame = 8
 2725              		@ frame_needed = 0, uses_anonymous_args = 0
 456:armwave.c     ****     //PyObject *mv;
 457:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 458:armwave.c     **** 
 459:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 460:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2726              		.loc 1 460 5 view .LVU706
 2727              	@ armwave.c:460:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2728              		.loc 1 460 11 is_stmt 0 view .LVU707
 2729 0c30 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2730              	@ armwave.c:455: {
 455:armwave.c     ****     //PyObject *mv;
 2731              		.loc 1 455 1 view .LVU708
 2732 0c34 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2733              		.cfi_def_cfa_offset 36
 2734              		.cfi_offset 4, -36
 2735              		.cfi_offset 5, -32
 2736              		.cfi_offset 6, -28
 2737              		.cfi_offset 7, -24
 2738              		.cfi_offset 8, -20
 2739              		.cfi_offset 9, -16
 2740              		.cfi_offset 10, -12
 2741              		.cfi_offset 11, -8
 2742              		.cfi_offset 14, -4
 2743 0c38 0CD04DE2 		sub	sp, sp, #12	@,,
 2744              		.cfi_def_cfa_offset 48
 2745              	.LBB41:
 2746              	.LBB42:
 2747              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2748              		.loc 1 164 15 view .LVU709
 2749 0c3c 48519FE5 		ldr	r5, .L181	@ tmp206,
 2750              	.LBE42:
 2751              	.LBE41:
 2752              	@ armwave.c:460:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2753              		.loc 1 460 11 view .LVU710
 2754 0c40 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2755              	.LVL183:
 461:armwave.c     ****     
 462:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 463:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2756              		.loc 1 463 5 is_stmt 1 view .LVU711
 2757              	.LBB45:
 2758              	.LBI41:
 157:armwave.c     **** {
 2759              		.loc 1 157 6 view .LVU712
 2760              	.LBB43:
 159:armwave.c     ****     // uint32_t ysub;
 2761              		.loc 1 159 5 view .LVU713
 161:armwave.c     ****     uint8_t r, g, b, value; 
 2762              		.loc 1 161 5 view .LVU714
 162:armwave.c     ****     // uint8_t row;
 2763              		.loc 1 162 5 view .LVU715
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2764              		.loc 1 164 5 view .LVU716
 2765              	@ armwave.c:168:     assert(out_buffer != NULL);
 168:armwave.c     **** 
 2766              		.loc 1 168 5 is_stmt 0 view .LVU717
 2767 0c44 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2768              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2769              		.loc 1 164 15 view .LVU718
 2770 0c48 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2771              	.LVL184:
 165:armwave.c     ****     uint32_t offset;
 2772              		.loc 1 165 5 is_stmt 1 view .LVU719
 166:armwave.c     **** 
 2773              		.loc 1 166 5 view .LVU720
 168:armwave.c     **** 
 2774              		.loc 1 168 5 view .LVU721
 2775 0c4c 4900000A 		beq	.L179		@,
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2776              		.loc 1 170 5 view .LVU722
 2777              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2778              		.loc 1 170 10 is_stmt 0 view .LVU723
 2779 0c50 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2780 0c54 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2781              	.LVL185:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2782              		.loc 1 173 5 is_stmt 1 view .LVU724
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2783              		.loc 1 173 5 is_stmt 0 view .LVU725
 2784 0c58 000057E3 		cmp	r7, #0	@ npix,
 2785 0c5c 0A0000DA 		ble	.L160		@,
 2786              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2787              		.loc 1 185 52 view .LVU726
 2788 0c60 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2789              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2790              		.loc 1 186 52 view .LVU727
 2791 0c64 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2792              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2793              		.loc 1 187 52 view .LVU728
 2794 0c68 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2795              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2796              		.loc 1 209 57 view .LVU729
 2797 0c6c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2798              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2799              		.loc 1 173 11 view .LVU730
 2800 0c70 00C0A0E3 		mov	ip, #0	@ n,
 2801              	.LVL186:
 2802              	.L167:
 177:armwave.c     **** 
 2803              		.loc 1 177 9 is_stmt 1 view .LVU731
 2804              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 2805              		.loc 1 177 19 is_stmt 0 view .LVU732
 2806 0c74 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2807              	.LVL187:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2808              		.loc 1 179 9 is_stmt 1 view .LVU733
 2809              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2810              		.loc 1 179 11 is_stmt 0 view .LVU734
 2811 0c78 000050E3 		cmp	r0, #0	@ wave_word,
 2812 0c7c 0400001A 		bne	.L176		@,
 2813 0c80 04C08CE2 		add	ip, ip, #4	@ n, n,
 2814              	.L163:
 2815              	.LVL188:
 2816              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2817              		.loc 1 173 5 view .LVU735
 2818 0c84 0C0057E1 		cmp	r7, ip	@ npix, n
 2819 0c88 F9FFFFCA 		bgt	.L167		@,
 2820              	.LVL189:
 2821              	.L160:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2822              		.loc 1 173 5 view .LVU736
 2823              	.LBE43:
 2824              	.LBE45:
 2825              	@ armwave.c:464: }
 464:armwave.c     **** }
 2826              		.loc 1 464 1 view .LVU737
 2827 0c8c 0CD08DE2 		add	sp, sp, #12	@,,
 2828              		.cfi_remember_state
 2829              		.cfi_def_cfa_offset 36
 2830              		@ sp needed	@
 2831 0c90 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2832              	.LVL190:
 2833              	.L176:
 2834              		.cfi_restore_state
 2835              	.LBB46:
 2836              	.LBB44:
 2837              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2838              		.loc 1 184 19 view .LVU738
 2839 0c94 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2840              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2841              		.loc 1 179 11 view .LVU739
 2842 0c98 0C60A0E1 		mov	r6, ip	@ ivtmp.112, n
 2843              	.LVL191:
 181:armwave.c     ****                 wave_word >>= 8;
 2844              		.loc 1 181 17 is_stmt 1 view .LVU740
 182:armwave.c     **** 
 2845              		.loc 1 182 17 view .LVU741
 2846              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2847              		.loc 1 182 27 is_stmt 0 view .LVU742
 2848 0c9c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2849              	.LVL192:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2850              		.loc 1 184 17 is_stmt 1 view .LVU743
 2851 0ca0 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.112,
 2852              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2853              		.loc 1 184 19 is_stmt 0 view .LVU744
 2854 0ca4 0500001A 		bne	.L180		@,
 2855              	.LVL193:
 2856              	.L164:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2857              		.loc 1 184 19 view .LVU745
 2858 0ca8 016086E2 		add	r6, r6, #1	@ ivtmp.112, ivtmp.112,
 2859              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 2860              		.loc 1 180 13 view .LVU746
 2861 0cac 06005CE1 		cmp	ip, r6	@ n, ivtmp.112
 2862 0cb0 F3FFFF0A 		beq	.L163		@,
 181:armwave.c     ****                 wave_word >>= 8;
 2863              		.loc 1 181 17 is_stmt 1 view .LVU747
 2864              	.LVL194:
 182:armwave.c     **** 
 2865              		.loc 1 182 17 view .LVU748
 2866              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2867              		.loc 1 184 19 is_stmt 0 view .LVU749
 2868 0cb4 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2869              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2870              		.loc 1 182 27 view .LVU750
 2871 0cb8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2872              	.LVL195:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2873              		.loc 1 184 17 is_stmt 1 view .LVU751
 2874              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2875              		.loc 1 184 19 is_stmt 0 view .LVU752
 2876 0cbc F9FFFF0A 		beq	.L164		@,
 2877              	.L180:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2878              		.loc 1 185 21 is_stmt 1 view .LVU753
 2879              	.LVL196:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2880              		.loc 1 186 21 view .LVU754
 187:armwave.c     **** 
 2881              		.loc 1 187 21 view .LVU755
 189:armwave.c     ****                     g = MIN(gg, 255);
 2882              		.loc 1 189 21 view .LVU756
 190:armwave.c     ****                     b = MIN(bb, 255);
 2883              		.loc 1 190 21 view .LVU757
 191:armwave.c     **** 
 2884              		.loc 1 191 21 view .LVU758
 194:armwave.c     **** 
 2885              		.loc 1 194 21 view .LVU759
 2886              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2887              		.loc 1 209 32 is_stmt 0 view .LVU760
 2888 0cc0 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.112
 2889              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2890              		.loc 1 210 41 view .LVU761
 2891 0cc4 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2892              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2893              		.loc 1 209 40 view .LVU762
 2894 0cc8 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2895              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2896              		.loc 1 210 41 view .LVU763
 2897 0ccc 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2898              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2899              		.loc 1 187 55 view .LVU764
 2900 0cd0 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2901              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2902              		.loc 1 209 40 view .LVU765
 2903 0cd4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2904              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2905              		.loc 1 210 46 view .LVU766
 2906 0cd8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2907              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2908              		.loc 1 186 55 view .LVU767
 2909 0cdc 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2910              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2911              		.loc 1 187 24 view .LVU768
 2912 0ce0 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2913              	.LVL197:
 2914              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2915              		.loc 1 191 25 view .LVU769
 2916 0ce4 FF0053E3 		cmp	r3, #255	@ bb,
 2917              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2918              		.loc 1 186 24 view .LVU770
 2919 0ce8 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2920              	.LVL198:
 2921              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2922              		.loc 1 191 25 view .LVU771
 2923 0cec FF30A0A3 		movge	r3, #255	@ bb,
 2924              	.LVL199:
 2925              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2926              		.loc 1 209 40 view .LVU772
 2927 0cf0 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2928              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2929              		.loc 1 210 46 view .LVU773
 2930 0cf4 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2931              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 2932              		.loc 1 190 25 view .LVU774
 2933 0cf8 FF0052E3 		cmp	r2, #255	@ gg,
 2934 0cfc FF20A0A3 		movge	r2, #255	@ gg,
 2935              	.LVL200:
 2936              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2937              		.loc 1 185 55 view .LVU775
 2938 0d00 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2939              	.LVL201:
 2940              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2941              		.loc 1 194 56 view .LVU776
 2942 0d04 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2943              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2944              		.loc 1 194 44 view .LVU777
 2945 0d08 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2946              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2947              		.loc 1 209 24 view .LVU778
 2948 0d0c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2949              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2950              		.loc 1 185 24 view .LVU779
 2951 0d10 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2952              	.LVL202:
 2953              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2954              		.loc 1 194 56 view .LVU780
 2955 0d14 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2956              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2957              		.loc 1 194 44 view .LVU781
 2958 0d18 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2959              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2960              		.loc 1 189 25 view .LVU782
 2961 0d1c FF0051E3 		cmp	r1, #255	@ rr,
 2962              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2963              		.loc 1 194 51 view .LVU783
 2964 0d20 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2965              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2966              		.loc 1 189 25 view .LVU784
 2967 0d24 FF10A0A3 		movge	r1, #255	@ rr,
 2968              	.LVL203:
 2969              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2970              		.loc 1 209 24 view .LVU785
 2971 0d28 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2972              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2973              		.loc 1 210 24 view .LVU786
 2974 0d2c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2975              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2976              		.loc 1 194 62 view .LVU787
 2977 0d30 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2978 0d34 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2979              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2980              		.loc 1 194 26 view .LVU788
 2981 0d38 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2982              	.LVL204:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2983              		.loc 1 208 21 is_stmt 1 view .LVU789
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2984              		.loc 1 209 21 view .LVU790
 210:armwave.c     ****                     xx = (nsub >> 8);
 2985              		.loc 1 210 21 view .LVU791
 211:armwave.c     **** 
 2986              		.loc 1 211 21 view .LVU792
 2987              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 2988              		.loc 1 211 32 is_stmt 0 view .LVU793
 2989 0d3c 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.112,
 2990              	.LVL205:
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2991              		.loc 1 213 21 is_stmt 1 view .LVU794
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2992              		.loc 1 213 21 is_stmt 0 view .LVU795
 2993 0d40 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2994              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2995              		.loc 1 210 24 view .LVU796
 2996 0d44 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2997              	.LVL206:
 2998              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2999              		.loc 1 213 21 view .LVU797
 3000 0d48 02005EE1 		cmp	lr, r2	@ yy, ye
 3001 0d4c D5FFFF2A 		bcs	.L164		@,
 3002 0d50 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3003              	.LVL207:
 3004              	.L165:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3005              		.loc 1 214 25 is_stmt 1 view .LVU798
 215:armwave.c     ****                     }
 3006              		.loc 1 215 25 view .LVU799
 3007              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3008              		.loc 1 214 43 is_stmt 0 view .LVU800
 3009 0d54 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3010              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3011              		.loc 1 213 21 view .LVU801
 3012 0d58 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3013              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 3014              		.loc 1 215 43 view .LVU802
 3015 0d5c 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 3016              	.LVL208:
 3017              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3018              		.loc 1 213 42 view .LVU803
 3019 0d60 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3020              	.LVL209:
 3021              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3022              		.loc 1 213 21 view .LVU804
 3023 0d64 0E0050E1 		cmp	r0, lr	@ ye, yy
 3024              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 3025              		.loc 1 215 53 view .LVU805
 3026 0d68 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3027              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3028              		.loc 1 213 21 view .LVU806
 3029 0d6c F8FFFF1A 		bne	.L165		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3030              		.loc 1 213 21 view .LVU807
 3031 0d70 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3032 0d74 CBFFFFEA 		b	.L164		@
 3033              	.LVL210:
 3034              	.L179:
 168:armwave.c     **** 
 3035              		.loc 1 168 5 is_stmt 1 view .LVU808
 3036 0d78 10309FE5 		ldr	r3, .L181+4	@,
 3037 0d7c A820A0E3 		mov	r2, #168	@,
 3038 0d80 0C109FE5 		ldr	r1, .L181+8	@,
 3039 0d84 0C009FE5 		ldr	r0, .L181+12	@,
 3040              	.LVL211:
 168:armwave.c     **** 
 3041              		.loc 1 168 5 is_stmt 0 view .LVU809
 3042 0d88 FEFFFFEB 		bl	__assert_fail		@
 3043              	.LVL212:
 3044              	.L182:
 3045              		.align	2
 3046              	.L181:
 3047 0d8c 00000000 		.word	g_armwave_state
 3048 0d90 00000000 		.word	.LANCHOR0
 3049 0d94 20000000 		.word	.LC2
 3050 0d98 2C000000 		.word	.LC3
 3051              	.LBE44:
 3052              	.LBE46:
 3053              		.cfi_endproc
 3054              	.LFE72:
 3056              		.align	2
 3057              		.global	armwave_test_buffer_alloc
 3058              		.syntax unified
 3059              		.arm
 3060              		.fpu vfp
 3062              	armwave_test_buffer_alloc:
 3063              	.LVL213:
 3064              	.LFB73:
 465:armwave.c     **** 
 466:armwave.c     **** /*
 467:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 468:armwave.c     ****  */
 469:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 470:armwave.c     **** {
 3065              		.loc 1 470 1 is_stmt 1 view -0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 0
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 471:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3069              		.loc 1 471 5 view .LVU811
 3070              	@ armwave.c:470: {
 470:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3071              		.loc 1 470 1 is_stmt 0 view .LVU812
 3072 0d9c 70402DE9 		push	{r4, r5, r6, lr}	@
 3073              		.cfi_def_cfa_offset 16
 3074              		.cfi_offset 4, -16
 3075              		.cfi_offset 5, -12
 3076              		.cfi_offset 6, -8
 3077              		.cfi_offset 14, -4
 3078              	@ armwave.c:470: {
 470:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3079              		.loc 1 470 1 view .LVU813
 3080 0da0 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3081              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 3082              		.loc 1 471 23 view .LVU814
 3083 0da4 44409FE5 		ldr	r4, .L190	@ tmp128,
 3084 0da8 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3085              	.LVL214:
 3086              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 3087              		.loc 1 471 7 view .LVU815
 3088 0dac 000050E3 		cmp	r0, #0	@ _1,
 3089 0db0 0000000A 		beq	.L184		@,
 472:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3090              		.loc 1 472 9 is_stmt 1 view .LVU816
 3091 0db4 FEFFFFEB 		bl	free		@
 3092              	.LVL215:
 3093              	.L184:
 473:armwave.c     ****     }
 474:armwave.c     **** 
 475:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 476:armwave.c     **** 
 477:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3094              		.loc 1 477 5 view .LVU817
 3095              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3096              		.loc 1 477 75 is_stmt 0 view .LVU818
 3097 0db8 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3098 0dbc 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3099              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3100              		.loc 1 477 40 view .LVU819
 3101 0dc0 0610A0E1 		mov	r1, r6	@, nsets
 3102              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3103              		.loc 1 477 75 view .LVU820
 3104 0dc4 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3105              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3106              		.loc 1 477 40 view .LVU821
 3107 0dc8 0500A0E1 		mov	r0, r5	@, _4
 3108 0dcc FEFFFFEB 		bl	calloc		@
 3109              	.LVL216:
 3110              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 478:armwave.c     **** 
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3111              		.loc 1 479 7 view .LVU822
 3112 0dd0 000050E3 		cmp	r0, #0	@ tmp124,
 3113              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3114              		.loc 1 477 38 view .LVU823
 3115 0dd4 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3116              		.loc 1 479 5 is_stmt 1 view .LVU824
 3117              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 3118              		.loc 1 479 7 is_stmt 0 view .LVU825
 3119 0dd8 7080BD18 		popne	{r4, r5, r6, pc}	@
 480:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3120              		.loc 1 480 9 is_stmt 1 view .LVU826
 3121 0ddc 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3122 0de0 0620A0E1 		mov	r2, r6	@, nsets
 3123 0de4 08009FE5 		ldr	r0, .L190+4	@,
 3124              	@ armwave.c:484: }
 481:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 482:armwave.c     ****         return;
 483:armwave.c     ****     }
 484:armwave.c     **** }
 3125              		.loc 1 484 1 is_stmt 0 view .LVU827
 3126 0de8 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3127              		.cfi_restore 14
 3128              		.cfi_restore 6
 3129              		.cfi_restore 5
 3130              		.cfi_restore 4
 3131              		.cfi_def_cfa_offset 0
 3132              	.LVL217:
 3133              	@ armwave.c:480:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 480:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3134              		.loc 1 480 9 view .LVU828
 3135 0dec FEFFFFEA 		b	printf		@
 3136              	.LVL218:
 3137              	.L191:
 480:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3138              		.loc 1 480 9 view .LVU829
 3139              		.align	2
 3140              	.L190:
 3141 0df0 00000000 		.word	g_armwave_state
 3142 0df4 BC010000 		.word	.LC18
 3143              		.cfi_endproc
 3144              	.LFE73:
 3146              		.align	2
 3147              		.global	armwave_fill_pixbuf_into_pybuffer
 3148              		.syntax unified
 3149              		.arm
 3150              		.fpu vfp
 3152              	armwave_fill_pixbuf_into_pybuffer:
 3153              	.LVL219:
 3154              	.LFB74:
 485:armwave.c     **** 
 486:armwave.c     **** /*
 487:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 488:armwave.c     ****  */
 489:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 490:armwave.c     **** {
 3155              		.loc 1 490 1 is_stmt 1 view -0
 3156              		.cfi_startproc
 3157              		@ args = 0, pretend = 0, frame = 48
 3158              		@ frame_needed = 0, uses_anonymous_args = 0
 491:armwave.c     ****     Py_buffer buffer;
 3159              		.loc 1 491 5 view .LVU831
 492:armwave.c     ****     int ret;
 3160              		.loc 1 492 5 view .LVU832
 493:armwave.c     **** 
 494:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 495:armwave.c     **** 
 496:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3161              		.loc 1 496 5 view .LVU833
 3162              	@ armwave.c:490: {
 490:armwave.c     ****     Py_buffer buffer;
 3163              		.loc 1 490 1 is_stmt 0 view .LVU834
 3164 0df8 04E02DE5 		str	lr, [sp, #-4]!	@,
 3165              		.cfi_def_cfa_offset 4
 3166              		.cfi_offset 14, -4
 3167 0dfc 34D04DE2 		sub	sp, sp, #52	@,,
 3168              		.cfi_def_cfa_offset 56
 3169              	@ armwave.c:496:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3170              		.loc 1 496 11 view .LVU835
 3171 0e00 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3172 0e04 0120A0E3 		mov	r2, #1	@,
 3173 0e08 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3174              	.LVL220:
 497:armwave.c     **** 
 498:armwave.c     ****     if(ret != 0) {
 3175              		.loc 1 498 5 is_stmt 1 view .LVU836
 3176              	@ armwave.c:498:     if(ret != 0) {
 3177              		.loc 1 498 7 is_stmt 0 view .LVU837
 3178 0e0c 000050E3 		cmp	r0, #0	@,
 3179 0e10 0A00001A 		bne	.L196		@,
 499:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 500:armwave.c     ****         Py_RETURN_FALSE;
 501:armwave.c     ****     }
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 504:armwave.c     **** 
 505:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3180              		.loc 1 505 5 is_stmt 1 view .LVU838
 3181 0e14 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3182              	.LVL221:
 3183              		.loc 1 505 5 is_stmt 0 view .LVU839
 3184 0e18 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3185              	.LVL222:
 506:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 507:armwave.c     **** 
 508:armwave.c     ****     PyBuffer_Release(&buffer);
 3186              		.loc 1 508 5 is_stmt 1 view .LVU840
 3187 0e1c 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3188 0e20 FEFFFFEB 		bl	PyBuffer_Release		@
 3189              	.LVL223:
 509:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 510:armwave.c     **** 
 511:armwave.c     ****     Py_RETURN_TRUE;
 3190              		.loc 1 511 5 view .LVU841
 3191              	.LBB47:
 3192              	.LBI47:
 3193              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3194              		.loc 2 456 20 view .LVU842
 3195              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3196              		.loc 2 458 21 view .LVU843
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3197              		.loc 2 459 5 view .LVU844
 3198              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3199              		.loc 2 459 18 is_stmt 0 view .LVU845
 3200 0e24 38309FE5 		ldr	r3, .L197	@ tmp126,
 3201              	.LBE48:
 3202              	.LBE47:
 3203              	@ armwave.c:511:     Py_RETURN_TRUE;
 3204              		.loc 1 511 5 view .LVU846
 3205 0e28 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3206              	.LBB50:
 3207              	.LBB49:
 3208              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3209              		.loc 2 459 18 view .LVU847
 3210 0e2c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3211 0e30 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3212 0e34 002083E5 		str	r2, [r3]	@ tmp128,
 3213              	.LBE49:
 3214              	.LBE50:
 3215              	@ armwave.c:512: }
 512:armwave.c     **** }
 3216              		.loc 1 512 1 view .LVU848
 3217 0e38 34D08DE2 		add	sp, sp, #52	@,,
 3218              		.cfi_remember_state
 3219              		.cfi_def_cfa_offset 4
 3220              		@ sp needed	@
 3221 0e3c 04F09DE4 		ldr	pc, [sp], #4	@
 3222              	.LVL224:
 3223              	.L196:
 3224              		.cfi_restore_state
 499:armwave.c     ****         Py_RETURN_FALSE;
 3225              		.loc 1 499 9 is_stmt 1 view .LVU849
 3226 0e40 20009FE5 		ldr	r0, .L197+4	@,
 3227              	.LVL225:
 499:armwave.c     ****         Py_RETURN_FALSE;
 3228              		.loc 1 499 9 is_stmt 0 view .LVU850
 3229 0e44 FEFFFFEB 		bl	puts		@
 3230              	.LVL226:
 500:armwave.c     ****     }
 3231              		.loc 1 500 9 is_stmt 1 view .LVU851
 3232              	.LBB51:
 3233              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3234              		.loc 2 456 20 view .LVU852
 3235              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3236              		.loc 2 458 21 view .LVU853
 3237              		.loc 2 459 5 view .LVU854
 3238              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3239              		.loc 2 459 18 is_stmt 0 view .LVU855
 3240 0e48 1C309FE5 		ldr	r3, .L197+8	@ tmp120,
 3241              	.LBE52:
 3242              	.LBE51:
 3243              	@ armwave.c:500:         Py_RETURN_FALSE;
 500:armwave.c     ****     }
 3244              		.loc 1 500 9 view .LVU856
 3245 0e4c 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3246              	.LBB54:
 3247              	.LBB53:
 3248              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3249              		.loc 2 459 18 view .LVU857
 3250 0e50 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3251 0e54 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3252 0e58 002083E5 		str	r2, [r3]	@ tmp122,
 3253              	.LBE53:
 3254              	.LBE54:
 3255              	@ armwave.c:512: }
 3256              		.loc 1 512 1 view .LVU858
 3257 0e5c 34D08DE2 		add	sp, sp, #52	@,,
 3258              		.cfi_def_cfa_offset 4
 3259              		@ sp needed	@
 3260 0e60 04F09DE4 		ldr	pc, [sp], #4	@
 3261              	.L198:
 3262              		.align	2
 3263              	.L197:
 3264 0e64 00000000 		.word	_Py_TrueStruct
 3265 0e68 10020000 		.word	.LC19
 3266 0e6c 00000000 		.word	_Py_FalseStruct
 3267              		.cfi_endproc
 3268              	.LFE74:
 3270              		.align	2
 3271              		.global	armwave_test_create_am_sine
 3272              		.syntax unified
 3273              		.arm
 3274              		.fpu vfp
 3276              	armwave_test_create_am_sine:
 3277              	.LVL227:
 3278              	.LFB75:
 513:armwave.c     **** 
 514:armwave.c     **** /*
 515:armwave.c     ****  * Make a test AM waveform for render tests.
 516:armwave.c     ****  *
 517:armwave.c     ****  * @param   mod                     modulation depth
 518:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 519:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 520:armwave.c     ****  */
 521:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 522:armwave.c     **** {
 3279              		.loc 1 522 1 is_stmt 1 view -0
 3280              		.cfi_startproc
 3281              		@ args = 0, pretend = 0, frame = 8
 3282              		@ frame_needed = 0, uses_anonymous_args = 0
 523:armwave.c     ****     float v, noise, xnoise, mod_val;
 3283              		.loc 1 523 5 view .LVU860
 524:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3284              		.loc 1 524 5 view .LVU861
 3285              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3286              		.loc 1 522 1 is_stmt 0 view .LVU862
 3287 0e70 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3288              		.cfi_def_cfa_offset 32
 3289              		.cfi_offset 4, -32
 3290              		.cfi_offset 5, -28
 3291              		.cfi_offset 6, -24
 3292              		.cfi_offset 7, -20
 3293              		.cfi_offset 8, -16
 3294              		.cfi_offset 9, -12
 3295              		.cfi_offset 10, -8
 3296              		.cfi_offset 14, -4
 3297              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3298              		.loc 1 524 38 view .LVU863
 3299 0e74 7A7A9FED 		vldr.32	s14, .L230	@ tmp180,
 3300              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3301              		.loc 1 524 55 view .LVU864
 3302 0e78 00529FE5 		ldr	r5, .L230+28	@ tmp250,
 3303              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3304              		.loc 1 522 1 view .LVU865
 3305 0e7c 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3306              		.cfi_def_cfa_offset 80
 3307              		.cfi_offset 80, -80
 3308              		.cfi_offset 81, -76
 3309              		.cfi_offset 82, -72
 3310              		.cfi_offset 83, -68
 3311              		.cfi_offset 84, -64
 3312              		.cfi_offset 85, -60
 3313              		.cfi_offset 86, -56
 3314              		.cfi_offset 87, -52
 3315              		.cfi_offset 88, -48
 3316              		.cfi_offset 89, -44
 3317              		.cfi_offset 90, -40
 3318              		.cfi_offset 91, -36
 3319 0e80 0090A0E1 		mov	r9, r0	@ sets, sets
 3320              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3321              		.loc 1 524 38 view .LVU866
 3322 0e84 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3323              	@ armwave.c:528:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 525:armwave.c     ****     int s, set_offset = 0;
 526:armwave.c     ****     int w, x;
 527:armwave.c     **** 
 528:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3324              		.loc 1 528 70 view .LVU867
 3325 0e88 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3326 0e8c 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3327              	.LBB57:
 3328              	.LBB58:
 3329              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3330              		.loc 1 471 23 view .LVU868
 3331 0e90 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3332              	.LVL228:
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3333              		.loc 1 471 23 view .LVU869
 3334              	.LBE58:
 3335              	.LBE57:
 3336              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 524:armwave.c     ****     int s, set_offset = 0;
 3337              		.loc 1 524 38 view .LVU870
 3338 0e94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3339              	@ armwave.c:528:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3340              		.loc 1 528 70 view .LVU871
 3341 0e98 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3342              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3343              		.loc 1 522 1 view .LVU872
 3344 0e9c 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3345              	.LBB62:
 3346              	.LBB59:
 3347              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3348              		.loc 1 471 7 view .LVU873
 3349 0ea0 000050E3 		cmp	r0, #0	@ _82,
 3350              	.LBE59:
 3351              	.LBE62:
 3352              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3353              		.loc 1 522 1 view .LVU874
 3354 0ea4 08D04DE2 		sub	sp, sp, #8	@,,
 3355              		.cfi_def_cfa_offset 88
 3356              	@ armwave.c:529:     g_armwave_state.test_wave_buffer_nsets = sets;
 529:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3357              		.loc 1 529 44 view .LVU875
 3358 0ea8 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3359              	@ armwave.c:528:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 528:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3360              		.loc 1 528 45 view .LVU876
 3361 0eac 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3362              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 524:armwave.c     ****     int s, set_offset = 0;
 3363              		.loc 1 524 38 view .LVU877
 3364 0eb0 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3365              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 524:armwave.c     ****     int s, set_offset = 0;
 3366              		.loc 1 524 11 view .LVU878
 3367 0eb4 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3368              	.LVL229:
 525:armwave.c     ****     int w, x;
 3369              		.loc 1 525 5 is_stmt 1 view .LVU879
 526:armwave.c     **** 
 3370              		.loc 1 526 5 view .LVU880
 528:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3371              		.loc 1 528 5 view .LVU881
 3372              		.loc 1 529 5 view .LVU882
 530:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3373              		.loc 1 530 5 view .LVU883
 3374              	.LBB63:
 3375              	.LBI57:
 469:armwave.c     **** {
 3376              		.loc 1 469 6 view .LVU884
 3377              	.LBB60:
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3378              		.loc 1 471 5 view .LVU885
 3379              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3380              		.loc 1 471 7 is_stmt 0 view .LVU886
 3381 0eb8 0000000A 		beq	.L200		@,
 472:armwave.c     ****     }
 3382              		.loc 1 472 9 is_stmt 1 view .LVU887
 3383 0ebc FEFFFFEB 		bl	free		@
 3384              	.LVL230:
 3385              	.L200:
 477:armwave.c     **** 
 3386              		.loc 1 477 5 view .LVU888
 3387              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3388              		.loc 1 477 75 is_stmt 0 view .LVU889
 3389 0ec0 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3390 0ec4 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3391              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3392              		.loc 1 477 40 view .LVU890
 3393 0ec8 0910A0E1 		mov	r1, r9	@, sets
 3394              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3395              		.loc 1 477 75 view .LVU891
 3396 0ecc 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3397              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3398              		.loc 1 477 40 view .LVU892
 3399 0ed0 0400A0E1 		mov	r0, r4	@, _85
 3400 0ed4 FEFFFFEB 		bl	calloc		@
 3401              	.LVL231:
 3402              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3403              		.loc 1 479 7 view .LVU893
 3404 0ed8 000050E3 		cmp	r0, #0	@ tmp191,
 3405              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3406              		.loc 1 477 38 view .LVU894
 3407 0edc 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3408              		.loc 1 479 5 is_stmt 1 view .LVU895
 3409              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3410              		.loc 1 479 7 is_stmt 0 view .LVU896
 3411 0ee0 5A00000A 		beq	.L229		@,
 3412              	.L201:
 3413              	.LVL232:
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3414              		.loc 1 479 7 view .LVU897
 3415              	.LBE60:
 3416              	.LBE63:
 3417              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 531:armwave.c     **** 
 532:armwave.c     ****     for(s = 0; s < sets; s++) {
 3418              		.loc 1 532 5 discriminator 1 view .LVU898
 3419 0ee4 000059E3 		cmp	r9, #0	@ sets,
 3420 0ee8 550000DA 		ble	.L199		@,
 3421              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 533:armwave.c     ****         printf("Calculating test set %d\n", s);
 534:armwave.c     ****     
 535:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 536:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 537:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 538:armwave.c     **** 
 539:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 540:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 541:armwave.c     ****                 noise *= noise;
 542:armwave.c     ****                 noise *= noise;
 543:armwave.c     ****                 noise *= noise;
 544:armwave.c     **** 
 545:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 546:armwave.c     ****                     noise = -noise;
 547:armwave.c     **** 
 548:armwave.c     ****                 noise += 1.0f;
 549:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 550:armwave.c     **** 
 551:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3422              		.loc 1 551 45 view .LVU899
 3423 0eec 5C8A9FED 		vldr.32	s16, .L230	@ tmp258,
 3424              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 552:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 553:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 554:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3425              		.loc 1 554 104 view .LVU900
 3426 0ef0 5CCA9FED 		vldr.32	s24, .L230+4	@ tmp259,
 3427              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3428              		.loc 1 532 5 view .LVU901
 3429 0ef4 0070A0E3 		mov	r7, #0	@ set_offset,
 3430              	@ armwave.c:533:         printf("Calculating test set %d\n", s);
 533:armwave.c     ****         printf("Calculating test set %d\n", s);
 3431              		.loc 1 533 9 view .LVU902
 3432 0ef8 84A19FE5 		ldr	r10, .L230+32	@ tmp257,
 3433              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3434              		.loc 1 532 5 view .LVU903
 3435 0efc 0780A0E1 		mov	r8, r7	@ s, set_offset
 3436              	.LVL233:
 3437              	.L202:
 533:armwave.c     ****         printf("Calculating test set %d\n", s);
 3438              		.loc 1 533 9 is_stmt 1 view .LVU904
 3439 0f00 0810A0E1 		mov	r1, r8	@, s
 3440 0f04 0A00A0E1 		mov	r0, r10	@, tmp257
 3441 0f08 FEFFFFEB 		bl	printf		@
 3442              	.LVL234:
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3443              		.loc 1 535 9 view .LVU905
 3444              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3445              		.loc 1 535 39 is_stmt 0 view .LVU906
 3446 0f0c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3447              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3448              		.loc 1 535 9 view .LVU907
 3449 0f10 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3450 0f14 450000DA 		ble	.L203		@,
 3451              	@ armwave.c:537:             mod_val = 0.5f + (_1_waves_mod * w);
 537:armwave.c     **** 
 3452              		.loc 1 537 21 view .LVU908
 3453 0f18 53CADFED 		vldr.32	s25, .L230+8	@ tmp200,
 3454              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3455              		.loc 1 551 33 view .LVU909
 3456 0f1c 53BA9FED 		vldr.32	s22, .L230+12	@ tmp253,
 3457              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3458              		.loc 1 549 24 view .LVU910
 3459 0f20 53AADFED 		vldr.32	s21, .L230+16	@ tmp254,
 3460 0f24 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3461              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3462              		.loc 1 535 15 view .LVU911
 3463 0f28 0060A0E3 		mov	r6, #0	@ w,
 3464              	.LVL235:
 3465              	.L210:
 537:armwave.c     **** 
 3466              		.loc 1 537 13 is_stmt 1 view .LVU912
 3467              	@ armwave.c:537:             mod_val = 0.5f + (_1_waves_mod * w);
 537:armwave.c     **** 
 3468              		.loc 1 537 21 is_stmt 0 view .LVU913
 3469 0f2c 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3470 0f30 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3471              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3472              		.loc 1 539 13 view .LVU914
 3473 0f34 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3474              	@ armwave.c:537:             mod_val = 0.5f + (_1_waves_mod * w);
 537:armwave.c     **** 
 3475              		.loc 1 537 21 view .LVU915
 3476 0f38 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3477 0f3c 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3478              	.LVL236:
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3479              		.loc 1 539 13 is_stmt 1 view .LVU916
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3480              		.loc 1 539 13 is_stmt 0 view .LVU917
 3481 0f40 370000DA 		ble	.L204		@,
 3482 0f44 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3483              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3484              		.loc 1 554 113 view .LVU918
 3485 0f48 4AAA9FED 		vldr.32	s20, .L230+20	@ tmp229,
 3486 0f4c 4A8ADFED 		vldr.32	s17, .L230+24	@ tmp230,
 3487              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3488              		.loc 1 539 19 view .LVU919
 3489 0f50 0040A0E3 		mov	r4, #0	@ x,
 3490              	.LVL237:
 3491              	.L209:
 540:armwave.c     ****                 noise *= noise;
 3492              		.loc 1 540 17 is_stmt 1 view .LVU920
 3493              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3494              		.loc 1 540 28 is_stmt 0 view .LVU921
 3495 0f54 FEFFFFEB 		bl	rand		@
 3496              	.LVL238:
 3497              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3498              		.loc 1 540 35 view .LVU922
 3499 0f58 7000FFE6 		uxth	r0, r0	@ tmp201,
 3500              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3501              		.loc 1 540 45 view .LVU923
 3502 0f5c 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3503 0f60 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3504              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3505              		.loc 1 540 24 view .LVU924
 3506 0f64 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3507              	.LVL239:
 541:armwave.c     ****                 noise *= noise;
 3508              		.loc 1 541 17 is_stmt 1 view .LVU925
 3509              	@ armwave.c:541:                 noise *= noise;
 541:armwave.c     ****                 noise *= noise;
 3510              		.loc 1 541 23 is_stmt 0 view .LVU926
 3511 0f68 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3512              	.LVL240:
 542:armwave.c     ****                 noise *= noise;
 3513              		.loc 1 542 17 is_stmt 1 view .LVU927
 3514              	@ armwave.c:542:                 noise *= noise;
 542:armwave.c     ****                 noise *= noise;
 3515              		.loc 1 542 23 is_stmt 0 view .LVU928
 3516 0f6c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3517              	.LVL241:
 543:armwave.c     **** 
 3518              		.loc 1 543 17 is_stmt 1 view .LVU929
 3519              	@ armwave.c:543:                 noise *= noise;
 543:armwave.c     **** 
 3520              		.loc 1 543 23 is_stmt 0 view .LVU930
 3521 0f70 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3522              	.LVL242:
 545:armwave.c     ****                     noise = -noise;
 3523              		.loc 1 545 17 is_stmt 1 view .LVU931
 3524              	@ armwave.c:545:                 if((rand() & 0xffff) > 0x7fff)
 545:armwave.c     ****                     noise = -noise;
 3525              		.loc 1 545 21 is_stmt 0 view .LVU932
 3526 0f74 FEFFFFEB 		bl	rand		@
 3527              	.LVL243:
 546:armwave.c     **** 
 3528              		.loc 1 546 21 is_stmt 1 view .LVU933
 3529              	@ armwave.c:545:                 if((rand() & 0xffff) > 0x7fff)
 545:armwave.c     ****                     noise = -noise;
 3530              		.loc 1 545 19 is_stmt 0 view .LVU934
 3531 0f78 020910E3 		tst	r0, #32768	@,
 3532              	@ armwave.c:546:                     noise = -noise;
 546:armwave.c     **** 
 3533              		.loc 1 546 27 view .LVU935
 3534 0f7c 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3535              	.LVL244:
 548:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3536              		.loc 1 548 17 is_stmt 1 view .LVU936
 549:armwave.c     **** 
 3537              		.loc 1 549 17 view .LVU937
 3538              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3539              		.loc 1 549 27 is_stmt 0 view .LVU938
 3540 0f80 FEFFFFEB 		bl	rand		@
 3541              	.LVL245:
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3542              		.loc 1 551 17 is_stmt 1 view .LVU939
 3543              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3544              		.loc 1 551 45 is_stmt 0 view .LVU940
 3545 0f84 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3546              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3547              		.loc 1 551 33 view .LVU941
 3548 0f88 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3549              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3550              		.loc 1 551 45 view .LVU942
 3551 0f8c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3552              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3553              		.loc 1 551 33 view .LVU943
 3554 0f90 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3555              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3556              		.loc 1 551 45 view .LVU944
 3557 0f94 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3558              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3559              		.loc 1 551 33 view .LVU945
 3560 0f98 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3561              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3562              		.loc 1 549 34 view .LVU946
 3563 0f9c 7000FFE6 		uxth	r0, r0	@ tmp214,
 3564              	.LVL246:
 3565              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3566              		.loc 1 549 44 view .LVU947
 3567 0fa0 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3568 0fa4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3569              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3570              		.loc 1 549 24 view .LVU948
 3571 0fa8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3572              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3573              		.loc 1 551 77 view .LVU949
 3574 0fac A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3575              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3576              		.loc 1 551 22 view .LVU950
 3577 0fb0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3578 0fb4 FEFFFFEB 		bl	sin		@
 3579              	.LVL247:
 3580              		.loc 1 554 17 is_stmt 1 view .LVU951
 3581              	@ armwave.c:548:                 noise += 1.0f;
 548:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3582              		.loc 1 548 23 is_stmt 0 view .LVU952
 3583 0fb8 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3584              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3585              		.loc 1 554 104 view .LVU953
 3586 0fbc 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3587              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3588              		.loc 1 551 98 view .LVU954
 3589 0fc0 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3590              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3591              		.loc 1 551 87 view .LVU955
 3592 0fc4 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3593              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3594              		.loc 1 551 98 view .LVU956
 3595 0fc8 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3596              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3597              		.loc 1 551 19 view .LVU957
 3598 0fcc C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3599              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3600              		.loc 1 554 113 view .LVU958
 3601 0fd0 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3602 0fd4 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3603 0fd8 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3604 0fdc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3605 0fe0 050000DA 		ble	.L206		@,
 3606              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3607              		.loc 1 554 104 discriminator 1 view .LVU959
 3608 0fe4 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3609 0fe8 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3610 0fec 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3611 0ff0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3612 0ff4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3613 0ff8 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3614              	.L206:
 3615              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3616              		.loc 1 554 57 discriminator 12 view .LVU960
 3617 0ffc 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3618              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3619              		.loc 1 554 102 discriminator 12 view .LVU961
 3620 1000 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3621 1004 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3622 1008 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3623              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3624              		.loc 1 539 58 discriminator 12 view .LVU962
 3625 100c 014084E2 		add	r4, r4, #1	@ x, x,
 3626              	.LVL248:
 3627              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3628              		.loc 1 554 102 discriminator 12 view .LVU963
 3629 1010 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3630              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3631              		.loc 1 539 43 discriminator 12 view .LVU964
 3632 1014 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3633              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3634              		.loc 1 539 13 discriminator 12 view .LVU965
 3635 1018 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3636 101c CCFFFFCA 		bgt	.L209		@,
 3637 1020 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3638              	.LVL249:
 3639              	.L204:
 3640              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3641              		.loc 1 535 48 discriminator 2 view .LVU966
 3642 1024 016086E2 		add	r6, r6, #1	@ w, w,
 3643              	.LVL250:
 3644              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3645              		.loc 1 535 9 discriminator 2 view .LVU967
 3646 1028 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3647 102c BEFFFFBA 		blt	.L210		@,
 3648              	.LVL251:
 3649              	.L203:
 555:armwave.c     ****             }
 556:armwave.c     ****         }
 557:armwave.c     **** 
 558:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3650              		.loc 1 558 9 is_stmt 1 discriminator 2 view .LVU968
 3651              	@ armwave.c:558:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3652              		.loc 1 558 46 is_stmt 0 discriminator 2 view .LVU969
 3653 1030 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3654              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3655              		.loc 1 532 27 discriminator 2 view .LVU970
 3656 1034 018088E2 		add	r8, r8, #1	@ s, s,
 3657              	.LVL252:
 3658              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3659              		.loc 1 532 5 discriminator 2 view .LVU971
 3660 1038 080059E1 		cmp	r9, r8	@ sets, s
 3661              	@ armwave.c:558:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3662              		.loc 1 558 20 discriminator 2 view .LVU972
 3663 103c 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3664              	.LVL253:
 3665              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3666              		.loc 1 532 5 discriminator 2 view .LVU973
 3667 1040 AEFFFF1A 		bne	.L202		@,
 3668              	.LVL254:
 3669              	.L199:
 3670              	@ armwave.c:560: }
 559:armwave.c     ****     }
 560:armwave.c     **** }
 3671              		.loc 1 560 1 view .LVU974
 3672 1044 08D08DE2 		add	sp, sp, #8	@,,
 3673              		.cfi_remember_state
 3674              		.cfi_def_cfa_offset 80
 3675              		@ sp needed	@
 3676 1048 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3677              		.cfi_restore 90
 3678              		.cfi_restore 91
 3679              		.cfi_restore 88
 3680              		.cfi_restore 89
 3681              		.cfi_restore 86
 3682              		.cfi_restore 87
 3683              		.cfi_restore 84
 3684              		.cfi_restore 85
 3685              		.cfi_restore 82
 3686              		.cfi_restore 83
 3687              		.cfi_restore 80
 3688              		.cfi_restore 81
 3689              		.cfi_def_cfa_offset 32
 3690              	.LVL255:
 3691              		.loc 1 560 1 view .LVU975
 3692 104c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3693              	.LVL256:
 3694              	.L229:
 3695              		.cfi_restore_state
 3696              	.LBB64:
 3697              	.LBB61:
 480:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3698              		.loc 1 480 9 is_stmt 1 view .LVU976
 3699 1050 940901E0 		mul	r1, r4, r9	@, _85, sets
 3700 1054 0920A0E1 		mov	r2, r9	@, sets
 3701 1058 28009FE5 		ldr	r0, .L230+36	@,
 3702 105c FEFFFFEB 		bl	printf		@
 3703              	.LVL257:
 482:armwave.c     ****     }
 3704              		.loc 1 482 9 view .LVU977
 3705 1060 9FFFFFEA 		b	.L201		@
 3706              	.L231:
 3707              		.align	2
 3708              	.L230:
 3709 1064 0000803F 		.word	1065353216
 3710 1068 00007F43 		.word	1132396544
 3711 106c 0000003F 		.word	1056964608
 3712 1070 C3F5C840 		.word	1086911939
 3713 1074 38FFC74A 		.word	1254620984
 3714 1078 0000FE42 		.word	1123942400
 3715 107c 00000043 		.word	1124073472
 3716 1080 00000000 		.word	g_armwave_state
 3717 1084 64020000 		.word	.LC20
 3718 1088 BC010000 		.word	.LC18
 3719              	.LBE61:
 3720              	.LBE64:
 3721              		.cfi_endproc
 3722              	.LFE75:
 3724              		.align	2
 3725              		.global	armwave_cleanup
 3726              		.syntax unified
 3727              		.arm
 3728              		.fpu vfp
 3730              	armwave_cleanup:
 3731              	.LFB76:
 561:armwave.c     **** 
 562:armwave.c     **** /*
 563:armwave.c     ****  * Make a test square waveform.
 564:armwave.c     ****  *
 565:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 566:armwave.c     ****  */
 567:armwave.c     **** #if 0
 568:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 569:armwave.c     **** {
 570:armwave.c     ****     uint8_t v;
 571:armwave.c     ****     float noise, xnoise;
 572:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 573:armwave.c     ****     int w, x;
 574:armwave.c     **** 
 575:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 577:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 578:armwave.c     ****             noise *= noise;
 579:armwave.c     ****             noise *= noise;
 580:armwave.c     ****             noise *= noise;
 581:armwave.c     **** 
 582:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 583:armwave.c     ****                 noise = -noise;
 584:armwave.c     **** 
 585:armwave.c     ****             //noise += 1.0f;
 586:armwave.c     **** 
 587:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 588:armwave.c     ****                 new_level = 0.2f;
 589:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 590:armwave.c     ****                 new_level = 0.8f;
 591:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 592:armwave.c     ****                 new_level = 0.2f;
 593:armwave.c     ****             } else {
 594:armwave.c     ****                 new_level = 0.8f;
 595:armwave.c     ****             }
 596:armwave.c     **** 
 597:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 598:armwave.c     **** 
 599:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 600:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 601:armwave.c     ****         }
 602:armwave.c     ****     }
 603:armwave.c     **** }
 604:armwave.c     **** #endif
 605:armwave.c     **** 
 606:armwave.c     **** /*
 607:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 608:armwave.c     ****  */
 609:armwave.c     **** void armwave_cleanup()
 610:armwave.c     **** {
 3732              		.loc 1 610 1 view -0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 0
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
 611:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3736              		.loc 1 611 5 view .LVU979
 3737              	@ armwave.c:610: {
 610:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3738              		.loc 1 610 1 is_stmt 0 view .LVU980
 3739 108c 10402DE9 		push	{r4, lr}	@
 3740              		.cfi_def_cfa_offset 8
 3741              		.cfi_offset 4, -8
 3742              		.cfi_offset 14, -4
 3743              	@ armwave.c:611:     free(g_armwave_state.out_pixbuf);
 3744              		.loc 1 611 25 view .LVU981
 3745 1090 34409FE5 		ldr	r4, .L234	@ tmp114,
 3746              	@ armwave.c:611:     free(g_armwave_state.out_pixbuf);
 3747              		.loc 1 611 5 view .LVU982
 3748 1094 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3749 1098 FEFFFFEB 		bl	free		@
 3750              	.LVL258:
 612:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3751              		.loc 1 612 5 is_stmt 1 view .LVU983
 3752 109c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3753 10a0 FEFFFFEB 		bl	free		@
 3754              	.LVL259:
 613:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3755              		.loc 1 613 5 view .LVU984
 3756 10a4 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3757 10a8 FEFFFFEB 		bl	free		@
 3758              	.LVL260:
 614:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3759              		.loc 1 614 5 view .LVU985
 3760 10ac 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3761 10b0 FEFFFFEB 		bl	free		@
 3762              	.LVL261:
 615:armwave.c     **** 
 616:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3763              		.loc 1 616 5 view .LVU986
 3764              	@ armwave.c:616:     g_armwave_state.out_pixbuf = NULL;
 3765              		.loc 1 616 32 is_stmt 0 view .LVU987
 3766 10b4 0030A0E3 		mov	r3, #0	@ tmp123,
 3767 10b8 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 617:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3768              		.loc 1 617 5 is_stmt 1 view .LVU988
 3769              	@ armwave.c:617:     g_armwave_state.ch1_buffer = NULL;
 3770              		.loc 1 617 32 is_stmt 0 view .LVU989
 3771 10bc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 618:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3772              		.loc 1 618 5 is_stmt 1 view .LVU990
 3773              	@ armwave.c:618:     g_armwave_state.xcoord_to_xpixel = NULL;
 3774              		.loc 1 618 38 is_stmt 0 view .LVU991
 3775 10c0 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 619:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3776              		.loc 1 619 5 is_stmt 1 view .LVU992
 3777              	@ armwave.c:619:     g_armwave_state.test_wave_buffer = NULL;
 3778              		.loc 1 619 38 is_stmt 0 view .LVU993
 3779 10c4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3780              	@ armwave.c:620: }
 620:armwave.c     **** }
 3781              		.loc 1 620 1 view .LVU994
 3782 10c8 1080BDE8 		pop	{r4, pc}	@
 3783              	.L235:
 3784              		.align	2
 3785              	.L234:
 3786 10cc 00000000 		.word	g_armwave_state
 3787              		.cfi_endproc
 3788              	.LFE76:
 3790              		.comm	gamma_table,256,4
 3791              		.comm	g_armwave_state,136,4
 3792              		.section	.rodata
 3793              		.align	2
 3794              		.set	.LANCHOR0,. + 0
 3797              	__PRETTY_FUNCTION__.17095:
 3798 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3798      6176655F 
 3798      66696C6C 
 3798      5F706978 
 3798      6275665F 
 3799 001b 00       		.space	1
 3802              	__PRETTY_FUNCTION__.17117:
 3803 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3803      6176655F 
 3803      73657475 
 3803      705F7265 
 3803      6E646572 
 3804 0031 000000   		.space	3
 3807              	__PRETTY_FUNCTION__.17124:
 3808 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3808      6176655F 
 3808      7365745F 
 3808      77617665 
 3808      5F706F69 
 3809 004d 000000   		.space	3
 3812              	__PRETTY_FUNCTION__.17131:
 3813 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3813      6176655F 
 3813      7365745F 
 3813      77617665 
 3813      5F706F69 
 3814              		.section	.rodata.str1.4,"aMS",%progbits,1
 3815              		.align	2
 3816              	.LC0:
 3817 0000 76302E30 		.ascii	"v0.0.1\000"
 3817      2E3100
 3818 0007 00       		.space	1
 3819              	.LC1:
 3820 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3820      61766520 
 3820      76657273 
 3820      696F6E3A 
 3820      2025730A 
 3821 001d 000000   		.space	3
 3822              	.LC2:
 3823 0020 61726D77 		.ascii	"armwave.c\000"
 3823      6176652E 
 3823      6300
 3824 002a 0000     		.space	2
 3825              	.LC3:
 3826 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3826      62756666 
 3826      65722021 
 3826      3D204E55 
 3826      4C4C00
 3827 003f 00       		.space	1
 3828              	.LC4:
 3829 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3829      20653D25 
 3829      6420773D 
 3829      25642077 
 3829      733D2564 
 3830              	.LC5:
 3831 006c 73746172 		.ascii	"start_point < end_point\000"
 3831      745F706F 
 3831      696E7420 
 3831      3C20656E 
 3831      645F706F 
 3832              	.LC6:
 3833 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3833      7566665F 
 3833      73697A65 
 3833      3D25642C 
 3833      20636D70 
 3834 00b6 00       		.ascii	"\000"
 3835 00b7 00       		.space	1
 3836              	.LC7:
 3837 00b8 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3837      6D776176 
 3837      655F7374 
 3837      6174652E 
 3837      6368315F 
 3838 00db 00       		.space	1
 3839              	.LC8:
 3840 00dc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3840      6D776176 
 3840      655F7374 
 3840      6174652E 
 3840      78636F6F 
 3841 0105 000000   		.space	3
 3842              	.LC9:
 3843 0108 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3843      3A203078 
 3843      25303878 
 3843      20307825 
 3843      30387820 
 3844              	.LC10:
 3845 012c 77617665 		.ascii	"wave_buffer != NULL\000"
 3845      5F627566 
 3845      66657220 
 3845      213D204E 
 3845      554C4C00 
 3846              	.LC11:
 3847 0140 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3847      6176655F 
 3847      7365745F 
 3847      77617665 
 3847      5F706F69 
 3848 0173 78636565 		.ascii	"xceeded\000"
 3848      64656400 
 3849 017b 00       		.space	1
 3850              	.LC12:
 3851 017c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3851      5F627566 
 3851      6665725F 
 3851      70747220 
 3851      213D2030 
 3852 0191 000000   		.space	3
 3853              	.LC13:
 3854 0194 776200   		.ascii	"wb\000"
 3855 0197 00       		.space	1
 3856              	.LC14:
 3857 0198 50330A00 		.ascii	"P3\012\000"
 3858              	.LC15:
 3859 019c 25642025 		.ascii	"%d %d\012\000"
 3859      640A00
 3860 01a3 00       		.space	1
 3861              	.LC16:
 3862 01a4 3235350A 		.ascii	"255\012\000"
 3862      00
 3863 01a9 000000   		.space	3
 3864              	.LC17:
 3865 01ac 25336420 		.ascii	"%3d %3d %3d\012\000"
 3865      25336420 
 3865      2533640A 
 3865      00
 3866 01b9 000000   		.space	3
 3867              	.LC18:
 3868 01bc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3868      6176655F 
 3868      74657374 
 3868      5F627566 
 3868      6665725F 
 3869 01ef 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3869      20627566 
 3869      66657220 
 3869      28256420 
 3869      62797465 
 3870              	.LC19:
 3871 0210 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3871      6176655F 
 3871      66696C6C 
 3871      5F706978 
 3871      6275665F 
 3872 0243 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3872      20666169 
 3872      6C65642C 
 3872      20726574 
 3872      75726E69 
 3873 0262 0000     		.space	2
 3874              	.LC20:
 3875 0264 43616C63 		.ascii	"Calculating test set %d\012\000"
 3875      756C6174 
 3875      696E6720 
 3875      74657374 
 3875      20736574 
 3876              		.text
 3877              	.Letext0:
 3878              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3879              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3880              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3881              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3882              		.file 7 "/usr/include/stdio.h"
 3883              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3884              		.file 9 "/usr/include/errno.h"
 3885              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3886              		.file 11 "/usr/include/unistd.h"
 3887              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3888              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3889              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3890              		.file 15 "/usr/include/math.h"
 3891              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3892              		.file 17 "/usr/include/time.h"
 3893              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3894              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3895              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3896              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3897              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3898              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3899              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3900              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3901              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3902              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3903              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3904              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3905              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3906              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3907              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3908              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3909              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3910              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3911              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3912              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3913              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3914              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3915              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3916              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3917              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3918              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3919              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3920              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3921              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3922              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3923              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3924              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3925              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3926              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3927              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3928              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3929              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3930              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3931              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3932              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3933              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3934              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3935              		.file 60 "/usr/local/include/python3.8/context.h"
 3936              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3937              		.file 62 "/usr/local/include/python3.8/code.h"
 3938              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3939              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3940              		.file 65 "/usr/local/include/python3.8/import.h"
 3941              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3942              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3943              		.file 68 "/usr/include/malloc.h"
 3944              		.file 69 "armwave.h"
 3945              		.file 70 "/usr/include/stdlib.h"
 3946              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3947              		.file 72 "/usr/include/assert.h"
 3948              		.file 73 "<built-in>"
 3949              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
