   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB71:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)		__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)		__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 143:armwave.c     ****             	word >>= 8;
 144:armwave.c     ****     		}
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 156 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 167:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 168:armwave.c     **** 
 169:armwave.c     ****     if(target_height == 256) {
 170:armwave.c     ****     	g_armwave_state.row_shift = 8;
 102              		.loc 1 170 32 view .LVU6
 103 0004 0820A0E3 		mov	r2, #8	@ tmp129,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 04419FE5 		ldr	r4, .L12	@ tmp175,
 107 000c 04119FE5 		ldr	r1, .L12+4	@ tmp127,
 108              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 109              		.loc 1 171 31 view .LVU8
 110 0010 FF30A0E3 		mov	r3, #255	@ tmp131,
 111              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 172:armwave.c     ****     } else if(target_height == 512) {
 173:armwave.c     ****     	g_armwave_state.row_shift = 9;
 174:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 175:armwave.c     ****     } else if(target_height == 1024) {
 176:armwave.c     ****     	g_armwave_state.row_shift = 10;
 177:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 178:armwave.c     ****     } else if(target_height == 2048) {
 179:armwave.c     ****     	g_armwave_state.row_shift = 11;
 180:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 181:armwave.c     ****     } 
 182:armwave.c     **** 
 183:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 184:armwave.c     ****     g_armwave_state.xstride = target_height;
 185:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 186:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 187:armwave.c     ****     g_armwave_state.waves = waves;
 188:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 189:armwave.c     ****     g_armwave_state.target_width = target_width;
 190:armwave.c     ****     g_armwave_state.target_height = target_height;
 191:armwave.c     **** 
 192:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 193:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 194:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 195:armwave.c     ****     g_armwave_state.slice_height = 64;  
 196:armwave.c     **** 
 197:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 197 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 114              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 115              		.loc 1 185 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp135,
 117              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 118              		.loc 1 164 33 view .LVU11
 119 001c 141084E5 		str	r1, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 120              		.loc 1 167 5 is_stmt 1 view .LVU12
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 121              		.loc 1 169 5 view .LVU13
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 122              		.loc 1 170 6 view .LVU14
 123              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 124              		.loc 1 170 32 is_stmt 0 view .LVU15
 125 0020 3C2084E5 		str	r2, [r4, #60]	@ tmp129, g_armwave_state.row_shift
 171:armwave.c     ****     } else if(target_height == 512) {
 126              		.loc 1 171 6 is_stmt 1 view .LVU16
 127              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 128              		.loc 1 184 29 is_stmt 0 view .LVU17
 129 0024 011CA0E3 		mov	r1, #256	@ tmp133,
 130              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 131              		.loc 1 186 33 view .LVU18
 132 0028 022BA0E3 		mov	r2, #2048	@ tmp137,
 133              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 134              		.loc 1 171 31 view .LVU19
 135 002c 403084E5 		str	r3, [r4, #64]	@ tmp131, g_armwave_state.row_mask
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 136              		.loc 1 184 5 is_stmt 1 view .LVU20
 137              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 138              		.loc 1 188 26 is_stmt 0 view .LVU21
 139 0030 0257A0E3 		mov	r5, #524288	@ tmp141,
 140              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 141              		.loc 1 187 27 view .LVU22
 142 0034 4030A0E3 		mov	r3, #64	@ tmp139,
 143              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 144              		.loc 1 197 7 view .LVU23
 145 0038 000050E3 		cmp	r0, #0	@ _9,
 146              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 147              		.loc 1 185 28 view .LVU24
 148 003c 1CC084E5 		str	ip, [r4, #28]	@ tmp135, g_armwave_state.vscale
 149              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 150              		.loc 1 184 29 view .LVU25
 151 0040 181084E5 		str	r1, [r4, #24]	@ tmp133, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 152              		.loc 1 185 5 is_stmt 1 view .LVU26
 186:armwave.c     ****     g_armwave_state.waves = waves;
 153              		.loc 1 186 5 view .LVU27
 154              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 155              		.loc 1 190 35 is_stmt 0 view .LVU28
 156 0044 381084E5 		str	r1, [r4, #56]	@ tmp133, g_armwave_state.target_height
 157              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 158              		.loc 1 186 33 view .LVU29
 159 0048 202084E5 		str	r2, [r4, #32]	@ tmp137, g_armwave_state.wave_stride
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 160              		.loc 1 187 5 is_stmt 1 view .LVU30
 161              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 162              		.loc 1 189 34 is_stmt 0 view .LVU31
 163 004c 342084E5 		str	r2, [r4, #52]	@ tmp137, g_armwave_state.target_width
 164              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 165              		.loc 1 187 27 view .LVU32
 166 0050 243084E5 		str	r3, [r4, #36]	@ tmp139, g_armwave_state.waves
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 167              		.loc 1 188 5 is_stmt 1 view .LVU33
 168              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 169              		.loc 1 195 34 is_stmt 0 view .LVU34
 170 0054 283084E5 		str	r3, [r4, #40]	@ tmp139, g_armwave_state.slice_height
 171              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 172              		.loc 1 188 26 view .LVU35
 173 0058 305084E5 		str	r5, [r4, #48]	@ tmp141, g_armwave_state.size
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 174              		.loc 1 189 5 is_stmt 1 view .LVU36
 190:armwave.c     **** 
 175              		.loc 1 190 5 view .LVU37
 195:armwave.c     **** 
 176              		.loc 1 195 5 view .LVU38
 177              		.loc 1 197 5 view .LVU39
 178              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 179              		.loc 1 197 7 is_stmt 0 view .LVU40
 180 005c 0100000A 		beq	.L2		@,
 198:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 181              		.loc 1 198 9 is_stmt 1 view .LVU41
 182 0060 FEFFFFEB 		bl	free		@
 183              	.LVL1:
 184 0064 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_5, g_armwave_state.size
 185              	.L2:
 199:armwave.c     **** 
 200:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186              		.loc 1 200 5 view .LVU42
 187              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 188              		.loc 1 200 34 is_stmt 0 view .LVU43
 189 0068 0110A0E3 		mov	r1, #1	@,
 190 006c 0500A0E1 		mov	r0, r5	@, prephitmp_5
 191 0070 FEFFFFEB 		bl	calloc		@
 192              	.LVL2:
 193              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 201 33 view .LVU44
 195 0074 A0209FE5 		ldr	r2, .L12+8	@ tmp153,
 196              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 202:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 203:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 203 33 view .LVU45
 198 0078 FA30A0E3 		mov	r3, #250	@ tmp156,
 199              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 200              		.loc 1 201 33 view .LVU46
 201 007c 482084E5 		str	r2, [r4, #72]	@ tmp153, MEM[(short int *)&g_armwave_state + 72B]
 202              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203              		.loc 1 203 33 view .LVU47
 204 0080 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp156, g_armwave_state.ch1_color.b
 205              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 204:armwave.c     **** 
 205:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 206              		.loc 1 205 5 view .LVU48
 207 0084 000050E3 		cmp	r0, #0	@ tmp150,
 208              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 209              		.loc 1 200 32 view .LVU49
 210 0088 040084E5 		str	r0, [r4, #4]	@ tmp150, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 211              		.loc 1 201 5 is_stmt 1 view .LVU50
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 212              		.loc 1 202 5 view .LVU51
 203:armwave.c     **** 
 213              		.loc 1 203 5 view .LVU52
 214              		.loc 1 205 5 view .LVU53
 215 008c 1600000A 		beq	.L10		@,
 206:armwave.c     **** 
 207:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 208:armwave.c     ****     length = end_point - start_point;
 216              		.loc 1 208 5 view .LVU54
 217              	.LVL3:
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 218              		.loc 1 209 5 view .LVU55
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 219              		.loc 1 210 5 view .LVU56
 220              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 221              		.loc 1 210 60 is_stmt 0 view .LVU57
 222 0090 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp177, g_armwave_state.slice_height
 223              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 224              		.loc 1 211 40 view .LVU58
 225 0094 010AA0E3 		mov	r0, #4096	@,
 226              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 227              		.loc 1 210 60 view .LVU59
 228 0098 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp162, tmp177
 229              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 230              		.loc 1 210 41 view .LVU60
 231 009c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp164, tmp162
 232 00a0 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp164, g_armwave_state.slice_record_height
 233              		.loc 1 211 5 is_stmt 1 view .LVU61
 234              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 235              		.loc 1 211 40 is_stmt 0 view .LVU62
 236 00a4 FEFFFFEB 		bl	malloc		@
 237              	.LVL4:
 238              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 212:armwave.c     **** 
 213:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 239              		.loc 1 213 5 view .LVU63
 240 00a8 000050E3 		cmp	r0, #0	@ tmp165,
 241              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 242              		.loc 1 211 38 view .LVU64
 243 00ac 600084E5 		str	r0, [r4, #96]	@ tmp165, g_armwave_state.xcoord_to_xpixel
 244              		.loc 1 213 5 is_stmt 1 view .LVU65
 245              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 214:armwave.c     **** 
 215:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 246              		.loc 1 215 12 is_stmt 0 view .LVU66
 247 00b0 0030A013 		movne	r3, #0	@ xx,
 248 00b4 02004012 		subne	r0, r0, #2	@ ivtmp.24, tmp165,
 249              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 213:armwave.c     **** 
 250              		.loc 1 213 5 view .LVU67
 251 00b8 1000000A 		beq	.L11		@,
 252              	.L5:
 253              	.LVL5:
 216:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 216 9 is_stmt 1 view .LVU68
 255              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 256              		.loc 1 216 74 is_stmt 0 view .LVU69
 257 00bc 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 258              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 215 32 view .LVU70
 260 00c0 013083E2 		add	r3, r3, #1	@ xx, xx,
 261              	.LVL6:
 262              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 263              		.loc 1 215 5 view .LVU71
 264 00c4 020B53E3 		cmp	r3, #2048	@ xx,
 265              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 266              		.loc 1 216 74 view .LVU72
 267 00c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp170, xx
 268              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 269              		.loc 1 216 46 view .LVU73
 270 00cc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp171, tmp170
 271 00d0 902A17EE 		vmov	r2, s15	@ int	@ tmp171, tmp171
 272 00d4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp171, MEM[base: _25, offset: 0B]
 273              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274              		.loc 1 215 5 view .LVU74
 275 00d8 F7FFFF1A 		bne	.L5		@,
 217:armwave.c     **** 
 218:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 219:armwave.c     ****     }
 220:armwave.c     **** 
 221:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 276              		.loc 1 221 5 is_stmt 1 view .LVU75
 277              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 278              		.loc 1 221 34 is_stmt 0 view .LVU76
 279 00dc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_5,
 280 00e0 FEFFFFEB 		bl	malloc		@
 281              	.LVL7:
 282              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 283              		.loc 1 221 32 view .LVU77
 284 00e4 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 285              	@ armwave.c:222: }
 222:armwave.c     **** }
 286              		.loc 1 222 1 view .LVU78
 287 00e8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 288              	.LVL8:
 289              	.L10:
 205:armwave.c     **** 
 290              		.loc 1 205 5 is_stmt 1 view .LVU79
 291 00ec 2C309FE5 		ldr	r3, .L12+12	@,
 292 00f0 CD20A0E3 		mov	r2, #205	@,
 293 00f4 28109FE5 		ldr	r1, .L12+16	@,
 294 00f8 28009FE5 		ldr	r0, .L12+20	@,
 295 00fc FEFFFFEB 		bl	__assert_fail		@
 296              	.LVL9:
 297              	.L11:
 213:armwave.c     **** 
 298              		.loc 1 213 5 view .LVU80
 299 0100 18309FE5 		ldr	r3, .L12+12	@,
 300 0104 D520A0E3 		mov	r2, #213	@,
 301 0108 14109FE5 		ldr	r1, .L12+16	@,
 302 010c 18009FE5 		ldr	r0, .L12+24	@,
 303 0110 FEFFFFEB 		bl	__assert_fail		@
 304              	.LVL10:
 305              	.L13:
 306              		.align	2
 307              	.L12:
 308 0114 00000000 		.word	g_armwave_state
 309 0118 00000000 		.word	test_wave_buffer
 310 011c F609F406 		.word	116656630
 311 0120 00000000 		.word	.LANCHOR0
 312 0124 00000000 		.word	.LC0
 313 0128 0C000000 		.word	.LC1
 314 012c 30000000 		.word	.LC2
 315              		.cfi_endproc
 316              	.LFE71:
 318              		.align	2
 319              		.global	test_create_waveform
 320              		.syntax unified
 321              		.arm
 322              		.fpu vfp
 324              	test_create_waveform:
 325              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 326              		.loc 1 51 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 8
 329              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 330              		.loc 1 52 5 view .LVU82
  53:armwave.c     **** 
 331              		.loc 1 53 5 view .LVU83
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 332              		.loc 1 55 5 view .LVU84
 333              	.LVL11:
 334              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 335              		.loc 1 51 1 is_stmt 0 view .LVU85
 336 0130 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 337              		.cfi_def_cfa_offset 36
 338              		.cfi_offset 4, -36
 339              		.cfi_offset 5, -32
 340              		.cfi_offset 6, -28
 341              		.cfi_offset 7, -24
 342              		.cfi_offset 8, -20
 343              		.cfi_offset 9, -16
 344              		.cfi_offset 10, -12
 345              		.cfi_offset 11, -8
 346              		.cfi_offset 14, -4
 347 0134 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 348              		.cfi_def_cfa_offset 84
 349              		.cfi_offset 80, -84
 350              		.cfi_offset 81, -80
 351              		.cfi_offset 82, -76
 352              		.cfi_offset 83, -72
 353              		.cfi_offset 84, -68
 354              		.cfi_offset 85, -64
 355              		.cfi_offset 86, -60
 356              		.cfi_offset 87, -56
 357              		.cfi_offset 88, -52
 358              		.cfi_offset 89, -48
 359              		.cfi_offset 90, -44
 360              		.cfi_offset 91, -40
 361 0138 5C819FE5 		ldr	r8, .L33+40	@ _75,
 362              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 363              		.loc 1 56 33 view .LVU86
 364 013c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 365 0140 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.40, _75,
 366              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 367              		.loc 1 56 13 view .LVU87
 368 0144 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 369              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 370              		.loc 1 60 20 view .LVU88
 371 0148 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 372              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 373              		.loc 1 71 29 view .LVU89
 374 014c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 375              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 376              		.loc 1 71 33 view .LVU90
 377 0150 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 378              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 379              		.loc 1 69 20 view .LVU91
 380 0154 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 381 0158 02B886E2 		add	fp, r6, #131072	@ _81,,
 382 015c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 383              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 384              		.loc 1 51 1 view .LVU92
 385 0160 0CD04DE2 		sub	sp, sp, #12	@,,
 386              		.cfi_def_cfa_offset 96
 387 0164 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 388 0168 0F6086E2 		add	r6, r6, #15	@ ivtmp.40, ivtmp.40,
 389 016c 008068E2 		rsb	r8, r8, #0	@ ivtmp.43, _75
 390              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 391              		.loc 1 55 11 view .LVU93
 392 0170 0090A0E3 		mov	r9, #0	@ w,
 393              	.LVL12:
 394              	.L20:
  56:armwave.c     ****         //mod = 1.0f;
 395              		.loc 1 56 9 is_stmt 1 view .LVU94
 396              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 397              		.loc 1 56 24 is_stmt 0 view .LVU95
 398 0174 909A07EE 		vmov	s15, r9	@ int	@ w, w
 399              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 400              		.loc 1 56 48 view .LVU96
 401 0178 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 402              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 403              		.loc 1 56 13 view .LVU97
 404 017c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 405              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 406              		.loc 1 68 19 view .LVU98
 407 0180 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 408              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 409              		.loc 1 56 24 view .LVU99
 410 0184 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 411              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 412              		.loc 1 73 58 view .LVU100
 413 0188 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 414 018c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.33, ivtmp.40,
 415 0190 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.43,
 416              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 417              		.loc 1 56 33 view .LVU101
 418 0194 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 419              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 420              		.loc 1 56 13 view .LVU102
 421 0198 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 422              	.LVL13:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 423              		.loc 1 59 9 is_stmt 1 view .LVU103
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 424              		.loc 1 59 9 is_stmt 0 view .LVU104
 425 019c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 426              	.LVL14:
 427              	.L19:
 428              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 429              		.loc 1 60 24 view .LVU105
 430 01a0 FEFFFFEB 		bl	rand		@
 431              	.LVL15:
 432 01a4 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.33
 433              	.LVL16:
  60:armwave.c     ****             noise *= noise;
 434              		.loc 1 60 13 is_stmt 1 view .LVU106
 435              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 436              		.loc 1 60 31 is_stmt 0 view .LVU107
 437 01a8 7000FFE6 		uxth	r0, r0	@ tmp163,
 438              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 439              		.loc 1 60 41 view .LVU108
 440 01ac 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 441 01b0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 442              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 443              		.loc 1 60 20 view .LVU109
 444 01b4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 445              	.LVL17:
  61:armwave.c     ****             noise *= noise;
 446              		.loc 1 61 13 is_stmt 1 view .LVU110
 447              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 448              		.loc 1 61 19 is_stmt 0 view .LVU111
 449 01b8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 450              	.LVL18:
  62:armwave.c     ****             noise *= noise;
 451              		.loc 1 62 13 is_stmt 1 view .LVU112
 452              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 453              		.loc 1 62 19 is_stmt 0 view .LVU113
 454 01bc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 455              	.LVL19:
  63:armwave.c     **** 
 456              		.loc 1 63 13 is_stmt 1 view .LVU114
 457              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 458              		.loc 1 63 19 is_stmt 0 view .LVU115
 459 01c0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 460              	.LVL20:
  65:armwave.c     ****                 noise = -noise;
 461              		.loc 1 65 13 is_stmt 1 view .LVU116
 462              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 463              		.loc 1 65 17 is_stmt 0 view .LVU117
 464 01c4 FEFFFFEB 		bl	rand		@
 465              	.LVL21:
  66:armwave.c     **** 
 466              		.loc 1 66 17 is_stmt 1 view .LVU118
 467              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 468              		.loc 1 65 15 is_stmt 0 view .LVU119
 469 01c8 020910E3 		tst	r0, #32768	@,
 470              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 471              		.loc 1 66 23 view .LVU120
 472 01cc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 473              	.LVL22:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 474              		.loc 1 68 13 is_stmt 1 view .LVU121
  69:armwave.c     **** 
 475              		.loc 1 69 13 view .LVU122
 476              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 477              		.loc 1 69 23 is_stmt 0 view .LVU123
 478 01d0 FEFFFFEB 		bl	rand		@
 479              	.LVL23:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 480              		.loc 1 71 13 is_stmt 1 view .LVU124
 481              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 482              		.loc 1 71 29 is_stmt 0 view .LVU125
 483 01d4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 484 01d8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 485 01dc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 486              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 487              		.loc 1 69 30 view .LVU126
 488 01e0 7000FFE6 		uxth	r0, r0	@ tmp173,
 489              	.LVL24:
 490              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 491              		.loc 1 69 40 view .LVU127
 492 01e4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 493 01e8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 494              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 495              		.loc 1 69 20 view .LVU128
 496 01ec 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 497              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 498              		.loc 1 71 60 view .LVU129
 499 01f0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 500              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 501              		.loc 1 71 18 view .LVU130
 502 01f4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 503 01f8 FEFFFFEB 		bl	sin		@
 504              	.LVL25:
  73:armwave.c     ****         }
 505              		.loc 1 73 13 is_stmt 1 view .LVU131
 506              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 507              		.loc 1 68 19 is_stmt 0 view .LVU132
 508 01fc 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 509              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 510              		.loc 1 73 58 view .LVU133
 511 0200 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 512              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 513              		.loc 1 73 56 view .LVU134
 514 0204 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 515 0208 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 516              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 517              		.loc 1 71 77 view .LVU135
 518 020c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 519              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 520              		.loc 1 71 70 view .LVU136
 521 0210 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 522              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 523              		.loc 1 71 77 view .LVU137
 524 0214 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 525              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 526              		.loc 1 71 15 view .LVU138
 527 0218 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 528              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 529              		.loc 1 73 58 view .LVU139
 530 021c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 531 0220 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 532 0224 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 533 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 534 022c 050000DA 		ble	.L16		@,
 535              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 536              		.loc 1 73 56 discriminator 1 view .LVU140
 537 0230 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 538 0234 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 539 0238 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 540 023c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 541 0240 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 542 0244 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 543              	.L16:
 544              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 545              		.loc 1 73 56 discriminator 12 view .LVU141
 546 0248 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 547              	.LVL26:
 548              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 549              		.loc 1 59 9 discriminator 12 view .LVU142
 550 024c 060055E1 		cmp	r5, r6	@ ivtmp.33, ivtmp.40
 551 0250 D2FFFF1A 		bne	.L19		@,
 552 0254 026B85E2 		add	r6, r5, #2048	@ ivtmp.40, ivtmp.33,
 553              	.LVL27:
 554              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 555              		.loc 1 55 5 discriminator 2 view .LVU143
 556 0258 0B0056E1 		cmp	r6, fp	@ ivtmp.40, _81
 557              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 558              		.loc 1 55 34 discriminator 2 view .LVU144
 559 025c 019089E2 		add	r9, r9, #1	@ w, w,
 560              	.LVL28:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 561              		.loc 1 55 34 discriminator 2 view .LVU145
 562 0260 028B48E2 		sub	r8, r8, #2048	@ ivtmp.43, ivtmp.43,
 563              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 564              		.loc 1 55 5 discriminator 2 view .LVU146
 565 0264 C2FFFF1A 		bne	.L20		@,
 566              	@ armwave.c:76: }
  76:armwave.c     **** 
 567              		.loc 1 76 1 view .LVU147
 568 0268 0CD08DE2 		add	sp, sp, #12	@,,
 569              		.cfi_def_cfa_offset 84
 570              		@ sp needed	@
 571 026c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 572              		.cfi_restore 90
 573              		.cfi_restore 91
 574              		.cfi_restore 88
 575              		.cfi_restore 89
 576              		.cfi_restore 86
 577              		.cfi_restore 87
 578              		.cfi_restore 84
 579              		.cfi_restore 85
 580              		.cfi_restore 82
 581              		.cfi_restore 83
 582              		.cfi_restore 80
 583              		.cfi_restore 81
 584              		.cfi_def_cfa_offset 36
 585              	.LVL29:
  76:armwave.c     **** 
 586              		.loc 1 76 1 view .LVU148
 587 0270 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 588              	.LVL30:
 589              	.L34:
  76:armwave.c     **** 
 590              		.loc 1 76 1 view .LVU149
 591              		.align	2
 592              	.L33:
 593 0274 0000803C 		.word	1015021568
 594 0278 0000003F 		.word	1056964608
 595 027c 0050C347 		.word	1203982336
 596 0280 C3F5C840 		.word	1086911939
 597 0284 0000003A 		.word	973078528
 598 0288 38FFC74A 		.word	1254620984
 599 028c 0000803F 		.word	1065353216
 600 0290 0000FE42 		.word	1123942400
 601 0294 00000043 		.word	1124073472
 602 0298 00007F43 		.word	1132396544
 603 029c 00000000 		.word	test_wave_buffer
 604 02a0 00000000 		.word	.LANCHOR1
 605              		.cfi_endproc
 606              	.LFE57:
 608              		.align	2
 609              		.global	test_create_gamma
 610              		.syntax unified
 611              		.arm
 612              		.fpu vfp
 614              	test_create_gamma:
 615              	.LFB58:
  82:armwave.c     ****     int i;
 616              		.loc 1 82 1 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 620              		.loc 1 83 5 view .LVU151
  84:armwave.c     **** 
 621              		.loc 1 84 5 view .LVU152
 622              	.LVL31:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 623              		.loc 1 86 5 view .LVU153
 624              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 625              		.loc 1 82 1 is_stmt 0 view .LVU154
 626 02a4 70402DE9 		push	{r4, r5, r6, lr}	@
 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 4, -16
 629              		.cfi_offset 5, -12
 630              		.cfi_offset 6, -8
 631              		.cfi_offset 14, -4
 632 02a8 068B2DED 		vpush.64	{d8, d9, d10}	@
 633              		.cfi_def_cfa_offset 40
 634              		.cfi_offset 80, -40
 635              		.cfi_offset 81, -36
 636              		.cfi_offset 82, -32
 637              		.cfi_offset 83, -28
 638              		.cfi_offset 84, -24
 639              		.cfi_offset 85, -20
 640 02ac 68409FE5 		ldr	r4, .L39+20	@ ivtmp.51,
 641              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 642              		.loc 1 87 32 view .LVU155
 643 02b0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 644              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 645              		.loc 1 87 26 view .LVU156
 646 02b4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 647              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 648              		.loc 1 87 49 view .LVU157
 649 02b8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 650 02bc 015084E2 		add	r5, r4, #1	@ _25, ivtmp.51,
 651 02c0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.51,
 652 02c4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 653              	.LVL32:
 654              	.L36:
  87:armwave.c     ****     }
 655              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU158
 656              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 657              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU159
 658 02c8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.51
 659              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 660              		.loc 1 87 26 discriminator 3 view .LVU160
 661 02cc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 662              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 663              		.loc 1 87 32 discriminator 3 view .LVU161
 664 02d0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 665 02d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 666 02d8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 667              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 668              		.loc 1 87 26 discriminator 3 view .LVU162
 669 02dc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 670 02e0 FEFFFFEB 		bl	pow		@
 671              	.LVL33:
 672              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 673              		.loc 1 87 49 discriminator 3 view .LVU163
 674 02e4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 675              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 676              		.loc 1 87 24 discriminator 3 view .LVU164
 677 02e8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 678 02ec 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 679 02f0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 680              	.LVL34:
 681              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 682              		.loc 1 86 5 discriminator 3 view .LVU165
 683 02f4 060054E1 		cmp	r4, r6	@ ivtmp.51, _26
 684 02f8 F2FFFF1A 		bne	.L36		@,
 685              	@ armwave.c:89: }
  89:armwave.c     **** 
 686              		.loc 1 89 1 view .LVU166
 687 02fc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 688              		.cfi_restore 84
 689              		.cfi_restore 85
 690              		.cfi_restore 82
 691              		.cfi_restore 83
 692              		.cfi_restore 80
 693              		.cfi_restore 81
 694              		.cfi_def_cfa_offset 16
 695 0300 7080BDE8 		pop	{r4, r5, r6, pc}	@
 696              	.LVL35:
 697              	.L40:
  89:armwave.c     **** 
 698              		.loc 1 89 1 view .LVU167
 699 0304 0000A0E1 		.align	3
 700              	.L39:
 701 0308 000000C0 		.word	-1073741824
 702 030c CCCCEC3F 		.word	1072483532
 703 0310 00000000 		.word	0
 704 0314 00E06F40 		.word	1081073664
 705 0318 00007F43 		.word	1132396544
 706 031c FFFFFFFF 		.word	gamma_table-1
 707              		.cfi_endproc
 708              	.LFE58:
 710              		.align	2
 711              		.global	render_nonaa_to_buffer_1ch_slice
 712              		.syntax unified
 713              		.arm
 714              		.fpu vfp
 716              	render_nonaa_to_buffer_1ch_slice:
 717              	.LVL36:
 718              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 719              		.loc 1 99 1 is_stmt 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 723              		.loc 1 100 5 view .LVU169
 101:armwave.c     ****     uint8_t *wave_base;
 724              		.loc 1 101 5 view .LVU170
 102:armwave.c     ****     uint8_t *write_buffer_base;
 725              		.loc 1 102 5 view .LVU171
 103:armwave.c     ****     uint8_t *write_buffer;
 726              		.loc 1 103 5 view .LVU172
 104:armwave.c     ****     
 727              		.loc 1 104 5 view .LVU173
 106:armwave.c     **** 
 728              		.loc 1 106 5 view .LVU174
 729              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 730              		.loc 1 106 40 is_stmt 0 view .LVU175
 731 0320 F4209FE5 		ldr	r2, .L53	@ tmp257,
 732              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 733              		.loc 1 99 1 view .LVU176
 734 0324 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 735              		.cfi_def_cfa_offset 36
 736              		.cfi_offset 4, -36
 737              		.cfi_offset 5, -32
 738              		.cfi_offset 6, -28
 739              		.cfi_offset 7, -24
 740              		.cfi_offset 8, -20
 741              		.cfi_offset 9, -16
 742              		.cfi_offset 10, -12
 743              		.cfi_offset 11, -8
 744              		.cfi_offset 14, -4
 745              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 109 5 view .LVU177
 747 0328 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 748              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 749              		.loc 1 106 63 view .LVU178
 750 032c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 751              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 752              		.loc 1 109 5 view .LVU179
 753 0330 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 754              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 755              		.loc 1 106 40 view .LVU180
 756 0334 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 757              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 758              		.loc 1 106 63 view .LVU181
 759 0338 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 760              	.LVL37:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 761              		.loc 1 109 5 is_stmt 1 view .LVU182
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 762              		.loc 1 109 5 is_stmt 0 view .LVU183
 763 033c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 764 0340 000051E3 		cmp	r1, #0	@ height,
 765 0344 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 766 0348 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 767              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 768              		.loc 1 109 11 view .LVU184
 769 034c 0080A0E3 		mov	r8, #0	@ w,
 770              	.LVL38:
 771              	.L45:
 110:armwave.c     **** 
 772              		.loc 1 110 9 is_stmt 1 view .LVU185
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 773              		.loc 1 120 9 view .LVU186
 774              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 775              		.loc 1 110 64 is_stmt 0 view .LVU187
 776 0350 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 777 0354 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 778              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 779              		.loc 1 120 16 view .LVU188
 780 0358 0000A0E3 		mov	r0, #0	@ yy,
 781 035c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 782 0360 037087E0 		add	r7, r7, r3	@ ivtmp.57, g_armwave_state.wave_buffer, tmp195
 783              	.LVL39:
 784              	.L44:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 785              		.loc 1 135 13 is_stmt 1 view .LVU189
 786              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 787              		.loc 1 135 18 is_stmt 0 view .LVU190
 788 0364 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 789              	.LVL40:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 790              		.loc 1 139 13 is_stmt 1 view .LVU191
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 791              		.loc 1 140 14 view .LVU192
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 792              		.loc 1 141 14 view .LVU193
 142:armwave.c     ****             	word >>= 8;
 793              		.loc 1 142 14 view .LVU194
 794              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 140 42 is_stmt 0 view .LVU195
 796 0368 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 797              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 798              		.loc 1 141 60 view .LVU196
 799 036c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 800              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 801              		.loc 1 140 34 view .LVU197
 802 0370 73E0EFE6 		uxtb	lr, r3	@ word, word
 803              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 804              		.loc 1 143 19 view .LVU198
 805 0374 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 806              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 807              		.loc 1 142 44 view .LVU199
 808 0378 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 809              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 140 34 view .LVU200
 811 037c 7440EFE6 		uxtb	r4, r4	@ word, word
 812              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 813              		.loc 1 142 44 view .LVU201
 814 0380 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 815              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 816              		.loc 1 141 60 view .LVU202
 817 0384 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 818              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 819              		.loc 1 143 19 view .LVU203
 820 0388 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 821              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 822              		.loc 1 142 44 view .LVU204
 823 038c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 824              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 825              		.loc 1 140 34 view .LVU205
 826 0390 7EE0EFE6 		uxtb	lr, lr	@ word, word
 827              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 828              		.loc 1 143 19 view .LVU206
 829 0394 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 830              	.LVL41:
 831              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 832              		.loc 1 142 44 view .LVU207
 833 0398 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 834 039c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 835              	.LVL42:
 143:armwave.c     ****     		}
 836              		.loc 1 143 14 is_stmt 1 view .LVU208
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 837              		.loc 1 140 14 view .LVU209
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 838              		.loc 1 141 14 view .LVU210
 142:armwave.c     ****             	word >>= 8;
 839              		.loc 1 142 14 view .LVU211
 840              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 841              		.loc 1 140 42 is_stmt 0 view .LVU212
 842 03a0 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 843              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 844              		.loc 1 141 60 view .LVU213
 845 03a4 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 846              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 847              		.loc 1 142 44 view .LVU214
 848 03a8 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 849              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 850              		.loc 1 141 60 view .LVU215
 851 03ac 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 852              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 853              		.loc 1 142 44 view .LVU216
 854 03b0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 855              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 856              		.loc 1 141 60 view .LVU217
 857 03b4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 858              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 859              		.loc 1 120 37 view .LVU218
 860 03b8 040080E2 		add	r0, r0, #4	@ yy, yy,
 861              	.LVL43:
 862              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 863              		.loc 1 142 44 view .LVU219
 864 03bc 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 865              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 866              		.loc 1 120 9 view .LVU220
 867 03c0 000051E1 		cmp	r1, r0	@ height, yy
 868              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 869              		.loc 1 142 44 view .LVU221
 870 03c4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 871 03c8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 872              	.LVL44:
 143:armwave.c     ****     		}
 873              		.loc 1 143 14 is_stmt 1 view .LVU222
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 874              		.loc 1 140 14 view .LVU223
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 875              		.loc 1 141 14 view .LVU224
 142:armwave.c     ****             	word >>= 8;
 876              		.loc 1 142 14 view .LVU225
 877              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 878              		.loc 1 140 42 is_stmt 0 view .LVU226
 879 03cc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 880              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 881              		.loc 1 141 60 view .LVU227
 882 03d0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 883              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 884              		.loc 1 142 44 view .LVU228
 885 03d4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 886 03d8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 887 03dc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 888 03e0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 889 03e4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****     		}
 890              		.loc 1 143 14 is_stmt 1 view .LVU229
 891              	.LVL45:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 892              		.loc 1 140 14 view .LVU230
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 893              		.loc 1 141 14 view .LVU231
 142:armwave.c     ****             	word >>= 8;
 894              		.loc 1 142 14 view .LVU232
 895              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 896              		.loc 1 140 42 is_stmt 0 view .LVU233
 897 03e8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 898              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 899              		.loc 1 141 60 view .LVU234
 900 03ec 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 901              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 902              		.loc 1 142 44 view .LVU235
 903 03f0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 904 03f4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 905 03f8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 906 03fc 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 907 0400 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****     		}
 908              		.loc 1 143 14 is_stmt 1 view .LVU236
 909              	.LVL46:
 910              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 911              		.loc 1 120 9 is_stmt 0 view .LVU237
 912 0404 D6FFFF8A 		bhi	.L44		@,
 913              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 914              		.loc 1 109 5 view .LVU238
 915 0408 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 916              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 917              		.loc 1 109 44 view .LVU239
 918 040c 018088E2 		add	r8, r8, #1	@ w, w,
 919              	.LVL47:
 920              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 921              		.loc 1 109 5 view .LVU240
 922 0410 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 923 0414 CDFFFF3A 		bcc	.L45		@,
 924 0418 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 925              	.L54:
 926              		.align	2
 927              	.L53:
 928 041c 00000000 		.word	g_armwave_state
 929              		.cfi_endproc
 930              	.LFE59:
 932              		.align	2
 933              		.global	armwave_init
 934              		.syntax unified
 935              		.arm
 936              		.fpu vfp
 938              	armwave_init:
 939              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 940              		.loc 1 152 1 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 153:armwave.c     **** }
 945              		.loc 1 153 5 view .LVU242
 946              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 947              		.loc 1 153 27 is_stmt 0 view .LVU243
 948 0420 08309FE5 		ldr	r3, .L56	@ tmp110,
 949 0424 0020A0E3 		mov	r2, #0	@ tmp111,
 950 0428 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 951              	@ armwave.c:154: }
 154:armwave.c     **** 
 952              		.loc 1 154 1 view .LVU244
 953 042c 1EFF2FE1 		bx	lr	@
 954              	.L57:
 955              		.align	2
 956              	.L56:
 957 0430 00000000 		.word	g_armwave_state
 958              		.cfi_endproc
 959              	.LFE60:
 961              		.align	2
 962              		.global	armwave_setup_render
 963              		.syntax unified
 964              		.arm
 965              		.fpu vfp
 967              	armwave_setup_render:
 968              	.LVL48:
 969              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 970              		.loc 1 157 1 is_stmt 1 view -0
 971              		.cfi_startproc
 972              		@ args = 16, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 974              		.loc 1 158 5 view .LVU246
 159:armwave.c     **** 
 975              		.loc 1 159 5 view .LVU247
 161:armwave.c     **** 
 976              		.loc 1 161 5 view .LVU248
 977              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 157 1 is_stmt 0 view .LVU249
 979 0434 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 980              		.cfi_def_cfa_offset 24
 981              		.cfi_offset 4, -24
 982              		.cfi_offset 5, -20
 983              		.cfi_offset 6, -16
 984              		.cfi_offset 7, -12
 985              		.cfi_offset 8, -8
 986              		.cfi_offset 14, -4
 987              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 988              		.loc 1 161 5 view .LVU250
 989 0438 020051E1 		cmp	r1, r2	@ start_point, end_point
 990              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 991              		.loc 1 157 1 view .LVU251
 992 043c 028B2DED 		vpush.64	{d8}	@
 993              		.cfi_def_cfa_offset 32
 994              		.cfi_offset 80, -32
 995              		.cfi_offset 81, -28
 996              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 997              		.loc 1 157 1 view .LVU252
 998 0440 0180A0E1 		mov	r8, r1	@ start_point, start_point
 999 0444 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1000 0448 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1001              	.LVL49:
 157:armwave.c     ****     uint32_t length, xx;
 1002              		.loc 1 157 1 view .LVU253
 1003 044c 24709DE5 		ldr	r7, [sp, #36]	@ target_width, target_width
 1004 0450 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1005              	.LVL50:
 1006              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 1007              		.loc 1 161 5 view .LVU254
 1008 0454 6800002A 		bcs	.L74		@,
 164:armwave.c     **** 
 1009              		.loc 1 164 5 is_stmt 1 view .LVU255
 1010              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1011              		.loc 1 164 33 is_stmt 0 view .LVU256
 1012 0458 B4419FE5 		ldr	r4, .L79+4	@ tmp217,
 1013              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1014              		.loc 1 167 5 view .LVU257
 1015 045c 01CC42E2 		sub	ip, r2, #256	@ tmp151, target_height,
 1016 0460 01CCDCE3 		bics	ip, ip, #256	@ tmp219, tmp151,
 1017              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1018              		.loc 1 164 33 view .LVU258
 1019 0464 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1020              		.loc 1 167 5 is_stmt 1 view .LVU259
 1021 0468 4500000A 		beq	.L60		@,
 1022              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1023              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU260
 1024 046c 010B42E2 		sub	r0, r2, #1024	@ tmp153, target_height,
 1025              	.LVL51:
 167:armwave.c     **** 
 1026              		.loc 1 167 5 discriminator 1 view .LVU261
 1027 0470 010BD0E3 		bics	r0, r0, #1024	@ tmp220, tmp153,
 1028 0474 5100001A 		bne	.L75		@,
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 1029              		.loc 1 169 5 is_stmt 1 view .LVU262
 175:armwave.c     ****     	g_armwave_state.row_shift = 10;
 1030              		.loc 1 175 12 view .LVU263
 1031              	@ armwave.c:175:     } else if(target_height == 1024) {
 175:armwave.c     ****     	g_armwave_state.row_shift = 10;
 1032              		.loc 1 175 14 is_stmt 0 view .LVU264
 1033 0478 010B52E3 		cmp	r2, #1024	@ target_height,
 1034 047c 4A00000A 		beq	.L76		@,
 178:armwave.c     ****     	g_armwave_state.row_shift = 11;
 1035              		.loc 1 178 12 is_stmt 1 view .LVU265
 1036              	@ armwave.c:178:     } else if(target_height == 2048) {
 178:armwave.c     ****     	g_armwave_state.row_shift = 11;
 1037              		.loc 1 178 14 is_stmt 0 view .LVU266
 1038 0480 020B52E3 		cmp	r2, #2048	@ target_height,
 179:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 1039              		.loc 1 179 6 is_stmt 1 view .LVU267
 1040              	@ armwave.c:179:     	g_armwave_state.row_shift = 11;
 179:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 1041              		.loc 1 179 32 is_stmt 0 view .LVU268
 1042 0484 0B00A003 		moveq	r0, #11	@ tmp171,
 1043              	@ armwave.c:180:     	g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1044              		.loc 1 180 31 view .LVU269
 1045 0488 88C19F05 		ldreq	ip, .L79+8	@ tmp173,
 1046              	@ armwave.c:179:     	g_armwave_state.row_shift = 11;
 179:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 1047              		.loc 1 179 32 view .LVU270
 1048 048c 3C008405 		streq	r0, [r4, #60]	@ tmp171, g_armwave_state.row_shift
 180:armwave.c     ****     } 
 1049              		.loc 1 180 6 is_stmt 1 view .LVU271
 1050              	@ armwave.c:180:     	g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1051              		.loc 1 180 31 is_stmt 0 view .LVU272
 1052 0490 40C08405 		streq	ip, [r4, #64]	@ tmp173, g_armwave_state.row_mask
 1053              	.L63:
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1054              		.loc 1 184 5 is_stmt 1 view .LVU273
 1055              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1056              		.loc 1 188 42 is_stmt 0 view .LVU274
 1057 0494 970206E0 		mul	r6, r7, r2	@ _8, target_width, target_height
 1058              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 197 23 view .LVU275
 1060 0498 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 1061              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1062              		.loc 1 186 33 view .LVU276
 1063 049c 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1064              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1065              		.loc 1 187 27 view .LVU277
 1066 04a0 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1067              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1068              		.loc 1 185 44 view .LVU278
 1069 04a4 2214A0E1 		lsr	r1, r2, #8	@ tmp176, target_height,
 1070              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1071              		.loc 1 195 34 view .LVU279
 1072 04a8 4030A0E3 		mov	r3, #64	@ tmp183,
 1073              	.LVL52:
 1074              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1075              		.loc 1 197 7 view .LVU280
 1076 04ac 000050E3 		cmp	r0, #0	@ _9,
 1077              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1078              		.loc 1 184 29 view .LVU281
 1079 04b0 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1080              		.loc 1 185 5 is_stmt 1 view .LVU282
 1081              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1082              		.loc 1 189 34 is_stmt 0 view .LVU283
 1083 04b4 347084E5 		str	r7, [r4, #52]	@ target_width, g_armwave_state.target_width
 1084              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 1085              		.loc 1 190 35 view .LVU284
 1086 04b8 382084E5 		str	r2, [r4, #56]	@ target_height, g_armwave_state.target_height
 1087              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1088              		.loc 1 188 26 view .LVU285
 1089 04bc 306084E5 		str	r6, [r4, #48]	@ _8, g_armwave_state.size
 1090              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1091              		.loc 1 185 28 view .LVU286
 1092 04c0 1C1084E5 		str	r1, [r4, #28]	@ tmp176, g_armwave_state.vscale
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1093              		.loc 1 186 5 is_stmt 1 view .LVU287
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1094              		.loc 1 187 5 view .LVU288
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1095              		.loc 1 188 5 view .LVU289
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1096              		.loc 1 189 5 view .LVU290
 190:armwave.c     **** 
 1097              		.loc 1 190 5 view .LVU291
 195:armwave.c     **** 
 1098              		.loc 1 195 5 view .LVU292
 1099              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1100              		.loc 1 195 34 is_stmt 0 view .LVU293
 1101 04c4 283084E5 		str	r3, [r4, #40]	@ tmp183, g_armwave_state.slice_height
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1102              		.loc 1 197 5 is_stmt 1 view .LVU294
 1103              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1104              		.loc 1 197 7 is_stmt 0 view .LVU295
 1105 04c8 0100000A 		beq	.L65		@,
 198:armwave.c     **** 
 1106              		.loc 1 198 9 is_stmt 1 view .LVU296
 1107 04cc FEFFFFEB 		bl	free		@
 1108              	.LVL53:
 198:armwave.c     **** 
 1109              		.loc 1 198 9 is_stmt 0 view .LVU297
 1110 04d0 306094E5 		ldr	r6, [r4, #48]	@ _8, g_armwave_state.size
 1111              	.L65:
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1112              		.loc 1 200 5 is_stmt 1 view .LVU298
 1113              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1114              		.loc 1 200 34 is_stmt 0 view .LVU299
 1115 04d4 0110A0E3 		mov	r1, #1	@,
 1116 04d8 0600A0E1 		mov	r0, r6	@, _8
 1117 04dc FEFFFFEB 		bl	calloc		@
 1118              	.LVL54:
 1119              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1120              		.loc 1 201 33 view .LVU300
 1121 04e0 34219FE5 		ldr	r2, .L79+12	@ tmp189,
 1122              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1123              		.loc 1 203 33 view .LVU301
 1124 04e4 FA30A0E3 		mov	r3, #250	@ tmp192,
 1125              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1126              		.loc 1 201 33 view .LVU302
 1127 04e8 482084E5 		str	r2, [r4, #72]	@ tmp189, MEM[(short int *)&g_armwave_state + 72B]
 1128              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1129              		.loc 1 203 33 view .LVU303
 1130 04ec BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 1131              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 205:armwave.c     **** 
 1132              		.loc 1 205 5 view .LVU304
 1133 04f0 000050E3 		cmp	r0, #0	@ tmp186,
 1134              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1135              		.loc 1 200 32 view .LVU305
 1136 04f4 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1137              		.loc 1 201 5 is_stmt 1 view .LVU306
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1138              		.loc 1 202 5 view .LVU307
 203:armwave.c     **** 
 1139              		.loc 1 203 5 view .LVU308
 205:armwave.c     **** 
 1140              		.loc 1 205 5 view .LVU309
 1141 04f8 3500000A 		beq	.L77		@,
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1142              		.loc 1 208 5 view .LVU310
 1143              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1144              		.loc 1 209 34 is_stmt 0 view .LVU311
 1145 04fc 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1146              	@ armwave.c:208:     length = end_point - start_point;
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1147              		.loc 1 208 12 view .LVU312
 1148 0500 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1149              	.LVL55:
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1150              		.loc 1 209 5 is_stmt 1 view .LVU313
 1151              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1152              		.loc 1 211 40 is_stmt 0 view .LVU314
 1153 0504 8500A0E1 		lsl	r0, r5, #1	@, length,
 1154              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1155              		.loc 1 209 34 view .LVU315
 1156 0508 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp197, target_width
 1157              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1158              		.loc 1 209 31 view .LVU316
 1159 050c 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1160 0510 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp196, length
 1161              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1162              		.loc 1 210 60 view .LVU317
 1163 0514 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp223, g_armwave_state.slice_height
 1164 0518 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 1165              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1166              		.loc 1 209 22 view .LVU318
 1167 051c 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp196, tmp197
 1168              	.LVL56:
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1169              		.loc 1 210 5 is_stmt 1 view .LVU319
 1170              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1171              		.loc 1 210 60 is_stmt 0 view .LVU320
 1172 0520 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 1173              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1174              		.loc 1 210 41 view .LVU321
 1175 0524 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 1176 0528 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp203, g_armwave_state.slice_record_height
 211:armwave.c     **** 
 1177              		.loc 1 211 5 is_stmt 1 view .LVU322
 1178              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1179              		.loc 1 211 40 is_stmt 0 view .LVU323
 1180 052c FEFFFFEB 		bl	malloc		@
 1181              	.LVL57:
 1182              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 213:armwave.c     **** 
 1183              		.loc 1 213 5 view .LVU324
 1184 0530 000050E3 		cmp	r0, #0	@ tmp205,
 1185              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1186              		.loc 1 211 38 view .LVU325
 1187 0534 600084E5 		str	r0, [r4, #96]	@ tmp205, g_armwave_state.xcoord_to_xpixel
 213:armwave.c     **** 
 1188              		.loc 1 213 5 is_stmt 1 view .LVU326
 1189 0538 2A00000A 		beq	.L78		@,
 1190              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1191              		.loc 1 216 54 is_stmt 0 view .LVU327
 1192 053c 337ADFED 		vldr.32	s15, .L79	@ tmp210,
 1193 0540 020040E2 		sub	r0, r0, #2	@ ivtmp.69, tmp205,
 1194              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1195              		.loc 1 215 12 view .LVU328
 1196 0544 0030A0E3 		mov	r3, #0	@ xx,
 1197              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1198              		.loc 1 216 54 view .LVU329
 1199 0548 887A87EE 		vdiv.f32	s14, s15, s16	@ _20, tmp210, points_per_pixel
 1200              	.L68:
 1201              	.LVL58:
 216:armwave.c     **** 
 1202              		.loc 1 216 9 is_stmt 1 discriminator 3 view .LVU330
 1203              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1204              		.loc 1 216 74 is_stmt 0 discriminator 3 view .LVU331
 1205 054c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1206              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1207              		.loc 1 215 32 discriminator 3 view .LVU332
 1208 0550 013083E2 		add	r3, r3, #1	@ xx, xx,
 1209              	.LVL59:
 1210              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1211              		.loc 1 215 5 discriminator 3 view .LVU333
 1212 0554 030055E1 		cmp	r5, r3	@ length, xx
 1213              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1214              		.loc 1 216 74 discriminator 3 view .LVU334
 1215 0558 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, xx
 1216 055c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp212, tmp211, _20
 1217              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1218              		.loc 1 216 46 discriminator 3 view .LVU335
 1219 0560 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp213, tmp212
 1220 0564 902A17EE 		vmov	r2, s15	@ int	@ tmp213, tmp213
 1221 0568 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp213, MEM[base: _6, offset: 0B]
 1222              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1223              		.loc 1 215 5 discriminator 3 view .LVU336
 1224 056c F6FFFF1A 		bne	.L68		@,
 221:armwave.c     **** }
 1225              		.loc 1 221 5 is_stmt 1 view .LVU337
 1226              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1227              		.loc 1 221 34 is_stmt 0 view .LVU338
 1228 0570 0601A0E1 		lsl	r0, r6, #2	@, _8,
 1229 0574 FEFFFFEB 		bl	malloc		@
 1230              	.LVL60:
 1231              	@ armwave.c:222: }
 1232              		.loc 1 222 1 view .LVU339
 1233 0578 028BBDEC 		vldm	sp!, {d8}	@
 1234              		.cfi_remember_state
 1235              		.cfi_restore 80
 1236              		.cfi_restore 81
 1237              		.cfi_def_cfa_offset 24
 1238              	.LVL61:
 1239              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1240              		.loc 1 221 32 view .LVU340
 1241 057c 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 1242              	@ armwave.c:222: }
 1243              		.loc 1 222 1 view .LVU341
 1244 0580 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1245              	.LVL62:
 1246              	.L60:
 1247              		.cfi_restore_state
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 1248              		.loc 1 169 5 is_stmt 1 view .LVU342
 1249              	@ armwave.c:169:     if(target_height == 256) {
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 1250              		.loc 1 169 7 is_stmt 0 view .LVU343
 1251 0584 010C52E3 		cmp	r2, #256	@ target_height,
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 1252              		.loc 1 170 6 is_stmt 1 view .LVU344
 1253              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 1254              		.loc 1 170 32 is_stmt 0 view .LVU345
 1255 0588 08C0A003 		moveq	ip, #8	@ tmp159,
 1256              	@ armwave.c:174:     	g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1257              		.loc 1 174 31 view .LVU346
 1258 058c 8CC09F15 		ldrne	ip, .L79+16	@ tmp165,
 1259              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1260              		.loc 1 171 31 view .LVU347
 1261 0590 FF00A003 		moveq	r0, #255	@ tmp161,
 1262              	.LVL63:
 1263              	@ armwave.c:173:     	g_armwave_state.row_shift = 9;
 173:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 1264              		.loc 1 173 32 view .LVU348
 1265 0594 0900A013 		movne	r0, #9	@ tmp163,
 1266              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 1267              		.loc 1 170 32 view .LVU349
 1268 0598 3CC08405 		streq	ip, [r4, #60]	@ tmp159, g_armwave_state.row_shift
 171:armwave.c     ****     } else if(target_height == 512) {
 1269              		.loc 1 171 6 is_stmt 1 view .LVU350
 1270              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1271              		.loc 1 171 31 is_stmt 0 view .LVU351
 1272 059c 40008405 		streq	r0, [r4, #64]	@ tmp161, g_armwave_state.row_mask
 172:armwave.c     ****     	g_armwave_state.row_shift = 9;
 1273              		.loc 1 172 12 is_stmt 1 view .LVU352
 173:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 1274              		.loc 1 173 6 view .LVU353
 1275              	@ armwave.c:174:     	g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1276              		.loc 1 174 31 is_stmt 0 view .LVU354
 1277 05a0 40C08415 		strne	ip, [r4, #64]	@ tmp165, g_armwave_state.row_mask
 1278              	@ armwave.c:173:     	g_armwave_state.row_shift = 9;
 173:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 1279              		.loc 1 173 32 view .LVU355
 1280 05a4 3C008415 		strne	r0, [r4, #60]	@ tmp163, g_armwave_state.row_shift
 174:armwave.c     ****     } else if(target_height == 1024) {
 1281              		.loc 1 174 6 is_stmt 1 view .LVU356
 1282 05a8 B9FFFFEA 		b	.L63		@
 1283              	.L76:
 176:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 1284              		.loc 1 176 6 view .LVU357
 1285              	@ armwave.c:177:     	g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1286              		.loc 1 177 31 is_stmt 0 view .LVU358
 1287 05ac 70C09FE5 		ldr	ip, .L79+20	@ tmp169,
 1288              	@ armwave.c:176:     	g_armwave_state.row_shift = 10;
 176:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 1289              		.loc 1 176 32 view .LVU359
 1290 05b0 0A00A0E3 		mov	r0, #10	@ tmp167,
 1291              	@ armwave.c:177:     	g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1292              		.loc 1 177 31 view .LVU360
 1293 05b4 40C084E5 		str	ip, [r4, #64]	@ tmp169, g_armwave_state.row_mask
 1294              	@ armwave.c:176:     	g_armwave_state.row_shift = 10;
 176:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 1295              		.loc 1 176 32 view .LVU361
 1296 05b8 3C0084E5 		str	r0, [r4, #60]	@ tmp167, g_armwave_state.row_shift
 177:armwave.c     ****     } else if(target_height == 2048) {
 1297              		.loc 1 177 6 is_stmt 1 view .LVU362
 1298 05bc B4FFFFEA 		b	.L63		@
 1299              	.L75:
 167:armwave.c     **** 
 1300              		.loc 1 167 5 discriminator 2 view .LVU363
 1301 05c0 60309FE5 		ldr	r3, .L79+24	@,
 1302              	.LVL64:
 167:armwave.c     **** 
 1303              		.loc 1 167 5 is_stmt 0 discriminator 2 view .LVU364
 1304 05c4 A720A0E3 		mov	r2, #167	@,
 1305 05c8 5C109FE5 		ldr	r1, .L79+28	@,
 1306 05cc 5C009FE5 		ldr	r0, .L79+32	@,
 1307 05d0 FEFFFFEB 		bl	__assert_fail		@
 1308              	.LVL65:
 1309              	.L77:
 205:armwave.c     **** 
 1310              		.loc 1 205 5 is_stmt 1 discriminator 1 view .LVU365
 1311 05d4 4C309FE5 		ldr	r3, .L79+24	@,
 1312 05d8 CD20A0E3 		mov	r2, #205	@,
 1313 05dc 48109FE5 		ldr	r1, .L79+28	@,
 1314 05e0 4C009FE5 		ldr	r0, .L79+36	@,
 1315 05e4 FEFFFFEB 		bl	__assert_fail		@
 1316              	.LVL66:
 1317              	.L78:
 213:armwave.c     **** 
 1318              		.loc 1 213 5 discriminator 1 view .LVU366
 1319 05e8 38309FE5 		ldr	r3, .L79+24	@,
 1320 05ec D520A0E3 		mov	r2, #213	@,
 1321 05f0 34109FE5 		ldr	r1, .L79+28	@,
 1322 05f4 3C009FE5 		ldr	r0, .L79+40	@,
 1323 05f8 FEFFFFEB 		bl	__assert_fail		@
 1324              	.LVL67:
 1325              	.L74:
 161:armwave.c     **** 
 1326              		.loc 1 161 5 discriminator 1 view .LVU367
 1327 05fc 24309FE5 		ldr	r3, .L79+24	@,
 1328              	.LVL68:
 161:armwave.c     **** 
 1329              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU368
 1330 0600 A120A0E3 		mov	r2, #161	@,
 1331 0604 20109FE5 		ldr	r1, .L79+28	@,
 1332 0608 2C009FE5 		ldr	r0, .L79+44	@,
 1333              	.LVL69:
 161:armwave.c     **** 
 1334              		.loc 1 161 5 discriminator 1 view .LVU369
 1335 060c FEFFFFEB 		bl	__assert_fail		@
 1336              	.LVL70:
 1337              	.L80:
 1338              		.align	2
 1339              	.L79:
 1340 0610 0000803F 		.word	1065353216
 1341 0614 00000000 		.word	g_armwave_state
 1342 0618 FF070000 		.word	2047
 1343 061c F609F406 		.word	116656630
 1344 0620 FF010000 		.word	511
 1345 0624 FF030000 		.word	1023
 1346 0628 00000000 		.word	.LANCHOR0
 1347 062c 00000000 		.word	.LC0
 1348 0630 74000000 		.word	.LC4
 1349 0634 0C000000 		.word	.LC1
 1350 0638 30000000 		.word	.LC2
 1351 063c 5C000000 		.word	.LC3
 1352              		.cfi_endproc
 1353              	.LFE61:
 1355              		.align	2
 1356              		.global	armwave_clear_buffer
 1357              		.syntax unified
 1358              		.arm
 1359              		.fpu vfp
 1361              	armwave_clear_buffer:
 1362              	.LVL71:
 1363              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 225:armwave.c     **** {
 1364              		.loc 1 225 1 is_stmt 1 view -0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 226:armwave.c     ****     // Flags ignored, only one buffer cleared
 227:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1369              		.loc 1 227 5 view .LVU371
 1370 0640 0C309FE5 		ldr	r3, .L82	@ tmp113,
 1371 0644 0010A0E3 		mov	r1, #0	@,
 1372 0648 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1373 064c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1374              	.LVL72:
 1375              		.loc 1 227 5 is_stmt 0 view .LVU372
 1376 0650 FEFFFFEA 		b	memset		@
 1377              	.LVL73:
 1378              	.L83:
 1379              		.align	2
 1380              	.L82:
 1381 0654 00000000 		.word	g_armwave_state
 1382              		.cfi_endproc
 1383              	.LFE62:
 1385              		.align	2
 1386              		.global	armwave_fill_pixbuf2
 1387              		.syntax unified
 1388              		.arm
 1389              		.fpu vfp
 1391              	armwave_fill_pixbuf2:
 1392              	.LVL74:
 1393              	.LFB63:
 228:armwave.c     **** }
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 232:armwave.c     **** {
 233:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 234:armwave.c     ****     int rr, gg, bb;
 235:armwave.c     ****     uint8_t r, g, b;
 236:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 237:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 238:armwave.c     **** 
 239:armwave.c     ****     assert(out_buffer != NULL);
 240:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 241:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 242:armwave.c     **** 
 243:armwave.c     **** #if 0
 244:armwave.c     ****     // Pixbuf tests
 245:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 246:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 247:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 248:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 249:armwave.c     ****         }
 250:armwave.c     ****     }
 251:armwave.c     **** #endif
 252:armwave.c     **** 
 253:armwave.c     **** #if 1
 254:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 255:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 256:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 257:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 258:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 259:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 260:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 261:armwave.c     **** 
 262:armwave.c     **** #if 0
 263:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 264:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 265:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 266:armwave.c     **** 
 267:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 268:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 269:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 270:armwave.c     **** #endif
 271:armwave.c     **** 
 272:armwave.c     ****             if(value != 0) {
 273:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 274:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 275:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 276:armwave.c     **** 
 277:armwave.c     **** 	            r = MIN(rr, 255);
 278:armwave.c     **** 	            g = MIN(gg, 255);
 279:armwave.c     **** 	            b = MIN(bb, 255);
 280:armwave.c     **** 
 281:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 282:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 283:armwave.c     **** 
 284:armwave.c     **** 	            //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, va
 285:armwave.c     **** 
 286:armwave.c     **** 	            *out_buffer++ = word;
 287:armwave.c     **** 	        }
 288:armwave.c     ****         }
 289:armwave.c     ****     }
 290:armwave.c     **** #endif
 291:armwave.c     **** }
 292:armwave.c     **** */
 293:armwave.c     **** 
 294:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 295:armwave.c     **** {
 1394              		.loc 1 295 1 is_stmt 1 view -0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 8
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 296:armwave.c     ****     uint32_t xx, yy, addr, word, wave_word;
 1398              		.loc 1 296 5 view .LVU374
 297:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1399              		.loc 1 297 5 view .LVU375
 298:armwave.c     ****     uint8_t r, g, b;
 1400              		.loc 1 298 5 view .LVU376
 299:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1401              		.loc 1 299 5 view .LVU377
 1402              	@ armwave.c:299:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1403              		.loc 1 299 14 is_stmt 0 view .LVU378
 1404 0658 60C29FE5 		ldr	ip, .L96	@ tmp376,
 1405              	@ armwave.c:305:     assert(out_buffer != NULL);
 300:armwave.c     ****     uint8_t value;
 301:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 302:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 303:armwave.c     ****     uint32_t offset;
 304:armwave.c     **** 
 305:armwave.c     ****     assert(out_buffer != NULL);
 1406              		.loc 1 305 5 view .LVU379
 1407 065c 000050E3 		cmp	r0, #0	@ out_buffer
 1408              	@ armwave.c:295: {
 295:armwave.c     ****     uint32_t xx, yy, addr, word, wave_word;
 1409              		.loc 1 295 1 view .LVU380
 1410 0660 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1411              		.cfi_def_cfa_offset 36
 1412              		.cfi_offset 4, -36
 1413              		.cfi_offset 5, -32
 1414              		.cfi_offset 6, -28
 1415              		.cfi_offset 7, -24
 1416              		.cfi_offset 8, -20
 1417              		.cfi_offset 9, -16
 1418              		.cfi_offset 10, -12
 1419              		.cfi_offset 11, -8
 1420              		.cfi_offset 14, -4
 1421 0664 0CD04DE2 		sub	sp, sp, #12	@,,
 1422              		.cfi_def_cfa_offset 48
 1423              	@ armwave.c:299:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 299:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1424              		.loc 1 299 14 view .LVU381
 1425 0668 04109CE5 		ldr	r1, [ip, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1426              	.LVL75:
 300:armwave.c     ****     uint8_t value;
 1427              		.loc 1 300 5 is_stmt 1 view .LVU382
 301:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1428              		.loc 1 301 5 view .LVU383
 302:armwave.c     ****     uint32_t offset;
 1429              		.loc 1 302 5 view .LVU384
 303:armwave.c     **** 
 1430              		.loc 1 303 5 view .LVU385
 1431              		.loc 1 305 5 view .LVU386
 1432 066c 8E00000A 		beq	.L94		@,
 306:armwave.c     **** 
 307:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 308:armwave.c     **** 
 309:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1433              		.loc 1 309 5 view .LVU387
 1434              	@ armwave.c:309:     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1435              		.loc 1 309 41 is_stmt 0 view .LVU388
 1436 0670 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1437 0674 38609CE5 		ldr	r6, [ip, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1438 0678 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.target_height, g_armwave_state.target_width
 1439              	.LVL76:
 310:armwave.c     **** 
 311:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1440              		.loc 1 311 5 is_stmt 1 view .LVU389
 1441              		.loc 1 311 5 is_stmt 0 view .LVU390
 1442 067c 000056E3 		cmp	r6, #0	@ npix,
 1443 0680 0B0000DA 		ble	.L84		@,
 1444              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 312:armwave.c     ****     	// Read a 32-bit word at a time.  If any bits are nonzero, backtrack and process
 313:armwave.c     ****     	// each byte.  We can afford to do this because most pixels will be blank for
 314:armwave.c     ****     	// most normal waveforms.
 315:armwave.c     ****         wave_word = *base_32ptr++;
 316:armwave.c     **** 
 317:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 318:armwave.c     ****         	for(i = 0; i < 4; i++) {
 319:armwave.c     ****         		value = wave_word & 0xff;
 320:armwave.c     ****         		wave_word >>= 8;
 321:armwave.c     **** 
 322:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1445              		.loc 1 322 45 view .LVU391
 1446 0684 F894DCE1 		ldrsh	r9, [ip, #72]	@ _70, g_armwave_state.ch1_color.r
 1447              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1448              		.loc 1 323 45 view .LVU392
 1449 0688 FA84DCE1 		ldrsh	r8, [ip, #74]	@ _76, g_armwave_state.ch1_color.g
 1450              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1451              		.loc 1 324 45 view .LVU393
 1452 068c FC34DCE1 		ldrsh	r3, [ip, #76]	@ _80, g_armwave_state.ch1_color.b
 1453              	@ armwave.c:311:     for(n = 0; n < npix; n += 4) {
 311:armwave.c     ****     	// Read a 32-bit word at a time.  If any bits are nonzero, backtrack and process
 1454              		.loc 1 311 11 view .LVU394
 1455 0690 0020A0E3 		mov	r2, #0	@ n,
 1456 0694 04008DE5 		str	r0, [sp, #4]	@ out_buffer, %sfp
 1457              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1458              		.loc 1 324 45 view .LVU395
 1459 0698 00308DE5 		str	r3, [sp]	@ _80, %sfp
 1460              	.LVL77:
 1461              	.L88:
 315:armwave.c     **** 
 1462              		.loc 1 315 9 is_stmt 1 view .LVU396
 1463              	@ armwave.c:315:         wave_word = *base_32ptr++;
 315:armwave.c     **** 
 1464              		.loc 1 315 19 is_stmt 0 view .LVU397
 1465 069c 043091E4 		ldr	r3, [r1], #4	@ wave_word, MEM[base: base_32ptr_48, offset: 4294967292B]
 1466              	.LVL78:
 317:armwave.c     ****         	for(i = 0; i < 4; i++) {
 1467              		.loc 1 317 9 is_stmt 1 view .LVU398
 1468              	@ armwave.c:317:         if(COND_UNLIKELY(wave_word != 0)) {
 317:armwave.c     ****         	for(i = 0; i < 4; i++) {
 1469              		.loc 1 317 11 is_stmt 0 view .LVU399
 1470 06a0 000053E3 		cmp	r3, #0	@ wave_word,
 1471 06a4 0400001A 		bne	.L95		@,
 1472              	.LVL79:
 1473              	.L87:
 1474              	@ armwave.c:311:     for(n = 0; n < npix; n += 4) {
 311:armwave.c     ****     	// Read a 32-bit word at a time.  If any bits are nonzero, backtrack and process
 1475              		.loc 1 311 28 discriminator 2 view .LVU400
 1476 06a8 042082E2 		add	r2, r2, #4	@ n, n,
 1477              	.LVL80:
 1478              	@ armwave.c:311:     for(n = 0; n < npix; n += 4) {
 311:armwave.c     ****     	// Read a 32-bit word at a time.  If any bits are nonzero, backtrack and process
 1479              		.loc 1 311 5 discriminator 2 view .LVU401
 1480 06ac 020056E1 		cmp	r6, r2	@ npix, n
 1481 06b0 F9FFFFCA 		bgt	.L88		@,
 1482              	.LVL81:
 1483              	.L84:
 1484              	@ armwave.c:355: }
 325:armwave.c     **** 
 326:armwave.c     **** 	            r = MIN(rr, 255);
 327:armwave.c     **** 	            g = MIN(gg, 255);
 328:armwave.c     **** 	            b = MIN(bb, 255);
 329:armwave.c     **** 
 330:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 331:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 332:armwave.c     **** 
 333:armwave.c     **** 	            // Is there a better way?
 334:armwave.c     **** 	            /** works but wrong orientation **
 335:armwave.c     **** 	            xx = n % g_armwave_state.target_width;
 336:armwave.c     **** 	            yy = n / g_armwave_state.target_width;
 337:armwave.c     **** 	            offset = (xx + (yy * g_armwave_state.target_width));
 338:armwave.c     **** 	            *(out_buffer_base + offset) = word;
 339:armwave.c     **** 	            */
 340:armwave.c     **** 
 341:armwave.c     **** 	            // Since height is probably guaranteed to be one of 256 or 1024, we could probably sim
 342:armwave.c     **** 	            // this and strip out the division ops
 343:armwave.c     **** 	            //xx = n % g_armwave_state.target_height;
 344:armwave.c     **** 	            //yy = n / g_armwave_state.target_height;
 345:armwave.c     **** 	            nsub = n + i;
 346:armwave.c     **** 	            xx = nsub & g_armwave_state.row_mask;
 347:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 348:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 349:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 350:armwave.c     **** 
 351:armwave.c     **** 	            *(out_buffer_base + offset) = word;
 352:armwave.c     **** 	        }
 353:armwave.c     ****         } 
 354:armwave.c     ****     }
 355:armwave.c     **** }
 1485              		.loc 1 355 1 view .LVU402
 1486 06b4 0CD08DE2 		add	sp, sp, #12	@,,
 1487              		.cfi_remember_state
 1488              		.cfi_def_cfa_offset 36
 1489              		@ sp needed	@
 1490 06b8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1491              	.LVL82:
 1492              	.L95:
 1493              		.cfi_restore_state
 319:armwave.c     ****         		wave_word >>= 8;
 1494              		.loc 1 319 11 is_stmt 1 view .LVU403
 320:armwave.c     **** 
 1495              		.loc 1 320 11 view .LVU404
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1496              		.loc 1 322 14 view .LVU405
 1497              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1498              		.loc 1 324 48 is_stmt 0 view .LVU406
 1499 06bc 00E09DE5 		ldr	lr, [sp]	@ _80, %sfp
 1500              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1501              		.loc 1 322 48 view .LVU407
 1502 06c0 7340EFE6 		uxtb	r4, r3	@ _72, wave_word
 1503              	.LVL83:
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1504              		.loc 1 323 14 is_stmt 1 view .LVU408
 324:armwave.c     **** 
 1505              		.loc 1 324 14 view .LVU409
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1506              		.loc 1 326 14 view .LVU410
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1507              		.loc 1 327 14 view .LVU411
 328:armwave.c     **** 
 1508              		.loc 1 328 14 view .LVU412
 331:armwave.c     **** 
 1509              		.loc 1 331 14 view .LVU413
 345:armwave.c     **** 	            xx = nsub & g_armwave_state.row_mask;
 1510              		.loc 1 345 14 view .LVU414
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1511              		.loc 1 346 14 view .LVU415
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1512              		.loc 1 347 14 view .LVU416
 348:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1513              		.loc 1 348 14 view .LVU417
 351:armwave.c     **** 	        }
 1514              		.loc 1 351 14 view .LVU418
 1515              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1516              		.loc 1 347 24 is_stmt 0 view .LVU419
 1517 06c4 3CA09CE5 		ldr	r10, [ip, #60]	@ g_armwave_state.row_shift, g_armwave_state.row_shift
 1518              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1519              		.loc 1 324 48 view .LVU420
 1520 06c8 9E0407E0 		mul	r7, lr, r4	@ tmp285, _80, _72
 1521              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1522              		.loc 1 323 48 view .LVU421
 1523 06cc 980405E0 		mul	r5, r8, r4	@ tmp289, _76, _72
 1524              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1525              		.loc 1 324 17 view .LVU422
 1526 06d0 4774A0E1 		asr	r7, r7, #8	@ bb, tmp285,
 1527              	.LVL84:
 1528              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1529              		.loc 1 322 48 view .LVU423
 1530 06d4 940904E0 		mul	r4, r4, r9	@ tmp295, _72, _70
 1531              	.LVL85:
 1532              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1533              		.loc 1 346 17 view .LVU424
 1534 06d8 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.row_mask, g_armwave_state.row_mask
 1535              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1536              		.loc 1 328 18 view .LVU425
 1537 06dc FF0057E3 		cmp	r7, #255	@ bb,
 1538              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1539              		.loc 1 323 17 view .LVU426
 1540 06e0 4554A0E1 		asr	r5, r5, #8	@ gg, tmp289,
 1541              	.LVL86:
 1542              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1543              		.loc 1 351 32 view .LVU427
 1544 06e4 34009CE5 		ldr	r0, [ip, #52]	@ tmp388, g_armwave_state.target_width
 1545              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1546              		.loc 1 328 18 view .LVU428
 1547 06e8 FF70A0A3 		movge	r7, #255	@ bb,
 1548              	.LVL87:
 1549              	@ armwave.c:327: 	            g = MIN(gg, 255);
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1550              		.loc 1 327 18 view .LVU429
 1551 06ec FF0055E3 		cmp	r5, #255	@ gg,
 1552 06f0 FF50A0A3 		movge	r5, #255	@ gg,
 1553              	.LVL88:
 1554              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1555              		.loc 1 347 24 view .LVU430
 1556 06f4 52AAA0E1 		asr	r10, r2, r10	@ yy, n, g_armwave_state.row_shift
 1557              	.LVL89:
 1558              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1559              		.loc 1 346 17 view .LVU431
 1560 06f8 02B00BE0 		and	fp, fp, r2	@ xx, g_armwave_state.row_mask, n
 1561              	.LVL90:
 1562              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1563              		.loc 1 322 17 view .LVU432
 1564 06fc 4444A0E1 		asr	r4, r4, #8	@ rr, tmp295,
 1565              	.LVL91:
 1566              	@ armwave.c:320:         		wave_word >>= 8;
 320:armwave.c     **** 
 1567              		.loc 1 320 21 view .LVU433
 1568 0700 23E4A0E1 		lsr	lr, r3, #8	@ wave_word, wave_word,
 1569              	.LVL92:
 1570              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1571              		.loc 1 351 32 view .LVU434
 1572 0704 90AB2BE0 		mla	fp, r0, fp, r10	@ tmp283, tmp388, xx, yy
 1573              	.LVL93:
 1574              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1575              		.loc 1 326 18 view .LVU435
 1576 0708 FF0054E3 		cmp	r4, #255	@ rr,
 1577              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1578              		.loc 1 331 49 view .LVU436
 1579 070c 0554A0E1 		lsl	r5, r5, #8	@ tmp290, gg,
 1580              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1581              		.loc 1 324 48 view .LVU437
 1582 0710 00A09DE5 		ldr	r10, [sp]	@ _80, %sfp
 1583              	.LVL94:
 1584              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1585              		.loc 1 322 48 view .LVU438
 1586 0714 7EE0EFE6 		uxtb	lr, lr	@ _118, wave_word
 1587              	.LVL95:
 1588              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1589              		.loc 1 326 18 view .LVU439
 1590 0718 FF40A0A3 		movge	r4, #255	@ rr,
 1591              	.LVL96:
 1592              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1593              		.loc 1 331 37 view .LVU440
 1594 071c 0778A0E1 		lsl	r7, r7, #16	@ tmp286, bb,
 1595 0720 FF7807E2 		and	r7, r7, #16711680	@ tmp287, tmp286,
 1596              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1597              		.loc 1 331 49 view .LVU441
 1598 0724 7550FFE6 		uxth	r5, r5	@ tmp291, tmp290
 1599              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1600              		.loc 1 331 44 view .LVU442
 1601 0728 055087E1 		orr	r5, r7, r5	@ tmp293, tmp287, tmp291
 1602              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1603              		.loc 1 324 48 view .LVU443
 1604 072c 9E0A0AE0 		mul	r10, lr, r10	@ tmp311, _118, _80
 1605              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1606              		.loc 1 351 42 view .LVU444
 1607 0730 04009DE5 		ldr	r0, [sp, #4]	@ out_buffer, %sfp
 1608              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1609              		.loc 1 331 55 view .LVU445
 1610 0734 7440EFE6 		uxtb	r4, r4	@ rr, rr
 1611              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1612              		.loc 1 323 48 view .LVU446
 1613 0738 9E0807E0 		mul	r7, lr, r8	@ tmp315, _118, _76
 1614              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1615              		.loc 1 331 55 view .LVU447
 1616 073c 044085E1 		orr	r4, r5, r4	@ tmp297, tmp293, rr
 1617              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1618              		.loc 1 331 19 view .LVU448
 1619 0740 FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp297,
 1620              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1621              		.loc 1 351 42 view .LVU449
 1622 0744 0B4180E7 		str	r4, [r0, fp, lsl #2]	@ word, *_108
 1623              	.LVL97:
 1624              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1625              		.loc 1 347 24 view .LVU450
 1626 0748 3C409CE5 		ldr	r4, [ip, #60]	@ g_armwave_state.row_shift, g_armwave_state.row_shift
 1627              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1628              		.loc 1 346 17 view .LVU451
 1629 074c 40009CE5 		ldr	r0, [ip, #64]	@ tmp390, g_armwave_state.row_mask
 1630              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1631              		.loc 1 324 17 view .LVU452
 1632 0750 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp311,
 1633              	.LVL98:
 319:armwave.c     ****         		wave_word >>= 8;
 1634              		.loc 1 319 11 is_stmt 1 view .LVU453
 320:armwave.c     **** 
 1635              		.loc 1 320 11 view .LVU454
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1636              		.loc 1 322 14 view .LVU455
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1637              		.loc 1 323 14 view .LVU456
 324:armwave.c     **** 
 1638              		.loc 1 324 14 view .LVU457
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1639              		.loc 1 326 14 view .LVU458
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1640              		.loc 1 327 14 view .LVU459
 328:armwave.c     **** 
 1641              		.loc 1 328 14 view .LVU460
 331:armwave.c     **** 
 1642              		.loc 1 331 14 view .LVU461
 345:armwave.c     **** 	            xx = nsub & g_armwave_state.row_mask;
 1643              		.loc 1 345 14 view .LVU462
 1644 0754 01B082E2 		add	fp, r2, #1	@ _264, n,
 1645              	.LVL99:
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1646              		.loc 1 346 14 view .LVU463
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1647              		.loc 1 347 14 view .LVU464
 348:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1648              		.loc 1 348 14 view .LVU465
 351:armwave.c     **** 	        }
 1649              		.loc 1 351 14 view .LVU466
 1650              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1651              		.loc 1 322 48 is_stmt 0 view .LVU467
 1652 0758 9E090EE0 		mul	lr, lr, r9	@ tmp321, _118, _70
 1653              	.LVL100:
 1654              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1655              		.loc 1 328 18 view .LVU468
 1656 075c FF005AE3 		cmp	r10, #255	@ bb,
 1657              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1658              		.loc 1 323 17 view .LVU469
 1659 0760 4774A0E1 		asr	r7, r7, #8	@ gg, tmp315,
 1660              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1661              		.loc 1 347 24 view .LVU470
 1662 0764 5B44A0E1 		asr	r4, fp, r4	@ yy, _264, g_armwave_state.row_shift
 1663              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1664              		.loc 1 328 18 view .LVU471
 1665 0768 FFA0A0A3 		movge	r10, #255	@ bb,
 1666              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1667              		.loc 1 346 17 view .LVU472
 1668 076c 00B00BE0 		and	fp, fp, r0	@ xx, _264, tmp390
 1669              	@ armwave.c:327: 	            g = MIN(gg, 255);
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1670              		.loc 1 327 18 view .LVU473
 1671 0770 FF0057E3 		cmp	r7, #255	@ gg,
 1672              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1673              		.loc 1 351 32 view .LVU474
 1674 0774 34009CE5 		ldr	r0, [ip, #52]	@ tmp391, g_armwave_state.target_width
 1675              	@ armwave.c:327: 	            g = MIN(gg, 255);
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1676              		.loc 1 327 18 view .LVU475
 1677 0778 FF70A0A3 		movge	r7, #255	@ gg,
 1678              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1679              		.loc 1 322 17 view .LVU476
 1680 077c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp321,
 1681              	@ armwave.c:320:         		wave_word >>= 8;
 320:armwave.c     **** 
 1682              		.loc 1 320 21 view .LVU477
 1683 0780 2358A0E1 		lsr	r5, r3, #16	@ wave_word, wave_word,
 1684              	.LVL101:
 1685              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1686              		.loc 1 351 32 view .LVU478
 1687 0784 904B2BE0 		mla	fp, r0, fp, r4	@ tmp309, tmp391, xx, yy
 1688              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1689              		.loc 1 326 18 view .LVU479
 1690 0788 FF005EE3 		cmp	lr, #255	@ rr,
 1691              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1692              		.loc 1 324 48 view .LVU480
 1693 078c 00009DE5 		ldr	r0, [sp]	@ _80, %sfp
 1694              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1695              		.loc 1 331 49 view .LVU481
 1696 0790 0774A0E1 		lsl	r7, r7, #8	@ tmp316, gg,
 1697              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1698              		.loc 1 322 48 view .LVU482
 1699 0794 7550EFE6 		uxtb	r5, r5	@ _164, wave_word
 1700              	.LVL102:
 1701              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1702              		.loc 1 326 18 view .LVU483
 1703 0798 FFE0A0A3 		movge	lr, #255	@ rr,
 1704              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1705              		.loc 1 331 37 view .LVU484
 1706 079c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp312, bb,
 1707 07a0 FFA80AE2 		and	r10, r10, #16711680	@ tmp313, tmp312,
 1708              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1709              		.loc 1 331 49 view .LVU485
 1710 07a4 7770FFE6 		uxth	r7, r7	@ tmp317, tmp316
 1711              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1712              		.loc 1 324 48 view .LVU486
 1713 07a8 950004E0 		mul	r4, r5, r0	@ tmp337, _164, _80
 1714              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1715              		.loc 1 331 44 view .LVU487
 1716 07ac 07708AE1 		orr	r7, r10, r7	@ tmp319, tmp313, tmp317
 1717              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1718              		.loc 1 331 55 view .LVU488
 1719 07b0 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1720              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1721              		.loc 1 323 48 view .LVU489
 1722 07b4 95080AE0 		mul	r10, r5, r8	@ tmp341, _164, _76
 1723              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1724              		.loc 1 331 55 view .LVU490
 1725 07b8 0EE087E1 		orr	lr, r7, lr	@ tmp323, tmp319, rr
 1726              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1727              		.loc 1 351 42 view .LVU491
 1728 07bc 04709DE5 		ldr	r7, [sp, #4]	@ out_buffer, %sfp
 1729              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1730              		.loc 1 331 19 view .LVU492
 1731 07c0 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp323,
 1732              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1733              		.loc 1 324 17 view .LVU493
 1734 07c4 4444A0E1 		asr	r4, r4, #8	@ bb, tmp337,
 1735              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1736              		.loc 1 351 42 view .LVU494
 1737 07c8 0BE187E7 		str	lr, [r7, fp, lsl #2]	@ word, *_154
 1738              	.LVL103:
 319:armwave.c     ****         		wave_word >>= 8;
 1739              		.loc 1 319 11 is_stmt 1 view .LVU495
 320:armwave.c     **** 
 1740              		.loc 1 320 11 view .LVU496
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1741              		.loc 1 322 14 view .LVU497
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1742              		.loc 1 323 14 view .LVU498
 324:armwave.c     **** 
 1743              		.loc 1 324 14 view .LVU499
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1744              		.loc 1 326 14 view .LVU500
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1745              		.loc 1 327 14 view .LVU501
 328:armwave.c     **** 
 1746              		.loc 1 328 14 view .LVU502
 331:armwave.c     **** 
 1747              		.loc 1 331 14 view .LVU503
 345:armwave.c     **** 	            xx = nsub & g_armwave_state.row_mask;
 1748              		.loc 1 345 14 view .LVU504
 1749              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1750              		.loc 1 322 48 is_stmt 0 view .LVU505
 1751 07cc 950905E0 		mul	r5, r5, r9	@ tmp347, _164, _70
 1752              	.LVL104:
 1753              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1754              		.loc 1 347 24 view .LVU506
 1755 07d0 3C709CE5 		ldr	r7, [ip, #60]	@ g_armwave_state.row_shift, g_armwave_state.row_shift
 1756              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1757              		.loc 1 346 17 view .LVU507
 1758 07d4 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.row_mask, g_armwave_state.row_mask
 1759              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1760              		.loc 1 328 18 view .LVU508
 1761 07d8 FF0054E3 		cmp	r4, #255	@ bb,
 1762              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1763              		.loc 1 323 17 view .LVU509
 1764 07dc 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp341,
 1765 07e0 02E082E2 		add	lr, r2, #2	@ _259, n,
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1766              		.loc 1 346 14 is_stmt 1 view .LVU510
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1767              		.loc 1 347 14 view .LVU511
 348:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1768              		.loc 1 348 14 view .LVU512
 351:armwave.c     **** 	        }
 1769              		.loc 1 351 14 view .LVU513
 1770              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1771              		.loc 1 328 18 is_stmt 0 view .LVU514
 1772 07e4 FF40A0A3 		movge	r4, #255	@ bb,
 1773              	@ armwave.c:327: 	            g = MIN(gg, 255);
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1774              		.loc 1 327 18 view .LVU515
 1775 07e8 FF005AE3 		cmp	r10, #255	@ gg,
 1776              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1777              		.loc 1 347 24 view .LVU516
 1778 07ec 5E77A0E1 		asr	r7, lr, r7	@ yy, _259, g_armwave_state.row_shift
 1779              	@ armwave.c:327: 	            g = MIN(gg, 255);
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1780              		.loc 1 327 18 view .LVU517
 1781 07f0 FFA0A0A3 		movge	r10, #255	@ gg,
 1782              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1783              		.loc 1 346 17 view .LVU518
 1784 07f4 0BE00EE0 		and	lr, lr, fp	@ xx, _259, g_armwave_state.row_mask
 1785              	@ armwave.c:348: 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave
 348:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1786              		.loc 1 348 32 view .LVU519
 1787 07f8 34B09CE5 		ldr	fp, [ip, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1788              	@ armwave.c:320:         		wave_word >>= 8;
 320:armwave.c     **** 
 1789              		.loc 1 320 21 view .LVU520
 1790 07fc 233CA0E1 		lsr	r3, r3, #24	@ _210, wave_word,
 1791              	.LVL105:
 1792              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1793              		.loc 1 322 17 view .LVU521
 1794 0800 4554A0E1 		asr	r5, r5, #8	@ rr, tmp347,
 1795              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1796              		.loc 1 326 18 view .LVU522
 1797 0804 FF0055E3 		cmp	r5, #255	@ rr,
 1798              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1799              		.loc 1 331 49 view .LVU523
 1800 0808 0AA4A0E1 		lsl	r10, r10, #8	@ tmp342, gg,
 1801              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1802              		.loc 1 351 32 view .LVU524
 1803 080c 9B7E2EE0 		mla	lr, fp, lr, r7	@ tmp335, g_armwave_state.target_width, xx, yy
 1804              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1805              		.loc 1 326 18 view .LVU525
 1806 0810 FF50A0A3 		movge	r5, #255	@ rr,
 1807              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1808              		.loc 1 324 48 view .LVU526
 1809 0814 930007E0 		mul	r7, r3, r0	@ tmp362, _210, _80
 1810              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1811              		.loc 1 331 37 view .LVU527
 1812 0818 0448A0E1 		lsl	r4, r4, #16	@ tmp338, bb,
 1813              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1814              		.loc 1 323 48 view .LVU528
 1815 081c 93080BE0 		mul	fp, r3, r8	@ tmp366, _210, _76
 1816              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1817              		.loc 1 331 37 view .LVU529
 1818 0820 FF4804E2 		and	r4, r4, #16711680	@ tmp339, tmp338,
 1819              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1820              		.loc 1 331 49 view .LVU530
 1821 0824 7AA0FFE6 		uxth	r10, r10	@ tmp343, tmp342
 1822              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1823              		.loc 1 331 44 view .LVU531
 1824 0828 0A4084E1 		orr	r4, r4, r10	@ tmp345, tmp339, tmp343
 1825              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1826              		.loc 1 351 42 view .LVU532
 1827 082c 04009DE5 		ldr	r0, [sp, #4]	@ out_buffer, %sfp
 1828              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1829              		.loc 1 331 55 view .LVU533
 1830 0830 7550EFE6 		uxtb	r5, r5	@ rr, rr
 1831 0834 055084E1 		orr	r5, r4, r5	@ tmp349, tmp345, rr
 1832              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1833              		.loc 1 331 19 view .LVU534
 1834 0838 FF5485E3 		orr	r5, r5, #-16777216	@ word, tmp349,
 1835              	@ armwave.c:324: 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 324:armwave.c     **** 
 1836              		.loc 1 324 17 view .LVU535
 1837 083c 4744A0E1 		asr	r4, r7, #8	@ bb, tmp362,
 1838              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1839              		.loc 1 322 48 view .LVU536
 1840 0840 930903E0 		mul	r3, r3, r9	@ tmp372, _210, _70
 1841              	.LVL106:
 1842              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1843              		.loc 1 351 42 view .LVU537
 1844 0844 0E5180E7 		str	r5, [r0, lr, lsl #2]	@ word, *_200
 1845              	.LVL107:
 319:armwave.c     ****         		wave_word >>= 8;
 1846              		.loc 1 319 11 is_stmt 1 view .LVU538
 320:armwave.c     **** 
 1847              		.loc 1 320 11 view .LVU539
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1848              		.loc 1 322 14 view .LVU540
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1849              		.loc 1 323 14 view .LVU541
 324:armwave.c     **** 
 1850              		.loc 1 324 14 view .LVU542
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1851              		.loc 1 326 14 view .LVU543
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1852              		.loc 1 327 14 view .LVU544
 328:armwave.c     **** 
 1853              		.loc 1 328 14 view .LVU545
 331:armwave.c     **** 
 1854              		.loc 1 331 14 view .LVU546
 345:armwave.c     **** 	            xx = nsub & g_armwave_state.row_mask;
 1855              		.loc 1 345 14 view .LVU547
 1856              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1857              		.loc 1 328 18 is_stmt 0 view .LVU548
 1858 0848 FF0054E3 		cmp	r4, #255	@ bb,
 1859              	@ armwave.c:323: 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 323:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1860              		.loc 1 323 17 view .LVU549
 1861 084c 4BB4A0E1 		asr	fp, fp, #8	@ gg, tmp366,
 1862              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1863              		.loc 1 347 24 view .LVU550
 1864 0850 3C509CE5 		ldr	r5, [ip, #60]	@ g_armwave_state.row_shift, g_armwave_state.row_shift
 1865              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1866              		.loc 1 346 17 view .LVU551
 1867 0854 40709CE5 		ldr	r7, [ip, #64]	@ g_armwave_state.row_mask, g_armwave_state.row_mask
 1868              	@ armwave.c:328: 	            b = MIN(bb, 255);
 328:armwave.c     **** 
 1869              		.loc 1 328 18 view .LVU552
 1870 0858 FF40A0A3 		movge	r4, #255	@ bb,
 1871 085c 03E082E2 		add	lr, r2, #3	@ _254, n,
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1872              		.loc 1 346 14 is_stmt 1 view .LVU553
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1873              		.loc 1 347 14 view .LVU554
 348:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1874              		.loc 1 348 14 view .LVU555
 351:armwave.c     **** 	        }
 1875              		.loc 1 351 14 view .LVU556
 1876              	@ armwave.c:327: 	            g = MIN(gg, 255);
 327:armwave.c     **** 	            b = MIN(bb, 255);
 1877              		.loc 1 327 18 is_stmt 0 view .LVU557
 1878 0860 FF005BE3 		cmp	fp, #255	@ gg,
 1879 0864 FFB0A0A3 		movge	fp, #255	@ gg,
 1880              	@ armwave.c:322: 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 322:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1881              		.loc 1 322 17 view .LVU558
 1882 0868 4334A0E1 		asr	r3, r3, #8	@ rr, tmp372,
 1883              	@ armwave.c:347: 	            yy = nsub >> g_armwave_state.row_shift;
 347:armwave.c     **** 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_hei
 1884              		.loc 1 347 24 view .LVU559
 1885 086c 5E55A0E1 		asr	r5, lr, r5	@ yy, _254, g_armwave_state.row_shift
 1886              	@ armwave.c:346: 	            xx = nsub & g_armwave_state.row_mask;
 346:armwave.c     **** 	            yy = nsub >> g_armwave_state.row_shift;
 1887              		.loc 1 346 17 view .LVU560
 1888 0870 07E00EE0 		and	lr, lr, r7	@ xx, _254, g_armwave_state.row_mask
 1889              	@ armwave.c:348: 	            offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave
 348:armwave.c     **** 	            //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1890              		.loc 1 348 32 view .LVU561
 1891 0874 34709CE5 		ldr	r7, [ip, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1892              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1893              		.loc 1 326 18 view .LVU562
 1894 0878 FF0053E3 		cmp	r3, #255	@ rr,
 1895              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1896              		.loc 1 331 49 view .LVU563
 1897 087c 0BB4A0E1 		lsl	fp, fp, #8	@ tmp367, gg,
 1898              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1899              		.loc 1 331 37 view .LVU564
 1900 0880 0448A0E1 		lsl	r4, r4, #16	@ tmp363, bb,
 1901              	@ armwave.c:326: 	            r = MIN(rr, 255);
 326:armwave.c     **** 	            g = MIN(gg, 255);
 1902              		.loc 1 326 18 view .LVU565
 1903 0884 FF30A0A3 		movge	r3, #255	@ rr,
 1904              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1905              		.loc 1 351 32 view .LVU566
 1906 0888 975E2EE0 		mla	lr, r7, lr, r5	@ tmp360, g_armwave_state.target_width, xx, yy
 1907              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1908              		.loc 1 331 37 view .LVU567
 1909 088c FF4804E2 		and	r4, r4, #16711680	@ tmp364, tmp363,
 1910              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1911              		.loc 1 331 49 view .LVU568
 1912 0890 7BB0FFE6 		uxth	fp, fp	@ tmp368, tmp367
 1913              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1914              		.loc 1 331 44 view .LVU569
 1915 0894 0BB084E1 		orr	fp, r4, fp	@ tmp370, tmp364, tmp368
 1916              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1917              		.loc 1 331 55 view .LVU570
 1918 0898 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1919 089c 03308BE1 		orr	r3, fp, r3	@ tmp374, tmp370, rr
 1920              	@ armwave.c:331: 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 331:armwave.c     **** 
 1921              		.loc 1 331 19 view .LVU571
 1922 08a0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp374,
 1923              	@ armwave.c:351: 	            *(out_buffer_base + offset) = word;
 351:armwave.c     **** 	        }
 1924              		.loc 1 351 42 view .LVU572
 1925 08a4 0E3180E7 		str	r3, [r0, lr, lsl #2]	@ word, *_246
 1926              	.LVL108:
 351:armwave.c     **** 	        }
 1927              		.loc 1 351 42 view .LVU573
 1928 08a8 7EFFFFEA 		b	.L87		@
 1929              	.LVL109:
 1930              	.L94:
 305:armwave.c     **** 
 1931              		.loc 1 305 5 is_stmt 1 discriminator 1 view .LVU574
 1932 08ac 10309FE5 		ldr	r3, .L96+4	@,
 1933 08b0 10209FE5 		ldr	r2, .L96+8	@,
 1934 08b4 10109FE5 		ldr	r1, .L96+12	@,
 1935              	.LVL110:
 305:armwave.c     **** 
 1936              		.loc 1 305 5 is_stmt 0 discriminator 1 view .LVU575
 1937 08b8 10009FE5 		ldr	r0, .L96+16	@,
 1938              	.LVL111:
 305:armwave.c     **** 
 1939              		.loc 1 305 5 discriminator 1 view .LVU576
 1940 08bc FEFFFFEB 		bl	__assert_fail		@
 1941              	.LVL112:
 1942              	.L97:
 305:armwave.c     **** 
 1943              		.loc 1 305 5 discriminator 1 view .LVU577
 1944              		.align	2
 1945              	.L96:
 1946 08c0 00000000 		.word	g_armwave_state
 1947 08c4 18000000 		.word	.LANCHOR0+24
 1948 08c8 31010000 		.word	305
 1949 08cc 00000000 		.word	.LC0
 1950 08d0 D4000000 		.word	.LC5
 1951              		.cfi_endproc
 1952              	.LFE63:
 1954              		.align	2
 1955              		.global	armwave_dump_ppm_debug
 1956              		.syntax unified
 1957              		.arm
 1958              		.fpu vfp
 1960              	armwave_dump_ppm_debug:
 1961              	.LVL113:
 1962              	.LFB64:
 356:armwave.c     **** 
 357:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 358:armwave.c     **** {
 1963              		.loc 1 358 1 is_stmt 1 view -0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 0
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 359:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1967              		.loc 1 359 5 view .LVU579
 1968              	@ armwave.c:358: {
 358:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1969              		.loc 1 358 1 is_stmt 0 view .LVU580
 1970 08d4 0130A0E1 		mov	r3, r1	@ fn, fn
 1971 08d8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1972              		.cfi_def_cfa_offset 28
 1973              		.cfi_offset 4, -28
 1974              		.cfi_offset 5, -24
 1975              		.cfi_offset 6, -20
 1976              		.cfi_offset 7, -16
 1977              		.cfi_offset 8, -12
 1978              		.cfi_offset 9, -8
 1979              		.cfi_offset 14, -4
 1980 08dc 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1981 08e0 0CD04DE2 		sub	sp, sp, #12	@,,
 1982              		.cfi_def_cfa_offset 40
 1983              	@ armwave.c:359:     FILE *fp = fopen(fn, "wb");
 1984              		.loc 1 359 16 view .LVU581
 1985 08e4 D8109FE5 		ldr	r1, .L110	@,
 1986              	.LVL114:
 1987              		.loc 1 359 16 view .LVU582
 1988 08e8 0300A0E1 		mov	r0, r3	@, fn
 1989              	.LVL115:
 1990              		.loc 1 359 16 view .LVU583
 1991 08ec FEFFFFEB 		bl	fopen64		@
 1992              	.LVL116:
 1993              	@ armwave.c:366:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 360:armwave.c     ****     uint32_t data;
 361:armwave.c     ****     int xx, yy;
 362:armwave.c     **** 
 363:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 364:armwave.c     **** 
 365:armwave.c     ****     fputs("P3\n", fp);
 366:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1994              		.loc 1 366 5 view .LVU584
 1995 08f0 D0609FE5 		ldr	r6, .L110+4	@ tmp154,
 1996              	@ armwave.c:365:     fputs("P3\n", fp);
 365:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1997              		.loc 1 365 5 view .LVU585
 1998 08f4 0320A0E3 		mov	r2, #3	@,
 1999 08f8 0110A0E3 		mov	r1, #1	@,
 2000              	@ armwave.c:359:     FILE *fp = fopen(fn, "wb");
 359:armwave.c     ****     uint32_t data;
 2001              		.loc 1 359 16 view .LVU586
 2002 08fc 0070A0E1 		mov	r7, r0	@ fp,
 2003              	.LVL117:
 360:armwave.c     ****     uint32_t data;
 2004              		.loc 1 360 5 is_stmt 1 view .LVU587
 361:armwave.c     **** 
 2005              		.loc 1 361 5 view .LVU588
 365:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2006              		.loc 1 365 5 view .LVU589
 2007 0900 0030A0E1 		mov	r3, r0	@, fp
 2008 0904 C0009FE5 		ldr	r0, .L110+8	@,
 2009              	.LVL118:
 365:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2010              		.loc 1 365 5 is_stmt 0 view .LVU590
 2011 0908 FEFFFFEB 		bl	fwrite		@
 2012              	.LVL119:
 2013              		.loc 1 366 5 is_stmt 1 view .LVU591
 2014 090c 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 2015 0910 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 2016 0914 B4109FE5 		ldr	r1, .L110+12	@,
 2017 0918 0700A0E1 		mov	r0, r7	@, fp
 2018 091c FEFFFFEB 		bl	fprintf		@
 2019              	.LVL120:
 367:armwave.c     ****     fputs("255\n", fp);
 2020              		.loc 1 367 5 view .LVU592
 2021 0920 0420A0E3 		mov	r2, #4	@,
 2022 0924 0730A0E1 		mov	r3, r7	@, fp
 2023 0928 0110A0E3 		mov	r1, #1	@,
 2024 092c A0009FE5 		ldr	r0, .L110+16	@,
 2025 0930 FEFFFFEB 		bl	fwrite		@
 2026              	.LVL121:
 368:armwave.c     **** 
 369:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2027              		.loc 1 369 5 view .LVU593
 2028              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2029              		.loc 1 369 37 is_stmt 0 view .LVU594
 2030 0934 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2031              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2032              		.loc 1 369 5 view .LVU595
 2033 0938 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2034 093c 1800000A 		beq	.L99		@,
 2035 0940 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2036              	@ armwave.c:374:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 371:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 372:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 373:armwave.c     **** 
 374:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2037              		.loc 1 374 13 view .LVU596
 2038 0944 8C909FE5 		ldr	r9, .L110+20	@ tmp156,
 2039              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 369:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2040              		.loc 1 369 12 view .LVU597
 2041 0948 0050A0E3 		mov	r5, #0	@ yy,
 2042              	.LVL122:
 2043              	.L100:
 2044              	@ armwave.c:370:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2045              		.loc 1 370 9 view .LVU598
 2046 094c 000053E3 		cmp	r3, #0	@ _12,
 2047              	@ armwave.c:370:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2048              		.loc 1 370 16 view .LVU599
 2049 0950 0040A013 		movne	r4, #0	@ xx,
 2050              	@ armwave.c:370:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2051              		.loc 1 370 9 view .LVU600
 2052 0954 1600000A 		beq	.L109		@,
 2053              	.LVL123:
 2054              	.L101:
 371:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2055              		.loc 1 371 13 is_stmt 1 discriminator 3 view .LVU601
 2056              	@ armwave.c:371:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 371:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2057              		.loc 1 371 29 is_stmt 0 discriminator 3 view .LVU602
 2058 0958 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2059              	@ armwave.c:374:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2060              		.loc 1 374 13 discriminator 3 view .LVU603
 2061 095c 0910A0E1 		mov	r1, r9	@, tmp156
 2062 0960 0700A0E1 		mov	r0, r7	@, fp
 2063              	@ armwave.c:371:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 371:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2064              		.loc 1 371 18 discriminator 3 view .LVU604
 2065 0964 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2066              	.LVL124:
 2067              		.loc 1 374 13 is_stmt 1 discriminator 3 view .LVU605
 2068              	@ armwave.c:370:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2069              		.loc 1 370 58 is_stmt 0 discriminator 3 view .LVU606
 2070 0968 014084E2 		add	r4, r4, #1	@ xx, xx,
 2071              	.LVL125:
 2072              	@ armwave.c:374:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2073              		.loc 1 374 81 discriminator 3 view .LVU607
 2074 096c 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2075              	@ armwave.c:374:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2076              		.loc 1 374 61 discriminator 3 view .LVU608
 2077 0970 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2078              	@ armwave.c:374:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2079              		.loc 1 374 13 discriminator 3 view .LVU609
 2080 0974 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2081 0978 7330EFE6 		uxtb	r3, r3	@, tmp146
 2082 097c 00C08DE5 		str	ip, [sp]	@ tmp151,
 2083 0980 7220EFE6 		uxtb	r2, r2	@, data
 2084              	.LVL126:
 2085              		.loc 1 374 13 discriminator 3 view .LVU610
 2086 0984 FEFFFFEB 		bl	fprintf		@
 2087              	.LVL127:
 2088              	@ armwave.c:370:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2089              		.loc 1 370 41 discriminator 3 view .LVU611
 2090 0988 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2091              	@ armwave.c:370:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 370:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2092              		.loc 1 370 9 discriminator 3 view .LVU612
 2093 098c 040053E1 		cmp	r3, r4	@ _12, xx
 2094 0990 F0FFFF8A 		bhi	.L101		@,
 2095 0994 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2096              	.LVL128:
 2097              	.L102:
 2098              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 369:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2099              		.loc 1 369 55 discriminator 2 view .LVU613
 2100 0998 015085E2 		add	r5, r5, #1	@ yy, yy,
 2101              	.LVL129:
 2102              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 369:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2103              		.loc 1 369 5 discriminator 2 view .LVU614
 2104 099c 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2105 09a0 E9FFFF3A 		bcc	.L100		@,
 2106              	.LVL130:
 2107              	.L99:
 375:armwave.c     ****         }
 376:armwave.c     ****     }
 377:armwave.c     **** 
 378:armwave.c     ****     fclose(fp);
 2108              		.loc 1 378 5 is_stmt 1 view .LVU615
 2109 09a4 0700A0E1 		mov	r0, r7	@, fp
 2110              	@ armwave.c:379: }
 379:armwave.c     **** }
 2111              		.loc 1 379 1 is_stmt 0 view .LVU616
 2112 09a8 0CD08DE2 		add	sp, sp, #12	@,,
 2113              		.cfi_remember_state
 2114              		.cfi_def_cfa_offset 28
 2115              		@ sp needed	@
 2116 09ac F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2117              		.cfi_restore 14
 2118              		.cfi_restore 9
 2119              		.cfi_restore 8
 2120              		.cfi_restore 7
 2121              		.cfi_restore 6
 2122              		.cfi_restore 5
 2123              		.cfi_restore 4
 2124              		.cfi_def_cfa_offset 0
 2125              	.LVL131:
 2126              	@ armwave.c:378:     fclose(fp);
 378:armwave.c     **** }
 2127              		.loc 1 378 5 view .LVU617
 2128 09b0 FEFFFFEA 		b	fclose		@
 2129              	.LVL132:
 2130              	.L109:
 2131              		.cfi_restore_state
 2132              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 369:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2133              		.loc 1 369 55 view .LVU618
 2134 09b4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2135              	.LVL133:
 2136              	@ armwave.c:369:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 369:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2137              		.loc 1 369 5 view .LVU619
 2138 09b8 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2139 09bc F5FFFF8A 		bhi	.L102		@,
 2140 09c0 F7FFFFEA 		b	.L99		@
 2141              	.L111:
 2142              		.align	2
 2143              	.L110:
 2144 09c4 E8000000 		.word	.LC6
 2145 09c8 00000000 		.word	g_armwave_state
 2146 09cc EC000000 		.word	.LC7
 2147 09d0 F0000000 		.word	.LC8
 2148 09d4 F8000000 		.word	.LC9
 2149 09d8 00010000 		.word	.LC10
 2150              		.cfi_endproc
 2151              	.LFE64:
 2153              		.align	2
 2154              		.global	armwave_test_init
 2155              		.syntax unified
 2156              		.arm
 2157              		.fpu vfp
 2159              	armwave_test_init:
 2160              	.LVL134:
 2161              	.LFB65:
 380:armwave.c     **** 
 381:armwave.c     **** void armwave_test_init(float mod)
 382:armwave.c     **** {
 2162              		.loc 1 382 1 is_stmt 1 view -0
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 0
 2165              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     **** 	mod_depth = mod;
 2166              		.loc 1 383 2 view .LVU621
 2167              	@ armwave.c:383: 	mod_depth = mod;
 2168              		.loc 1 383 12 is_stmt 0 view .LVU622
 2169 09dc 88309FE5 		ldr	r3, .L116+20	@ tmp124,
 2170              	@ armwave.c:382: {
 382:armwave.c     **** 	mod_depth = mod;
 2171              		.loc 1 382 1 view .LVU623
 2172 09e0 70402DE9 		push	{r4, r5, r6, lr}	@
 2173              		.cfi_def_cfa_offset 16
 2174              		.cfi_offset 4, -16
 2175              		.cfi_offset 5, -12
 2176              		.cfi_offset 6, -8
 2177              		.cfi_offset 14, -4
 2178 09e4 068B2DED 		vpush.64	{d8, d9, d10}	@
 2179              		.cfi_def_cfa_offset 40
 2180              		.cfi_offset 80, -40
 2181              		.cfi_offset 81, -36
 2182              		.cfi_offset 82, -32
 2183              		.cfi_offset 83, -28
 2184              		.cfi_offset 84, -24
 2185              		.cfi_offset 85, -20
 2186 09e8 80409FE5 		ldr	r4, .L116+24	@ ivtmp.91,
 2187              	.LBB6:
 2188              	.LBB7:
 2189              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2190              		.loc 1 87 32 view .LVU624
 2191 09ec 1DAA9FED 		vldr.32	s20, .L116+16	@ tmp130,
 2192              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2193              		.loc 1 87 26 view .LVU625
 2194 09f0 189B9FED 		vldr.64	d9, .L116	@ tmp139,
 2195              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2196              		.loc 1 87 49 view .LVU626
 2197 09f4 198B9FED 		vldr.64	d8, .L116+8	@ tmp133,
 2198              	.LBE7:
 2199              	.LBE6:
 2200              	@ armwave.c:383: 	mod_depth = mod;
 2201              		.loc 1 383 12 view .LVU627
 2202 09f8 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 384:armwave.c     **** 
 385:armwave.c     ****     test_create_waveform();
 2203              		.loc 1 385 5 is_stmt 1 view .LVU628
 2204 09fc FEFFFFEB 		bl	test_create_waveform		@
 2205              	.LVL135:
 386:armwave.c     ****     test_create_gamma();
 2206              		.loc 1 386 5 view .LVU629
 2207              	.LBB9:
 2208              	.LBI6:
  81:armwave.c     **** {
 2209              		.loc 1 81 6 view .LVU630
  81:armwave.c     **** {
 2210              		.loc 1 81 6 is_stmt 0 view .LVU631
 2211 0a00 013084E2 		add	r3, r4, #1	@ _30, ivtmp.91,
 2212 0a04 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.91,
 2213 0a08 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 2214              	.LVL136:
 2215              	.L113:
 2216              	.LBB8:
  87:armwave.c     ****     }
 2217              		.loc 1 87 9 is_stmt 1 view .LVU632
 2218              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2219              		.loc 1 87 32 is_stmt 0 view .LVU633
 2220 0a0c 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.91
 2221              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2222              		.loc 1 87 26 view .LVU634
 2223 0a10 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 2224              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2225              		.loc 1 87 32 view .LVU635
 2226 0a14 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 2227 0a18 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 2228 0a1c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 2229              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2230              		.loc 1 87 26 view .LVU636
 2231 0a20 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 2232 0a24 FEFFFFEB 		bl	pow		@
 2233              	.LVL137:
 2234              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2235              		.loc 1 87 49 view .LVU637
 2236 0a28 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 2237              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2238              		.loc 1 87 24 view .LVU638
 2239 0a2c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 2240 0a30 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 2241 0a34 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 2242              	.LVL138:
 2243              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2244              		.loc 1 86 5 view .LVU639
 2245 0a38 060054E1 		cmp	r4, r6	@ ivtmp.91, _31
 2246 0a3c F2FFFF1A 		bne	.L113		@,
 2247              	.LVL139:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2248              		.loc 1 86 5 view .LVU640
 2249              	.LBE8:
 2250              	.LBE9:
 387:armwave.c     **** 
 388:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2251              		.loc 1 388 5 is_stmt 1 view .LVU641
 2252 0a40 6EFDFFEB 		bl	armwave_setup_render.constprop.0		@
 2253              	.LVL140:
 389:armwave.c     **** 
 390:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2254              		.loc 1 390 5 view .LVU642
 2255              	@ armwave.c:391: }
 391:armwave.c     **** }
 2256              		.loc 1 391 1 is_stmt 0 view .LVU643
 2257 0a44 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2258              		.cfi_restore 84
 2259              		.cfi_restore 85
 2260              		.cfi_restore 82
 2261              		.cfi_restore 83
 2262              		.cfi_restore 80
 2263              		.cfi_restore 81
 2264              		.cfi_def_cfa_offset 16
 2265              	@ armwave.c:390:     printf("armwave version: %s\n", ARMWAVE_VER);
 390:armwave.c     **** }
 2266              		.loc 1 390 5 view .LVU644
 2267 0a48 24109FE5 		ldr	r1, .L116+28	@,
 2268 0a4c 24009FE5 		ldr	r0, .L116+32	@,
 2269              	@ armwave.c:391: }
 2270              		.loc 1 391 1 view .LVU645
 2271 0a50 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2272              		.cfi_restore 14
 2273              		.cfi_restore 6
 2274              		.cfi_restore 5
 2275              		.cfi_restore 4
 2276              		.cfi_def_cfa_offset 0
 2277              	@ armwave.c:390:     printf("armwave version: %s\n", ARMWAVE_VER);
 390:armwave.c     **** }
 2278              		.loc 1 390 5 view .LVU646
 2279 0a54 FEFFFFEA 		b	printf		@
 2280              	.LVL141:
 2281              	.L117:
 2282              		.align	3
 2283              	.L116:
 2284 0a58 000000C0 		.word	-1073741824
 2285 0a5c CCCCEC3F 		.word	1072483532
 2286 0a60 00000000 		.word	0
 2287 0a64 00E06F40 		.word	1081073664
 2288 0a68 00007F43 		.word	1132396544
 2289 0a6c 00000000 		.word	.LANCHOR1
 2290 0a70 FFFFFFFF 		.word	gamma_table-1
 2291 0a74 10010000 		.word	.LC11
 2292 0a78 18010000 		.word	.LC12
 2293              		.cfi_endproc
 2294              	.LFE65:
 2296              		.global	__aeabi_uidiv
 2297              		.align	2
 2298              		.global	armwave_test_generate
 2299              		.syntax unified
 2300              		.arm
 2301              		.fpu vfp
 2303              	armwave_test_generate:
 2304              	.LFB66:
 392:armwave.c     **** 
 393:armwave.c     **** void armwave_test_generate()
 394:armwave.c     **** {
 2305              		.loc 1 394 1 is_stmt 1 view -0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 8
 2308              		@ frame_needed = 0, uses_anonymous_args = 0
 395:armwave.c     **** 	uint32_t yy;
 2309              		.loc 1 395 2 view .LVU648
 396:armwave.c     **** 
 397:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2310              		.loc 1 397 5 view .LVU649
 2311              	@ armwave.c:394: {
 394:armwave.c     **** 	uint32_t yy;
 2312              		.loc 1 394 1 is_stmt 0 view .LVU650
 2313 0a7c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2314              		.cfi_def_cfa_offset 36
 2315              		.cfi_offset 4, -36
 2316              		.cfi_offset 5, -32
 2317              		.cfi_offset 6, -28
 2318              		.cfi_offset 7, -24
 2319              		.cfi_offset 8, -20
 2320              		.cfi_offset 9, -16
 2321              		.cfi_offset 10, -12
 2322              		.cfi_offset 11, -8
 2323              		.cfi_offset 14, -4
 2324              	@ armwave.c:397:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2325              		.loc 1 397 5 view .LVU651
 2326 0a80 0010A0E3 		mov	r1, #0	@,
 2327 0a84 44419FE5 		ldr	r4, .L136	@ tmp269,
 2328              	@ armwave.c:394: {
 394:armwave.c     **** 	uint32_t yy;
 2329              		.loc 1 394 1 view .LVU652
 2330 0a88 0CD04DE2 		sub	sp, sp, #12	@,,
 2331              		.cfi_def_cfa_offset 48
 2332              	@ armwave.c:397:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2333              		.loc 1 397 5 view .LVU653
 2334 0a8c 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 2335 0a90 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2336 0a94 FEFFFFEB 		bl	memset		@
 2337              	.LVL142:
 398:armwave.c     **** 
 399:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2338              		.loc 1 399 5 is_stmt 1 view .LVU654
 2339              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2340              		.loc 1 399 45 is_stmt 0 view .LVU655
 2341 0a98 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2342              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2343              		.loc 1 399 5 view .LVU656
 2344 0a9c 020B55E3 		cmp	r5, #2048	@ _72,
 2345 0aa0 4800008A 		bhi	.L118		@,
 2346 0aa4 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2347              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2348              		.loc 1 399 12 view .LVU657
 2349 0aa8 00A0A0E3 		mov	r10, #0	@ yy,
 2350              	.LVL143:
 2351              	.L124:
 400:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2352              		.loc 1 400 9 is_stmt 1 discriminator 3 view .LVU658
 2353 0aac 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 2354              	.LBB12:
 2355              	.LBB13:
 2356              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2357              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU659
 2358 0ab0 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2359              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2360              		.loc 1 109 5 discriminator 3 view .LVU660
 2361 0ab4 000056E3 		cmp	r6, #0	@ prephitmp_171,
 2362              	.LBE13:
 2363              	.LBE12:
 2364              	@ armwave.c:400:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2365              		.loc 1 400 9 discriminator 3 view .LVU661
 2366 0ab8 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 2367              	.LVL144:
 2368              	.LBB15:
 2369              	.LBI12:
  98:armwave.c     **** {
 2370              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU662
 2371              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 2372              		.loc 1 100 5 discriminator 3 view .LVU663
 101:armwave.c     ****     uint8_t *wave_base;
 2373              		.loc 1 101 5 discriminator 3 view .LVU664
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2374              		.loc 1 102 5 discriminator 3 view .LVU665
 103:armwave.c     ****     uint8_t *write_buffer;
 2375              		.loc 1 103 5 discriminator 3 view .LVU666
 104:armwave.c     ****     
 2376              		.loc 1 104 5 discriminator 3 view .LVU667
 106:armwave.c     **** 
 2377              		.loc 1 106 5 discriminator 3 view .LVU668
 2378              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2379              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU669
 2380 0abc 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 2381              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2382              		.loc 1 106 40 discriminator 3 view .LVU670
 2383 0ac0 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2384              	.LVL145:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2385              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU671
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2386              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU672
 2387 0ac4 3900000A 		beq	.L120		@,
 2388              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2389              		.loc 1 109 11 view .LVU673
 2390 0ac8 0080A0E3 		mov	r8, #0	@ w,
 2391 0acc 043043E2 		sub	r3, r3, #4	@ _77, _3,
 2392              	.LVL146:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2393              		.loc 1 109 11 view .LVU674
 2394 0ad0 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 2395              	.LVL147:
 2396              	.L123:
 110:armwave.c     **** 
 2397              		.loc 1 110 9 is_stmt 1 view .LVU675
 2398              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2399              		.loc 1 110 64 is_stmt 0 view .LVU676
 2400 0ad4 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2401              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2402              		.loc 1 120 9 view .LVU677
 2403 0ad8 000059E3 		cmp	r9, #0	@ _4,
 2404              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2405              		.loc 1 110 36 view .LVU678
 2406 0adc 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2407              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2408              		.loc 1 110 64 view .LVU679
 2409 0ae0 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 2410              	.LVL148:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2411              		.loc 1 120 9 is_stmt 1 view .LVU680
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2412              		.loc 1 120 9 is_stmt 0 view .LVU681
 2413 0ae4 2D00000A 		beq	.L121		@,
 2414 0ae8 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 2415 0aec 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 2416              	.LVL149:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2417              		.loc 1 120 9 view .LVU682
 2418 0af0 03E08EE0 		add	lr, lr, r3	@ ivtmp.97, _16, tmp205
 2419              	.LVL150:
 2420              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2421              		.loc 1 120 16 view .LVU683
 2422 0af4 0010A0E3 		mov	r1, #0	@ yy,
 2423              	.LVL151:
 2424              	.L122:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2425              		.loc 1 135 13 is_stmt 1 view .LVU684
 2426              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2427              		.loc 1 135 18 is_stmt 0 view .LVU685
 2428 0af8 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 2429              	.LVL152:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2430              		.loc 1 139 13 is_stmt 1 view .LVU686
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2431              		.loc 1 140 14 view .LVU687
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2432              		.loc 1 141 14 view .LVU688
 142:armwave.c     ****             	word >>= 8;
 2433              		.loc 1 142 14 view .LVU689
 2434              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2435              		.loc 1 140 42 is_stmt 0 view .LVU690
 2436 0afc 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2437              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2438              		.loc 1 141 60 view .LVU691
 2439 0b00 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2440              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2441              		.loc 1 140 34 view .LVU692
 2442 0b04 73C0EFE6 		uxtb	ip, r3	@ word, word
 2443              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2444              		.loc 1 143 19 view .LVU693
 2445 0b08 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 2446              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2447              		.loc 1 142 44 view .LVU694
 2448 0b0c 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 2449              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2450              		.loc 1 140 34 view .LVU695
 2451 0b10 7550EFE6 		uxtb	r5, r5	@ word, word
 2452              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2453              		.loc 1 142 44 view .LVU696
 2454 0b14 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2455              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2456              		.loc 1 141 60 view .LVU697
 2457 0b18 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2458              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2459              		.loc 1 143 19 view .LVU698
 2460 0b1c 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2461              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2462              		.loc 1 142 44 view .LVU699
 2463 0b20 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2464              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2465              		.loc 1 140 34 view .LVU700
 2466 0b24 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2467              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2468              		.loc 1 143 19 view .LVU701
 2469 0b28 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2470              	.LVL153:
 2471              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2472              		.loc 1 142 44 view .LVU702
 2473 0b2c 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2474 0b30 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2475              	.LVL154:
 143:armwave.c     ****     		}
 2476              		.loc 1 143 14 is_stmt 1 view .LVU703
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2477              		.loc 1 140 14 view .LVU704
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2478              		.loc 1 141 14 view .LVU705
 142:armwave.c     ****             	word >>= 8;
 2479              		.loc 1 142 14 view .LVU706
 2480              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2481              		.loc 1 140 42 is_stmt 0 view .LVU707
 2482 0b34 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2483              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2484              		.loc 1 141 60 view .LVU708
 2485 0b38 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2486              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2487              		.loc 1 142 44 view .LVU709
 2488 0b3c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2489              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2490              		.loc 1 141 60 view .LVU710
 2491 0b40 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2492              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2493              		.loc 1 142 44 view .LVU711
 2494 0b44 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2495              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2496              		.loc 1 141 60 view .LVU712
 2497 0b48 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2498              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2499              		.loc 1 120 37 view .LVU713
 2500 0b4c 041081E2 		add	r1, r1, #4	@ yy, yy,
 2501              	.LVL155:
 2502              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2503              		.loc 1 142 44 view .LVU714
 2504 0b50 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2505              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2506              		.loc 1 120 9 view .LVU715
 2507 0b54 010059E1 		cmp	r9, r1	@ _4, yy
 2508              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2509              		.loc 1 142 44 view .LVU716
 2510 0b58 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2511 0b5c 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2512              	.LVL156:
 143:armwave.c     ****     		}
 2513              		.loc 1 143 14 is_stmt 1 view .LVU717
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2514              		.loc 1 140 14 view .LVU718
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2515              		.loc 1 141 14 view .LVU719
 142:armwave.c     ****             	word >>= 8;
 2516              		.loc 1 142 14 view .LVU720
 2517              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2518              		.loc 1 140 42 is_stmt 0 view .LVU721
 2519 0b60 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2520              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2521              		.loc 1 141 60 view .LVU722
 2522 0b64 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2523              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2524              		.loc 1 142 44 view .LVU723
 2525 0b68 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2526 0b6c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2527 0b70 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2528 0b74 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2529 0b78 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****     		}
 2530              		.loc 1 143 14 is_stmt 1 view .LVU724
 2531              	.LVL157:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2532              		.loc 1 140 14 view .LVU725
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2533              		.loc 1 141 14 view .LVU726
 142:armwave.c     ****             	word >>= 8;
 2534              		.loc 1 142 14 view .LVU727
 2535              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2536              		.loc 1 140 42 is_stmt 0 view .LVU728
 2537 0b7c 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2538              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2539              		.loc 1 141 60 view .LVU729
 2540 0b80 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2541              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2542              		.loc 1 142 44 view .LVU730
 2543 0b84 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2544 0b88 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2545 0b8c 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2546 0b90 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2547 0b94 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****     		}
 2548              		.loc 1 143 14 is_stmt 1 view .LVU731
 2549              	.LVL158:
 2550              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2551              		.loc 1 120 9 is_stmt 0 view .LVU732
 2552 0b98 D6FFFF8A 		bhi	.L122		@,
 2553 0b9c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2554              	.LVL159:
 2555              	.L121:
 2556              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2557              		.loc 1 109 44 view .LVU733
 2558 0ba0 018088E2 		add	r8, r8, #1	@ w, w,
 2559              	.LVL160:
 2560              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2561              		.loc 1 109 5 view .LVU734
 2562 0ba4 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2563 0ba8 C9FFFF3A 		bcc	.L123		@,
 2564 0bac 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2565              	.LVL161:
 2566              	.L120:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2567              		.loc 1 109 5 view .LVU735
 2568              	.LBE14:
 2569              	.LBE15:
 2570              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2571              		.loc 1 399 28 discriminator 3 view .LVU736
 2572 0bb0 0510A0E1 		mov	r1, r5	@, _72
 2573 0bb4 020BA0E3 		mov	r0, #2048	@,
 2574              	.LVL162:
 399:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2575              		.loc 1 399 28 discriminator 3 view .LVU737
 2576 0bb8 FEFFFFEB 		bl	__aeabi_uidiv		@
 2577              	.LVL163:
 2578              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2579              		.loc 1 399 63 discriminator 3 view .LVU738
 2580 0bbc 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2581              	.LVL164:
 2582              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2583              		.loc 1 399 5 discriminator 3 view .LVU739
 2584 0bc0 0A0050E1 		cmp	r0, r10	@, yy
 2585 0bc4 B8FFFF8A 		bhi	.L124		@,
 2586              	.LVL165:
 2587              	.L118:
 2588              	@ armwave.c:402: }
 401:armwave.c     ****     }
 402:armwave.c     **** }
 2589              		.loc 1 402 1 view .LVU740
 2590 0bc8 0CD08DE2 		add	sp, sp, #12	@,,
 2591              		.cfi_def_cfa_offset 36
 2592              		@ sp needed	@
 2593 0bcc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2594              	.L137:
 2595              		.align	2
 2596              	.L136:
 2597 0bd0 00000000 		.word	g_armwave_state
 2598              		.cfi_endproc
 2599              	.LFE66:
 2601              		.align	2
 2602              		.global	armwave_test_get_buffer
 2603              		.syntax unified
 2604              		.arm
 2605              		.fpu vfp
 2607              	armwave_test_get_buffer:
 2608              	.LFB67:
 403:armwave.c     **** 
 404:armwave.c     **** PyObject *armwave_test_get_buffer()
 405:armwave.c     **** {
 2609              		.loc 1 405 1 is_stmt 1 view -0
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 0
 2612              		@ frame_needed = 0, uses_anonymous_args = 0
 406:armwave.c     ****     PyObject *mv;
 2613              		.loc 1 406 5 view .LVU742
 407:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2614              		.loc 1 407 5 view .LVU743
 2615              	@ armwave.c:405: {
 405:armwave.c     ****     PyObject *mv;
 2616              		.loc 1 405 1 is_stmt 0 view .LVU744
 2617 0bd4 30402DE9 		push	{r4, r5, lr}	@
 2618              		.cfi_def_cfa_offset 12
 2619              		.cfi_offset 4, -12
 2620              		.cfi_offset 5, -8
 2621              		.cfi_offset 14, -4
 2622              	@ armwave.c:407:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2623              		.loc 1 407 22 view .LVU745
 2624 0bd8 2C00A0E3 		mov	r0, #44	@,
 2625              	@ armwave.c:405: {
 405:armwave.c     ****     PyObject *mv;
 2626              		.loc 1 405 1 view .LVU746
 2627 0bdc 0CD04DE2 		sub	sp, sp, #12	@,,
 2628              		.cfi_def_cfa_offset 24
 2629              	@ armwave.c:407:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2630              		.loc 1 407 22 view .LVU747
 2631 0be0 FEFFFFEB 		bl	malloc		@
 2632              	.LVL166:
 2633              	@ armwave.c:409:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 408:armwave.c     ****     
 409:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2634              		.loc 1 409 5 view .LVU748
 2635 0be4 3C409FE5 		ldr	r4, .L140	@ tmp118,
 2636              	@ armwave.c:407:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 407:armwave.c     ****     
 2637              		.loc 1 407 22 view .LVU749
 2638 0be8 0050A0E1 		mov	r5, r0	@ tmp117,
 2639              	.LVL167:
 2640              		.loc 1 409 5 is_stmt 1 view .LVU750
 2641 0bec 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 2642              	.LVL168:
 2643              		.loc 1 409 5 is_stmt 0 view .LVU751
 2644 0bf0 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2645              	.LVL169:
 410:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2646              		.loc 1 410 5 is_stmt 1 view .LVU752
 2647              	@ armwave.c:410:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2648              		.loc 1 410 79 is_stmt 0 view .LVU753
 2649 0bf4 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2650              	@ armwave.c:410:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2651              		.loc 1 410 5 view .LVU754
 2652 0bf8 08C0A0E3 		mov	ip, #8	@ tmp125,
 2653 0bfc 0110A0E3 		mov	r1, #1	@ tmp126,
 2654 0c00 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2655 0c04 02108DE8 		stm	sp, {r1, ip}	@,,
 2656 0c08 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.out_pixbuf
 2657 0c0c 0500A0E1 		mov	r0, r5	@, tmp117
 2658 0c10 0010A0E3 		mov	r1, #0	@,
 2659 0c14 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2660              	.LVL170:
 411:armwave.c     **** 
 412:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2661              		.loc 1 412 2 is_stmt 1 view .LVU755
 2662              	@ armwave.c:412: 	mv = PyMemoryView_FromBuffer(buf);
 2663              		.loc 1 412 7 is_stmt 0 view .LVU756
 2664 0c18 0500A0E1 		mov	r0, r5	@, tmp117
 2665              	@ armwave.c:413: }
 413:armwave.c     **** }
 2666              		.loc 1 413 1 view .LVU757
 2667 0c1c 0CD08DE2 		add	sp, sp, #12	@,,
 2668              		.cfi_def_cfa_offset 12
 2669              		@ sp needed	@
 2670 0c20 3040BDE8 		pop	{r4, r5, lr}	@
 2671              		.cfi_restore 14
 2672              		.cfi_restore 5
 2673              		.cfi_restore 4
 2674              		.cfi_def_cfa_offset 0
 2675              	.LVL171:
 2676              	@ armwave.c:412: 	mv = PyMemoryView_FromBuffer(buf);
 412:armwave.c     **** }
 2677              		.loc 1 412 7 view .LVU758
 2678 0c24 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2679              	.LVL172:
 2680              	.L141:
 412:armwave.c     **** }
 2681              		.loc 1 412 7 view .LVU759
 2682              		.align	2
 2683              	.L140:
 2684 0c28 00000000 		.word	g_armwave_state
 2685              		.cfi_endproc
 2686              	.LFE67:
 2688              		.align	2
 2689              		.global	armwave_test_dump_buffer_to_ppm
 2690              		.syntax unified
 2691              		.arm
 2692              		.fpu vfp
 2694              	armwave_test_dump_buffer_to_ppm:
 2695              	.LVL173:
 2696              	.LFB68:
 414:armwave.c     **** 
 415:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 416:armwave.c     **** {
 2697              		.loc 1 416 1 is_stmt 1 view -0
 2698              		.cfi_startproc
 2699              		@ args = 0, pretend = 0, frame = 0
 2700              		@ frame_needed = 0, uses_anonymous_args = 0
 2701              		@ link register save eliminated.
 417:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2702              		.loc 1 417 2 view .LVU761
 2703 0c2c 08309FE5 		ldr	r3, .L143	@ tmp112,
 2704 0c30 0010A0E1 		mov	r1, r0	@, fn
 2705 0c34 440093E5 		ldr	r0, [r3, #68]	@, g_armwave_state.out_pixbuf
 2706              	.LVL174:
 2707              		.loc 1 417 2 is_stmt 0 view .LVU762
 2708 0c38 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2709              	.LVL175:
 2710              	.L144:
 2711              		.loc 1 417 2 view .LVU763
 2712              		.align	2
 2713              	.L143:
 2714 0c3c 00000000 		.word	g_armwave_state
 2715              		.cfi_endproc
 2716              	.LFE68:
 2718              		.align	2
 2719              		.global	armwave_cleanup
 2720              		.syntax unified
 2721              		.arm
 2722              		.fpu vfp
 2724              	armwave_cleanup:
 2725              	.LFB69:
 418:armwave.c     **** }
 419:armwave.c     **** 
 420:armwave.c     **** void armwave_cleanup()
 421:armwave.c     **** {
 2726              		.loc 1 421 1 is_stmt 1 view -0
 2727              		.cfi_startproc
 2728              		@ args = 0, pretend = 0, frame = 0
 2729              		@ frame_needed = 0, uses_anonymous_args = 0
 422:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2730              		.loc 1 422 2 view .LVU765
 2731              	@ armwave.c:421: {
 421:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2732              		.loc 1 421 1 is_stmt 0 view .LVU766
 2733 0c40 10402DE9 		push	{r4, lr}	@
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 4, -8
 2736              		.cfi_offset 14, -4
 2737              	@ armwave.c:422: 	free(g_armwave_state.out_pixbuf);
 2738              		.loc 1 422 22 view .LVU767
 2739 0c44 28409FE5 		ldr	r4, .L147	@ tmp113,
 2740              	@ armwave.c:422: 	free(g_armwave_state.out_pixbuf);
 2741              		.loc 1 422 2 view .LVU768
 2742 0c48 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 2743 0c4c FEFFFFEB 		bl	free		@
 2744              	.LVL176:
 423:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2745              		.loc 1 423 2 is_stmt 1 view .LVU769
 2746 0c50 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2747 0c54 FEFFFFEB 		bl	free		@
 2748              	.LVL177:
 424:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2749              		.loc 1 424 2 view .LVU770
 2750 0c58 600094E5 		ldr	r0, [r4, #96]	@, g_armwave_state.xcoord_to_xpixel
 2751 0c5c FEFFFFEB 		bl	free		@
 2752              	.LVL178:
 425:armwave.c     **** 
 426:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2753              		.loc 1 426 2 view .LVU771
 2754              	@ armwave.c:426: 	g_armwave_state.out_pixbuf = NULL;
 2755              		.loc 1 426 29 is_stmt 0 view .LVU772
 2756 0c60 0030A0E3 		mov	r3, #0	@ tmp120,
 2757 0c64 443084E5 		str	r3, [r4, #68]	@ tmp120, g_armwave_state.out_pixbuf
 427:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2758              		.loc 1 427 2 is_stmt 1 view .LVU773
 2759              	@ armwave.c:427: 	g_armwave_state.ch1_buffer = NULL;
 2760              		.loc 1 427 29 is_stmt 0 view .LVU774
 2761 0c68 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 428:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2762              		.loc 1 428 2 is_stmt 1 view .LVU775
 2763              	@ armwave.c:428: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2764              		.loc 1 428 35 is_stmt 0 view .LVU776
 2765 0c6c 603084E5 		str	r3, [r4, #96]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2766              	@ armwave.c:429: }
 429:armwave.c     **** }
 2767              		.loc 1 429 1 view .LVU777
 2768 0c70 1080BDE8 		pop	{r4, pc}	@
 2769              	.L148:
 2770              		.align	2
 2771              	.L147:
 2772 0c74 00000000 		.word	g_armwave_state
 2773              		.cfi_endproc
 2774              	.LFE69:
 2776              		.section	.text.startup,"ax",%progbits
 2777              		.align	2
 2778              		.global	main
 2779              		.syntax unified
 2780              		.arm
 2781              		.fpu vfp
 2783              	main:
 2784              	.LVL179:
 2785              	.LFB70:
 430:armwave.c     **** 
 431:armwave.c     **** int main(int argc, char *argv[])
 432:armwave.c     **** {
 2786              		.loc 1 432 1 is_stmt 1 view -0
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 8
 2789              		@ frame_needed = 0, uses_anonymous_args = 0
 433:armwave.c     ****     uint32_t *out_buffer;
 2790              		.loc 1 433 5 view .LVU779
 434:armwave.c     ****     uint32_t xx, yy, n;
 2791              		.loc 1 434 5 view .LVU780
 435:armwave.c     **** 
 436:armwave.c     ****     //printf("Starting armwave...\n");
 437:armwave.c     ****     armwave_init();
 2792              		.loc 1 437 5 view .LVU781
 2793              	.LBB20:
 2794              	.LBI20:
 151:armwave.c     **** {
 2795              		.loc 1 151 6 view .LVU782
 2796              	.LBB21:
 153:armwave.c     **** }
 2797              		.loc 1 153 5 view .LVU783
 2798              	.LBE21:
 2799              	.LBE20:
 2800              	@ armwave.c:432: {
 432:armwave.c     ****     uint32_t *out_buffer;
 2801              		.loc 1 432 1 is_stmt 0 view .LVU784
 2802 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2803              		.cfi_def_cfa_offset 36
 2804              		.cfi_offset 4, -36
 2805              		.cfi_offset 5, -32
 2806              		.cfi_offset 6, -28
 2807              		.cfi_offset 7, -24
 2808              		.cfi_offset 8, -20
 2809              		.cfi_offset 9, -16
 2810              		.cfi_offset 10, -12
 2811              		.cfi_offset 11, -8
 2812              		.cfi_offset 14, -4
 2813 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2814              		.cfi_def_cfa_offset 48
 2815              	.LBB25:
 2816              	.LBB22:
 2817              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2818              		.loc 1 153 27 view .LVU785
 2819 0008 68919FE5 		ldr	r9, .L169	@ tmp267,
 2820              	.LBE22:
 2821              	.LBE25:
 2822              	@ armwave.c:446:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 438:armwave.c     **** 
 439:armwave.c     ****     //printf("Creating test waveform...\n");
 440:armwave.c     ****     test_create_waveform();
 441:armwave.c     **** 
 442:armwave.c     ****     //printf("Creating gamma LUT...\n");
 443:armwave.c     ****     test_create_gamma();
 444:armwave.c     **** 
 445:armwave.c     ****     //printf("Setting up render...\n");
 446:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2823              		.loc 1 446 5 view .LVU786
 2824 000c 68219FE5 		ldr	r2, .L169+4	@ ivtmp_191,
 2825              	.LBB26:
 2826              	.LBB23:
 2827              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2828              		.loc 1 153 27 view .LVU787
 2829 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2830              	.LBE23:
 2831              	.LBE26:
 2832              	@ armwave.c:446:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2833              		.loc 1 446 5 view .LVU788
 2834 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2835              	.LBB27:
 2836              	.LBB24:
 2837              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2838              		.loc 1 153 27 view .LVU789
 2839 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2840              	.LBE24:
 2841              	.LBE27:
 440:armwave.c     **** 
 2842              		.loc 1 440 5 is_stmt 1 view .LVU790
 2843 001c FEFFFFEB 		bl	test_create_waveform		@
 2844              	.LVL180:
 443:armwave.c     **** 
 2845              		.loc 1 443 5 view .LVU791
 2846 0020 FEFFFFEB 		bl	test_create_gamma		@
 2847              	.LVL181:
 2848              		.loc 1 446 5 view .LVU792
 2849 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2850              	.LVL182:
 447:armwave.c     **** 
 448:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 449:armwave.c     **** 
 450:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2851              		.loc 1 450 5 view .LVU793
 2852              		.loc 1 450 5 is_stmt 0 view .LVU794
 2853 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2854              	.LVL183:
 2855              	.L150:
 2856              	@ armwave.c:451:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 451:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2857              		.loc 1 451 9 view .LVU795
 2858 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2859 0030 4900008A 		bhi	.L158		@,
 2860 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2861              	@ armwave.c:451:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2862              		.loc 1 451 16 view .LVU796
 2863 0038 0080A0E3 		mov	r8, #0	@ yy,
 2864 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2865              	.LVL184:
 2866              	.L155:
 452:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 453:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2867              		.loc 1 453 13 is_stmt 1 discriminator 3 view .LVU797
 2868 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2869              	.LBB28:
 2870              	.LBB29:
 2871              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2872              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU798
 2873 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2874              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2875              		.loc 1 109 5 discriminator 3 view .LVU799
 2876 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2877              	.LBE29:
 2878              	.LBE28:
 2879              	@ armwave.c:453:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2880              		.loc 1 453 13 discriminator 3 view .LVU800
 2881 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2882              	.LVL185:
 2883              	.LBB31:
 2884              	.LBI28:
  98:armwave.c     **** {
 2885              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU801
 2886              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 2887              		.loc 1 100 5 discriminator 3 view .LVU802
 101:armwave.c     ****     uint8_t *wave_base;
 2888              		.loc 1 101 5 discriminator 3 view .LVU803
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2889              		.loc 1 102 5 discriminator 3 view .LVU804
 103:armwave.c     ****     uint8_t *write_buffer;
 2890              		.loc 1 103 5 discriminator 3 view .LVU805
 104:armwave.c     ****     
 2891              		.loc 1 104 5 discriminator 3 view .LVU806
 106:armwave.c     **** 
 2892              		.loc 1 106 5 discriminator 3 view .LVU807
 2893              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2894              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU808
 2895 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2896              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2897              		.loc 1 106 40 discriminator 3 view .LVU809
 2898 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2899              	.LVL186:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2900              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU810
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2901              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU811
 2902 0058 3900000A 		beq	.L151		@,
 2903              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2904              		.loc 1 109 11 view .LVU812
 2905 005c 0070A0E3 		mov	r7, #0	@ w,
 2906 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2907              	.LVL187:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2908              		.loc 1 109 11 view .LVU813
 2909 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2910              	.LVL188:
 2911              	.L154:
 110:armwave.c     **** 
 2912              		.loc 1 110 9 is_stmt 1 view .LVU814
 2913              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2914              		.loc 1 110 64 is_stmt 0 view .LVU815
 2915 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2916              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2917              		.loc 1 120 9 view .LVU816
 2918 006c 00005AE3 		cmp	r10, #0	@ _2,
 2919              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2920              		.loc 1 110 36 view .LVU817
 2921 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2922              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2923              		.loc 1 110 64 view .LVU818
 2924 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2925              	.LVL189:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2926              		.loc 1 120 9 is_stmt 1 view .LVU819
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2927              		.loc 1 120 9 is_stmt 0 view .LVU820
 2928 0078 2D00000A 		beq	.L152		@,
 2929 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2930 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2931              	.LVL190:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2932              		.loc 1 120 9 view .LVU821
 2933 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.110, _20, tmp202
 2934              	.LVL191:
 2935              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2936              		.loc 1 120 16 view .LVU822
 2937 0088 0010A0E3 		mov	r1, #0	@ yy,
 2938              	.LVL192:
 2939              	.L153:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2940              		.loc 1 135 13 is_stmt 1 view .LVU823
 2941              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2942              		.loc 1 135 18 is_stmt 0 view .LVU824
 2943 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2944              	.LVL193:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2945              		.loc 1 139 13 is_stmt 1 view .LVU825
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2946              		.loc 1 140 14 view .LVU826
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2947              		.loc 1 141 14 view .LVU827
 142:armwave.c     ****             	word >>= 8;
 2948              		.loc 1 142 14 view .LVU828
 2949              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2950              		.loc 1 140 42 is_stmt 0 view .LVU829
 2951 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2952              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2953              		.loc 1 141 60 view .LVU830
 2954 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2955              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2956              		.loc 1 140 34 view .LVU831
 2957 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2958              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2959              		.loc 1 143 19 view .LVU832
 2960 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2961              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2962              		.loc 1 142 44 view .LVU833
 2963 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2964              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2965              		.loc 1 140 34 view .LVU834
 2966 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2967              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2968              		.loc 1 142 44 view .LVU835
 2969 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2970              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2971              		.loc 1 141 60 view .LVU836
 2972 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2973              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2974              		.loc 1 143 19 view .LVU837
 2975 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2976              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2977              		.loc 1 142 44 view .LVU838
 2978 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2979              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2980              		.loc 1 140 34 view .LVU839
 2981 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2982              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2983              		.loc 1 143 19 view .LVU840
 2984 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2985              	.LVL194:
 2986              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2987              		.loc 1 142 44 view .LVU841
 2988 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2989 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2990              	.LVL195:
 143:armwave.c     ****     		}
 2991              		.loc 1 143 14 is_stmt 1 view .LVU842
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2992              		.loc 1 140 14 view .LVU843
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2993              		.loc 1 141 14 view .LVU844
 142:armwave.c     ****             	word >>= 8;
 2994              		.loc 1 142 14 view .LVU845
 2995              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2996              		.loc 1 140 42 is_stmt 0 view .LVU846
 2997 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2998              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2999              		.loc 1 141 60 view .LVU847
 3000 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 3001              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 3002              		.loc 1 142 44 view .LVU848
 3003 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 3004              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 3005              		.loc 1 141 60 view .LVU849
 3006 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3007              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 3008              		.loc 1 142 44 view .LVU850
 3009 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 3010              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 3011              		.loc 1 141 60 view .LVU851
 3012 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 3013              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3014              		.loc 1 120 37 view .LVU852
 3015 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 3016              	.LVL196:
 3017              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 3018              		.loc 1 142 44 view .LVU853
 3019 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 3020              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3021              		.loc 1 120 9 view .LVU854
 3022 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 3023              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 3024              		.loc 1 142 44 view .LVU855
 3025 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 3026 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 3027              	.LVL197:
 143:armwave.c     ****     		}
 3028              		.loc 1 143 14 is_stmt 1 view .LVU856
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3029              		.loc 1 140 14 view .LVU857
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 3030              		.loc 1 141 14 view .LVU858
 142:armwave.c     ****             	word >>= 8;
 3031              		.loc 1 142 14 view .LVU859
 3032              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3033              		.loc 1 140 42 is_stmt 0 view .LVU860
 3034 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3035              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 3036              		.loc 1 141 60 view .LVU861
 3037 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3038              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 3039              		.loc 1 142 44 view .LVU862
 3040 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 3041 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 3042 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 3043 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 3044 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****     		}
 3045              		.loc 1 143 14 is_stmt 1 view .LVU863
 3046              	.LVL198:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3047              		.loc 1 140 14 view .LVU864
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 3048              		.loc 1 141 14 view .LVU865
 142:armwave.c     ****             	word >>= 8;
 3049              		.loc 1 142 14 view .LVU866
 3050              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3051              		.loc 1 140 42 is_stmt 0 view .LVU867
 3052 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3053              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 3054              		.loc 1 141 60 view .LVU868
 3055 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3056              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 3057              		.loc 1 142 44 view .LVU869
 3058 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 3059 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 3060 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 3061 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 3062 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****     		}
 3063              		.loc 1 143 14 is_stmt 1 view .LVU870
 3064              	.LVL199:
 3065              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3066              		.loc 1 120 9 is_stmt 0 view .LVU871
 3067 012c D6FFFF8A 		bhi	.L153		@,
 3068 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3069              	.LVL200:
 3070              	.L152:
 3071              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3072              		.loc 1 109 44 view .LVU872
 3073 0134 017087E2 		add	r7, r7, #1	@ w, w,
 3074              	.LVL201:
 3075              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3076              		.loc 1 109 5 view .LVU873
 3077 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 3078 013c C9FFFF3A 		bcc	.L154		@,
 3079 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3080              	.LVL202:
 3081              	.L151:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3082              		.loc 1 109 5 view .LVU874
 3083              	.LBE30:
 3084              	.LBE31:
 3085              	@ armwave.c:451:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 451:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3086              		.loc 1 451 32 discriminator 3 view .LVU875
 3087 0144 0510A0E1 		mov	r1, r5	@, _61
 3088 0148 020BA0E3 		mov	r0, #2048	@,
 3089              	.LVL203:
 451:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3090              		.loc 1 451 32 discriminator 3 view .LVU876
 3091 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 3092              	.LVL204:
 3093              	@ armwave.c:451:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 451:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3094              		.loc 1 451 67 discriminator 3 view .LVU877
 3095 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 3096              	.LVL205:
 3097              	@ armwave.c:451:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 451:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3098              		.loc 1 451 9 discriminator 3 view .LVU878
 3099 0154 080050E1 		cmp	r0, r8	@, yy
 3100 0158 B8FFFF8A 		bhi	.L155		@,
 3101              	.LVL206:
 3102              	.L158:
 3103              	@ armwave.c:450:     for(n = 0; n < 5000; n++) {
 450:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3104              		.loc 1 450 5 discriminator 2 view .LVU879
 3105 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 3106 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 3107 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 3108 0168 AFFFFF1A 		bne	.L150		@,
 3109 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 454:armwave.c     ****         }
 455:armwave.c     ****     }
 456:armwave.c     **** 
 457:armwave.c     ****     /*
 458:armwave.c     ****     printf("Creating pixbuf\n");
 459:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 460:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 461:armwave.c     **** 
 462:armwave.c     ****     printf("Dumping pixbuf\n");
 463:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 464:armwave.c     ****     */
 465:armwave.c     **** 
 466:armwave.c     ****     return 0;
 3110              		.loc 1 466 5 is_stmt 1 view .LVU880
 3111              	@ armwave.c:467: }
 467:armwave.c     **** }...
 3112              		.loc 1 467 1 is_stmt 0 view .LVU881
 3113 0170 0CD08DE2 		add	sp, sp, #12	@,,
 3114              		.cfi_def_cfa_offset 36
 3115              		@ sp needed	@
 3116 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3117              	.L170:
 3118              		.align	2
 3119              	.L169:
 3120 0178 00000000 		.word	g_armwave_state
 3121 017c 88130000 		.word	5000
 3122              		.cfi_endproc
 3123              	.LFE70:
 3125              		.global	mod_depth
 3126              		.global	overall_scale
 3127              		.comm	gamma_table,256,4
 3128              		.comm	test_wave_buffer,131072,4
 3129              		.comm	g_armwave_state,100,4
 3130              		.section	.rodata
 3131              		.align	2
 3132              		.set	.LANCHOR0,. + 0
 3135              	__PRETTY_FUNCTION__.16997:
 3136 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3136      6176655F 
 3136      73657475 
 3136      705F7265 
 3136      6E646572 
 3137 0015 000000   		.space	3
 3140              	__PRETTY_FUNCTION__.17027:
 3141 0018 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 3141      6176655F 
 3141      66696C6C 
 3141      5F706978 
 3141      62756632 
 3142 002d 000000   		.space	3
 3145              	overall_scale:
 3146 0030 00002041 		.word	1092616192
 3147              		.bss
 3148              		.align	2
 3149              		.set	.LANCHOR1,. + 0
 3152              	mod_depth:
 3153 0000 00000000 		.space	4
 3154              		.section	.rodata.str1.4,"aMS",%progbits,1
 3155              		.align	2
 3156              	.LC0:
 3157 0000 61726D77 		.ascii	"armwave.c\000"
 3157      6176652E 
 3157      6300
 3158 000a 0000     		.space	2
 3159              	.LC1:
 3160 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3160      6D776176 
 3160      655F7374 
 3160      6174652E 
 3160      6368315F 
 3161 002f 00       		.space	1
 3162              	.LC2:
 3163 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3163      6D776176 
 3163      655F7374 
 3163      6174652E 
 3163      78636F6F 
 3164 0059 000000   		.space	3
 3165              	.LC3:
 3166 005c 73746172 		.ascii	"start_point < end_point\000"
 3166      745F706F 
 3166      696E7420 
 3166      3C20656E 
 3166      645F706F 
 3167              	.LC4:
 3168 0074 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3168      65745F68 
 3168      65696768 
 3168      74203D3D 
 3168      20323536 
 3169 00a7 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3169      68656967 
 3169      6874203D 
 3169      3D203130 
 3169      3234207C 
 3170 00d3 00       		.space	1
 3171              	.LC5:
 3172 00d4 6F75745F 		.ascii	"out_buffer != NULL\000"
 3172      62756666 
 3172      65722021 
 3172      3D204E55 
 3172      4C4C00
 3173 00e7 00       		.space	1
 3174              	.LC6:
 3175 00e8 776200   		.ascii	"wb\000"
 3176 00eb 00       		.space	1
 3177              	.LC7:
 3178 00ec 50330A00 		.ascii	"P3\012\000"
 3179              	.LC8:
 3180 00f0 25642025 		.ascii	"%d %d\012\000"
 3180      640A00
 3181 00f7 00       		.space	1
 3182              	.LC9:
 3183 00f8 3235350A 		.ascii	"255\012\000"
 3183      00
 3184 00fd 000000   		.space	3
 3185              	.LC10:
 3186 0100 25336420 		.ascii	"%3d %3d %3d\012\000"
 3186      25336420 
 3186      2533640A 
 3186      00
 3187 010d 000000   		.space	3
 3188              	.LC11:
 3189 0110 76302E30 		.ascii	"v0.0.1\000"
 3189      2E3100
 3190 0117 00       		.space	1
 3191              	.LC12:
 3192 0118 61726D77 		.ascii	"armwave version: %s\012\000"
 3192      61766520 
 3192      76657273 
 3192      696F6E3A 
 3192      2025730A 
 3193              		.text
 3194              	.Letext0:
 3195              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3196              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3197              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3198              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3199              		.file 6 "/usr/include/stdio.h"
 3200              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3201              		.file 8 "/usr/include/errno.h"
 3202              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3203              		.file 10 "/usr/include/unistd.h"
 3204              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3205              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3206              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3207              		.file 14 "/usr/include/math.h"
 3208              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3209              		.file 16 "/usr/include/time.h"
 3210              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3211              		.file 18 "/usr/local/include/python3.8/object.h"
 3212              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3213              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3214              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3215              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3216              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3217              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3218              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3219              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3220              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3221              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3222              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3223              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3224              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3225              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3226              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3227              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3228              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3229              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3230              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3231              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3232              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3233              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3234              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3235              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3236              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3237              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3238              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3239              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3240              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3241              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3242              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3243              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3244              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3245              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3246              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3247              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3248              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3249              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3250              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3251              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3252              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3253              		.file 60 "/usr/local/include/python3.8/context.h"
 3254              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3255              		.file 62 "/usr/local/include/python3.8/code.h"
 3256              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3257              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3258              		.file 65 "/usr/local/include/python3.8/import.h"
 3259              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3260              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3261              		.file 68 "armwave.h"
 3262              		.file 69 "/usr/include/stdlib.h"
 3263              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 3264              		.file 71 "<built-in>"
 3265              		.file 72 "/usr/include/assert.h"
 3266              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
