   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 48319FE5 		ldr	r3, .L21	@ tmp189,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 1CD04DE2 		sub	sp, sp, #28	@,,
 252              		.cfi_def_cfa_offset 64
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 247093E5 		ldr	r7, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 257              		.loc 1 79 35 view .LVU34
 258 00ac 382093E5 		ldr	r2, [r3, #56]	@ _135, g_armwave_state.waves
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 260              		.loc 1 71 147 view .LVU35
 261 00b0 405093E5 		ldr	r5, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 900704E0 		mul	r4, r0, r7	@ tmp192, slice_y, _2
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ _135,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01C0A0E1 		mov	ip, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2448A0E1 		lsr	r4, r4, #16	@ tmp193, tmp192,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 00108DE5 		str	r1, [sp]	@ height, %sfp
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU41
 279 00c8 0C208DE5 		str	r2, [sp, #12]	@ _135, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 041093E5 		ldr	r1, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 285              		.loc 1 71 130 view .LVU43
 286 00d0 950404E0 		mul	r4, r5, r4	@ _7, _6, tmp193
 287              	.LVL8:
 288              		.loc 1 79 5 is_stmt 1 view .LVU44
 289              		.loc 1 79 5 is_stmt 0 view .LVU45
 290 00d4 420000DA 		ble	.L11		@,
 291              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 292              		.loc 1 80 36 view .LVU46
 293 00d8 142093E5 		ldr	r2, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 294              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 295              		.loc 1 80 81 view .LVU47
 296 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 297 00e0 00005CE3 		cmp	ip, #0	@ height,
 298 00e4 10308DE5 		str	r3, [sp, #16]	@ _9, %sfp
 299 00e8 3D00000A 		beq	.L11		@,
 300 00ec 003082E0 		add	r3, r2, r0	@ ivtmp.48, _8, slice_y
 301 00f0 8720A0E1 		lsl	r2, r7, #1	@ tmp239, _2,
 302 00f4 078082E0 		add	r8, r2, r7	@ tmp237, tmp239, _2
 303 00f8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.48, %sfp
 304 00fc 00B063E2 		rsb	fp, r3, #0	@ ivtmp.49, ivtmp.48
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 306              		.loc 1 79 11 view .LVU48
 307 0100 0030A0E3 		mov	r3, #0	@ w,
 308 0104 14208DE5 		str	r2, [sp, #20]	@ tmp239, %sfp
 309 0108 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 310              	.LVL9:
 311              	.L14:
 312              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 313              		.loc 1 84 9 view .LVU50
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 315              		.loc 1 79 11 is_stmt 0 view .LVU51
 316 010c 14E09DE5 		ldr	lr, [sp, #20]	@ ivtmp.44, %sfp
 317 0110 04609DE5 		ldr	r6, [sp, #4]	@ ivtmp.41, %sfp
 318 0114 00C0A0E3 		mov	ip, #0	@ ivtmp.42,
 319              	.LVL10:
 320              	.L13:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 321              		.loc 1 87 13 is_stmt 1 view .LVU52
 322              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 103 74 is_stmt 0 view .LVU53
 324 0118 2C28A0E1 		lsr	r2, ip, #16	@ tmp197, ivtmp.42,
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 view .LVU54
 327 011c 043096E4 		ldr	r3, [r6], #4	@ word, MEM[base: _264, offset: 0B]
 328              	.LVL11:
  89:armwave.c     ****                 scale_value = word & 0xff;
 329              		.loc 1 89 13 is_stmt 1 view .LVU55
  90:armwave.c     ****                 
 330              		.loc 1 90 17 view .LVU56
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 17 view .LVU57
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 332              		.loc 1 107 17 view .LVU58
 333              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 107 47 is_stmt 0 view .LVU59
 335 0120 954222E0 		mla	r2, r5, r2, r4	@ tmp199, _6, tmp197, _7
 336              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 337              		.loc 1 103 34 view .LVU60
 338 0124 0CC087E0 		add	ip, r7, ip	@ _78, _2, ivtmp.42
 339              	.LVL12:
 340              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 341              		.loc 1 107 47 view .LVU61
 342 0128 7320E2E6 		uxtab	r2, r2, r3	@ tmp201, tmp199, word
 343              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 344              		.loc 1 103 74 view .LVU62
 345 012c 2C08A0E1 		lsr	r0, ip, #16	@ tmp206, _78,
 346              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 347              		.loc 1 107 47 view .LVU63
 348 0130 8220A0E1 		lsl	r2, r2, #1	@ tmp202, tmp201,
 349 0134 954020E0 		mla	r0, r5, r0, r4	@ tmp208, _6, tmp206, _7
 350              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 351              		.loc 1 108 22 view .LVU64
 352 0138 23A4A0E1 		lsr	r10, r3, #8	@ word, word,
 353              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 354              		.loc 1 107 47 view .LVU65
 355 013c B29091E1 		ldrh	r9, [r1, r2]	@ *_63, *_63
 356 0140 7A00E0E6 		uxtab	r0, r0, r10	@ tmp211, tmp208, word
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 74 view .LVU66
 359 0144 2EA8A0E1 		lsr	r10, lr, #16	@ tmp216, ivtmp.44,
 360              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 361              		.loc 1 107 47 view .LVU67
 362 0148 019089E2 		add	r9, r9, #1	@ tmp205, *_63,
 363 014c 954A2AE0 		mla	r10, r5, r10, r4	@ tmp218, _6, tmp216, _7
 364 0150 B29081E1 		strh	r9, [r1, r2]	@ movhi	@ tmp205, *_63
 365              		.loc 1 108 17 is_stmt 1 view .LVU68
 366              	.LVL13:
  90:armwave.c     ****                 
 367              		.loc 1 90 17 view .LVU69
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 368              		.loc 1 102 17 view .LVU70
 107:armwave.c     ****                 word >>= 8;
 369              		.loc 1 107 17 view .LVU71
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 34 is_stmt 0 view .LVU72
 372 0154 0EE087E0 		add	lr, r7, lr	@ _122, _2, ivtmp.44
 373              	@ armwave.c:108:                 word >>= 8;
 374              		.loc 1 108 22 view .LVU73
 375 0158 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU74
 378 015c 8000A0E1 		lsl	r0, r0, #1	@ tmp212, tmp211,
 379 0160 7220EAE6 		uxtab	r2, r10, r2	@ tmp221, tmp218, word
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 74 view .LVU75
 382 0164 2EA8A0E1 		lsr	r10, lr, #16	@ tmp226, _122,
 383              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 384              		.loc 1 107 47 view .LVU76
 385 0168 B09091E1 		ldrh	r9, [r1, r0]	@ *_85, *_85
 386              	@ armwave.c:108:                 word >>= 8;
 387              		.loc 1 108 22 view .LVU77
 388 016c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 389              	.LVL14:
 390              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 391              		.loc 1 107 47 view .LVU78
 392 0170 953A23E0 		mla	r3, r5, r10, r3	@ tmp229, _6, tmp226, word
 393 0174 8220A0E1 		lsl	r2, r2, #1	@ tmp222, tmp221,
 394 0178 019089E2 		add	r9, r9, #1	@ tmp215, *_85,
 395 017c B09081E1 		strh	r9, [r1, r0]	@ movhi	@ tmp215, *_85
 396              		.loc 1 108 17 is_stmt 1 view .LVU79
 397              	.LVL15:
  90:armwave.c     ****                 
 398              		.loc 1 90 17 view .LVU80
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 399              		.loc 1 102 17 view .LVU81
 107:armwave.c     ****                 word >>= 8;
 400              		.loc 1 107 17 view .LVU82
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 is_stmt 0 view .LVU83
 403 0180 043083E0 		add	r3, r3, r4	@ tmp230, tmp229, _7
 404 0184 B20091E1 		ldrh	r0, [r1, r2]	@ *_107, *_107
 405 0188 8330A0E1 		lsl	r3, r3, #1	@ tmp231, tmp230,
 406              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 407              		.loc 1 84 9 view .LVU84
 408 018c 00909DE5 		ldr	r9, [sp]	@ height, %sfp
 409              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 47 view .LVU85
 411 0190 010080E2 		add	r0, r0, #1	@ tmp225, *_107,
 412 0194 B20081E1 		strh	r0, [r1, r2]	@ movhi	@ tmp225, *_107
 413              		.loc 1 108 17 is_stmt 1 view .LVU86
 414              	.LVL16:
  90:armwave.c     ****                 
 415              		.loc 1 90 17 view .LVU87
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 416              		.loc 1 102 17 view .LVU88
 107:armwave.c     ****                 word >>= 8;
 417              		.loc 1 107 17 view .LVU89
 418              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 419              		.loc 1 107 47 is_stmt 0 view .LVU90
 420 0198 B32091E1 		ldrh	r2, [r1, r3]	@ *_129, *_129
 421              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 422              		.loc 1 84 9 view .LVU91
 423 019c 06008BE0 		add	r0, fp, r6	@ tmp238, ivtmp.49, ivtmp.41
 424 01a0 000059E1 		cmp	r9, r0	@ height, tmp238
 425              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 426              		.loc 1 107 47 view .LVU92
 427 01a4 012082E2 		add	r2, r2, #1	@ tmp234, *_129,
 428 01a8 08C08CE0 		add	ip, ip, r8	@ ivtmp.42, _78, tmp237
 429 01ac 08E08EE0 		add	lr, lr, r8	@ ivtmp.44, _122, tmp237
 430              	.LVL17:
 107:armwave.c     ****                 word >>= 8;
 431              		.loc 1 107 47 view .LVU93
 432 01b0 B32081E1 		strh	r2, [r1, r3]	@ movhi	@ tmp234, *_129
 433              		.loc 1 108 17 is_stmt 1 view .LVU94
 434              	.LVL18:
 435              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 436              		.loc 1 84 9 is_stmt 0 view .LVU95
 437 01b4 D7FFFF8A 		bhi	.L13		@,
 438              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 439              		.loc 1 79 44 view .LVU96
 440 01b8 08309DE5 		ldr	r3, [sp, #8]	@ w, %sfp
 441              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 442              		.loc 1 79 5 view .LVU97
 443 01bc 0C209DE5 		ldr	r2, [sp, #12]	@ _135, %sfp
 444              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 445              		.loc 1 79 44 view .LVU98
 446 01c0 013083E2 		add	r3, r3, #1	@ w, w,
 447              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 448              		.loc 1 79 5 view .LVU99
 449 01c4 020053E1 		cmp	r3, r2	@ w, _135
 450              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 451              		.loc 1 79 44 view .LVU100
 452 01c8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 453              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 454              		.loc 1 79 44 view .LVU101
 455 01cc 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.48, %sfp
 456 01d0 10309DE5 		ldr	r3, [sp, #16]	@ _9, %sfp
 457              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 458              		.loc 1 79 44 view .LVU102
 459 01d4 032082E0 		add	r2, r2, r3	@ ivtmp.48, ivtmp.48, _9
 460 01d8 04208DE5 		str	r2, [sp, #4]	@ ivtmp.48, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 461              		.loc 1 79 44 view .LVU103
 462 01dc 03B04BE0 		sub	fp, fp, r3	@ ivtmp.49, ivtmp.49, _9
 463              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 464              		.loc 1 79 5 view .LVU104
 465 01e0 C9FFFF1A 		bne	.L14		@,
 466              	.LVL21:
 467              	.L11:
 468              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 469              		.loc 1 112 1 view .LVU105
 470 01e4 1CD08DE2 		add	sp, sp, #28	@,,
 471              		.cfi_def_cfa_offset 36
 472              	.LVL22:
 473              		.loc 1 112 1 view .LVU106
 474              		@ sp needed	@
 475 01e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 476              	.LVL23:
 477              	.L22:
 478              		.loc 1 112 1 view .LVU107
 479              		.align	2
 480              	.L21:
 481 01ec 00000000 		.word	g_armwave_state
 482              		.cfi_endproc
 483              	.LFE59:
 485              		.align	2
 486              		.global	armwave_fill_pixbuf_scaled
 487              		.syntax unified
 488              		.arm
 489              		.fpu vfp
 491              	armwave_fill_pixbuf_scaled:
 492              	.LVL24:
 493              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 494              		.loc 1 119 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 8
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 498              		.loc 1 120 5 view .LVU109
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 499              		.loc 1 122 5 view .LVU110
 123:armwave.c     ****     uint8_t r, g, b;
 500              		.loc 1 123 5 view .LVU111
 124:armwave.c     ****     int value; 
 501              		.loc 1 124 5 view .LVU112
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 502              		.loc 1 126 5 view .LVU113
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 503              		.loc 1 127 5 view .LVU114
 128:armwave.c     ****     uint32_t offset;
 504              		.loc 1 128 5 view .LVU115
 129:armwave.c     **** 
 130:armwave.c     ****     if(out_buffer == NULL)
 505              		.loc 1 130 5 view .LVU116
 506              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 507              		.loc 1 119 1 is_stmt 0 view .LVU117
 508 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_def_cfa_offset 36
 510              		.cfi_offset 4, -36
 511              		.cfi_offset 5, -32
 512              		.cfi_offset 6, -28
 513              		.cfi_offset 7, -24
 514              		.cfi_offset 8, -20
 515              		.cfi_offset 9, -16
 516              		.cfi_offset 10, -12
 517              		.cfi_offset 11, -8
 518              		.cfi_offset 14, -4
 519              	@ armwave.c:130:     if(out_buffer == NULL)
 520              		.loc 1 130 7 view .LVU118
 521 01f4 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 522              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 523              		.loc 1 119 1 view .LVU119
 524 01f8 0CD04DE2 		sub	sp, sp, #12	@,,
 525              		.cfi_def_cfa_offset 48
 526              	@ armwave.c:130:     if(out_buffer == NULL)
 527              		.loc 1 130 7 view .LVU120
 528 01fc 1A00000A 		beq	.L23		@,
 529              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 530              		.loc 1 126 15 view .LVU121
 531 0200 54519FE5 		ldr	r5, .L44	@ tmp221,
 532              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     ****         return;
 132:armwave.c     **** 
 133:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 134:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 533              		.loc 1 134 5 view .LVU122
 534 0204 0010A0E3 		mov	r1, #0	@,
 535              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 536              		.loc 1 134 59 view .LVU123
 537 0208 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 538 020c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 539              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 540              		.loc 1 126 15 view .LVU124
 541 0210 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 542              		.loc 1 134 5 is_stmt 1 view .LVU125
 543              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 544              		.loc 1 134 59 is_stmt 0 view .LVU126
 545 0214 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 546              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 547              		.loc 1 134 5 view .LVU127
 548 0218 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 549 021c FEFFFFEB 		bl	memset		@
 550              	.LVL25:
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 551              		.loc 1 136 5 is_stmt 1 view .LVU128
 552              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 553              		.loc 1 136 10 is_stmt 0 view .LVU129
 554 0220 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 555 0224 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 556 0228 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 557              	.LVL26:
 137:armwave.c     ****     
 138:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 558              		.loc 1 138 5 is_stmt 1 view .LVU130
 559              		.loc 1 138 5 is_stmt 0 view .LVU131
 560 022c 000050E3 		cmp	r0, #0	@ npix,
 561 0230 0D0000DA 		ble	.L23		@,
 562              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 139:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 140:armwave.c     ****         wave_word = *base_32ptr++;
 141:armwave.c     **** 
 142:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 143:armwave.c     ****             for(w = 0; w < 2; w++) {
 144:armwave.c     ****                 value = wave_word & 0xffff;
 145:armwave.c     ****                 wave_word >>= 16;
 146:armwave.c     **** 
 147:armwave.c     ****                 if(value != 0) {
 148:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 149:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 563              		.loc 1 149 52 view .LVU132
 564 0234 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 565              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 148 52 view .LVU133
 567 0238 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 568              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 151:armwave.c     **** 
 152:armwave.c     ****                     r = MIN(rr, 255);
 153:armwave.c     ****                     g = MIN(gg, 255);
 154:armwave.c     ****                     b = MIN(bb, 255);
 155:armwave.c     **** 
 156:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 157:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 158:armwave.c     **** 
 159:armwave.c     ****                     // Plot the pixels
 160:armwave.c     ****                     nsub = n + w;
 161:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 569              		.loc 1 161 57 view .LVU134
 570 023c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 571              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 572              		.loc 1 149 52 view .LVU135
 573 0240 00308DE5 		str	r3, [sp]	@ _16, %sfp
 574              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 575              		.loc 1 150 52 view .LVU136
 576 0244 F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 577 0248 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 578              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 579              		.loc 1 138 11 view .LVU137
 580 024c 0030A0E3 		mov	r3, #0	@ n,
 581              	.LVL27:
 582              	.L29:
 140:armwave.c     **** 
 583              		.loc 1 140 9 is_stmt 1 view .LVU138
 584              	@ armwave.c:140:         wave_word = *base_32ptr++;
 140:armwave.c     **** 
 585              		.loc 1 140 19 is_stmt 0 view .LVU139
 586 0250 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 587              	.LVL28:
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 588              		.loc 1 142 9 is_stmt 1 view .LVU140
 589              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 590              		.loc 1 142 11 is_stmt 0 view .LVU141
 591 0254 000052E3 		cmp	r2, #0	@ wave_word,
 592              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 593              		.loc 1 143 19 view .LVU142
 594 0258 0080A013 		movne	r8, #0	@ w,
 595              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 596              		.loc 1 142 11 view .LVU143
 597 025c 0400001A 		bne	.L28		@,
 598              	.L25:
 599              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 600              		.loc 1 138 28 view .LVU144
 601 0260 023083E2 		add	r3, r3, #2	@ n, n,
 602              	.LVL29:
 603              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 604              		.loc 1 138 5 view .LVU145
 605 0264 030050E1 		cmp	r0, r3	@ npix, n
 606 0268 F8FFFFCA 		bgt	.L29		@,
 607              	.LVL30:
 608              	.L23:
 609              	@ armwave.c:173: }
 162:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     xx = (nsub >> 8) / 2;
 164:armwave.c     **** 
 165:armwave.c     ****                     for(y = yy; y < ye; y++) {
 166:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 167:armwave.c     ****                         *(out_buffer_base + offset) = word;
 168:armwave.c     ****                     }
 169:armwave.c     ****                 }
 170:armwave.c     ****             }
 171:armwave.c     ****         }
 172:armwave.c     ****     }
 173:armwave.c     **** }
 610              		.loc 1 173 1 view .LVU146
 611 026c 0CD08DE2 		add	sp, sp, #12	@,,
 612              		.cfi_remember_state
 613              		.cfi_def_cfa_offset 36
 614              		@ sp needed	@
 615 0270 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 616              	.LVL31:
 617              	.L28:
 618              		.cfi_restore_state
 144:armwave.c     ****                 wave_word >>= 16;
 619              		.loc 1 144 17 is_stmt 1 view .LVU147
 620              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 621              		.loc 1 144 23 is_stmt 0 view .LVU148
 622 0274 7290FFE6 		uxth	r9, r2	@ value, wave_word
 623              	.LVL32:
 145:armwave.c     **** 
 624              		.loc 1 145 17 is_stmt 1 view .LVU149
 625              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 626              		.loc 1 147 19 is_stmt 0 view .LVU150
 627 0278 000059E3 		cmp	r9, #0	@ value,
 628              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 629              		.loc 1 145 27 view .LVU151
 630 027c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 631              	.LVL33:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 147 17 is_stmt 1 view .LVU152
 633              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 634              		.loc 1 147 19 is_stmt 0 view .LVU153
 635 0280 0600001A 		bne	.L43		@,
 636              	.LVL34:
 637              	.L26:
 638              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 639              		.loc 1 143 13 view .LVU154
 640 0284 010058E3 		cmp	r8, #1	@ w,
 641 0288 F4FFFF0A 		beq	.L25		@,
 642              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 643              		.loc 1 144 23 view .LVU155
 644 028c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 645              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 646              		.loc 1 147 19 view .LVU156
 647 0290 000059E3 		cmp	r9, #0	@ value,
 648 0294 0180A0E3 		mov	r8, #1	@ w,
 649              	.LVL35:
 144:armwave.c     ****                 wave_word >>= 16;
 650              		.loc 1 144 17 is_stmt 1 view .LVU157
 145:armwave.c     **** 
 651              		.loc 1 145 17 view .LVU158
 652              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 653              		.loc 1 145 27 is_stmt 0 view .LVU159
 654 0298 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 655              	.LVL36:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 656              		.loc 1 147 17 is_stmt 1 view .LVU160
 657              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 658              		.loc 1 147 19 is_stmt 0 view .LVU161
 659 029c F8FFFF0A 		beq	.L26		@,
 660              	.L43:
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 661              		.loc 1 148 21 is_stmt 1 view .LVU162
 662              	.LVL37:
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 149 21 view .LVU163
 150:armwave.c     **** 
 664              		.loc 1 150 21 view .LVU164
 152:armwave.c     ****                     g = MIN(gg, 255);
 665              		.loc 1 152 21 view .LVU165
 153:armwave.c     ****                     b = MIN(bb, 255);
 666              		.loc 1 153 21 view .LVU166
 154:armwave.c     **** 
 667              		.loc 1 154 21 view .LVU167
 157:armwave.c     **** 
 668              		.loc 1 157 21 view .LVU168
 669              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 670              		.loc 1 150 55 is_stmt 0 view .LVU169
 671 02a0 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 672 02a4 08E083E0 		add	lr, r3, r8	@ _130, n, w
 673 02a8 99010CE0 		mul	ip, r9, r1	@ tmp195, value, _19
 674              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 675              		.loc 1 161 32 view .LVU170
 676 02ac 7E10EFE6 		uxtb	r1, lr	@ _31, _130
 677              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 678              		.loc 1 162 41 view .LVU171
 679 02b0 017081E2 		add	r7, r1, #1	@ tmp210, _31,
 680              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 681              		.loc 1 161 40 view .LVU172
 682 02b4 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 683              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 684              		.loc 1 162 41 view .LVU173
 685 02b8 107A07EE 		vmov	s14, r7	@ int	@ tmp210, tmp210
 686              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 687              		.loc 1 149 55 view .LVU174
 688 02bc 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 689              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 690              		.loc 1 150 24 view .LVU175
 691 02c0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp195,
 692              	.LVL38:
 693              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 161 40 view .LVU176
 695 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp208, _31
 696              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 697              		.loc 1 162 46 view .LVU177
 698 02c8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp211, tmp210
 699              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 700              		.loc 1 149 55 view .LVU178
 701 02cc 99010AE0 		mul	r10, r9, r1	@ tmp199, value, _16
 702              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 703              		.loc 1 148 55 view .LVU179
 704 02d0 990B09E0 		mul	r9, r9, fp	@ tmp205, value, _13
 705              	.LVL39:
 706              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 707              		.loc 1 154 25 view .LVU180
 708 02d4 FF005CE3 		cmp	ip, #255	@ bb,
 709              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 149 24 view .LVU181
 711 02d8 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp199,
 712              	.LVL40:
 713              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 161 40 view .LVU182
 715 02dc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp209, tmp208, _33
 716              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 717              		.loc 1 162 46 view .LVU183
 718 02e0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp212, tmp211, _33
 719              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 720              		.loc 1 154 25 view .LVU184
 721 02e4 FFC0A0A3 		movge	ip, #255	@ bb,
 722              	.LVL41:
 723              	@ armwave.c:153:                     g = MIN(gg, 255);
 153:armwave.c     ****                     b = MIN(bb, 255);
 724              		.loc 1 153 25 view .LVU185
 725 02e8 FF005AE3 		cmp	r10, #255	@ gg,
 726 02ec FFA0A0A3 		movge	r10, #255	@ gg,
 727              	.LVL42:
 728              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 729              		.loc 1 148 24 view .LVU186
 730 02f0 4994A0E1 		asr	r9, r9, #8	@ rr, tmp205,
 731              	.LVL43:
 732              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 733              		.loc 1 152 25 view .LVU187
 734 02f4 FF0059E3 		cmp	r9, #255	@ rr,
 735              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 736              		.loc 1 157 56 view .LVU188
 737 02f8 0AA4A0E1 		lsl	r10, r10, #8	@ tmp200, gg,
 738              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 161 24 view .LVU189
 740 02fc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp209
 741              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 152 25 view .LVU190
 743 0300 FF90A0A3 		movge	r9, #255	@ rr,
 744              	.LVL44:
 745              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 746              		.loc 1 163 32 view .LVU191
 747 0304 4EE4A0E1 		asr	lr, lr, #8	@ tmp213, _130,
 748              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 749              		.loc 1 157 44 view .LVU192
 750 0308 0CC8A0E1 		lsl	ip, ip, #16	@ tmp196, bb,
 751              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 752              		.loc 1 157 56 view .LVU193
 753 030c 7AA0FFE6 		uxth	r10, r10	@ tmp201, tmp200
 754              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 755              		.loc 1 157 44 view .LVU194
 756 0310 FFC80CE2 		and	ip, ip, #16711680	@ tmp197, tmp196,
 757              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 758              		.loc 1 157 51 view .LVU195
 759 0314 0AC08CE1 		orr	ip, ip, r10	@ tmp203, tmp197, tmp201
 760              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 761              		.loc 1 157 62 view .LVU196
 762 0318 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 763              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 161 24 view .LVU197
 765 031c 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 766              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 767              		.loc 1 162 24 view .LVU198
 768 0320 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp212
 769              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 770              		.loc 1 163 38 view .LVU199
 771 0324 AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp215, tmp213, tmp213,
 772              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 773              		.loc 1 157 62 view .LVU200
 774 0328 0AC08CE1 		orr	ip, ip, r10	@ tmp207, tmp203, rr
 775              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 776              		.loc 1 157 26 view .LVU201
 777 032c FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp207,
 778              	.LVL45:
 160:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 779              		.loc 1 160 21 is_stmt 1 view .LVU202
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 161 21 view .LVU203
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 781              		.loc 1 162 21 view .LVU204
 782              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 783              		.loc 1 163 38 is_stmt 0 view .LVU205
 784 0330 C990A0E1 		asr	r9, r9, #1	@ xx, tmp215,
 785              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 786              		.loc 1 162 24 view .LVU206
 787 0334 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 788              	.LVL46:
 163:armwave.c     **** 
 789              		.loc 1 163 21 is_stmt 1 view .LVU207
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 790              		.loc 1 165 21 view .LVU208
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 791              		.loc 1 165 21 is_stmt 0 view .LVU209
 792 0338 070051E1 		cmp	r1, r7	@ yy, ye
 793 033c D0FFFF2A 		bcs	.L26		@,
 794              	.LVL47:
 795              	.L27:
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 796              		.loc 1 166 25 is_stmt 1 discriminator 3 view .LVU210
 167:armwave.c     ****                     }
 797              		.loc 1 167 25 discriminator 3 view .LVU211
 798              	@ armwave.c:166:                         offset = (xx + (y * g_armwave_state.target_width)); 
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 799              		.loc 1 166 43 is_stmt 0 discriminator 3 view .LVU212
 800 0340 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 801              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 802              		.loc 1 167 43 discriminator 3 view .LVU213
 803 0344 9C912CE0 		mla	ip, ip, r1, r9	@ tmp220, g_armwave_state.target_width, yy, xx
 804              	.LVL48:
 805              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 806              		.loc 1 165 42 discriminator 3 view .LVU214
 807 0348 011081E2 		add	r1, r1, #1	@ yy, yy,
 808              	.LVL49:
 809              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 165 21 discriminator 3 view .LVU215
 811 034c 010057E1 		cmp	r7, r1	@ ye, yy
 812              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 813              		.loc 1 167 53 discriminator 3 view .LVU216
 814 0350 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 815              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 816              		.loc 1 165 21 discriminator 3 view .LVU217
 817 0354 F9FFFF1A 		bne	.L27		@,
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 818              		.loc 1 165 21 discriminator 3 view .LVU218
 819 0358 C9FFFFEA 		b	.L26		@
 820              	.L45:
 821              		.align	2
 822              	.L44:
 823 035c 00000000 		.word	g_armwave_state
 824              		.cfi_endproc
 825              	.LFE60:
 827              		.global	__aeabi_idiv
 828              		.align	2
 829              		.global	armwave_generate
 830              		.syntax unified
 831              		.arm
 832              		.fpu vfp
 834              	armwave_generate:
 835              	.LFB61:
 174:armwave.c     **** 
 175:armwave.c     **** /*
 176:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 177:armwave.c     ****  */
 178:armwave.c     **** void armwave_generate()
 179:armwave.c     **** {
 836              		.loc 1 179 1 is_stmt 1 view -0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 56
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 180:armwave.c     ****     uint32_t yy;
 840              		.loc 1 180 5 view .LVU220
 181:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 841              		.loc 1 181 5 view .LVU221
 842              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 843              		.loc 1 179 1 is_stmt 0 view .LVU222
 844 0360 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 845              		.cfi_def_cfa_offset 36
 846              		.cfi_offset 4, -36
 847              		.cfi_offset 5, -32
 848              		.cfi_offset 6, -28
 849              		.cfi_offset 7, -24
 850              		.cfi_offset 8, -20
 851              		.cfi_offset 9, -16
 852              		.cfi_offset 10, -12
 853              		.cfi_offset 11, -8
 854              		.cfi_offset 14, -4
 855 0364 3CD04DE2 		sub	sp, sp, #60	@,,
 856              		.cfi_def_cfa_offset 96
 857              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 858              		.loc 1 181 38 view .LVU223
 859 0368 0C429FE5 		ldr	r4, .L62	@ tmp203,
 860              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 182:armwave.c     **** 
 183:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 861              		.loc 1 183 5 view .LVU224
 862 036c 0010A0E3 		mov	r1, #0	@,
 863              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 181:armwave.c     **** 
 864              		.loc 1 181 14 view .LVU225
 865 0370 583094E5 		ldr	r3, [r4, #88]	@ xx_rem, g_armwave_state.target_width
 866              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 867              		.loc 1 183 5 view .LVU226
 868 0374 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 869 0378 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 870              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 181:armwave.c     **** 
 871              		.loc 1 181 14 view .LVU227
 872 037c 34308DE5 		str	r3, [sp, #52]	@ xx_rem, %sfp
 873              	.LVL50:
 874              		.loc 1 183 5 is_stmt 1 view .LVU228
 875 0380 FEFFFFEB 		bl	memset		@
 876              	.LVL51:
 184:armwave.c     **** 
 185:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 877              		.loc 1 185 5 view .LVU229
 878              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 879              		.loc 1 185 68 is_stmt 0 view .LVU230
 880 0384 445094E5 		ldr	r5, [r4, #68]	@ _141, g_armwave_state.slice_height
 881              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 882              		.loc 1 185 51 view .LVU231
 883 0388 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 884 038c 0510A0E1 		mov	r1, r5	@, _141
 885 0390 FEFFFFEB 		bl	__aeabi_idiv		@
 886              	.LVL52:
 887              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 888              		.loc 1 185 5 view .LVU232
 889 0394 003050E2 		subs	r3, r0, #0	@ ypos,
 890 0398 20308DE5 		str	r3, [sp, #32]	@ ypos, %sfp
 891 039c 7100000A 		beq	.L47		@,
 892              	.LBB10:
 893              	.LBB11:
 894              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 895              		.loc 1 71 82 view .LVU233
 896 03a0 243094E5 		ldr	r3, [r4, #36]	@ _28, g_armwave_state.cmp_x_bitdepth_scale
 897              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 898              		.loc 1 79 35 view .LVU234
 899 03a4 38E094E5 		ldr	lr, [r4, #56]	@ _68, g_armwave_state.waves
 900 03a8 142094E5 		ldr	r2, [r4, #20]	@ ivtmp.84, g_armwave_state.wave_buffer
 901 03ac 930500E0 		mul	r0, r3, r5	@ _271, _28, _141
 902 03b0 83C0A0E1 		lsl	ip, r3, #1	@ tmp267, _28,
 903 03b4 30008DE5 		str	r0, [sp, #48]	@ _271, %sfp
 904              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 905              		.loc 1 71 147 view .LVU235
 906 03b8 40B094E5 		ldr	fp, [r4, #64]	@ _32, g_armwave_state.bitdepth_height
 907              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 908              		.loc 1 71 40 view .LVU236
 909 03bc 040094E5 		ldr	r0, [r4, #4]	@ _27, g_armwave_state.ch1_buffer
 910              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 911              		.loc 1 71 82 view .LVU237
 912 03c0 24308DE5 		str	r3, [sp, #36]	@ _28, %sfp
 913              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 914              		.loc 1 79 35 view .LVU238
 915 03c4 18E08DE5 		str	lr, [sp, #24]	@ _68, %sfp
 916 03c8 03308CE0 		add	r3, ip, r3	@ tmp272, tmp267, _28
 917              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 918              		.loc 1 80 81 view .LVU239
 919 03cc 34E094E5 		ldr	lr, [r4, #52]	@ _35, g_armwave_state.wave_stride
 920 03d0 0010A0E3 		mov	r1, #0	@ ivtmp.83,
 921 03d4 10308DE5 		str	r3, [sp, #16]	@ tmp272, %sfp
 922 03d8 003062E2 		rsb	r3, r2, #0	@ ivtmp.85, ivtmp.84
 923 03dc 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.84, %sfp
 924 03e0 04108DE5 		str	r1, [sp, #4]	@ ivtmp.83, %sfp
 925 03e4 2CC08DE5 		str	ip, [sp, #44]	@ tmp267, %sfp
 926 03e8 28E08DE5 		str	lr, [sp, #40]	@ _35, %sfp
 927 03ec 08308DE5 		str	r3, [sp, #8]	@ ivtmp.85, %sfp
 928              	.LBE11:
 929              	.LBE10:
 930              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 931              		.loc 1 185 12 view .LVU240
 932 03f0 1C108DE5 		str	r1, [sp, #28]	@ ivtmp.83, %sfp
 933              	.LVL53:
 934              	.L51:
 186:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 187:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 188:armwave.c     **** 
 189:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 935              		.loc 1 189 9 is_stmt 1 discriminator 3 view .LVU241
 936              	.LBB13:
 937              	.LBI10:
  62:armwave.c     **** {
 938              		.loc 1 62 6 discriminator 3 view .LVU242
 939              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 940              		.loc 1 64 5 discriminator 3 view .LVU243
  65:armwave.c     ****     uint8_t *wave_base;
 941              		.loc 1 65 5 discriminator 3 view .LVU244
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 942              		.loc 1 66 5 discriminator 3 view .LVU245
  67:armwave.c     ****     bufftyp_t *write_buffer;
 943              		.loc 1 67 5 discriminator 3 view .LVU246
  68:armwave.c     **** 
 944              		.loc 1 68 5 discriminator 3 view .LVU247
  71:armwave.c     **** 
 945              		.loc 1 71 5 discriminator 3 view .LVU248
 946              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 947              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU249
 948 03f4 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp.83, %sfp
 949 03f8 2318A0E1 		lsr	r1, r3, #16	@ tmp222, ivtmp.83,
 950              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 951              		.loc 1 79 5 discriminator 3 view .LVU250
 952 03fc 18309DE5 		ldr	r3, [sp, #24]	@ _68, %sfp
 953              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 954              		.loc 1 71 130 discriminator 3 view .LVU251
 955 0400 9B0101E0 		mul	r1, fp, r1	@ _33, _32, tmp222
 956              	.LVL54:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 957              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU252
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 958              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU253
 959 0404 000053E3 		cmp	r3, #0	@ _68,
 960 0408 3D0000DA 		ble	.L48		@,
 961 040c 000055E3 		cmp	r5, #0	@ _141,
 962 0410 3B00000A 		beq	.L48		@,
 963              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 964              		.loc 1 79 5 view .LVU254
 965 0414 08609DE5 		ldr	r6, [sp, #8]	@ ivtmp.80, %sfp
 966 0418 0C309DE5 		ldr	r3, [sp, #12]	@ ivtmp.84, %sfp
 967              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 968              		.loc 1 79 11 view .LVU255
 969 041c 00A0A0E3 		mov	r10, #0	@ w,
 970              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 971              		.loc 1 79 5 view .LVU256
 972 0420 00308DE5 		str	r3, [sp]	@ ivtmp.84, %sfp
 973              	.LVL55:
 974              	.L50:
  80:armwave.c     **** 
 975              		.loc 1 80 9 is_stmt 1 view .LVU257
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 976              		.loc 1 84 9 view .LVU258
 977              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 978              		.loc 1 79 11 is_stmt 0 view .LVU259
 979 0424 2CE09DE5 		ldr	lr, [sp, #44]	@ ivtmp.75, %sfp
 980 0428 00909DE5 		ldr	r9, [sp]	@ ivtmp.72, %sfp
 981 042c 00C0A0E3 		mov	ip, #0	@ ivtmp.73,
 982 0430 14A08DE5 		str	r10, [sp, #20]	@ w, %sfp
 983              	.LVL56:
 984              	.L49:
  87:armwave.c     **** 
 985              		.loc 1 87 13 is_stmt 1 view .LVU260
 986              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 987              		.loc 1 103 74 is_stmt 0 view .LVU261
 988 0434 2C28A0E1 		lsr	r2, ip, #16	@ tmp223, ivtmp.73,
 989              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 990              		.loc 1 87 18 view .LVU262
 991 0438 043099E4 		ldr	r3, [r9], #4	@ word, MEM[base: _290, offset: 0B]
 992              	.LVL57:
  89:armwave.c     ****                 scale_value = word & 0xff;
 993              		.loc 1 89 13 is_stmt 1 view .LVU263
  90:armwave.c     ****                 
 994              		.loc 1 90 17 view .LVU264
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 995              		.loc 1 102 17 view .LVU265
 107:armwave.c     ****                 word >>= 8;
 996              		.loc 1 107 17 view .LVU266
 997              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 998              		.loc 1 103 34 is_stmt 0 view .LVU267
 999 043c 24709DE5 		ldr	r7, [sp, #36]	@ _28, %sfp
 1000              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1001              		.loc 1 107 47 view .LVU268
 1002 0440 9B1222E0 		mla	r2, fp, r2, r1	@ tmp225, _32, tmp223, _33
 1003              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1004              		.loc 1 103 34 view .LVU269
 1005 0444 0CC087E0 		add	ip, r7, ip	@ _100, _28, ivtmp.73
 1006              	.LVL58:
 1007              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1008              		.loc 1 107 47 view .LVU270
 1009 0448 7320E2E6 		uxtab	r2, r2, r3	@ tmp227, tmp225, word
 1010              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1011              		.loc 1 103 74 view .LVU271
 1012 044c 2C48A0E1 		lsr	r4, ip, #16	@ tmp232, _100,
 1013 0450 10809DE5 		ldr	r8, [sp, #16]	@ tmp272, %sfp
 1014              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1015              		.loc 1 107 47 view .LVU272
 1016 0454 8220A0E1 		lsl	r2, r2, #1	@ tmp228, tmp227,
 1017 0458 9B1424E0 		mla	r4, fp, r4, r1	@ tmp234, _32, tmp232, _33
 1018 045c 08C08CE0 		add	ip, ip, r8	@ ivtmp.73, _100, tmp272
 1019              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1020              		.loc 1 108 22 view .LVU273
 1021 0460 2384A0E1 		lsr	r8, r3, #8	@ word, word,
 1022              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1023              		.loc 1 107 47 view .LVU274
 1024 0464 B2A090E1 		ldrh	r10, [r0, r2]	@ *_85, *_85
 1025 0468 7840E4E6 		uxtab	r4, r4, r8	@ tmp237, tmp234, word
 1026              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1027              		.loc 1 103 74 view .LVU275
 1028 046c 2E88A0E1 		lsr	r8, lr, #16	@ tmp242, ivtmp.75,
 1029              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1030              		.loc 1 103 34 view .LVU276
 1031 0470 0EE087E0 		add	lr, r7, lr	@ _144, _28, ivtmp.75
 1032              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1033              		.loc 1 107 47 view .LVU277
 1034 0474 9B1828E0 		mla	r8, fp, r8, r1	@ tmp244, _32, tmp242, _33
 1035 0478 01708AE2 		add	r7, r10, #1	@ tmp231, *_85,
 1036 047c B27080E1 		strh	r7, [r0, r2]	@ movhi	@ tmp231, *_85
 108:armwave.c     ****             }
 1037              		.loc 1 108 17 is_stmt 1 view .LVU278
 1038              	.LVL59:
  90:armwave.c     ****                 
 1039              		.loc 1 90 17 view .LVU279
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1040              		.loc 1 102 17 view .LVU280
 107:armwave.c     ****                 word >>= 8;
 1041              		.loc 1 107 17 view .LVU281
 1042              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1043              		.loc 1 108 22 is_stmt 0 view .LVU282
 1044 0480 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 1045              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1046              		.loc 1 107 47 view .LVU283
 1047 0484 8440A0E1 		lsl	r4, r4, #1	@ tmp238, tmp237,
 1048 0488 7220E8E6 		uxtab	r2, r8, r2	@ tmp247, tmp244, word
 1049              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1050              		.loc 1 103 74 view .LVU284
 1051 048c 2E88A0E1 		lsr	r8, lr, #16	@ tmp252, _144,
 1052              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1053              		.loc 1 107 47 view .LVU285
 1054 0490 B47090E1 		ldrh	r7, [r0, r4]	@ *_107, *_107
 1055              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1056              		.loc 1 108 22 view .LVU286
 1057 0494 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1058              	.LVL60:
 1059              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1060              		.loc 1 107 47 view .LVU287
 1061 0498 9B3823E0 		mla	r3, fp, r8, r3	@ tmp255, _32, tmp252, word
 1062 049c 8220A0E1 		lsl	r2, r2, #1	@ tmp248, tmp247,
 1063 04a0 017087E2 		add	r7, r7, #1	@ tmp241, *_107,
 1064 04a4 B47080E1 		strh	r7, [r0, r4]	@ movhi	@ tmp241, *_107
 108:armwave.c     ****             }
 1065              		.loc 1 108 17 is_stmt 1 view .LVU288
 1066              	.LVL61:
  90:armwave.c     ****                 
 1067              		.loc 1 90 17 view .LVU289
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1068              		.loc 1 102 17 view .LVU290
 107:armwave.c     ****                 word >>= 8;
 1069              		.loc 1 107 17 view .LVU291
 1070              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1071              		.loc 1 107 47 is_stmt 0 view .LVU292
 1072 04a8 013083E0 		add	r3, r3, r1	@ tmp256, tmp255, _33
 1073 04ac B24090E1 		ldrh	r4, [r0, r2]	@ *_129, *_129
 1074 04b0 8330A0E1 		lsl	r3, r3, #1	@ tmp257, tmp256,
 1075 04b4 10809DE5 		ldr	r8, [sp, #16]	@ tmp272, %sfp
 1076 04b8 014084E2 		add	r4, r4, #1	@ tmp251, *_129,
 1077 04bc B24080E1 		strh	r4, [r0, r2]	@ movhi	@ tmp251, *_129
 108:armwave.c     ****             }
 1078              		.loc 1 108 17 is_stmt 1 view .LVU293
 1079              	.LVL62:
  90:armwave.c     ****                 
 1080              		.loc 1 90 17 view .LVU294
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1081              		.loc 1 102 17 view .LVU295
 107:armwave.c     ****                 word >>= 8;
 1082              		.loc 1 107 17 view .LVU296
 1083              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1084              		.loc 1 107 47 is_stmt 0 view .LVU297
 1085 04c0 B32090E1 		ldrh	r2, [r0, r3]	@ *_151, *_151
 1086              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1087              		.loc 1 84 9 view .LVU298
 1088 04c4 064089E0 		add	r4, r9, r6	@ tmp264, ivtmp.72, ivtmp.80
 1089 04c8 040055E1 		cmp	r5, r4	@ _141, tmp264
 1090              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1091              		.loc 1 107 47 view .LVU299
 1092 04cc 012082E2 		add	r2, r2, #1	@ tmp260, *_151,
 1093 04d0 0EE088E0 		add	lr, r8, lr	@ ivtmp.75, tmp272, _144
 1094              	.LVL63:
 107:armwave.c     ****                 word >>= 8;
 1095              		.loc 1 107 47 view .LVU300
 1096 04d4 B32080E1 		strh	r2, [r0, r3]	@ movhi	@ tmp260, *_151
 108:armwave.c     ****             }
 1097              		.loc 1 108 17 is_stmt 1 view .LVU301
 1098              	.LVL64:
 1099              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1100              		.loc 1 84 9 is_stmt 0 view .LVU302
 1101 04d8 D5FFFF8A 		bhi	.L49		@,
 1102 04dc 14A09DE5 		ldr	r10, [sp, #20]	@ w, %sfp
 1103              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1104              		.loc 1 79 5 view .LVU303
 1105 04e0 18309DE5 		ldr	r3, [sp, #24]	@ _68, %sfp
 1106              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1107              		.loc 1 79 44 view .LVU304
 1108 04e4 01A08AE2 		add	r10, r10, #1	@ w, w,
 1109              	.LVL65:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1110              		.loc 1 79 44 view .LVU305
 1111 04e8 00209DE5 		ldr	r2, [sp]	@ ivtmp.79, %sfp
 1112              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1113              		.loc 1 79 5 view .LVU306
 1114 04ec 03005AE1 		cmp	r10, r3	@ w, _68
 1115 04f0 28309DE5 		ldr	r3, [sp, #40]	@ _35, %sfp
 1116 04f4 032082E0 		add	r2, r2, r3	@ ivtmp.79, ivtmp.79, _35
 1117 04f8 00208DE5 		str	r2, [sp]	@ ivtmp.79, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1118              		.loc 1 79 5 view .LVU307
 1119 04fc 036046E0 		sub	r6, r6, r3	@ ivtmp.80, ivtmp.80, _35
 1120 0500 C7FFFF1A 		bne	.L50		@,
 1121              	.LVL66:
 1122              	.L48:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1123              		.loc 1 79 5 view .LVU308
 1124              	.LBE12:
 1125              	.LBE13:
 190:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1126              		.loc 1 190 9 is_stmt 1 view .LVU309
 191:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1127              		.loc 1 191 9 view .LVU310
 1128              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1129              		.loc 1 185 86 is_stmt 0 view .LVU311
 1130 0504 1C309DE5 		ldr	r3, [sp, #28]	@ yy, %sfp
 1131              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1132              		.loc 1 185 5 view .LVU312
 1133 0508 20209DE5 		ldr	r2, [sp, #32]	@ ypos, %sfp
 1134              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1135              		.loc 1 185 86 view .LVU313
 1136 050c 013083E2 		add	r3, r3, #1	@ yy, yy,
 1137              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1138              		.loc 1 185 5 view .LVU314
 1139 0510 020053E1 		cmp	r3, r2	@ yy, ypos
 1140              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1141              		.loc 1 185 86 view .LVU315
 1142 0514 1C308DE5 		str	r3, [sp, #28]	@ yy, %sfp
 1143              	.LVL67:
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1144              		.loc 1 185 86 view .LVU316
 1145 0518 30209DE5 		ldr	r2, [sp, #48]	@ _271, %sfp
 1146 051c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp.83, %sfp
 1147              	.LVL68:
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1148              		.loc 1 185 86 view .LVU317
 1149 0520 023083E0 		add	r3, r3, r2	@ ivtmp.83, ivtmp.83, _271
 1150 0524 04308DE5 		str	r3, [sp, #4]	@ ivtmp.83, %sfp
 1151 0528 0C309DE5 		ldr	r3, [sp, #12]	@ ivtmp.84, %sfp
 1152 052c 053083E0 		add	r3, r3, r5	@ ivtmp.84, ivtmp.84, _141
 1153 0530 0C308DE5 		str	r3, [sp, #12]	@ ivtmp.84, %sfp
 1154 0534 08309DE5 		ldr	r3, [sp, #8]	@ ivtmp.85, %sfp
 1155 0538 053043E0 		sub	r3, r3, r5	@ ivtmp.85, ivtmp.85, _141
 1156 053c 08308DE5 		str	r3, [sp, #8]	@ ivtmp.85, %sfp
 1157              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1158              		.loc 1 185 5 view .LVU318
 1159 0540 ABFFFF1A 		bne	.L51		@,
 1160 0544 20309DE5 		ldr	r3, [sp, #32]	@ ypos, %sfp
 1161 0548 010043E2 		sub	r0, r3, #1	@ tmp265, ypos,
 1162 054c 34309DE5 		ldr	r3, [sp, #52]	@ xx_rem, %sfp
 1163 0550 950000E0 		mul	r0, r5, r0	@ _281, _141, tmp265
 1164 0554 053043E0 		sub	r3, r3, r5	@ tmp266, xx_rem, _141
 1165 0558 003043E0 		sub	r3, r3, r0	@ xx_rem, tmp266, _281
 1166 055c 34308DE5 		str	r3, [sp, #52]	@ xx_rem, %sfp
 1167 0560 003085E0 		add	r3, r5, r0	@ ypos, _141, _281
 1168 0564 20308DE5 		str	r3, [sp, #32]	@ ypos, %sfp
 1169              	.LVL69:
 1170              	.L47:
 192:armwave.c     ****     }
 193:armwave.c     **** 
 194:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 1171              		.loc 1 194 5 is_stmt 1 view .LVU319
 1172 0568 34109DE5 		ldr	r1, [sp, #52]	@, %sfp
 1173 056c 20009DE5 		ldr	r0, [sp, #32]	@, %sfp
 1174              	@ armwave.c:195: }
 195:armwave.c     **** }
 1175              		.loc 1 195 1 is_stmt 0 view .LVU320
 1176 0570 3CD08DE2 		add	sp, sp, #60	@,,
 1177              		.cfi_def_cfa_offset 36
 1178              		@ sp needed	@
 1179 0574 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1180              		.cfi_restore 14
 1181              		.cfi_restore 11
 1182              		.cfi_restore 10
 1183              		.cfi_restore 9
 1184              		.cfi_restore 8
 1185              		.cfi_restore 7
 1186              		.cfi_restore 6
 1187              		.cfi_restore 5
 1188              		.cfi_restore 4
 1189              		.cfi_def_cfa_offset 0
 1190              	@ armwave.c:194:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 194:armwave.c     **** }
 1191              		.loc 1 194 5 view .LVU321
 1192 0578 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 1193              	.LVL70:
 1194              	.L63:
 1195              		.align	2
 1196              	.L62:
 1197 057c 00000000 		.word	g_armwave_state
 1198              		.cfi_endproc
 1199              	.LFE61:
 1201              		.align	2
 1202              		.global	armwave_setup_render
 1203              		.syntax unified
 1204              		.arm
 1205              		.fpu vfp
 1207              	armwave_setup_render:
 1208              	.LVL71:
 1209              	.LFB62:
 196:armwave.c     **** 
 197:armwave.c     **** /*
 198:armwave.c     ****  * Setup the renderer with passed parameters.
 199:armwave.c     ****  */
 200:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 201:armwave.c     **** {
 1210              		.loc 1 201 1 is_stmt 1 view -0
 1211              		.cfi_startproc
 1212              		@ args = 12, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 202:armwave.c     ****     uint32_t length, xx;
 1214              		.loc 1 202 5 view .LVU323
 203:armwave.c     ****     float points_per_pixel;
 1215              		.loc 1 203 5 view .LVU324
 204:armwave.c     **** 
 205:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1216              		.loc 1 205 5 view .LVU325
 1217              	@ armwave.c:201: {
 201:armwave.c     ****     uint32_t length, xx;
 1218              		.loc 1 201 1 is_stmt 0 view .LVU326
 1219 0580 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1220              		.cfi_def_cfa_offset 32
 1221              		.cfi_offset 4, -32
 1222              		.cfi_offset 5, -28
 1223              		.cfi_offset 6, -24
 1224              		.cfi_offset 7, -20
 1225              		.cfi_offset 8, -16
 1226              		.cfi_offset 9, -12
 1227              		.cfi_offset 10, -8
 1228              		.cfi_offset 14, -4
 1229 0584 028B2DED 		vpush.64	{d8}	@
 1230              		.cfi_def_cfa_offset 40
 1231              		.cfi_offset 80, -40
 1232              		.cfi_offset 81, -36
 1233 0588 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1234 058c 0170A0E1 		mov	r7, r1	@ end_point, end_point
 1235 0590 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 1236 0594 10D04DE2 		sub	sp, sp, #16	@,,
 1237              		.cfi_def_cfa_offset 56
 1238              	@ armwave.c:201: {
 201:armwave.c     ****     uint32_t length, xx;
 1239              		.loc 1 201 1 view .LVU327
 1240 0598 38608DE2 		add	r6, sp, #56	@,,
 1241 059c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1242 05a0 401196E8 		ldm	r6, {r6, r8, ip}	@,,,
 1243              	@ armwave.c:205:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1244              		.loc 1 205 5 view .LVU328
 1245 05a4 00308DE5 		str	r3, [sp]	@ wave_stride,
 1246 05a8 0230A0E1 		mov	r3, r2	@, waves_max
 1247              	.LVL72:
 1248              		.loc 1 205 5 view .LVU329
 1249 05ac 40118DE9 		stmib	sp, {r6, r8, ip}	@,,,
 1250 05b0 0120A0E1 		mov	r2, r1	@, end_point
 1251              	.LVL73:
 1252              		.loc 1 205 5 view .LVU330
 1253 05b4 0010A0E1 		mov	r1, r0	@, start_point
 1254              	.LVL74:
 1255              		.loc 1 205 5 view .LVU331
 1256 05b8 CC019FE5 		ldr	r0, .L78+8	@,
 1257              	.LVL75:
 1258              		.loc 1 205 5 view .LVU332
 1259 05bc FEFFFFEB 		bl	printf		@
 1260              	.LVL76:
 206:armwave.c     **** 
 207:armwave.c     ****     // TODO these asserts should instead raise PyExc
 208:armwave.c     ****     assert(start_point < end_point);
 1261              		.loc 1 208 5 is_stmt 1 view .LVU333
 1262 05c0 070055E1 		cmp	r5, r7	@ start_point, end_point
 1263 05c4 5F00002A 		bcs	.L75		@,
 209:armwave.c     **** 
 210:armwave.c     ****     /*
 211:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 212:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 213:armwave.c     ****     if(target_height == 256) {
 214:armwave.c     ****         g_armwave_state.row_shift = 8;
 215:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 216:armwave.c     ****     } else if(target_height == 512) {
 217:armwave.c     ****         g_armwave_state.row_shift = 9;
 218:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 219:armwave.c     ****     } else if(target_height == 1024) {
 220:armwave.c     ****         g_armwave_state.row_shift = 10;
 221:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 222:armwave.c     ****     } else if(target_height == 2048) {
 223:armwave.c     ****         g_armwave_state.row_shift = 11;
 224:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 225:armwave.c     ****     }
 226:armwave.c     ****     */
 227:armwave.c     **** 
 228:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 229:armwave.c     ****     g_armwave_state.xstride = target_height;
 1264              		.loc 1 229 5 view .LVU334
 1265              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1266              		.loc 1 230 49 is_stmt 0 view .LVU335
 1267 05c8 908A07EE 		vmov	s15, r8	@ int	@ target_height, target_height
 1268 05cc 6C7A9FED 		vldr.32	s14, .L78	@ tmp171,
 1269              	@ armwave.c:240:     g_armwave_state.wave_length = end_point - start_point;
 231:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 232:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 233:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 234:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 235:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 236:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 237:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 239:armwave.c     ****     g_armwave_state.target_height = target_height;
 240:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1270              		.loc 1 240 45 view .LVU336
 1271 05d0 055047E0 		sub	r5, r7, r5	@ _13, end_point, start_point
 1272              	.LVL77:
 1273              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1274              		.loc 1 237 90 view .LVU337
 1275 05d4 047086E2 		add	r7, r6, #4	@ tmp182, target_width,
 1276              	.LVL78:
 1277              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1278              		.loc 1 230 49 view .LVU338
 1279 05d8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp170, target_height
 1280              	@ armwave.c:229:     g_armwave_state.xstride = target_height;
 229:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1281              		.loc 1 229 29 view .LVU339
 1282 05dc AC419FE5 		ldr	r4, .L78+12	@ tmp236,
 1283              	@ armwave.c:235:     g_armwave_state.size = target_height * target_width;
 235:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1284              		.loc 1 235 42 view .LVU340
 1285 05e0 980602E0 		mul	r2, r8, r6	@ tmp179, target_height, target_width
 1286              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1287              		.loc 1 237 95 view .LVU341
 1288 05e4 877387E0 		add	r7, r7, r7, lsl #7	@ tmp185, tmp182, tmp182,
 1289              	@ armwave.c:236:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 236:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1290              		.loc 1 236 37 view .LVU342
 1291 05e8 023CA0E3 		mov	r3, #512	@ tmp181,
 1292              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1293              		.loc 1 237 95 view .LVU343
 1294 05ec 8771A0E1 		lsl	r7, r7, #3	@ tmp186, tmp185,
 1295              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 241:armwave.c     **** 
 242:armwave.c     ****     // Calculate compound scaler
 243:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 244:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1296              		.loc 1 244 40 view .LVU344
 1297 05f0 0510A0E1 		mov	r1, r5	@, _13
 1298              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1299              		.loc 1 230 49 view .LVU345
 1300 05f4 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp170, tmp171
 1301              	@ armwave.c:235:     g_armwave_state.size = target_height * target_width;
 235:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1302              		.loc 1 235 26 view .LVU346
 1303 05f8 542084E5 		str	r2, [r4, #84]	@ tmp179, g_armwave_state.size
 1304              	@ armwave.c:236:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 236:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1305              		.loc 1 236 37 view .LVU347
 1306 05fc 403084E5 		str	r3, [r4, #64]	@ tmp181, g_armwave_state.bitdepth_height
 1307              	@ armwave.c:229:     g_armwave_state.xstride = target_height;
 229:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1308              		.loc 1 229 29 view .LVU348
 1309 0600 2C8084E5 		str	r8, [r4, #44]	@ target_height, g_armwave_state.xstride
 230:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1310              		.loc 1 230 5 is_stmt 1 view .LVU349
 1311              	@ armwave.c:232:     g_armwave_state.wave_stride = wave_stride;
 232:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1312              		.loc 1 232 33 is_stmt 0 view .LVU350
 1313 0604 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1314              	@ armwave.c:233:     g_armwave_state.waves_max = waves_max;
 233:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1315              		.loc 1 233 31 view .LVU351
 1316 0608 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1317              	@ armwave.c:234:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 234:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1318              		.loc 1 234 27 view .LVU352
 1319 060c 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 1320              	@ armwave.c:238:     g_armwave_state.target_width = target_width;
 238:armwave.c     ****     g_armwave_state.target_height = target_height;
 1321              		.loc 1 238 34 view .LVU353
 1322 0610 586084E5 		str	r6, [r4, #88]	@ target_width, g_armwave_state.target_width
 1323              	@ armwave.c:239:     g_armwave_state.target_height = target_height;
 239:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1324              		.loc 1 239 35 view .LVU354
 1325 0614 5C8084E5 		str	r8, [r4, #92]	@ target_height, g_armwave_state.target_height
 1326              	@ armwave.c:240:     g_armwave_state.wave_length = end_point - start_point;
 240:armwave.c     **** 
 1327              		.loc 1 240 33 view .LVU355
 1328 0618 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1329              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1330              		.loc 1 244 40 view .LVU356
 1331 061c 0600A0E1 		mov	r0, r6	@, target_width
 1332              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1333              		.loc 1 237 34 view .LVU357
 1334 0620 507084E5 		str	r7, [r4, #80]	@ tmp186, g_armwave_state.ch_buff_size
 1335              	@ armwave.c:231:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 231:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1336              		.loc 1 231 30 view .LVU358
 1337 0624 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp174, _3
 1338              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1339              		.loc 1 230 33 view .LVU359
 1340 0628 0A7AC4ED 		vstr.32	s15, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 231:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1341              		.loc 1 231 5 is_stmt 1 view .LVU360
 1342              	@ armwave.c:231:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 231:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1343              		.loc 1 231 30 is_stmt 0 view .LVU361
 1344 062c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp174, g_armwave_state.vscale
 232:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1345              		.loc 1 232 5 is_stmt 1 view .LVU362
 233:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1346              		.loc 1 233 5 view .LVU363
 234:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1347              		.loc 1 234 5 view .LVU364
 235:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1348              		.loc 1 235 5 view .LVU365
 236:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1349              		.loc 1 236 5 view .LVU366
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1350              		.loc 1 237 5 view .LVU367
 238:armwave.c     ****     g_armwave_state.target_height = target_height;
 1351              		.loc 1 238 5 view .LVU368
 239:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1352              		.loc 1 239 5 view .LVU369
 240:armwave.c     **** 
 1353              		.loc 1 240 5 view .LVU370
 243:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1354              		.loc 1 243 5 view .LVU371
 1355              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1356              		.loc 1 244 40 is_stmt 0 view .LVU372
 1357 0630 FEFFFFEB 		bl	__aeabi_idiv		@
 1358              	.LVL79:
 1359              	@ armwave.c:246:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 245:armwave.c     **** 
 246:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1360              		.loc 1 246 5 view .LVU373
 1361 0634 0138A0E3 		mov	r3, #65536	@ tmp197,
 1362 0638 08308DE5 		str	r3, [sp, #8]	@ tmp197,
 1363 063c 0710A0E1 		mov	r1, r7	@, tmp186
 1364 0640 04508DE5 		str	r5, [sp, #4]	@ _13,
 1365 0644 00608DE5 		str	r6, [sp]	@ target_width,
 1366              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 244:armwave.c     **** 
 1367              		.loc 1 244 72 view .LVU374
 1368 0648 00C8A0E1 		lsl	ip, r0, #16	@ _17,,
 1369              	@ armwave.c:246:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1370              		.loc 1 246 5 view .LVU375
 1371 064c 0C30A0E1 		mov	r3, ip	@, _17
 1372 0650 0C20A0E1 		mov	r2, ip	@, tmp3
 1373 0654 38019FE5 		ldr	r0, .L78+16	@,
 1374              	@ armwave.c:243:     g_armwave_state.cmp_x_bitdepth_scale = \
 243:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1375              		.loc 1 243 42 view .LVU376
 1376 0658 24C084E5 		str	ip, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1377              		.loc 1 246 5 is_stmt 1 view .LVU377
 1378 065c FEFFFFEB 		bl	printf		@
 1379              	.LVL80:
 247:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 248:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 249:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 250:armwave.c     **** 
 251:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 252:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 253:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 254:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1380              		.loc 1 254 5 view .LVU378
 1381              	@ armwave.c:256:     if(g_armwave_state.ch1_buffer != NULL)
 255:armwave.c     **** 
 256:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1382              		.loc 1 256 23 is_stmt 0 view .LVU379
 1383 0660 040094E5 		ldr	r0, [r4, #4]	@ _18, g_armwave_state.ch1_buffer
 1384              	@ armwave.c:254:     g_armwave_state.slice_height = 64; // 64;  
 254:armwave.c     **** 
 1385              		.loc 1 254 34 view .LVU380
 1386 0664 4030A0E3 		mov	r3, #64	@ tmp199,
 1387              	@ armwave.c:256:     if(g_armwave_state.ch1_buffer != NULL)
 1388              		.loc 1 256 7 view .LVU381
 1389 0668 000050E3 		cmp	r0, #0	@ _18,
 1390              	@ armwave.c:254:     g_armwave_state.slice_height = 64; // 64;  
 254:armwave.c     **** 
 1391              		.loc 1 254 34 view .LVU382
 1392 066c 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1393              		.loc 1 256 5 is_stmt 1 view .LVU383
 1394              	@ armwave.c:256:     if(g_armwave_state.ch1_buffer != NULL)
 1395              		.loc 1 256 7 is_stmt 0 view .LVU384
 1396 0670 0000000A 		beq	.L66		@,
 257:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1397              		.loc 1 257 9 is_stmt 1 view .LVU385
 1398 0674 FEFFFFEB 		bl	free		@
 1399              	.LVL81:
 1400              	.L66:
 258:armwave.c     **** 
 259:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1401              		.loc 1 259 5 view .LVU386
 1402              	@ armwave.c:259:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1403              		.loc 1 259 34 is_stmt 0 view .LVU387
 1404 0678 0110A0E3 		mov	r1, #1	@,
 1405 067c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1406 0680 FEFFFFEB 		bl	calloc		@
 1407              	.LVL82:
 1408              	@ armwave.c:261:     assert(g_armwave_state.ch1_buffer != NULL);
 260:armwave.c     **** 
 261:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1409              		.loc 1 261 5 view .LVU388
 1410 0684 000050E3 		cmp	r0, #0	@ _21,
 1411              	@ armwave.c:259:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 259:armwave.c     **** 
 1412              		.loc 1 259 34 view .LVU389
 1413 0688 0070A0E1 		mov	r7, r0	@ _21,
 1414              	@ armwave.c:259:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 259:armwave.c     **** 
 1415              		.loc 1 259 32 view .LVU390
 1416 068c 040084E5 		str	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1417              		.loc 1 261 5 is_stmt 1 view .LVU391
 1418 0690 3600000A 		beq	.L76		@,
 262:armwave.c     **** 
 263:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 264:armwave.c     ****     length = end_point - start_point;
 1419              		.loc 1 264 5 view .LVU392
 1420              	.LVL83:
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1421              		.loc 1 265 5 view .LVU393
 1422              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 1423              		.loc 1 265 34 is_stmt 0 view .LVU394
 1424 0694 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1425              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 1426              		.loc 1 265 22 view .LVU395
 1427 0698 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1428              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1429              		.loc 1 266 60 view .LVU396
 1430 069c 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp243, g_armwave_state.slice_height
 1431              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1432              		.loc 1 267 40 view .LVU397
 1433 06a0 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1434              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1435              		.loc 1 265 34 view .LVU398
 1436 06a4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp210, target_width
 1437              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1438              		.loc 1 265 22 view .LVU399
 1439 06a8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp209, _13
 1440              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1441              		.loc 1 266 60 view .LVU400
 1442 06ac C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp213, tmp243
 1443              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1444              		.loc 1 265 22 view .LVU401
 1445 06b0 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp209, tmp210
 1446              	.LVL84:
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1447              		.loc 1 266 5 is_stmt 1 view .LVU402
 1448              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1449              		.loc 1 266 60 is_stmt 0 view .LVU403
 1450 06b4 087A67EE 		vmul.f32	s15, s14, s16	@ tmp215, tmp213, points_per_pixel
 1451              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1452              		.loc 1 266 41 view .LVU404
 1453 06b8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp216, tmp215
 1454 06bc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp216, g_armwave_state.slice_record_height
 1455              		.loc 1 267 5 is_stmt 1 view .LVU405
 1456              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1457              		.loc 1 267 40 is_stmt 0 view .LVU406
 1458 06c0 FEFFFFEB 		bl	malloc		@
 1459              	.LVL85:
 1460              	@ armwave.c:269:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 268:armwave.c     **** 
 269:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1461              		.loc 1 269 5 view .LVU407
 1462 06c4 000050E3 		cmp	r0, #0	@ _29,
 1463              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1464              		.loc 1 267 40 view .LVU408
 1465 06c8 0060A0E1 		mov	r6, r0	@ _29,
 1466              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1467              		.loc 1 267 38 view .LVU409
 1468 06cc 840084E5 		str	r0, [r4, #132]	@ _29, g_armwave_state.xcoord_to_xpixel
 1469              		.loc 1 269 5 is_stmt 1 view .LVU410
 1470 06d0 2100000A 		beq	.L77		@,
 1471              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 270:armwave.c     **** 
 271:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 272:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1472              		.loc 1 272 54 is_stmt 0 view .LVU411
 1473 06d4 2B7ADFED 		vldr.32	s15, .L78+4	@ tmp224,
 1474 06d8 020040E2 		sub	r0, r0, #2	@ ivtmp.89, _29,
 1475              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1476              		.loc 1 271 12 view .LVU412
 1477 06dc 0030A0E3 		mov	r3, #0	@ xx,
 1478              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1479              		.loc 1 272 54 view .LVU413
 1480 06e0 887A87EE 		vdiv.f32	s14, s15, s16	@ _30, tmp224, points_per_pixel
 1481              	.L69:
 1482              	.LVL86:
 1483              		.loc 1 272 9 is_stmt 1 discriminator 3 view .LVU414
 1484              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1485              		.loc 1 272 74 is_stmt 0 discriminator 3 view .LVU415
 1486 06e4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1487              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1488              		.loc 1 271 32 discriminator 3 view .LVU416
 1489 06e8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1490              	.LVL87:
 1491              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1492              		.loc 1 271 5 discriminator 3 view .LVU417
 1493 06ec 030055E1 		cmp	r5, r3	@ _13, xx
 1494              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1495              		.loc 1 272 74 discriminator 3 view .LVU418
 1496 06f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, xx
 1497 06f4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, _30
 1498              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1499              		.loc 1 272 46 discriminator 3 view .LVU419
 1500 06f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp227, tmp226
 1501 06fc 902A17EE 		vmov	r2, s15	@ int	@ tmp227, tmp227
 1502 0700 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp227, MEM[base: _99, offset: 0B]
 1503              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1504              		.loc 1 271 5 discriminator 3 view .LVU420
 1505 0704 F6FFFF1A 		bne	.L69		@,
 273:armwave.c     **** 
 274:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 275:armwave.c     ****     }
 276:armwave.c     **** 
 277:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1506              		.loc 1 277 5 is_stmt 1 view .LVU421
 1507              	@ armwave.c:277:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1508              		.loc 1 277 34 is_stmt 0 view .LVU422
 1509 0708 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1510 070c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1511 0710 FEFFFFEB 		bl	malloc		@
 1512              	.LVL88:
 1513              	@ armwave.c:279:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 278:armwave.c     **** 
 279:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1514              		.loc 1 279 5 view .LVU423
 1515 0714 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1516 0718 0620A0E1 		mov	r2, r6	@, _29
 1517 071c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1518 0720 0710A0E1 		mov	r1, r7	@, _21
 1519              	@ armwave.c:277:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 277:armwave.c     **** 
 1520              		.loc 1 277 34 view .LVU424
 1521 0724 00C0A0E1 		mov	ip, r0	@ tmp231,
 1522              	@ armwave.c:279:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1523              		.loc 1 279 5 view .LVU425
 1524 0728 0030A0E1 		mov	r3, r0	@, tmp231
 1525 072c 64009FE5 		ldr	r0, .L78+20	@,
 1526              	@ armwave.c:277:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 277:armwave.c     **** 
 1527              		.loc 1 277 32 view .LVU426
 1528 0730 68C084E5 		str	ip, [r4, #104]	@ tmp231, g_armwave_state.out_pixbuf
 1529              		.loc 1 279 5 is_stmt 1 view .LVU427
 1530 0734 FEFFFFEB 		bl	printf		@
 1531              	.LVL89:
 280:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 281:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 282:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 283:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 284:armwave.c     **** 
 285:armwave.c     ****     malloc_stats();
 1532              		.loc 1 285 5 view .LVU428
 1533              	@ armwave.c:286: }
 286:armwave.c     **** }
 1534              		.loc 1 286 1 is_stmt 0 view .LVU429
 1535 0738 10D08DE2 		add	sp, sp, #16	@,,
 1536              		.cfi_remember_state
 1537              		.cfi_def_cfa_offset 40
 1538              		@ sp needed	@
 1539 073c 028BBDEC 		vldm	sp!, {d8}	@
 1540              		.cfi_restore 80
 1541              		.cfi_restore 81
 1542              		.cfi_def_cfa_offset 32
 1543              	.LVL90:
 1544              		.loc 1 286 1 view .LVU430
 1545 0740 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1546              		.cfi_restore 14
 1547              		.cfi_restore 10
 1548              		.cfi_restore 9
 1549              		.cfi_restore 8
 1550              		.cfi_restore 7
 1551              		.cfi_restore 6
 1552              		.cfi_restore 5
 1553              		.cfi_restore 4
 1554              		.cfi_def_cfa_offset 0
 1555              	.LVL91:
 1556              	@ armwave.c:285:     malloc_stats();
 285:armwave.c     **** }
 1557              		.loc 1 285 5 view .LVU431
 1558 0744 FEFFFFEA 		b	malloc_stats		@
 1559              	.LVL92:
 1560              	.L75:
 1561              		.cfi_restore_state
 208:armwave.c     **** 
 1562              		.loc 1 208 5 is_stmt 1 discriminator 1 view .LVU432
 1563 0748 4C309FE5 		ldr	r3, .L78+24	@,
 1564 074c D020A0E3 		mov	r2, #208	@,
 1565 0750 48109FE5 		ldr	r1, .L78+28	@,
 1566 0754 48009FE5 		ldr	r0, .L78+32	@,
 1567 0758 FEFFFFEB 		bl	__assert_fail		@
 1568              	.LVL93:
 1569              	.L77:
 269:armwave.c     **** 
 1570              		.loc 1 269 5 discriminator 1 view .LVU433
 1571 075c 38309FE5 		ldr	r3, .L78+24	@,
 1572 0760 40209FE5 		ldr	r2, .L78+36	@,
 1573 0764 34109FE5 		ldr	r1, .L78+28	@,
 1574 0768 3C009FE5 		ldr	r0, .L78+40	@,
 1575 076c FEFFFFEB 		bl	__assert_fail		@
 1576              	.LVL94:
 1577              	.L76:
 261:armwave.c     **** 
 1578              		.loc 1 261 5 discriminator 1 view .LVU434
 1579 0770 24309FE5 		ldr	r3, .L78+24	@,
 1580 0774 34209FE5 		ldr	r2, .L78+44	@,
 1581 0778 20109FE5 		ldr	r1, .L78+28	@,
 1582 077c 30009FE5 		ldr	r0, .L78+48	@,
 1583 0780 FEFFFFEB 		bl	__assert_fail		@
 1584              	.LVL95:
 1585              	.L79:
 1586              		.align	2
 1587              	.L78:
 1588 0784 00007F43 		.word	1132396544
 1589 0788 0000803F 		.word	1065353216
 1590 078c 20000000 		.word	.LC2
 1591 0790 00000000 		.word	g_armwave_state
 1592 0794 70000000 		.word	.LC5
 1593 0798 20010000 		.word	.LC8
 1594 079c 00000000 		.word	.LANCHOR0
 1595 07a0 4C000000 		.word	.LC3
 1596 07a4 58000000 		.word	.LC4
 1597 07a8 0D010000 		.word	269
 1598 07ac F4000000 		.word	.LC7
 1599 07b0 05010000 		.word	261
 1600 07b4 D0000000 		.word	.LC6
 1601              		.cfi_endproc
 1602              	.LFE62:
 1604              		.align	2
 1605              		.global	armwave_set_wave_pointer
 1606              		.syntax unified
 1607              		.arm
 1608              		.fpu vfp
 1610              	armwave_set_wave_pointer:
 1611              	.LVL96:
 1612              	.LFB63:
 287:armwave.c     **** 
 288:armwave.c     **** /*
 289:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 290:armwave.c     ****  * in the future.
 291:armwave.c     ****  */
 292:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 293:armwave.c     **** {
 1613              		.loc 1 293 1 view -0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1617              		.loc 1 294 5 view .LVU436
 1618 07b8 000050E3 		cmp	r0, #0	@ wave_buffer
 1619              		.loc 1 294 5 is_stmt 0 view .LVU437
 1620 07bc 0200000A 		beq	.L85		@,
 295:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1621              		.loc 1 295 5 is_stmt 1 view .LVU438
 1622              	@ armwave.c:295:     g_armwave_state.wave_buffer = wave_buffer;
 1623              		.loc 1 295 33 is_stmt 0 view .LVU439
 1624 07c0 1C309FE5 		ldr	r3, .L86	@ tmp116,
 1625 07c4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1626 07c8 1EFF2FE1 		bx	lr	@
 1627              	.L85:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1628              		.loc 1 294 5 is_stmt 1 discriminator 1 view .LVU440
 1629              	@ armwave.c:293: {
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1630              		.loc 1 293 1 is_stmt 0 discriminator 1 view .LVU441
 1631 07cc 10402DE9 		push	{r4, lr}	@
 1632              		.cfi_def_cfa_offset 8
 1633              		.cfi_offset 4, -8
 1634              		.cfi_offset 14, -4
 1635              	@ armwave.c:294:     assert(wave_buffer != NULL);
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1636              		.loc 1 294 5 discriminator 1 view .LVU442
 1637 07d0 10309FE5 		ldr	r3, .L86+4	@,
 1638 07d4 10209FE5 		ldr	r2, .L86+8	@,
 1639 07d8 10109FE5 		ldr	r1, .L86+12	@,
 1640 07dc 10009FE5 		ldr	r0, .L86+16	@,
 1641              	.LVL97:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1642              		.loc 1 294 5 discriminator 1 view .LVU443
 1643 07e0 FEFFFFEB 		bl	__assert_fail		@
 1644              	.LVL98:
 1645              	.L87:
 1646              		.align	2
 1647              	.L86:
 1648 07e4 00000000 		.word	g_armwave_state
 1649 07e8 18000000 		.word	.LANCHOR0+24
 1650 07ec 26010000 		.word	294
 1651 07f0 4C000000 		.word	.LC3
 1652 07f4 44010000 		.word	.LC9
 1653              		.cfi_endproc
 1654              	.LFE63:
 1656              		.align	2
 1657              		.global	armwave_set_wave_pointer_as_testbuf
 1658              		.syntax unified
 1659              		.arm
 1660              		.fpu vfp
 1662              	armwave_set_wave_pointer_as_testbuf:
 1663              	.LVL99:
 1664              	.LFB64:
 296:armwave.c     **** }
 297:armwave.c     **** 
 298:armwave.c     **** /*
 299:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 300:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 301:armwave.c     ****  */
 302:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 303:armwave.c     **** {
 1665              		.loc 1 303 1 is_stmt 1 view -0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 304:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1670              		.loc 1 304 5 view .LVU445
 1671              	@ armwave.c:304:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1672              		.loc 1 304 29 is_stmt 0 view .LVU446
 1673 07f8 24309FE5 		ldr	r3, .L91	@ tmp117,
 1674              	@ armwave.c:304:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1675              		.loc 1 304 7 view .LVU447
 1676 07fc 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1677 0800 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1678 0804 0400003A 		bcc	.L90		@,
 305:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 306:armwave.c     ****         return;
 307:armwave.c     ****     }
 308:armwave.c     **** 
 309:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1679              		.loc 1 309 5 is_stmt 1 view .LVU448
 1680              	@ armwave.c:309:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1681              		.loc 1 309 111 is_stmt 0 view .LVU449
 1682 0808 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1683              	@ armwave.c:309:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1684              		.loc 1 309 68 view .LVU450
 1685 080c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1686 0810 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1687              	.LVL100:
 1688              	@ armwave.c:309:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1689              		.loc 1 309 33 view .LVU451
 1690 0814 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1691              	@ armwave.c:310: }
 310:armwave.c     **** }
 1692              		.loc 1 310 1 view .LVU452
 1693 0818 1EFF2FE1 		bx	lr	@
 1694              	.LVL101:
 1695              	.L90:
 305:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1696              		.loc 1 305 9 is_stmt 1 view .LVU453
 1697 081c 04009FE5 		ldr	r0, .L91+4	@,
 1698              	.LVL102:
 305:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1699              		.loc 1 305 9 is_stmt 0 view .LVU454
 1700 0820 FEFFFFEA 		b	puts		@
 1701              	.LVL103:
 1702              	.L92:
 1703              		.align	2
 1704              	.L91:
 1705 0824 00000000 		.word	g_armwave_state
 1706 0828 58010000 		.word	.LC10
 1707              		.cfi_endproc
 1708              	.LFE64:
 1710              		.align	2
 1711              		.global	armwave_set_wave_pointer_u32
 1712              		.syntax unified
 1713              		.arm
 1714              		.fpu vfp
 1716              	armwave_set_wave_pointer_u32:
 1717              	.LVL104:
 1718              	.LFB65:
 311:armwave.c     **** 
 312:armwave.c     **** /*
 313:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 314:armwave.c     ****  * disjointed buffers in the future.
 315:armwave.c     ****  */
 316:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 317:armwave.c     **** {
 1719              		.loc 1 317 1 is_stmt 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1723              		.loc 1 318 5 view .LVU456
 1724 082c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1725              		.loc 1 318 5 is_stmt 0 view .LVU457
 1726 0830 0200000A 		beq	.L98		@,
 319:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1727              		.loc 1 319 5 is_stmt 1 view .LVU458
 1728              	@ armwave.c:319:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1729              		.loc 1 319 33 is_stmt 0 view .LVU459
 1730 0834 1C309FE5 		ldr	r3, .L99	@ tmp117,
 1731 0838 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1732 083c 1EFF2FE1 		bx	lr	@
 1733              	.L98:
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1734              		.loc 1 318 5 is_stmt 1 discriminator 1 view .LVU460
 1735              	@ armwave.c:317: {
 317:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1736              		.loc 1 317 1 is_stmt 0 discriminator 1 view .LVU461
 1737 0840 10402DE9 		push	{r4, lr}	@
 1738              		.cfi_def_cfa_offset 8
 1739              		.cfi_offset 4, -8
 1740              		.cfi_offset 14, -4
 1741              	@ armwave.c:318:     assert(wave_buffer_ptr != 0);
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1742              		.loc 1 318 5 discriminator 1 view .LVU462
 1743 0844 10309FE5 		ldr	r3, .L99+4	@,
 1744 0848 10209FE5 		ldr	r2, .L99+8	@,
 1745 084c 10109FE5 		ldr	r1, .L99+12	@,
 1746 0850 10009FE5 		ldr	r0, .L99+16	@,
 1747              	.LVL105:
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1748              		.loc 1 318 5 discriminator 1 view .LVU463
 1749 0854 FEFFFFEB 		bl	__assert_fail		@
 1750              	.LVL106:
 1751              	.L100:
 1752              		.align	2
 1753              	.L99:
 1754 0858 00000000 		.word	g_armwave_state
 1755 085c 34000000 		.word	.LANCHOR0+52
 1756 0860 3E010000 		.word	318
 1757 0864 4C000000 		.word	.LC3
 1758 0868 94010000 		.word	.LC11
 1759              		.cfi_endproc
 1760              	.LFE65:
 1762              		.align	2
 1763              		.global	armwave_clear_buffer
 1764              		.syntax unified
 1765              		.arm
 1766              		.fpu vfp
 1768              	armwave_clear_buffer:
 1769              	.LVL107:
 1770              	.LFB66:
 320:armwave.c     **** }
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 326:armwave.c     **** {
 1771              		.loc 1 326 1 is_stmt 1 view -0
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 0
 1774              		@ frame_needed = 0, uses_anonymous_args = 0
 1775              		@ link register save eliminated.
 327:armwave.c     ****     // Flags ignored, only one buffer cleared
 328:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1776              		.loc 1 328 5 view .LVU465
 1777              	@ armwave.c:328:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1778              		.loc 1 328 58 is_stmt 0 view .LVU466
 1779 086c 0C309FE5 		ldr	r3, .L102	@ tmp114,
 1780              	@ armwave.c:328:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1781              		.loc 1 328 5 view .LVU467
 1782 0870 0010A0E3 		mov	r1, #0	@,
 1783 0874 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1784 0878 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1785              	.LVL108:
 1786              		.loc 1 328 5 view .LVU468
 1787 087c FEFFFFEA 		b	memset		@
 1788              	.LVL109:
 1789              	.L103:
 1790              		.align	2
 1791              	.L102:
 1792 0880 00000000 		.word	g_armwave_state
 1793              		.cfi_endproc
 1794              	.LFE66:
 1796              		.align	2
 1797              		.global	armwave_set_channel_colour
 1798              		.syntax unified
 1799              		.arm
 1800              		.fpu vfp
 1802              	armwave_set_channel_colour:
 1803              	.LVL110:
 1804              	.LFB67:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 333:armwave.c     ****  */
 334:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 335:armwave.c     **** {
 1805              		.loc 1 335 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
 336:armwave.c     ****     // Only 1ch supported for now
 337:armwave.c     ****     switch(ch) {
 1810              		.loc 1 337 5 view .LVU470
 1811 0884 010050E3 		cmp	r0, #1	@ ch,
 338:armwave.c     ****         case 1:
 339:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1812              		.loc 1 339 13 view .LVU471
 1813              	@ armwave.c:339:             g_armwave_state.ch1_color.r = r;
 1814              		.loc 1 339 41 is_stmt 0 view .LVU472
 1815 0888 0C009F05 		ldreq	r0, .L106	@ tmp117,
 1816              	.LVL111:
 1817              		.loc 1 339 41 view .LVU473
 1818 088c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 340:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1819              		.loc 1 340 13 is_stmt 1 view .LVU474
 1820              	@ armwave.c:340:             g_armwave_state.ch1_color.g = g;
 1821              		.loc 1 340 41 is_stmt 0 view .LVU475
 1822 0890 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 341:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1823              		.loc 1 341 13 is_stmt 1 view .LVU476
 1824              	@ armwave.c:341:             g_armwave_state.ch1_color.b = b;
 1825              		.loc 1 341 41 is_stmt 0 view .LVU477
 1826 0894 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 342:armwave.c     ****             break;
 1827              		.loc 1 342 13 is_stmt 1 view .LVU478
 1828              	@ armwave.c:344: }
 343:armwave.c     ****     }
 344:armwave.c     **** }
 1829              		.loc 1 344 1 is_stmt 0 view .LVU479
 1830 0898 1EFF2FE1 		bx	lr	@
 1831              	.L107:
 1832              		.align	2
 1833              	.L106:
 1834 089c 00000000 		.word	g_armwave_state
 1835              		.cfi_endproc
 1836              	.LFE67:
 1838              		.align	2
 1839              		.global	armwave_dump_ppm_debug
 1840              		.syntax unified
 1841              		.arm
 1842              		.fpu vfp
 1844              	armwave_dump_ppm_debug:
 1845              	.LVL112:
 1846              	.LFB68:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Dump a ppm of a buffer to a file.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 350:armwave.c     **** {
 1847              		.loc 1 350 1 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1851              		.loc 1 351 5 view .LVU481
 1852              	@ armwave.c:350: {
 350:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1853              		.loc 1 350 1 is_stmt 0 view .LVU482
 1854 08a0 0130A0E1 		mov	r3, r1	@ fn, fn
 1855 08a4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1856              		.cfi_def_cfa_offset 28
 1857              		.cfi_offset 4, -28
 1858              		.cfi_offset 5, -24
 1859              		.cfi_offset 6, -20
 1860              		.cfi_offset 7, -16
 1861              		.cfi_offset 8, -12
 1862              		.cfi_offset 9, -8
 1863              		.cfi_offset 14, -4
 1864 08a8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1865 08ac 0CD04DE2 		sub	sp, sp, #12	@,,
 1866              		.cfi_def_cfa_offset 40
 1867              	@ armwave.c:351:     FILE *fp = fopen(fn, "wb");
 1868              		.loc 1 351 16 view .LVU483
 1869 08b0 C4109FE5 		ldr	r1, .L116	@,
 1870              	.LVL113:
 1871              		.loc 1 351 16 view .LVU484
 1872 08b4 0300A0E1 		mov	r0, r3	@, fn
 1873              	.LVL114:
 1874              		.loc 1 351 16 view .LVU485
 1875 08b8 FEFFFFEB 		bl	fopen64		@
 1876              	.LVL115:
 1877              	@ armwave.c:358:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 352:armwave.c     ****     uint32_t data;
 353:armwave.c     ****     int xx, yy;
 354:armwave.c     **** 
 355:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 356:armwave.c     **** 
 357:armwave.c     ****     fputs("P3\n", fp);
 358:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1878              		.loc 1 358 5 view .LVU486
 1879 08bc BC609FE5 		ldr	r6, .L116+4	@ tmp150,
 1880              	@ armwave.c:357:     fputs("P3\n", fp);
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1881              		.loc 1 357 5 view .LVU487
 1882 08c0 0320A0E3 		mov	r2, #3	@,
 1883 08c4 0110A0E3 		mov	r1, #1	@,
 1884              	@ armwave.c:351:     FILE *fp = fopen(fn, "wb");
 351:armwave.c     ****     uint32_t data;
 1885              		.loc 1 351 16 view .LVU488
 1886 08c8 0070A0E1 		mov	r7, r0	@ fp,
 1887              	.LVL116:
 352:armwave.c     ****     uint32_t data;
 1888              		.loc 1 352 5 is_stmt 1 view .LVU489
 353:armwave.c     **** 
 1889              		.loc 1 353 5 view .LVU490
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1890              		.loc 1 357 5 view .LVU491
 1891 08cc 0030A0E1 		mov	r3, r0	@, fp
 1892 08d0 AC009FE5 		ldr	r0, .L116+8	@,
 1893              	.LVL117:
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1894              		.loc 1 357 5 is_stmt 0 view .LVU492
 1895 08d4 FEFFFFEB 		bl	fwrite		@
 1896              	.LVL118:
 1897              		.loc 1 358 5 is_stmt 1 view .LVU493
 1898 08d8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1899 08dc A4109FE5 		ldr	r1, .L116+12	@,
 1900 08e0 0700A0E1 		mov	r0, r7	@, fp
 1901 08e4 FEFFFFEB 		bl	fprintf		@
 1902              	.LVL119:
 359:armwave.c     ****     fputs("255\n", fp);
 1903              		.loc 1 359 5 view .LVU494
 1904 08e8 0420A0E3 		mov	r2, #4	@,
 1905 08ec 0730A0E1 		mov	r3, r7	@, fp
 1906 08f0 0110A0E3 		mov	r1, #1	@,
 1907 08f4 90009FE5 		ldr	r0, .L116+16	@,
 1908 08f8 FEFFFFEB 		bl	fwrite		@
 1909              	.LVL120:
 360:armwave.c     **** 
 361:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1910              		.loc 1 361 5 view .LVU495
 1911              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1912              		.loc 1 361 37 is_stmt 0 view .LVU496
 1913 08fc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1914              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1915              		.loc 1 361 5 view .LVU497
 1916 0900 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1917 0904 180000DA 		ble	.L109		@,
 1918 0908 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1919              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 364:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 365:armwave.c     **** 
 366:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1920              		.loc 1 366 13 view .LVU498
 1921 090c 7C909FE5 		ldr	r9, .L116+20	@ tmp152,
 1922              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1923              		.loc 1 361 12 view .LVU499
 1924 0910 0050A0E3 		mov	r5, #0	@ yy,
 1925              	.LVL121:
 1926              	.L110:
 1927              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1928              		.loc 1 362 9 view .LVU500
 1929 0914 000053E3 		cmp	r3, #0	@ _13,
 1930              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1931              		.loc 1 362 16 view .LVU501
 1932 0918 0040A0C3 		movgt	r4, #0	@ xx,
 1933              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1934              		.loc 1 362 9 view .LVU502
 1935 091c 0F0000DA 		ble	.L112		@,
 1936              	.LVL122:
 1937              	.L111:
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1938              		.loc 1 363 13 is_stmt 1 discriminator 3 view .LVU503
 1939              	@ armwave.c:363:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1940              		.loc 1 363 29 is_stmt 0 discriminator 3 view .LVU504
 1941 0920 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1942              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1943              		.loc 1 366 13 discriminator 3 view .LVU505
 1944 0924 0910A0E1 		mov	r1, r9	@, tmp152
 1945 0928 0700A0E1 		mov	r0, r7	@, fp
 1946              	@ armwave.c:363:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1947              		.loc 1 363 18 discriminator 3 view .LVU506
 1948 092c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1949              	.LVL123:
 1950              		.loc 1 366 13 is_stmt 1 discriminator 3 view .LVU507
 1951              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1952              		.loc 1 362 58 is_stmt 0 discriminator 3 view .LVU508
 1953 0930 014084E2 		add	r4, r4, #1	@ xx, xx,
 1954              	.LVL124:
 1955              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1956              		.loc 1 366 81 discriminator 3 view .LVU509
 1957 0934 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1958              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1959              		.loc 1 366 61 discriminator 3 view .LVU510
 1960 0938 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1961              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1962              		.loc 1 366 13 discriminator 3 view .LVU511
 1963 093c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1964 0940 7330EFE6 		uxtb	r3, r3	@, tmp142
 1965 0944 00C08DE5 		str	ip, [sp]	@ tmp147,
 1966 0948 7220EFE6 		uxtb	r2, r2	@, data
 1967              	.LVL125:
 1968              		.loc 1 366 13 discriminator 3 view .LVU512
 1969 094c FEFFFFEB 		bl	fprintf		@
 1970              	.LVL126:
 1971              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1972              		.loc 1 362 41 discriminator 3 view .LVU513
 1973 0950 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1974              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1975              		.loc 1 362 9 discriminator 3 view .LVU514
 1976 0954 040053E1 		cmp	r3, r4	@ _13, xx
 1977 0958 F0FFFFCA 		bgt	.L111		@,
 1978 095c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1979              	.LVL127:
 1980              	.L112:
 1981              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1982              		.loc 1 361 55 discriminator 2 view .LVU515
 1983 0960 015085E2 		add	r5, r5, #1	@ yy, yy,
 1984              	.LVL128:
 1985              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1986              		.loc 1 361 5 discriminator 2 view .LVU516
 1987 0964 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1988 0968 E9FFFFBA 		blt	.L110		@,
 1989              	.LVL129:
 1990              	.L109:
 367:armwave.c     ****         }
 368:armwave.c     ****     }
 369:armwave.c     **** 
 370:armwave.c     ****     fclose(fp);
 1991              		.loc 1 370 5 is_stmt 1 view .LVU517
 1992 096c 0700A0E1 		mov	r0, r7	@, fp
 1993              	@ armwave.c:371: }
 371:armwave.c     **** }
 1994              		.loc 1 371 1 is_stmt 0 view .LVU518
 1995 0970 0CD08DE2 		add	sp, sp, #12	@,,
 1996              		.cfi_def_cfa_offset 28
 1997              		@ sp needed	@
 1998 0974 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1999              		.cfi_restore 14
 2000              		.cfi_restore 9
 2001              		.cfi_restore 8
 2002              		.cfi_restore 7
 2003              		.cfi_restore 6
 2004              		.cfi_restore 5
 2005              		.cfi_restore 4
 2006              		.cfi_def_cfa_offset 0
 2007              	.LVL130:
 2008              	@ armwave.c:370:     fclose(fp);
 370:armwave.c     **** }
 2009              		.loc 1 370 5 view .LVU519
 2010 0978 FEFFFFEA 		b	fclose		@
 2011              	.LVL131:
 2012              	.L117:
 370:armwave.c     **** }
 2013              		.loc 1 370 5 view .LVU520
 2014              		.align	2
 2015              	.L116:
 2016 097c AC010000 		.word	.LC12
 2017 0980 00000000 		.word	g_armwave_state
 2018 0984 B0010000 		.word	.LC13
 2019 0988 B4010000 		.word	.LC14
 2020 098c BC010000 		.word	.LC15
 2021 0990 C4010000 		.word	.LC16
 2022              		.cfi_endproc
 2023              	.LFE68:
 2025              		.align	2
 2026              		.global	armwave_test_init
 2027              		.syntax unified
 2028              		.arm
 2029              		.fpu vfp
 2031              	armwave_test_init:
 2032              	.LVL132:
 2033              	.LFB69:
 372:armwave.c     **** 
 373:armwave.c     **** /*
 374:armwave.c     ****  * Initialise some test functionry.
 375:armwave.c     ****  */
 376:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 377:armwave.c     **** {
 2034              		.loc 1 377 1 is_stmt 1 view -0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 378:armwave.c     ****     test_create_gamma();
 2038              		.loc 1 378 5 view .LVU522
 2039              	.LBB18:
 2040              	.LBI18:
  34:armwave.c     **** {
 2041              		.loc 1 34 6 view .LVU523
  34:armwave.c     **** {
 2042              		.loc 1 34 6 is_stmt 0 view .LVU524
 2043              	.LBE18:
 2044              	@ armwave.c:377: {
 377:armwave.c     ****     test_create_gamma();
 2045              		.loc 1 377 1 view .LVU525
 2046 0994 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2047              		.cfi_def_cfa_offset 32
 2048              		.cfi_offset 4, -32
 2049              		.cfi_offset 5, -28
 2050              		.cfi_offset 6, -24
 2051              		.cfi_offset 7, -20
 2052              		.cfi_offset 8, -16
 2053              		.cfi_offset 9, -12
 2054              		.cfi_offset 10, -8
 2055              		.cfi_offset 14, -4
 2056 0998 068B2DED 		vpush.64	{d8, d9, d10}	@
 2057              		.cfi_def_cfa_offset 56
 2058              		.cfi_offset 80, -56
 2059              		.cfi_offset 81, -52
 2060              		.cfi_offset 82, -48
 2061              		.cfi_offset 83, -44
 2062              		.cfi_offset 84, -40
 2063              		.cfi_offset 85, -36
 2064 099c C0409FE5 		ldr	r4, .L122+20	@ ivtmp.103,
 2065              	.LBB21:
 2066              	.LBB19:
 2067              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2068              		.loc 1 40 32 view .LVU526
 2069 09a0 2EAA9FED 		vldr.32	s20, .L122+16	@ tmp136,
 2070              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2071              		.loc 1 40 26 view .LVU527
 2072 09a4 299B9FED 		vldr.64	d9, .L122	@ tmp151,
 2073              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2074              		.loc 1 40 49 view .LVU528
 2075 09a8 2A8B9FED 		vldr.64	d8, .L122+8	@ tmp139,
 2076 09ac 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.103,
 2077              	.LBE19:
 2078              	.LBE21:
 2079              	@ armwave.c:377: {
 377:armwave.c     ****     test_create_gamma();
 2080              		.loc 1 377 1 view .LVU529
 2081 09b0 10D04DE2 		sub	sp, sp, #16	@,,
 2082              		.cfi_def_cfa_offset 72
 2083              	@ armwave.c:377: {
 377:armwave.c     ****     test_create_gamma();
 2084              		.loc 1 377 1 view .LVU530
 2085 09b4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2086 09b8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2087 09bc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2088 09c0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2089 09c4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.103,
 2090 09c8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2091              	.LVL133:
 2092              	.L119:
 2093              	.LBB22:
 2094              	.LBB20:
  40:armwave.c     ****     }
 2095              		.loc 1 40 9 is_stmt 1 view .LVU531
 2096              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2097              		.loc 1 40 32 is_stmt 0 view .LVU532
 2098 09cc 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.103
 2099              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2100              		.loc 1 40 26 view .LVU533
 2101 09d0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2102              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2103              		.loc 1 40 32 view .LVU534
 2104 09d4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2105 09d8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2106 09dc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2107              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2108              		.loc 1 40 26 view .LVU535
 2109 09e0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2110 09e4 FEFFFFEB 		bl	pow		@
 2111              	.LVL134:
 2112              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2113              		.loc 1 40 49 view .LVU536
 2114 09e8 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2115              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2116              		.loc 1 40 24 view .LVU537
 2117 09ec C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2118 09f0 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2119 09f4 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2120              	.LVL135:
 2121              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2122              		.loc 1 39 5 view .LVU538
 2123 09f8 0A0054E1 		cmp	r4, r10	@ ivtmp.103, _39
 2124 09fc F2FFFF1A 		bne	.L119		@,
 2125              	.LVL136:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2126              		.loc 1 39 5 view .LVU539
 2127              	.LBE20:
 2128              	.LBE22:
 379:armwave.c     **** 
 380:armwave.c     ****     // make ch1 yellowish by default
 381:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2129              		.loc 1 381 5 is_stmt 1 view .LVU540
 2130              	.LBB23:
 2131              	.LBI23:
 334:armwave.c     **** {
 2132              		.loc 1 334 6 view .LVU541
 2133              	.LBB24:
 337:armwave.c     ****         case 1:
 2134              		.loc 1 337 5 view .LVU542
 339:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2135              		.loc 1 339 13 view .LVU543
 340:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2136              		.loc 1 340 13 view .LVU544
 2137              	@ armwave.c:339:             g_armwave_state.ch1_color.r = r;
 339:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2138              		.loc 1 339 41 is_stmt 0 view .LVU545
 2139 0a00 60C09FE5 		ldr	ip, .L122+24	@ tmp142,
 2140 0a04 60409FE5 		ldr	r4, .L122+28	@ tmp143,
 2141              	.LBE24:
 2142              	.LBE23:
 2143              	@ armwave.c:383:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 382:armwave.c     **** 
 383:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2144              		.loc 1 383 5 view .LVU546
 2145 0a08 0000A0E3 		mov	r0, #0	@ tmp147,
 2146              	.LBB28:
 2147              	.LBB25:
 2148              	@ armwave.c:341:             g_armwave_state.ch1_color.b = b;
 341:armwave.c     ****             break;
 2149              		.loc 1 341 41 view .LVU547
 2150 0a0c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2151              	.LBE25:
 2152              	.LBE28:
 2153              	@ armwave.c:383:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2154              		.loc 1 383 5 view .LVU548
 2155 0a10 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2156 0a14 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2157 0a18 00808DE5 		str	r8, [sp]	@ render_width,
 2158 0a1c 0610A0E1 		mov	r1, r6	@, tmp3
 2159 0a20 0720A0E1 		mov	r2, r7	@, nwaves
 2160              	.LBB29:
 2161              	.LBB26:
 2162              	@ armwave.c:339:             g_armwave_state.ch1_color.r = r;
 339:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2163              		.loc 1 339 41 view .LVU549
 2164 0a24 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 341:armwave.c     ****             break;
 2165              		.loc 1 341 13 is_stmt 1 view .LVU550
 2166              	.LBE26:
 2167              	.LBE29:
 2168              	@ armwave.c:383:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2169              		.loc 1 383 5 is_stmt 0 view .LVU551
 2170 0a28 0630A0E1 		mov	r3, r6	@, wave_size
 2171              	.LBB30:
 2172              	.LBB27:
 2173              	@ armwave.c:341:             g_armwave_state.ch1_color.b = b;
 341:armwave.c     ****             break;
 2174              		.loc 1 341 41 view .LVU552
 2175 0a2c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 342:armwave.c     ****     }
 2176              		.loc 1 342 13 is_stmt 1 view .LVU553
 2177              	.LVL137:
 342:armwave.c     ****     }
 2178              		.loc 1 342 13 is_stmt 0 view .LVU554
 2179              	.LBE27:
 2180              	.LBE30:
 2181              		.loc 1 383 5 is_stmt 1 view .LVU555
 2182 0a30 FEFFFFEB 		bl	armwave_setup_render		@
 2183              	.LVL138:
 384:armwave.c     **** 
 385:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2184              		.loc 1 385 5 view .LVU556
 2185 0a34 34109FE5 		ldr	r1, .L122+32	@,
 2186 0a38 34009FE5 		ldr	r0, .L122+36	@,
 2187              	@ armwave.c:386: }
 386:armwave.c     **** }
 2188              		.loc 1 386 1 is_stmt 0 view .LVU557
 2189 0a3c 10D08DE2 		add	sp, sp, #16	@,,
 2190              		.cfi_def_cfa_offset 56
 2191              		@ sp needed	@
 2192 0a40 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2193              		.cfi_restore 84
 2194              		.cfi_restore 85
 2195              		.cfi_restore 82
 2196              		.cfi_restore 83
 2197              		.cfi_restore 80
 2198              		.cfi_restore 81
 2199              		.cfi_def_cfa_offset 32
 2200 0a44 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2201              		.cfi_restore 14
 2202              		.cfi_restore 10
 2203              		.cfi_restore 9
 2204              		.cfi_restore 8
 2205              		.cfi_restore 7
 2206              		.cfi_restore 6
 2207              		.cfi_restore 5
 2208              		.cfi_restore 4
 2209              		.cfi_def_cfa_offset 0
 2210              	.LVL139:
 2211              	@ armwave.c:385:     printf("armwave version: %s\n", ARMWAVE_VER);
 385:armwave.c     **** }
 2212              		.loc 1 385 5 view .LVU558
 2213 0a48 FEFFFFEA 		b	printf		@
 2214              	.LVL140:
 2215              	.L123:
 2216 0a4c 0000A0E1 		.align	3
 2217              	.L122:
 2218 0a50 000000C0 		.word	-1073741824
 2219 0a54 CCCCEC3F 		.word	1072483532
 2220 0a58 00000000 		.word	0
 2221 0a5c 00E06F40 		.word	1081073664
 2222 0a60 00007F43 		.word	1132396544
 2223 0a64 FFFFFFFF 		.word	gamma_table-1
 2224 0a68 00000000 		.word	g_armwave_state
 2225 0a6c F609F406 		.word	116656630
 2226 0a70 00000000 		.word	.LC0
 2227 0a74 08000000 		.word	.LC1
 2228              		.cfi_endproc
 2229              	.LFE69:
 2231              		.align	2
 2232              		.global	armwave_test_fill_outbuf
 2233              		.syntax unified
 2234              		.arm
 2235              		.fpu vfp
 2237              	armwave_test_fill_outbuf:
 2238              	.LFB70:
 387:armwave.c     **** 
 388:armwave.c     **** /*
 389:armwave.c     ****  * Render image to the local allocated buffer.
 390:armwave.c     ****  */
 391:armwave.c     **** void armwave_test_fill_outbuf()
 392:armwave.c     **** {
 2239              		.loc 1 392 1 is_stmt 1 view -0
 2240              		.cfi_startproc
 2241              		@ args = 0, pretend = 0, frame = 0
 2242              		@ frame_needed = 0, uses_anonymous_args = 0
 2243              		@ link register save eliminated.
 393:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2244              		.loc 1 393 5 view .LVU560
 2245 0a78 04309FE5 		ldr	r3, .L125	@ tmp111,
 2246 0a7c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2247 0a80 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2248              	.LVL141:
 2249              	.L126:
 2250              		.align	2
 2251              	.L125:
 2252 0a84 00000000 		.word	g_armwave_state
 2253              		.cfi_endproc
 2254              	.LFE70:
 2256              		.align	2
 2257              		.global	armwave_test_dump_buffer_to_ppm
 2258              		.syntax unified
 2259              		.arm
 2260              		.fpu vfp
 2262              	armwave_test_dump_buffer_to_ppm:
 2263              	.LVL142:
 2264              	.LFB71:
 394:armwave.c     **** }
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 400:armwave.c     **** {
 2265              		.loc 1 400 1 view -0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269              		@ link register save eliminated.
 401:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2270              		.loc 1 401 5 view .LVU562
 2271 0a88 08309FE5 		ldr	r3, .L128	@ tmp112,
 2272 0a8c 0010A0E1 		mov	r1, r0	@, fn
 2273 0a90 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2274              	.LVL143:
 2275              		.loc 1 401 5 is_stmt 0 view .LVU563
 2276 0a94 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2277              	.LVL144:
 2278              	.L129:
 2279              		.loc 1 401 5 view .LVU564
 2280              		.align	2
 2281              	.L128:
 2282 0a98 00000000 		.word	g_armwave_state
 2283              		.cfi_endproc
 2284              	.LFE71:
 2286              		.align	2
 2287              		.global	armwave_test_fill_gdkbuf
 2288              		.syntax unified
 2289              		.arm
 2290              		.fpu vfp
 2292              	armwave_test_fill_gdkbuf:
 2293              	.LVL145:
 2294              	.LFB72:
 402:armwave.c     **** }
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Render GDK buffer with test funtionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 408:armwave.c     **** {
 2295              		.loc 1 408 1 is_stmt 1 view -0
 2296              		.cfi_startproc
 2297              		@ args = 0, pretend = 0, frame = 0
 2298              		@ frame_needed = 0, uses_anonymous_args = 0
 2299              		@ link register save eliminated.
 409:armwave.c     ****     //PyObject *mv;
 410:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 411:armwave.c     **** 
 412:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 413:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2300              		.loc 1 413 5 view .LVU566
 414:armwave.c     ****     
 415:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 416:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2301              		.loc 1 416 5 view .LVU567
 2302              	@ armwave.c:413:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 413:armwave.c     ****     
 2303              		.loc 1 413 11 is_stmt 0 view .LVU568
 2304 0a9c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2305              	@ armwave.c:416:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2306              		.loc 1 416 5 view .LVU569
 2307 0aa0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2308              	.LVL146:
 2309              		.loc 1 416 5 view .LVU570
 2310 0aa4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2311              	.LVL147:
 2312              		.loc 1 416 5 view .LVU571
 2313              		.cfi_endproc
 2314              	.LFE72:
 2316              		.align	2
 2317              		.global	armwave_test_buffer_alloc
 2318              		.syntax unified
 2319              		.arm
 2320              		.fpu vfp
 2322              	armwave_test_buffer_alloc:
 2323              	.LVL148:
 2324              	.LFB73:
 417:armwave.c     **** }
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 423:armwave.c     **** {
 2325              		.loc 1 423 1 is_stmt 1 view -0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 0, uses_anonymous_args = 0
 424:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2329              		.loc 1 424 5 view .LVU573
 2330              	@ armwave.c:423: {
 423:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2331              		.loc 1 423 1 is_stmt 0 view .LVU574
 2332 0aa8 70402DE9 		push	{r4, r5, r6, lr}	@
 2333              		.cfi_def_cfa_offset 16
 2334              		.cfi_offset 4, -16
 2335              		.cfi_offset 5, -12
 2336              		.cfi_offset 6, -8
 2337              		.cfi_offset 14, -4
 2338              	@ armwave.c:423: {
 423:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2339              		.loc 1 423 1 view .LVU575
 2340 0aac 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2341              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 2342              		.loc 1 424 23 view .LVU576
 2343 0ab0 44409FE5 		ldr	r4, .L138	@ tmp128,
 2344 0ab4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2345              	.LVL149:
 2346              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 2347              		.loc 1 424 7 view .LVU577
 2348 0ab8 000050E3 		cmp	r0, #0	@ _1,
 2349 0abc 0000000A 		beq	.L132		@,
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2350              		.loc 1 425 9 is_stmt 1 view .LVU578
 2351 0ac0 FEFFFFEB 		bl	free		@
 2352              	.LVL150:
 2353              	.L132:
 426:armwave.c     ****     }
 427:armwave.c     **** 
 428:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 429:armwave.c     **** 
 430:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2354              		.loc 1 430 5 view .LVU579
 2355              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2356              		.loc 1 430 75 is_stmt 0 view .LVU580
 2357 0ac4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2358 0ac8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2359              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2360              		.loc 1 430 40 view .LVU581
 2361 0acc 0610A0E1 		mov	r1, r6	@, nsets
 2362              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2363              		.loc 1 430 75 view .LVU582
 2364 0ad0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2365              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2366              		.loc 1 430 40 view .LVU583
 2367 0ad4 0500A0E1 		mov	r0, r5	@, _4
 2368 0ad8 FEFFFFEB 		bl	calloc		@
 2369              	.LVL151:
 2370              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 431:armwave.c     **** 
 432:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2371              		.loc 1 432 7 view .LVU584
 2372 0adc 000050E3 		cmp	r0, #0	@ tmp124,
 2373              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2374              		.loc 1 430 38 view .LVU585
 2375 0ae0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2376              		.loc 1 432 5 is_stmt 1 view .LVU586
 2377              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 2378              		.loc 1 432 7 is_stmt 0 view .LVU587
 2379 0ae4 7080BD18 		popne	{r4, r5, r6, pc}	@
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2380              		.loc 1 433 9 is_stmt 1 view .LVU588
 2381 0ae8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2382 0aec 0620A0E1 		mov	r2, r6	@, nsets
 2383 0af0 08009FE5 		ldr	r0, .L138+4	@,
 2384              	@ armwave.c:437: }
 434:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 435:armwave.c     ****         return;
 436:armwave.c     ****     }
 437:armwave.c     **** }
 2385              		.loc 1 437 1 is_stmt 0 view .LVU589
 2386 0af4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2387              		.cfi_restore 14
 2388              		.cfi_restore 6
 2389              		.cfi_restore 5
 2390              		.cfi_restore 4
 2391              		.cfi_def_cfa_offset 0
 2392              	.LVL152:
 2393              	@ armwave.c:433:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2394              		.loc 1 433 9 view .LVU590
 2395 0af8 FEFFFFEA 		b	printf		@
 2396              	.LVL153:
 2397              	.L139:
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2398              		.loc 1 433 9 view .LVU591
 2399              		.align	2
 2400              	.L138:
 2401 0afc 00000000 		.word	g_armwave_state
 2402 0b00 D4010000 		.word	.LC17
 2403              		.cfi_endproc
 2404              	.LFE73:
 2406              		.align	2
 2407              		.global	armwave_fill_pixbuf_into_pybuffer
 2408              		.syntax unified
 2409              		.arm
 2410              		.fpu vfp
 2412              	armwave_fill_pixbuf_into_pybuffer:
 2413              	.LVL154:
 2414              	.LFB74:
 438:armwave.c     **** 
 439:armwave.c     **** /*
 440:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 441:armwave.c     ****  */
 442:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 443:armwave.c     **** {
 2415              		.loc 1 443 1 is_stmt 1 view -0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 48
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 444:armwave.c     ****     Py_buffer buffer;
 2419              		.loc 1 444 5 view .LVU593
 445:armwave.c     ****     int ret;
 2420              		.loc 1 445 5 view .LVU594
 446:armwave.c     **** 
 447:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 448:armwave.c     **** 
 449:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2421              		.loc 1 449 5 view .LVU595
 2422              	@ armwave.c:443: {
 443:armwave.c     ****     Py_buffer buffer;
 2423              		.loc 1 443 1 is_stmt 0 view .LVU596
 2424 0b04 04E02DE5 		str	lr, [sp, #-4]!	@,
 2425              		.cfi_def_cfa_offset 4
 2426              		.cfi_offset 14, -4
 2427 0b08 34D04DE2 		sub	sp, sp, #52	@,,
 2428              		.cfi_def_cfa_offset 56
 2429              	@ armwave.c:449:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2430              		.loc 1 449 11 view .LVU597
 2431 0b0c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2432 0b10 0120A0E3 		mov	r2, #1	@,
 2433 0b14 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2434              	.LVL155:
 450:armwave.c     **** 
 451:armwave.c     ****     if(ret != 0) {
 2435              		.loc 1 451 5 is_stmt 1 view .LVU598
 2436              	@ armwave.c:451:     if(ret != 0) {
 2437              		.loc 1 451 7 is_stmt 0 view .LVU599
 2438 0b18 000050E3 		cmp	r0, #0	@,
 2439 0b1c 0A00001A 		bne	.L144		@,
 452:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 453:armwave.c     ****         Py_RETURN_FALSE;
 454:armwave.c     ****     }
 455:armwave.c     **** 
 456:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 457:armwave.c     **** 
 458:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2440              		.loc 1 458 5 is_stmt 1 view .LVU600
 2441 0b20 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2442              	.LVL156:
 2443              		.loc 1 458 5 is_stmt 0 view .LVU601
 2444 0b24 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2445              	.LVL157:
 459:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 460:armwave.c     **** 
 461:armwave.c     ****     PyBuffer_Release(&buffer);
 2446              		.loc 1 461 5 is_stmt 1 view .LVU602
 2447 0b28 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2448 0b2c FEFFFFEB 		bl	PyBuffer_Release		@
 2449              	.LVL158:
 462:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 463:armwave.c     **** 
 464:armwave.c     ****     Py_RETURN_TRUE;
 2450              		.loc 1 464 5 view .LVU603
 2451              	.LBB31:
 2452              	.LBI31:
 2453              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2454              		.loc 2 456 20 view .LVU604
 2455              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2456              		.loc 2 458 21 view .LVU605
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2457              		.loc 2 459 5 view .LVU606
 2458              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2459              		.loc 2 459 18 is_stmt 0 view .LVU607
 2460 0b30 38309FE5 		ldr	r3, .L145	@ tmp126,
 2461              	.LBE32:
 2462              	.LBE31:
 2463              	@ armwave.c:464:     Py_RETURN_TRUE;
 2464              		.loc 1 464 5 view .LVU608
 2465 0b34 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2466              	.LBB34:
 2467              	.LBB33:
 2468              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2469              		.loc 2 459 18 view .LVU609
 2470 0b38 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2471 0b3c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2472 0b40 002083E5 		str	r2, [r3]	@ tmp128,
 2473              	.LBE33:
 2474              	.LBE34:
 2475              	@ armwave.c:465: }
 465:armwave.c     **** }
 2476              		.loc 1 465 1 view .LVU610
 2477 0b44 34D08DE2 		add	sp, sp, #52	@,,
 2478              		.cfi_remember_state
 2479              		.cfi_def_cfa_offset 4
 2480              		@ sp needed	@
 2481 0b48 04F09DE4 		ldr	pc, [sp], #4	@
 2482              	.LVL159:
 2483              	.L144:
 2484              		.cfi_restore_state
 452:armwave.c     ****         Py_RETURN_FALSE;
 2485              		.loc 1 452 9 is_stmt 1 view .LVU611
 2486 0b4c 20009FE5 		ldr	r0, .L145+4	@,
 2487              	.LVL160:
 452:armwave.c     ****         Py_RETURN_FALSE;
 2488              		.loc 1 452 9 is_stmt 0 view .LVU612
 2489 0b50 FEFFFFEB 		bl	puts		@
 2490              	.LVL161:
 453:armwave.c     ****     }
 2491              		.loc 1 453 9 is_stmt 1 view .LVU613
 2492              	.LBB35:
 2493              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2494              		.loc 2 456 20 view .LVU614
 2495              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2496              		.loc 2 458 21 view .LVU615
 2497              		.loc 2 459 5 view .LVU616
 2498              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2499              		.loc 2 459 18 is_stmt 0 view .LVU617
 2500 0b54 1C309FE5 		ldr	r3, .L145+8	@ tmp120,
 2501              	.LBE36:
 2502              	.LBE35:
 2503              	@ armwave.c:453:         Py_RETURN_FALSE;
 453:armwave.c     ****     }
 2504              		.loc 1 453 9 view .LVU618
 2505 0b58 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2506              	.LBB38:
 2507              	.LBB37:
 2508              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2509              		.loc 2 459 18 view .LVU619
 2510 0b5c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2511 0b60 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2512 0b64 002083E5 		str	r2, [r3]	@ tmp122,
 2513              	.LBE37:
 2514              	.LBE38:
 2515              	@ armwave.c:465: }
 2516              		.loc 1 465 1 view .LVU620
 2517 0b68 34D08DE2 		add	sp, sp, #52	@,,
 2518              		.cfi_def_cfa_offset 4
 2519              		@ sp needed	@
 2520 0b6c 04F09DE4 		ldr	pc, [sp], #4	@
 2521              	.L146:
 2522              		.align	2
 2523              	.L145:
 2524 0b70 00000000 		.word	_Py_TrueStruct
 2525 0b74 28020000 		.word	.LC18
 2526 0b78 00000000 		.word	_Py_FalseStruct
 2527              		.cfi_endproc
 2528              	.LFE74:
 2530              		.align	2
 2531              		.global	armwave_test_create_am_sine
 2532              		.syntax unified
 2533              		.arm
 2534              		.fpu vfp
 2536              	armwave_test_create_am_sine:
 2537              	.LVL162:
 2538              	.LFB75:
 466:armwave.c     **** 
 467:armwave.c     **** /*
 468:armwave.c     ****  * Make a test AM waveform for render tests.
 469:armwave.c     ****  *
 470:armwave.c     ****  * @param   mod                     modulation depth
 471:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 472:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 473:armwave.c     ****  */
 474:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 475:armwave.c     **** {
 2539              		.loc 1 475 1 is_stmt 1 view -0
 2540              		.cfi_startproc
 2541              		@ args = 0, pretend = 0, frame = 8
 2542              		@ frame_needed = 0, uses_anonymous_args = 0
 476:armwave.c     ****     float v, noise, xnoise, mod_val;
 2543              		.loc 1 476 5 view .LVU622
 477:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2544              		.loc 1 477 5 view .LVU623
 2545              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2546              		.loc 1 475 1 is_stmt 0 view .LVU624
 2547 0b7c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2548              		.cfi_def_cfa_offset 32
 2549              		.cfi_offset 4, -32
 2550              		.cfi_offset 5, -28
 2551              		.cfi_offset 6, -24
 2552              		.cfi_offset 7, -20
 2553              		.cfi_offset 8, -16
 2554              		.cfi_offset 9, -12
 2555              		.cfi_offset 10, -8
 2556              		.cfi_offset 14, -4
 2557              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2558              		.loc 1 477 38 view .LVU625
 2559 0b80 7A7A9FED 		vldr.32	s14, .L178	@ tmp180,
 2560              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2561              		.loc 1 477 55 view .LVU626
 2562 0b84 00529FE5 		ldr	r5, .L178+28	@ tmp250,
 2563              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2564              		.loc 1 475 1 view .LVU627
 2565 0b88 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2566              		.cfi_def_cfa_offset 80
 2567              		.cfi_offset 80, -80
 2568              		.cfi_offset 81, -76
 2569              		.cfi_offset 82, -72
 2570              		.cfi_offset 83, -68
 2571              		.cfi_offset 84, -64
 2572              		.cfi_offset 85, -60
 2573              		.cfi_offset 86, -56
 2574              		.cfi_offset 87, -52
 2575              		.cfi_offset 88, -48
 2576              		.cfi_offset 89, -44
 2577              		.cfi_offset 90, -40
 2578              		.cfi_offset 91, -36
 2579 0b8c 0090A0E1 		mov	r9, r0	@ sets, sets
 2580              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2581              		.loc 1 477 38 view .LVU628
 2582 0b90 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2583              	@ armwave.c:481:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 478:armwave.c     ****     int s, set_offset = 0;
 479:armwave.c     ****     int w, x;
 480:armwave.c     **** 
 481:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2584              		.loc 1 481 70 view .LVU629
 2585 0b94 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2586 0b98 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2587              	.LBB41:
 2588              	.LBB42:
 2589              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2590              		.loc 1 424 23 view .LVU630
 2591 0b9c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2592              	.LVL163:
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2593              		.loc 1 424 23 view .LVU631
 2594              	.LBE42:
 2595              	.LBE41:
 2596              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 477:armwave.c     ****     int s, set_offset = 0;
 2597              		.loc 1 477 38 view .LVU632
 2598 0ba0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2599              	@ armwave.c:481:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2600              		.loc 1 481 70 view .LVU633
 2601 0ba4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2602              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2603              		.loc 1 475 1 view .LVU634
 2604 0ba8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2605              	.LBB46:
 2606              	.LBB43:
 2607              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2608              		.loc 1 424 7 view .LVU635
 2609 0bac 000050E3 		cmp	r0, #0	@ _82,
 2610              	.LBE43:
 2611              	.LBE46:
 2612              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2613              		.loc 1 475 1 view .LVU636
 2614 0bb0 08D04DE2 		sub	sp, sp, #8	@,,
 2615              		.cfi_def_cfa_offset 88
 2616              	@ armwave.c:482:     g_armwave_state.test_wave_buffer_nsets = sets;
 482:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2617              		.loc 1 482 44 view .LVU637
 2618 0bb4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2619              	@ armwave.c:481:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 481:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2620              		.loc 1 481 45 view .LVU638
 2621 0bb8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2622              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 477:armwave.c     ****     int s, set_offset = 0;
 2623              		.loc 1 477 38 view .LVU639
 2624 0bbc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2625              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 477:armwave.c     ****     int s, set_offset = 0;
 2626              		.loc 1 477 11 view .LVU640
 2627 0bc0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2628              	.LVL164:
 478:armwave.c     ****     int w, x;
 2629              		.loc 1 478 5 is_stmt 1 view .LVU641
 479:armwave.c     **** 
 2630              		.loc 1 479 5 view .LVU642
 481:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2631              		.loc 1 481 5 view .LVU643
 2632              		.loc 1 482 5 view .LVU644
 483:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2633              		.loc 1 483 5 view .LVU645
 2634              	.LBB47:
 2635              	.LBI41:
 422:armwave.c     **** {
 2636              		.loc 1 422 6 view .LVU646
 2637              	.LBB44:
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2638              		.loc 1 424 5 view .LVU647
 2639              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2640              		.loc 1 424 7 is_stmt 0 view .LVU648
 2641 0bc4 0000000A 		beq	.L148		@,
 425:armwave.c     ****     }
 2642              		.loc 1 425 9 is_stmt 1 view .LVU649
 2643 0bc8 FEFFFFEB 		bl	free		@
 2644              	.LVL165:
 2645              	.L148:
 430:armwave.c     **** 
 2646              		.loc 1 430 5 view .LVU650
 2647              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2648              		.loc 1 430 75 is_stmt 0 view .LVU651
 2649 0bcc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2650 0bd0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2651              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2652              		.loc 1 430 40 view .LVU652
 2653 0bd4 0910A0E1 		mov	r1, r9	@, sets
 2654              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2655              		.loc 1 430 75 view .LVU653
 2656 0bd8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2657              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2658              		.loc 1 430 40 view .LVU654
 2659 0bdc 0400A0E1 		mov	r0, r4	@, _85
 2660 0be0 FEFFFFEB 		bl	calloc		@
 2661              	.LVL166:
 2662              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2663              		.loc 1 432 7 view .LVU655
 2664 0be4 000050E3 		cmp	r0, #0	@ tmp191,
 2665              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2666              		.loc 1 430 38 view .LVU656
 2667 0be8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2668              		.loc 1 432 5 is_stmt 1 view .LVU657
 2669              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2670              		.loc 1 432 7 is_stmt 0 view .LVU658
 2671 0bec 5A00000A 		beq	.L177		@,
 2672              	.L149:
 2673              	.LVL167:
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2674              		.loc 1 432 7 view .LVU659
 2675              	.LBE44:
 2676              	.LBE47:
 2677              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 484:armwave.c     **** 
 485:armwave.c     ****     for(s = 0; s < sets; s++) {
 2678              		.loc 1 485 5 discriminator 1 view .LVU660
 2679 0bf0 000059E3 		cmp	r9, #0	@ sets,
 2680 0bf4 550000DA 		ble	.L147		@,
 2681              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 487:armwave.c     ****     
 488:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 490:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 491:armwave.c     **** 
 492:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****                 noise *= noise;
 495:armwave.c     ****                 noise *= noise;
 496:armwave.c     ****                 noise *= noise;
 497:armwave.c     **** 
 498:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 499:armwave.c     ****                     noise = -noise;
 500:armwave.c     **** 
 501:armwave.c     ****                 noise += 1.0f;
 502:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 504:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2682              		.loc 1 504 45 view .LVU661
 2683 0bf8 5C8A9FED 		vldr.32	s16, .L178	@ tmp258,
 2684              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 506:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 507:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2685              		.loc 1 507 104 view .LVU662
 2686 0bfc 5CCA9FED 		vldr.32	s24, .L178+4	@ tmp259,
 2687              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2688              		.loc 1 485 5 view .LVU663
 2689 0c00 0070A0E3 		mov	r7, #0	@ set_offset,
 2690              	@ armwave.c:486:         printf("Calculating test set %d\n", s);
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2691              		.loc 1 486 9 view .LVU664
 2692 0c04 84A19FE5 		ldr	r10, .L178+32	@ tmp257,
 2693              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2694              		.loc 1 485 5 view .LVU665
 2695 0c08 0780A0E1 		mov	r8, r7	@ s, set_offset
 2696              	.LVL168:
 2697              	.L150:
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2698              		.loc 1 486 9 is_stmt 1 view .LVU666
 2699 0c0c 0810A0E1 		mov	r1, r8	@, s
 2700 0c10 0A00A0E1 		mov	r0, r10	@, tmp257
 2701 0c14 FEFFFFEB 		bl	printf		@
 2702              	.LVL169:
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2703              		.loc 1 488 9 view .LVU667
 2704              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2705              		.loc 1 488 39 is_stmt 0 view .LVU668
 2706 0c18 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2707              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2708              		.loc 1 488 9 view .LVU669
 2709 0c1c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2710 0c20 450000DA 		ble	.L151		@,
 2711              	@ armwave.c:490:             mod_val = 0.5f + (_1_waves_mod * w);
 490:armwave.c     **** 
 2712              		.loc 1 490 21 view .LVU670
 2713 0c24 53CADFED 		vldr.32	s25, .L178+8	@ tmp200,
 2714              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2715              		.loc 1 504 33 view .LVU671
 2716 0c28 53BA9FED 		vldr.32	s22, .L178+12	@ tmp253,
 2717              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2718              		.loc 1 502 24 view .LVU672
 2719 0c2c 53AADFED 		vldr.32	s21, .L178+16	@ tmp254,
 2720 0c30 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2721              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2722              		.loc 1 488 15 view .LVU673
 2723 0c34 0060A0E3 		mov	r6, #0	@ w,
 2724              	.LVL170:
 2725              	.L158:
 490:armwave.c     **** 
 2726              		.loc 1 490 13 is_stmt 1 view .LVU674
 2727              	@ armwave.c:490:             mod_val = 0.5f + (_1_waves_mod * w);
 490:armwave.c     **** 
 2728              		.loc 1 490 21 is_stmt 0 view .LVU675
 2729 0c38 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2730 0c3c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2731              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2732              		.loc 1 492 13 view .LVU676
 2733 0c40 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2734              	@ armwave.c:490:             mod_val = 0.5f + (_1_waves_mod * w);
 490:armwave.c     **** 
 2735              		.loc 1 490 21 view .LVU677
 2736 0c44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2737 0c48 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2738              	.LVL171:
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2739              		.loc 1 492 13 is_stmt 1 view .LVU678
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2740              		.loc 1 492 13 is_stmt 0 view .LVU679
 2741 0c4c 370000DA 		ble	.L152		@,
 2742 0c50 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2743              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2744              		.loc 1 507 113 view .LVU680
 2745 0c54 4AAA9FED 		vldr.32	s20, .L178+20	@ tmp229,
 2746 0c58 4A8ADFED 		vldr.32	s17, .L178+24	@ tmp230,
 2747              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2748              		.loc 1 492 19 view .LVU681
 2749 0c5c 0040A0E3 		mov	r4, #0	@ x,
 2750              	.LVL172:
 2751              	.L157:
 493:armwave.c     ****                 noise *= noise;
 2752              		.loc 1 493 17 is_stmt 1 view .LVU682
 2753              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2754              		.loc 1 493 28 is_stmt 0 view .LVU683
 2755 0c60 FEFFFFEB 		bl	rand		@
 2756              	.LVL173:
 2757              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2758              		.loc 1 493 35 view .LVU684
 2759 0c64 7000FFE6 		uxth	r0, r0	@ tmp201,
 2760              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2761              		.loc 1 493 45 view .LVU685
 2762 0c68 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2763 0c6c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2764              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2765              		.loc 1 493 24 view .LVU686
 2766 0c70 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2767              	.LVL174:
 494:armwave.c     ****                 noise *= noise;
 2768              		.loc 1 494 17 is_stmt 1 view .LVU687
 2769              	@ armwave.c:494:                 noise *= noise;
 494:armwave.c     ****                 noise *= noise;
 2770              		.loc 1 494 23 is_stmt 0 view .LVU688
 2771 0c74 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2772              	.LVL175:
 495:armwave.c     ****                 noise *= noise;
 2773              		.loc 1 495 17 is_stmt 1 view .LVU689
 2774              	@ armwave.c:495:                 noise *= noise;
 495:armwave.c     ****                 noise *= noise;
 2775              		.loc 1 495 23 is_stmt 0 view .LVU690
 2776 0c78 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2777              	.LVL176:
 496:armwave.c     **** 
 2778              		.loc 1 496 17 is_stmt 1 view .LVU691
 2779              	@ armwave.c:496:                 noise *= noise;
 496:armwave.c     **** 
 2780              		.loc 1 496 23 is_stmt 0 view .LVU692
 2781 0c7c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2782              	.LVL177:
 498:armwave.c     ****                     noise = -noise;
 2783              		.loc 1 498 17 is_stmt 1 view .LVU693
 2784              	@ armwave.c:498:                 if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                     noise = -noise;
 2785              		.loc 1 498 21 is_stmt 0 view .LVU694
 2786 0c80 FEFFFFEB 		bl	rand		@
 2787              	.LVL178:
 499:armwave.c     **** 
 2788              		.loc 1 499 21 is_stmt 1 view .LVU695
 2789              	@ armwave.c:498:                 if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                     noise = -noise;
 2790              		.loc 1 498 19 is_stmt 0 view .LVU696
 2791 0c84 020910E3 		tst	r0, #32768	@,
 2792              	@ armwave.c:499:                     noise = -noise;
 499:armwave.c     **** 
 2793              		.loc 1 499 27 view .LVU697
 2794 0c88 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2795              	.LVL179:
 501:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2796              		.loc 1 501 17 is_stmt 1 view .LVU698
 502:armwave.c     **** 
 2797              		.loc 1 502 17 view .LVU699
 2798              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2799              		.loc 1 502 27 is_stmt 0 view .LVU700
 2800 0c8c FEFFFFEB 		bl	rand		@
 2801              	.LVL180:
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2802              		.loc 1 504 17 is_stmt 1 view .LVU701
 2803              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2804              		.loc 1 504 45 is_stmt 0 view .LVU702
 2805 0c90 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2806              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2807              		.loc 1 504 33 view .LVU703
 2808 0c94 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2809              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2810              		.loc 1 504 45 view .LVU704
 2811 0c98 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2812              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2813              		.loc 1 504 33 view .LVU705
 2814 0c9c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2815              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2816              		.loc 1 504 45 view .LVU706
 2817 0ca0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2818              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2819              		.loc 1 504 33 view .LVU707
 2820 0ca4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2821              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2822              		.loc 1 502 34 view .LVU708
 2823 0ca8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2824              	.LVL181:
 2825              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2826              		.loc 1 502 44 view .LVU709
 2827 0cac 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2828 0cb0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2829              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2830              		.loc 1 502 24 view .LVU710
 2831 0cb4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2832              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2833              		.loc 1 504 77 view .LVU711
 2834 0cb8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2835              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2836              		.loc 1 504 22 view .LVU712
 2837 0cbc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2838 0cc0 FEFFFFEB 		bl	sin		@
 2839              	.LVL182:
 2840              		.loc 1 507 17 is_stmt 1 view .LVU713
 2841              	@ armwave.c:501:                 noise += 1.0f;
 501:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2842              		.loc 1 501 23 is_stmt 0 view .LVU714
 2843 0cc4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2844              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2845              		.loc 1 507 104 view .LVU715
 2846 0cc8 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 2847              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2848              		.loc 1 504 98 view .LVU716
 2849 0ccc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2850              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2851              		.loc 1 504 87 view .LVU717
 2852 0cd0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2853              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2854              		.loc 1 504 98 view .LVU718
 2855 0cd4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2856              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2857              		.loc 1 504 19 view .LVU719
 2858 0cd8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2859              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2860              		.loc 1 507 113 view .LVU720
 2861 0cdc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2862 0ce0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2863 0ce4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2864 0ce8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2865 0cec 050000DA 		ble	.L154		@,
 2866              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2867              		.loc 1 507 104 discriminator 1 view .LVU721
 2868 0cf0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2869 0cf4 FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 2870 0cf8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2871 0cfc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2872 0d00 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2873 0d04 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 2874              	.L154:
 2875              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2876              		.loc 1 507 57 discriminator 12 view .LVU722
 2877 0d08 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2878              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2879              		.loc 1 507 102 discriminator 12 view .LVU723
 2880 0d0c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2881 0d10 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2882 0d14 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2883              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2884              		.loc 1 492 58 discriminator 12 view .LVU724
 2885 0d18 014084E2 		add	r4, r4, #1	@ x, x,
 2886              	.LVL183:
 2887              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2888              		.loc 1 507 102 discriminator 12 view .LVU725
 2889 0d1c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 2890              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2891              		.loc 1 492 43 discriminator 12 view .LVU726
 2892 0d20 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2893              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2894              		.loc 1 492 13 discriminator 12 view .LVU727
 2895 0d24 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2896 0d28 CCFFFFCA 		bgt	.L157		@,
 2897 0d2c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2898              	.LVL184:
 2899              	.L152:
 2900              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2901              		.loc 1 488 48 discriminator 2 view .LVU728
 2902 0d30 016086E2 		add	r6, r6, #1	@ w, w,
 2903              	.LVL185:
 2904              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2905              		.loc 1 488 9 discriminator 2 view .LVU729
 2906 0d34 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2907 0d38 BEFFFFBA 		blt	.L158		@,
 2908              	.LVL186:
 2909              	.L151:
 508:armwave.c     ****             }
 509:armwave.c     ****         }
 510:armwave.c     **** 
 511:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2910              		.loc 1 511 9 is_stmt 1 discriminator 2 view .LVU730
 2911              	@ armwave.c:511:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2912              		.loc 1 511 46 is_stmt 0 discriminator 2 view .LVU731
 2913 0d3c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2914              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2915              		.loc 1 485 27 discriminator 2 view .LVU732
 2916 0d40 018088E2 		add	r8, r8, #1	@ s, s,
 2917              	.LVL187:
 2918              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2919              		.loc 1 485 5 discriminator 2 view .LVU733
 2920 0d44 080059E1 		cmp	r9, r8	@ sets, s
 2921              	@ armwave.c:511:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2922              		.loc 1 511 20 discriminator 2 view .LVU734
 2923 0d48 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2924              	.LVL188:
 2925              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2926              		.loc 1 485 5 discriminator 2 view .LVU735
 2927 0d4c AEFFFF1A 		bne	.L150		@,
 2928              	.LVL189:
 2929              	.L147:
 2930              	@ armwave.c:513: }
 512:armwave.c     ****     }
 513:armwave.c     **** }
 2931              		.loc 1 513 1 view .LVU736
 2932 0d50 08D08DE2 		add	sp, sp, #8	@,,
 2933              		.cfi_remember_state
 2934              		.cfi_def_cfa_offset 80
 2935              		@ sp needed	@
 2936 0d54 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2937              		.cfi_restore 90
 2938              		.cfi_restore 91
 2939              		.cfi_restore 88
 2940              		.cfi_restore 89
 2941              		.cfi_restore 86
 2942              		.cfi_restore 87
 2943              		.cfi_restore 84
 2944              		.cfi_restore 85
 2945              		.cfi_restore 82
 2946              		.cfi_restore 83
 2947              		.cfi_restore 80
 2948              		.cfi_restore 81
 2949              		.cfi_def_cfa_offset 32
 2950              	.LVL190:
 2951              		.loc 1 513 1 view .LVU737
 2952 0d58 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2953              	.LVL191:
 2954              	.L177:
 2955              		.cfi_restore_state
 2956              	.LBB48:
 2957              	.LBB45:
 433:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2958              		.loc 1 433 9 is_stmt 1 view .LVU738
 2959 0d5c 940901E0 		mul	r1, r4, r9	@, _85, sets
 2960 0d60 0920A0E1 		mov	r2, r9	@, sets
 2961 0d64 28009FE5 		ldr	r0, .L178+36	@,
 2962 0d68 FEFFFFEB 		bl	printf		@
 2963              	.LVL192:
 435:armwave.c     ****     }
 2964              		.loc 1 435 9 view .LVU739
 2965 0d6c 9FFFFFEA 		b	.L149		@
 2966              	.L179:
 2967              		.align	2
 2968              	.L178:
 2969 0d70 0000803F 		.word	1065353216
 2970 0d74 00007F43 		.word	1132396544
 2971 0d78 0000003F 		.word	1056964608
 2972 0d7c C3F5C840 		.word	1086911939
 2973 0d80 38FFC74A 		.word	1254620984
 2974 0d84 0000FE42 		.word	1123942400
 2975 0d88 00000043 		.word	1124073472
 2976 0d8c 00000000 		.word	g_armwave_state
 2977 0d90 7C020000 		.word	.LC19
 2978 0d94 D4010000 		.word	.LC17
 2979              	.LBE45:
 2980              	.LBE48:
 2981              		.cfi_endproc
 2982              	.LFE75:
 2984              		.align	2
 2985              		.global	armwave_cleanup
 2986              		.syntax unified
 2987              		.arm
 2988              		.fpu vfp
 2990              	armwave_cleanup:
 2991              	.LFB76:
 514:armwave.c     **** 
 515:armwave.c     **** /*
 516:armwave.c     ****  * Make a test square waveform.
 517:armwave.c     ****  *
 518:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 519:armwave.c     ****  */
 520:armwave.c     **** #if 0
 521:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 522:armwave.c     **** {
 523:armwave.c     ****     uint8_t v;
 524:armwave.c     ****     float noise, xnoise;
 525:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 526:armwave.c     ****     int w, x;
 527:armwave.c     **** 
 528:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 529:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 530:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 531:armwave.c     ****             noise *= noise;
 532:armwave.c     ****             noise *= noise;
 533:armwave.c     ****             noise *= noise;
 534:armwave.c     **** 
 535:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 536:armwave.c     ****                 noise = -noise;
 537:armwave.c     **** 
 538:armwave.c     ****             //noise += 1.0f;
 539:armwave.c     **** 
 540:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 541:armwave.c     ****                 new_level = 0.2f;
 542:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 543:armwave.c     ****                 new_level = 0.8f;
 544:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 545:armwave.c     ****                 new_level = 0.2f;
 546:armwave.c     ****             } else {
 547:armwave.c     ****                 new_level = 0.8f;
 548:armwave.c     ****             }
 549:armwave.c     **** 
 550:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 551:armwave.c     **** 
 552:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 553:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 554:armwave.c     ****         }
 555:armwave.c     ****     }
 556:armwave.c     **** }
 557:armwave.c     **** #endif
 558:armwave.c     **** 
 559:armwave.c     **** /*
 560:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 561:armwave.c     ****  */
 562:armwave.c     **** void armwave_cleanup()
 563:armwave.c     **** {
 2992              		.loc 1 563 1 view -0
 2993              		.cfi_startproc
 2994              		@ args = 0, pretend = 0, frame = 0
 2995              		@ frame_needed = 0, uses_anonymous_args = 0
 564:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2996              		.loc 1 564 5 view .LVU741
 2997              	@ armwave.c:563: {
 563:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2998              		.loc 1 563 1 is_stmt 0 view .LVU742
 2999 0d98 10402DE9 		push	{r4, lr}	@
 3000              		.cfi_def_cfa_offset 8
 3001              		.cfi_offset 4, -8
 3002              		.cfi_offset 14, -4
 3003              	@ armwave.c:564:     free(g_armwave_state.out_pixbuf);
 3004              		.loc 1 564 25 view .LVU743
 3005 0d9c 34409FE5 		ldr	r4, .L182	@ tmp114,
 3006              	@ armwave.c:564:     free(g_armwave_state.out_pixbuf);
 3007              		.loc 1 564 5 view .LVU744
 3008 0da0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3009 0da4 FEFFFFEB 		bl	free		@
 3010              	.LVL193:
 565:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3011              		.loc 1 565 5 is_stmt 1 view .LVU745
 3012 0da8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3013 0dac FEFFFFEB 		bl	free		@
 3014              	.LVL194:
 566:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3015              		.loc 1 566 5 view .LVU746
 3016 0db0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3017 0db4 FEFFFFEB 		bl	free		@
 3018              	.LVL195:
 567:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3019              		.loc 1 567 5 view .LVU747
 3020 0db8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3021 0dbc FEFFFFEB 		bl	free		@
 3022              	.LVL196:
 568:armwave.c     **** 
 569:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3023              		.loc 1 569 5 view .LVU748
 3024              	@ armwave.c:569:     g_armwave_state.out_pixbuf = NULL;
 3025              		.loc 1 569 32 is_stmt 0 view .LVU749
 3026 0dc0 0030A0E3 		mov	r3, #0	@ tmp123,
 3027 0dc4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 570:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3028              		.loc 1 570 5 is_stmt 1 view .LVU750
 3029              	@ armwave.c:570:     g_armwave_state.ch1_buffer = NULL;
 3030              		.loc 1 570 32 is_stmt 0 view .LVU751
 3031 0dc8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 571:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3032              		.loc 1 571 5 is_stmt 1 view .LVU752
 3033              	@ armwave.c:571:     g_armwave_state.xcoord_to_xpixel = NULL;
 3034              		.loc 1 571 38 is_stmt 0 view .LVU753
 3035 0dcc 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 572:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3036              		.loc 1 572 5 is_stmt 1 view .LVU754
 3037              	@ armwave.c:572:     g_armwave_state.test_wave_buffer = NULL;
 3038              		.loc 1 572 38 is_stmt 0 view .LVU755
 3039 0dd0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3040              	@ armwave.c:573: }
 573:armwave.c     **** }
 3041              		.loc 1 573 1 view .LVU756
 3042 0dd4 1080BDE8 		pop	{r4, pc}	@
 3043              	.L183:
 3044              		.align	2
 3045              	.L182:
 3046 0dd8 00000000 		.word	g_armwave_state
 3047              		.cfi_endproc
 3048              	.LFE76:
 3050              		.comm	gamma_table,256,4
 3051              		.comm	g_armwave_state,136,4
 3052              		.section	.rodata
 3053              		.align	2
 3054              		.set	.LANCHOR0,. + 0
 3057              	__PRETTY_FUNCTION__.17124:
 3058 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3058      6176655F 
 3058      73657475 
 3058      705F7265 
 3058      6E646572 
 3059 0015 000000   		.space	3
 3062              	__PRETTY_FUNCTION__.17131:
 3063 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3063      6176655F 
 3063      7365745F 
 3063      77617665 
 3063      5F706F69 
 3064 0031 000000   		.space	3
 3067              	__PRETTY_FUNCTION__.17138:
 3068 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3068      6176655F 
 3068      7365745F 
 3068      77617665 
 3068      5F706F69 
 3069              		.section	.rodata.str1.4,"aMS",%progbits,1
 3070              		.align	2
 3071              	.LC0:
 3072 0000 76302E30 		.ascii	"v0.0.1\000"
 3072      2E3100
 3073 0007 00       		.space	1
 3074              	.LC1:
 3075 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3075      61766520 
 3075      76657273 
 3075      696F6E3A 
 3075      2025730A 
 3076 001d 000000   		.space	3
 3077              	.LC2:
 3078 0020 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3078      20653D25 
 3078      6420773D 
 3078      25642077 
 3078      733D2564 
 3079              	.LC3:
 3080 004c 61726D77 		.ascii	"armwave.c\000"
 3080      6176652E 
 3080      6300
 3081 0056 0000     		.space	2
 3082              	.LC4:
 3083 0058 73746172 		.ascii	"start_point < end_point\000"
 3083      745F706F 
 3083      696E7420 
 3083      3C20656E 
 3083      645F706F 
 3084              	.LC5:
 3085 0070 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3085      7566665F 
 3085      73697A65 
 3085      3D25642C 
 3085      20636D70 
 3086 00a3 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3086      5F776964 
 3086      74683D25 
 3086      642C2077 
 3086      6176655F 
 3087 00cd 000000   		.space	3
 3088              	.LC6:
 3089 00d0 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3089      6D776176 
 3089      655F7374 
 3089      6174652E 
 3089      6368315F 
 3090 00f3 00       		.space	1
 3091              	.LC7:
 3092 00f4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3092      6D776176 
 3092      655F7374 
 3092      6174652E 
 3092      78636F6F 
 3093 011d 000000   		.space	3
 3094              	.LC8:
 3095 0120 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3095      3A203078 
 3095      25303878 
 3095      20307825 
 3095      30387820 
 3096              	.LC9:
 3097 0144 77617665 		.ascii	"wave_buffer != NULL\000"
 3097      5F627566 
 3097      66657220 
 3097      213D204E 
 3097      554C4C00 
 3098              	.LC10:
 3099 0158 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3099      6176655F 
 3099      7365745F 
 3099      77617665 
 3099      5F706F69 
 3100 018b 78636565 		.ascii	"xceeded\000"
 3100      64656400 
 3101 0193 00       		.space	1
 3102              	.LC11:
 3103 0194 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3103      5F627566 
 3103      6665725F 
 3103      70747220 
 3103      213D2030 
 3104 01a9 000000   		.space	3
 3105              	.LC12:
 3106 01ac 776200   		.ascii	"wb\000"
 3107 01af 00       		.space	1
 3108              	.LC13:
 3109 01b0 50330A00 		.ascii	"P3\012\000"
 3110              	.LC14:
 3111 01b4 25642025 		.ascii	"%d %d\012\000"
 3111      640A00
 3112 01bb 00       		.space	1
 3113              	.LC15:
 3114 01bc 3235350A 		.ascii	"255\012\000"
 3114      00
 3115 01c1 000000   		.space	3
 3116              	.LC16:
 3117 01c4 25336420 		.ascii	"%3d %3d %3d\012\000"
 3117      25336420 
 3117      2533640A 
 3117      00
 3118 01d1 000000   		.space	3
 3119              	.LC17:
 3120 01d4 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3120      6176655F 
 3120      74657374 
 3120      5F627566 
 3120      6665725F 
 3121 0207 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3121      20627566 
 3121      66657220 
 3121      28256420 
 3121      62797465 
 3122              	.LC18:
 3123 0228 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3123      6176655F 
 3123      66696C6C 
 3123      5F706978 
 3123      6275665F 
 3124 025b 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3124      20666169 
 3124      6C65642C 
 3124      20726574 
 3124      75726E69 
 3125 027a 0000     		.space	2
 3126              	.LC19:
 3127 027c 43616C63 		.ascii	"Calculating test set %d\012\000"
 3127      756C6174 
 3127      696E6720 
 3127      74657374 
 3127      20736574 
 3128              		.text
 3129              	.Letext0:
 3130              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3131              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3132              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3133              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3134              		.file 7 "/usr/include/stdio.h"
 3135              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3136              		.file 9 "/usr/include/errno.h"
 3137              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3138              		.file 11 "/usr/include/unistd.h"
 3139              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3140              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3141              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3142              		.file 15 "/usr/include/math.h"
 3143              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3144              		.file 17 "/usr/include/time.h"
 3145              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3146              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3147              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3148              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3149              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3150              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3151              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3152              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3153              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3154              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3155              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3156              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3157              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3158              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3159              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3160              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3161              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3162              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3163              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3164              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3165              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3166              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3167              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3168              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3169              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3170              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3171              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3172              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3173              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3174              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3175              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3176              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3177              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3178              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3179              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3180              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3181              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3182              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3183              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3184              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3185              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3186              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3187              		.file 60 "/usr/local/include/python3.8/context.h"
 3188              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3189              		.file 62 "/usr/local/include/python3.8/code.h"
 3190              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3191              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3192              		.file 65 "/usr/local/include/python3.8/import.h"
 3193              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3194              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3195              		.file 68 "/usr/include/malloc.h"
 3196              		.file 69 "armwave.h"
 3197              		.file 70 "/usr/include/stdlib.h"
 3198              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3199              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3200              		.file 73 "<built-in>"
 3201              		.file 74 "/usr/include/assert.h"
