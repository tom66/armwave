   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 A8419FE5 		ldr	r4, .L27	@ tmp313,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 14D04DE2 		sub	sp, sp, #20	@,,
 255              		.cfi_def_cfa_offset 56
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 65 view .LVU35
 261 00b0 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 263              		.loc 1 71 130 view .LVU36
 264 00b4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 265              	.LVL7:
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 930003E0 		mul	r3, r3, r0	@ tmp214, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0520A0E1 		mov	r2, r5	@, _1
 275 00c4 41008DE8 		stm	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2334A0E1 		lsr	r3, r3, #8	@ tmp216, tmp214,
 279              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 84019FE5 		ldr	r0, .L27+4	@,
 282              	.LVL8:
 283              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 284              		.loc 1 71 130 view .LVU42
 285 00d0 910303E0 		mul	r3, r1, r3	@ _7, g_armwave_state.bitdepth_height, tmp216
 286              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 287              		.loc 1 71 23 view .LVU43
 288 00d4 035085E0 		add	r5, r5, r3	@ write_buffer_base, _1, _7
 289              	.LVL9:
 290              		.loc 1 73 5 is_stmt 1 view .LVU44
 291 00d8 0510A0E1 		mov	r1, r5	@, write_buffer_base
 292 00dc FEFFFFEB 		bl	printf		@
 293              	.LVL10:
  74:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
  75:armwave.c     ****         slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 294              		.loc 1 78 5 view .LVU45
 295              		.loc 1 78 5 is_stmt 0 view .LVU46
 296 00e0 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 297 00e4 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 298 00e8 570000DA 		ble	.L11		@,
 299 00ec 000056E3 		cmp	r6, #0	@ height,
 300 00f0 5500000A 		beq	.L11		@,
 301 00f4 043047E2 		sub	r3, r7, #4	@ tmp312, slice_y,
 302 00f8 0C308DE5 		str	r3, [sp, #12]	@ tmp312, %sfp
 303              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 78 11 view .LVU47
 305 00fc 0030A0E3 		mov	r3, #0	@ w,
 306 0100 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 307              	.LVL11:
 308              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 9 is_stmt 1 view .LVU48
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 83 9 view .LVU49
 311              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 64 is_stmt 0 view .LVU50
 313 0104 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 314 0108 08109DE5 		ldr	r1, [sp, #8]	@ w, %sfp
 315 010c 0C009DE5 		ldr	r0, [sp, #12]	@ tmp312, %sfp
 316 0110 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 317 0114 930123E0 		mla	r3, r3, r1, r0	@ tmp227, g_armwave_state.wave_stride, w, tmp312
 318              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 319              		.loc 1 83 16 view .LVU51
 320 0118 0020A0E3 		mov	r2, #0	@ yy,
 321 011c 038088E0 		add	r8, r8, r3	@ ivtmp.40, g_armwave_state.wave_buffer, tmp227
 322              	.LVL12:
 323              	.L17:
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 324              		.loc 1 84 13 is_stmt 1 view .LVU52
  85:armwave.c     **** 
  86:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  87:armwave.c     ****                 // maybe worth preloading the base address here...
  88:armwave.c     ****                 scale_value = word & 0xff;
  89:armwave.c     ****                 
  90:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  91:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  92:armwave.c     ****                     continue;
  93:armwave.c     **** 
  94:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  95:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  96:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  97:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
  98:armwave.c     ****                 write_buffer = write_buffer_base + \
 325              		.loc 1 98 17 view .LVU53
  99:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 100:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 326              		.loc 1 100 17 view .LVU54
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 327              		.loc 1 98 17 view .LVU55
 328              		.loc 1 100 17 view .LVU56
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 98 17 view .LVU57
 330              		.loc 1 100 17 view .LVU58
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 98 17 view .LVU59
 332              		.loc 1 100 17 view .LVU60
 333              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 334              		.loc 1 84 18 is_stmt 0 view .LVU61
 335 0120 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _183, offset: 0B]
 336              	.LVL13:
  86:armwave.c     ****                 // maybe worth preloading the base address here...
 337              		.loc 1 86 13 is_stmt 1 view .LVU62
  88:armwave.c     ****                 
 338              		.loc 1 88 17 view .LVU63
  91:armwave.c     ****                     continue;
 339              		.loc 1 91 17 view .LVU64
 340              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 341              		.loc 1 99 34 is_stmt 0 view .LVU65
 342 0124 01B082E2 		add	fp, r2, #1	@ tmp257, yy,
 343              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 344              		.loc 1 91 20 view .LVU66
 345 0128 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 346 012c 0110A003 		moveq	r1, #1	@ tmp230,
 347 0130 0010A013 		movne	r1, #0	@ tmp230,
 348              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 349              		.loc 1 91 19 view .LVU67
 350 0134 FF0057E3 		cmp	r7, #255	@ scale_value,
 351 0138 01108103 		orreq	r1, r1, #1	@,, tmp235, tmp230
 352 013c 000051E3 		cmp	r1, #0	@ tmp235,
 353              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 354              		.loc 1 99 34 view .LVU68
 355 0140 02A082E2 		add	r10, r2, #2	@ tmp278, yy,
 356 0144 039082E2 		add	r9, r2, #3	@ tmp297, yy,
 357              	.LVL14:
 358              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****                 word >>= 8;
 359              		.loc 1 101 22 view .LVU69
 360 0148 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 361 014c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 362              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 363              		.loc 1 91 19 view .LVU70
 364 0150 3400001A 		bne	.L20		@,
 365              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 99 34 view .LVU71
 367 0154 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 369              		.loc 1 91 20 view .LVU72
 370 0158 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 371 015c 01E0A003 		moveq	lr, #1	@ tmp250,
 372              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 373              		.loc 1 99 34 view .LVU73
 374 0160 910201E0 		mul	r1, r1, r2	@ tmp237, g_armwave_state.cmp_x_bitdepth_scale, yy
 375              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 376              		.loc 1 91 20 view .LVU74
 377 0164 00E0A013 		movne	lr, #0	@ tmp250,
 378              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 379              		.loc 1 91 19 view .LVU75
 380 0168 FF005CE3 		cmp	ip, #255	@ scale_value,
 381 016c 01E08E03 		orreq	lr, lr, #1	@,, tmp255, tmp250
 382 0170 00005EE3 		cmp	lr, #0	@ tmp255,
 383              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 384              		.loc 1 100 47 view .LVU76
 385 0174 40E094E5 		ldr	lr, [r4, #64]	@ tmp324, g_armwave_state.bitdepth_height
 386              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 387              		.loc 1 99 74 view .LVU77
 388 0178 2114A0E1 		lsr	r1, r1, #8	@ tmp239, tmp237,
 389              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 390              		.loc 1 100 47 view .LVU78
 391 017c 9E7121E0 		mla	r1, lr, r1, r7	@ tmp243, tmp324, tmp239, scale_value
 392 0180 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_80, *_80
 393 0184 01E08EE2 		add	lr, lr, #1	@ tmp246, *_80,
 394 0188 01E0C5E7 		strb	lr, [r5, r1]	@ tmp246, *_80
 395              	.LVL15:
 396              		.loc 1 101 17 is_stmt 1 view .LVU79
  88:armwave.c     ****                 
 397              		.loc 1 88 17 view .LVU80
  91:armwave.c     ****                     continue;
 398              		.loc 1 91 17 view .LVU81
 399              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 400              		.loc 1 91 19 is_stmt 0 view .LVU82
 401 018c 2500001A 		bne	.L20		@,
 402              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 403              		.loc 1 99 34 view .LVU83
 404 0190 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 405              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 406              		.loc 1 99 99 view .LVU84
 407 0194 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 408              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 409              		.loc 1 91 20 view .LVU85
 410 0198 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 411              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 99 34 view .LVU86
 413 019c 9E0B0BE0 		mul	fp, lr, fp	@ tmp258, g_armwave_state.cmp_x_bitdepth_scale, tmp257
 414              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 415              		.loc 1 91 20 view .LVU87
 416 01a0 01E0A003 		moveq	lr, #1	@ tmp271,
 417 01a4 00E0A013 		movne	lr, #0	@ tmp271,
 418              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 419              		.loc 1 99 74 view .LVU88
 420 01a8 2BB4A0E1 		lsr	fp, fp, #8	@ tmp260, tmp258,
 421              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 422              		.loc 1 91 19 view .LVU89
 423 01ac FF0050E3 		cmp	r0, #255	@ scale_value,
 424 01b0 01E08E03 		orreq	lr, lr, #1	@,, tmp276, tmp271
 425              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 426              		.loc 1 100 47 view .LVU90
 427 01b4 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp264, g_armwave_state.bitdepth_height, tmp260, scale_value
 428              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 429              		.loc 1 91 19 view .LVU91
 430 01b8 00005EE3 		cmp	lr, #0	@ tmp276,
 431              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 432              		.loc 1 100 47 view .LVU92
 433 01bc 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_110, *_110
 434 01c0 011081E2 		add	r1, r1, #1	@ tmp267, *_110,
 435 01c4 0C10C5E7 		strb	r1, [r5, ip]	@ tmp267, *_110
 436              		.loc 1 101 17 is_stmt 1 view .LVU93
 437              	.LVL16:
  88:armwave.c     ****                 
 438              		.loc 1 88 17 view .LVU94
  91:armwave.c     ****                     continue;
 439              		.loc 1 91 17 view .LVU95
 440              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 441              		.loc 1 91 19 is_stmt 0 view .LVU96
 442 01c8 1600001A 		bne	.L20		@,
 443              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 444              		.loc 1 99 34 view .LVU97
 445 01cc 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 446              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 447              		.loc 1 99 99 view .LVU98
 448 01d0 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 449              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 450              		.loc 1 91 20 view .LVU99
 451 01d4 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 452              	.LVL17:
 453              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 454              		.loc 1 99 34 view .LVU100
 455 01d8 910A0AE0 		mul	r10, r1, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 456              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 457              		.loc 1 91 20 view .LVU101
 458 01dc 0110A003 		moveq	r1, #1	@ tmp291,
 459 01e0 0010A013 		movne	r1, #0	@ tmp291,
 460              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 461              		.loc 1 99 74 view .LVU102
 462 01e4 2AA4A0E1 		lsr	r10, r10, #8	@ tmp281, tmp279,
 463              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 464              		.loc 1 91 19 view .LVU103
 465 01e8 FF0053E3 		cmp	r3, #255	@ word,
 466 01ec 01108103 		orreq	r1, r1, #1	@,, tmp296, tmp291
 467              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 468              		.loc 1 100 47 view .LVU104
 469 01f0 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp285, g_armwave_state.bitdepth_height, tmp281, scale_value
 470              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 471              		.loc 1 91 19 view .LVU105
 472 01f4 000051E3 		cmp	r1, #0	@ tmp296,
 473              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 474              		.loc 1 100 47 view .LVU106
 475 01f8 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_140, *_140
 476 01fc 011081E2 		add	r1, r1, #1	@ tmp288, *_140,
 477 0200 0010C5E7 		strb	r1, [r5, r0]	@ tmp288, *_140
 478              		.loc 1 101 17 is_stmt 1 view .LVU107
 479              	.LVL18:
  88:armwave.c     ****                 
 480              		.loc 1 88 17 view .LVU108
  91:armwave.c     ****                     continue;
 481              		.loc 1 91 17 view .LVU109
 482              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 483              		.loc 1 91 19 is_stmt 0 view .LVU110
 484 0204 0700001A 		bne	.L20		@,
 485              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 486              		.loc 1 99 34 view .LVU111
 487 0208 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 488              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 489              		.loc 1 99 99 view .LVU112
 490 020c 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 491              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 492              		.loc 1 99 34 view .LVU113
 493 0210 910909E0 		mul	r9, r1, r9	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp297
 494              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 495              		.loc 1 99 74 view .LVU114
 496 0214 2994A0E1 		lsr	r9, r9, #8	@ tmp301, tmp299,
 497              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 498              		.loc 1 100 47 view .LVU115
 499 0218 903923E0 		mla	r3, r0, r9, r3	@ tmp305, g_armwave_state.bitdepth_height, tmp301, word
 500 021c 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_170, *_170
 501 0220 011081E2 		add	r1, r1, #1	@ tmp308, *_170,
 502 0224 0310C5E7 		strb	r1, [r5, r3]	@ tmp308, *_170
 503              		.loc 1 101 17 is_stmt 1 view .LVU116
 504              	.LVL19:
 505              	.L20:
 506              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 507              		.loc 1 83 37 is_stmt 0 view .LVU117
 508 0228 042082E2 		add	r2, r2, #4	@ yy, yy,
 509              	.LVL20:
 510              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 511              		.loc 1 83 9 view .LVU118
 512 022c 020056E1 		cmp	r6, r2	@ height, yy
 513 0230 BAFFFF8A 		bhi	.L17		@,
 514              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 515              		.loc 1 78 44 view .LVU119
 516 0234 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 517              	.LVL21:
 518              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 78 5 view .LVU120
 520 0238 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 521              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 522              		.loc 1 78 44 view .LVU121
 523 023c 012082E2 		add	r2, r2, #1	@ w, w,
 524              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 525              		.loc 1 78 5 view .LVU122
 526 0240 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 527              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 528              		.loc 1 78 44 view .LVU123
 529 0244 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 530              	.LVL22:
 531              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 78 5 view .LVU124
 533 0248 ADFFFFBA 		blt	.L18		@,
 534              	.LVL23:
 535              	.L11:
 536              	@ armwave.c:105: }
 102:armwave.c     ****             }
 103:armwave.c     ****         }
 104:armwave.c     ****     }
 105:armwave.c     **** }
 537              		.loc 1 105 1 view .LVU125
 538 024c 14D08DE2 		add	sp, sp, #20	@,,
 539              		.cfi_def_cfa_offset 36
 540              		@ sp needed	@
 541 0250 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 542              	.LVL24:
 543              	.L28:
 544              		.loc 1 105 1 view .LVU126
 545              		.align	2
 546              	.L27:
 547 0254 00000000 		.word	g_armwave_state
 548 0258 20000000 		.word	.LC2
 549              		.cfi_endproc
 550              	.LFE59:
 552              		.align	2
 553              		.global	armwave_fill_pixbuf_scaled
 554              		.syntax unified
 555              		.arm
 556              		.fpu vfp
 558              	armwave_fill_pixbuf_scaled:
 559              	.LVL25:
 560              	.LFB60:
 106:armwave.c     **** 
 107:armwave.c     **** #if 0
 108:armwave.c     **** /*
 109:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 110:armwave.c     ****  */
 111:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 112:armwave.c     **** {
 113:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 114:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 115:armwave.c     ****     uint8_t r, g, b, value;
 116:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 117:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 118:armwave.c     ****     uint32_t offset;
 119:armwave.c     **** 
 120:armwave.c     ****     assert(out_buffer != NULL);
 121:armwave.c     **** 
 122:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 123:armwave.c     **** 
 124:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 125:armwave.c     **** 
 126:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 127:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 128:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 129:armwave.c     ****         // most normal waveforms.
 130:armwave.c     ****         wave_word = *base_32ptr++;
 131:armwave.c     **** 
 132:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 133:armwave.c     ****             for(i = 0; i < 4; i++) {
 134:armwave.c     ****                 value = wave_word & 0xff;
 135:armwave.c     ****                 wave_word >>= 8;
 136:armwave.c     **** 
 137:armwave.c     ****                 if(value != 0) {
 138:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 139:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 140:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 141:armwave.c     **** 
 142:armwave.c     ****                     r = MIN(rr, 255);
 143:armwave.c     ****                     g = MIN(gg, 255);
 144:armwave.c     ****                     b = MIN(bb, 255);
 145:armwave.c     **** 
 146:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 147:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 148:armwave.c     **** 
 149:armwave.c     ****                     // Is there a better way?
 150:armwave.c     ****                     nsub = n + i;
 151:armwave.c     ****                     xx = nsub & 0xff;
 152:armwave.c     ****                     yy = nsub >> 8;
 153:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 154:armwave.c     ****                     *(out_buffer_base + offset) = word;
 155:armwave.c     ****                 }
 156:armwave.c     ****             }
 157:armwave.c     ****         } 
 158:armwave.c     ****     }
 159:armwave.c     **** }
 160:armwave.c     **** #endif
 161:armwave.c     **** 
 162:armwave.c     **** /*
 163:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 164:armwave.c     ****  * Rows are repeated as necessary.
 165:armwave.c     ****  */
 166:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 167:armwave.c     **** {
 561              		.loc 1 167 1 is_stmt 1 view -0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 168:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 565              		.loc 1 168 5 view .LVU128
 169:armwave.c     ****     // uint32_t ysub;
 170:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 566              		.loc 1 170 5 view .LVU129
 171:armwave.c     ****     uint8_t r, g, b, value; 
 567              		.loc 1 171 5 view .LVU130
 172:armwave.c     ****     // uint8_t row;
 173:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 568              		.loc 1 173 5 view .LVU131
 569              	@ armwave.c:167: {
 167:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 570              		.loc 1 167 1 is_stmt 0 view .LVU132
 571 025c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 572              		.cfi_def_cfa_offset 36
 573              		.cfi_offset 4, -36
 574              		.cfi_offset 5, -32
 575              		.cfi_offset 6, -28
 576              		.cfi_offset 7, -24
 577              		.cfi_offset 8, -20
 578              		.cfi_offset 9, -16
 579              		.cfi_offset 10, -12
 580              		.cfi_offset 11, -8
 581              		.cfi_offset 14, -4
 582              	@ armwave.c:177:     assert(out_buffer != NULL);
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 175:armwave.c     ****     uint32_t offset;
 176:armwave.c     **** 
 177:armwave.c     ****     assert(out_buffer != NULL);
 583              		.loc 1 177 5 view .LVU133
 584 0260 000050E3 		cmp	r0, #0	@ out_buffer
 585              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 173 15 view .LVU134
 587 0264 44619FE5 		ldr	r6, .L51	@ tmp203,
 588              	@ armwave.c:167: {
 167:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 589              		.loc 1 167 1 view .LVU135
 590 0268 0CD04DE2 		sub	sp, sp, #12	@,,
 591              		.cfi_def_cfa_offset 48
 592              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 593              		.loc 1 173 15 view .LVU136
 594 026c 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 595              	.LVL26:
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 596              		.loc 1 174 5 is_stmt 1 view .LVU137
 175:armwave.c     **** 
 597              		.loc 1 175 5 view .LVU138
 598              		.loc 1 177 5 view .LVU139
 599 0270 4900000A 		beq	.L48		@,
 178:armwave.c     **** 
 179:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 600              		.loc 1 179 5 view .LVU140
 601              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 602              		.loc 1 179 10 is_stmt 0 view .LVU141
 603 0274 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 604 0278 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 605              	.LVL27:
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 181:armwave.c     **** 
 182:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 606              		.loc 1 182 5 is_stmt 1 view .LVU142
 607              		.loc 1 182 5 is_stmt 0 view .LVU143
 608 027c 000058E3 		cmp	r8, #0	@ npix,
 609 0280 0C0000DA 		ble	.L29		@,
 610              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 184:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 185:armwave.c     ****         // most normal waveforms.
 186:armwave.c     ****         wave_word = *base_32ptr++;
 187:armwave.c     **** 
 188:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 191:armwave.c     ****                 wave_word >>= 8;
 192:armwave.c     **** 
 193:armwave.c     ****                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 611              		.loc 1 195 52 view .LVU144
 612 0284 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 613              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 614              		.loc 1 194 52 view .LVU145
 615 0288 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 616              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 198:armwave.c     ****                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 200:armwave.c     ****                     b = MIN(bb, 255);
 201:armwave.c     **** 
 202:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 203:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 205:armwave.c     ****                     // Do line scaling as necessary.
 206:armwave.c     ****                     /*
 207:armwave.c     ****                     nsub = n + w;
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 209:armwave.c     ****                     xx = (nsub >> 8);
 210:armwave.c     **** 
 211:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 212:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 213:armwave.c     ****                         *(out_buffer_base + offset) = word;
 214:armwave.c     ****                     }
 215:armwave.c     ****                     */
 216:armwave.c     **** 
 217:armwave.c     ****                     nsub = n + w;
 218:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 617              		.loc 1 218 57 view .LVU146
 618 028c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 619              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 620              		.loc 1 195 52 view .LVU147
 621 0290 00308DE5 		str	r3, [sp]	@ _10, %sfp
 622              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 623              		.loc 1 196 52 view .LVU148
 624 0294 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 625              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 626              		.loc 1 182 11 view .LVU149
 627 0298 0010A0E3 		mov	r1, #0	@ n,
 628              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 629              		.loc 1 196 52 view .LVU150
 630 029c 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 631              	.LVL28:
 632              	.L36:
 186:armwave.c     **** 
 633              		.loc 1 186 9 is_stmt 1 view .LVU151
 634              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 635              		.loc 1 186 19 is_stmt 0 view .LVU152
 636 02a0 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 637              	.LVL29:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 638              		.loc 1 188 9 is_stmt 1 view .LVU153
 639              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 640              		.loc 1 188 11 is_stmt 0 view .LVU154
 641 02a4 000053E3 		cmp	r3, #0	@ wave_word,
 642 02a8 0400001A 		bne	.L49		@,
 643              	.L32:
 644              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 645              		.loc 1 182 28 view .LVU155
 646 02ac 041081E2 		add	r1, r1, #4	@ n, n,
 647              	.LVL30:
 648              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 649              		.loc 1 182 5 view .LVU156
 650 02b0 010058E1 		cmp	r8, r1	@ npix, n
 651 02b4 F9FFFFCA 		bgt	.L36		@,
 652              	.LVL31:
 653              	.L29:
 654              	@ armwave.c:230: }
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 221:armwave.c     **** 
 222:armwave.c     ****                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 226:armwave.c     ****                 }
 227:armwave.c     ****             }
 228:armwave.c     ****         }
 229:armwave.c     ****     }
 230:armwave.c     **** }
 655              		.loc 1 230 1 view .LVU157
 656 02b8 0CD08DE2 		add	sp, sp, #12	@,,
 657              		.cfi_remember_state
 658              		.cfi_def_cfa_offset 36
 659              		@ sp needed	@
 660 02bc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 661              	.LVL32:
 662              	.L49:
 663              		.cfi_restore_state
 664              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 665              		.loc 1 193 19 view .LVU158
 666 02c0 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 667              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 668              		.loc 1 189 19 view .LVU159
 669 02c4 0070A0E3 		mov	r7, #0	@ w,
 670              	.LVL33:
 190:armwave.c     ****                 wave_word >>= 8;
 671              		.loc 1 190 17 is_stmt 1 view .LVU160
 191:armwave.c     **** 
 672              		.loc 1 191 17 view .LVU161
 673              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 674              		.loc 1 191 27 is_stmt 0 view .LVU162
 675 02c8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 676              	.LVL34:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 193 17 is_stmt 1 view .LVU163
 678              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 679              		.loc 1 193 19 is_stmt 0 view .LVU164
 680 02cc 0500001A 		bne	.L50		@,
 681              	.L33:
 682              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 683              		.loc 1 189 32 view .LVU165
 684 02d0 017087E2 		add	r7, r7, #1	@ w, w,
 685              	.LVL35:
 686              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 687              		.loc 1 189 13 view .LVU166
 688 02d4 040057E3 		cmp	r7, #4	@ w,
 689 02d8 F3FFFF0A 		beq	.L32		@,
 190:armwave.c     ****                 wave_word >>= 8;
 690              		.loc 1 190 17 is_stmt 1 view .LVU167
 691              	.LVL36:
 191:armwave.c     **** 
 692              		.loc 1 191 17 view .LVU168
 693              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 694              		.loc 1 193 19 is_stmt 0 view .LVU169
 695 02dc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 696              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 697              		.loc 1 191 27 view .LVU170
 698 02e0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 699              	.LVL37:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 700              		.loc 1 193 17 is_stmt 1 view .LVU171
 701              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 702              		.loc 1 193 19 is_stmt 0 view .LVU172
 703 02e4 F9FFFF0A 		beq	.L33		@,
 704              	.L50:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 705              		.loc 1 194 21 is_stmt 1 view .LVU173
 706              	.LVL38:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 707              		.loc 1 195 21 view .LVU174
 196:armwave.c     **** 
 708              		.loc 1 196 21 view .LVU175
 198:armwave.c     ****                     g = MIN(gg, 255);
 709              		.loc 1 198 21 view .LVU176
 199:armwave.c     ****                     b = MIN(bb, 255);
 710              		.loc 1 199 21 view .LVU177
 200:armwave.c     **** 
 711              		.loc 1 200 21 view .LVU178
 203:armwave.c     **** 
 712              		.loc 1 203 21 view .LVU179
 713              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 714              		.loc 1 196 55 is_stmt 0 view .LVU180
 715 02e8 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 716 02ec 075081E0 		add	r5, r1, r7	@ _120, n, w
 717 02f0 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 718              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 719              		.loc 1 218 32 view .LVU181
 720 02f4 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 721              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 722              		.loc 1 219 41 view .LVU182
 723 02f8 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 724              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 725              		.loc 1 218 40 view .LVU183
 726 02fc 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 727              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 728              		.loc 1 219 41 view .LVU184
 729 0300 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 730              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 731              		.loc 1 195 55 view .LVU185
 732 0304 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 733              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 734              		.loc 1 196 24 view .LVU186
 735 0308 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 736              	.LVL39:
 737              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 738              		.loc 1 218 40 view .LVU187
 739 030c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 740              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 741              		.loc 1 219 46 view .LVU188
 742 0310 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 743              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 744              		.loc 1 195 55 view .LVU189
 745 0314 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 746              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 747              		.loc 1 194 55 view .LVU190
 748 0318 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 749              	.LVL40:
 750              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 751              		.loc 1 200 25 view .LVU191
 752 031c FF005AE3 		cmp	r10, #255	@ bb,
 753              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 195 24 view .LVU192
 755 0320 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 756              	.LVL41:
 757              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 218 40 view .LVU193
 759 0324 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 760              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 219 46 view .LVU194
 762 0328 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 763              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 764              		.loc 1 194 24 view .LVU195
 765 032c 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 766              	.LVL42:
 767              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 768              		.loc 1 200 25 view .LVU196
 769 0330 FFA0A0A3 		movge	r10, #255	@ bb,
 770              	.LVL43:
 771              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 772              		.loc 1 199 25 view .LVU197
 773 0334 FF0054E3 		cmp	r4, #255	@ gg,
 774 0338 FF40A0A3 		movge	r4, #255	@ gg,
 775              	.LVL44:
 776              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 777              		.loc 1 198 25 view .LVU198
 778 033c FF005CE3 		cmp	ip, #255	@ rr,
 779              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 780              		.loc 1 203 56 view .LVU199
 781 0340 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 782              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 783              		.loc 1 218 24 view .LVU200
 784 0344 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 785              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 786              		.loc 1 198 25 view .LVU201
 787 0348 FFC0A0A3 		movge	ip, #255	@ rr,
 788              	.LVL45:
 789              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 790              		.loc 1 203 44 view .LVU202
 791 034c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 792 0350 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 793              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 794              		.loc 1 203 56 view .LVU203
 795 0354 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 796              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 797              		.loc 1 203 51 view .LVU204
 798 0358 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 799              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 800              		.loc 1 203 62 view .LVU205
 801 035c 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 802 0360 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 803              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 804              		.loc 1 218 24 view .LVU206
 805 0364 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 806              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 807              		.loc 1 219 24 view .LVU207
 808 0368 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 809              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 810              		.loc 1 203 26 view .LVU208
 811 036c FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 812              	.LVL46:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 813              		.loc 1 217 21 is_stmt 1 view .LVU209
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 814              		.loc 1 218 21 view .LVU210
 219:armwave.c     ****                     xx = (nsub >> 8);
 815              		.loc 1 219 21 view .LVU211
 816              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 817              		.loc 1 220 32 is_stmt 0 view .LVU212
 818 0370 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 819              	.LVL47:
 820              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 821              		.loc 1 219 24 view .LVU213
 822 0374 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 823              	.LVL48:
 220:armwave.c     **** 
 824              		.loc 1 220 21 is_stmt 1 view .LVU214
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 825              		.loc 1 222 21 view .LVU215
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 826              		.loc 1 222 21 is_stmt 0 view .LVU216
 827 0378 090052E1 		cmp	r2, r9	@ yy, ye
 828 037c D3FFFF2A 		bcs	.L33		@,
 829              	.LVL49:
 830              	.L34:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 831              		.loc 1 223 25 is_stmt 1 discriminator 3 view .LVU217
 224:armwave.c     ****                     }
 832              		.loc 1 224 25 discriminator 3 view .LVU218
 833              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 834              		.loc 1 223 43 is_stmt 0 discriminator 3 view .LVU219
 835 0380 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 836              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 837              		.loc 1 224 43 discriminator 3 view .LVU220
 838 0384 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 839              	.LVL50:
 840              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 841              		.loc 1 222 42 discriminator 3 view .LVU221
 842 0388 012082E2 		add	r2, r2, #1	@ yy, yy,
 843              	.LVL51:
 844              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 222 21 discriminator 3 view .LVU222
 846 038c 020059E1 		cmp	r9, r2	@ ye, yy
 847              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 848              		.loc 1 224 53 discriminator 3 view .LVU223
 849 0390 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 850              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 851              		.loc 1 222 21 discriminator 3 view .LVU224
 852 0394 F9FFFF1A 		bne	.L34		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 853              		.loc 1 222 21 discriminator 3 view .LVU225
 854 0398 CCFFFFEA 		b	.L33		@
 855              	.LVL52:
 856              	.L48:
 177:armwave.c     **** 
 857              		.loc 1 177 5 is_stmt 1 discriminator 1 view .LVU226
 858 039c 10309FE5 		ldr	r3, .L51+4	@,
 859 03a0 B120A0E3 		mov	r2, #177	@,
 860 03a4 0C109FE5 		ldr	r1, .L51+8	@,
 861 03a8 0C009FE5 		ldr	r0, .L51+12	@,
 862              	.LVL53:
 177:armwave.c     **** 
 863              		.loc 1 177 5 is_stmt 0 discriminator 1 view .LVU227
 864 03ac FEFFFFEB 		bl	__assert_fail		@
 865              	.LVL54:
 866              	.L52:
 177:armwave.c     **** 
 867              		.loc 1 177 5 discriminator 1 view .LVU228
 868              		.align	2
 869              	.L51:
 870 03b0 00000000 		.word	g_armwave_state
 871 03b4 00000000 		.word	.LANCHOR0
 872 03b8 54000000 		.word	.LC3
 873 03bc 60000000 		.word	.LC4
 874              		.cfi_endproc
 875              	.LFE60:
 877              		.align	2
 878              		.global	armwave_setup_render
 879              		.syntax unified
 880              		.arm
 881              		.fpu vfp
 883              	armwave_setup_render:
 884              	.LVL55:
 885              	.LFB61:
 231:armwave.c     **** 
 232:armwave.c     **** /*
 233:armwave.c     ****  * Setup the renderer with passed parameters.
 234:armwave.c     ****  */
 235:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 236:armwave.c     **** {
 886              		.loc 1 236 1 is_stmt 1 view -0
 887              		.cfi_startproc
 888              		@ args = 12, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 237:armwave.c     ****     uint32_t length, xx;
 890              		.loc 1 237 5 view .LVU230
 238:armwave.c     ****     float points_per_pixel;
 891              		.loc 1 238 5 view .LVU231
 239:armwave.c     **** 
 240:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 892              		.loc 1 240 5 view .LVU232
 893              	@ armwave.c:236: {
 236:armwave.c     ****     uint32_t length, xx;
 894              		.loc 1 236 1 is_stmt 0 view .LVU233
 895 03c0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 896              		.cfi_def_cfa_offset 28
 897              		.cfi_offset 4, -28
 898              		.cfi_offset 5, -24
 899              		.cfi_offset 6, -20
 900              		.cfi_offset 7, -16
 901              		.cfi_offset 8, -12
 902              		.cfi_offset 9, -8
 903              		.cfi_offset 14, -4
 904 03c4 028B2DED 		vpush.64	{d8}	@
 905              		.cfi_def_cfa_offset 36
 906              		.cfi_offset 80, -36
 907              		.cfi_offset 81, -32
 908 03c8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 909 03cc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 910 03d0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 911 03d4 14D04DE2 		sub	sp, sp, #20	@,,
 912              		.cfi_def_cfa_offset 56
 913              	@ armwave.c:236: {
 236:armwave.c     ****     uint32_t length, xx;
 914              		.loc 1 236 1 view .LVU234
 915 03d8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 916 03dc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 917 03e0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 918              	@ armwave.c:240:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 919              		.loc 1 240 5 view .LVU235
 920 03e4 00308DE5 		str	r3, [sp]	@ wave_stride,
 921 03e8 F460CDE1 		strd	r6, [sp, #4]	@,,
 922 03ec 0230A0E1 		mov	r3, r2	@, waves_max
 923              	.LVL56:
 924              		.loc 1 240 5 view .LVU236
 925 03f0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 926 03f4 0120A0E1 		mov	r2, r1	@, end_point
 927              	.LVL57:
 928              		.loc 1 240 5 view .LVU237
 929 03f8 0010A0E1 		mov	r1, r0	@, start_point
 930              	.LVL58:
 931              		.loc 1 240 5 view .LVU238
 932 03fc D0019FE5 		ldr	r0, .L67+12	@,
 933              	.LVL59:
 934              		.loc 1 240 5 view .LVU239
 935 0400 FEFFFFEB 		bl	printf		@
 936              	.LVL60:
 241:armwave.c     **** 
 242:armwave.c     ****     // TODO these asserts should instead raise PyExc
 243:armwave.c     ****     assert(start_point < end_point);
 937              		.loc 1 243 5 is_stmt 1 view .LVU240
 938 0404 050054E1 		cmp	r4, r5	@ start_point, end_point
 939 0408 5F00002A 		bcs	.L64		@,
 244:armwave.c     **** 
 245:armwave.c     ****     /*
 246:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 247:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 248:armwave.c     **** 
 249:armwave.c     ****     if(target_height == 256) {
 250:armwave.c     ****         g_armwave_state.row_shift = 8;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 252:armwave.c     ****     } else if(target_height == 512) {
 253:armwave.c     ****         g_armwave_state.row_shift = 9;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 255:armwave.c     ****     } else if(target_height == 1024) {
 256:armwave.c     ****         g_armwave_state.row_shift = 10;
 257:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 258:armwave.c     ****     } else if(target_height == 2048) {
 259:armwave.c     ****         g_armwave_state.row_shift = 11;
 260:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 261:armwave.c     ****     }
 262:armwave.c     ****     */
 263:armwave.c     **** 
 264:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 265:armwave.c     ****     g_armwave_state.xstride = target_height;
 940              		.loc 1 265 5 view .LVU241
 941              	@ armwave.c:276:     g_armwave_state.wave_length = end_point - start_point;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 268:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 269:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 270:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 271:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 272:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 273:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 274:armwave.c     ****     g_armwave_state.target_width = target_width;
 275:armwave.c     ****     g_armwave_state.target_height = target_height;
 276:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 942              		.loc 1 276 45 is_stmt 0 view .LVU242
 943 040c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 944              	.LVL61:
 945              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 946              		.loc 1 266 49 view .LVU243
 947 0410 6C6A9FED 		vldr.32	s12, .L67	@ tmp174,
 948              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 277:armwave.c     **** 
 278:armwave.c     ****     // Calculate compound scaler
 279:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 280:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 949              		.loc 1 280 48 view .LVU244
 950 0414 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 951              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 952              		.loc 1 280 79 view .LVU245
 953 0418 6B6ADFED 		vldr.32	s13, .L67+4	@ tmp198,
 954              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 955              		.loc 1 273 90 view .LVU246
 956 041c 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 957              	@ armwave.c:265:     g_armwave_state.xstride = target_height;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 958              		.loc 1 265 29 view .LVU247
 959 0420 B0419FE5 		ldr	r4, .L67+16	@ tmp241,
 960              	.LVL62:
 961              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 962              		.loc 1 280 48 view .LVU248
 963 0424 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 964              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 965              		.loc 1 266 49 view .LVU249
 966 0428 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 967              	@ armwave.c:271:     g_armwave_state.size = target_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 968              		.loc 1 271 42 view .LVU250
 969 042c 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 970              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 971              		.loc 1 273 74 view .LVU251
 972 0430 033383E0 		add	r3, r3, r3, lsl #6	@ tmp188, tmp185, tmp185,
 973              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 974              		.loc 1 266 49 view .LVU252
 975 0434 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 976              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 977              		.loc 1 280 48 view .LVU253
 978 0438 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 979              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 980              		.loc 1 273 74 view .LVU254
 981 043c 0331A0E1 		lsl	r3, r3, #2	@ tmp189, tmp188,
 982              	@ armwave.c:272:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 983              		.loc 1 272 37 view .LVU255
 984 0440 012CA0E3 		mov	r2, #256	@ tmp184,
 985              	@ armwave.c:271:     g_armwave_state.size = target_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 986              		.loc 1 271 26 view .LVU256
 987 0444 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 988              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 989              		.loc 1 280 48 view .LVU257
 990 0448 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 991              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 281:armwave.c     **** 
 282:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 992              		.loc 1 282 5 view .LVU258
 993 044c 0310A0E1 		mov	r1, r3	@, tmp189
 994              	@ armwave.c:272:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 995              		.loc 1 272 37 view .LVU259
 996 0450 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 997              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 998              		.loc 1 273 34 view .LVU260
 999 0454 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1000              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1001              		.loc 1 282 5 view .LVU261
 1002 0458 7C019FE5 		ldr	r0, .L67+20	@,
 1003              	@ armwave.c:265:     g_armwave_state.xstride = target_height;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1004              		.loc 1 265 29 view .LVU262
 1005 045c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1006              		.loc 1 266 5 is_stmt 1 view .LVU263
 1007              	@ armwave.c:268:     g_armwave_state.wave_stride = wave_stride;
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1008              		.loc 1 268 33 is_stmt 0 view .LVU264
 1009 0460 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1010              	@ armwave.c:269:     g_armwave_state.waves_max = waves_max;
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1011              		.loc 1 269 31 view .LVU265
 1012 0464 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1013              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 1014              		.loc 1 280 48 view .LVU266
 1015 0468 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1016              	@ armwave.c:270:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1017              		.loc 1 270 27 view .LVU267
 1018 046c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1019              	@ armwave.c:275:     g_armwave_state.target_height = target_height;
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1020              		.loc 1 275 35 view .LVU268
 1021 0470 F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1022              	@ armwave.c:276:     g_armwave_state.wave_length = end_point - start_point;
 276:armwave.c     **** 
 1023              		.loc 1 276 33 view .LVU269
 1024 0474 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1025              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1026              		.loc 1 266 49 view .LVU270
 1027 0478 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1028              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 1029              		.loc 1 280 79 view .LVU271
 1030 047c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1031              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1032              		.loc 1 279 42 view .LVU272
 1033 0480 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1034              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1035              		.loc 1 266 33 view .LVU273
 1036 0484 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1037              		.loc 1 267 5 is_stmt 1 view .LVU274
 1038              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1039              		.loc 1 279 42 is_stmt 0 view .LVU275
 1040 0488 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1041              	@ armwave.c:267:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1042              		.loc 1 267 30 view .LVU276
 1043 048c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1044              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1045              		.loc 1 282 5 view .LVU277
 1046 0490 0C30A0E1 		mov	r3, ip	@, _19
 1047 0494 0C20A0E1 		mov	r2, ip	@, tmp3
 1048              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1049              		.loc 1 279 42 view .LVU278
 1050 0498 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1051              	@ armwave.c:267:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1052              		.loc 1 267 30 view .LVU279
 1053 049c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1054              		.loc 1 268 5 is_stmt 1 view .LVU280
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1055              		.loc 1 269 5 view .LVU281
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1056              		.loc 1 270 5 view .LVU282
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1057              		.loc 1 271 5 view .LVU283
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1058              		.loc 1 272 5 view .LVU284
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 1059              		.loc 1 273 5 view .LVU285
 274:armwave.c     ****     g_armwave_state.target_height = target_height;
 1060              		.loc 1 274 5 view .LVU286
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1061              		.loc 1 275 5 view .LVU287
 276:armwave.c     **** 
 1062              		.loc 1 276 5 view .LVU288
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1063              		.loc 1 279 5 view .LVU289
 1064              		.loc 1 282 5 view .LVU290
 1065 04a0 FEFFFFEB 		bl	printf		@
 1066              	.LVL63:
 283:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 284:armwave.c     **** 
 285:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 286:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 287:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 288:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1067              		.loc 1 288 5 view .LVU291
 1068              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 289:armwave.c     **** 
 290:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1069              		.loc 1 290 23 is_stmt 0 view .LVU292
 1070 04a4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1071              	@ armwave.c:288:     g_armwave_state.slice_height = 64;  
 288:armwave.c     **** 
 1072              		.loc 1 288 34 view .LVU293
 1073 04a8 4030A0E3 		mov	r3, #64	@ tmp202,
 1074              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 1075              		.loc 1 290 7 view .LVU294
 1076 04ac 000050E3 		cmp	r0, #0	@ _20,
 1077              	@ armwave.c:288:     g_armwave_state.slice_height = 64;  
 288:armwave.c     **** 
 1078              		.loc 1 288 34 view .LVU295
 1079 04b0 443084E5 		str	r3, [r4, #68]	@ tmp202, g_armwave_state.slice_height
 1080              		.loc 1 290 5 is_stmt 1 view .LVU296
 1081              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 1082              		.loc 1 290 7 is_stmt 0 view .LVU297
 1083 04b4 0000000A 		beq	.L55		@,
 291:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1084              		.loc 1 291 9 is_stmt 1 view .LVU298
 1085 04b8 FEFFFFEB 		bl	free		@
 1086              	.LVL64:
 1087              	.L55:
 292:armwave.c     **** 
 293:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1088              		.loc 1 293 5 view .LVU299
 1089              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1090              		.loc 1 293 34 is_stmt 0 view .LVU300
 1091 04bc 0110A0E3 		mov	r1, #1	@,
 1092 04c0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1093 04c4 FEFFFFEB 		bl	calloc		@
 1094              	.LVL65:
 1095              	@ armwave.c:295:     assert(g_armwave_state.ch1_buffer != NULL);
 294:armwave.c     **** 
 295:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1096              		.loc 1 295 5 view .LVU301
 1097 04c8 000050E3 		cmp	r0, #0	@ _23,
 1098              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 293:armwave.c     **** 
 1099              		.loc 1 293 34 view .LVU302
 1100 04cc 0070A0E1 		mov	r7, r0	@ _23,
 1101              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 293:armwave.c     **** 
 1102              		.loc 1 293 32 view .LVU303
 1103 04d0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1104              		.loc 1 295 5 is_stmt 1 view .LVU304
 1105 04d4 3600000A 		beq	.L65		@,
 296:armwave.c     **** 
 297:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 298:armwave.c     ****     length = end_point - start_point;
 1106              		.loc 1 298 5 view .LVU305
 1107              	.LVL66:
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1108              		.loc 1 299 5 view .LVU306
 1109              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 1110              		.loc 1 299 34 is_stmt 0 view .LVU307
 1111 04d8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1112              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 1113              		.loc 1 299 22 view .LVU308
 1114 04dc 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1115              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1116              		.loc 1 300 60 view .LVU309
 1117 04e0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp251, g_armwave_state.slice_height
 1118              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1119              		.loc 1 301 40 view .LVU310
 1120 04e4 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1121              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1122              		.loc 1 299 34 view .LVU311
 1123 04e8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp214, target_width
 1124              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1125              		.loc 1 299 22 view .LVU312
 1126 04ec 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp213, _13
 1127              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1128              		.loc 1 300 60 view .LVU313
 1129 04f0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp251
 1130              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1131              		.loc 1 299 22 view .LVU314
 1132 04f4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp213, tmp214
 1133              	.LVL67:
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1134              		.loc 1 300 5 is_stmt 1 view .LVU315
 1135              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1136              		.loc 1 300 60 is_stmt 0 view .LVU316
 1137 04f8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp219, tmp217, points_per_pixel
 1138              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1139              		.loc 1 300 41 view .LVU317
 1140 04fc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 1141 0500 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 1142              		.loc 1 301 5 is_stmt 1 view .LVU318
 1143              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1144              		.loc 1 301 40 is_stmt 0 view .LVU319
 1145 0504 FEFFFFEB 		bl	malloc		@
 1146              	.LVL68:
 1147              	@ armwave.c:303:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1148              		.loc 1 303 5 view .LVU320
 1149 0508 000050E3 		cmp	r0, #0	@ _31,
 1150              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1151              		.loc 1 301 40 view .LVU321
 1152 050c 0060A0E1 		mov	r6, r0	@ _31,
 1153              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1154              		.loc 1 301 38 view .LVU322
 1155 0510 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1156              		.loc 1 303 5 is_stmt 1 view .LVU323
 1157 0514 2100000A 		beq	.L66		@,
 1158              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 304:armwave.c     **** 
 305:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1159              		.loc 1 306 54 is_stmt 0 view .LVU324
 1160 0518 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp229,
 1161 051c 02C040E2 		sub	ip, r0, #2	@ ivtmp.66, _31,
 1162              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1163              		.loc 1 305 12 view .LVU325
 1164 0520 0030A0E3 		mov	r3, #0	@ xx,
 1165              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1166              		.loc 1 306 54 view .LVU326
 1167 0524 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1168              	.L58:
 1169              	.LVL69:
 1170              		.loc 1 306 9 is_stmt 1 discriminator 3 view .LVU327
 1171              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1172              		.loc 1 306 74 is_stmt 0 discriminator 3 view .LVU328
 1173 0528 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1174              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1175              		.loc 1 305 32 discriminator 3 view .LVU329
 1176 052c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1177              	.LVL70:
 1178              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1179              		.loc 1 305 5 discriminator 3 view .LVU330
 1180 0530 030055E1 		cmp	r5, r3	@ _13, xx
 1181              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1182              		.loc 1 306 74 discriminator 3 view .LVU331
 1183 0534 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1184 0538 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1185              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1186              		.loc 1 306 46 discriminator 3 view .LVU332
 1187 053c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1188 0540 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1189 0544 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1190              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1191              		.loc 1 305 5 discriminator 3 view .LVU333
 1192 0548 F6FFFF1A 		bne	.L58		@,
 307:armwave.c     **** 
 308:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 309:armwave.c     ****     }
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1193              		.loc 1 311 5 is_stmt 1 view .LVU334
 1194              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1195              		.loc 1 311 34 is_stmt 0 view .LVU335
 1196 054c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1197 0550 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1198 0554 FEFFFFEB 		bl	malloc		@
 1199              	.LVL71:
 1200              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1201              		.loc 1 313 5 view .LVU336
 1202 0558 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1203 055c 0620A0E1 		mov	r2, r6	@, _31
 1204 0560 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1205 0564 0710A0E1 		mov	r1, r7	@, _23
 1206              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1207              		.loc 1 311 34 view .LVU337
 1208 0568 00C0A0E1 		mov	ip, r0	@ tmp236,
 1209              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1210              		.loc 1 313 5 view .LVU338
 1211 056c 0030A0E1 		mov	r3, r0	@, tmp236
 1212              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1213              		.loc 1 311 32 view .LVU339
 1214 0570 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1215              		.loc 1 313 5 is_stmt 1 view .LVU340
 1216 0574 64009FE5 		ldr	r0, .L67+24	@,
 1217 0578 FEFFFFEB 		bl	printf		@
 1218              	.LVL72:
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****     malloc_stats();
 1219              		.loc 1 319 5 view .LVU341
 1220              	@ armwave.c:320: }
 320:armwave.c     **** }
 1221              		.loc 1 320 1 is_stmt 0 view .LVU342
 1222 057c 14D08DE2 		add	sp, sp, #20	@,,
 1223              		.cfi_remember_state
 1224              		.cfi_def_cfa_offset 36
 1225              		@ sp needed	@
 1226 0580 028BBDEC 		vldm	sp!, {d8}	@
 1227              		.cfi_restore 80
 1228              		.cfi_restore 81
 1229              		.cfi_def_cfa_offset 28
 1230              	.LVL73:
 1231              		.loc 1 320 1 view .LVU343
 1232 0584 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1233              		.cfi_restore 14
 1234              		.cfi_restore 9
 1235              		.cfi_restore 8
 1236              		.cfi_restore 7
 1237              		.cfi_restore 6
 1238              		.cfi_restore 5
 1239              		.cfi_restore 4
 1240              		.cfi_def_cfa_offset 0
 1241              	.LVL74:
 1242              	@ armwave.c:319:     malloc_stats();
 319:armwave.c     **** }
 1243              		.loc 1 319 5 view .LVU344
 1244 0588 FEFFFFEA 		b	malloc_stats		@
 1245              	.LVL75:
 1246              	.L64:
 1247              		.cfi_restore_state
 243:armwave.c     **** 
 1248              		.loc 1 243 5 is_stmt 1 discriminator 1 view .LVU345
 1249 058c 50309FE5 		ldr	r3, .L67+28	@,
 1250 0590 F320A0E3 		mov	r2, #243	@,
 1251 0594 4C109FE5 		ldr	r1, .L67+32	@,
 1252 0598 4C009FE5 		ldr	r0, .L67+36	@,
 1253 059c FEFFFFEB 		bl	__assert_fail		@
 1254              	.LVL76:
 1255              	.L66:
 303:armwave.c     **** 
 1256              		.loc 1 303 5 discriminator 1 view .LVU346
 1257 05a0 3C309FE5 		ldr	r3, .L67+28	@,
 1258 05a4 44209FE5 		ldr	r2, .L67+40	@,
 1259 05a8 38109FE5 		ldr	r1, .L67+32	@,
 1260 05ac 40009FE5 		ldr	r0, .L67+44	@,
 1261 05b0 FEFFFFEB 		bl	__assert_fail		@
 1262              	.LVL77:
 1263              	.L65:
 295:armwave.c     **** 
 1264              		.loc 1 295 5 discriminator 1 view .LVU347
 1265 05b4 28309FE5 		ldr	r3, .L67+28	@,
 1266 05b8 38209FE5 		ldr	r2, .L67+48	@,
 1267 05bc 24109FE5 		ldr	r1, .L67+32	@,
 1268 05c0 34009FE5 		ldr	r0, .L67+52	@,
 1269 05c4 FEFFFFEB 		bl	__assert_fail		@
 1270              	.LVL78:
 1271              	.L68:
 1272              		.align	2
 1273              	.L67:
 1274 05c8 00007F43 		.word	1132396544
 1275 05cc 00008043 		.word	1132462080
 1276 05d0 0000803F 		.word	1065353216
 1277 05d4 74000000 		.word	.LC5
 1278 05d8 00000000 		.word	g_armwave_state
 1279 05dc B8000000 		.word	.LC7
 1280 05e0 3C010000 		.word	.LC10
 1281 05e4 1C000000 		.word	.LANCHOR0+28
 1282 05e8 54000000 		.word	.LC3
 1283 05ec A0000000 		.word	.LC6
 1284 05f0 2F010000 		.word	303
 1285 05f4 10010000 		.word	.LC9
 1286 05f8 27010000 		.word	295
 1287 05fc EC000000 		.word	.LC8
 1288              		.cfi_endproc
 1289              	.LFE61:
 1291              		.align	2
 1292              		.global	armwave_set_wave_pointer
 1293              		.syntax unified
 1294              		.arm
 1295              		.fpu vfp
 1297              	armwave_set_wave_pointer:
 1298              	.LVL79:
 1299              	.LFB62:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1300              		.loc 1 327 1 view -0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1304              		.loc 1 328 5 view .LVU349
 1305 0600 000050E3 		cmp	r0, #0	@ wave_buffer
 1306              		.loc 1 328 5 is_stmt 0 view .LVU350
 1307 0604 0200000A 		beq	.L74		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1308              		.loc 1 329 5 is_stmt 1 view .LVU351
 1309              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1310              		.loc 1 329 33 is_stmt 0 view .LVU352
 1311 0608 1C309FE5 		ldr	r3, .L75	@ tmp115,
 1312 060c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1313 0610 1EFF2FE1 		bx	lr	@
 1314              	.L74:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1315              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU353
 1316              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1317              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU354
 1318 0614 10402DE9 		push	{r4, lr}	@
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 4, -8
 1321              		.cfi_offset 14, -4
 1322              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1323              		.loc 1 328 5 discriminator 1 view .LVU355
 1324 0618 522FA0E3 		mov	r2, #328	@,
 1325 061c 0C309FE5 		ldr	r3, .L75+4	@,
 1326 0620 0C109FE5 		ldr	r1, .L75+8	@,
 1327 0624 0C009FE5 		ldr	r0, .L75+12	@,
 1328              	.LVL80:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1329              		.loc 1 328 5 discriminator 1 view .LVU356
 1330 0628 FEFFFFEB 		bl	__assert_fail		@
 1331              	.LVL81:
 1332              	.L76:
 1333              		.align	2
 1334              	.L75:
 1335 062c 00000000 		.word	g_armwave_state
 1336 0630 34000000 		.word	.LANCHOR0+52
 1337 0634 54000000 		.word	.LC3
 1338 0638 60010000 		.word	.LC11
 1339              		.cfi_endproc
 1340              	.LFE62:
 1342              		.align	2
 1343              		.global	armwave_set_wave_pointer_as_testbuf
 1344              		.syntax unified
 1345              		.arm
 1346              		.fpu vfp
 1348              	armwave_set_wave_pointer_as_testbuf:
 1349              	.LVL82:
 1350              	.LFB63:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1351              		.loc 1 337 1 is_stmt 1 view -0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1356              		.loc 1 338 5 view .LVU358
 1357              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1358              		.loc 1 338 29 is_stmt 0 view .LVU359
 1359 063c 24309FE5 		ldr	r3, .L80	@ tmp117,
 1360              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1361              		.loc 1 338 7 view .LVU360
 1362 0640 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1363 0644 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1364 0648 0400003A 		bcc	.L79		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1365              		.loc 1 343 5 is_stmt 1 view .LVU361
 1366              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1367              		.loc 1 343 111 is_stmt 0 view .LVU362
 1368 064c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1369              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1370              		.loc 1 343 68 view .LVU363
 1371 0650 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1372 0654 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1373              	.LVL83:
 1374              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1375              		.loc 1 343 33 view .LVU364
 1376 0658 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1377              	@ armwave.c:344: }
 344:armwave.c     **** }
 1378              		.loc 1 344 1 view .LVU365
 1379 065c 1EFF2FE1 		bx	lr	@
 1380              	.LVL84:
 1381              	.L79:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1382              		.loc 1 339 9 is_stmt 1 view .LVU366
 1383 0660 04009FE5 		ldr	r0, .L80+4	@,
 1384              	.LVL85:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1385              		.loc 1 339 9 is_stmt 0 view .LVU367
 1386 0664 FEFFFFEA 		b	puts		@
 1387              	.LVL86:
 1388              	.L81:
 1389              		.align	2
 1390              	.L80:
 1391 0668 00000000 		.word	g_armwave_state
 1392 066c 74010000 		.word	.LC12
 1393              		.cfi_endproc
 1394              	.LFE63:
 1396              		.align	2
 1397              		.global	armwave_set_wave_pointer_u32
 1398              		.syntax unified
 1399              		.arm
 1400              		.fpu vfp
 1402              	armwave_set_wave_pointer_u32:
 1403              	.LVL87:
 1404              	.LFB64:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1405              		.loc 1 351 1 is_stmt 1 view -0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1409              		.loc 1 352 5 view .LVU369
 1410 0670 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1411              		.loc 1 352 5 is_stmt 0 view .LVU370
 1412 0674 0200000A 		beq	.L87		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1413              		.loc 1 353 5 is_stmt 1 view .LVU371
 1414              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1415              		.loc 1 353 33 is_stmt 0 view .LVU372
 1416 0678 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1417 067c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1418 0680 1EFF2FE1 		bx	lr	@
 1419              	.L87:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1420              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU373
 1421              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1422              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU374
 1423 0684 10402DE9 		push	{r4, lr}	@
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 4, -8
 1426              		.cfi_offset 14, -4
 1427              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1428              		.loc 1 352 5 discriminator 1 view .LVU375
 1429 0688 162EA0E3 		mov	r2, #352	@,
 1430 068c 0C309FE5 		ldr	r3, .L88+4	@,
 1431 0690 0C109FE5 		ldr	r1, .L88+8	@,
 1432 0694 0C009FE5 		ldr	r0, .L88+12	@,
 1433              	.LVL88:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1434              		.loc 1 352 5 discriminator 1 view .LVU376
 1435 0698 FEFFFFEB 		bl	__assert_fail		@
 1436              	.LVL89:
 1437              	.L89:
 1438              		.align	2
 1439              	.L88:
 1440 069c 00000000 		.word	g_armwave_state
 1441 06a0 50000000 		.word	.LANCHOR0+80
 1442 06a4 54000000 		.word	.LC3
 1443 06a8 B0010000 		.word	.LC13
 1444              		.cfi_endproc
 1445              	.LFE64:
 1447              		.align	2
 1448              		.global	armwave_clear_buffer
 1449              		.syntax unified
 1450              		.arm
 1451              		.fpu vfp
 1453              	armwave_clear_buffer:
 1454              	.LVL90:
 1455              	.LFB65:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1456              		.loc 1 360 1 is_stmt 1 view -0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1461              		.loc 1 362 5 view .LVU378
 1462              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1463              		.loc 1 362 58 is_stmt 0 view .LVU379
 1464 06ac 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1465              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1466              		.loc 1 362 5 view .LVU380
 1467 06b0 0010A0E3 		mov	r1, #0	@,
 1468 06b4 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1469 06b8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1470              	.LVL91:
 1471              		.loc 1 362 5 view .LVU381
 1472 06bc FEFFFFEA 		b	memset		@
 1473              	.LVL92:
 1474              	.L92:
 1475              		.align	2
 1476              	.L91:
 1477 06c0 00000000 		.word	g_armwave_state
 1478              		.cfi_endproc
 1479              	.LFE65:
 1481              		.align	2
 1482              		.global	armwave_set_channel_colour
 1483              		.syntax unified
 1484              		.arm
 1485              		.fpu vfp
 1487              	armwave_set_channel_colour:
 1488              	.LVL93:
 1489              	.LFB66:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1490              		.loc 1 369 1 is_stmt 1 view -0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 0
 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1495              		.loc 1 371 5 view .LVU383
 1496 06c4 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1497              		.loc 1 373 13 view .LVU384
 1498              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1499              		.loc 1 373 41 is_stmt 0 view .LVU385
 1500 06c8 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1501              	.LVL94:
 1502              		.loc 1 373 41 view .LVU386
 1503 06cc BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1504              		.loc 1 374 13 is_stmt 1 view .LVU387
 1505              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1506              		.loc 1 374 41 is_stmt 0 view .LVU388
 1507 06d0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1508              		.loc 1 375 13 is_stmt 1 view .LVU389
 1509              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1510              		.loc 1 375 41 is_stmt 0 view .LVU390
 1511 06d4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1512              		.loc 1 376 13 is_stmt 1 view .LVU391
 1513              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1514              		.loc 1 378 1 is_stmt 0 view .LVU392
 1515 06d8 1EFF2FE1 		bx	lr	@
 1516              	.L96:
 1517              		.align	2
 1518              	.L95:
 1519 06dc 00000000 		.word	g_armwave_state
 1520              		.cfi_endproc
 1521              	.LFE66:
 1523              		.align	2
 1524              		.global	armwave_dump_ppm_debug
 1525              		.syntax unified
 1526              		.arm
 1527              		.fpu vfp
 1529              	armwave_dump_ppm_debug:
 1530              	.LVL95:
 1531              	.LFB67:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1532              		.loc 1 384 1 is_stmt 1 view -0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1536              		.loc 1 385 5 view .LVU394
 1537              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1538              		.loc 1 384 1 is_stmt 0 view .LVU395
 1539 06e0 0130A0E1 		mov	r3, r1	@ fn, fn
 1540 06e4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1541              		.cfi_def_cfa_offset 28
 1542              		.cfi_offset 4, -28
 1543              		.cfi_offset 5, -24
 1544              		.cfi_offset 6, -20
 1545              		.cfi_offset 7, -16
 1546              		.cfi_offset 8, -12
 1547              		.cfi_offset 9, -8
 1548              		.cfi_offset 14, -4
 1549 06e8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1550 06ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1551              		.cfi_def_cfa_offset 40
 1552              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1553              		.loc 1 385 16 view .LVU396
 1554 06f0 C4109FE5 		ldr	r1, .L105	@,
 1555              	.LVL96:
 1556              		.loc 1 385 16 view .LVU397
 1557 06f4 0300A0E1 		mov	r0, r3	@, fn
 1558              	.LVL97:
 1559              		.loc 1 385 16 view .LVU398
 1560 06f8 FEFFFFEB 		bl	fopen64		@
 1561              	.LVL98:
 1562              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1563              		.loc 1 392 5 view .LVU399
 1564 06fc BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1565              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1566              		.loc 1 391 5 view .LVU400
 1567 0700 0320A0E3 		mov	r2, #3	@,
 1568 0704 0110A0E3 		mov	r1, #1	@,
 1569              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1570              		.loc 1 385 16 view .LVU401
 1571 0708 0070A0E1 		mov	r7, r0	@ fp,
 1572              	.LVL99:
 386:armwave.c     ****     uint32_t data;
 1573              		.loc 1 386 5 is_stmt 1 view .LVU402
 387:armwave.c     **** 
 1574              		.loc 1 387 5 view .LVU403
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1575              		.loc 1 391 5 view .LVU404
 1576 070c 0030A0E1 		mov	r3, r0	@, fp
 1577 0710 AC009FE5 		ldr	r0, .L105+8	@,
 1578              	.LVL100:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1579              		.loc 1 391 5 is_stmt 0 view .LVU405
 1580 0714 FEFFFFEB 		bl	fwrite		@
 1581              	.LVL101:
 1582              		.loc 1 392 5 is_stmt 1 view .LVU406
 1583 0718 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1584 071c A4109FE5 		ldr	r1, .L105+12	@,
 1585 0720 0700A0E1 		mov	r0, r7	@, fp
 1586 0724 FEFFFFEB 		bl	fprintf		@
 1587              	.LVL102:
 393:armwave.c     ****     fputs("255\n", fp);
 1588              		.loc 1 393 5 view .LVU407
 1589 0728 0420A0E3 		mov	r2, #4	@,
 1590 072c 0730A0E1 		mov	r3, r7	@, fp
 1591 0730 0110A0E3 		mov	r1, #1	@,
 1592 0734 90009FE5 		ldr	r0, .L105+16	@,
 1593 0738 FEFFFFEB 		bl	fwrite		@
 1594              	.LVL103:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1595              		.loc 1 395 5 view .LVU408
 1596              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1597              		.loc 1 395 37 is_stmt 0 view .LVU409
 1598 073c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1599              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1600              		.loc 1 395 5 view .LVU410
 1601 0740 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1602 0744 180000DA 		ble	.L98		@,
 1603 0748 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1604              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1605              		.loc 1 400 13 view .LVU411
 1606 074c 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1607              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1608              		.loc 1 395 12 view .LVU412
 1609 0750 0050A0E3 		mov	r5, #0	@ yy,
 1610              	.LVL104:
 1611              	.L99:
 1612              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1613              		.loc 1 396 9 view .LVU413
 1614 0754 000053E3 		cmp	r3, #0	@ _13,
 1615              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1616              		.loc 1 396 16 view .LVU414
 1617 0758 0040A0C3 		movgt	r4, #0	@ xx,
 1618              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1619              		.loc 1 396 9 view .LVU415
 1620 075c 0F0000DA 		ble	.L101		@,
 1621              	.LVL105:
 1622              	.L100:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1623              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU416
 1624              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1625              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU417
 1626 0760 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1627              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1628              		.loc 1 400 13 discriminator 3 view .LVU418
 1629 0764 0910A0E1 		mov	r1, r9	@, tmp152
 1630 0768 0700A0E1 		mov	r0, r7	@, fp
 1631              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1632              		.loc 1 397 18 discriminator 3 view .LVU419
 1633 076c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1634              	.LVL106:
 1635              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU420
 1636              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1637              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU421
 1638 0770 014084E2 		add	r4, r4, #1	@ xx, xx,
 1639              	.LVL107:
 1640              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1641              		.loc 1 400 81 discriminator 3 view .LVU422
 1642 0774 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1643              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1644              		.loc 1 400 61 discriminator 3 view .LVU423
 1645 0778 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1646              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1647              		.loc 1 400 13 discriminator 3 view .LVU424
 1648 077c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1649 0780 7330EFE6 		uxtb	r3, r3	@, tmp142
 1650 0784 00C08DE5 		str	ip, [sp]	@ tmp147,
 1651 0788 7220EFE6 		uxtb	r2, r2	@, data
 1652              	.LVL108:
 1653              		.loc 1 400 13 discriminator 3 view .LVU425
 1654 078c FEFFFFEB 		bl	fprintf		@
 1655              	.LVL109:
 1656              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1657              		.loc 1 396 41 discriminator 3 view .LVU426
 1658 0790 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1659              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1660              		.loc 1 396 9 discriminator 3 view .LVU427
 1661 0794 040053E1 		cmp	r3, r4	@ _13, xx
 1662 0798 F0FFFFCA 		bgt	.L100		@,
 1663 079c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1664              	.LVL110:
 1665              	.L101:
 1666              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1667              		.loc 1 395 55 discriminator 2 view .LVU428
 1668 07a0 015085E2 		add	r5, r5, #1	@ yy, yy,
 1669              	.LVL111:
 1670              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1671              		.loc 1 395 5 discriminator 2 view .LVU429
 1672 07a4 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1673 07a8 E9FFFFBA 		blt	.L99		@,
 1674              	.LVL112:
 1675              	.L98:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1676              		.loc 1 404 5 is_stmt 1 view .LVU430
 1677 07ac 0700A0E1 		mov	r0, r7	@, fp
 1678              	@ armwave.c:405: }
 405:armwave.c     **** }
 1679              		.loc 1 405 1 is_stmt 0 view .LVU431
 1680 07b0 0CD08DE2 		add	sp, sp, #12	@,,
 1681              		.cfi_def_cfa_offset 28
 1682              		@ sp needed	@
 1683 07b4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1684              		.cfi_restore 14
 1685              		.cfi_restore 9
 1686              		.cfi_restore 8
 1687              		.cfi_restore 7
 1688              		.cfi_restore 6
 1689              		.cfi_restore 5
 1690              		.cfi_restore 4
 1691              		.cfi_def_cfa_offset 0
 1692              	.LVL113:
 1693              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1694              		.loc 1 404 5 view .LVU432
 1695 07b8 FEFFFFEA 		b	fclose		@
 1696              	.LVL114:
 1697              	.L106:
 404:armwave.c     **** }
 1698              		.loc 1 404 5 view .LVU433
 1699              		.align	2
 1700              	.L105:
 1701 07bc C8010000 		.word	.LC14
 1702 07c0 00000000 		.word	g_armwave_state
 1703 07c4 CC010000 		.word	.LC15
 1704 07c8 D0010000 		.word	.LC16
 1705 07cc D8010000 		.word	.LC17
 1706 07d0 E0010000 		.word	.LC18
 1707              		.cfi_endproc
 1708              	.LFE67:
 1710              		.align	2
 1711              		.global	armwave_test_init
 1712              		.syntax unified
 1713              		.arm
 1714              		.fpu vfp
 1716              	armwave_test_init:
 1717              	.LVL115:
 1718              	.LFB68:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1719              		.loc 1 411 1 is_stmt 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1723              		.loc 1 412 5 view .LVU435
 1724              	.LBB12:
 1725              	.LBI12:
  34:armwave.c     **** {
 1726              		.loc 1 34 6 view .LVU436
  34:armwave.c     **** {
 1727              		.loc 1 34 6 is_stmt 0 view .LVU437
 1728              	.LBE12:
 1729              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1730              		.loc 1 411 1 view .LVU438
 1731 07d4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1732              		.cfi_def_cfa_offset 32
 1733              		.cfi_offset 4, -32
 1734              		.cfi_offset 5, -28
 1735              		.cfi_offset 6, -24
 1736              		.cfi_offset 7, -20
 1737              		.cfi_offset 8, -16
 1738              		.cfi_offset 9, -12
 1739              		.cfi_offset 10, -8
 1740              		.cfi_offset 14, -4
 1741 07d8 068B2DED 		vpush.64	{d8, d9, d10}	@
 1742              		.cfi_def_cfa_offset 56
 1743              		.cfi_offset 80, -56
 1744              		.cfi_offset 81, -52
 1745              		.cfi_offset 82, -48
 1746              		.cfi_offset 83, -44
 1747              		.cfi_offset 84, -40
 1748              		.cfi_offset 85, -36
 1749 07dc C0409FE5 		ldr	r4, .L111+20	@ ivtmp.80,
 1750              	.LBB15:
 1751              	.LBB13:
 1752              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1753              		.loc 1 40 32 view .LVU439
 1754 07e0 2EAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1755              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1756              		.loc 1 40 26 view .LVU440
 1757 07e4 299B9FED 		vldr.64	d9, .L111	@ tmp151,
 1758              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1759              		.loc 1 40 49 view .LVU441
 1760 07e8 2A8B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1761 07ec 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.80,
 1762              	.LBE13:
 1763              	.LBE15:
 1764              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1765              		.loc 1 411 1 view .LVU442
 1766 07f0 10D04DE2 		sub	sp, sp, #16	@,,
 1767              		.cfi_def_cfa_offset 72
 1768              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1769              		.loc 1 411 1 view .LVU443
 1770 07f4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1771 07f8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1772 07fc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1773 0800 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1774 0804 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.80,
 1775 0808 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1776              	.LVL116:
 1777              	.L108:
 1778              	.LBB16:
 1779              	.LBB14:
  40:armwave.c     ****     }
 1780              		.loc 1 40 9 is_stmt 1 view .LVU444
 1781              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1782              		.loc 1 40 32 is_stmt 0 view .LVU445
 1783 080c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.80
 1784              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1785              		.loc 1 40 26 view .LVU446
 1786 0810 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1787              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1788              		.loc 1 40 32 view .LVU447
 1789 0814 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1790 0818 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1791 081c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1792              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1793              		.loc 1 40 26 view .LVU448
 1794 0820 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1795 0824 FEFFFFEB 		bl	pow		@
 1796              	.LVL117:
 1797              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1798              		.loc 1 40 49 view .LVU449
 1799 0828 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1800              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1801              		.loc 1 40 24 view .LVU450
 1802 082c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1803 0830 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1804 0834 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1805              	.LVL118:
 1806              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1807              		.loc 1 39 5 view .LVU451
 1808 0838 0A0054E1 		cmp	r4, r10	@ ivtmp.80, _39
 1809 083c F2FFFF1A 		bne	.L108		@,
 1810              	.LVL119:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1811              		.loc 1 39 5 view .LVU452
 1812              	.LBE14:
 1813              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1814              		.loc 1 415 5 is_stmt 1 view .LVU453
 1815              	.LBB17:
 1816              	.LBI17:
 368:armwave.c     **** {
 1817              		.loc 1 368 6 view .LVU454
 1818              	.LBB18:
 371:armwave.c     ****         case 1:
 1819              		.loc 1 371 5 view .LVU455
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1820              		.loc 1 373 13 view .LVU456
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1821              		.loc 1 374 13 view .LVU457
 1822              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1823              		.loc 1 373 41 is_stmt 0 view .LVU458
 1824 0840 60C09FE5 		ldr	ip, .L111+24	@ tmp142,
 1825 0844 60409FE5 		ldr	r4, .L111+28	@ tmp143,
 1826              	.LBE18:
 1827              	.LBE17:
 1828              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1829              		.loc 1 417 5 view .LVU459
 1830 0848 0000A0E3 		mov	r0, #0	@ tmp147,
 1831              	.LBB22:
 1832              	.LBB19:
 1833              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1834              		.loc 1 375 41 view .LVU460
 1835 084c FAE0A0E3 		mov	lr, #250	@ tmp146,
 1836              	.LBE19:
 1837              	.LBE22:
 1838              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1839              		.loc 1 417 5 view .LVU461
 1840 0850 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1841 0854 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1842 0858 00808DE5 		str	r8, [sp]	@ render_width,
 1843 085c 0610A0E1 		mov	r1, r6	@, tmp3
 1844 0860 0720A0E1 		mov	r2, r7	@, nwaves
 1845              	.LBB23:
 1846              	.LBB20:
 1847              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1848              		.loc 1 373 41 view .LVU462
 1849 0864 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 1850              		.loc 1 375 13 is_stmt 1 view .LVU463
 1851              	.LBE20:
 1852              	.LBE23:
 1853              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1854              		.loc 1 417 5 is_stmt 0 view .LVU464
 1855 0868 0630A0E1 		mov	r3, r6	@, wave_size
 1856              	.LBB24:
 1857              	.LBB21:
 1858              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1859              		.loc 1 375 41 view .LVU465
 1860 086c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 1861              		.loc 1 376 13 is_stmt 1 view .LVU466
 1862              	.LVL120:
 376:armwave.c     ****     }
 1863              		.loc 1 376 13 is_stmt 0 view .LVU467
 1864              	.LBE21:
 1865              	.LBE24:
 1866              		.loc 1 417 5 is_stmt 1 view .LVU468
 1867 0870 FEFFFFEB 		bl	armwave_setup_render		@
 1868              	.LVL121:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1869              		.loc 1 419 5 view .LVU469
 1870 0874 34109FE5 		ldr	r1, .L111+32	@,
 1871 0878 34009FE5 		ldr	r0, .L111+36	@,
 1872              	@ armwave.c:420: }
 420:armwave.c     **** }
 1873              		.loc 1 420 1 is_stmt 0 view .LVU470
 1874 087c 10D08DE2 		add	sp, sp, #16	@,,
 1875              		.cfi_def_cfa_offset 56
 1876              		@ sp needed	@
 1877 0880 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1878              		.cfi_restore 84
 1879              		.cfi_restore 85
 1880              		.cfi_restore 82
 1881              		.cfi_restore 83
 1882              		.cfi_restore 80
 1883              		.cfi_restore 81
 1884              		.cfi_def_cfa_offset 32
 1885 0884 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1886              		.cfi_restore 14
 1887              		.cfi_restore 10
 1888              		.cfi_restore 9
 1889              		.cfi_restore 8
 1890              		.cfi_restore 7
 1891              		.cfi_restore 6
 1892              		.cfi_restore 5
 1893              		.cfi_restore 4
 1894              		.cfi_def_cfa_offset 0
 1895              	.LVL122:
 1896              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 1897              		.loc 1 419 5 view .LVU471
 1898 0888 FEFFFFEA 		b	printf		@
 1899              	.LVL123:
 1900              	.L112:
 1901 088c 0000A0E1 		.align	3
 1902              	.L111:
 1903 0890 000000C0 		.word	-1073741824
 1904 0894 CCCCEC3F 		.word	1072483532
 1905 0898 00000000 		.word	0
 1906 089c 00E06F40 		.word	1081073664
 1907 08a0 00007F43 		.word	1132396544
 1908 08a4 FFFFFFFF 		.word	gamma_table-1
 1909 08a8 00000000 		.word	g_armwave_state
 1910 08ac F609F406 		.word	116656630
 1911 08b0 00000000 		.word	.LC0
 1912 08b4 08000000 		.word	.LC1
 1913              		.cfi_endproc
 1914              	.LFE68:
 1916              		.align	2
 1917              		.global	armwave_test_generate
 1918              		.syntax unified
 1919              		.arm
 1920              		.fpu vfp
 1922              	armwave_test_generate:
 1923              	.LVL124:
 1924              	.LFB69:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Fill buffers with test funtionry.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_generate(int debug)
 426:armwave.c     **** {
 1925              		.loc 1 426 1 is_stmt 1 view -0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 16
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 427:armwave.c     ****     uint32_t yy;
 1929              		.loc 1 427 5 view .LVU473
 428:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1930              		.loc 1 428 5 view .LVU474
 429:armwave.c     **** 
 430:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1931              		.loc 1 430 5 view .LVU475
 1932              	@ armwave.c:426: {
 426:armwave.c     ****     uint32_t yy;
 1933              		.loc 1 426 1 is_stmt 0 view .LVU476
 1934 08b8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1935              		.cfi_def_cfa_offset 36
 1936              		.cfi_offset 4, -36
 1937              		.cfi_offset 5, -32
 1938              		.cfi_offset 6, -28
 1939              		.cfi_offset 7, -24
 1940              		.cfi_offset 8, -20
 1941              		.cfi_offset 9, -16
 1942              		.cfi_offset 10, -12
 1943              		.cfi_offset 11, -8
 1944              		.cfi_offset 14, -4
 1945 08bc 1CD04DE2 		sub	sp, sp, #28	@,,
 1946              		.cfi_def_cfa_offset 64
 1947              	@ armwave.c:430:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1948              		.loc 1 430 58 view .LVU477
 1949 08c0 E8719FE5 		ldr	r7, .L133	@ tmp331,
 1950              	@ armwave.c:426: {
 426:armwave.c     ****     uint32_t yy;
 1951              		.loc 1 426 1 view .LVU478
 1952 08c4 0040A0E1 		mov	r4, r0	@ debug, debug
 1953 08c8 14008DE5 		str	r0, [sp, #20]	@ debug, %sfp
 1954              	@ armwave.c:430:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1955              		.loc 1 430 5 view .LVU479
 1956 08cc 0010A0E3 		mov	r1, #0	@,
 1957 08d0 502097E5 		ldr	r2, [r7, #80]	@, g_armwave_state.ch_buff_size
 1958 08d4 040097E5 		ldr	r0, [r7, #4]	@, g_armwave_state.ch1_buffer
 1959              	.LVL125:
 1960              		.loc 1 430 5 view .LVU480
 1961 08d8 FEFFFFEB 		bl	memset		@
 1962              	.LVL126:
 431:armwave.c     **** 
 432:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 433:armwave.c     ****     for(yy = 0; yy < debug; yy++) {
 1963              		.loc 1 433 5 is_stmt 1 view .LVU481
 1964              		.loc 1 433 5 is_stmt 0 view .LVU482
 1965 08dc 003054E2 		subs	r3, r4, #0	@ debug, debug
 1966 08e0 7000000A 		beq	.L113		@,
 1967              	@ armwave.c:433:     for(yy = 0; yy < debug; yy++) {
 1968              		.loc 1 433 12 view .LVU483
 1969 08e4 00A0A0E3 		mov	r10, #0	@ yy,
 1970 08e8 0AB0A0E1 		mov	fp, r10	@ yy, yy
 1971              	.LVL127:
 1972              	.L114:
 434:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 435:armwave.c     **** 
 436:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1973              		.loc 1 436 9 is_stmt 1 discriminator 3 view .LVU484
 1974 08ec 445097E5 		ldr	r5, [r7, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 1975              	.LBB27:
 1976              	.LBB28:
 1977              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1978              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU485
 1979 08f0 243097E5 		ldr	r3, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1980              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1981              		.loc 1 71 130 discriminator 3 view .LVU486
 1982 08f4 401097E5 		ldr	r1, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1983              	.LBE28:
 1984              	.LBE27:
 1985              	@ armwave.c:436:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1986              		.loc 1 436 9 discriminator 3 view .LVU487
 1987 08f8 950B05E0 		mul	r5, r5, fp	@ _6, g_armwave_state.slice_height, yy
 1988              	.LBB31:
 1989              	.LBB29:
 1990              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1991              		.loc 1 71 40 discriminator 3 view .LVU488
 1992 08fc 044097E5 		ldr	r4, [r7, #4]	@ _17, g_armwave_state.ch1_buffer
 1993              	.LBE29:
 1994              	.LBE31:
 1995              	@ armwave.c:436:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1996              		.loc 1 436 9 discriminator 3 view .LVU489
 1997 0900 489097E5 		ldr	r9, [r7, #72]	@ _8, g_armwave_state.slice_record_height
 1998              	.LVL128:
 1999              	.LBB32:
 2000              	.LBI27:
  62:armwave.c     **** {
 2001              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU490
 2002              	.LBB30:
  64:armwave.c     ****     uint32_t value, word;
 2003              		.loc 1 64 5 discriminator 3 view .LVU491
  65:armwave.c     ****     uint8_t *wave_base;
 2004              		.loc 1 65 5 discriminator 3 view .LVU492
  66:armwave.c     ****     uint8_t *write_buffer_base;
 2005              		.loc 1 66 5 discriminator 3 view .LVU493
  67:armwave.c     ****     uint8_t *write_buffer;
 2006              		.loc 1 67 5 discriminator 3 view .LVU494
  68:armwave.c     **** 
 2007              		.loc 1 68 5 discriminator 3 view .LVU495
  71:armwave.c     **** 
 2008              		.loc 1 71 5 discriminator 3 view .LVU496
 2009              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2010              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU497
 2011 0904 930503E0 		mul	r3, r3, r5	@ tmp233, g_armwave_state.cmp_x_bitdepth_scale, _6
 2012              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2013              		.loc 1 73 5 discriminator 3 view .LVU498
 2014 0908 0420A0E1 		mov	r2, r4	@, _17
 2015 090c 00508DE5 		str	r5, [sp]	@ _6,
 2016              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2017              		.loc 1 71 105 discriminator 3 view .LVU499
 2018 0910 2334A0E1 		lsr	r3, r3, #8	@ tmp235, tmp233,
 2019              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2020              		.loc 1 73 5 discriminator 3 view .LVU500
 2021 0914 04908DE5 		str	r9, [sp, #4]	@ _8,
 2022              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2023              		.loc 1 71 130 discriminator 3 view .LVU501
 2024 0918 910303E0 		mul	r3, r1, r3	@ _23, g_armwave_state.bitdepth_height, tmp235
 2025              	@ armwave.c:73:     printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2026              		.loc 1 73 5 discriminator 3 view .LVU502
 2027 091c 90019FE5 		ldr	r0, .L133+4	@,
 2028              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 2029              		.loc 1 71 23 discriminator 3 view .LVU503
 2030 0920 034084E0 		add	r4, r4, r3	@ write_buffer_base, _17, _23
 2031              	.LVL129:
  73:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
 2032              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU504
 2033 0924 0410A0E1 		mov	r1, r4	@, write_buffer_base
 2034 0928 FEFFFFEB 		bl	printf		@
 2035              	.LVL130:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2036              		.loc 1 78 5 discriminator 3 view .LVU505
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2037              		.loc 1 78 5 is_stmt 0 discriminator 3 view .LVU506
 2038 092c 383097E5 		ldr	r3, [r7, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2039 0930 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2040 0934 570000DA 		ble	.L123		@,
 2041 0938 000059E3 		cmp	r9, #0	@ _8,
 2042 093c 5500000A 		beq	.L123		@,
 2043              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2044              		.loc 1 78 11 view .LVU507
 2045 0940 0060A0E3 		mov	r6, #0	@ w,
 2046 0944 043045E2 		sub	r3, r5, #4	@ tmp332, _6,
 2047 0948 08308DE5 		str	r3, [sp, #8]	@ tmp332, %sfp
 2048 094c 0C908DE5 		str	r9, [sp, #12]	@ _8, %sfp
 2049 0950 10B08DE5 		str	fp, [sp, #16]	@ yy, %sfp
 2050              	.LVL131:
 2051              	.L122:
  79:armwave.c     **** 
 2052              		.loc 1 79 9 is_stmt 1 view .LVU508
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2053              		.loc 1 83 9 view .LVU509
 2054              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 2055              		.loc 1 79 64 is_stmt 0 view .LVU510
 2056 0954 343097E5 		ldr	r3, [r7, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2057 0958 08109DE5 		ldr	r1, [sp, #8]	@ tmp332, %sfp
 2058 095c 14E097E5 		ldr	lr, [r7, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2059 0960 931623E0 		mla	r3, r3, r6, r1	@ tmp246, g_armwave_state.wave_stride, w, tmp332
 2060              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2061              		.loc 1 83 16 view .LVU511
 2062 0964 0020A0E3 		mov	r2, #0	@ yy,
 2063 0968 03E08EE0 		add	lr, lr, r3	@ ivtmp.86, g_armwave_state.wave_buffer, tmp246
 2064              	.LVL132:
 2065              	.L121:
  84:armwave.c     **** 
 2066              		.loc 1 84 13 is_stmt 1 view .LVU512
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2067              		.loc 1 98 17 view .LVU513
 100:armwave.c     ****                 word >>= 8;
 2068              		.loc 1 100 17 view .LVU514
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2069              		.loc 1 98 17 view .LVU515
 100:armwave.c     ****                 word >>= 8;
 2070              		.loc 1 100 17 view .LVU516
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2071              		.loc 1 98 17 view .LVU517
 100:armwave.c     ****                 word >>= 8;
 2072              		.loc 1 100 17 view .LVU518
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2073              		.loc 1 98 17 view .LVU519
 100:armwave.c     ****                 word >>= 8;
 2074              		.loc 1 100 17 view .LVU520
 2075              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 2076              		.loc 1 84 18 is_stmt 0 view .LVU521
 2077 096c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _258, offset: 0B]
 2078              	.LVL133:
  86:armwave.c     ****                 // maybe worth preloading the base address here...
 2079              		.loc 1 86 13 is_stmt 1 view .LVU522
  88:armwave.c     ****                 
 2080              		.loc 1 88 17 view .LVU523
  91:armwave.c     ****                     continue;
 2081              		.loc 1 91 17 view .LVU524
 2082              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2083              		.loc 1 99 34 is_stmt 0 view .LVU525
 2084 0970 01B082E2 		add	fp, r2, #1	@ tmp276, yy,
 2085              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2086              		.loc 1 91 20 view .LVU526
 2087 0974 FF8013E2 		ands	r8, r3, #255	@ scale_value, word,
 2088 0978 0110A003 		moveq	r1, #1	@ tmp249,
 2089 097c 0010A013 		movne	r1, #0	@ tmp249,
 2090              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2091              		.loc 1 91 19 view .LVU527
 2092 0980 FF0058E3 		cmp	r8, #255	@ scale_value,
 2093 0984 01108103 		orreq	r1, r1, #1	@,, tmp254, tmp249
 2094 0988 000051E3 		cmp	r1, #0	@ tmp254,
 2095              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2096              		.loc 1 99 34 view .LVU528
 2097 098c 02A082E2 		add	r10, r2, #2	@ tmp297, yy,
 2098 0990 039082E2 		add	r9, r2, #3	@ tmp317, yy,
 2099              	.LVL134:
 2100              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****             }
 2101              		.loc 1 101 22 view .LVU529
 2102 0994 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 2103 0998 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 2104              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2105              		.loc 1 91 19 view .LVU530
 2106 099c 3400001A 		bne	.L124		@,
 2107              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2108              		.loc 1 99 34 view .LVU531
 2109 09a0 241097E5 		ldr	r1, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2110              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2111              		.loc 1 91 20 view .LVU532
 2112 09a4 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 2113 09a8 0150A003 		moveq	r5, #1	@ tmp269,
 2114              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2115              		.loc 1 99 34 view .LVU533
 2116 09ac 910201E0 		mul	r1, r1, r2	@ tmp256, g_armwave_state.cmp_x_bitdepth_scale, yy
 2117              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2118              		.loc 1 91 20 view .LVU534
 2119 09b0 0050A013 		movne	r5, #0	@ tmp269,
 2120              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2121              		.loc 1 91 19 view .LVU535
 2122 09b4 FF005CE3 		cmp	ip, #255	@ scale_value,
 2123 09b8 01508503 		orreq	r5, r5, #1	@,, tmp274, tmp269
 2124 09bc 000055E3 		cmp	r5, #0	@ tmp274,
 2125              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2126              		.loc 1 100 47 view .LVU536
 2127 09c0 405097E5 		ldr	r5, [r7, #64]	@ tmp347, g_armwave_state.bitdepth_height
 2128              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2129              		.loc 1 99 74 view .LVU537
 2130 09c4 2114A0E1 		lsr	r1, r1, #8	@ tmp258, tmp256,
 2131              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2132              		.loc 1 100 47 view .LVU538
 2133 09c8 958121E0 		mla	r1, r5, r1, r8	@ tmp262, tmp347, tmp258, scale_value
 2134 09cc 0150D4E7 		ldrb	r5, [r4, r1]	@ zero_extendqisi2	@ *_92, *_92
 2135 09d0 015085E2 		add	r5, r5, #1	@ tmp265, *_92,
 2136 09d4 0150C4E7 		strb	r5, [r4, r1]	@ tmp265, *_92
 2137              	.LVL135:
 101:armwave.c     ****             }
 2138              		.loc 1 101 17 is_stmt 1 view .LVU539
  88:armwave.c     ****                 
 2139              		.loc 1 88 17 view .LVU540
  91:armwave.c     ****                     continue;
 2140              		.loc 1 91 17 view .LVU541
 2141              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2142              		.loc 1 91 19 is_stmt 0 view .LVU542
 2143 09d8 2500001A 		bne	.L124		@,
 2144              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2145              		.loc 1 99 34 view .LVU543
 2146 09dc 245097E5 		ldr	r5, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2147              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2148              		.loc 1 99 99 view .LVU544
 2149 09e0 401097E5 		ldr	r1, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2150              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2151              		.loc 1 91 20 view .LVU545
 2152 09e4 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 2153              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2154              		.loc 1 99 34 view .LVU546
 2155 09e8 950B0BE0 		mul	fp, r5, fp	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 2156              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2157              		.loc 1 91 20 view .LVU547
 2158 09ec 0150A003 		moveq	r5, #1	@ tmp290,
 2159 09f0 0050A013 		movne	r5, #0	@ tmp290,
 2160              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2161              		.loc 1 99 74 view .LVU548
 2162 09f4 2BB4A0E1 		lsr	fp, fp, #8	@ tmp279, tmp277,
 2163              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2164              		.loc 1 91 19 view .LVU549
 2165 09f8 FF0050E3 		cmp	r0, #255	@ scale_value,
 2166 09fc 01508503 		orreq	r5, r5, #1	@,, tmp295, tmp290
 2167              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2168              		.loc 1 100 47 view .LVU550
 2169 0a00 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp283, g_armwave_state.bitdepth_height, tmp279, scale_value
 2170              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2171              		.loc 1 91 19 view .LVU551
 2172 0a04 000055E3 		cmp	r5, #0	@ tmp295,
 2173              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2174              		.loc 1 100 47 view .LVU552
 2175 0a08 0C10D4E7 		ldrb	r1, [r4, ip]	@ zero_extendqisi2	@ *_122, *_122
 2176 0a0c 011081E2 		add	r1, r1, #1	@ tmp286, *_122,
 2177 0a10 0C10C4E7 		strb	r1, [r4, ip]	@ tmp286, *_122
 101:armwave.c     ****             }
 2178              		.loc 1 101 17 is_stmt 1 view .LVU553
 2179              	.LVL136:
  88:armwave.c     ****                 
 2180              		.loc 1 88 17 view .LVU554
  91:armwave.c     ****                     continue;
 2181              		.loc 1 91 17 view .LVU555
 2182              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2183              		.loc 1 91 19 is_stmt 0 view .LVU556
 2184 0a14 1600001A 		bne	.L124		@,
 2185              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2186              		.loc 1 99 34 view .LVU557
 2187 0a18 241097E5 		ldr	r1, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2188              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2189              		.loc 1 99 99 view .LVU558
 2190 0a1c 40C097E5 		ldr	ip, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2191              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2192              		.loc 1 91 20 view .LVU559
 2193 0a20 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2194              	.LVL137:
 2195              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2196              		.loc 1 99 34 view .LVU560
 2197 0a24 910A0AE0 		mul	r10, r1, r10	@ tmp298, g_armwave_state.cmp_x_bitdepth_scale, tmp297
 2198              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2199              		.loc 1 91 20 view .LVU561
 2200 0a28 0110A003 		moveq	r1, #1	@ tmp310,
 2201 0a2c 0010A013 		movne	r1, #0	@ tmp310,
 2202              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2203              		.loc 1 99 74 view .LVU562
 2204 0a30 2AA4A0E1 		lsr	r10, r10, #8	@ tmp300, tmp298,
 2205              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2206              		.loc 1 91 19 view .LVU563
 2207 0a34 FF0053E3 		cmp	r3, #255	@ word,
 2208 0a38 01108103 		orreq	r1, r1, #1	@,, tmp315, tmp310
 2209              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2210              		.loc 1 100 47 view .LVU564
 2211 0a3c 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp304, g_armwave_state.bitdepth_height, tmp300, scale_value
 2212              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2213              		.loc 1 91 19 view .LVU565
 2214 0a40 000051E3 		cmp	r1, #0	@ tmp315,
 2215              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2216              		.loc 1 100 47 view .LVU566
 2217 0a44 0010D4E7 		ldrb	r1, [r4, r0]	@ zero_extendqisi2	@ *_152, *_152
 2218 0a48 011081E2 		add	r1, r1, #1	@ tmp307, *_152,
 2219 0a4c 0010C4E7 		strb	r1, [r4, r0]	@ tmp307, *_152
 101:armwave.c     ****             }
 2220              		.loc 1 101 17 is_stmt 1 view .LVU567
 2221              	.LVL138:
  88:armwave.c     ****                 
 2222              		.loc 1 88 17 view .LVU568
  91:armwave.c     ****                     continue;
 2223              		.loc 1 91 17 view .LVU569
 2224              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 2225              		.loc 1 91 19 is_stmt 0 view .LVU570
 2226 0a50 0700001A 		bne	.L124		@,
 2227              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2228              		.loc 1 99 34 view .LVU571
 2229 0a54 241097E5 		ldr	r1, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2230              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2231              		.loc 1 99 99 view .LVU572
 2232 0a58 400097E5 		ldr	r0, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2233              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2234              		.loc 1 99 34 view .LVU573
 2235 0a5c 910909E0 		mul	r9, r1, r9	@ tmp318, g_armwave_state.cmp_x_bitdepth_scale, tmp317
 2236              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2237              		.loc 1 99 74 view .LVU574
 2238 0a60 2994A0E1 		lsr	r9, r9, #8	@ tmp320, tmp318,
 2239              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 2240              		.loc 1 100 47 view .LVU575
 2241 0a64 903923E0 		mla	r3, r0, r9, r3	@ tmp324, g_armwave_state.bitdepth_height, tmp320, word
 2242 0a68 0310D4E7 		ldrb	r1, [r4, r3]	@ zero_extendqisi2	@ *_182, *_182
 2243 0a6c 011081E2 		add	r1, r1, #1	@ tmp327, *_182,
 2244 0a70 0310C4E7 		strb	r1, [r4, r3]	@ tmp327, *_182
 101:armwave.c     ****             }
 2245              		.loc 1 101 17 is_stmt 1 view .LVU576
 2246              	.LVL139:
 2247              	.L124:
 2248              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2249              		.loc 1 83 9 is_stmt 0 view .LVU577
 2250 0a74 0C309DE5 		ldr	r3, [sp, #12]	@ _8, %sfp
 2251              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2252              		.loc 1 83 37 view .LVU578
 2253 0a78 042082E2 		add	r2, r2, #4	@ yy, yy,
 2254              	.LVL140:
 2255              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2256              		.loc 1 83 9 view .LVU579
 2257 0a7c 020053E1 		cmp	r3, r2	@ _8, yy
 2258 0a80 B9FFFF8A 		bhi	.L121		@,
 2259              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2260              		.loc 1 78 5 view .LVU580
 2261 0a84 383097E5 		ldr	r3, [r7, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2262              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2263              		.loc 1 78 44 view .LVU581
 2264 0a88 016086E2 		add	r6, r6, #1	@ w, w,
 2265              	.LVL141:
 2266              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2267              		.loc 1 78 5 view .LVU582
 2268 0a8c 030056E1 		cmp	r6, r3	@ w, g_armwave_state.waves
 2269 0a90 AFFFFFBA 		blt	.L122		@,
 2270 0a94 10B09DE5 		ldr	fp, [sp, #16]	@ yy, %sfp
 2271              	.LVL142:
 2272              	.L123:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2273              		.loc 1 78 5 view .LVU583
 2274              	.LBE30:
 2275              	.LBE32:
 437:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 2276              		.loc 1 437 9 is_stmt 1 view .LVU584
 438:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 2277              		.loc 1 438 9 view .LVU585
 2278              	@ armwave.c:433:     for(yy = 0; yy < debug; yy++) {
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2279              		.loc 1 433 5 is_stmt 0 view .LVU586
 2280 0a98 14309DE5 		ldr	r3, [sp, #20]	@ debug, %sfp
 2281              	@ armwave.c:433:     for(yy = 0; yy < debug; yy++) {
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2282              		.loc 1 433 31 view .LVU587
 2283 0a9c 01B08BE2 		add	fp, fp, #1	@ yy, yy,
 2284              	.LVL143:
 2285              	@ armwave.c:433:     for(yy = 0; yy < debug; yy++) {
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2286              		.loc 1 433 5 view .LVU588
 2287 0aa0 03005BE1 		cmp	fp, r3	@ yy, debug
 2288 0aa4 90FFFF1A 		bne	.L114		@,
 2289              	.LVL144:
 2290              	.L113:
 2291              	@ armwave.c:442: }
 439:armwave.c     ****     }
 440:armwave.c     **** 
 441:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 442:armwave.c     **** }
 2292              		.loc 1 442 1 view .LVU589
 2293 0aa8 1CD08DE2 		add	sp, sp, #28	@,,
 2294              		.cfi_def_cfa_offset 36
 2295              		@ sp needed	@
 2296 0aac F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2297              	.L134:
 2298              		.align	2
 2299              	.L133:
 2300 0ab0 00000000 		.word	g_armwave_state
 2301 0ab4 20000000 		.word	.LC2
 2302              		.cfi_endproc
 2303              	.LFE69:
 2305              		.align	2
 2306              		.global	armwave_test_fill_outbuf
 2307              		.syntax unified
 2308              		.arm
 2309              		.fpu vfp
 2311              	armwave_test_fill_outbuf:
 2312              	.LFB70:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Render image to the local allocated buffer.
 446:armwave.c     ****  */
 447:armwave.c     **** void armwave_test_fill_outbuf()
 448:armwave.c     **** {
 2313              		.loc 1 448 1 is_stmt 1 view -0
 2314              		.cfi_startproc
 2315              		@ args = 0, pretend = 0, frame = 8
 2316              		@ frame_needed = 0, uses_anonymous_args = 0
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2317              		.loc 1 449 5 view .LVU591
 2318 0ab8 50C19FE5 		ldr	ip, .L156	@ tmp204,
 2319              	@ armwave.c:448: {
 448:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2320              		.loc 1 448 1 is_stmt 0 view .LVU592
 2321 0abc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2322              		.cfi_def_cfa_offset 36
 2323              		.cfi_offset 4, -36
 2324              		.cfi_offset 5, -32
 2325              		.cfi_offset 6, -28
 2326              		.cfi_offset 7, -24
 2327              		.cfi_offset 8, -20
 2328              		.cfi_offset 9, -16
 2329              		.cfi_offset 10, -12
 2330              		.cfi_offset 11, -8
 2331              		.cfi_offset 14, -4
 2332 0ac0 0CD04DE2 		sub	sp, sp, #12	@,,
 2333              		.cfi_def_cfa_offset 48
 2334              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2335              		.loc 1 449 5 view .LVU593
 2336 0ac4 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2337              	.LVL145:
 2338              	.LBB35:
 2339              	.LBI35:
 166:armwave.c     **** {
 2340              		.loc 1 166 6 is_stmt 1 view .LVU594
 2341              	.LBB36:
 168:armwave.c     ****     // uint32_t ysub;
 2342              		.loc 1 168 5 view .LVU595
 170:armwave.c     ****     uint8_t r, g, b, value; 
 2343              		.loc 1 170 5 view .LVU596
 171:armwave.c     ****     // uint8_t row;
 2344              		.loc 1 171 5 view .LVU597
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2345              		.loc 1 173 5 view .LVU598
 2346              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2347              		.loc 1 173 15 is_stmt 0 view .LVU599
 2348 0ac8 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2349              	.LVL146:
 174:armwave.c     ****     uint32_t offset;
 2350              		.loc 1 174 5 is_stmt 1 view .LVU600
 175:armwave.c     **** 
 2351              		.loc 1 175 5 view .LVU601
 177:armwave.c     **** 
 2352              		.loc 1 177 5 view .LVU602
 2353 0acc 000058E3 		cmp	r8, #0	@ _1,
 2354 0ad0 4900000A 		beq	.L154		@,
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2355              		.loc 1 179 5 view .LVU603
 2356              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2357              		.loc 1 179 10 is_stmt 0 view .LVU604
 2358 0ad4 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2359 0ad8 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2360              	.LVL147:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2361              		.loc 1 182 5 is_stmt 1 view .LVU605
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2362              		.loc 1 182 5 is_stmt 0 view .LVU606
 2363 0adc 000057E3 		cmp	r7, #0	@ npix,
 2364 0ae0 0A0000DA 		ble	.L135		@,
 2365              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2366              		.loc 1 194 52 view .LVU607
 2367 0ae4 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2368              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2369              		.loc 1 195 52 view .LVU608
 2370 0ae8 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2371              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2372              		.loc 1 196 52 view .LVU609
 2373 0aec F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2374              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2375              		.loc 1 218 57 view .LVU610
 2376 0af0 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2377              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2378              		.loc 1 182 11 view .LVU611
 2379 0af4 00E0A0E3 		mov	lr, #0	@ n,
 2380              	.LVL148:
 2381              	.L142:
 186:armwave.c     **** 
 2382              		.loc 1 186 9 is_stmt 1 view .LVU612
 2383              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 2384              		.loc 1 186 19 is_stmt 0 view .LVU613
 2385 0af8 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2386              	.LVL149:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2387              		.loc 1 188 9 is_stmt 1 view .LVU614
 2388              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2389              		.loc 1 188 11 is_stmt 0 view .LVU615
 2390 0afc 000050E3 		cmp	r0, #0	@ wave_word,
 2391 0b00 0400001A 		bne	.L151		@,
 2392 0b04 04E08EE2 		add	lr, lr, #4	@ n, n,
 2393              	.L138:
 2394              	.LVL150:
 2395              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2396              		.loc 1 182 5 view .LVU616
 2397 0b08 0E0057E1 		cmp	r7, lr	@ npix, n
 2398 0b0c F9FFFFCA 		bgt	.L142		@,
 2399              	.LVL151:
 2400              	.L135:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2401              		.loc 1 182 5 view .LVU617
 2402              	.LBE36:
 2403              	.LBE35:
 2404              	@ armwave.c:450: }
 450:armwave.c     **** }
 2405              		.loc 1 450 1 view .LVU618
 2406 0b10 0CD08DE2 		add	sp, sp, #12	@,,
 2407              		.cfi_remember_state
 2408              		.cfi_def_cfa_offset 36
 2409              		@ sp needed	@
 2410 0b14 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2411              	.LVL152:
 2412              	.L151:
 2413              		.cfi_restore_state
 2414              	.LBB38:
 2415              	.LBB37:
 2416              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2417              		.loc 1 193 19 view .LVU619
 2418 0b18 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2419              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2420              		.loc 1 188 11 view .LVU620
 2421 0b1c 0E60A0E1 		mov	r6, lr	@ ivtmp.103, n
 2422              	.LVL153:
 190:armwave.c     ****                 wave_word >>= 8;
 2423              		.loc 1 190 17 is_stmt 1 view .LVU621
 191:armwave.c     **** 
 2424              		.loc 1 191 17 view .LVU622
 2425              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2426              		.loc 1 191 27 is_stmt 0 view .LVU623
 2427 0b20 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2428              	.LVL154:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2429              		.loc 1 193 17 is_stmt 1 view .LVU624
 2430 0b24 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.103,
 2431              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2432              		.loc 1 193 19 is_stmt 0 view .LVU625
 2433 0b28 0500001A 		bne	.L155		@,
 2434              	.LVL155:
 2435              	.L139:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2436              		.loc 1 193 19 view .LVU626
 2437 0b2c 016086E2 		add	r6, r6, #1	@ ivtmp.103, ivtmp.103,
 2438              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 2439              		.loc 1 189 13 view .LVU627
 2440 0b30 06005EE1 		cmp	lr, r6	@ n, ivtmp.103
 2441 0b34 F3FFFF0A 		beq	.L138		@,
 190:armwave.c     ****                 wave_word >>= 8;
 2442              		.loc 1 190 17 is_stmt 1 view .LVU628
 2443              	.LVL156:
 191:armwave.c     **** 
 2444              		.loc 1 191 17 view .LVU629
 2445              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2446              		.loc 1 193 19 is_stmt 0 view .LVU630
 2447 0b38 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2448              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2449              		.loc 1 191 27 view .LVU631
 2450 0b3c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2451              	.LVL157:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2452              		.loc 1 193 17 is_stmt 1 view .LVU632
 2453              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2454              		.loc 1 193 19 is_stmt 0 view .LVU633
 2455 0b40 F9FFFF0A 		beq	.L139		@,
 2456              	.L155:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2457              		.loc 1 194 21 is_stmt 1 view .LVU634
 2458              	.LVL158:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2459              		.loc 1 195 21 view .LVU635
 196:armwave.c     **** 
 2460              		.loc 1 196 21 view .LVU636
 198:armwave.c     ****                     g = MIN(gg, 255);
 2461              		.loc 1 198 21 view .LVU637
 199:armwave.c     ****                     b = MIN(bb, 255);
 2462              		.loc 1 199 21 view .LVU638
 200:armwave.c     **** 
 2463              		.loc 1 200 21 view .LVU639
 203:armwave.c     **** 
 2464              		.loc 1 203 21 view .LVU640
 2465              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2466              		.loc 1 218 32 is_stmt 0 view .LVU641
 2467 0b44 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.103
 2468              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2469              		.loc 1 219 41 view .LVU642
 2470 0b48 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2471              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2472              		.loc 1 218 40 view .LVU643
 2473 0b4c 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2474              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2475              		.loc 1 219 41 view .LVU644
 2476 0b50 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2477              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2478              		.loc 1 196 55 view .LVU645
 2479 0b54 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2480              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2481              		.loc 1 218 40 view .LVU646
 2482 0b58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2483              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2484              		.loc 1 219 46 view .LVU647
 2485 0b5c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2486              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2487              		.loc 1 195 55 view .LVU648
 2488 0b60 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2489              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2490              		.loc 1 196 24 view .LVU649
 2491 0b64 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2492              	.LVL159:
 2493              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2494              		.loc 1 200 25 view .LVU650
 2495 0b68 FF0053E3 		cmp	r3, #255	@ bb,
 2496              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2497              		.loc 1 195 24 view .LVU651
 2498 0b6c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2499              	.LVL160:
 2500              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2501              		.loc 1 200 25 view .LVU652
 2502 0b70 FF30A0A3 		movge	r3, #255	@ bb,
 2503              	.LVL161:
 2504              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2505              		.loc 1 218 40 view .LVU653
 2506 0b74 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2507              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2508              		.loc 1 219 46 view .LVU654
 2509 0b78 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2510              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 2511              		.loc 1 199 25 view .LVU655
 2512 0b7c FF0052E3 		cmp	r2, #255	@ gg,
 2513 0b80 FF20A0A3 		movge	r2, #255	@ gg,
 2514              	.LVL162:
 2515              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2516              		.loc 1 194 55 view .LVU656
 2517 0b84 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2518              	.LVL163:
 2519              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2520              		.loc 1 203 56 view .LVU657
 2521 0b88 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2522              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2523              		.loc 1 203 44 view .LVU658
 2524 0b8c 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2525              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2526              		.loc 1 218 24 view .LVU659
 2527 0b90 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2528              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2529              		.loc 1 194 24 view .LVU660
 2530 0b94 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2531              	.LVL164:
 2532              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2533              		.loc 1 203 56 view .LVU661
 2534 0b98 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2535              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2536              		.loc 1 203 44 view .LVU662
 2537 0b9c FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2538              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2539              		.loc 1 198 25 view .LVU663
 2540 0ba0 FF0051E3 		cmp	r1, #255	@ rr,
 2541              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2542              		.loc 1 203 51 view .LVU664
 2543 0ba4 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2544              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2545              		.loc 1 198 25 view .LVU665
 2546 0ba8 FF10A0A3 		movge	r1, #255	@ rr,
 2547              	.LVL165:
 2548              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2549              		.loc 1 218 24 view .LVU666
 2550 0bac 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2551              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2552              		.loc 1 219 24 view .LVU667
 2553 0bb0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2554              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2555              		.loc 1 203 62 view .LVU668
 2556 0bb4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2557 0bb8 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2558              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2559              		.loc 1 203 26 view .LVU669
 2560 0bbc FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2561              	.LVL166:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2562              		.loc 1 217 21 is_stmt 1 view .LVU670
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2563              		.loc 1 218 21 view .LVU671
 219:armwave.c     ****                     xx = (nsub >> 8);
 2564              		.loc 1 219 21 view .LVU672
 220:armwave.c     **** 
 2565              		.loc 1 220 21 view .LVU673
 2566              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 2567              		.loc 1 220 32 is_stmt 0 view .LVU674
 2568 0bc0 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.103,
 2569              	.LVL167:
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2570              		.loc 1 222 21 is_stmt 1 view .LVU675
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2571              		.loc 1 222 21 is_stmt 0 view .LVU676
 2572 0bc4 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2573              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2574              		.loc 1 219 24 view .LVU677
 2575 0bc8 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2576              	.LVL168:
 2577              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2578              		.loc 1 222 21 view .LVU678
 2579 0bcc 020054E1 		cmp	r4, r2	@ yy, ye
 2580 0bd0 D5FFFF2A 		bcs	.L139		@,
 2581 0bd4 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2582              	.LVL169:
 2583              	.L140:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2584              		.loc 1 223 25 is_stmt 1 view .LVU679
 224:armwave.c     ****                     }
 2585              		.loc 1 224 25 view .LVU680
 2586              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2587              		.loc 1 223 43 is_stmt 0 view .LVU681
 2588 0bd8 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2589              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2590              		.loc 1 222 21 view .LVU682
 2591 0bdc 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2592              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2593              		.loc 1 224 43 view .LVU683
 2594 0be0 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2595              	.LVL170:
 2596              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2597              		.loc 1 222 42 view .LVU684
 2598 0be4 014084E2 		add	r4, r4, #1	@ yy, yy,
 2599              	.LVL171:
 2600              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2601              		.loc 1 222 21 view .LVU685
 2602 0be8 040050E1 		cmp	r0, r4	@ ye, yy
 2603              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2604              		.loc 1 224 53 view .LVU686
 2605 0bec 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2606              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2607              		.loc 1 222 21 view .LVU687
 2608 0bf0 F8FFFF1A 		bne	.L140		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2609              		.loc 1 222 21 view .LVU688
 2610 0bf4 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2611 0bf8 CBFFFFEA 		b	.L139		@
 2612              	.LVL172:
 2613              	.L154:
 177:armwave.c     **** 
 2614              		.loc 1 177 5 is_stmt 1 view .LVU689
 2615 0bfc 10309FE5 		ldr	r3, .L156+4	@,
 2616 0c00 B120A0E3 		mov	r2, #177	@,
 2617 0c04 0C109FE5 		ldr	r1, .L156+8	@,
 2618 0c08 0C009FE5 		ldr	r0, .L156+12	@,
 2619 0c0c FEFFFFEB 		bl	__assert_fail		@
 2620              	.LVL173:
 2621              	.L157:
 2622              		.align	2
 2623              	.L156:
 2624 0c10 00000000 		.word	g_armwave_state
 2625 0c14 00000000 		.word	.LANCHOR0
 2626 0c18 54000000 		.word	.LC3
 2627 0c1c 60000000 		.word	.LC4
 2628              	.LBE37:
 2629              	.LBE38:
 2630              		.cfi_endproc
 2631              	.LFE70:
 2633              		.align	2
 2634              		.global	armwave_test_dump_buffer_to_ppm
 2635              		.syntax unified
 2636              		.arm
 2637              		.fpu vfp
 2639              	armwave_test_dump_buffer_to_ppm:
 2640              	.LVL174:
 2641              	.LFB71:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 456:armwave.c     **** {
 2642              		.loc 1 456 1 view -0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 0
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 2646              		@ link register save eliminated.
 457:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2647              		.loc 1 457 5 view .LVU691
 2648 0c20 08309FE5 		ldr	r3, .L159	@ tmp112,
 2649 0c24 0010A0E1 		mov	r1, r0	@, fn
 2650 0c28 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2651              	.LVL175:
 2652              		.loc 1 457 5 is_stmt 0 view .LVU692
 2653 0c2c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2654              	.LVL176:
 2655              	.L160:
 2656              		.loc 1 457 5 view .LVU693
 2657              		.align	2
 2658              	.L159:
 2659 0c30 00000000 		.word	g_armwave_state
 2660              		.cfi_endproc
 2661              	.LFE71:
 2663              		.align	2
 2664              		.global	armwave_test_fill_gdkbuf
 2665              		.syntax unified
 2666              		.arm
 2667              		.fpu vfp
 2669              	armwave_test_fill_gdkbuf:
 2670              	.LVL177:
 2671              	.LFB72:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Render GDK buffer with test funtionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 464:armwave.c     **** {
 2672              		.loc 1 464 1 is_stmt 1 view -0
 2673              		.cfi_startproc
 2674              		@ args = 0, pretend = 0, frame = 8
 2675              		@ frame_needed = 0, uses_anonymous_args = 0
 465:armwave.c     ****     //PyObject *mv;
 466:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 467:armwave.c     **** 
 468:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 469:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2676              		.loc 1 469 5 view .LVU695
 2677              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2678              		.loc 1 469 11 is_stmt 0 view .LVU696
 2679 0c34 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2680              	@ armwave.c:464: {
 464:armwave.c     ****     //PyObject *mv;
 2681              		.loc 1 464 1 view .LVU697
 2682 0c38 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2683              		.cfi_def_cfa_offset 36
 2684              		.cfi_offset 4, -36
 2685              		.cfi_offset 5, -32
 2686              		.cfi_offset 6, -28
 2687              		.cfi_offset 7, -24
 2688              		.cfi_offset 8, -20
 2689              		.cfi_offset 9, -16
 2690              		.cfi_offset 10, -12
 2691              		.cfi_offset 11, -8
 2692              		.cfi_offset 14, -4
 2693 0c3c 0CD04DE2 		sub	sp, sp, #12	@,,
 2694              		.cfi_def_cfa_offset 48
 2695              	.LBB41:
 2696              	.LBB42:
 2697              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2698              		.loc 1 173 15 view .LVU698
 2699 0c40 48519FE5 		ldr	r5, .L182	@ tmp206,
 2700              	.LBE42:
 2701              	.LBE41:
 2702              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2703              		.loc 1 469 11 view .LVU699
 2704 0c44 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2705              	.LVL178:
 470:armwave.c     ****     
 471:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2706              		.loc 1 472 5 is_stmt 1 view .LVU700
 2707              	.LBB45:
 2708              	.LBI41:
 166:armwave.c     **** {
 2709              		.loc 1 166 6 view .LVU701
 2710              	.LBB43:
 168:armwave.c     ****     // uint32_t ysub;
 2711              		.loc 1 168 5 view .LVU702
 170:armwave.c     ****     uint8_t r, g, b, value; 
 2712              		.loc 1 170 5 view .LVU703
 171:armwave.c     ****     // uint8_t row;
 2713              		.loc 1 171 5 view .LVU704
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2714              		.loc 1 173 5 view .LVU705
 2715              	@ armwave.c:177:     assert(out_buffer != NULL);
 177:armwave.c     **** 
 2716              		.loc 1 177 5 is_stmt 0 view .LVU706
 2717 0c48 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2718              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2719              		.loc 1 173 15 view .LVU707
 2720 0c4c 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2721              	.LVL179:
 174:armwave.c     ****     uint32_t offset;
 2722              		.loc 1 174 5 is_stmt 1 view .LVU708
 175:armwave.c     **** 
 2723              		.loc 1 175 5 view .LVU709
 177:armwave.c     **** 
 2724              		.loc 1 177 5 view .LVU710
 2725 0c50 4900000A 		beq	.L180		@,
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2726              		.loc 1 179 5 view .LVU711
 2727              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2728              		.loc 1 179 10 is_stmt 0 view .LVU712
 2729 0c54 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2730 0c58 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2731              	.LVL180:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2732              		.loc 1 182 5 is_stmt 1 view .LVU713
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2733              		.loc 1 182 5 is_stmt 0 view .LVU714
 2734 0c5c 000057E3 		cmp	r7, #0	@ npix,
 2735 0c60 0A0000DA 		ble	.L161		@,
 2736              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2737              		.loc 1 194 52 view .LVU715
 2738 0c64 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2739              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2740              		.loc 1 195 52 view .LVU716
 2741 0c68 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2742              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2743              		.loc 1 196 52 view .LVU717
 2744 0c6c F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2745              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2746              		.loc 1 218 57 view .LVU718
 2747 0c70 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2748              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2749              		.loc 1 182 11 view .LVU719
 2750 0c74 00C0A0E3 		mov	ip, #0	@ n,
 2751              	.LVL181:
 2752              	.L168:
 186:armwave.c     **** 
 2753              		.loc 1 186 9 is_stmt 1 view .LVU720
 2754              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 2755              		.loc 1 186 19 is_stmt 0 view .LVU721
 2756 0c78 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2757              	.LVL182:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2758              		.loc 1 188 9 is_stmt 1 view .LVU722
 2759              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2760              		.loc 1 188 11 is_stmt 0 view .LVU723
 2761 0c7c 000050E3 		cmp	r0, #0	@ wave_word,
 2762 0c80 0400001A 		bne	.L177		@,
 2763 0c84 04C08CE2 		add	ip, ip, #4	@ n, n,
 2764              	.L164:
 2765              	.LVL183:
 2766              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2767              		.loc 1 182 5 view .LVU724
 2768 0c88 0C0057E1 		cmp	r7, ip	@ npix, n
 2769 0c8c F9FFFFCA 		bgt	.L168		@,
 2770              	.LVL184:
 2771              	.L161:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2772              		.loc 1 182 5 view .LVU725
 2773              	.LBE43:
 2774              	.LBE45:
 2775              	@ armwave.c:473: }
 473:armwave.c     **** }
 2776              		.loc 1 473 1 view .LVU726
 2777 0c90 0CD08DE2 		add	sp, sp, #12	@,,
 2778              		.cfi_remember_state
 2779              		.cfi_def_cfa_offset 36
 2780              		@ sp needed	@
 2781 0c94 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2782              	.LVL185:
 2783              	.L177:
 2784              		.cfi_restore_state
 2785              	.LBB46:
 2786              	.LBB44:
 2787              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2788              		.loc 1 193 19 view .LVU727
 2789 0c98 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2790              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2791              		.loc 1 188 11 view .LVU728
 2792 0c9c 0C60A0E1 		mov	r6, ip	@ ivtmp.119, n
 2793              	.LVL186:
 190:armwave.c     ****                 wave_word >>= 8;
 2794              		.loc 1 190 17 is_stmt 1 view .LVU729
 191:armwave.c     **** 
 2795              		.loc 1 191 17 view .LVU730
 2796              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2797              		.loc 1 191 27 is_stmt 0 view .LVU731
 2798 0ca0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2799              	.LVL187:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2800              		.loc 1 193 17 is_stmt 1 view .LVU732
 2801 0ca4 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.119,
 2802              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2803              		.loc 1 193 19 is_stmt 0 view .LVU733
 2804 0ca8 0500001A 		bne	.L181		@,
 2805              	.LVL188:
 2806              	.L165:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2807              		.loc 1 193 19 view .LVU734
 2808 0cac 016086E2 		add	r6, r6, #1	@ ivtmp.119, ivtmp.119,
 2809              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 2810              		.loc 1 189 13 view .LVU735
 2811 0cb0 06005CE1 		cmp	ip, r6	@ n, ivtmp.119
 2812 0cb4 F3FFFF0A 		beq	.L164		@,
 190:armwave.c     ****                 wave_word >>= 8;
 2813              		.loc 1 190 17 is_stmt 1 view .LVU736
 2814              	.LVL189:
 191:armwave.c     **** 
 2815              		.loc 1 191 17 view .LVU737
 2816              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2817              		.loc 1 193 19 is_stmt 0 view .LVU738
 2818 0cb8 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2819              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2820              		.loc 1 191 27 view .LVU739
 2821 0cbc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2822              	.LVL190:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2823              		.loc 1 193 17 is_stmt 1 view .LVU740
 2824              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2825              		.loc 1 193 19 is_stmt 0 view .LVU741
 2826 0cc0 F9FFFF0A 		beq	.L165		@,
 2827              	.L181:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2828              		.loc 1 194 21 is_stmt 1 view .LVU742
 2829              	.LVL191:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2830              		.loc 1 195 21 view .LVU743
 196:armwave.c     **** 
 2831              		.loc 1 196 21 view .LVU744
 198:armwave.c     ****                     g = MIN(gg, 255);
 2832              		.loc 1 198 21 view .LVU745
 199:armwave.c     ****                     b = MIN(bb, 255);
 2833              		.loc 1 199 21 view .LVU746
 200:armwave.c     **** 
 2834              		.loc 1 200 21 view .LVU747
 203:armwave.c     **** 
 2835              		.loc 1 203 21 view .LVU748
 2836              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2837              		.loc 1 218 32 is_stmt 0 view .LVU749
 2838 0cc4 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.119
 2839              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2840              		.loc 1 219 41 view .LVU750
 2841 0cc8 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2842              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2843              		.loc 1 218 40 view .LVU751
 2844 0ccc 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2845              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2846              		.loc 1 219 41 view .LVU752
 2847 0cd0 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2848              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2849              		.loc 1 196 55 view .LVU753
 2850 0cd4 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2851              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2852              		.loc 1 218 40 view .LVU754
 2853 0cd8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2854              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2855              		.loc 1 219 46 view .LVU755
 2856 0cdc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2857              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2858              		.loc 1 195 55 view .LVU756
 2859 0ce0 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2860              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2861              		.loc 1 196 24 view .LVU757
 2862 0ce4 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2863              	.LVL192:
 2864              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2865              		.loc 1 200 25 view .LVU758
 2866 0ce8 FF0053E3 		cmp	r3, #255	@ bb,
 2867              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2868              		.loc 1 195 24 view .LVU759
 2869 0cec 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2870              	.LVL193:
 2871              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2872              		.loc 1 200 25 view .LVU760
 2873 0cf0 FF30A0A3 		movge	r3, #255	@ bb,
 2874              	.LVL194:
 2875              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2876              		.loc 1 218 40 view .LVU761
 2877 0cf4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2878              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2879              		.loc 1 219 46 view .LVU762
 2880 0cf8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2881              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 2882              		.loc 1 199 25 view .LVU763
 2883 0cfc FF0052E3 		cmp	r2, #255	@ gg,
 2884 0d00 FF20A0A3 		movge	r2, #255	@ gg,
 2885              	.LVL195:
 2886              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2887              		.loc 1 194 55 view .LVU764
 2888 0d04 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2889              	.LVL196:
 2890              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2891              		.loc 1 203 56 view .LVU765
 2892 0d08 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2893              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2894              		.loc 1 203 44 view .LVU766
 2895 0d0c 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2896              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2897              		.loc 1 218 24 view .LVU767
 2898 0d10 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2899              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2900              		.loc 1 194 24 view .LVU768
 2901 0d14 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2902              	.LVL197:
 2903              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2904              		.loc 1 203 56 view .LVU769
 2905 0d18 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2906              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2907              		.loc 1 203 44 view .LVU770
 2908 0d1c FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2909              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2910              		.loc 1 198 25 view .LVU771
 2911 0d20 FF0051E3 		cmp	r1, #255	@ rr,
 2912              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2913              		.loc 1 203 51 view .LVU772
 2914 0d24 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2915              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2916              		.loc 1 198 25 view .LVU773
 2917 0d28 FF10A0A3 		movge	r1, #255	@ rr,
 2918              	.LVL198:
 2919              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2920              		.loc 1 218 24 view .LVU774
 2921 0d2c 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2922              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2923              		.loc 1 219 24 view .LVU775
 2924 0d30 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2925              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2926              		.loc 1 203 62 view .LVU776
 2927 0d34 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2928 0d38 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2929              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2930              		.loc 1 203 26 view .LVU777
 2931 0d3c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2932              	.LVL199:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2933              		.loc 1 217 21 is_stmt 1 view .LVU778
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2934              		.loc 1 218 21 view .LVU779
 219:armwave.c     ****                     xx = (nsub >> 8);
 2935              		.loc 1 219 21 view .LVU780
 220:armwave.c     **** 
 2936              		.loc 1 220 21 view .LVU781
 2937              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 2938              		.loc 1 220 32 is_stmt 0 view .LVU782
 2939 0d40 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.119,
 2940              	.LVL200:
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2941              		.loc 1 222 21 is_stmt 1 view .LVU783
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2942              		.loc 1 222 21 is_stmt 0 view .LVU784
 2943 0d44 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2944              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2945              		.loc 1 219 24 view .LVU785
 2946 0d48 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2947              	.LVL201:
 2948              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2949              		.loc 1 222 21 view .LVU786
 2950 0d4c 02005EE1 		cmp	lr, r2	@ yy, ye
 2951 0d50 D5FFFF2A 		bcs	.L165		@,
 2952 0d54 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2953              	.LVL202:
 2954              	.L166:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2955              		.loc 1 223 25 is_stmt 1 view .LVU787
 224:armwave.c     ****                     }
 2956              		.loc 1 224 25 view .LVU788
 2957              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2958              		.loc 1 223 43 is_stmt 0 view .LVU789
 2959 0d58 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2960              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2961              		.loc 1 222 21 view .LVU790
 2962 0d5c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2963              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2964              		.loc 1 224 43 view .LVU791
 2965 0d60 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2966              	.LVL203:
 2967              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2968              		.loc 1 222 42 view .LVU792
 2969 0d64 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2970              	.LVL204:
 2971              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2972              		.loc 1 222 21 view .LVU793
 2973 0d68 0E0050E1 		cmp	r0, lr	@ ye, yy
 2974              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2975              		.loc 1 224 53 view .LVU794
 2976 0d6c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2977              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2978              		.loc 1 222 21 view .LVU795
 2979 0d70 F8FFFF1A 		bne	.L166		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2980              		.loc 1 222 21 view .LVU796
 2981 0d74 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2982 0d78 CBFFFFEA 		b	.L165		@
 2983              	.LVL205:
 2984              	.L180:
 177:armwave.c     **** 
 2985              		.loc 1 177 5 is_stmt 1 view .LVU797
 2986 0d7c 10309FE5 		ldr	r3, .L182+4	@,
 2987 0d80 B120A0E3 		mov	r2, #177	@,
 2988 0d84 0C109FE5 		ldr	r1, .L182+8	@,
 2989 0d88 0C009FE5 		ldr	r0, .L182+12	@,
 2990              	.LVL206:
 177:armwave.c     **** 
 2991              		.loc 1 177 5 is_stmt 0 view .LVU798
 2992 0d8c FEFFFFEB 		bl	__assert_fail		@
 2993              	.LVL207:
 2994              	.L183:
 2995              		.align	2
 2996              	.L182:
 2997 0d90 00000000 		.word	g_armwave_state
 2998 0d94 00000000 		.word	.LANCHOR0
 2999 0d98 54000000 		.word	.LC3
 3000 0d9c 60000000 		.word	.LC4
 3001              	.LBE44:
 3002              	.LBE46:
 3003              		.cfi_endproc
 3004              	.LFE72:
 3006              		.align	2
 3007              		.global	armwave_test_buffer_alloc
 3008              		.syntax unified
 3009              		.arm
 3010              		.fpu vfp
 3012              	armwave_test_buffer_alloc:
 3013              	.LVL208:
 3014              	.LFB73:
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 479:armwave.c     **** {
 3015              		.loc 1 479 1 is_stmt 1 view -0
 3016              		.cfi_startproc
 3017              		@ args = 0, pretend = 0, frame = 0
 3018              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3019              		.loc 1 480 5 view .LVU800
 3020              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3021              		.loc 1 479 1 is_stmt 0 view .LVU801
 3022 0da0 70402DE9 		push	{r4, r5, r6, lr}	@
 3023              		.cfi_def_cfa_offset 16
 3024              		.cfi_offset 4, -16
 3025              		.cfi_offset 5, -12
 3026              		.cfi_offset 6, -8
 3027              		.cfi_offset 14, -4
 3028              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3029              		.loc 1 479 1 view .LVU802
 3030 0da4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3031              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 3032              		.loc 1 480 23 view .LVU803
 3033 0da8 44409FE5 		ldr	r4, .L191	@ tmp128,
 3034 0dac 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3035              	.LVL209:
 3036              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 3037              		.loc 1 480 7 view .LVU804
 3038 0db0 000050E3 		cmp	r0, #0	@ _1,
 3039 0db4 0000000A 		beq	.L185		@,
 481:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3040              		.loc 1 481 9 is_stmt 1 view .LVU805
 3041 0db8 FEFFFFEB 		bl	free		@
 3042              	.LVL210:
 3043              	.L185:
 482:armwave.c     ****     }
 483:armwave.c     **** 
 484:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3044              		.loc 1 486 5 view .LVU806
 3045              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3046              		.loc 1 486 75 is_stmt 0 view .LVU807
 3047 0dbc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3048 0dc0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3049              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3050              		.loc 1 486 40 view .LVU808
 3051 0dc4 0610A0E1 		mov	r1, r6	@, nsets
 3052              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3053              		.loc 1 486 75 view .LVU809
 3054 0dc8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3055              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3056              		.loc 1 486 40 view .LVU810
 3057 0dcc 0500A0E1 		mov	r0, r5	@, _4
 3058 0dd0 FEFFFFEB 		bl	calloc		@
 3059              	.LVL211:
 3060              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     **** 
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3061              		.loc 1 488 7 view .LVU811
 3062 0dd4 000050E3 		cmp	r0, #0	@ tmp124,
 3063              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 3064              		.loc 1 486 38 view .LVU812
 3065 0dd8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3066              		.loc 1 488 5 is_stmt 1 view .LVU813
 3067              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 3068              		.loc 1 488 7 is_stmt 0 view .LVU814
 3069 0ddc 7080BD18 		popne	{r4, r5, r6, pc}	@
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3070              		.loc 1 489 9 is_stmt 1 view .LVU815
 3071 0de0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3072 0de4 0620A0E1 		mov	r2, r6	@, nsets
 3073 0de8 08009FE5 		ldr	r0, .L191+4	@,
 3074              	@ armwave.c:493: }
 490:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 491:armwave.c     ****         return;
 492:armwave.c     ****     }
 493:armwave.c     **** }
 3075              		.loc 1 493 1 is_stmt 0 view .LVU816
 3076 0dec 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3077              		.cfi_restore 14
 3078              		.cfi_restore 6
 3079              		.cfi_restore 5
 3080              		.cfi_restore 4
 3081              		.cfi_def_cfa_offset 0
 3082              	.LVL212:
 3083              	@ armwave.c:489:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3084              		.loc 1 489 9 view .LVU817
 3085 0df0 FEFFFFEA 		b	printf		@
 3086              	.LVL213:
 3087              	.L192:
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3088              		.loc 1 489 9 view .LVU818
 3089              		.align	2
 3090              	.L191:
 3091 0df4 00000000 		.word	g_armwave_state
 3092 0df8 F0010000 		.word	.LC19
 3093              		.cfi_endproc
 3094              	.LFE73:
 3096              		.align	2
 3097              		.global	armwave_fill_pixbuf_into_pybuffer
 3098              		.syntax unified
 3099              		.arm
 3100              		.fpu vfp
 3102              	armwave_fill_pixbuf_into_pybuffer:
 3103              	.LVL214:
 3104              	.LFB74:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 497:armwave.c     ****  */
 498:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 499:armwave.c     **** {
 3105              		.loc 1 499 1 is_stmt 1 view -0
 3106              		.cfi_startproc
 3107              		@ args = 0, pretend = 0, frame = 48
 3108              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     Py_buffer buffer;
 3109              		.loc 1 500 5 view .LVU820
 501:armwave.c     ****     int ret;
 3110              		.loc 1 501 5 view .LVU821
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 504:armwave.c     **** 
 505:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3111              		.loc 1 505 5 view .LVU822
 3112              	@ armwave.c:499: {
 499:armwave.c     ****     Py_buffer buffer;
 3113              		.loc 1 499 1 is_stmt 0 view .LVU823
 3114 0dfc 04E02DE5 		str	lr, [sp, #-4]!	@,
 3115              		.cfi_def_cfa_offset 4
 3116              		.cfi_offset 14, -4
 3117 0e00 34D04DE2 		sub	sp, sp, #52	@,,
 3118              		.cfi_def_cfa_offset 56
 3119              	@ armwave.c:505:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3120              		.loc 1 505 11 view .LVU824
 3121 0e04 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3122 0e08 0120A0E3 		mov	r2, #1	@,
 3123 0e0c FEFFFFEB 		bl	PyObject_GetBuffer		@
 3124              	.LVL215:
 506:armwave.c     **** 
 507:armwave.c     ****     if(ret != 0) {
 3125              		.loc 1 507 5 is_stmt 1 view .LVU825
 3126              	@ armwave.c:507:     if(ret != 0) {
 3127              		.loc 1 507 7 is_stmt 0 view .LVU826
 3128 0e10 000050E3 		cmp	r0, #0	@,
 3129 0e14 0A00001A 		bne	.L197		@,
 508:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 509:armwave.c     ****         Py_RETURN_FALSE;
 510:armwave.c     ****     }
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 513:armwave.c     **** 
 514:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3130              		.loc 1 514 5 is_stmt 1 view .LVU827
 3131 0e18 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3132              	.LVL216:
 3133              		.loc 1 514 5 is_stmt 0 view .LVU828
 3134 0e1c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3135              	.LVL217:
 515:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 516:armwave.c     **** 
 517:armwave.c     ****     PyBuffer_Release(&buffer);
 3136              		.loc 1 517 5 is_stmt 1 view .LVU829
 3137 0e20 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3138 0e24 FEFFFFEB 		bl	PyBuffer_Release		@
 3139              	.LVL218:
 518:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 519:armwave.c     **** 
 520:armwave.c     ****     Py_RETURN_TRUE;
 3140              		.loc 1 520 5 view .LVU830
 3141              	.LBB47:
 3142              	.LBI47:
 3143              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3144              		.loc 2 456 20 view .LVU831
 3145              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3146              		.loc 2 458 21 view .LVU832
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3147              		.loc 2 459 5 view .LVU833
 3148              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3149              		.loc 2 459 18 is_stmt 0 view .LVU834
 3150 0e28 38309FE5 		ldr	r3, .L198	@ tmp126,
 3151              	.LBE48:
 3152              	.LBE47:
 3153              	@ armwave.c:520:     Py_RETURN_TRUE;
 3154              		.loc 1 520 5 view .LVU835
 3155 0e2c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3156              	.LBB50:
 3157              	.LBB49:
 3158              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3159              		.loc 2 459 18 view .LVU836
 3160 0e30 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3161 0e34 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3162 0e38 002083E5 		str	r2, [r3]	@ tmp128,
 3163              	.LBE49:
 3164              	.LBE50:
 3165              	@ armwave.c:521: }
 521:armwave.c     **** }
 3166              		.loc 1 521 1 view .LVU837
 3167 0e3c 34D08DE2 		add	sp, sp, #52	@,,
 3168              		.cfi_remember_state
 3169              		.cfi_def_cfa_offset 4
 3170              		@ sp needed	@
 3171 0e40 04F09DE4 		ldr	pc, [sp], #4	@
 3172              	.LVL219:
 3173              	.L197:
 3174              		.cfi_restore_state
 508:armwave.c     ****         Py_RETURN_FALSE;
 3175              		.loc 1 508 9 is_stmt 1 view .LVU838
 3176 0e44 20009FE5 		ldr	r0, .L198+4	@,
 3177              	.LVL220:
 508:armwave.c     ****         Py_RETURN_FALSE;
 3178              		.loc 1 508 9 is_stmt 0 view .LVU839
 3179 0e48 FEFFFFEB 		bl	puts		@
 3180              	.LVL221:
 509:armwave.c     ****     }
 3181              		.loc 1 509 9 is_stmt 1 view .LVU840
 3182              	.LBB51:
 3183              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3184              		.loc 2 456 20 view .LVU841
 3185              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3186              		.loc 2 458 21 view .LVU842
 3187              		.loc 2 459 5 view .LVU843
 3188              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3189              		.loc 2 459 18 is_stmt 0 view .LVU844
 3190 0e4c 1C309FE5 		ldr	r3, .L198+8	@ tmp120,
 3191              	.LBE52:
 3192              	.LBE51:
 3193              	@ armwave.c:509:         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 3194              		.loc 1 509 9 view .LVU845
 3195 0e50 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3196              	.LBB54:
 3197              	.LBB53:
 3198              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3199              		.loc 2 459 18 view .LVU846
 3200 0e54 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3201 0e58 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3202 0e5c 002083E5 		str	r2, [r3]	@ tmp122,
 3203              	.LBE53:
 3204              	.LBE54:
 3205              	@ armwave.c:521: }
 3206              		.loc 1 521 1 view .LVU847
 3207 0e60 34D08DE2 		add	sp, sp, #52	@,,
 3208              		.cfi_def_cfa_offset 4
 3209              		@ sp needed	@
 3210 0e64 04F09DE4 		ldr	pc, [sp], #4	@
 3211              	.L199:
 3212              		.align	2
 3213              	.L198:
 3214 0e68 00000000 		.word	_Py_TrueStruct
 3215 0e6c 44020000 		.word	.LC20
 3216 0e70 00000000 		.word	_Py_FalseStruct
 3217              		.cfi_endproc
 3218              	.LFE74:
 3220              		.align	2
 3221              		.global	armwave_test_create_am_sine
 3222              		.syntax unified
 3223              		.arm
 3224              		.fpu vfp
 3226              	armwave_test_create_am_sine:
 3227              	.LVL222:
 3228              	.LFB75:
 522:armwave.c     **** 
 523:armwave.c     **** /*
 524:armwave.c     ****  * Make a test AM waveform for render tests.
 525:armwave.c     ****  *
 526:armwave.c     ****  * @param   mod                     modulation depth
 527:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 528:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 529:armwave.c     ****  */
 530:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 531:armwave.c     **** {
 3229              		.loc 1 531 1 is_stmt 1 view -0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 8
 3232              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     float v, noise, xnoise, mod_val;
 3233              		.loc 1 532 5 view .LVU849
 533:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3234              		.loc 1 533 5 view .LVU850
 3235              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 3236              		.loc 1 531 1 is_stmt 0 view .LVU851
 3237 0e74 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3238              		.cfi_def_cfa_offset 32
 3239              		.cfi_offset 4, -32
 3240              		.cfi_offset 5, -28
 3241              		.cfi_offset 6, -24
 3242              		.cfi_offset 7, -20
 3243              		.cfi_offset 8, -16
 3244              		.cfi_offset 9, -12
 3245              		.cfi_offset 10, -8
 3246              		.cfi_offset 14, -4
 3247              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3248              		.loc 1 533 38 view .LVU852
 3249 0e78 7A7A9FED 		vldr.32	s14, .L231	@ tmp180,
 3250              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3251              		.loc 1 533 55 view .LVU853
 3252 0e7c 00529FE5 		ldr	r5, .L231+28	@ tmp250,
 3253              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 3254              		.loc 1 531 1 view .LVU854
 3255 0e80 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3256              		.cfi_def_cfa_offset 80
 3257              		.cfi_offset 80, -80
 3258              		.cfi_offset 81, -76
 3259              		.cfi_offset 82, -72
 3260              		.cfi_offset 83, -68
 3261              		.cfi_offset 84, -64
 3262              		.cfi_offset 85, -60
 3263              		.cfi_offset 86, -56
 3264              		.cfi_offset 87, -52
 3265              		.cfi_offset 88, -48
 3266              		.cfi_offset 89, -44
 3267              		.cfi_offset 90, -40
 3268              		.cfi_offset 91, -36
 3269 0e84 0090A0E1 		mov	r9, r0	@ sets, sets
 3270              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3271              		.loc 1 533 38 view .LVU855
 3272 0e88 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3273              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 534:armwave.c     ****     int s, set_offset = 0;
 535:armwave.c     ****     int w, x;
 536:armwave.c     **** 
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3274              		.loc 1 537 70 view .LVU856
 3275 0e8c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3276 0e90 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3277              	.LBB57:
 3278              	.LBB58:
 3279              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3280              		.loc 1 480 23 view .LVU857
 3281 0e94 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3282              	.LVL223:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3283              		.loc 1 480 23 view .LVU858
 3284              	.LBE58:
 3285              	.LBE57:
 3286              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 3287              		.loc 1 533 38 view .LVU859
 3288 0e98 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3289              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3290              		.loc 1 537 70 view .LVU860
 3291 0e9c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3292              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 3293              		.loc 1 531 1 view .LVU861
 3294 0ea0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3295              	.LBB62:
 3296              	.LBB59:
 3297              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3298              		.loc 1 480 7 view .LVU862
 3299 0ea4 000050E3 		cmp	r0, #0	@ _82,
 3300              	.LBE59:
 3301              	.LBE62:
 3302              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 3303              		.loc 1 531 1 view .LVU863
 3304 0ea8 08D04DE2 		sub	sp, sp, #8	@,,
 3305              		.cfi_def_cfa_offset 88
 3306              	@ armwave.c:538:     g_armwave_state.test_wave_buffer_nsets = sets;
 538:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3307              		.loc 1 538 44 view .LVU864
 3308 0eac 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3309              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3310              		.loc 1 537 45 view .LVU865
 3311 0eb0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3312              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 3313              		.loc 1 533 38 view .LVU866
 3314 0eb4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3315              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 3316              		.loc 1 533 11 view .LVU867
 3317 0eb8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3318              	.LVL224:
 534:armwave.c     ****     int w, x;
 3319              		.loc 1 534 5 is_stmt 1 view .LVU868
 535:armwave.c     **** 
 3320              		.loc 1 535 5 view .LVU869
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3321              		.loc 1 537 5 view .LVU870
 3322              		.loc 1 538 5 view .LVU871
 539:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3323              		.loc 1 539 5 view .LVU872
 3324              	.LBB63:
 3325              	.LBI57:
 478:armwave.c     **** {
 3326              		.loc 1 478 6 view .LVU873
 3327              	.LBB60:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3328              		.loc 1 480 5 view .LVU874
 3329              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3330              		.loc 1 480 7 is_stmt 0 view .LVU875
 3331 0ebc 0000000A 		beq	.L201		@,
 481:armwave.c     ****     }
 3332              		.loc 1 481 9 is_stmt 1 view .LVU876
 3333 0ec0 FEFFFFEB 		bl	free		@
 3334              	.LVL225:
 3335              	.L201:
 486:armwave.c     **** 
 3336              		.loc 1 486 5 view .LVU877
 3337              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 3338              		.loc 1 486 75 is_stmt 0 view .LVU878
 3339 0ec4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3340 0ec8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3341              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 3342              		.loc 1 486 40 view .LVU879
 3343 0ecc 0910A0E1 		mov	r1, r9	@, sets
 3344              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 3345              		.loc 1 486 75 view .LVU880
 3346 0ed0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3347              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 3348              		.loc 1 486 40 view .LVU881
 3349 0ed4 0400A0E1 		mov	r0, r4	@, _85
 3350 0ed8 FEFFFFEB 		bl	calloc		@
 3351              	.LVL226:
 3352              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3353              		.loc 1 488 7 view .LVU882
 3354 0edc 000050E3 		cmp	r0, #0	@ tmp191,
 3355              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 3356              		.loc 1 486 38 view .LVU883
 3357 0ee0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3358              		.loc 1 488 5 is_stmt 1 view .LVU884
 3359              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3360              		.loc 1 488 7 is_stmt 0 view .LVU885
 3361 0ee4 5A00000A 		beq	.L230		@,
 3362              	.L202:
 3363              	.LVL227:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3364              		.loc 1 488 7 view .LVU886
 3365              	.LBE60:
 3366              	.LBE63:
 3367              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 540:armwave.c     **** 
 541:armwave.c     ****     for(s = 0; s < sets; s++) {
 3368              		.loc 1 541 5 discriminator 1 view .LVU887
 3369 0ee8 000059E3 		cmp	r9, #0	@ sets,
 3370 0eec 550000DA 		ble	.L200		@,
 3371              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 543:armwave.c     ****     
 544:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 545:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 546:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 547:armwave.c     **** 
 548:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 549:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     **** 
 554:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 555:armwave.c     ****                     noise = -noise;
 556:armwave.c     **** 
 557:armwave.c     ****                 noise += 1.0f;
 558:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 559:armwave.c     **** 
 560:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3372              		.loc 1 560 45 view .LVU888
 3373 0ef0 5C8A9FED 		vldr.32	s16, .L231	@ tmp258,
 3374              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 561:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 562:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 563:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3375              		.loc 1 563 104 view .LVU889
 3376 0ef4 5CCA9FED 		vldr.32	s24, .L231+4	@ tmp259,
 3377              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3378              		.loc 1 541 5 view .LVU890
 3379 0ef8 0070A0E3 		mov	r7, #0	@ set_offset,
 3380              	@ armwave.c:542:         printf("Calculating test set %d\n", s);
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 3381              		.loc 1 542 9 view .LVU891
 3382 0efc 84A19FE5 		ldr	r10, .L231+32	@ tmp257,
 3383              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3384              		.loc 1 541 5 view .LVU892
 3385 0f00 0780A0E1 		mov	r8, r7	@ s, set_offset
 3386              	.LVL228:
 3387              	.L203:
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 3388              		.loc 1 542 9 is_stmt 1 view .LVU893
 3389 0f04 0810A0E1 		mov	r1, r8	@, s
 3390 0f08 0A00A0E1 		mov	r0, r10	@, tmp257
 3391 0f0c FEFFFFEB 		bl	printf		@
 3392              	.LVL229:
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3393              		.loc 1 544 9 view .LVU894
 3394              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3395              		.loc 1 544 39 is_stmt 0 view .LVU895
 3396 0f10 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3397              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3398              		.loc 1 544 9 view .LVU896
 3399 0f14 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3400 0f18 450000DA 		ble	.L204		@,
 3401              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 3402              		.loc 1 546 21 view .LVU897
 3403 0f1c 53CADFED 		vldr.32	s25, .L231+8	@ tmp200,
 3404              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3405              		.loc 1 560 33 view .LVU898
 3406 0f20 53BA9FED 		vldr.32	s22, .L231+12	@ tmp253,
 3407              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3408              		.loc 1 558 24 view .LVU899
 3409 0f24 53AADFED 		vldr.32	s21, .L231+16	@ tmp254,
 3410 0f28 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3411              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3412              		.loc 1 544 15 view .LVU900
 3413 0f2c 0060A0E3 		mov	r6, #0	@ w,
 3414              	.LVL230:
 3415              	.L211:
 546:armwave.c     **** 
 3416              		.loc 1 546 13 is_stmt 1 view .LVU901
 3417              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 3418              		.loc 1 546 21 is_stmt 0 view .LVU902
 3419 0f30 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3420 0f34 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3421              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3422              		.loc 1 548 13 view .LVU903
 3423 0f38 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3424              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 3425              		.loc 1 546 21 view .LVU904
 3426 0f3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3427 0f40 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3428              	.LVL231:
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3429              		.loc 1 548 13 is_stmt 1 view .LVU905
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3430              		.loc 1 548 13 is_stmt 0 view .LVU906
 3431 0f44 370000DA 		ble	.L205		@,
 3432 0f48 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3433              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3434              		.loc 1 563 113 view .LVU907
 3435 0f4c 4AAA9FED 		vldr.32	s20, .L231+20	@ tmp229,
 3436 0f50 4A8ADFED 		vldr.32	s17, .L231+24	@ tmp230,
 3437              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3438              		.loc 1 548 19 view .LVU908
 3439 0f54 0040A0E3 		mov	r4, #0	@ x,
 3440              	.LVL232:
 3441              	.L210:
 549:armwave.c     ****                 noise *= noise;
 3442              		.loc 1 549 17 is_stmt 1 view .LVU909
 3443              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3444              		.loc 1 549 28 is_stmt 0 view .LVU910
 3445 0f58 FEFFFFEB 		bl	rand		@
 3446              	.LVL233:
 3447              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3448              		.loc 1 549 35 view .LVU911
 3449 0f5c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3450              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3451              		.loc 1 549 45 view .LVU912
 3452 0f60 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3453 0f64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3454              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3455              		.loc 1 549 24 view .LVU913
 3456 0f68 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3457              	.LVL234:
 550:armwave.c     ****                 noise *= noise;
 3458              		.loc 1 550 17 is_stmt 1 view .LVU914
 3459              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 3460              		.loc 1 550 23 is_stmt 0 view .LVU915
 3461 0f6c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3462              	.LVL235:
 551:armwave.c     ****                 noise *= noise;
 3463              		.loc 1 551 17 is_stmt 1 view .LVU916
 3464              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 3465              		.loc 1 551 23 is_stmt 0 view .LVU917
 3466 0f70 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3467              	.LVL236:
 552:armwave.c     **** 
 3468              		.loc 1 552 17 is_stmt 1 view .LVU918
 3469              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     **** 
 3470              		.loc 1 552 23 is_stmt 0 view .LVU919
 3471 0f74 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3472              	.LVL237:
 554:armwave.c     ****                     noise = -noise;
 3473              		.loc 1 554 17 is_stmt 1 view .LVU920
 3474              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 3475              		.loc 1 554 21 is_stmt 0 view .LVU921
 3476 0f78 FEFFFFEB 		bl	rand		@
 3477              	.LVL238:
 555:armwave.c     **** 
 3478              		.loc 1 555 21 is_stmt 1 view .LVU922
 3479              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 3480              		.loc 1 554 19 is_stmt 0 view .LVU923
 3481 0f7c 020910E3 		tst	r0, #32768	@,
 3482              	@ armwave.c:555:                     noise = -noise;
 555:armwave.c     **** 
 3483              		.loc 1 555 27 view .LVU924
 3484 0f80 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3485              	.LVL239:
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3486              		.loc 1 557 17 is_stmt 1 view .LVU925
 558:armwave.c     **** 
 3487              		.loc 1 558 17 view .LVU926
 3488              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3489              		.loc 1 558 27 is_stmt 0 view .LVU927
 3490 0f84 FEFFFFEB 		bl	rand		@
 3491              	.LVL240:
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3492              		.loc 1 560 17 is_stmt 1 view .LVU928
 3493              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3494              		.loc 1 560 45 is_stmt 0 view .LVU929
 3495 0f88 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3496              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3497              		.loc 1 560 33 view .LVU930
 3498 0f8c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3499              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3500              		.loc 1 560 45 view .LVU931
 3501 0f90 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3502              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3503              		.loc 1 560 33 view .LVU932
 3504 0f94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3505              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3506              		.loc 1 560 45 view .LVU933
 3507 0f98 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3508              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3509              		.loc 1 560 33 view .LVU934
 3510 0f9c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3511              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3512              		.loc 1 558 34 view .LVU935
 3513 0fa0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3514              	.LVL241:
 3515              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3516              		.loc 1 558 44 view .LVU936
 3517 0fa4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3518 0fa8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3519              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3520              		.loc 1 558 24 view .LVU937
 3521 0fac 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3522              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3523              		.loc 1 560 77 view .LVU938
 3524 0fb0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3525              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3526              		.loc 1 560 22 view .LVU939
 3527 0fb4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3528 0fb8 FEFFFFEB 		bl	sin		@
 3529              	.LVL242:
 3530              		.loc 1 563 17 is_stmt 1 view .LVU940
 3531              	@ armwave.c:557:                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3532              		.loc 1 557 23 is_stmt 0 view .LVU941
 3533 0fbc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3534              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3535              		.loc 1 563 104 view .LVU942
 3536 0fc0 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 3537              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3538              		.loc 1 560 98 view .LVU943
 3539 0fc4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3540              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3541              		.loc 1 560 87 view .LVU944
 3542 0fc8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3543              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3544              		.loc 1 560 98 view .LVU945
 3545 0fcc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3546              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3547              		.loc 1 560 19 view .LVU946
 3548 0fd0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3549              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3550              		.loc 1 563 113 view .LVU947
 3551 0fd4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3552 0fd8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3553 0fdc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3554 0fe0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3555 0fe4 050000DA 		ble	.L207		@,
 3556              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3557              		.loc 1 563 104 discriminator 1 view .LVU948
 3558 0fe8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3559 0fec FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 3560 0ff0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3561 0ff4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3562 0ff8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3563 0ffc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 3564              	.L207:
 3565              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3566              		.loc 1 563 57 discriminator 12 view .LVU949
 3567 1000 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3568              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3569              		.loc 1 563 102 discriminator 12 view .LVU950
 3570 1004 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3571 1008 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3572 100c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3573              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3574              		.loc 1 548 58 discriminator 12 view .LVU951
 3575 1010 014084E2 		add	r4, r4, #1	@ x, x,
 3576              	.LVL243:
 3577              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3578              		.loc 1 563 102 discriminator 12 view .LVU952
 3579 1014 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 3580              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3581              		.loc 1 548 43 discriminator 12 view .LVU953
 3582 1018 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3583              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3584              		.loc 1 548 13 discriminator 12 view .LVU954
 3585 101c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3586 1020 CCFFFFCA 		bgt	.L210		@,
 3587 1024 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3588              	.LVL244:
 3589              	.L205:
 3590              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3591              		.loc 1 544 48 discriminator 2 view .LVU955
 3592 1028 016086E2 		add	r6, r6, #1	@ w, w,
 3593              	.LVL245:
 3594              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3595              		.loc 1 544 9 discriminator 2 view .LVU956
 3596 102c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3597 1030 BEFFFFBA 		blt	.L211		@,
 3598              	.LVL246:
 3599              	.L204:
 564:armwave.c     ****             }
 565:armwave.c     ****         }
 566:armwave.c     **** 
 567:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3600              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU957
 3601              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3602              		.loc 1 567 46 is_stmt 0 discriminator 2 view .LVU958
 3603 1034 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3604              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3605              		.loc 1 541 27 discriminator 2 view .LVU959
 3606 1038 018088E2 		add	r8, r8, #1	@ s, s,
 3607              	.LVL247:
 3608              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3609              		.loc 1 541 5 discriminator 2 view .LVU960
 3610 103c 080059E1 		cmp	r9, r8	@ sets, s
 3611              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3612              		.loc 1 567 20 discriminator 2 view .LVU961
 3613 1040 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3614              	.LVL248:
 3615              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3616              		.loc 1 541 5 discriminator 2 view .LVU962
 3617 1044 AEFFFF1A 		bne	.L203		@,
 3618              	.LVL249:
 3619              	.L200:
 3620              	@ armwave.c:569: }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 3621              		.loc 1 569 1 view .LVU963
 3622 1048 08D08DE2 		add	sp, sp, #8	@,,
 3623              		.cfi_remember_state
 3624              		.cfi_def_cfa_offset 80
 3625              		@ sp needed	@
 3626 104c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3627              		.cfi_restore 90
 3628              		.cfi_restore 91
 3629              		.cfi_restore 88
 3630              		.cfi_restore 89
 3631              		.cfi_restore 86
 3632              		.cfi_restore 87
 3633              		.cfi_restore 84
 3634              		.cfi_restore 85
 3635              		.cfi_restore 82
 3636              		.cfi_restore 83
 3637              		.cfi_restore 80
 3638              		.cfi_restore 81
 3639              		.cfi_def_cfa_offset 32
 3640              	.LVL250:
 3641              		.loc 1 569 1 view .LVU964
 3642 1050 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3643              	.LVL251:
 3644              	.L230:
 3645              		.cfi_restore_state
 3646              	.LBB64:
 3647              	.LBB61:
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3648              		.loc 1 489 9 is_stmt 1 view .LVU965
 3649 1054 940901E0 		mul	r1, r4, r9	@, _85, sets
 3650 1058 0920A0E1 		mov	r2, r9	@, sets
 3651 105c 28009FE5 		ldr	r0, .L231+36	@,
 3652 1060 FEFFFFEB 		bl	printf		@
 3653              	.LVL252:
 491:armwave.c     ****     }
 3654              		.loc 1 491 9 view .LVU966
 3655 1064 9FFFFFEA 		b	.L202		@
 3656              	.L232:
 3657              		.align	2
 3658              	.L231:
 3659 1068 0000803F 		.word	1065353216
 3660 106c 00007F43 		.word	1132396544
 3661 1070 0000003F 		.word	1056964608
 3662 1074 C3F5C840 		.word	1086911939
 3663 1078 38FFC74A 		.word	1254620984
 3664 107c 0000FE42 		.word	1123942400
 3665 1080 00000043 		.word	1124073472
 3666 1084 00000000 		.word	g_armwave_state
 3667 1088 98020000 		.word	.LC21
 3668 108c F0010000 		.word	.LC19
 3669              	.LBE61:
 3670              	.LBE64:
 3671              		.cfi_endproc
 3672              	.LFE75:
 3674              		.align	2
 3675              		.global	armwave_cleanup
 3676              		.syntax unified
 3677              		.arm
 3678              		.fpu vfp
 3680              	armwave_cleanup:
 3681              	.LFB76:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Make a test square waveform.
 573:armwave.c     ****  *
 574:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 575:armwave.c     ****  */
 576:armwave.c     **** #if 0
 577:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 578:armwave.c     **** {
 579:armwave.c     ****     uint8_t v;
 580:armwave.c     ****     float noise, xnoise;
 581:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 582:armwave.c     ****     int w, x;
 583:armwave.c     **** 
 584:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 585:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 586:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     **** 
 591:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 592:armwave.c     ****                 noise = -noise;
 593:armwave.c     **** 
 594:armwave.c     ****             //noise += 1.0f;
 595:armwave.c     **** 
 596:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 601:armwave.c     ****                 new_level = 0.2f;
 602:armwave.c     ****             } else {
 603:armwave.c     ****                 new_level = 0.8f;
 604:armwave.c     ****             }
 605:armwave.c     **** 
 606:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 607:armwave.c     **** 
 608:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 609:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 610:armwave.c     ****         }
 611:armwave.c     ****     }
 612:armwave.c     **** }
 613:armwave.c     **** #endif
 614:armwave.c     **** 
 615:armwave.c     **** /*
 616:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_cleanup()
 619:armwave.c     **** {
 3682              		.loc 1 619 1 view -0
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 0
 3685              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3686              		.loc 1 620 5 view .LVU968
 3687              	@ armwave.c:619: {
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3688              		.loc 1 619 1 is_stmt 0 view .LVU969
 3689 1090 10402DE9 		push	{r4, lr}	@
 3690              		.cfi_def_cfa_offset 8
 3691              		.cfi_offset 4, -8
 3692              		.cfi_offset 14, -4
 3693              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3694              		.loc 1 620 25 view .LVU970
 3695 1094 34409FE5 		ldr	r4, .L235	@ tmp114,
 3696              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3697              		.loc 1 620 5 view .LVU971
 3698 1098 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3699 109c FEFFFFEB 		bl	free		@
 3700              	.LVL253:
 621:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3701              		.loc 1 621 5 is_stmt 1 view .LVU972
 3702 10a0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3703 10a4 FEFFFFEB 		bl	free		@
 3704              	.LVL254:
 622:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3705              		.loc 1 622 5 view .LVU973
 3706 10a8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3707 10ac FEFFFFEB 		bl	free		@
 3708              	.LVL255:
 623:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3709              		.loc 1 623 5 view .LVU974
 3710 10b0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3711 10b4 FEFFFFEB 		bl	free		@
 3712              	.LVL256:
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3713              		.loc 1 625 5 view .LVU975
 3714              	@ armwave.c:625:     g_armwave_state.out_pixbuf = NULL;
 3715              		.loc 1 625 32 is_stmt 0 view .LVU976
 3716 10b8 0030A0E3 		mov	r3, #0	@ tmp123,
 3717 10bc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 626:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3718              		.loc 1 626 5 is_stmt 1 view .LVU977
 3719              	@ armwave.c:626:     g_armwave_state.ch1_buffer = NULL;
 3720              		.loc 1 626 32 is_stmt 0 view .LVU978
 3721 10c0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 627:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3722              		.loc 1 627 5 is_stmt 1 view .LVU979
 3723              	@ armwave.c:627:     g_armwave_state.xcoord_to_xpixel = NULL;
 3724              		.loc 1 627 38 is_stmt 0 view .LVU980
 3725 10c4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 628:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3726              		.loc 1 628 5 is_stmt 1 view .LVU981
 3727              	@ armwave.c:628:     g_armwave_state.test_wave_buffer = NULL;
 3728              		.loc 1 628 38 is_stmt 0 view .LVU982
 3729 10c8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3730              	@ armwave.c:629: }
 629:armwave.c     **** }
 3731              		.loc 1 629 1 view .LVU983
 3732 10cc 1080BDE8 		pop	{r4, pc}	@
 3733              	.L236:
 3734              		.align	2
 3735              	.L235:
 3736 10d0 00000000 		.word	g_armwave_state
 3737              		.cfi_endproc
 3738              	.LFE76:
 3740              		.comm	gamma_table,256,4
 3741              		.comm	g_armwave_state,136,4
 3742              		.section	.rodata
 3743              		.align	2
 3744              		.set	.LANCHOR0,. + 0
 3747              	__PRETTY_FUNCTION__.17095:
 3748 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3748      6176655F 
 3748      66696C6C 
 3748      5F706978 
 3748      6275665F 
 3749 001b 00       		.space	1
 3752              	__PRETTY_FUNCTION__.17117:
 3753 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3753      6176655F 
 3753      73657475 
 3753      705F7265 
 3753      6E646572 
 3754 0031 000000   		.space	3
 3757              	__PRETTY_FUNCTION__.17124:
 3758 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3758      6176655F 
 3758      7365745F 
 3758      77617665 
 3758      5F706F69 
 3759 004d 000000   		.space	3
 3762              	__PRETTY_FUNCTION__.17131:
 3763 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3763      6176655F 
 3763      7365745F 
 3763      77617665 
 3763      5F706F69 
 3764              		.section	.rodata.str1.4,"aMS",%progbits,1
 3765              		.align	2
 3766              	.LC0:
 3767 0000 76302E30 		.ascii	"v0.0.1\000"
 3767      2E3100
 3768 0007 00       		.space	1
 3769              	.LC1:
 3770 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3770      61766520 
 3770      76657273 
 3770      696F6E3A 
 3770      2025730A 
 3771 001d 000000   		.space	3
 3772              	.LC2:
 3773 0020 623D3078 		.ascii	"b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\012"
 3773      25303878 
 3773      20636831 
 3773      3D307825 
 3773      30387820 
 3774 0050 00       		.ascii	"\000"
 3775 0051 000000   		.space	3
 3776              	.LC3:
 3777 0054 61726D77 		.ascii	"armwave.c\000"
 3777      6176652E 
 3777      6300
 3778 005e 0000     		.space	2
 3779              	.LC4:
 3780 0060 6F75745F 		.ascii	"out_buffer != NULL\000"
 3780      62756666 
 3780      65722021 
 3780      3D204E55 
 3780      4C4C00
 3781 0073 00       		.space	1
 3782              	.LC5:
 3783 0074 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3783      20653D25 
 3783      6420773D 
 3783      25642077 
 3783      733D2564 
 3784              	.LC6:
 3785 00a0 73746172 		.ascii	"start_point < end_point\000"
 3785      745F706F 
 3785      696E7420 
 3785      3C20656E 
 3785      645F706F 
 3786              	.LC7:
 3787 00b8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3787      7566665F 
 3787      73697A65 
 3787      3D25642C 
 3787      20636D70 
 3788 00ea 00       		.ascii	"\000"
 3789 00eb 00       		.space	1
 3790              	.LC8:
 3791 00ec 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3791      6D776176 
 3791      655F7374 
 3791      6174652E 
 3791      6368315F 
 3792 010f 00       		.space	1
 3793              	.LC9:
 3794 0110 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3794      6D776176 
 3794      655F7374 
 3794      6174652E 
 3794      78636F6F 
 3795 0139 000000   		.space	3
 3796              	.LC10:
 3797 013c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3797      3A203078 
 3797      25303878 
 3797      20307825 
 3797      30387820 
 3798              	.LC11:
 3799 0160 77617665 		.ascii	"wave_buffer != NULL\000"
 3799      5F627566 
 3799      66657220 
 3799      213D204E 
 3799      554C4C00 
 3800              	.LC12:
 3801 0174 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3801      6176655F 
 3801      7365745F 
 3801      77617665 
 3801      5F706F69 
 3802 01a7 78636565 		.ascii	"xceeded\000"
 3802      64656400 
 3803 01af 00       		.space	1
 3804              	.LC13:
 3805 01b0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3805      5F627566 
 3805      6665725F 
 3805      70747220 
 3805      213D2030 
 3806 01c5 000000   		.space	3
 3807              	.LC14:
 3808 01c8 776200   		.ascii	"wb\000"
 3809 01cb 00       		.space	1
 3810              	.LC15:
 3811 01cc 50330A00 		.ascii	"P3\012\000"
 3812              	.LC16:
 3813 01d0 25642025 		.ascii	"%d %d\012\000"
 3813      640A00
 3814 01d7 00       		.space	1
 3815              	.LC17:
 3816 01d8 3235350A 		.ascii	"255\012\000"
 3816      00
 3817 01dd 000000   		.space	3
 3818              	.LC18:
 3819 01e0 25336420 		.ascii	"%3d %3d %3d\012\000"
 3819      25336420 
 3819      2533640A 
 3819      00
 3820 01ed 000000   		.space	3
 3821              	.LC19:
 3822 01f0 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3822      6176655F 
 3822      74657374 
 3822      5F627566 
 3822      6665725F 
 3823 0223 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3823      20627566 
 3823      66657220 
 3823      28256420 
 3823      62797465 
 3824              	.LC20:
 3825 0244 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3825      6176655F 
 3825      66696C6C 
 3825      5F706978 
 3825      6275665F 
 3826 0277 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3826      20666169 
 3826      6C65642C 
 3826      20726574 
 3826      75726E69 
 3827 0296 0000     		.space	2
 3828              	.LC21:
 3829 0298 43616C63 		.ascii	"Calculating test set %d\012\000"
 3829      756C6174 
 3829      696E6720 
 3829      74657374 
 3829      20736574 
 3830              		.text
 3831              	.Letext0:
 3832              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3833              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3834              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3835              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3836              		.file 7 "/usr/include/stdio.h"
 3837              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3838              		.file 9 "/usr/include/errno.h"
 3839              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3840              		.file 11 "/usr/include/unistd.h"
 3841              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3842              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3843              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3844              		.file 15 "/usr/include/math.h"
 3845              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3846              		.file 17 "/usr/include/time.h"
 3847              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3848              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3849              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3850              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3851              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3852              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3853              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3854              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3855              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3856              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3857              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3858              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3859              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3860              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3861              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3862              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3863              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3864              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3865              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3866              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3867              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3868              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3869              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3870              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3871              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3872              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3873              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3874              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3875              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3876              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3877              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3878              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3879              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3880              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3881              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3882              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3883              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3884              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3885              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3886              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3887              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3888              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3889              		.file 60 "/usr/local/include/python3.8/context.h"
 3890              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3891              		.file 62 "/usr/local/include/python3.8/code.h"
 3892              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3893              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3894              		.file 65 "/usr/local/include/python3.8/import.h"
 3895              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3896              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3897              		.file 68 "/usr/include/malloc.h"
 3898              		.file 69 "armwave.h"
 3899              		.file 70 "/usr/include/stdlib.h"
 3900              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3901              		.file 72 "/usr/include/assert.h"
 3902              		.file 73 "<built-in>"
 3903              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
