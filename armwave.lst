   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0150A0E1 		mov	r5, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 54619FE5 		ldr	r6, .L21	@ tmp191,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241096E5 		ldr	r1, [r6, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403096E5 		ldr	r3, [r6, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044096E5 		ldr	r4, [r6, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp194, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 21008DE9 		stmib	sp, {r0, r5}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp195, tmp194,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp196, _5, tmp195
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 24019FE5 		ldr	r0, .L21+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp196,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp201, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp201,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141096E5 		ldr	r1, [r6, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383096E5 		ldr	r3, [r6, #56]	@ _91, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _91,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _91, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3B0000DA 		ble	.L11		@,
 317              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 318              		.loc 1 80 81 view .LVU52
 319 0108 343096E5 		ldr	r3, [r6, #52]	@ _15, g_armwave_state.wave_stride
 320 010c 000055E3 		cmp	r5, #0	@ height,
 321              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 322              		.loc 1 80 36 view .LVU53
 323 0110 14B096E5 		ldr	fp, [r6, #20]	@ _14, g_armwave_state.wave_buffer
 324              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 325              		.loc 1 103 51 view .LVU54
 326 0114 24E096E5 		ldr	lr, [r6, #36]	@ _64, g_armwave_state.cmp_x_bitdepth_scale
 327              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 328              		.loc 1 80 81 view .LVU55
 329 0118 24308DE5 		str	r3, [sp, #36]	@ _15, %sfp
 330              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 331              		.loc 1 103 116 view .LVU56
 332 011c 406096E5 		ldr	r6, [r6, #64]	@ _68, g_armwave_state.bitdepth_height
 333 0120 3400000A 		beq	.L11		@,
 334 0124 07B08BE0 		add	fp, fp, r7	@ ivtmp.49, _14, slice_y
 335 0128 00A06BE2 		rsb	r10, fp, #0	@ ivtmp.50, ivtmp.49
 336              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 337              		.loc 1 79 11 view .LVU57
 338 012c 0030A0E3 		mov	r3, #0	@ w,
 339 0130 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 340              	.LVL11:
 341              	.L14:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 342              		.loc 1 80 9 is_stmt 1 view .LVU58
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 343              		.loc 1 84 9 view .LVU59
 344              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 345              		.loc 1 79 11 is_stmt 0 view .LVU60
 346 0134 0B80A0E1 		mov	r8, fp	@ ivtmp.42, ivtmp.49
 347 0138 0030A0E3 		mov	r3, #0	@ ivtmp.43,
 348              	.LVL12:
 349              	.L13:
  87:armwave.c     **** 
 350              		.loc 1 87 13 is_stmt 1 view .LVU61
 351              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 352              		.loc 1 87 18 is_stmt 0 view .LVU62
 353 013c 041098E4 		ldr	r1, [r8], #4	@ word, MEM[base: _260, offset: 0B]
 354              	.LVL13:
  89:armwave.c     ****                 scale_value = word & 0xff;
 355              		.loc 1 89 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 356              		.loc 1 90 17 view .LVU64
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 357              		.loc 1 102 17 view .LVU65
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 107 17 view .LVU66
 359              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 360              		.loc 1 103 74 is_stmt 0 view .LVU67
 361 0140 23C8A0E1 		lsr	ip, r3, #16	@ tmp207, ivtmp.43,
 362              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 363              		.loc 1 103 34 view .LVU68
 364 0144 03308EE0 		add	r3, lr, r3	@ _89, _64, ivtmp.43
 365              	.LVL14:
 366              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 367              		.loc 1 90 29 view .LVU69
 368 0148 7120EFE6 		uxtb	r2, r1	@ scale_value, word
 369              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 107 47 view .LVU70
 371 014c 962C2CE0 		mla	ip, r6, ip, r2	@ tmp210, _68, tmp207, scale_value
 372              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 373              		.loc 1 108 22 view .LVU71
 374 0150 2124A0E1 		lsr	r2, r1, #8	@ word, word,
 375              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 376              		.loc 1 103 74 view .LVU72
 377 0154 2308A0E1 		lsr	r0, r3, #16	@ tmp215, _89,
 378              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 379              		.loc 1 90 29 view .LVU73
 380 0158 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 381              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 382              		.loc 1 107 47 view .LVU74
 383 015c 8CC0A0E1 		lsl	ip, ip, #1	@ tmp211, tmp210,
 384 0160 962020E0 		mla	r0, r6, r0, r2	@ tmp219, _68, tmp215, scale_value
 385              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 386              		.loc 1 103 34 view .LVU75
 387 0164 03308EE0 		add	r3, lr, r3	@ _113, _64, _89
 388              	@ armwave.c:108:                 word >>= 8;
 389              		.loc 1 108 22 view .LVU76
 390 0168 2128A0E1 		lsr	r2, r1, #16	@ word, word,
 391              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 392              		.loc 1 107 47 view .LVU77
 393 016c BC7094E1 		ldrh	r7, [r4, ip]	@ *_73, *_73
 394              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 395              		.loc 1 103 74 view .LVU78
 396 0170 2398A0E1 		lsr	r9, r3, #16	@ tmp224, _113,
 397              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 398              		.loc 1 90 29 view .LVU79
 399 0174 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 400              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 401              		.loc 1 107 47 view .LVU80
 402 0178 8000A0E1 		lsl	r0, r0, #1	@ tmp220, tmp219,
 403              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 404              		.loc 1 103 34 view .LVU81
 405 017c 03308EE0 		add	r3, lr, r3	@ _137, _64, _113
 406              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 407              		.loc 1 107 47 view .LVU82
 408 0180 962922E0 		mla	r2, r6, r9, r2	@ tmp228, _68, tmp224, scale_value
 409 0184 017087E2 		add	r7, r7, #1	@ tmp214, *_73,
 410 0188 BC7084E1 		strh	r7, [r4, ip]	@ movhi	@ tmp214, *_73
 411              		.loc 1 108 17 is_stmt 1 view .LVU83
 412              	.LVL15:
  90:armwave.c     ****                 
 413              		.loc 1 90 17 view .LVU84
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 414              		.loc 1 102 17 view .LVU85
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 17 view .LVU86
 416              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 417              		.loc 1 103 74 is_stmt 0 view .LVU87
 418 018c 2378A0E1 		lsr	r7, r3, #16	@ tmp233, _137,
 419              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 420              		.loc 1 107 47 view .LVU88
 421 0190 B0C094E1 		ldrh	ip, [r4, r0]	@ *_97, *_97
 422              	@ armwave.c:108:                 word >>= 8;
 423              		.loc 1 108 22 view .LVU89
 424 0194 211CA0E1 		lsr	r1, r1, #24	@ word, word,
 425              	.LVL16:
 426              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 427              		.loc 1 107 47 view .LVU90
 428 0198 8220A0E1 		lsl	r2, r2, #1	@ tmp229, tmp228,
 429 019c 961721E0 		mla	r1, r6, r7, r1	@ tmp236, _68, tmp233, word
 430 01a0 01C08CE2 		add	ip, ip, #1	@ tmp223, *_97,
 431 01a4 B0C084E1 		strh	ip, [r4, r0]	@ movhi	@ tmp223, *_97
 432              		.loc 1 108 17 is_stmt 1 view .LVU91
 433              	.LVL17:
  90:armwave.c     ****                 
 434              		.loc 1 90 17 view .LVU92
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 435              		.loc 1 102 17 view .LVU93
 107:armwave.c     ****                 word >>= 8;
 436              		.loc 1 107 17 view .LVU94
 437              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 438              		.loc 1 107 47 is_stmt 0 view .LVU95
 439 01a8 B20094E1 		ldrh	r0, [r4, r2]	@ *_121, *_121
 440 01ac 8110A0E1 		lsl	r1, r1, #1	@ tmp237, tmp236,
 441 01b0 03308EE0 		add	r3, lr, r3	@ ivtmp.43, _64, _137
 442 01b4 010080E2 		add	r0, r0, #1	@ tmp232, *_121,
 443 01b8 B20084E1 		strh	r0, [r4, r2]	@ movhi	@ tmp232, *_121
 444              		.loc 1 108 17 is_stmt 1 view .LVU96
 445              	.LVL18:
  90:armwave.c     ****                 
 446              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 447              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 448              		.loc 1 107 17 view .LVU99
 449              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 450              		.loc 1 107 47 is_stmt 0 view .LVU100
 451 01bc B12094E1 		ldrh	r2, [r4, r1]	@ *_145, *_145
 452              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 453              		.loc 1 84 9 view .LVU101
 454 01c0 08008AE0 		add	r0, r10, r8	@ tmp241, ivtmp.50, ivtmp.42
 455 01c4 000055E1 		cmp	r5, r0	@ height, tmp241
 456              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 457              		.loc 1 107 47 view .LVU102
 458 01c8 012082E2 		add	r2, r2, #1	@ tmp240, *_145,
 459 01cc B12084E1 		strh	r2, [r4, r1]	@ movhi	@ tmp240, *_145
 460              		.loc 1 108 17 is_stmt 1 view .LVU103
 461              	.LVL19:
 462              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 463              		.loc 1 84 9 is_stmt 0 view .LVU104
 464 01d0 D9FFFF8A 		bhi	.L13		@,
 465              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 466              		.loc 1 79 44 view .LVU105
 467 01d4 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 468              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 469              		.loc 1 79 5 view .LVU106
 470 01d8 20209DE5 		ldr	r2, [sp, #32]	@ _91, %sfp
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 view .LVU107
 473 01dc 013083E2 		add	r3, r3, #1	@ w, w,
 474 01e0 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 475              	.LVL20:
 476              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 477              		.loc 1 79 5 view .LVU108
 478 01e4 020053E1 		cmp	r3, r2	@ w, _91
 479 01e8 24309DE5 		ldr	r3, [sp, #36]	@ _15, %sfp
 480              	.LVL21:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 481              		.loc 1 79 5 view .LVU109
 482 01ec 03B08BE0 		add	fp, fp, r3	@ ivtmp.49, ivtmp.49, _15
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 view .LVU110
 484 01f0 03A04AE0 		sub	r10, r10, r3	@ ivtmp.50, ivtmp.50, _15
 485 01f4 CEFFFF1A 		bne	.L14		@,
 486              	.LVL22:
 487              	.L11:
 488              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 489              		.loc 1 112 1 view .LVU111
 490 01f8 2CD08DE2 		add	sp, sp, #44	@,,
 491              		.cfi_def_cfa_offset 36
 492              		@ sp needed	@
 493 01fc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 494              	.LVL23:
 495              	.L22:
 496              		.loc 1 112 1 view .LVU112
 497              		.align	2
 498              	.L21:
 499 0200 00000000 		.word	g_armwave_state
 500 0204 20000000 		.word	.LC2
 501              		.cfi_endproc
 502              	.LFE59:
 504              		.align	2
 505              		.global	armwave_fill_pixbuf_scaled
 506              		.syntax unified
 507              		.arm
 508              		.fpu vfp
 510              	armwave_fill_pixbuf_scaled:
 511              	.LVL24:
 512              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 513              		.loc 1 119 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 517              		.loc 1 120 5 view .LVU114
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 518              		.loc 1 122 5 view .LVU115
 123:armwave.c     ****     uint8_t r, g, b;
 519              		.loc 1 123 5 view .LVU116
 124:armwave.c     ****     int value; 
 520              		.loc 1 124 5 view .LVU117
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 521              		.loc 1 126 5 view .LVU118
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 522              		.loc 1 127 5 view .LVU119
 128:armwave.c     ****     uint32_t offset;
 523              		.loc 1 128 5 view .LVU120
 129:armwave.c     **** 
 130:armwave.c     ****     if(out_buffer == NULL)
 524              		.loc 1 130 5 view .LVU121
 525              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 526              		.loc 1 119 1 is_stmt 0 view .LVU122
 527 0208 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 528              		.cfi_def_cfa_offset 36
 529              		.cfi_offset 4, -36
 530              		.cfi_offset 5, -32
 531              		.cfi_offset 6, -28
 532              		.cfi_offset 7, -24
 533              		.cfi_offset 8, -20
 534              		.cfi_offset 9, -16
 535              		.cfi_offset 10, -12
 536              		.cfi_offset 11, -8
 537              		.cfi_offset 14, -4
 538              	@ armwave.c:130:     if(out_buffer == NULL)
 539              		.loc 1 130 7 view .LVU123
 540 020c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 541              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 542              		.loc 1 119 1 view .LVU124
 543 0210 0CD04DE2 		sub	sp, sp, #12	@,,
 544              		.cfi_def_cfa_offset 48
 545              	@ armwave.c:130:     if(out_buffer == NULL)
 546              		.loc 1 130 7 view .LVU125
 547 0214 1A00000A 		beq	.L23		@,
 548              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 549              		.loc 1 126 15 view .LVU126
 550 0218 54519FE5 		ldr	r5, .L44	@ tmp221,
 551              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     ****         return;
 132:armwave.c     **** 
 133:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 134:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 552              		.loc 1 134 5 view .LVU127
 553 021c 0010A0E3 		mov	r1, #0	@,
 554              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 555              		.loc 1 134 59 view .LVU128
 556 0220 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 557 0224 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 558              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 559              		.loc 1 126 15 view .LVU129
 560 0228 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 561              		.loc 1 134 5 is_stmt 1 view .LVU130
 562              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 563              		.loc 1 134 59 is_stmt 0 view .LVU131
 564 022c 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 565              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 566              		.loc 1 134 5 view .LVU132
 567 0230 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 568 0234 FEFFFFEB 		bl	memset		@
 569              	.LVL25:
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 570              		.loc 1 136 5 is_stmt 1 view .LVU133
 571              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 572              		.loc 1 136 10 is_stmt 0 view .LVU134
 573 0238 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 574 023c 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 575 0240 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 576              	.LVL26:
 137:armwave.c     ****     
 138:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 577              		.loc 1 138 5 is_stmt 1 view .LVU135
 578              		.loc 1 138 5 is_stmt 0 view .LVU136
 579 0244 000050E3 		cmp	r0, #0	@ npix,
 580 0248 0D0000DA 		ble	.L23		@,
 581              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 139:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 140:armwave.c     ****         wave_word = *base_32ptr++;
 141:armwave.c     **** 
 142:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 143:armwave.c     ****             for(w = 0; w < 2; w++) {
 144:armwave.c     ****                 value = wave_word & 0xffff;
 145:armwave.c     ****                 wave_word >>= 16;
 146:armwave.c     **** 
 147:armwave.c     ****                 if(value != 0) {
 148:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 149:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 582              		.loc 1 149 52 view .LVU137
 583 024c FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 584              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 585              		.loc 1 148 52 view .LVU138
 586 0250 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 587              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 151:armwave.c     **** 
 152:armwave.c     ****                     r = MIN(rr, 255);
 153:armwave.c     ****                     g = MIN(gg, 255);
 154:armwave.c     ****                     b = MIN(bb, 255);
 155:armwave.c     **** 
 156:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 157:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 158:armwave.c     **** 
 159:armwave.c     ****                     // Plot the pixels
 160:armwave.c     ****                     nsub = n + w;
 161:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 588              		.loc 1 161 57 view .LVU139
 589 0254 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 590              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 591              		.loc 1 149 52 view .LVU140
 592 0258 00308DE5 		str	r3, [sp]	@ _16, %sfp
 593              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 594              		.loc 1 150 52 view .LVU141
 595 025c F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 596 0260 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 597              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 598              		.loc 1 138 11 view .LVU142
 599 0264 0030A0E3 		mov	r3, #0	@ n,
 600              	.LVL27:
 601              	.L29:
 140:armwave.c     **** 
 602              		.loc 1 140 9 is_stmt 1 view .LVU143
 603              	@ armwave.c:140:         wave_word = *base_32ptr++;
 140:armwave.c     **** 
 604              		.loc 1 140 19 is_stmt 0 view .LVU144
 605 0268 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 606              	.LVL28:
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 607              		.loc 1 142 9 is_stmt 1 view .LVU145
 608              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 609              		.loc 1 142 11 is_stmt 0 view .LVU146
 610 026c 000052E3 		cmp	r2, #0	@ wave_word,
 611              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 612              		.loc 1 143 19 view .LVU147
 613 0270 0080A013 		movne	r8, #0	@ w,
 614              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 615              		.loc 1 142 11 view .LVU148
 616 0274 0400001A 		bne	.L28		@,
 617              	.L25:
 618              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 619              		.loc 1 138 28 view .LVU149
 620 0278 023083E2 		add	r3, r3, #2	@ n, n,
 621              	.LVL29:
 622              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 623              		.loc 1 138 5 view .LVU150
 624 027c 030050E1 		cmp	r0, r3	@ npix, n
 625 0280 F8FFFFCA 		bgt	.L29		@,
 626              	.LVL30:
 627              	.L23:
 628              	@ armwave.c:173: }
 162:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     xx = (nsub >> 8) / 2;
 164:armwave.c     **** 
 165:armwave.c     ****                     for(y = yy; y < ye; y++) {
 166:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 167:armwave.c     ****                         *(out_buffer_base + offset) = word;
 168:armwave.c     ****                     }
 169:armwave.c     ****                 }
 170:armwave.c     ****             }
 171:armwave.c     ****         }
 172:armwave.c     ****     }
 173:armwave.c     **** }
 629              		.loc 1 173 1 view .LVU151
 630 0284 0CD08DE2 		add	sp, sp, #12	@,,
 631              		.cfi_remember_state
 632              		.cfi_def_cfa_offset 36
 633              		@ sp needed	@
 634 0288 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 635              	.LVL31:
 636              	.L28:
 637              		.cfi_restore_state
 144:armwave.c     ****                 wave_word >>= 16;
 638              		.loc 1 144 17 is_stmt 1 view .LVU152
 639              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 640              		.loc 1 144 23 is_stmt 0 view .LVU153
 641 028c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 642              	.LVL32:
 145:armwave.c     **** 
 643              		.loc 1 145 17 is_stmt 1 view .LVU154
 644              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 645              		.loc 1 147 19 is_stmt 0 view .LVU155
 646 0290 000059E3 		cmp	r9, #0	@ value,
 647              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 648              		.loc 1 145 27 view .LVU156
 649 0294 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 650              	.LVL33:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 651              		.loc 1 147 17 is_stmt 1 view .LVU157
 652              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 653              		.loc 1 147 19 is_stmt 0 view .LVU158
 654 0298 0600001A 		bne	.L43		@,
 655              	.LVL34:
 656              	.L26:
 657              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 658              		.loc 1 143 13 view .LVU159
 659 029c 010058E3 		cmp	r8, #1	@ w,
 660 02a0 F4FFFF0A 		beq	.L25		@,
 661              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 662              		.loc 1 144 23 view .LVU160
 663 02a4 7290FFE6 		uxth	r9, r2	@ value, wave_word
 664              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 665              		.loc 1 147 19 view .LVU161
 666 02a8 000059E3 		cmp	r9, #0	@ value,
 667 02ac 0180A0E3 		mov	r8, #1	@ w,
 668              	.LVL35:
 144:armwave.c     ****                 wave_word >>= 16;
 669              		.loc 1 144 17 is_stmt 1 view .LVU162
 145:armwave.c     **** 
 670              		.loc 1 145 17 view .LVU163
 671              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 672              		.loc 1 145 27 is_stmt 0 view .LVU164
 673 02b0 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 674              	.LVL36:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 147 17 is_stmt 1 view .LVU165
 676              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 147 19 is_stmt 0 view .LVU166
 678 02b4 F8FFFF0A 		beq	.L26		@,
 679              	.L43:
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 680              		.loc 1 148 21 is_stmt 1 view .LVU167
 681              	.LVL37:
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 682              		.loc 1 149 21 view .LVU168
 150:armwave.c     **** 
 683              		.loc 1 150 21 view .LVU169
 152:armwave.c     ****                     g = MIN(gg, 255);
 684              		.loc 1 152 21 view .LVU170
 153:armwave.c     ****                     b = MIN(bb, 255);
 685              		.loc 1 153 21 view .LVU171
 154:armwave.c     **** 
 686              		.loc 1 154 21 view .LVU172
 157:armwave.c     **** 
 687              		.loc 1 157 21 view .LVU173
 688              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 689              		.loc 1 150 55 is_stmt 0 view .LVU174
 690 02b8 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 691 02bc 08E083E0 		add	lr, r3, r8	@ _130, n, w
 692 02c0 99010CE0 		mul	ip, r9, r1	@ tmp195, value, _19
 693              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 161 32 view .LVU175
 695 02c4 7E10EFE6 		uxtb	r1, lr	@ _31, _130
 696              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 697              		.loc 1 162 41 view .LVU176
 698 02c8 017081E2 		add	r7, r1, #1	@ tmp210, _31,
 699              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 700              		.loc 1 161 40 view .LVU177
 701 02cc 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 702              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 703              		.loc 1 162 41 view .LVU178
 704 02d0 107A07EE 		vmov	s14, r7	@ int	@ tmp210, tmp210
 705              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 706              		.loc 1 149 55 view .LVU179
 707 02d4 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 708              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 709              		.loc 1 150 24 view .LVU180
 710 02d8 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp195,
 711              	.LVL38:
 712              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 713              		.loc 1 161 40 view .LVU181
 714 02dc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp208, _31
 715              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 716              		.loc 1 162 46 view .LVU182
 717 02e0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp211, tmp210
 718              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 719              		.loc 1 149 55 view .LVU183
 720 02e4 99010AE0 		mul	r10, r9, r1	@ tmp199, value, _16
 721              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 722              		.loc 1 148 55 view .LVU184
 723 02e8 990B09E0 		mul	r9, r9, fp	@ tmp205, value, _13
 724              	.LVL39:
 725              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 726              		.loc 1 154 25 view .LVU185
 727 02ec FF005CE3 		cmp	ip, #255	@ bb,
 728              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 729              		.loc 1 149 24 view .LVU186
 730 02f0 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp199,
 731              	.LVL40:
 732              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 733              		.loc 1 161 40 view .LVU187
 734 02f4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp209, tmp208, _33
 735              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 736              		.loc 1 162 46 view .LVU188
 737 02f8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp212, tmp211, _33
 738              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 739              		.loc 1 154 25 view .LVU189
 740 02fc FFC0A0A3 		movge	ip, #255	@ bb,
 741              	.LVL41:
 742              	@ armwave.c:153:                     g = MIN(gg, 255);
 153:armwave.c     ****                     b = MIN(bb, 255);
 743              		.loc 1 153 25 view .LVU190
 744 0300 FF005AE3 		cmp	r10, #255	@ gg,
 745 0304 FFA0A0A3 		movge	r10, #255	@ gg,
 746              	.LVL42:
 747              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 748              		.loc 1 148 24 view .LVU191
 749 0308 4994A0E1 		asr	r9, r9, #8	@ rr, tmp205,
 750              	.LVL43:
 751              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 752              		.loc 1 152 25 view .LVU192
 753 030c FF0059E3 		cmp	r9, #255	@ rr,
 754              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 755              		.loc 1 157 56 view .LVU193
 756 0310 0AA4A0E1 		lsl	r10, r10, #8	@ tmp200, gg,
 757              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 161 24 view .LVU194
 759 0314 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp209
 760              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 761              		.loc 1 152 25 view .LVU195
 762 0318 FF90A0A3 		movge	r9, #255	@ rr,
 763              	.LVL44:
 764              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 765              		.loc 1 163 32 view .LVU196
 766 031c 4EE4A0E1 		asr	lr, lr, #8	@ tmp213, _130,
 767              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 768              		.loc 1 157 44 view .LVU197
 769 0320 0CC8A0E1 		lsl	ip, ip, #16	@ tmp196, bb,
 770              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 771              		.loc 1 157 56 view .LVU198
 772 0324 7AA0FFE6 		uxth	r10, r10	@ tmp201, tmp200
 773              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 774              		.loc 1 157 44 view .LVU199
 775 0328 FFC80CE2 		and	ip, ip, #16711680	@ tmp197, tmp196,
 776              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 777              		.loc 1 157 51 view .LVU200
 778 032c 0AC08CE1 		orr	ip, ip, r10	@ tmp203, tmp197, tmp201
 779              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 780              		.loc 1 157 62 view .LVU201
 781 0330 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 782              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 783              		.loc 1 161 24 view .LVU202
 784 0334 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 785              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 786              		.loc 1 162 24 view .LVU203
 787 0338 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp212
 788              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 789              		.loc 1 163 38 view .LVU204
 790 033c AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp215, tmp213, tmp213,
 791              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 792              		.loc 1 157 62 view .LVU205
 793 0340 0AC08CE1 		orr	ip, ip, r10	@ tmp207, tmp203, rr
 794              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 795              		.loc 1 157 26 view .LVU206
 796 0344 FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp207,
 797              	.LVL45:
 160:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 798              		.loc 1 160 21 is_stmt 1 view .LVU207
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 161 21 view .LVU208
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 800              		.loc 1 162 21 view .LVU209
 801              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 802              		.loc 1 163 38 is_stmt 0 view .LVU210
 803 0348 C990A0E1 		asr	r9, r9, #1	@ xx, tmp215,
 804              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 805              		.loc 1 162 24 view .LVU211
 806 034c 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 807              	.LVL46:
 163:armwave.c     **** 
 808              		.loc 1 163 21 is_stmt 1 view .LVU212
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 809              		.loc 1 165 21 view .LVU213
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 165 21 is_stmt 0 view .LVU214
 811 0350 070051E1 		cmp	r1, r7	@ yy, ye
 812 0354 D0FFFF2A 		bcs	.L26		@,
 813              	.LVL47:
 814              	.L27:
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 815              		.loc 1 166 25 is_stmt 1 discriminator 3 view .LVU215
 167:armwave.c     ****                     }
 816              		.loc 1 167 25 discriminator 3 view .LVU216
 817              	@ armwave.c:166:                         offset = (xx + (y * g_armwave_state.target_width)); 
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 818              		.loc 1 166 43 is_stmt 0 discriminator 3 view .LVU217
 819 0358 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 820              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 821              		.loc 1 167 43 discriminator 3 view .LVU218
 822 035c 9C912CE0 		mla	ip, ip, r1, r9	@ tmp220, g_armwave_state.target_width, yy, xx
 823              	.LVL48:
 824              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 825              		.loc 1 165 42 discriminator 3 view .LVU219
 826 0360 011081E2 		add	r1, r1, #1	@ yy, yy,
 827              	.LVL49:
 828              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 829              		.loc 1 165 21 discriminator 3 view .LVU220
 830 0364 010057E1 		cmp	r7, r1	@ ye, yy
 831              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 832              		.loc 1 167 53 discriminator 3 view .LVU221
 833 0368 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 834              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 835              		.loc 1 165 21 discriminator 3 view .LVU222
 836 036c F9FFFF1A 		bne	.L27		@,
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 837              		.loc 1 165 21 discriminator 3 view .LVU223
 838 0370 C9FFFFEA 		b	.L26		@
 839              	.L45:
 840              		.align	2
 841              	.L44:
 842 0374 00000000 		.word	g_armwave_state
 843              		.cfi_endproc
 844              	.LFE60:
 846              		.global	__aeabi_idiv
 847              		.align	2
 848              		.global	armwave_generate
 849              		.syntax unified
 850              		.arm
 851              		.fpu vfp
 853              	armwave_generate:
 854              	.LFB61:
 174:armwave.c     **** 
 175:armwave.c     **** /*
 176:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 177:armwave.c     ****  */
 178:armwave.c     **** void armwave_generate()
 179:armwave.c     **** {
 855              		.loc 1 179 1 is_stmt 1 view -0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 180:armwave.c     ****     uint32_t yy;
 859              		.loc 1 180 5 view .LVU225
 181:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 860              		.loc 1 181 5 view .LVU226
 861              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 862              		.loc 1 179 1 is_stmt 0 view .LVU227
 863 0378 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 864              		.cfi_def_cfa_offset 28
 865              		.cfi_offset 4, -28
 866              		.cfi_offset 5, -24
 867              		.cfi_offset 6, -20
 868              		.cfi_offset 7, -16
 869              		.cfi_offset 8, -12
 870              		.cfi_offset 9, -8
 871              		.cfi_offset 14, -4
 872              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 182:armwave.c     **** 
 183:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 873              		.loc 1 183 5 view .LVU228
 874 037c 0010A0E3 		mov	r1, #0	@,
 875              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 876              		.loc 1 181 38 view .LVU229
 877 0380 D4609FE5 		ldr	r6, .L52	@ tmp169,
 878              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 879              		.loc 1 179 1 view .LVU230
 880 0384 0CD04DE2 		sub	sp, sp, #12	@,,
 881              		.cfi_def_cfa_offset 40
 882              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 883              		.loc 1 183 5 view .LVU231
 884 0388 502096E5 		ldr	r2, [r6, #80]	@, g_armwave_state.ch_buff_size
 885 038c 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 886              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 887              		.loc 1 181 14 view .LVU232
 888 0390 4C8096E5 		ldr	r8, [r6, #76]	@ xx_rem, g_armwave_state.wave_length
 889              	.LVL50:
 890              		.loc 1 183 5 is_stmt 1 view .LVU233
 891 0394 FEFFFFEB 		bl	memset		@
 892              	.LVL51:
 184:armwave.c     **** 
 185:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 893              		.loc 1 185 5 view .LVU234
 894              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 895              		.loc 1 185 68 is_stmt 0 view .LVU235
 896 0398 444096E5 		ldr	r4, [r6, #68]	@ _15, g_armwave_state.slice_height
 897              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 898              		.loc 1 185 51 view .LVU236
 899 039c 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 900 03a0 0410A0E1 		mov	r1, r4	@, _15
 901 03a4 FEFFFFEB 		bl	__aeabi_idiv		@
 902              	.LVL52:
 903              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 904              		.loc 1 185 5 view .LVU237
 905 03a8 000050E3 		cmp	r0, #0	@ tmp149
 906 03ac 2700000A 		beq	.L47		@,
 907              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 908              		.loc 1 181 52 view .LVU238
 909 03b0 0070A0E3 		mov	r7, #0	@ ypos,
 910              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 186:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 187:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 911              		.loc 1 187 9 view .LVU239
 912 03b4 A4909FE5 		ldr	r9, .L52+4	@ tmp170,
 913              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 914              		.loc 1 185 12 view .LVU240
 915 03b8 0750A0E1 		mov	r5, r7	@ yy, ypos
 916              	.LVL53:
 917              	.L48:
 918              		.loc 1 187 9 is_stmt 1 discriminator 3 view .LVU241
 919 03bc 950401E0 		mul	r1, r5, r4	@ _7, yy, _15
 920              	@ armwave.c:189:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 188:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 189:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 921              		.loc 1 189 48 is_stmt 0 discriminator 3 view .LVU242
 922 03c0 24C096E5 		ldr	ip, [r6, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 923              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 187:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 924              		.loc 1 187 9 discriminator 3 view .LVU243
 925 03c4 0430A0E1 		mov	r3, r4	@, _15
 926 03c8 0120A0E1 		mov	r2, r1	@, _7
 927              	@ armwave.c:189:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 928              		.loc 1 189 48 discriminator 3 view .LVU244
 929 03cc 9C010CE0 		mul	ip, ip, r1	@ tmp152, g_armwave_state.cmp_x_bitdepth_scale, _7
 930              	@ armwave.c:187:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 187:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 931              		.loc 1 187 9 discriminator 3 view .LVU245
 932 03d0 0900A0E1 		mov	r0, r9	@, tmp170
 933 03d4 0510A0E1 		mov	r1, r5	@, yy
 934 03d8 2CC8A0E1 		lsr	ip, ip, #16	@ tmp154, tmp152,
 935 03dc 00C08DE5 		str	ip, [sp]	@ tmp154,
 936 03e0 FEFFFFEB 		bl	printf		@
 937              	.LVL54:
 190:armwave.c     **** 
 191:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 938              		.loc 1 191 9 is_stmt 1 discriminator 3 view .LVU246
 939              	@ armwave.c:191:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 940              		.loc 1 191 62 is_stmt 0 discriminator 3 view .LVU247
 941 03e4 441096E5 		ldr	r1, [r6, #68]	@ _13, g_armwave_state.slice_height
 942              	@ armwave.c:191:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 943              		.loc 1 191 9 discriminator 3 view .LVU248
 944 03e8 950100E0 		mul	r0, r5, r1	@, yy,
 945 03ec FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 946              	.LVL55:
 192:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 947              		.loc 1 192 9 is_stmt 1 discriminator 3 view .LVU249
 948              	@ armwave.c:192:         xx_rem -= g_armwave_state.slice_height;
 949              		.loc 1 192 34 is_stmt 0 discriminator 3 view .LVU250
 950 03f0 444096E5 		ldr	r4, [r6, #68]	@ _15, g_armwave_state.slice_height
 951              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 952              		.loc 1 185 51 discriminator 3 view .LVU251
 953 03f4 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 954 03f8 0410A0E1 		mov	r1, r4	@, _15
 955 03fc FEFFFFEB 		bl	__aeabi_idiv		@
 956              	.LVL56:
 957              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 958              		.loc 1 185 86 discriminator 3 view .LVU252
 959 0400 015085E2 		add	r5, r5, #1	@ yy, yy,
 960              	.LVL57:
 961              	@ armwave.c:192:         xx_rem -= g_armwave_state.slice_height;
 962              		.loc 1 192 16 discriminator 3 view .LVU253
 963 0404 048048E0 		sub	r8, r8, r4	@ xx_rem, xx_rem, _15
 964              	.LVL58:
 193:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 965              		.loc 1 193 9 is_stmt 1 discriminator 3 view .LVU254
 966              	@ armwave.c:193:         ypos += g_armwave_state.slice_height;   
 967              		.loc 1 193 14 is_stmt 0 discriminator 3 view .LVU255
 968 0408 047087E0 		add	r7, r7, r4	@ ypos, ypos, _15
 969              	.LVL59:
 970              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 971              		.loc 1 185 5 discriminator 3 view .LVU256
 972 040c 050050E1 		cmp	r0, r5	@, yy
 973 0410 E9FFFF8A 		bhi	.L48		@,
 974              	.LVL60:
 975              	.L49:
 194:armwave.c     ****     }
 195:armwave.c     **** 
 196:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 976              		.loc 1 196 5 is_stmt 1 view .LVU257
 977              	@ armwave.c:198:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 197:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 198:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 978              		.loc 1 198 48 is_stmt 0 view .LVU258
 979 0414 940502E0 		mul	r2, r4, r5	@ tmp164, _15, yy
 980 0418 24C096E5 		ldr	ip, [r6, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 981              	@ armwave.c:196:     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 196:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 982              		.loc 1 196 5 view .LVU259
 983 041c 0510A0E1 		mov	r1, r5	@, yy
 984 0420 0430A0E1 		mov	r3, r4	@, _15
 985              	@ armwave.c:198:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 986              		.loc 1 198 48 view .LVU260
 987 0424 9C020CE0 		mul	ip, ip, r2	@ tmp166, g_armwave_state.cmp_x_bitdepth_scale, tmp164
 988              	@ armwave.c:196:     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 196:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 989              		.loc 1 196 5 view .LVU261
 990 0428 34009FE5 		ldr	r0, .L52+8	@,
 991 042c 0720A0E1 		mov	r2, r7	@, ypos
 992 0430 2CC8A0E1 		lsr	ip, ip, #16	@ tmp168, tmp166,
 993 0434 00C08DE5 		str	ip, [sp]	@ tmp168,
 994 0438 FEFFFFEB 		bl	printf		@
 995              	.LVL61:
 199:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 996              		.loc 1 199 5 is_stmt 1 view .LVU262
 997 043c 0810A0E1 		mov	r1, r8	@, xx_rem
 998 0440 0700A0E1 		mov	r0, r7	@, ypos
 999              	@ armwave.c:200: }
 200:armwave.c     **** }
 1000              		.loc 1 200 1 is_stmt 0 view .LVU263
 1001 0444 0CD08DE2 		add	sp, sp, #12	@,,
 1002              		.cfi_remember_state
 1003              		.cfi_def_cfa_offset 28
 1004              		@ sp needed	@
 1005 0448 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1006              		.cfi_restore 14
 1007              		.cfi_restore 9
 1008              		.cfi_restore 8
 1009              		.cfi_restore 7
 1010              		.cfi_restore 6
 1011              		.cfi_restore 5
 1012              		.cfi_restore 4
 1013              		.cfi_def_cfa_offset 0
 1014              	.LVL62:
 1015              	@ armwave.c:199:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 199:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 1016              		.loc 1 199 5 view .LVU264
 1017 044c FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 1018              	.LVL63:
 1019              	.L47:
 1020              		.cfi_restore_state
 1021              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 1022              		.loc 1 181 52 view .LVU265
 1023 0450 0070A0E1 		mov	r7, r0	@ ypos, tmp149
 1024              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1025              		.loc 1 185 12 view .LVU266
 1026 0454 0050A0E1 		mov	r5, r0	@ yy, ypos
 1027 0458 EDFFFFEA 		b	.L49		@
 1028              	.L53:
 1029              		.align	2
 1030              	.L52:
 1031 045c 00000000 		.word	g_armwave_state
 1032 0460 78000000 		.word	.LC3
 1033 0464 AC000000 		.word	.LC4
 1034              		.cfi_endproc
 1035              	.LFE61:
 1037              		.align	2
 1038              		.global	armwave_setup_render
 1039              		.syntax unified
 1040              		.arm
 1041              		.fpu vfp
 1043              	armwave_setup_render:
 1044              	.LVL64:
 1045              	.LFB62:
 201:armwave.c     **** 
 202:armwave.c     **** /*
 203:armwave.c     ****  * Setup the renderer with passed parameters.
 204:armwave.c     ****  */
 205:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 206:armwave.c     **** {
 1046              		.loc 1 206 1 is_stmt 1 view -0
 1047              		.cfi_startproc
 1048              		@ args = 12, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 207:armwave.c     ****     uint32_t length, xx;
 1050              		.loc 1 207 5 view .LVU268
 208:armwave.c     ****     float points_per_pixel;
 1051              		.loc 1 208 5 view .LVU269
 209:armwave.c     **** 
 210:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1052              		.loc 1 210 5 view .LVU270
 1053              	@ armwave.c:206: {
 206:armwave.c     ****     uint32_t length, xx;
 1054              		.loc 1 206 1 is_stmt 0 view .LVU271
 1055 0468 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1056              		.cfi_def_cfa_offset 28
 1057              		.cfi_offset 4, -28
 1058              		.cfi_offset 5, -24
 1059              		.cfi_offset 6, -20
 1060              		.cfi_offset 7, -16
 1061              		.cfi_offset 8, -12
 1062              		.cfi_offset 9, -8
 1063              		.cfi_offset 14, -4
 1064 046c 14D04DE2 		sub	sp, sp, #20	@,,
 1065              		.cfi_def_cfa_offset 48
 1066              	@ armwave.c:206: {
 206:armwave.c     ****     uint32_t length, xx;
 1067              		.loc 1 206 1 view .LVU272
 1068 0470 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1069 0474 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1070 0478 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1071 047c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1072              	@ armwave.c:210:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1073              		.loc 1 210 5 view .LVU273
 1074 0480 00308DE5 		str	r3, [sp]	@ wave_stride,
 1075              	@ armwave.c:206: {
 206:armwave.c     ****     uint32_t length, xx;
 1076              		.loc 1 206 1 view .LVU274
 1077 0484 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1078 0488 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1079              	@ armwave.c:210:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1080              		.loc 1 210 5 view .LVU275
 1081 048c F460CDE1 		strd	r6, [sp, #4]	@,,
 1082 0490 0230A0E1 		mov	r3, r2	@, waves_max
 1083              	.LVL65:
 1084              		.loc 1 210 5 view .LVU276
 1085 0494 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1086 0498 0120A0E1 		mov	r2, r1	@, end_point
 1087              	.LVL66:
 1088              		.loc 1 210 5 view .LVU277
 1089 049c 0010A0E1 		mov	r1, r0	@, start_point
 1090              	.LVL67:
 1091              		.loc 1 210 5 view .LVU278
 1092 04a0 8C019FE5 		ldr	r0, .L64+12	@,
 1093              	.LVL68:
 1094              		.loc 1 210 5 view .LVU279
 1095 04a4 FEFFFFEB 		bl	printf		@
 1096              	.LVL69:
 211:armwave.c     **** 
 212:armwave.c     ****     // TODO these asserts should instead raise PyExc
 213:armwave.c     ****     assert(start_point < end_point);
 1097              		.loc 1 213 5 is_stmt 1 view .LVU280
 1098 04a8 050054E1 		cmp	r4, r5	@ start_point, end_point
 1099 04ac 5100002A 		bcs	.L62		@,
 214:armwave.c     **** 
 215:armwave.c     ****     /*
 216:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 217:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 218:armwave.c     ****     if(target_height == 256) {
 219:armwave.c     ****         g_armwave_state.row_shift = 8;
 220:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 221:armwave.c     ****     } else if(target_height == 512) {
 222:armwave.c     ****         g_armwave_state.row_shift = 9;
 223:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 224:armwave.c     ****     } else if(target_height == 1024) {
 225:armwave.c     ****         g_armwave_state.row_shift = 10;
 226:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 227:armwave.c     ****     } else if(target_height == 2048) {
 228:armwave.c     ****         g_armwave_state.row_shift = 11;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 230:armwave.c     ****     }
 231:armwave.c     ****     */
 232:armwave.c     **** 
 233:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 234:armwave.c     ****     g_armwave_state.xstride = target_height;
 1100              		.loc 1 234 5 view .LVU281
 1101              	@ armwave.c:245:     g_armwave_state.wave_length = end_point - start_point;
 235:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 236:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 237:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 238:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 239:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 240:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 241:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 242:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 243:armwave.c     ****     g_armwave_state.target_width = target_width;
 244:armwave.c     ****     g_armwave_state.target_height = target_height;
 245:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1102              		.loc 1 245 45 is_stmt 0 view .LVU282
 1103 04b0 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1104              	.LVL70:
 1105              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 246:armwave.c     **** 
 247:armwave.c     ****     // Calculate compound scaler
 248:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 249:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1106              		.loc 1 249 48 view .LVU283
 1107 04b4 5B5A9FED 		vldr.32	s10, .L64	@ tmp187,
 1108 04b8 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1109              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1110              		.loc 1 235 49 view .LVU284
 1111 04bc 5A7A9FED 		vldr.32	s14, .L64+4	@ tmp165,
 1112              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1113              		.loc 1 249 81 view .LVU285
 1114 04c0 5A6A9FED 		vldr.32	s12, .L64+8	@ tmp191,
 1115              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1116              		.loc 1 242 90 view .LVU286
 1117 04c4 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1118              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1119              		.loc 1 249 48 view .LVU287
 1120 04c8 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1121              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1122              		.loc 1 235 49 view .LVU288
 1123 04cc 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1124              	@ armwave.c:234:     g_armwave_state.xstride = target_height;
 234:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1125              		.loc 1 234 29 view .LVU289
 1126 04d0 60419FE5 		ldr	r4, .L64+16	@ tmp222,
 1127              	.LVL71:
 1128              	@ armwave.c:240:     g_armwave_state.size = target_height * target_width;
 240:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1129              		.loc 1 240 42 view .LVU290
 1130 04d4 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1131              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1132              		.loc 1 235 49 view .LVU291
 1133 04d8 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1134              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1135              		.loc 1 242 95 view .LVU292
 1136 04dc 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1137              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 250:armwave.c     **** 
 251:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1138              		.loc 1 251 5 view .LVU293
 1139 04e0 0128A0E3 		mov	r2, #65536	@ tmp194,
 1140              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 249:armwave.c     **** 
 1141              		.loc 1 249 48 view .LVU294
 1142 04e4 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1143              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1144              		.loc 1 251 5 view .LVU295
 1145 04e8 04508DE5 		str	r5, [sp, #4]	@ _13,
 1146 04ec 00608DE5 		str	r6, [sp]	@ target_width,
 1147              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1148              		.loc 1 242 95 view .LVU296
 1149 04f0 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1150              	@ armwave.c:234:     g_armwave_state.xstride = target_height;
 234:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1151              		.loc 1 234 29 view .LVU297
 1152 04f4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1153              		.loc 1 235 5 is_stmt 1 view .LVU298
 1154              	@ armwave.c:237:     g_armwave_state.wave_stride = wave_stride;
 237:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1155              		.loc 1 237 33 is_stmt 0 view .LVU299
 1156 04f8 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1157              	@ armwave.c:238:     g_armwave_state.waves_max = waves_max;
 238:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1158              		.loc 1 238 31 view .LVU300
 1159 04fc 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1160              	@ armwave.c:239:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 239:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1161              		.loc 1 239 27 view .LVU301
 1162 0500 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1163              	@ armwave.c:244:     g_armwave_state.target_height = target_height;
 244:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1164              		.loc 1 244 35 view .LVU302
 1165 0504 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1166              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1167              		.loc 1 251 5 view .LVU303
 1168 0508 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1169              	@ armwave.c:241:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 241:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1170              		.loc 1 241 37 view .LVU304
 1171 050c 022CA0E3 		mov	r2, #512	@ tmp175,
 1172              	@ armwave.c:240:     g_armwave_state.size = target_height * target_width;
 240:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1173              		.loc 1 240 26 view .LVU305
 1174 0510 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1175              	@ armwave.c:241:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 241:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1176              		.loc 1 241 37 view .LVU306
 1177 0514 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1178              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1179              		.loc 1 251 5 view .LVU307
 1180 0518 0310A0E1 		mov	r1, r3	@, tmp180
 1181              	@ armwave.c:242:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1182              		.loc 1 242 34 view .LVU308
 1183 051c 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1184              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1185              		.loc 1 235 49 view .LVU309
 1186 0520 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1187              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 249:armwave.c     **** 
 1188              		.loc 1 249 40 view .LVU310
 1189 0524 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1190              	@ armwave.c:245:     g_armwave_state.wave_length = end_point - start_point;
 245:armwave.c     **** 
 1191              		.loc 1 245 33 view .LVU311
 1192 0528 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1193              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1194              		.loc 1 251 5 view .LVU312
 1195 052c 08019FE5 		ldr	r0, .L64+20	@,
 1196              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 249:armwave.c     **** 
 1197              		.loc 1 249 40 view .LVU313
 1198 0530 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1199 0534 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1200              	@ armwave.c:236:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 236:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1201              		.loc 1 236 30 view .LVU314
 1202 0538 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1203              	@ armwave.c:235:     g_armwave_state.vscale_frac = target_height / 255.0f;
 235:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1204              		.loc 1 235 33 view .LVU315
 1205 053c 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 236:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1206              		.loc 1 236 5 is_stmt 1 view .LVU316
 1207              	@ armwave.c:249:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 249:armwave.c     **** 
 1208              		.loc 1 249 81 is_stmt 0 view .LVU317
 1209 0540 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1210              	@ armwave.c:236:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 236:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1211              		.loc 1 236 30 view .LVU318
 1212 0544 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 237:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1213              		.loc 1 237 5 is_stmt 1 view .LVU319
 238:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1214              		.loc 1 238 5 view .LVU320
 239:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1215              		.loc 1 239 5 view .LVU321
 240:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1216              		.loc 1 240 5 view .LVU322
 241:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1217              		.loc 1 241 5 view .LVU323
 242:armwave.c     ****     g_armwave_state.target_width = target_width;
 1218              		.loc 1 242 5 view .LVU324
 243:armwave.c     ****     g_armwave_state.target_height = target_height;
 1219              		.loc 1 243 5 view .LVU325
 244:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1220              		.loc 1 244 5 view .LVU326
 245:armwave.c     **** 
 1221              		.loc 1 245 5 view .LVU327
 248:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1222              		.loc 1 248 5 view .LVU328
 1223              	@ armwave.c:248:     g_armwave_state.cmp_x_bitdepth_scale = \
 248:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1224              		.loc 1 248 42 is_stmt 0 view .LVU329
 1225 0548 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1226 054c 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1227              	@ armwave.c:251:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1228              		.loc 1 251 5 view .LVU330
 1229 0550 903A17EE 		vmov	r3, s15	@ int	@, _20
 1230              	@ armwave.c:248:     g_armwave_state.cmp_x_bitdepth_scale = \
 248:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1231              		.loc 1 248 42 view .LVU331
 1232 0554 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1233              		.loc 1 251 5 is_stmt 1 view .LVU332
 1234 0558 0C20A0E1 		mov	r2, ip	@, tmp3
 1235 055c FEFFFFEB 		bl	printf		@
 1236              	.LVL72:
 252:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 253:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 254:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 255:armwave.c     **** 
 256:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 257:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 258:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 259:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1237              		.loc 1 259 5 view .LVU333
 1238              	@ armwave.c:261:     if(g_armwave_state.ch1_buffer != NULL)
 260:armwave.c     **** 
 261:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1239              		.loc 1 261 23 is_stmt 0 view .LVU334
 1240 0560 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1241              	@ armwave.c:259:     g_armwave_state.slice_height = 64; // 64;  
 259:armwave.c     **** 
 1242              		.loc 1 259 34 view .LVU335
 1243 0564 4030A0E3 		mov	r3, #64	@ tmp196,
 1244              	@ armwave.c:261:     if(g_armwave_state.ch1_buffer != NULL)
 1245              		.loc 1 261 7 view .LVU336
 1246 0568 000050E3 		cmp	r0, #0	@ _21,
 1247              	@ armwave.c:259:     g_armwave_state.slice_height = 64; // 64;  
 259:armwave.c     **** 
 1248              		.loc 1 259 34 view .LVU337
 1249 056c 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1250              		.loc 1 261 5 is_stmt 1 view .LVU338
 1251              	@ armwave.c:261:     if(g_armwave_state.ch1_buffer != NULL)
 1252              		.loc 1 261 7 is_stmt 0 view .LVU339
 1253 0570 0000000A 		beq	.L56		@,
 262:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1254              		.loc 1 262 9 is_stmt 1 view .LVU340
 1255 0574 FEFFFFEB 		bl	free		@
 1256              	.LVL73:
 1257              	.L56:
 263:armwave.c     **** 
 264:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1258              		.loc 1 264 5 view .LVU341
 1259              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1260              		.loc 1 264 56 is_stmt 0 view .LVU342
 1261 0578 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1262              	.LVL74:
 1263              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1264              		.loc 1 264 34 view .LVU343
 1265 057c 0110A0E3 		mov	r1, #1	@,
 1266 0580 0800A0E1 		mov	r0, r8	@, _22
 1267 0584 FEFFFFEB 		bl	calloc		@
 1268              	.LVL75:
 1269              	@ armwave.c:266:     if(g_armwave_state.ch1_buffer == NULL) {
 265:armwave.c     **** 
 266:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1270              		.loc 1 266 7 view .LVU344
 1271 0588 000050E3 		cmp	r0, #0	@ tmp199,
 1272              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 264:armwave.c     **** 
 1273              		.loc 1 264 34 view .LVU345
 1274 058c 0070A0E1 		mov	r7, r0	@ tmp199,
 1275              	@ armwave.c:264:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 264:armwave.c     **** 
 1276              		.loc 1 264 32 view .LVU346
 1277 0590 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1278              		.loc 1 266 5 is_stmt 1 view .LVU347
 1279              	@ armwave.c:266:     if(g_armwave_state.ch1_buffer == NULL) {
 1280              		.loc 1 266 7 is_stmt 0 view .LVU348
 1281 0594 1C00000A 		beq	.L63		@,
 267:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 268:armwave.c     ****         exit(-1);
 269:armwave.c     ****     }
 270:armwave.c     **** 
 271:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 272:armwave.c     ****     length = end_point - start_point;
 1282              		.loc 1 272 5 is_stmt 1 view .LVU349
 1283              	.LVL76:
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1284              		.loc 1 273 5 view .LVU350
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1285              		.loc 1 274 5 view .LVU351
 1286              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1287              		.loc 1 273 31 is_stmt 0 view .LVU352
 1288 0598 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1289              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1290              		.loc 1 273 34 view .LVU353
 1291 059c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1292              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1293              		.loc 1 274 60 view .LVU354
 1294 05a0 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1295              	@ armwave.c:288:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 275:armwave.c     **** 
 276:armwave.c     ****     /*
 277:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 278:armwave.c     **** 
 279:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 280:armwave.c     **** 
 281:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 282:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 283:armwave.c     **** 
 284:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 285:armwave.c     ****     }
 286:armwave.c     ****     */
 287:armwave.c     **** 
 288:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1296              		.loc 1 288 34 view .LVU355
 1297 05a4 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1298              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1299              		.loc 1 273 31 view .LVU356
 1300 05a8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1301              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1302              		.loc 1 273 34 view .LVU357
 1303 05ac 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1304              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1305              		.loc 1 274 60 view .LVU358
 1306 05b0 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1307              	@ armwave.c:288:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1308              		.loc 1 288 34 view .LVU359
 1309 05b4 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1310              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1311              		.loc 1 273 22 view .LVU360
 1312 05b8 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1313              	.LVL77:
 1314              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1315              		.loc 1 274 60 view .LVU361
 1316 05bc 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1317              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1318              		.loc 1 274 41 view .LVU362
 1319 05c0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1320 05c4 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1321              		.loc 1 288 5 is_stmt 1 view .LVU363
 1322              	@ armwave.c:288:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1323              		.loc 1 288 34 is_stmt 0 view .LVU364
 1324 05c8 FEFFFFEB 		bl	malloc		@
 1325              	.LVL78:
 1326              	@ armwave.c:290:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 289:armwave.c     **** 
 290:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1327              		.loc 1 290 5 view .LVU365
 1328 05cc 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1329 05d0 0710A0E1 		mov	r1, r7	@, tmp199
 1330 05d4 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1331 05d8 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1332              	@ armwave.c:288:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 288:armwave.c     **** 
 1333              		.loc 1 288 34 view .LVU366
 1334 05dc 00C0A0E1 		mov	ip, r0	@ tmp215,
 1335              	@ armwave.c:290:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1336              		.loc 1 290 5 view .LVU367
 1337 05e0 0030A0E1 		mov	r3, r0	@, tmp215
 1338              	@ armwave.c:288:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 288:armwave.c     **** 
 1339              		.loc 1 288 32 view .LVU368
 1340 05e4 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1341              		.loc 1 290 5 is_stmt 1 view .LVU369
 1342 05e8 50009FE5 		ldr	r0, .L64+24	@,
 1343              	@ armwave.c:297: }
 291:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 292:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 293:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 294:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 295:armwave.c     **** 
 296:armwave.c     ****      //malloc_stats();
 297:armwave.c     **** }
 1344              		.loc 1 297 1 is_stmt 0 view .LVU370
 1345 05ec 14D08DE2 		add	sp, sp, #20	@,,
 1346              		.cfi_remember_state
 1347              		.cfi_def_cfa_offset 28
 1348              		@ sp needed	@
 1349 05f0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1350              		.cfi_restore 14
 1351              		.cfi_restore 9
 1352              		.cfi_restore 8
 1353              		.cfi_restore 7
 1354              		.cfi_restore 6
 1355              		.cfi_restore 5
 1356              		.cfi_restore 4
 1357              		.cfi_def_cfa_offset 0
 1358              	.LVL79:
 1359              	@ armwave.c:290:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 290:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1360              		.loc 1 290 5 view .LVU371
 1361 05f4 FEFFFFEA 		b	printf		@
 1362              	.LVL80:
 1363              	.L62:
 1364              		.cfi_restore_state
 213:armwave.c     **** 
 1365              		.loc 1 213 5 is_stmt 1 discriminator 1 view .LVU372
 1366 05f8 44309FE5 		ldr	r3, .L64+28	@,
 1367 05fc D520A0E3 		mov	r2, #213	@,
 1368 0600 40109FE5 		ldr	r1, .L64+32	@,
 1369 0604 40009FE5 		ldr	r0, .L64+36	@,
 1370 0608 FEFFFFEB 		bl	__assert_fail		@
 1371              	.LVL81:
 1372              	.L63:
 267:armwave.c     ****         exit(-1);
 1373              		.loc 1 267 9 view .LVU373
 1374 060c 3C309FE5 		ldr	r3, .L64+40	@ tmp202,
 1375 0610 0820A0E1 		mov	r2, r8	@, _22
 1376 0614 38109FE5 		ldr	r1, .L64+44	@,
 1377 0618 000093E5 		ldr	r0, [r3]	@, stderr
 1378 061c FEFFFFEB 		bl	fprintf		@
 1379              	.LVL82:
 268:armwave.c     ****     }
 1380              		.loc 1 268 9 view .LVU374
 1381 0620 0000E0E3 		mvn	r0, #0	@,
 1382 0624 FEFFFFEB 		bl	exit		@
 1383              	.LVL83:
 1384              	.L65:
 1385              		.align	2
 1386              	.L64:
 1387 0628 0000803F 		.word	1065353216
 1388 062c 00007F43 		.word	1132396544
 1389 0630 00008047 		.word	1199570944
 1390 0634 E4000000 		.word	.LC5
 1391 0638 00000000 		.word	g_armwave_state
 1392 063c 34010000 		.word	.LC8
 1393 0640 D8010000 		.word	.LC10
 1394 0644 00000000 		.word	.LANCHOR0
 1395 0648 10010000 		.word	.LC6
 1396 064c 1C010000 		.word	.LC7
 1397 0650 00000000 		.word	stderr
 1398 0654 94010000 		.word	.LC9
 1399              		.cfi_endproc
 1400              	.LFE62:
 1402              		.align	2
 1403              		.global	armwave_set_wave_pointer
 1404              		.syntax unified
 1405              		.arm
 1406              		.fpu vfp
 1408              	armwave_set_wave_pointer:
 1409              	.LVL84:
 1410              	.LFB63:
 298:armwave.c     **** 
 299:armwave.c     **** /*
 300:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 301:armwave.c     ****  * in the future.
 302:armwave.c     ****  */
 303:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 304:armwave.c     **** {
 1411              		.loc 1 304 1 view -0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 305:armwave.c     ****     assert(wave_buffer != NULL);
 1415              		.loc 1 305 5 view .LVU376
 1416 0658 000050E3 		cmp	r0, #0	@ wave_buffer
 1417              		.loc 1 305 5 is_stmt 0 view .LVU377
 1418 065c 0200000A 		beq	.L71		@,
 306:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1419              		.loc 1 306 5 is_stmt 1 view .LVU378
 1420              	@ armwave.c:306:     g_armwave_state.wave_buffer = wave_buffer;
 1421              		.loc 1 306 33 is_stmt 0 view .LVU379
 1422 0660 1C309FE5 		ldr	r3, .L72	@ tmp116,
 1423 0664 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1424 0668 1EFF2FE1 		bx	lr	@
 1425              	.L71:
 305:armwave.c     ****     assert(wave_buffer != NULL);
 1426              		.loc 1 305 5 is_stmt 1 discriminator 1 view .LVU380
 1427              	@ armwave.c:304: {
 304:armwave.c     ****     assert(wave_buffer != NULL);
 1428              		.loc 1 304 1 is_stmt 0 discriminator 1 view .LVU381
 1429 066c 10402DE9 		push	{r4, lr}	@
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 4, -8
 1432              		.cfi_offset 14, -4
 1433              	@ armwave.c:305:     assert(wave_buffer != NULL);
 305:armwave.c     ****     assert(wave_buffer != NULL);
 1434              		.loc 1 305 5 discriminator 1 view .LVU382
 1435 0670 10309FE5 		ldr	r3, .L72+4	@,
 1436 0674 10209FE5 		ldr	r2, .L72+8	@,
 1437 0678 10109FE5 		ldr	r1, .L72+12	@,
 1438 067c 10009FE5 		ldr	r0, .L72+16	@,
 1439              	.LVL85:
 305:armwave.c     ****     assert(wave_buffer != NULL);
 1440              		.loc 1 305 5 discriminator 1 view .LVU383
 1441 0680 FEFFFFEB 		bl	__assert_fail		@
 1442              	.LVL86:
 1443              	.L73:
 1444              		.align	2
 1445              	.L72:
 1446 0684 00000000 		.word	g_armwave_state
 1447 0688 18000000 		.word	.LANCHOR0+24
 1448 068c 31010000 		.word	305
 1449 0690 10010000 		.word	.LC6
 1450 0694 FC010000 		.word	.LC11
 1451              		.cfi_endproc
 1452              	.LFE63:
 1454              		.align	2
 1455              		.global	armwave_set_wave_pointer_as_testbuf
 1456              		.syntax unified
 1457              		.arm
 1458              		.fpu vfp
 1460              	armwave_set_wave_pointer_as_testbuf:
 1461              	.LVL87:
 1462              	.LFB64:
 307:armwave.c     **** }
 308:armwave.c     **** 
 309:armwave.c     **** /*
 310:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 311:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 312:armwave.c     ****  */
 313:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 314:armwave.c     **** {
 1463              		.loc 1 314 1 is_stmt 1 view -0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 315:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1468              		.loc 1 315 5 view .LVU385
 1469              	@ armwave.c:315:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1470              		.loc 1 315 29 is_stmt 0 view .LVU386
 1471 0698 24309FE5 		ldr	r3, .L77	@ tmp117,
 1472              	@ armwave.c:315:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1473              		.loc 1 315 7 view .LVU387
 1474 069c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1475 06a0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1476 06a4 0400003A 		bcc	.L76		@,
 316:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 317:armwave.c     ****         return;
 318:armwave.c     ****     }
 319:armwave.c     **** 
 320:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1477              		.loc 1 320 5 is_stmt 1 view .LVU388
 1478              	@ armwave.c:320:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1479              		.loc 1 320 111 is_stmt 0 view .LVU389
 1480 06a8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1481              	@ armwave.c:320:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1482              		.loc 1 320 68 view .LVU390
 1483 06ac 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1484 06b0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1485              	.LVL88:
 1486              	@ armwave.c:320:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1487              		.loc 1 320 33 view .LVU391
 1488 06b4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1489              	@ armwave.c:321: }
 321:armwave.c     **** }
 1490              		.loc 1 321 1 view .LVU392
 1491 06b8 1EFF2FE1 		bx	lr	@
 1492              	.LVL89:
 1493              	.L76:
 316:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1494              		.loc 1 316 9 is_stmt 1 view .LVU393
 1495 06bc 04009FE5 		ldr	r0, .L77+4	@,
 1496              	.LVL90:
 316:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1497              		.loc 1 316 9 is_stmt 0 view .LVU394
 1498 06c0 FEFFFFEA 		b	puts		@
 1499              	.LVL91:
 1500              	.L78:
 1501              		.align	2
 1502              	.L77:
 1503 06c4 00000000 		.word	g_armwave_state
 1504 06c8 10020000 		.word	.LC12
 1505              		.cfi_endproc
 1506              	.LFE64:
 1508              		.align	2
 1509              		.global	armwave_set_wave_pointer_u32
 1510              		.syntax unified
 1511              		.arm
 1512              		.fpu vfp
 1514              	armwave_set_wave_pointer_u32:
 1515              	.LVL92:
 1516              	.LFB65:
 322:armwave.c     **** 
 323:armwave.c     **** /*
 324:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 325:armwave.c     ****  * disjointed buffers in the future.
 326:armwave.c     ****  */
 327:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 328:armwave.c     **** {
 1517              		.loc 1 328 1 is_stmt 1 view -0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 329:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1521              		.loc 1 329 5 view .LVU396
 1522 06cc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1523              		.loc 1 329 5 is_stmt 0 view .LVU397
 1524 06d0 0200000A 		beq	.L84		@,
 330:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1525              		.loc 1 330 5 is_stmt 1 view .LVU398
 1526              	@ armwave.c:330:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1527              		.loc 1 330 33 is_stmt 0 view .LVU399
 1528 06d4 1C309FE5 		ldr	r3, .L85	@ tmp117,
 1529 06d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1530 06dc 1EFF2FE1 		bx	lr	@
 1531              	.L84:
 329:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1532              		.loc 1 329 5 is_stmt 1 discriminator 1 view .LVU400
 1533              	@ armwave.c:328: {
 328:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1534              		.loc 1 328 1 is_stmt 0 discriminator 1 view .LVU401
 1535 06e0 10402DE9 		push	{r4, lr}	@
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 4, -8
 1538              		.cfi_offset 14, -4
 1539              	@ armwave.c:329:     assert(wave_buffer_ptr != 0);
 329:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1540              		.loc 1 329 5 discriminator 1 view .LVU402
 1541 06e4 10309FE5 		ldr	r3, .L85+4	@,
 1542 06e8 10209FE5 		ldr	r2, .L85+8	@,
 1543 06ec 10109FE5 		ldr	r1, .L85+12	@,
 1544 06f0 10009FE5 		ldr	r0, .L85+16	@,
 1545              	.LVL93:
 329:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1546              		.loc 1 329 5 discriminator 1 view .LVU403
 1547 06f4 FEFFFFEB 		bl	__assert_fail		@
 1548              	.LVL94:
 1549              	.L86:
 1550              		.align	2
 1551              	.L85:
 1552 06f8 00000000 		.word	g_armwave_state
 1553 06fc 34000000 		.word	.LANCHOR0+52
 1554 0700 49010000 		.word	329
 1555 0704 10010000 		.word	.LC6
 1556 0708 4C020000 		.word	.LC13
 1557              		.cfi_endproc
 1558              	.LFE65:
 1560              		.align	2
 1561              		.global	armwave_clear_buffer
 1562              		.syntax unified
 1563              		.arm
 1564              		.fpu vfp
 1566              	armwave_clear_buffer:
 1567              	.LVL95:
 1568              	.LFB66:
 331:armwave.c     **** }
 332:armwave.c     **** 
 333:armwave.c     **** /*
 334:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 337:armwave.c     **** {
 1569              		.loc 1 337 1 is_stmt 1 view -0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 0
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 1573              		@ link register save eliminated.
 338:armwave.c     ****     // Flags ignored, only one buffer cleared
 339:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1574              		.loc 1 339 5 view .LVU405
 1575              	@ armwave.c:339:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1576              		.loc 1 339 58 is_stmt 0 view .LVU406
 1577 070c 0C309FE5 		ldr	r3, .L88	@ tmp114,
 1578              	@ armwave.c:339:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1579              		.loc 1 339 5 view .LVU407
 1580 0710 0010A0E3 		mov	r1, #0	@,
 1581 0714 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1582 0718 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1583              	.LVL96:
 1584              		.loc 1 339 5 view .LVU408
 1585 071c FEFFFFEA 		b	memset		@
 1586              	.LVL97:
 1587              	.L89:
 1588              		.align	2
 1589              	.L88:
 1590 0720 00000000 		.word	g_armwave_state
 1591              		.cfi_endproc
 1592              	.LFE66:
 1594              		.align	2
 1595              		.global	armwave_set_channel_colour
 1596              		.syntax unified
 1597              		.arm
 1598              		.fpu vfp
 1600              	armwave_set_channel_colour:
 1601              	.LVL98:
 1602              	.LFB67:
 340:armwave.c     **** }
 341:armwave.c     **** 
 342:armwave.c     **** /*
 343:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 344:armwave.c     ****  */
 345:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 346:armwave.c     **** {
 1603              		.loc 1 346 1 is_stmt 1 view -0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
 1607              		@ link register save eliminated.
 347:armwave.c     ****     // Only 1ch supported for now
 348:armwave.c     ****     switch(ch) {
 1608              		.loc 1 348 5 view .LVU410
 1609 0724 010050E3 		cmp	r0, #1	@ ch,
 349:armwave.c     ****         case 1:
 350:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1610              		.loc 1 350 13 view .LVU411
 1611              	@ armwave.c:350:             g_armwave_state.ch1_color.r = r;
 1612              		.loc 1 350 41 is_stmt 0 view .LVU412
 1613 0728 0C009F05 		ldreq	r0, .L92	@ tmp117,
 1614              	.LVL99:
 1615              		.loc 1 350 41 view .LVU413
 1616 072c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 351:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1617              		.loc 1 351 13 is_stmt 1 view .LVU414
 1618              	@ armwave.c:351:             g_armwave_state.ch1_color.g = g;
 1619              		.loc 1 351 41 is_stmt 0 view .LVU415
 1620 0730 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 352:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1621              		.loc 1 352 13 is_stmt 1 view .LVU416
 1622              	@ armwave.c:352:             g_armwave_state.ch1_color.b = b;
 1623              		.loc 1 352 41 is_stmt 0 view .LVU417
 1624 0734 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 353:armwave.c     ****             break;
 1625              		.loc 1 353 13 is_stmt 1 view .LVU418
 1626              	@ armwave.c:355: }
 354:armwave.c     ****     }
 355:armwave.c     **** }
 1627              		.loc 1 355 1 is_stmt 0 view .LVU419
 1628 0738 1EFF2FE1 		bx	lr	@
 1629              	.L93:
 1630              		.align	2
 1631              	.L92:
 1632 073c 00000000 		.word	g_armwave_state
 1633              		.cfi_endproc
 1634              	.LFE67:
 1636              		.align	2
 1637              		.global	armwave_dump_ppm_debug
 1638              		.syntax unified
 1639              		.arm
 1640              		.fpu vfp
 1642              	armwave_dump_ppm_debug:
 1643              	.LVL100:
 1644              	.LFB68:
 356:armwave.c     **** 
 357:armwave.c     **** /*
 358:armwave.c     ****  * Dump a ppm of a buffer to a file.
 359:armwave.c     ****  */
 360:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 361:armwave.c     **** {
 1645              		.loc 1 361 1 is_stmt 1 view -0
 1646              		.cfi_startproc
 1647              		@ args = 0, pretend = 0, frame = 0
 1648              		@ frame_needed = 0, uses_anonymous_args = 0
 362:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1649              		.loc 1 362 5 view .LVU421
 1650              	@ armwave.c:361: {
 361:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1651              		.loc 1 361 1 is_stmt 0 view .LVU422
 1652 0740 0130A0E1 		mov	r3, r1	@ fn, fn
 1653 0744 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1654              		.cfi_def_cfa_offset 28
 1655              		.cfi_offset 4, -28
 1656              		.cfi_offset 5, -24
 1657              		.cfi_offset 6, -20
 1658              		.cfi_offset 7, -16
 1659              		.cfi_offset 8, -12
 1660              		.cfi_offset 9, -8
 1661              		.cfi_offset 14, -4
 1662 0748 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1663 074c 0CD04DE2 		sub	sp, sp, #12	@,,
 1664              		.cfi_def_cfa_offset 40
 1665              	@ armwave.c:362:     FILE *fp = fopen(fn, "wb");
 1666              		.loc 1 362 16 view .LVU423
 1667 0750 C4109FE5 		ldr	r1, .L102	@,
 1668              	.LVL101:
 1669              		.loc 1 362 16 view .LVU424
 1670 0754 0300A0E1 		mov	r0, r3	@, fn
 1671              	.LVL102:
 1672              		.loc 1 362 16 view .LVU425
 1673 0758 FEFFFFEB 		bl	fopen64		@
 1674              	.LVL103:
 1675              	@ armwave.c:369:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 363:armwave.c     ****     uint32_t data;
 364:armwave.c     ****     int xx, yy;
 365:armwave.c     **** 
 366:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 367:armwave.c     **** 
 368:armwave.c     ****     fputs("P3\n", fp);
 369:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1676              		.loc 1 369 5 view .LVU426
 1677 075c BC609FE5 		ldr	r6, .L102+4	@ tmp150,
 1678              	@ armwave.c:368:     fputs("P3\n", fp);
 368:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1679              		.loc 1 368 5 view .LVU427
 1680 0760 0320A0E3 		mov	r2, #3	@,
 1681 0764 0110A0E3 		mov	r1, #1	@,
 1682              	@ armwave.c:362:     FILE *fp = fopen(fn, "wb");
 362:armwave.c     ****     uint32_t data;
 1683              		.loc 1 362 16 view .LVU428
 1684 0768 0070A0E1 		mov	r7, r0	@ fp,
 1685              	.LVL104:
 363:armwave.c     ****     uint32_t data;
 1686              		.loc 1 363 5 is_stmt 1 view .LVU429
 364:armwave.c     **** 
 1687              		.loc 1 364 5 view .LVU430
 368:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1688              		.loc 1 368 5 view .LVU431
 1689 076c 0030A0E1 		mov	r3, r0	@, fp
 1690 0770 AC009FE5 		ldr	r0, .L102+8	@,
 1691              	.LVL105:
 368:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1692              		.loc 1 368 5 is_stmt 0 view .LVU432
 1693 0774 FEFFFFEB 		bl	fwrite		@
 1694              	.LVL106:
 1695              		.loc 1 369 5 is_stmt 1 view .LVU433
 1696 0778 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1697 077c A4109FE5 		ldr	r1, .L102+12	@,
 1698 0780 0700A0E1 		mov	r0, r7	@, fp
 1699 0784 FEFFFFEB 		bl	fprintf		@
 1700              	.LVL107:
 370:armwave.c     ****     fputs("255\n", fp);
 1701              		.loc 1 370 5 view .LVU434
 1702 0788 0420A0E3 		mov	r2, #4	@,
 1703 078c 0730A0E1 		mov	r3, r7	@, fp
 1704 0790 0110A0E3 		mov	r1, #1	@,
 1705 0794 90009FE5 		ldr	r0, .L102+16	@,
 1706 0798 FEFFFFEB 		bl	fwrite		@
 1707              	.LVL108:
 371:armwave.c     **** 
 372:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1708              		.loc 1 372 5 view .LVU435
 1709              	@ armwave.c:372:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1710              		.loc 1 372 37 is_stmt 0 view .LVU436
 1711 079c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1712              	@ armwave.c:372:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1713              		.loc 1 372 5 view .LVU437
 1714 07a0 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1715 07a4 180000DA 		ble	.L95		@,
 1716 07a8 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1717              	@ armwave.c:377:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 374:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 375:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 376:armwave.c     **** 
 377:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1718              		.loc 1 377 13 view .LVU438
 1719 07ac 7C909FE5 		ldr	r9, .L102+20	@ tmp152,
 1720              	@ armwave.c:372:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 372:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1721              		.loc 1 372 12 view .LVU439
 1722 07b0 0050A0E3 		mov	r5, #0	@ yy,
 1723              	.LVL109:
 1724              	.L96:
 1725              	@ armwave.c:373:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1726              		.loc 1 373 9 view .LVU440
 1727 07b4 000053E3 		cmp	r3, #0	@ _13,
 1728              	@ armwave.c:373:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1729              		.loc 1 373 16 view .LVU441
 1730 07b8 0040A0C3 		movgt	r4, #0	@ xx,
 1731              	@ armwave.c:373:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1732              		.loc 1 373 9 view .LVU442
 1733 07bc 0F0000DA 		ble	.L98		@,
 1734              	.LVL110:
 1735              	.L97:
 374:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1736              		.loc 1 374 13 is_stmt 1 discriminator 3 view .LVU443
 1737              	@ armwave.c:374:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 374:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1738              		.loc 1 374 29 is_stmt 0 discriminator 3 view .LVU444
 1739 07c0 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1740              	@ armwave.c:377:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1741              		.loc 1 377 13 discriminator 3 view .LVU445
 1742 07c4 0910A0E1 		mov	r1, r9	@, tmp152
 1743 07c8 0700A0E1 		mov	r0, r7	@, fp
 1744              	@ armwave.c:374:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 374:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1745              		.loc 1 374 18 discriminator 3 view .LVU446
 1746 07cc 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1747              	.LVL111:
 1748              		.loc 1 377 13 is_stmt 1 discriminator 3 view .LVU447
 1749              	@ armwave.c:373:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1750              		.loc 1 373 58 is_stmt 0 discriminator 3 view .LVU448
 1751 07d0 014084E2 		add	r4, r4, #1	@ xx, xx,
 1752              	.LVL112:
 1753              	@ armwave.c:377:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1754              		.loc 1 377 81 discriminator 3 view .LVU449
 1755 07d4 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1756              	@ armwave.c:377:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1757              		.loc 1 377 61 discriminator 3 view .LVU450
 1758 07d8 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1759              	@ armwave.c:377:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1760              		.loc 1 377 13 discriminator 3 view .LVU451
 1761 07dc 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1762 07e0 7330EFE6 		uxtb	r3, r3	@, tmp142
 1763 07e4 00C08DE5 		str	ip, [sp]	@ tmp147,
 1764 07e8 7220EFE6 		uxtb	r2, r2	@, data
 1765              	.LVL113:
 1766              		.loc 1 377 13 discriminator 3 view .LVU452
 1767 07ec FEFFFFEB 		bl	fprintf		@
 1768              	.LVL114:
 1769              	@ armwave.c:373:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1770              		.loc 1 373 41 discriminator 3 view .LVU453
 1771 07f0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1772              	@ armwave.c:373:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 373:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1773              		.loc 1 373 9 discriminator 3 view .LVU454
 1774 07f4 040053E1 		cmp	r3, r4	@ _13, xx
 1775 07f8 F0FFFFCA 		bgt	.L97		@,
 1776 07fc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1777              	.LVL115:
 1778              	.L98:
 1779              	@ armwave.c:372:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 372:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1780              		.loc 1 372 55 discriminator 2 view .LVU455
 1781 0800 015085E2 		add	r5, r5, #1	@ yy, yy,
 1782              	.LVL116:
 1783              	@ armwave.c:372:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 372:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1784              		.loc 1 372 5 discriminator 2 view .LVU456
 1785 0804 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1786 0808 E9FFFFBA 		blt	.L96		@,
 1787              	.LVL117:
 1788              	.L95:
 378:armwave.c     ****         }
 379:armwave.c     ****     }
 380:armwave.c     **** 
 381:armwave.c     ****     fclose(fp);
 1789              		.loc 1 381 5 is_stmt 1 view .LVU457
 1790 080c 0700A0E1 		mov	r0, r7	@, fp
 1791              	@ armwave.c:382: }
 382:armwave.c     **** }
 1792              		.loc 1 382 1 is_stmt 0 view .LVU458
 1793 0810 0CD08DE2 		add	sp, sp, #12	@,,
 1794              		.cfi_def_cfa_offset 28
 1795              		@ sp needed	@
 1796 0814 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1797              		.cfi_restore 14
 1798              		.cfi_restore 9
 1799              		.cfi_restore 8
 1800              		.cfi_restore 7
 1801              		.cfi_restore 6
 1802              		.cfi_restore 5
 1803              		.cfi_restore 4
 1804              		.cfi_def_cfa_offset 0
 1805              	.LVL118:
 1806              	@ armwave.c:381:     fclose(fp);
 381:armwave.c     **** }
 1807              		.loc 1 381 5 view .LVU459
 1808 0818 FEFFFFEA 		b	fclose		@
 1809              	.LVL119:
 1810              	.L103:
 381:armwave.c     **** }
 1811              		.loc 1 381 5 view .LVU460
 1812              		.align	2
 1813              	.L102:
 1814 081c 64020000 		.word	.LC14
 1815 0820 00000000 		.word	g_armwave_state
 1816 0824 68020000 		.word	.LC15
 1817 0828 6C020000 		.word	.LC16
 1818 082c 74020000 		.word	.LC17
 1819 0830 7C020000 		.word	.LC18
 1820              		.cfi_endproc
 1821              	.LFE68:
 1823              		.align	2
 1824              		.global	armwave_test_init
 1825              		.syntax unified
 1826              		.arm
 1827              		.fpu vfp
 1829              	armwave_test_init:
 1830              	.LVL120:
 1831              	.LFB69:
 383:armwave.c     **** 
 384:armwave.c     **** /*
 385:armwave.c     ****  * Initialise some test functionry.
 386:armwave.c     ****  */
 387:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 388:armwave.c     **** {
 1832              		.loc 1 388 1 is_stmt 1 view -0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 389:armwave.c     ****     test_create_gamma();
 1836              		.loc 1 389 5 view .LVU462
 1837              	.LBB12:
 1838              	.LBI12:
  34:armwave.c     **** {
 1839              		.loc 1 34 6 view .LVU463
  34:armwave.c     **** {
 1840              		.loc 1 34 6 is_stmt 0 view .LVU464
 1841              	.LBE12:
 1842              	@ armwave.c:388: {
 388:armwave.c     ****     test_create_gamma();
 1843              		.loc 1 388 1 view .LVU465
 1844 0834 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1845              		.cfi_def_cfa_offset 32
 1846              		.cfi_offset 4, -32
 1847              		.cfi_offset 5, -28
 1848              		.cfi_offset 6, -24
 1849              		.cfi_offset 7, -20
 1850              		.cfi_offset 8, -16
 1851              		.cfi_offset 9, -12
 1852              		.cfi_offset 10, -8
 1853              		.cfi_offset 14, -4
 1854 0838 068B2DED 		vpush.64	{d8, d9, d10}	@
 1855              		.cfi_def_cfa_offset 56
 1856              		.cfi_offset 80, -56
 1857              		.cfi_offset 81, -52
 1858              		.cfi_offset 82, -48
 1859              		.cfi_offset 83, -44
 1860              		.cfi_offset 84, -40
 1861              		.cfi_offset 85, -36
 1862 083c C0409FE5 		ldr	r4, .L108+20	@ ivtmp.82,
 1863              	.LBB15:
 1864              	.LBB13:
 1865              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1866              		.loc 1 40 32 view .LVU466
 1867 0840 2EAA9FED 		vldr.32	s20, .L108+16	@ tmp136,
 1868              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1869              		.loc 1 40 26 view .LVU467
 1870 0844 299B9FED 		vldr.64	d9, .L108	@ tmp151,
 1871              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1872              		.loc 1 40 49 view .LVU468
 1873 0848 2A8B9FED 		vldr.64	d8, .L108+8	@ tmp139,
 1874 084c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 1875              	.LBE13:
 1876              	.LBE15:
 1877              	@ armwave.c:388: {
 388:armwave.c     ****     test_create_gamma();
 1878              		.loc 1 388 1 view .LVU469
 1879 0850 10D04DE2 		sub	sp, sp, #16	@,,
 1880              		.cfi_def_cfa_offset 72
 1881              	@ armwave.c:388: {
 388:armwave.c     ****     test_create_gamma();
 1882              		.loc 1 388 1 view .LVU470
 1883 0854 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1884 0858 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1885 085c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1886 0860 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1887 0864 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 1888 0868 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1889              	.LVL121:
 1890              	.L105:
 1891              	.LBB16:
 1892              	.LBB14:
  40:armwave.c     ****     }
 1893              		.loc 1 40 9 is_stmt 1 view .LVU471
 1894              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1895              		.loc 1 40 32 is_stmt 0 view .LVU472
 1896 086c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 1897              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1898              		.loc 1 40 26 view .LVU473
 1899 0870 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1900              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1901              		.loc 1 40 32 view .LVU474
 1902 0874 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1903 0878 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1904 087c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1905              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1906              		.loc 1 40 26 view .LVU475
 1907 0880 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1908 0884 FEFFFFEB 		bl	pow		@
 1909              	.LVL122:
 1910              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1911              		.loc 1 40 49 view .LVU476
 1912 0888 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1913              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1914              		.loc 1 40 24 view .LVU477
 1915 088c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1916 0890 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1917 0894 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1918              	.LVL123:
 1919              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1920              		.loc 1 39 5 view .LVU478
 1921 0898 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 1922 089c F2FFFF1A 		bne	.L105		@,
 1923              	.LVL124:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1924              		.loc 1 39 5 view .LVU479
 1925              	.LBE14:
 1926              	.LBE16:
 390:armwave.c     **** 
 391:armwave.c     ****     // make ch1 yellowish by default
 392:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1927              		.loc 1 392 5 is_stmt 1 view .LVU480
 1928              	.LBB17:
 1929              	.LBI17:
 345:armwave.c     **** {
 1930              		.loc 1 345 6 view .LVU481
 1931              	.LBB18:
 348:armwave.c     ****         case 1:
 1932              		.loc 1 348 5 view .LVU482
 350:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1933              		.loc 1 350 13 view .LVU483
 351:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1934              		.loc 1 351 13 view .LVU484
 1935              	@ armwave.c:350:             g_armwave_state.ch1_color.r = r;
 350:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1936              		.loc 1 350 41 is_stmt 0 view .LVU485
 1937 08a0 60C09FE5 		ldr	ip, .L108+24	@ tmp142,
 1938 08a4 60409FE5 		ldr	r4, .L108+28	@ tmp143,
 1939              	.LBE18:
 1940              	.LBE17:
 1941              	@ armwave.c:394:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 393:armwave.c     **** 
 394:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1942              		.loc 1 394 5 view .LVU486
 1943 08a8 0000A0E3 		mov	r0, #0	@ tmp147,
 1944              	.LBB22:
 1945              	.LBB19:
 1946              	@ armwave.c:352:             g_armwave_state.ch1_color.b = b;
 352:armwave.c     ****             break;
 1947              		.loc 1 352 41 view .LVU487
 1948 08ac FAE0A0E3 		mov	lr, #250	@ tmp146,
 1949              	.LBE19:
 1950              	.LBE22:
 1951              	@ armwave.c:394:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1952              		.loc 1 394 5 view .LVU488
 1953 08b0 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1954 08b4 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1955 08b8 00808DE5 		str	r8, [sp]	@ render_width,
 1956 08bc 0610A0E1 		mov	r1, r6	@, tmp3
 1957 08c0 0720A0E1 		mov	r2, r7	@, nwaves
 1958              	.LBB23:
 1959              	.LBB20:
 1960              	@ armwave.c:350:             g_armwave_state.ch1_color.r = r;
 350:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1961              		.loc 1 350 41 view .LVU489
 1962 08c4 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 352:armwave.c     ****             break;
 1963              		.loc 1 352 13 is_stmt 1 view .LVU490
 1964              	.LBE20:
 1965              	.LBE23:
 1966              	@ armwave.c:394:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1967              		.loc 1 394 5 is_stmt 0 view .LVU491
 1968 08c8 0630A0E1 		mov	r3, r6	@, wave_size
 1969              	.LBB24:
 1970              	.LBB21:
 1971              	@ armwave.c:352:             g_armwave_state.ch1_color.b = b;
 352:armwave.c     ****             break;
 1972              		.loc 1 352 41 view .LVU492
 1973 08cc B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 353:armwave.c     ****     }
 1974              		.loc 1 353 13 is_stmt 1 view .LVU493
 1975              	.LVL125:
 353:armwave.c     ****     }
 1976              		.loc 1 353 13 is_stmt 0 view .LVU494
 1977              	.LBE21:
 1978              	.LBE24:
 1979              		.loc 1 394 5 is_stmt 1 view .LVU495
 1980 08d0 FEFFFFEB 		bl	armwave_setup_render		@
 1981              	.LVL126:
 395:armwave.c     **** 
 396:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1982              		.loc 1 396 5 view .LVU496
 1983 08d4 34109FE5 		ldr	r1, .L108+32	@,
 1984 08d8 34009FE5 		ldr	r0, .L108+36	@,
 1985              	@ armwave.c:397: }
 397:armwave.c     **** }
 1986              		.loc 1 397 1 is_stmt 0 view .LVU497
 1987 08dc 10D08DE2 		add	sp, sp, #16	@,,
 1988              		.cfi_def_cfa_offset 56
 1989              		@ sp needed	@
 1990 08e0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1991              		.cfi_restore 84
 1992              		.cfi_restore 85
 1993              		.cfi_restore 82
 1994              		.cfi_restore 83
 1995              		.cfi_restore 80
 1996              		.cfi_restore 81
 1997              		.cfi_def_cfa_offset 32
 1998 08e4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1999              		.cfi_restore 14
 2000              		.cfi_restore 10
 2001              		.cfi_restore 9
 2002              		.cfi_restore 8
 2003              		.cfi_restore 7
 2004              		.cfi_restore 6
 2005              		.cfi_restore 5
 2006              		.cfi_restore 4
 2007              		.cfi_def_cfa_offset 0
 2008              	.LVL127:
 2009              	@ armwave.c:396:     printf("armwave version: %s\n", ARMWAVE_VER);
 396:armwave.c     **** }
 2010              		.loc 1 396 5 view .LVU498
 2011 08e8 FEFFFFEA 		b	printf		@
 2012              	.LVL128:
 2013              	.L109:
 2014 08ec 0000A0E1 		.align	3
 2015              	.L108:
 2016 08f0 000000C0 		.word	-1073741824
 2017 08f4 CCCCEC3F 		.word	1072483532
 2018 08f8 00000000 		.word	0
 2019 08fc 00E06F40 		.word	1081073664
 2020 0900 00007F43 		.word	1132396544
 2021 0904 FFFFFFFF 		.word	gamma_table-1
 2022 0908 00000000 		.word	g_armwave_state
 2023 090c F609F406 		.word	116656630
 2024 0910 00000000 		.word	.LC0
 2025 0914 08000000 		.word	.LC1
 2026              		.cfi_endproc
 2027              	.LFE69:
 2029              		.align	2
 2030              		.global	armwave_test_fill_outbuf
 2031              		.syntax unified
 2032              		.arm
 2033              		.fpu vfp
 2035              	armwave_test_fill_outbuf:
 2036              	.LFB70:
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Render image to the local allocated buffer.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_test_fill_outbuf()
 403:armwave.c     **** {
 2037              		.loc 1 403 1 is_stmt 1 view -0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 0, uses_anonymous_args = 0
 2041              		@ link register save eliminated.
 404:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2042              		.loc 1 404 5 view .LVU500
 2043 0918 04309FE5 		ldr	r3, .L111	@ tmp111,
 2044 091c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2045 0920 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2046              	.LVL129:
 2047              	.L112:
 2048              		.align	2
 2049              	.L111:
 2050 0924 00000000 		.word	g_armwave_state
 2051              		.cfi_endproc
 2052              	.LFE70:
 2054              		.align	2
 2055              		.global	armwave_test_dump_buffer_to_ppm
 2056              		.syntax unified
 2057              		.arm
 2058              		.fpu vfp
 2060              	armwave_test_dump_buffer_to_ppm:
 2061              	.LVL130:
 2062              	.LFB71:
 405:armwave.c     **** }
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 411:armwave.c     **** {
 2063              		.loc 1 411 1 view -0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 2067              		@ link register save eliminated.
 412:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2068              		.loc 1 412 5 view .LVU502
 2069 0928 08309FE5 		ldr	r3, .L114	@ tmp112,
 2070 092c 0010A0E1 		mov	r1, r0	@, fn
 2071 0930 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2072              	.LVL131:
 2073              		.loc 1 412 5 is_stmt 0 view .LVU503
 2074 0934 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2075              	.LVL132:
 2076              	.L115:
 2077              		.loc 1 412 5 view .LVU504
 2078              		.align	2
 2079              	.L114:
 2080 0938 00000000 		.word	g_armwave_state
 2081              		.cfi_endproc
 2082              	.LFE71:
 2084              		.align	2
 2085              		.global	armwave_test_fill_gdkbuf
 2086              		.syntax unified
 2087              		.arm
 2088              		.fpu vfp
 2090              	armwave_test_fill_gdkbuf:
 2091              	.LVL133:
 2092              	.LFB72:
 413:armwave.c     **** }
 414:armwave.c     **** 
 415:armwave.c     **** /*
 416:armwave.c     ****  * Render GDK buffer with test funtionry.
 417:armwave.c     ****  */
 418:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 419:armwave.c     **** {
 2093              		.loc 1 419 1 is_stmt 1 view -0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 0
 2096              		@ frame_needed = 0, uses_anonymous_args = 0
 2097              		@ link register save eliminated.
 420:armwave.c     ****     //PyObject *mv;
 421:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 422:armwave.c     **** 
 423:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 424:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2098              		.loc 1 424 5 view .LVU506
 425:armwave.c     ****     
 426:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2099              		.loc 1 427 5 view .LVU507
 2100              	@ armwave.c:424:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 424:armwave.c     ****     
 2101              		.loc 1 424 11 is_stmt 0 view .LVU508
 2102 093c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2103              	@ armwave.c:427:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2104              		.loc 1 427 5 view .LVU509
 2105 0940 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2106              	.LVL134:
 2107              		.loc 1 427 5 view .LVU510
 2108 0944 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2109              	.LVL135:
 2110              		.loc 1 427 5 view .LVU511
 2111              		.cfi_endproc
 2112              	.LFE72:
 2114              		.align	2
 2115              		.global	armwave_test_buffer_alloc
 2116              		.syntax unified
 2117              		.arm
 2118              		.fpu vfp
 2120              	armwave_test_buffer_alloc:
 2121              	.LVL136:
 2122              	.LFB73:
 428:armwave.c     **** }
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 434:armwave.c     **** {
 2123              		.loc 1 434 1 is_stmt 1 view -0
 2124              		.cfi_startproc
 2125              		@ args = 0, pretend = 0, frame = 0
 2126              		@ frame_needed = 0, uses_anonymous_args = 0
 435:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2127              		.loc 1 435 5 view .LVU513
 2128              	@ armwave.c:434: {
 434:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2129              		.loc 1 434 1 is_stmt 0 view .LVU514
 2130 0948 70402DE9 		push	{r4, r5, r6, lr}	@
 2131              		.cfi_def_cfa_offset 16
 2132              		.cfi_offset 4, -16
 2133              		.cfi_offset 5, -12
 2134              		.cfi_offset 6, -8
 2135              		.cfi_offset 14, -4
 2136              	@ armwave.c:434: {
 434:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2137              		.loc 1 434 1 view .LVU515
 2138 094c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2139              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 2140              		.loc 1 435 23 view .LVU516
 2141 0950 44409FE5 		ldr	r4, .L124	@ tmp128,
 2142 0954 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2143              	.LVL137:
 2144              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 2145              		.loc 1 435 7 view .LVU517
 2146 0958 000050E3 		cmp	r0, #0	@ _1,
 2147 095c 0000000A 		beq	.L118		@,
 436:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2148              		.loc 1 436 9 is_stmt 1 view .LVU518
 2149 0960 FEFFFFEB 		bl	free		@
 2150              	.LVL138:
 2151              	.L118:
 437:armwave.c     ****     }
 438:armwave.c     **** 
 439:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 440:armwave.c     **** 
 441:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2152              		.loc 1 441 5 view .LVU519
 2153              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2154              		.loc 1 441 75 is_stmt 0 view .LVU520
 2155 0964 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2156 0968 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2157              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2158              		.loc 1 441 40 view .LVU521
 2159 096c 0610A0E1 		mov	r1, r6	@, nsets
 2160              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2161              		.loc 1 441 75 view .LVU522
 2162 0970 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2163              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2164              		.loc 1 441 40 view .LVU523
 2165 0974 0500A0E1 		mov	r0, r5	@, _4
 2166 0978 FEFFFFEB 		bl	calloc		@
 2167              	.LVL139:
 2168              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 442:armwave.c     **** 
 443:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2169              		.loc 1 443 7 view .LVU524
 2170 097c 000050E3 		cmp	r0, #0	@ tmp124,
 2171              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 2172              		.loc 1 441 38 view .LVU525
 2173 0980 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2174              		.loc 1 443 5 is_stmt 1 view .LVU526
 2175              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 2176              		.loc 1 443 7 is_stmt 0 view .LVU527
 2177 0984 7080BD18 		popne	{r4, r5, r6, pc}	@
 444:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2178              		.loc 1 444 9 is_stmt 1 view .LVU528
 2179 0988 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2180 098c 0620A0E1 		mov	r2, r6	@, nsets
 2181 0990 08009FE5 		ldr	r0, .L124+4	@,
 2182              	@ armwave.c:448: }
 445:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 446:armwave.c     ****         return;
 447:armwave.c     ****     }
 448:armwave.c     **** }
 2183              		.loc 1 448 1 is_stmt 0 view .LVU529
 2184 0994 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2185              		.cfi_restore 14
 2186              		.cfi_restore 6
 2187              		.cfi_restore 5
 2188              		.cfi_restore 4
 2189              		.cfi_def_cfa_offset 0
 2190              	.LVL140:
 2191              	@ armwave.c:444:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 444:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2192              		.loc 1 444 9 view .LVU530
 2193 0998 FEFFFFEA 		b	printf		@
 2194              	.LVL141:
 2195              	.L125:
 444:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2196              		.loc 1 444 9 view .LVU531
 2197              		.align	2
 2198              	.L124:
 2199 099c 00000000 		.word	g_armwave_state
 2200 09a0 8C020000 		.word	.LC19
 2201              		.cfi_endproc
 2202              	.LFE73:
 2204              		.align	2
 2205              		.global	armwave_fill_pixbuf_into_pybuffer
 2206              		.syntax unified
 2207              		.arm
 2208              		.fpu vfp
 2210              	armwave_fill_pixbuf_into_pybuffer:
 2211              	.LVL142:
 2212              	.LFB74:
 449:armwave.c     **** 
 450:armwave.c     **** /*
 451:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 452:armwave.c     ****  */
 453:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 454:armwave.c     **** {
 2213              		.loc 1 454 1 is_stmt 1 view -0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 48
 2216              		@ frame_needed = 0, uses_anonymous_args = 0
 455:armwave.c     ****     Py_buffer buffer;
 2217              		.loc 1 455 5 view .LVU533
 456:armwave.c     ****     int ret;
 2218              		.loc 1 456 5 view .LVU534
 457:armwave.c     **** 
 458:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 459:armwave.c     **** 
 460:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2219              		.loc 1 460 5 view .LVU535
 2220              	@ armwave.c:454: {
 454:armwave.c     ****     Py_buffer buffer;
 2221              		.loc 1 454 1 is_stmt 0 view .LVU536
 2222 09a4 04E02DE5 		str	lr, [sp, #-4]!	@,
 2223              		.cfi_def_cfa_offset 4
 2224              		.cfi_offset 14, -4
 2225 09a8 34D04DE2 		sub	sp, sp, #52	@,,
 2226              		.cfi_def_cfa_offset 56
 2227              	@ armwave.c:460:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2228              		.loc 1 460 11 view .LVU537
 2229 09ac 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2230 09b0 0120A0E3 		mov	r2, #1	@,
 2231 09b4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2232              	.LVL143:
 461:armwave.c     **** 
 462:armwave.c     ****     if(ret != 0) {
 2233              		.loc 1 462 5 is_stmt 1 view .LVU538
 2234              	@ armwave.c:462:     if(ret != 0) {
 2235              		.loc 1 462 7 is_stmt 0 view .LVU539
 2236 09b8 000050E3 		cmp	r0, #0	@,
 2237 09bc 0A00001A 		bne	.L130		@,
 463:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 464:armwave.c     ****         Py_RETURN_FALSE;
 465:armwave.c     ****     }
 466:armwave.c     **** 
 467:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 468:armwave.c     **** 
 469:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2238              		.loc 1 469 5 is_stmt 1 view .LVU540
 2239 09c0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2240              	.LVL144:
 2241              		.loc 1 469 5 is_stmt 0 view .LVU541
 2242 09c4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2243              	.LVL145:
 470:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 471:armwave.c     **** 
 472:armwave.c     ****     PyBuffer_Release(&buffer);
 2244              		.loc 1 472 5 is_stmt 1 view .LVU542
 2245 09c8 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2246 09cc FEFFFFEB 		bl	PyBuffer_Release		@
 2247              	.LVL146:
 473:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 474:armwave.c     **** 
 475:armwave.c     ****     Py_RETURN_TRUE;
 2248              		.loc 1 475 5 view .LVU543
 2249              	.LBB25:
 2250              	.LBI25:
 2251              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2252              		.loc 2 456 20 view .LVU544
 2253              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2254              		.loc 2 458 21 view .LVU545
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2255              		.loc 2 459 5 view .LVU546
 2256              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2257              		.loc 2 459 18 is_stmt 0 view .LVU547
 2258 09d0 38309FE5 		ldr	r3, .L131	@ tmp126,
 2259              	.LBE26:
 2260              	.LBE25:
 2261              	@ armwave.c:475:     Py_RETURN_TRUE;
 2262              		.loc 1 475 5 view .LVU548
 2263 09d4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2264              	.LBB28:
 2265              	.LBB27:
 2266              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2267              		.loc 2 459 18 view .LVU549
 2268 09d8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2269 09dc 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2270 09e0 002083E5 		str	r2, [r3]	@ tmp128,
 2271              	.LBE27:
 2272              	.LBE28:
 2273              	@ armwave.c:476: }
 476:armwave.c     **** }
 2274              		.loc 1 476 1 view .LVU550
 2275 09e4 34D08DE2 		add	sp, sp, #52	@,,
 2276              		.cfi_remember_state
 2277              		.cfi_def_cfa_offset 4
 2278              		@ sp needed	@
 2279 09e8 04F09DE4 		ldr	pc, [sp], #4	@
 2280              	.LVL147:
 2281              	.L130:
 2282              		.cfi_restore_state
 463:armwave.c     ****         Py_RETURN_FALSE;
 2283              		.loc 1 463 9 is_stmt 1 view .LVU551
 2284 09ec 20009FE5 		ldr	r0, .L131+4	@,
 2285              	.LVL148:
 463:armwave.c     ****         Py_RETURN_FALSE;
 2286              		.loc 1 463 9 is_stmt 0 view .LVU552
 2287 09f0 FEFFFFEB 		bl	puts		@
 2288              	.LVL149:
 464:armwave.c     ****     }
 2289              		.loc 1 464 9 is_stmt 1 view .LVU553
 2290              	.LBB29:
 2291              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2292              		.loc 2 456 20 view .LVU554
 2293              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2294              		.loc 2 458 21 view .LVU555
 2295              		.loc 2 459 5 view .LVU556
 2296              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2297              		.loc 2 459 18 is_stmt 0 view .LVU557
 2298 09f4 1C309FE5 		ldr	r3, .L131+8	@ tmp120,
 2299              	.LBE30:
 2300              	.LBE29:
 2301              	@ armwave.c:464:         Py_RETURN_FALSE;
 464:armwave.c     ****     }
 2302              		.loc 1 464 9 view .LVU558
 2303 09f8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2304              	.LBB32:
 2305              	.LBB31:
 2306              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2307              		.loc 2 459 18 view .LVU559
 2308 09fc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2309 0a00 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2310 0a04 002083E5 		str	r2, [r3]	@ tmp122,
 2311              	.LBE31:
 2312              	.LBE32:
 2313              	@ armwave.c:476: }
 2314              		.loc 1 476 1 view .LVU560
 2315 0a08 34D08DE2 		add	sp, sp, #52	@,,
 2316              		.cfi_def_cfa_offset 4
 2317              		@ sp needed	@
 2318 0a0c 04F09DE4 		ldr	pc, [sp], #4	@
 2319              	.L132:
 2320              		.align	2
 2321              	.L131:
 2322 0a10 00000000 		.word	_Py_TrueStruct
 2323 0a14 E0020000 		.word	.LC20
 2324 0a18 00000000 		.word	_Py_FalseStruct
 2325              		.cfi_endproc
 2326              	.LFE74:
 2328              		.align	2
 2329              		.global	armwave_test_create_am_sine
 2330              		.syntax unified
 2331              		.arm
 2332              		.fpu vfp
 2334              	armwave_test_create_am_sine:
 2335              	.LVL150:
 2336              	.LFB75:
 477:armwave.c     **** 
 478:armwave.c     **** /*
 479:armwave.c     ****  * Make a test AM waveform for render tests.
 480:armwave.c     ****  *
 481:armwave.c     ****  * @param   mod                     modulation depth
 482:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 483:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 484:armwave.c     ****  */
 485:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 486:armwave.c     **** {
 2337              		.loc 1 486 1 is_stmt 1 view -0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 8
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 487:armwave.c     ****     float v, noise, xnoise, mod_val;
 2341              		.loc 1 487 5 view .LVU562
 488:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2342              		.loc 1 488 5 view .LVU563
 2343              	@ armwave.c:486: {
 486:armwave.c     ****     float v, noise, xnoise, mod_val;
 2344              		.loc 1 486 1 is_stmt 0 view .LVU564
 2345 0a1c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2346              		.cfi_def_cfa_offset 32
 2347              		.cfi_offset 4, -32
 2348              		.cfi_offset 5, -28
 2349              		.cfi_offset 6, -24
 2350              		.cfi_offset 7, -20
 2351              		.cfi_offset 8, -16
 2352              		.cfi_offset 9, -12
 2353              		.cfi_offset 10, -8
 2354              		.cfi_offset 14, -4
 2355              	@ armwave.c:488:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2356              		.loc 1 488 38 view .LVU565
 2357 0a20 7A7A9FED 		vldr.32	s14, .L164	@ tmp180,
 2358              	@ armwave.c:488:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2359              		.loc 1 488 55 view .LVU566
 2360 0a24 00529FE5 		ldr	r5, .L164+28	@ tmp250,
 2361              	@ armwave.c:486: {
 486:armwave.c     ****     float v, noise, xnoise, mod_val;
 2362              		.loc 1 486 1 view .LVU567
 2363 0a28 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2364              		.cfi_def_cfa_offset 80
 2365              		.cfi_offset 80, -80
 2366              		.cfi_offset 81, -76
 2367              		.cfi_offset 82, -72
 2368              		.cfi_offset 83, -68
 2369              		.cfi_offset 84, -64
 2370              		.cfi_offset 85, -60
 2371              		.cfi_offset 86, -56
 2372              		.cfi_offset 87, -52
 2373              		.cfi_offset 88, -48
 2374              		.cfi_offset 89, -44
 2375              		.cfi_offset 90, -40
 2376              		.cfi_offset 91, -36
 2377 0a2c 0090A0E1 		mov	r9, r0	@ sets, sets
 2378              	@ armwave.c:488:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2379              		.loc 1 488 38 view .LVU568
 2380 0a30 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2381              	@ armwave.c:492:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 489:armwave.c     ****     int s, set_offset = 0;
 490:armwave.c     ****     int w, x;
 491:armwave.c     **** 
 492:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2382              		.loc 1 492 70 view .LVU569
 2383 0a34 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2384 0a38 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2385              	.LBB35:
 2386              	.LBB36:
 2387              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2388              		.loc 1 435 23 view .LVU570
 2389 0a3c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2390              	.LVL151:
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2391              		.loc 1 435 23 view .LVU571
 2392              	.LBE36:
 2393              	.LBE35:
 2394              	@ armwave.c:488:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 488:armwave.c     ****     int s, set_offset = 0;
 2395              		.loc 1 488 38 view .LVU572
 2396 0a40 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2397              	@ armwave.c:492:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2398              		.loc 1 492 70 view .LVU573
 2399 0a44 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2400              	@ armwave.c:486: {
 486:armwave.c     ****     float v, noise, xnoise, mod_val;
 2401              		.loc 1 486 1 view .LVU574
 2402 0a48 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2403              	.LBB40:
 2404              	.LBB37:
 2405              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2406              		.loc 1 435 7 view .LVU575
 2407 0a4c 000050E3 		cmp	r0, #0	@ _82,
 2408              	.LBE37:
 2409              	.LBE40:
 2410              	@ armwave.c:486: {
 486:armwave.c     ****     float v, noise, xnoise, mod_val;
 2411              		.loc 1 486 1 view .LVU576
 2412 0a50 08D04DE2 		sub	sp, sp, #8	@,,
 2413              		.cfi_def_cfa_offset 88
 2414              	@ armwave.c:493:     g_armwave_state.test_wave_buffer_nsets = sets;
 493:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2415              		.loc 1 493 44 view .LVU577
 2416 0a54 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2417              	@ armwave.c:492:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 492:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2418              		.loc 1 492 45 view .LVU578
 2419 0a58 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2420              	@ armwave.c:488:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 488:armwave.c     ****     int s, set_offset = 0;
 2421              		.loc 1 488 38 view .LVU579
 2422 0a5c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2423              	@ armwave.c:488:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 488:armwave.c     ****     int s, set_offset = 0;
 2424              		.loc 1 488 11 view .LVU580
 2425 0a60 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2426              	.LVL152:
 489:armwave.c     ****     int w, x;
 2427              		.loc 1 489 5 is_stmt 1 view .LVU581
 490:armwave.c     **** 
 2428              		.loc 1 490 5 view .LVU582
 492:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2429              		.loc 1 492 5 view .LVU583
 2430              		.loc 1 493 5 view .LVU584
 494:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2431              		.loc 1 494 5 view .LVU585
 2432              	.LBB41:
 2433              	.LBI35:
 433:armwave.c     **** {
 2434              		.loc 1 433 6 view .LVU586
 2435              	.LBB38:
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2436              		.loc 1 435 5 view .LVU587
 2437              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2438              		.loc 1 435 7 is_stmt 0 view .LVU588
 2439 0a64 0000000A 		beq	.L134		@,
 436:armwave.c     ****     }
 2440              		.loc 1 436 9 is_stmt 1 view .LVU589
 2441 0a68 FEFFFFEB 		bl	free		@
 2442              	.LVL153:
 2443              	.L134:
 441:armwave.c     **** 
 2444              		.loc 1 441 5 view .LVU590
 2445              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 2446              		.loc 1 441 75 is_stmt 0 view .LVU591
 2447 0a6c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2448 0a70 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2449              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 2450              		.loc 1 441 40 view .LVU592
 2451 0a74 0910A0E1 		mov	r1, r9	@, sets
 2452              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 2453              		.loc 1 441 75 view .LVU593
 2454 0a78 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2455              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 2456              		.loc 1 441 40 view .LVU594
 2457 0a7c 0400A0E1 		mov	r0, r4	@, _85
 2458 0a80 FEFFFFEB 		bl	calloc		@
 2459              	.LVL154:
 2460              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2461              		.loc 1 443 7 view .LVU595
 2462 0a84 000050E3 		cmp	r0, #0	@ tmp191,
 2463              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 2464              		.loc 1 441 38 view .LVU596
 2465 0a88 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2466              		.loc 1 443 5 is_stmt 1 view .LVU597
 2467              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2468              		.loc 1 443 7 is_stmt 0 view .LVU598
 2469 0a8c 5A00000A 		beq	.L163		@,
 2470              	.L135:
 2471              	.LVL155:
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2472              		.loc 1 443 7 view .LVU599
 2473              	.LBE38:
 2474              	.LBE41:
 2475              	@ armwave.c:496:     for(s = 0; s < sets; s++) {
 495:armwave.c     **** 
 496:armwave.c     ****     for(s = 0; s < sets; s++) {
 2476              		.loc 1 496 5 discriminator 1 view .LVU600
 2477 0a90 000059E3 		cmp	r9, #0	@ sets,
 2478 0a94 550000DA 		ble	.L133		@,
 2479              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 497:armwave.c     ****         printf("Calculating test set %d\n", s);
 498:armwave.c     ****     
 499:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 500:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 501:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 502:armwave.c     **** 
 503:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 504:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 505:armwave.c     ****                 noise *= noise;
 506:armwave.c     ****                 noise *= noise;
 507:armwave.c     ****                 noise *= noise;
 508:armwave.c     **** 
 509:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 510:armwave.c     ****                     noise = -noise;
 511:armwave.c     **** 
 512:armwave.c     ****                 noise += 1.0f;
 513:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 514:armwave.c     **** 
 515:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2480              		.loc 1 515 45 view .LVU601
 2481 0a98 5C8A9FED 		vldr.32	s16, .L164	@ tmp258,
 2482              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 516:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 517:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 518:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2483              		.loc 1 518 104 view .LVU602
 2484 0a9c 5CCA9FED 		vldr.32	s24, .L164+4	@ tmp259,
 2485              	@ armwave.c:496:     for(s = 0; s < sets; s++) {
 496:armwave.c     ****         printf("Calculating test set %d\n", s);
 2486              		.loc 1 496 5 view .LVU603
 2487 0aa0 0070A0E3 		mov	r7, #0	@ set_offset,
 2488              	@ armwave.c:497:         printf("Calculating test set %d\n", s);
 497:armwave.c     ****         printf("Calculating test set %d\n", s);
 2489              		.loc 1 497 9 view .LVU604
 2490 0aa4 84A19FE5 		ldr	r10, .L164+32	@ tmp257,
 2491              	@ armwave.c:496:     for(s = 0; s < sets; s++) {
 496:armwave.c     ****         printf("Calculating test set %d\n", s);
 2492              		.loc 1 496 5 view .LVU605
 2493 0aa8 0780A0E1 		mov	r8, r7	@ s, set_offset
 2494              	.LVL156:
 2495              	.L136:
 497:armwave.c     ****         printf("Calculating test set %d\n", s);
 2496              		.loc 1 497 9 is_stmt 1 view .LVU606
 2497 0aac 0810A0E1 		mov	r1, r8	@, s
 2498 0ab0 0A00A0E1 		mov	r0, r10	@, tmp257
 2499 0ab4 FEFFFFEB 		bl	printf		@
 2500              	.LVL157:
 499:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2501              		.loc 1 499 9 view .LVU607
 2502              	@ armwave.c:499:         for(w = 0; w < g_armwave_state.waves; w++) {
 499:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2503              		.loc 1 499 39 is_stmt 0 view .LVU608
 2504 0ab8 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2505              	@ armwave.c:499:         for(w = 0; w < g_armwave_state.waves; w++) {
 499:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2506              		.loc 1 499 9 view .LVU609
 2507 0abc 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2508 0ac0 450000DA 		ble	.L137		@,
 2509              	@ armwave.c:501:             mod_val = 0.5f + (_1_waves_mod * w);
 501:armwave.c     **** 
 2510              		.loc 1 501 21 view .LVU610
 2511 0ac4 53CADFED 		vldr.32	s25, .L164+8	@ tmp200,
 2512              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2513              		.loc 1 515 33 view .LVU611
 2514 0ac8 53BA9FED 		vldr.32	s22, .L164+12	@ tmp253,
 2515              	@ armwave.c:513:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 513:armwave.c     **** 
 2516              		.loc 1 513 24 view .LVU612
 2517 0acc 53AADFED 		vldr.32	s21, .L164+16	@ tmp254,
 2518 0ad0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2519              	@ armwave.c:499:         for(w = 0; w < g_armwave_state.waves; w++) {
 499:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2520              		.loc 1 499 15 view .LVU613
 2521 0ad4 0060A0E3 		mov	r6, #0	@ w,
 2522              	.LVL158:
 2523              	.L144:
 501:armwave.c     **** 
 2524              		.loc 1 501 13 is_stmt 1 view .LVU614
 2525              	@ armwave.c:501:             mod_val = 0.5f + (_1_waves_mod * w);
 501:armwave.c     **** 
 2526              		.loc 1 501 21 is_stmt 0 view .LVU615
 2527 0ad8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2528 0adc 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2529              	@ armwave.c:503:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2530              		.loc 1 503 13 view .LVU616
 2531 0ae0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2532              	@ armwave.c:501:             mod_val = 0.5f + (_1_waves_mod * w);
 501:armwave.c     **** 
 2533              		.loc 1 501 21 view .LVU617
 2534 0ae4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2535 0ae8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2536              	.LVL159:
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2537              		.loc 1 503 13 is_stmt 1 view .LVU618
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2538              		.loc 1 503 13 is_stmt 0 view .LVU619
 2539 0aec 370000DA 		ble	.L138		@,
 2540 0af0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2541              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2542              		.loc 1 518 113 view .LVU620
 2543 0af4 4AAA9FED 		vldr.32	s20, .L164+20	@ tmp229,
 2544 0af8 4A8ADFED 		vldr.32	s17, .L164+24	@ tmp230,
 2545              	@ armwave.c:503:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2546              		.loc 1 503 19 view .LVU621
 2547 0afc 0040A0E3 		mov	r4, #0	@ x,
 2548              	.LVL160:
 2549              	.L143:
 504:armwave.c     ****                 noise *= noise;
 2550              		.loc 1 504 17 is_stmt 1 view .LVU622
 2551              	@ armwave.c:504:                 noise  = ((rand() & 0xffff) * noise_fraction);
 504:armwave.c     ****                 noise *= noise;
 2552              		.loc 1 504 28 is_stmt 0 view .LVU623
 2553 0b00 FEFFFFEB 		bl	rand		@
 2554              	.LVL161:
 2555              	@ armwave.c:504:                 noise  = ((rand() & 0xffff) * noise_fraction);
 504:armwave.c     ****                 noise *= noise;
 2556              		.loc 1 504 35 view .LVU624
 2557 0b04 7000FFE6 		uxth	r0, r0	@ tmp201,
 2558              	@ armwave.c:504:                 noise  = ((rand() & 0xffff) * noise_fraction);
 504:armwave.c     ****                 noise *= noise;
 2559              		.loc 1 504 45 view .LVU625
 2560 0b08 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2561 0b0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2562              	@ armwave.c:504:                 noise  = ((rand() & 0xffff) * noise_fraction);
 504:armwave.c     ****                 noise *= noise;
 2563              		.loc 1 504 24 view .LVU626
 2564 0b10 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2565              	.LVL162:
 505:armwave.c     ****                 noise *= noise;
 2566              		.loc 1 505 17 is_stmt 1 view .LVU627
 2567              	@ armwave.c:505:                 noise *= noise;
 505:armwave.c     ****                 noise *= noise;
 2568              		.loc 1 505 23 is_stmt 0 view .LVU628
 2569 0b14 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2570              	.LVL163:
 506:armwave.c     ****                 noise *= noise;
 2571              		.loc 1 506 17 is_stmt 1 view .LVU629
 2572              	@ armwave.c:506:                 noise *= noise;
 506:armwave.c     ****                 noise *= noise;
 2573              		.loc 1 506 23 is_stmt 0 view .LVU630
 2574 0b18 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2575              	.LVL164:
 507:armwave.c     **** 
 2576              		.loc 1 507 17 is_stmt 1 view .LVU631
 2577              	@ armwave.c:507:                 noise *= noise;
 507:armwave.c     **** 
 2578              		.loc 1 507 23 is_stmt 0 view .LVU632
 2579 0b1c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2580              	.LVL165:
 509:armwave.c     ****                     noise = -noise;
 2581              		.loc 1 509 17 is_stmt 1 view .LVU633
 2582              	@ armwave.c:509:                 if((rand() & 0xffff) > 0x7fff)
 509:armwave.c     ****                     noise = -noise;
 2583              		.loc 1 509 21 is_stmt 0 view .LVU634
 2584 0b20 FEFFFFEB 		bl	rand		@
 2585              	.LVL166:
 510:armwave.c     **** 
 2586              		.loc 1 510 21 is_stmt 1 view .LVU635
 2587              	@ armwave.c:509:                 if((rand() & 0xffff) > 0x7fff)
 509:armwave.c     ****                     noise = -noise;
 2588              		.loc 1 509 19 is_stmt 0 view .LVU636
 2589 0b24 020910E3 		tst	r0, #32768	@,
 2590              	@ armwave.c:510:                     noise = -noise;
 510:armwave.c     **** 
 2591              		.loc 1 510 27 view .LVU637
 2592 0b28 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2593              	.LVL167:
 512:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2594              		.loc 1 512 17 is_stmt 1 view .LVU638
 513:armwave.c     **** 
 2595              		.loc 1 513 17 view .LVU639
 2596              	@ armwave.c:513:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 513:armwave.c     **** 
 2597              		.loc 1 513 27 is_stmt 0 view .LVU640
 2598 0b2c FEFFFFEB 		bl	rand		@
 2599              	.LVL168:
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2600              		.loc 1 515 17 is_stmt 1 view .LVU641
 2601              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2602              		.loc 1 515 45 is_stmt 0 view .LVU642
 2603 0b30 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2604              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2605              		.loc 1 515 33 view .LVU643
 2606 0b34 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2607              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2608              		.loc 1 515 45 view .LVU644
 2609 0b38 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2610              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2611              		.loc 1 515 33 view .LVU645
 2612 0b3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2613              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2614              		.loc 1 515 45 view .LVU646
 2615 0b40 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2616              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2617              		.loc 1 515 33 view .LVU647
 2618 0b44 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2619              	@ armwave.c:513:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 513:armwave.c     **** 
 2620              		.loc 1 513 34 view .LVU648
 2621 0b48 7000FFE6 		uxth	r0, r0	@ tmp214,
 2622              	.LVL169:
 2623              	@ armwave.c:513:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 513:armwave.c     **** 
 2624              		.loc 1 513 44 view .LVU649
 2625 0b4c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2626 0b50 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2627              	@ armwave.c:513:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 513:armwave.c     **** 
 2628              		.loc 1 513 24 view .LVU650
 2629 0b54 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2630              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2631              		.loc 1 515 77 view .LVU651
 2632 0b58 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2633              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2634              		.loc 1 515 22 view .LVU652
 2635 0b5c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2636 0b60 FEFFFFEB 		bl	sin		@
 2637              	.LVL170:
 2638              		.loc 1 518 17 is_stmt 1 view .LVU653
 2639              	@ armwave.c:512:                 noise += 1.0f;
 512:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2640              		.loc 1 512 23 is_stmt 0 view .LVU654
 2641 0b64 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2642              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2643              		.loc 1 518 104 view .LVU655
 2644 0b68 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 2645              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2646              		.loc 1 515 98 view .LVU656
 2647 0b6c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2648              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2649              		.loc 1 515 87 view .LVU657
 2650 0b70 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2651              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2652              		.loc 1 515 98 view .LVU658
 2653 0b74 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2654              	@ armwave.c:515:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 515:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2655              		.loc 1 515 19 view .LVU659
 2656 0b78 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2657              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2658              		.loc 1 518 113 view .LVU660
 2659 0b7c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2660 0b80 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2661 0b84 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2662 0b88 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2663 0b8c 050000DA 		ble	.L140		@,
 2664              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2665              		.loc 1 518 104 discriminator 1 view .LVU661
 2666 0b90 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2667 0b94 FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 2668 0b98 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2669 0b9c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2670 0ba0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2671 0ba4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 2672              	.L140:
 2673              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2674              		.loc 1 518 57 discriminator 12 view .LVU662
 2675 0ba8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2676              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2677              		.loc 1 518 102 discriminator 12 view .LVU663
 2678 0bac 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2679 0bb0 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2680 0bb4 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2681              	@ armwave.c:503:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2682              		.loc 1 503 58 discriminator 12 view .LVU664
 2683 0bb8 014084E2 		add	r4, r4, #1	@ x, x,
 2684              	.LVL171:
 2685              	@ armwave.c:518:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2686              		.loc 1 518 102 discriminator 12 view .LVU665
 2687 0bbc 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 2688              	@ armwave.c:503:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2689              		.loc 1 503 43 discriminator 12 view .LVU666
 2690 0bc0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2691              	@ armwave.c:503:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 503:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2692              		.loc 1 503 13 discriminator 12 view .LVU667
 2693 0bc4 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2694 0bc8 CCFFFFCA 		bgt	.L143		@,
 2695 0bcc 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2696              	.LVL172:
 2697              	.L138:
 2698              	@ armwave.c:499:         for(w = 0; w < g_armwave_state.waves; w++) {
 499:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2699              		.loc 1 499 48 discriminator 2 view .LVU668
 2700 0bd0 016086E2 		add	r6, r6, #1	@ w, w,
 2701              	.LVL173:
 2702              	@ armwave.c:499:         for(w = 0; w < g_armwave_state.waves; w++) {
 499:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2703              		.loc 1 499 9 discriminator 2 view .LVU669
 2704 0bd4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2705 0bd8 BEFFFFBA 		blt	.L144		@,
 2706              	.LVL174:
 2707              	.L137:
 519:armwave.c     ****             }
 520:armwave.c     ****         }
 521:armwave.c     **** 
 522:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2708              		.loc 1 522 9 is_stmt 1 discriminator 2 view .LVU670
 2709              	@ armwave.c:522:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2710              		.loc 1 522 46 is_stmt 0 discriminator 2 view .LVU671
 2711 0bdc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2712              	@ armwave.c:496:     for(s = 0; s < sets; s++) {
 496:armwave.c     ****         printf("Calculating test set %d\n", s);
 2713              		.loc 1 496 27 discriminator 2 view .LVU672
 2714 0be0 018088E2 		add	r8, r8, #1	@ s, s,
 2715              	.LVL175:
 2716              	@ armwave.c:496:     for(s = 0; s < sets; s++) {
 496:armwave.c     ****         printf("Calculating test set %d\n", s);
 2717              		.loc 1 496 5 discriminator 2 view .LVU673
 2718 0be4 080059E1 		cmp	r9, r8	@ sets, s
 2719              	@ armwave.c:522:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2720              		.loc 1 522 20 discriminator 2 view .LVU674
 2721 0be8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2722              	.LVL176:
 2723              	@ armwave.c:496:     for(s = 0; s < sets; s++) {
 496:armwave.c     ****         printf("Calculating test set %d\n", s);
 2724              		.loc 1 496 5 discriminator 2 view .LVU675
 2725 0bec AEFFFF1A 		bne	.L136		@,
 2726              	.LVL177:
 2727              	.L133:
 2728              	@ armwave.c:524: }
 523:armwave.c     ****     }
 524:armwave.c     **** }
 2729              		.loc 1 524 1 view .LVU676
 2730 0bf0 08D08DE2 		add	sp, sp, #8	@,,
 2731              		.cfi_remember_state
 2732              		.cfi_def_cfa_offset 80
 2733              		@ sp needed	@
 2734 0bf4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2735              		.cfi_restore 90
 2736              		.cfi_restore 91
 2737              		.cfi_restore 88
 2738              		.cfi_restore 89
 2739              		.cfi_restore 86
 2740              		.cfi_restore 87
 2741              		.cfi_restore 84
 2742              		.cfi_restore 85
 2743              		.cfi_restore 82
 2744              		.cfi_restore 83
 2745              		.cfi_restore 80
 2746              		.cfi_restore 81
 2747              		.cfi_def_cfa_offset 32
 2748              	.LVL178:
 2749              		.loc 1 524 1 view .LVU677
 2750 0bf8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2751              	.LVL179:
 2752              	.L163:
 2753              		.cfi_restore_state
 2754              	.LBB42:
 2755              	.LBB39:
 444:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2756              		.loc 1 444 9 is_stmt 1 view .LVU678
 2757 0bfc 940901E0 		mul	r1, r4, r9	@, _85, sets
 2758 0c00 0920A0E1 		mov	r2, r9	@, sets
 2759 0c04 28009FE5 		ldr	r0, .L164+36	@,
 2760 0c08 FEFFFFEB 		bl	printf		@
 2761              	.LVL180:
 446:armwave.c     ****     }
 2762              		.loc 1 446 9 view .LVU679
 2763 0c0c 9FFFFFEA 		b	.L135		@
 2764              	.L165:
 2765              		.align	2
 2766              	.L164:
 2767 0c10 0000803F 		.word	1065353216
 2768 0c14 00007F43 		.word	1132396544
 2769 0c18 0000003F 		.word	1056964608
 2770 0c1c C3F5C840 		.word	1086911939
 2771 0c20 38FFC74A 		.word	1254620984
 2772 0c24 0000FE42 		.word	1123942400
 2773 0c28 00000043 		.word	1124073472
 2774 0c2c 00000000 		.word	g_armwave_state
 2775 0c30 34030000 		.word	.LC21
 2776 0c34 8C020000 		.word	.LC19
 2777              	.LBE39:
 2778              	.LBE42:
 2779              		.cfi_endproc
 2780              	.LFE75:
 2782              		.align	2
 2783              		.global	armwave_cleanup
 2784              		.syntax unified
 2785              		.arm
 2786              		.fpu vfp
 2788              	armwave_cleanup:
 2789              	.LFB76:
 525:armwave.c     **** 
 526:armwave.c     **** /*
 527:armwave.c     ****  * Make a test square waveform.
 528:armwave.c     ****  *
 529:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 530:armwave.c     ****  */
 531:armwave.c     **** #if 0
 532:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 533:armwave.c     **** {
 534:armwave.c     ****     uint8_t v;
 535:armwave.c     ****     float noise, xnoise;
 536:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 537:armwave.c     ****     int w, x;
 538:armwave.c     **** 
 539:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 541:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 542:armwave.c     ****             noise *= noise;
 543:armwave.c     ****             noise *= noise;
 544:armwave.c     ****             noise *= noise;
 545:armwave.c     **** 
 546:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 547:armwave.c     ****                 noise = -noise;
 548:armwave.c     **** 
 549:armwave.c     ****             //noise += 1.0f;
 550:armwave.c     **** 
 551:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 552:armwave.c     ****                 new_level = 0.2f;
 553:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 554:armwave.c     ****                 new_level = 0.8f;
 555:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 556:armwave.c     ****                 new_level = 0.2f;
 557:armwave.c     ****             } else {
 558:armwave.c     ****                 new_level = 0.8f;
 559:armwave.c     ****             }
 560:armwave.c     **** 
 561:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 562:armwave.c     **** 
 563:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 564:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 565:armwave.c     ****         }
 566:armwave.c     ****     }
 567:armwave.c     **** }
 568:armwave.c     **** #endif
 569:armwave.c     **** 
 570:armwave.c     **** /*
 571:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 572:armwave.c     ****  */
 573:armwave.c     **** void armwave_cleanup()
 574:armwave.c     **** {
 2790              		.loc 1 574 1 view -0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 0
 2793              		@ frame_needed = 0, uses_anonymous_args = 0
 575:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2794              		.loc 1 575 5 view .LVU681
 2795              	@ armwave.c:574: {
 574:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2796              		.loc 1 574 1 is_stmt 0 view .LVU682
 2797 0c38 10402DE9 		push	{r4, lr}	@
 2798              		.cfi_def_cfa_offset 8
 2799              		.cfi_offset 4, -8
 2800              		.cfi_offset 14, -4
 2801              	@ armwave.c:575:     free(g_armwave_state.out_pixbuf);
 2802              		.loc 1 575 25 view .LVU683
 2803 0c3c 34409FE5 		ldr	r4, .L168	@ tmp114,
 2804              	@ armwave.c:575:     free(g_armwave_state.out_pixbuf);
 2805              		.loc 1 575 5 view .LVU684
 2806 0c40 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2807 0c44 FEFFFFEB 		bl	free		@
 2808              	.LVL181:
 576:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2809              		.loc 1 576 5 is_stmt 1 view .LVU685
 2810 0c48 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2811 0c4c FEFFFFEB 		bl	free		@
 2812              	.LVL182:
 577:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2813              		.loc 1 577 5 view .LVU686
 2814 0c50 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2815 0c54 FEFFFFEB 		bl	free		@
 2816              	.LVL183:
 578:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2817              		.loc 1 578 5 view .LVU687
 2818 0c58 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2819 0c5c FEFFFFEB 		bl	free		@
 2820              	.LVL184:
 579:armwave.c     **** 
 580:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2821              		.loc 1 580 5 view .LVU688
 2822              	@ armwave.c:580:     g_armwave_state.out_pixbuf = NULL;
 2823              		.loc 1 580 32 is_stmt 0 view .LVU689
 2824 0c60 0030A0E3 		mov	r3, #0	@ tmp123,
 2825 0c64 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 581:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2826              		.loc 1 581 5 is_stmt 1 view .LVU690
 2827              	@ armwave.c:581:     g_armwave_state.ch1_buffer = NULL;
 2828              		.loc 1 581 32 is_stmt 0 view .LVU691
 2829 0c68 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 582:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2830              		.loc 1 582 5 is_stmt 1 view .LVU692
 2831              	@ armwave.c:582:     g_armwave_state.xcoord_to_xpixel = NULL;
 2832              		.loc 1 582 38 is_stmt 0 view .LVU693
 2833 0c6c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 583:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2834              		.loc 1 583 5 is_stmt 1 view .LVU694
 2835              	@ armwave.c:583:     g_armwave_state.test_wave_buffer = NULL;
 2836              		.loc 1 583 38 is_stmt 0 view .LVU695
 2837 0c70 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2838              	@ armwave.c:584: }
 584:armwave.c     **** }
 2839              		.loc 1 584 1 view .LVU696
 2840 0c74 1080BDE8 		pop	{r4, pc}	@
 2841              	.L169:
 2842              		.align	2
 2843              	.L168:
 2844 0c78 00000000 		.word	g_armwave_state
 2845              		.cfi_endproc
 2846              	.LFE76:
 2848              		.comm	gamma_table,256,4
 2849              		.comm	g_armwave_state,136,4
 2850              		.section	.rodata
 2851              		.align	2
 2852              		.set	.LANCHOR0,. + 0
 2855              	__PRETTY_FUNCTION__.17124:
 2856 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2856      6176655F 
 2856      73657475 
 2856      705F7265 
 2856      6E646572 
 2857 0015 000000   		.space	3
 2860              	__PRETTY_FUNCTION__.17128:
 2861 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2861      6176655F 
 2861      7365745F 
 2861      77617665 
 2861      5F706F69 
 2862 0031 000000   		.space	3
 2865              	__PRETTY_FUNCTION__.17135:
 2866 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2866      6176655F 
 2866      7365745F 
 2866      77617665 
 2866      5F706F69 
 2867              		.section	.rodata.str1.4,"aMS",%progbits,1
 2868              		.align	2
 2869              	.LC0:
 2870 0000 76302E30 		.ascii	"v0.0.1\000"
 2870      2E3100
 2871 0007 00       		.space	1
 2872              	.LC1:
 2873 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2873      61766520 
 2873      76657273 
 2873      696F6E3A 
 2873      2025730A 
 2874 001d 000000   		.space	3
 2875              	.LC2:
 2876 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2876      78253038 
 2876      7820623D 
 2876      30782530 
 2876      38782063 
 2877 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2877      25642073 
 2877      63616C65 
 2877      3D256420 
 2877      62697464 
 2878 0077 00       		.space	1
 2879              	.LC3:
 2880 0078 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2880      6176655F 
 2880      67656E65 
 2880      72617465 
 2880      3A20736C 
 2881 00a9 00       		.ascii	"\000"
 2882 00aa 0000     		.space	2
 2883              	.LC4:
 2884 00ac 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d) la"
 2884      6176655F 
 2884      67656E65 
 2884      72617465 
 2884      3A20736C 
 2885 00df 73740A00 		.ascii	"st\012\000"
 2886 00e3 00       		.space	1
 2887              	.LC5:
 2888 00e4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2888      20653D25 
 2888      6420773D 
 2888      25642077 
 2888      733D2564 
 2889              	.LC6:
 2890 0110 61726D77 		.ascii	"armwave.c\000"
 2890      6176652E 
 2890      6300
 2891 011a 0000     		.space	2
 2892              	.LC7:
 2893 011c 73746172 		.ascii	"start_point < end_point\000"
 2893      745F706F 
 2893      696E7420 
 2893      3C20656E 
 2893      645F706F 
 2894              	.LC8:
 2895 0134 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2895      7566665F 
 2895      73697A65 
 2895      3D25642C 
 2895      20636D70 
 2896 0167 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2896      5F776964 
 2896      74683D25 
 2896      642C2077 
 2896      6176655F 
 2897 0191 000000   		.space	3
 2898              	.LC9:
 2899 0194 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2899      6F632066 
 2899      61696C75 
 2899      72652061 
 2899      6C6C6F63 
 2900 01c7 2E636831 		.ascii	".ch1_buffer)\012\000"
 2900      5F627566 
 2900      66657229 
 2900      0A00
 2901 01d5 000000   		.space	3
 2902              	.LC10:
 2903 01d8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2903      3A203078 
 2903      25303878 
 2903      20307825 
 2903      30387820 
 2904              	.LC11:
 2905 01fc 77617665 		.ascii	"wave_buffer != NULL\000"
 2905      5F627566 
 2905      66657220 
 2905      213D204E 
 2905      554C4C00 
 2906              	.LC12:
 2907 0210 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2907      6176655F 
 2907      7365745F 
 2907      77617665 
 2907      5F706F69 
 2908 0243 78636565 		.ascii	"xceeded\000"
 2908      64656400 
 2909 024b 00       		.space	1
 2910              	.LC13:
 2911 024c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2911      5F627566 
 2911      6665725F 
 2911      70747220 
 2911      213D2030 
 2912 0261 000000   		.space	3
 2913              	.LC14:
 2914 0264 776200   		.ascii	"wb\000"
 2915 0267 00       		.space	1
 2916              	.LC15:
 2917 0268 50330A00 		.ascii	"P3\012\000"
 2918              	.LC16:
 2919 026c 25642025 		.ascii	"%d %d\012\000"
 2919      640A00
 2920 0273 00       		.space	1
 2921              	.LC17:
 2922 0274 3235350A 		.ascii	"255\012\000"
 2922      00
 2923 0279 000000   		.space	3
 2924              	.LC18:
 2925 027c 25336420 		.ascii	"%3d %3d %3d\012\000"
 2925      25336420 
 2925      2533640A 
 2925      00
 2926 0289 000000   		.space	3
 2927              	.LC19:
 2928 028c 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2928      6176655F 
 2928      74657374 
 2928      5F627566 
 2928      6665725F 
 2929 02bf 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2929      20627566 
 2929      66657220 
 2929      28256420 
 2929      62797465 
 2930              	.LC20:
 2931 02e0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2931      6176655F 
 2931      66696C6C 
 2931      5F706978 
 2931      6275665F 
 2932 0313 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2932      20666169 
 2932      6C65642C 
 2932      20726574 
 2932      75726E69 
 2933 0332 0000     		.space	2
 2934              	.LC21:
 2935 0334 43616C63 		.ascii	"Calculating test set %d\012\000"
 2935      756C6174 
 2935      696E6720 
 2935      74657374 
 2935      20736574 
 2936              		.text
 2937              	.Letext0:
 2938              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2939              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2940              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2941              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2942              		.file 7 "/usr/include/stdio.h"
 2943              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2944              		.file 9 "/usr/include/errno.h"
 2945              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2946              		.file 11 "/usr/include/unistd.h"
 2947              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2948              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2949              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2950              		.file 15 "/usr/include/math.h"
 2951              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2952              		.file 17 "/usr/include/time.h"
 2953              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2954              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2955              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2956              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2957              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2958              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2959              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2960              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2961              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2962              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2963              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2964              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2965              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2966              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2967              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2968              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2969              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2970              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2971              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2972              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2973              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2974              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2975              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2976              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2977              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2978              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2979              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2980              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2981              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2982              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2983              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2984              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2985              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2986              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2987              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2988              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2989              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2990              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2991              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2992              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2993              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2994              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2995              		.file 60 "/usr/local/include/python3.8/context.h"
 2996              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2997              		.file 62 "/usr/local/include/python3.8/code.h"
 2998              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2999              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3000              		.file 65 "/usr/local/include/python3.8/import.h"
 3001              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3002              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3003              		.file 68 "/usr/include/malloc.h"
 3004              		.file 69 "armwave.h"
 3005              		.file 70 "/usr/include/stdlib.h"
 3006              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3007              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3008              		.file 73 "<built-in>"
 3009              		.file 74 "/usr/include/assert.h"
