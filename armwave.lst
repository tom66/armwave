   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                  	((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                 	((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)            	MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)       	__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)        	__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     ****         // roll through y and render the slice into the out buffer
 113:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 114:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 117:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 122:armwave.c     ****             }
 123:armwave.c     ****         }
 124:armwave.c     ****     }
 125:armwave.c     **** }
 126:armwave.c     **** 
 127:armwave.c     **** void armwave_init()
 128:armwave.c     **** {
 129:armwave.c     ****     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 131:armwave.c     **** 
 132:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 132 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 133:armwave.c     **** {
 134:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 134 5 view .LVU1
 135:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 135 5 view .LVU2
 136:armwave.c     **** 
 137:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 137 5 view .LVU3
 138:armwave.c     **** 
 139:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 140:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 140 5 view .LVU4
  93              	@ armwave.c:132: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 132:armwave.c     **** {
  94              		.loc 1 132 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:143:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 141:armwave.c     **** 
 142:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 143:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 143 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp140, target_height,
 104              	@ armwave.c:140:     g_armwave_state.wave_buffer = wave_buffer;
 140:armwave.c     **** 
 105              		.loc 1 140 33 view .LVU7
 106 0008 90419FE5 		ldr	r4, .L21+8	@ tmp207,
 107 000c 90319FE5 		ldr	r3, .L21+12	@ tmp139,
 108              	@ armwave.c:143:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 143 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp209, tmp140,
 111              	@ armwave.c:132: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 132:armwave.c     **** {
 112              		.loc 1 132 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:132: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 132:armwave.c     **** {
 118              		.loc 1 132 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:140:     g_armwave_state.wave_buffer = wave_buffer;
 140:armwave.c     **** 
 121              		.loc 1 140 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp139, g_armwave_state.wave_buffer
 123              		.loc 1 143 5 is_stmt 1 view .LVU12
 124 0020 4200000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp142, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp210, tmp142,
 127 002c 4A00001A 		bne	.L17		@,
 144:armwave.c     **** 
 145:armwave.c     ****     if(target_height == 256) {
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 148 12 view .LVU13
 149:armwave.c     ****         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 151:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 151 12 view .LVU14
 130              	@ armwave.c:151:     } else if(target_height == 1024) {
 131              		.loc 1 151 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4400000A 		beq	.L18		@,
 152:armwave.c     ****         g_armwave_state.row_shift = 10;
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 154:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 154 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:154:     } else if(target_height == 2048) {
 136              		.loc 1 154 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 155:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 155 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:155:         g_armwave_state.row_shift = 11;
 140              		.loc 1 155 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp162,
 142 0040 60319F05 		ldreq	r3, .L21+16	@ tmp160,
 143 0044 FC23C401 		strdeq	r2, [r4, #60]	@, tmp207,
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 156 9 is_stmt 1 view .LVU20
 145              	.L5:
 157:armwave.c     ****     } 
 158:armwave.c     **** 
 159:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 160:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 160 5 view .LVU21
 147              	@ armwave.c:161:     g_armwave_state.vscale = target_height / 256;
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 148              		.loc 1 161 44 is_stmt 0 view .LVU22
 149 0048 2134A0E1 		lsr	r3, r1, #8	@ tmp165, target_height,
 150              	@ armwave.c:164:     g_armwave_state.size = target_height * target_width;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 151              		.loc 1 164 42 view .LVU23
 152 004c 950106E0 		mul	r6, r5, r1	@ _10, target_width, target_height
 153              	@ armwave.c:173:     if(g_armwave_state.ch1_buffer != NULL)
 165:armwave.c     ****     g_armwave_state.target_width = target_width;
 166:armwave.c     ****     g_armwave_state.target_height = target_height;
 167:armwave.c     **** 
 168:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 169:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 170:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 171:armwave.c     ****     g_armwave_state.slice_height = 64;  
 172:armwave.c     **** 
 173:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 154              		.loc 1 173 23 view .LVU24
 155 0050 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 156              	.LVL1:
 157              	@ armwave.c:162:     g_armwave_state.wave_stride = wave_stride;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 158              		.loc 1 162 33 view .LVU25
 159 0054 022BA0E3 		mov	r2, #2048	@ tmp167,
 160              	@ armwave.c:161:     g_armwave_state.vscale = target_height / 256;
 161:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 161              		.loc 1 161 28 view .LVU26
 162 0058 1C3084E5 		str	r3, [r4, #28]	@ tmp165, g_armwave_state.vscale
 163              	@ armwave.c:163:     g_armwave_state.waves = waves;
 163:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 164              		.loc 1 163 27 view .LVU27
 165 005c 4030A0E3 		mov	r3, #64	@ tmp169,
 166              	@ armwave.c:173:     if(g_armwave_state.ch1_buffer != NULL)
 167              		.loc 1 173 7 view .LVU28
 168 0060 000050E3 		cmp	r0, #0	@ _11,
 169              	@ armwave.c:160:     g_armwave_state.xstride = target_height;
 160:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 170              		.loc 1 160 29 view .LVU29
 171 0064 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 161:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 172              		.loc 1 161 5 is_stmt 1 view .LVU30
 162:armwave.c     ****     g_armwave_state.waves = waves;
 173              		.loc 1 162 5 view .LVU31
 174              	@ armwave.c:165:     g_armwave_state.target_width = target_width;
 165:armwave.c     ****     g_armwave_state.target_height = target_height;
 175              		.loc 1 165 34 is_stmt 0 view .LVU32
 176 0068 345084E5 		str	r5, [r4, #52]	@ target_width, g_armwave_state.target_width
 177              	@ armwave.c:166:     g_armwave_state.target_height = target_height;
 166:armwave.c     **** 
 178              		.loc 1 166 35 view .LVU33
 179 006c 381084E5 		str	r1, [r4, #56]	@ target_height, g_armwave_state.target_height
 180              	@ armwave.c:164:     g_armwave_state.size = target_height * target_width;
 164:armwave.c     ****     g_armwave_state.target_width = target_width;
 181              		.loc 1 164 26 view .LVU34
 182 0070 306084E5 		str	r6, [r4, #48]	@ _10, g_armwave_state.size
 183              	@ armwave.c:163:     g_armwave_state.waves = waves;
 163:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 184              		.loc 1 163 27 view .LVU35
 185 0074 F022C4E1 		strd	r2, [r4, #32]	@, tmp207,
 164:armwave.c     ****     g_armwave_state.target_width = target_width;
 186              		.loc 1 164 5 is_stmt 1 view .LVU36
 165:armwave.c     ****     g_armwave_state.target_height = target_height;
 187              		.loc 1 165 5 view .LVU37
 166:armwave.c     **** 
 188              		.loc 1 166 5 view .LVU38
 171:armwave.c     **** 
 189              		.loc 1 171 5 view .LVU39
 190              	@ armwave.c:171:     g_armwave_state.slice_height = 64;  
 171:armwave.c     **** 
 191              		.loc 1 171 34 is_stmt 0 view .LVU40
 192 0078 283084E5 		str	r3, [r4, #40]	@ tmp169, g_armwave_state.slice_height
 193              		.loc 1 173 5 is_stmt 1 view .LVU41
 194              	@ armwave.c:173:     if(g_armwave_state.ch1_buffer != NULL)
 195              		.loc 1 173 7 is_stmt 0 view .LVU42
 196 007c 0100000A 		beq	.L7		@,
 174:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 197              		.loc 1 174 9 is_stmt 1 view .LVU43
 198 0080 FEFFFFEB 		bl	free		@
 199              	.LVL2:
 200              		.loc 1 174 9 is_stmt 0 view .LVU44
 201 0084 306094E5 		ldr	r6, [r4, #48]	@ _10, g_armwave_state.size
 202              	.L7:
 175:armwave.c     **** 
 176:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 203              		.loc 1 176 5 is_stmt 1 view .LVU45
 204              	@ armwave.c:176:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 205              		.loc 1 176 34 is_stmt 0 view .LVU46
 206 0088 0110A0E3 		mov	r1, #1	@,
 207 008c 0600A0E1 		mov	r0, r6	@, _10
 208 0090 FEFFFFEB 		bl	calloc		@
 209              	.LVL3:
 210              	@ armwave.c:177:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 177:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 211              		.loc 1 177 33 view .LVU47
 212 0094 10219FE5 		ldr	r2, .L21+20	@ tmp180,
 213              	@ armwave.c:179:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 178:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 179:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 214              		.loc 1 179 33 view .LVU48
 215 0098 FA30A0E3 		mov	r3, #250	@ tmp183,
 216              	@ armwave.c:177:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 177:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 217              		.loc 1 177 33 view .LVU49
 218 009c 482084E5 		str	r2, [r4, #72]	@ tmp180, MEM[(short int *)&g_armwave_state + 72B]
 219              	@ armwave.c:179:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 220              		.loc 1 179 33 view .LVU50
 221 00a0 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp183, g_armwave_state.ch1_color.b
 222              	@ armwave.c:181:     assert(g_armwave_state.ch1_buffer != NULL);
 180:armwave.c     **** 
 181:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 223              		.loc 1 181 5 view .LVU51
 224 00a4 000050E3 		cmp	r0, #0	@ tmp177,
 225              	@ armwave.c:176:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 176:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 226              		.loc 1 176 32 view .LVU52
 227 00a8 040084E5 		str	r0, [r4, #4]	@ tmp177, g_armwave_state.ch1_buffer
 177:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 228              		.loc 1 177 5 is_stmt 1 view .LVU53
 178:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 229              		.loc 1 178 5 view .LVU54
 179:armwave.c     **** 
 230              		.loc 1 179 5 view .LVU55
 231              		.loc 1 181 5 view .LVU56
 232 00ac 2F00000A 		beq	.L19		@,
 182:armwave.c     **** 
 183:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 184:armwave.c     ****     length = end_point - start_point;
 233              		.loc 1 184 5 view .LVU57
 234              	.LVL4:
 185:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 235              		.loc 1 185 5 view .LVU58
 236              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 237              		.loc 1 185 34 is_stmt 0 view .LVU59
 238 00b0 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 239              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 240              		.loc 1 185 22 view .LVU60
 241 00b4 376ADFED 		vldr.32	s13, .L21	@ tmp188,
 242              	@ armwave.c:187:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 186:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 187:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 243              		.loc 1 187 40 view .LVU61
 244 00b8 010AA0E3 		mov	r0, #4096	@,
 245              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 185:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 246              		.loc 1 185 34 view .LVU62
 247 00bc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp187, target_width
 248              	@ armwave.c:186:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 186:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 249              		.loc 1 186 60 view .LVU63
 250 00c0 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp212, g_armwave_state.slice_height
 251 00c4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp191, tmp212
 252              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 185:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 253              		.loc 1 185 22 view .LVU64
 254 00c8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp188, tmp187
 255              	.LVL5:
 186:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 256              		.loc 1 186 5 is_stmt 1 view .LVU65
 257              	@ armwave.c:186:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 186:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 258              		.loc 1 186 60 is_stmt 0 view .LVU66
 259 00cc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp193, tmp191, points_per_pixel
 260              	@ armwave.c:186:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 186:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 261              		.loc 1 186 41 view .LVU67
 262 00d0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp194, tmp193
 263 00d4 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp194, g_armwave_state.slice_record_height
 264              		.loc 1 187 5 is_stmt 1 view .LVU68
 265              	@ armwave.c:187:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 266              		.loc 1 187 40 is_stmt 0 view .LVU69
 267 00d8 FEFFFFEB 		bl	malloc		@
 268              	.LVL6:
 269              	@ armwave.c:189:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 188:armwave.c     **** 
 189:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 270              		.loc 1 189 5 view .LVU70
 271 00dc 000050E3 		cmp	r0, #0	@ tmp195,
 272              	@ armwave.c:187:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 187:armwave.c     **** 
 273              		.loc 1 187 38 view .LVU71
 274 00e0 600084E5 		str	r0, [r4, #96]	@ tmp195, g_armwave_state.xcoord_to_xpixel
 275              		.loc 1 189 5 is_stmt 1 view .LVU72
 276 00e4 2600000A 		beq	.L20		@,
 277              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 190:armwave.c     **** 
 191:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 192:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 278              		.loc 1 192 54 is_stmt 0 view .LVU73
 279 00e8 2B7ADFED 		vldr.32	s15, .L21+4	@ tmp200,
 280 00ec 020040E2 		sub	r0, r0, #2	@ ivtmp.28, tmp195,
 281              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 282              		.loc 1 191 12 view .LVU74
 283 00f0 0030A0E3 		mov	r3, #0	@ xx,
 284              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 285              		.loc 1 192 54 view .LVU75
 286 00f4 887A87EE 		vdiv.f32	s14, s15, s16	@ _24, tmp200, points_per_pixel
 287              	.L10:
 288              	.LVL7:
 289              		.loc 1 192 9 is_stmt 1 view .LVU76
 290              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 291              		.loc 1 192 74 is_stmt 0 view .LVU77
 292 00f8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 293              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 294              		.loc 1 191 32 view .LVU78
 295 00fc 013083E2 		add	r3, r3, #1	@ xx, xx,
 296              	.LVL8:
 297              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 298              		.loc 1 191 5 view .LVU79
 299 0100 020B53E3 		cmp	r3, #2048	@ xx,
 300              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 301              		.loc 1 192 74 view .LVU80
 302 0104 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, xx
 303 0108 877A67EE 		vmul.f32	s15, s15, s14	@ tmp202, tmp201, _24
 304              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305              		.loc 1 192 46 view .LVU81
 306 010c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 307 0110 902A17EE 		vmov	r2, s15	@ int	@ tmp203, tmp203
 308 0114 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp203, MEM[base: _4, offset: 0B]
 309              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 310              		.loc 1 191 5 view .LVU82
 311 0118 F6FFFF1A 		bne	.L10		@,
 193:armwave.c     **** 
 194:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 195:armwave.c     ****     }
 196:armwave.c     **** 
 197:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 312              		.loc 1 197 5 is_stmt 1 view .LVU83
 313              	@ armwave.c:197:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 314              		.loc 1 197 34 is_stmt 0 view .LVU84
 315 011c 0601A0E1 		lsl	r0, r6, #2	@, _10,
 316 0120 FEFFFFEB 		bl	malloc		@
 317              	.LVL9:
 318              	@ armwave.c:198: }
 198:armwave.c     **** }
 319              		.loc 1 198 1 view .LVU85
 320 0124 028BBDEC 		vldm	sp!, {d8}	@
 321              		.cfi_remember_state
 322              		.cfi_restore 80
 323              		.cfi_restore 81
 324              		.cfi_def_cfa_offset 16
 325              	.LVL10:
 326              	@ armwave.c:197:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 197:armwave.c     **** }
 327              		.loc 1 197 32 view .LVU86
 328 0128 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 329              	@ armwave.c:198: }
 330              		.loc 1 198 1 view .LVU87
 331 012c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 332              	.LVL11:
 333              	.L2:
 334              		.cfi_restore_state
 145:armwave.c     ****         g_armwave_state.row_shift = 8;
 335              		.loc 1 145 5 is_stmt 1 view .LVU88
 336              	@ armwave.c:145:     if(target_height == 256) {
 145:armwave.c     ****         g_armwave_state.row_shift = 8;
 337              		.loc 1 145 7 is_stmt 0 view .LVU89
 338 0130 010C51E3 		cmp	r1, #256	@ target_height,
 146:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 339              		.loc 1 146 9 is_stmt 1 view .LVU90
 340              	@ armwave.c:147:         g_armwave_state.row_mask = 0x0ff;
 147:armwave.c     ****     } else if(target_height == 512) {
 341              		.loc 1 147 34 is_stmt 0 view .LVU91
 342 0134 0820A003 		moveq	r2, #8	@ tmp148,
 343              	@ armwave.c:149:         g_armwave_state.row_shift = 9;
 149:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 344              		.loc 1 149 35 view .LVU92
 345 0138 70309F15 		ldrne	r3, .L21+24	@ tmp152,
 346              	@ armwave.c:147:         g_armwave_state.row_mask = 0x0ff;
 147:armwave.c     ****     } else if(target_height == 512) {
 347              		.loc 1 147 34 view .LVU93
 348 013c FF30A003 		moveq	r3, #255	@ tmp150,
 148:armwave.c     ****         g_armwave_state.row_shift = 9;
 349              		.loc 1 148 12 is_stmt 1 view .LVU94
 149:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 350              		.loc 1 149 9 view .LVU95
 351              	@ armwave.c:149:         g_armwave_state.row_shift = 9;
 149:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 352              		.loc 1 149 35 is_stmt 0 view .LVU96
 353 0140 0920A013 		movne	r2, #9	@ tmp154,
 354 0144 FC23C4E1 		strd	r2, [r4, #60]	@, tmp207,
 150:armwave.c     ****     } else if(target_height == 1024) {
 355              		.loc 1 150 9 is_stmt 1 view .LVU97
 356 0148 BEFFFFEA 		b	.L5		@
 357              	.L18:
 152:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 358              		.loc 1 152 9 view .LVU98
 359              	@ armwave.c:152:         g_armwave_state.row_shift = 10;
 152:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 360              		.loc 1 152 35 is_stmt 0 view .LVU99
 361 014c 60309FE5 		ldr	r3, .L21+28	@ tmp156,
 362 0150 0A20A0E3 		mov	r2, #10	@ tmp158,
 363 0154 FC23C4E1 		strd	r2, [r4, #60]	@, tmp207,
 153:armwave.c     ****     } else if(target_height == 2048) {
 364              		.loc 1 153 9 is_stmt 1 view .LVU100
 365 0158 BAFFFFEA 		b	.L5		@
 366              	.L17:
 143:armwave.c     **** 
 367              		.loc 1 143 5 view .LVU101
 368 015c 54309FE5 		ldr	r3, .L21+32	@,
 369 0160 8F20A0E3 		mov	r2, #143	@,
 370 0164 50109FE5 		ldr	r1, .L21+36	@,
 371              	.LVL12:
 143:armwave.c     **** 
 372              		.loc 1 143 5 is_stmt 0 view .LVU102
 373 0168 50009FE5 		ldr	r0, .L21+40	@,
 374              	.LVL13:
 143:armwave.c     **** 
 375              		.loc 1 143 5 view .LVU103
 376 016c FEFFFFEB 		bl	__assert_fail		@
 377              	.LVL14:
 378              	.L19:
 181:armwave.c     **** 
 379              		.loc 1 181 5 is_stmt 1 view .LVU104
 380 0170 40309FE5 		ldr	r3, .L21+32	@,
 381 0174 B520A0E3 		mov	r2, #181	@,
 382 0178 3C109FE5 		ldr	r1, .L21+36	@,
 383 017c 40009FE5 		ldr	r0, .L21+44	@,
 384 0180 FEFFFFEB 		bl	__assert_fail		@
 385              	.LVL15:
 386              	.L20:
 189:armwave.c     **** 
 387              		.loc 1 189 5 view .LVU105
 388 0184 2C309FE5 		ldr	r3, .L21+32	@,
 389 0188 BD20A0E3 		mov	r2, #189	@,
 390 018c 28109FE5 		ldr	r1, .L21+36	@,
 391 0190 30009FE5 		ldr	r0, .L21+48	@,
 392 0194 FEFFFFEB 		bl	__assert_fail		@
 393              	.LVL16:
 394              	.L22:
 395              		.align	2
 396              	.L21:
 397 0198 00000045 		.word	1157627904
 398 019c 0000803F 		.word	1065353216
 399 01a0 00000000 		.word	g_armwave_state
 400 01a4 00000000 		.word	test_wave_buffer
 401 01a8 FF070000 		.word	2047
 402 01ac F609F406 		.word	116656630
 403 01b0 FF010000 		.word	511
 404 01b4 FF030000 		.word	1023
 405 01b8 00000000 		.word	.LANCHOR0
 406 01bc 00000000 		.word	.LC0
 407 01c0 0C000000 		.word	.LC1
 408 01c4 6C000000 		.word	.LC2
 409 01c8 90000000 		.word	.LC3
 410              		.cfi_endproc
 411              	.LFE72:
 413              		.align	2
 414              		.global	test_create_waveform
 415              		.syntax unified
 416              		.arm
 417              		.fpu vfp
 419              	test_create_waveform:
 420              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 421              		.loc 1 51 1 view -0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 425              		.loc 1 52 5 view .LVU107
  53:armwave.c     **** 
 426              		.loc 1 53 5 view .LVU108
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 427              		.loc 1 55 5 view .LVU109
 428              	.LVL17:
 429              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 430              		.loc 1 51 1 is_stmt 0 view .LVU110
 431 01cc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 432              		.cfi_def_cfa_offset 36
 433              		.cfi_offset 4, -36
 434              		.cfi_offset 5, -32
 435              		.cfi_offset 6, -28
 436              		.cfi_offset 7, -24
 437              		.cfi_offset 8, -20
 438              		.cfi_offset 9, -16
 439              		.cfi_offset 10, -12
 440              		.cfi_offset 11, -8
 441              		.cfi_offset 14, -4
 442 01d0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 443              		.cfi_def_cfa_offset 84
 444              		.cfi_offset 80, -84
 445              		.cfi_offset 81, -80
 446              		.cfi_offset 82, -76
 447              		.cfi_offset 83, -72
 448              		.cfi_offset 84, -68
 449              		.cfi_offset 85, -64
 450              		.cfi_offset 86, -60
 451              		.cfi_offset 87, -56
 452              		.cfi_offset 88, -52
 453              		.cfi_offset 89, -48
 454              		.cfi_offset 90, -44
 455              		.cfi_offset 91, -40
 456 01d4 5C819FE5 		ldr	r8, .L42+40	@ _75,
 457              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 458              		.loc 1 56 33 view .LVU111
 459 01d8 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 460 01dc 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.44, _75,
 461              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 462              		.loc 1 56 13 view .LVU112
 463 01e0 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 464              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 465              		.loc 1 60 20 view .LVU113
 466 01e4 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 467              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 468              		.loc 1 71 29 view .LVU114
 469 01e8 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 470              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 471              		.loc 1 71 33 view .LVU115
 472 01ec 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 473              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 474              		.loc 1 69 20 view .LVU116
 475 01f0 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 476 01f4 02B886E2 		add	fp, r6, #131072	@ _81,,
 477 01f8 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 478              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 479              		.loc 1 51 1 view .LVU117
 480 01fc 0CD04DE2 		sub	sp, sp, #12	@,,
 481              		.cfi_def_cfa_offset 96
 482 0200 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 483 0204 0F6086E2 		add	r6, r6, #15	@ ivtmp.44, ivtmp.44,
 484 0208 008068E2 		rsb	r8, r8, #0	@ ivtmp.47, _75
 485              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 486              		.loc 1 55 11 view .LVU118
 487 020c 0090A0E3 		mov	r9, #0	@ w,
 488              	.LVL18:
 489              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 490              		.loc 1 56 9 is_stmt 1 view .LVU119
 491              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 492              		.loc 1 56 24 is_stmt 0 view .LVU120
 493 0210 909A07EE 		vmov	s15, r9	@ int	@ w, w
 494              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 495              		.loc 1 56 48 view .LVU121
 496 0214 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 497              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 498              		.loc 1 56 13 view .LVU122
 499 0218 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 500              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 501              		.loc 1 68 19 view .LVU123
 502 021c 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 503              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 504              		.loc 1 56 24 view .LVU124
 505 0220 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 506              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 507              		.loc 1 73 58 view .LVU125
 508 0224 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 509 0228 025B46E2 		sub	r5, r6, #2048	@ ivtmp.37, ivtmp.44,
 510 022c 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.47,
 511              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 512              		.loc 1 56 33 view .LVU126
 513 0230 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 514              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 515              		.loc 1 56 13 view .LVU127
 516 0234 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 517              	.LVL19:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 518              		.loc 1 59 9 is_stmt 1 view .LVU128
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 519              		.loc 1 59 9 is_stmt 0 view .LVU129
 520 0238 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 521              	.LVL20:
 522              	.L28:
 523              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 524              		.loc 1 60 24 view .LVU130
 525 023c FEFFFFEB 		bl	rand		@
 526              	.LVL21:
 527 0240 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.37
 528              	.LVL22:
  60:armwave.c     ****             noise *= noise;
 529              		.loc 1 60 13 is_stmt 1 view .LVU131
 530              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 531              		.loc 1 60 31 is_stmt 0 view .LVU132
 532 0244 7000FFE6 		uxth	r0, r0	@ tmp163,
 533              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 534              		.loc 1 60 41 view .LVU133
 535 0248 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 536 024c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 537              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 538              		.loc 1 60 20 view .LVU134
 539 0250 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 540              	.LVL23:
  61:armwave.c     ****             noise *= noise;
 541              		.loc 1 61 13 is_stmt 1 view .LVU135
 542              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 543              		.loc 1 61 19 is_stmt 0 view .LVU136
 544 0254 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 545              	.LVL24:
  62:armwave.c     ****             noise *= noise;
 546              		.loc 1 62 13 is_stmt 1 view .LVU137
 547              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 548              		.loc 1 62 19 is_stmt 0 view .LVU138
 549 0258 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 550              	.LVL25:
  63:armwave.c     **** 
 551              		.loc 1 63 13 is_stmt 1 view .LVU139
 552              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 553              		.loc 1 63 19 is_stmt 0 view .LVU140
 554 025c A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 555              	.LVL26:
  65:armwave.c     ****                 noise = -noise;
 556              		.loc 1 65 13 is_stmt 1 view .LVU141
 557              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 558              		.loc 1 65 17 is_stmt 0 view .LVU142
 559 0260 FEFFFFEB 		bl	rand		@
 560              	.LVL27:
  66:armwave.c     **** 
 561              		.loc 1 66 17 is_stmt 1 view .LVU143
 562              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 563              		.loc 1 65 15 is_stmt 0 view .LVU144
 564 0264 020910E3 		tst	r0, #32768	@,
 565              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 566              		.loc 1 66 23 view .LVU145
 567 0268 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 568              	.LVL28:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 569              		.loc 1 68 13 is_stmt 1 view .LVU146
  69:armwave.c     **** 
 570              		.loc 1 69 13 view .LVU147
 571              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 572              		.loc 1 69 23 is_stmt 0 view .LVU148
 573 026c FEFFFFEB 		bl	rand		@
 574              	.LVL29:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 575              		.loc 1 71 13 is_stmt 1 view .LVU149
 576              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 577              		.loc 1 71 29 is_stmt 0 view .LVU150
 578 0270 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 579 0274 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 580 0278 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 581              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 582              		.loc 1 69 30 view .LVU151
 583 027c 7000FFE6 		uxth	r0, r0	@ tmp173,
 584              	.LVL30:
 585              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 586              		.loc 1 69 40 view .LVU152
 587 0280 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 588 0284 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 589              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 590              		.loc 1 69 20 view .LVU153
 591 0288 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 592              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 593              		.loc 1 71 60 view .LVU154
 594 028c 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 595              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 596              		.loc 1 71 18 view .LVU155
 597 0290 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 598 0294 FEFFFFEB 		bl	sin		@
 599              	.LVL31:
  73:armwave.c     ****         }
 600              		.loc 1 73 13 is_stmt 1 view .LVU156
 601              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 602              		.loc 1 68 19 is_stmt 0 view .LVU157
 603 0298 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 604              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 605              		.loc 1 73 58 view .LVU158
 606 029c 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 607              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 608              		.loc 1 73 56 view .LVU159
 609 02a0 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 610 02a4 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 611              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 612              		.loc 1 71 77 view .LVU160
 613 02a8 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 614              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 615              		.loc 1 71 70 view .LVU161
 616 02ac 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 617              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 618              		.loc 1 71 77 view .LVU162
 619 02b0 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 620              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 621              		.loc 1 71 15 view .LVU163
 622 02b4 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 623              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 624              		.loc 1 73 58 view .LVU164
 625 02b8 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 626 02bc 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 627 02c0 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 628 02c4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 629 02c8 050000DA 		ble	.L25		@,
 630              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 631              		.loc 1 73 56 discriminator 1 view .LVU165
 632 02cc C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 633 02d0 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 634 02d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 635 02d8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 636 02dc 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 637 02e0 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 638              	.L25:
 639              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 640              		.loc 1 73 56 discriminator 12 view .LVU166
 641 02e4 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 642              	.LVL32:
 643              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 644              		.loc 1 59 9 discriminator 12 view .LVU167
 645 02e8 060055E1 		cmp	r5, r6	@ ivtmp.37, ivtmp.44
 646 02ec D2FFFF1A 		bne	.L28		@,
 647 02f0 026B85E2 		add	r6, r5, #2048	@ ivtmp.44, ivtmp.37,
 648              	.LVL33:
 649              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 650              		.loc 1 55 5 discriminator 2 view .LVU168
 651 02f4 0B0056E1 		cmp	r6, fp	@ ivtmp.44, _81
 652              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 653              		.loc 1 55 34 discriminator 2 view .LVU169
 654 02f8 019089E2 		add	r9, r9, #1	@ w, w,
 655              	.LVL34:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 656              		.loc 1 55 34 discriminator 2 view .LVU170
 657 02fc 028B48E2 		sub	r8, r8, #2048	@ ivtmp.47, ivtmp.47,
 658              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 659              		.loc 1 55 5 discriminator 2 view .LVU171
 660 0300 C2FFFF1A 		bne	.L29		@,
 661              	@ armwave.c:76: }
  76:armwave.c     **** 
 662              		.loc 1 76 1 view .LVU172
 663 0304 0CD08DE2 		add	sp, sp, #12	@,,
 664              		.cfi_def_cfa_offset 84
 665              		@ sp needed	@
 666 0308 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 667              		.cfi_restore 90
 668              		.cfi_restore 91
 669              		.cfi_restore 88
 670              		.cfi_restore 89
 671              		.cfi_restore 86
 672              		.cfi_restore 87
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 36
 680              	.LVL35:
  76:armwave.c     **** 
 681              		.loc 1 76 1 view .LVU173
 682 030c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 683              	.LVL36:
 684              	.L43:
  76:armwave.c     **** 
 685              		.loc 1 76 1 view .LVU174
 686              		.align	2
 687              	.L42:
 688 0310 0000803C 		.word	1015021568
 689 0314 0000003F 		.word	1056964608
 690 0318 0050C347 		.word	1203982336
 691 031c C3F5C840 		.word	1086911939
 692 0320 0000003A 		.word	973078528
 693 0324 38FFC74A 		.word	1254620984
 694 0328 0000803F 		.word	1065353216
 695 032c 0000FE42 		.word	1123942400
 696 0330 00000043 		.word	1124073472
 697 0334 00007F43 		.word	1132396544
 698 0338 00000000 		.word	test_wave_buffer
 699 033c 00000000 		.word	.LANCHOR1
 700              		.cfi_endproc
 701              	.LFE57:
 703              		.align	2
 704              		.global	test_create_gamma
 705              		.syntax unified
 706              		.arm
 707              		.fpu vfp
 709              	test_create_gamma:
 710              	.LFB58:
  82:armwave.c     ****     int i;
 711              		.loc 1 82 1 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 715              		.loc 1 83 5 view .LVU176
  84:armwave.c     **** 
 716              		.loc 1 84 5 view .LVU177
 717              	.LVL37:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 718              		.loc 1 86 5 view .LVU178
 719              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 720              		.loc 1 82 1 is_stmt 0 view .LVU179
 721 0340 70402DE9 		push	{r4, r5, r6, lr}	@
 722              		.cfi_def_cfa_offset 16
 723              		.cfi_offset 4, -16
 724              		.cfi_offset 5, -12
 725              		.cfi_offset 6, -8
 726              		.cfi_offset 14, -4
 727 0344 068B2DED 		vpush.64	{d8, d9, d10}	@
 728              		.cfi_def_cfa_offset 40
 729              		.cfi_offset 80, -40
 730              		.cfi_offset 81, -36
 731              		.cfi_offset 82, -32
 732              		.cfi_offset 83, -28
 733              		.cfi_offset 84, -24
 734              		.cfi_offset 85, -20
 735 0348 64409FE5 		ldr	r4, .L48+20	@ ivtmp.55,
 736              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 737              		.loc 1 87 32 view .LVU180
 738 034c 17AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 739              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 740              		.loc 1 87 26 view .LVU181
 741 0350 129B9FED 		vldr.64	d9, .L48	@ tmp135,
 742              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 743              		.loc 1 87 49 view .LVU182
 744 0354 138B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 745 0358 015084E2 		add	r5, r4, #1	@ _25, ivtmp.55,
 746 035c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.55,
 747 0360 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 748              	.LVL38:
 749              	.L45:
  87:armwave.c     ****     }
 750              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU183
 751              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 752              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU184
 753 0364 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.55
 754              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 755              		.loc 1 87 26 discriminator 3 view .LVU185
 756 0368 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 757              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 758              		.loc 1 87 32 discriminator 3 view .LVU186
 759 036c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 760 0370 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 761 0374 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 26 discriminator 3 view .LVU187
 764 0378 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 765 037c FEFFFFEB 		bl	pow		@
 766              	.LVL39:
 767              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 768              		.loc 1 87 49 discriminator 3 view .LVU188
 769 0380 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 770              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 771              		.loc 1 87 24 discriminator 3 view .LVU189
 772 0384 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 773 0388 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 774 038c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 775              	.LVL40:
 776              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 777              		.loc 1 86 5 discriminator 3 view .LVU190
 778 0390 060054E1 		cmp	r4, r6	@ ivtmp.55, _26
 779 0394 F2FFFF1A 		bne	.L45		@,
 780              	@ armwave.c:89: }
  89:armwave.c     **** 
 781              		.loc 1 89 1 view .LVU191
 782 0398 068BBDEC 		vldm	sp!, {d8-d10}	@,
 783              		.cfi_restore 84
 784              		.cfi_restore 85
 785              		.cfi_restore 82
 786              		.cfi_restore 83
 787              		.cfi_restore 80
 788              		.cfi_restore 81
 789              		.cfi_def_cfa_offset 16
 790 039c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 791              	.LVL41:
 792              	.L49:
  89:armwave.c     **** 
 793              		.loc 1 89 1 view .LVU192
 794              		.align	3
 795              	.L48:
 796 03a0 000000C0 		.word	-1073741824
 797 03a4 CCCCEC3F 		.word	1072483532
 798 03a8 00000000 		.word	0
 799 03ac 00E06F40 		.word	1081073664
 800 03b0 00007F43 		.word	1132396544
 801 03b4 FFFFFFFF 		.word	gamma_table-1
 802              		.cfi_endproc
 803              	.LFE58:
 805              		.align	2
 806              		.global	render_nonaa_to_buffer_1ch_slice
 807              		.syntax unified
 808              		.arm
 809              		.fpu vfp
 811              	render_nonaa_to_buffer_1ch_slice:
 812              	.LVL42:
 813              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 814              		.loc 1 99 1 is_stmt 1 view -0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 818              		.loc 1 100 5 view .LVU194
 101:armwave.c     ****     uint8_t *wave_base;
 819              		.loc 1 101 5 view .LVU195
 102:armwave.c     ****     uint8_t *write_buffer_base;
 820              		.loc 1 102 5 view .LVU196
 103:armwave.c     ****     uint8_t *write_buffer;
 821              		.loc 1 103 5 view .LVU197
 104:armwave.c     ****     
 822              		.loc 1 104 5 view .LVU198
 106:armwave.c     **** 
 823              		.loc 1 106 5 view .LVU199
 824              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 825              		.loc 1 106 40 is_stmt 0 view .LVU200
 826 03b8 F4209FE5 		ldr	r2, .L62	@ tmp257,
 827              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 828              		.loc 1 99 1 view .LVU201
 829 03bc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 830              		.cfi_def_cfa_offset 36
 831              		.cfi_offset 4, -36
 832              		.cfi_offset 5, -32
 833              		.cfi_offset 6, -28
 834              		.cfi_offset 7, -24
 835              		.cfi_offset 8, -20
 836              		.cfi_offset 9, -16
 837              		.cfi_offset 10, -12
 838              		.cfi_offset 11, -8
 839              		.cfi_offset 14, -4
 840              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 841              		.loc 1 109 5 view .LVU202
 842 03c0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 843              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 844              		.loc 1 106 63 view .LVU203
 845 03c4 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 846              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 847              		.loc 1 109 5 view .LVU204
 848 03c8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 849              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 850              		.loc 1 106 40 view .LVU205
 851 03cc 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 852              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 853              		.loc 1 106 63 view .LVU206
 854 03d0 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 855              	.LVL43:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 856              		.loc 1 109 5 is_stmt 1 view .LVU207
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 857              		.loc 1 109 5 is_stmt 0 view .LVU208
 858 03d4 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 859 03d8 000051E3 		cmp	r1, #0	@ height,
 860 03dc F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 861 03e0 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 862              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 863              		.loc 1 109 11 view .LVU209
 864 03e4 0080A0E3 		mov	r8, #0	@ w,
 865              	.LVL44:
 866              	.L54:
 110:armwave.c     **** 
 867              		.loc 1 110 9 is_stmt 1 view .LVU210
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 868              		.loc 1 114 9 view .LVU211
 869              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 870              		.loc 1 110 64 is_stmt 0 view .LVU212
 871 03e8 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 872 03ec 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 873              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 874              		.loc 1 114 16 view .LVU213
 875 03f0 0000A0E3 		mov	r0, #0	@ yy,
 876 03f4 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 877 03f8 037087E0 		add	r7, r7, r3	@ ivtmp.61, g_armwave_state.wave_buffer, tmp195
 878              	.LVL45:
 879              	.L53:
 115:armwave.c     **** 
 880              		.loc 1 115 13 is_stmt 1 view .LVU214
 881              	@ armwave.c:115:             word = *(uint32_t*)(wave_base + yy);
 115:armwave.c     **** 
 882              		.loc 1 115 18 is_stmt 0 view .LVU215
 883 03fc 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 884              	.LVL46:
 117:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 885              		.loc 1 117 13 is_stmt 1 view .LVU216
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 886              		.loc 1 118 17 view .LVU217
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 887              		.loc 1 119 17 view .LVU218
 120:armwave.c     ****                 word >>= 8;
 888              		.loc 1 120 17 view .LVU219
 889              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 890              		.loc 1 118 45 is_stmt 0 view .LVU220
 891 0400 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 892              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 893              		.loc 1 119 63 view .LVU221
 894 0404 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 895              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 896              		.loc 1 118 37 view .LVU222
 897 0408 73E0EFE6 		uxtb	lr, r3	@ word, word
 898              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 899              		.loc 1 121 22 view .LVU223
 900 040c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 901              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 902              		.loc 1 120 47 view .LVU224
 903 0410 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 904              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 905              		.loc 1 118 37 view .LVU225
 906 0414 7440EFE6 		uxtb	r4, r4	@ word, word
 907              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 908              		.loc 1 120 47 view .LVU226
 909 0418 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 910              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 911              		.loc 1 119 63 view .LVU227
 912 041c 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 913              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 914              		.loc 1 121 22 view .LVU228
 915 0420 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 916              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 917              		.loc 1 120 47 view .LVU229
 918 0424 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 919              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 920              		.loc 1 118 37 view .LVU230
 921 0428 7EE0EFE6 		uxtb	lr, lr	@ word, word
 922              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 923              		.loc 1 121 22 view .LVU231
 924 042c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 925              	.LVL47:
 926              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 927              		.loc 1 120 47 view .LVU232
 928 0430 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 929 0434 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 930              	.LVL48:
 121:armwave.c     ****             }
 931              		.loc 1 121 17 is_stmt 1 view .LVU233
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 932              		.loc 1 118 17 view .LVU234
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 933              		.loc 1 119 17 view .LVU235
 120:armwave.c     ****                 word >>= 8;
 934              		.loc 1 120 17 view .LVU236
 935              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 936              		.loc 1 118 45 is_stmt 0 view .LVU237
 937 0438 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 938              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 939              		.loc 1 119 63 view .LVU238
 940 043c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 941              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 942              		.loc 1 120 47 view .LVU239
 943 0440 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 944              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 945              		.loc 1 119 63 view .LVU240
 946 0444 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 947              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 948              		.loc 1 120 47 view .LVU241
 949 0448 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 950              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 951              		.loc 1 119 63 view .LVU242
 952 044c 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 953              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 954              		.loc 1 114 37 view .LVU243
 955 0450 040080E2 		add	r0, r0, #4	@ yy, yy,
 956              	.LVL49:
 957              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 958              		.loc 1 120 47 view .LVU244
 959 0454 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 960              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 961              		.loc 1 114 9 view .LVU245
 962 0458 000051E1 		cmp	r1, r0	@ height, yy
 963              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 964              		.loc 1 120 47 view .LVU246
 965 045c 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 966 0460 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 967              	.LVL50:
 121:armwave.c     ****             }
 968              		.loc 1 121 17 is_stmt 1 view .LVU247
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 969              		.loc 1 118 17 view .LVU248
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 970              		.loc 1 119 17 view .LVU249
 120:armwave.c     ****                 word >>= 8;
 971              		.loc 1 120 17 view .LVU250
 972              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 973              		.loc 1 118 45 is_stmt 0 view .LVU251
 974 0464 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 975              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 976              		.loc 1 119 63 view .LVU252
 977 0468 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 978              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 979              		.loc 1 120 47 view .LVU253
 980 046c 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 981 0470 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 982 0474 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 983 0478 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 984 047c 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 121:armwave.c     ****             }
 985              		.loc 1 121 17 is_stmt 1 view .LVU254
 986              	.LVL51:
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 987              		.loc 1 118 17 view .LVU255
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 988              		.loc 1 119 17 view .LVU256
 120:armwave.c     ****                 word >>= 8;
 989              		.loc 1 120 17 view .LVU257
 990              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 991              		.loc 1 118 45 is_stmt 0 view .LVU258
 992 0480 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 993              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 994              		.loc 1 119 63 view .LVU259
 995 0484 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 996              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 997              		.loc 1 120 47 view .LVU260
 998 0488 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 999 048c 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 1000 0490 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 1001 0494 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 1002 0498 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 121:armwave.c     ****             }
 1003              		.loc 1 121 17 is_stmt 1 view .LVU261
 1004              	.LVL52:
 1005              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1006              		.loc 1 114 9 is_stmt 0 view .LVU262
 1007 049c D6FFFF8A 		bhi	.L53		@,
 1008              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1009              		.loc 1 109 5 view .LVU263
 1010 04a0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 1011              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1012              		.loc 1 109 44 view .LVU264
 1013 04a4 018088E2 		add	r8, r8, #1	@ w, w,
 1014              	.LVL53:
 1015              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1016              		.loc 1 109 5 view .LVU265
 1017 04a8 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 1018 04ac CDFFFF3A 		bcc	.L54		@,
 1019 04b0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1020              	.L63:
 1021              		.align	2
 1022              	.L62:
 1023 04b4 00000000 		.word	g_armwave_state
 1024              		.cfi_endproc
 1025              	.LFE59:
 1027              		.align	2
 1028              		.global	armwave_init
 1029              		.syntax unified
 1030              		.arm
 1031              		.fpu vfp
 1033              	armwave_init:
 1034              	.LFB60:
 128:armwave.c     ****     g_armwave_state.flags = 0;
 1035              		.loc 1 128 1 is_stmt 1 view -0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 129:armwave.c     **** }
 1040              		.loc 1 129 5 view .LVU267
 1041              	@ armwave.c:129:     g_armwave_state.flags = 0;
 129:armwave.c     **** }
 1042              		.loc 1 129 27 is_stmt 0 view .LVU268
 1043 04b8 08309FE5 		ldr	r3, .L65	@ tmp110,
 1044 04bc 0020A0E3 		mov	r2, #0	@ tmp111,
 1045 04c0 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1046              	@ armwave.c:130: }
 130:armwave.c     **** 
 1047              		.loc 1 130 1 view .LVU269
 1048 04c4 1EFF2FE1 		bx	lr	@
 1049              	.L66:
 1050              		.align	2
 1051              	.L65:
 1052 04c8 00000000 		.word	g_armwave_state
 1053              		.cfi_endproc
 1054              	.LFE60:
 1056              		.align	2
 1057              		.global	armwave_setup_render
 1058              		.syntax unified
 1059              		.arm
 1060              		.fpu vfp
 1062              	armwave_setup_render:
 1063              	.LVL54:
 1064              	.LFB61:
 133:armwave.c     ****     uint32_t length, xx;
 1065              		.loc 1 133 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 16, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 134:armwave.c     ****     float points_per_pixel;
 1069              		.loc 1 134 5 view .LVU271
 135:armwave.c     **** 
 1070              		.loc 1 135 5 view .LVU272
 137:armwave.c     **** 
 1071              		.loc 1 137 5 view .LVU273
 1072              	@ armwave.c:133: {
 133:armwave.c     ****     uint32_t length, xx;
 1073              		.loc 1 133 1 is_stmt 0 view .LVU274
 1074 04cc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1075              		.cfi_def_cfa_offset 24
 1076              		.cfi_offset 4, -24
 1077              		.cfi_offset 5, -20
 1078              		.cfi_offset 6, -16
 1079              		.cfi_offset 7, -12
 1080              		.cfi_offset 8, -8
 1081              		.cfi_offset 14, -4
 1082              	@ armwave.c:137:     assert(start_point < end_point);
 137:armwave.c     **** 
 1083              		.loc 1 137 5 view .LVU275
 1084 04d0 020051E1 		cmp	r1, r2	@ start_point, end_point
 1085              	@ armwave.c:133: {
 133:armwave.c     ****     uint32_t length, xx;
 1086              		.loc 1 133 1 view .LVU276
 1087 04d4 028B2DED 		vpush.64	{d8}	@
 1088              		.cfi_def_cfa_offset 32
 1089              		.cfi_offset 80, -32
 1090              		.cfi_offset 81, -28
 1091              	@ armwave.c:133: {
 133:armwave.c     ****     uint32_t length, xx;
 1092              		.loc 1 133 1 view .LVU277
 1093 04d8 0180A0E1 		mov	r8, r1	@ start_point, start_point
 1094 04dc 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1095 04e0 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1096              	.LVL55:
 133:armwave.c     ****     uint32_t length, xx;
 1097              		.loc 1 133 1 view .LVU278
 1098 04e4 24709DE5 		ldr	r7, [sp, #36]	@ target_width, target_width
 1099 04e8 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1100              	.LVL56:
 1101              	@ armwave.c:137:     assert(start_point < end_point);
 137:armwave.c     **** 
 1102              		.loc 1 137 5 view .LVU279
 1103 04ec 6800002A 		bcs	.L83		@,
 140:armwave.c     **** 
 1104              		.loc 1 140 5 is_stmt 1 view .LVU280
 1105              	@ armwave.c:140:     g_armwave_state.wave_buffer = wave_buffer;
 140:armwave.c     **** 
 1106              		.loc 1 140 33 is_stmt 0 view .LVU281
 1107 04f0 B4419FE5 		ldr	r4, .L88+4	@ tmp217,
 1108              	@ armwave.c:143:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 143:armwave.c     **** 
 1109              		.loc 1 143 5 view .LVU282
 1110 04f4 01CC42E2 		sub	ip, r2, #256	@ tmp151, target_height,
 1111 04f8 01CCDCE3 		bics	ip, ip, #256	@ tmp219, tmp151,
 1112              	@ armwave.c:140:     g_armwave_state.wave_buffer = wave_buffer;
 140:armwave.c     **** 
 1113              		.loc 1 140 33 view .LVU283
 1114 04fc 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 143:armwave.c     **** 
 1115              		.loc 1 143 5 is_stmt 1 view .LVU284
 1116 0500 4500000A 		beq	.L69		@,
 1117              	@ armwave.c:143:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 143:armwave.c     **** 
 1118              		.loc 1 143 5 is_stmt 0 discriminator 1 view .LVU285
 1119 0504 010B42E2 		sub	r0, r2, #1024	@ tmp153, target_height,
 1120              	.LVL57:
 143:armwave.c     **** 
 1121              		.loc 1 143 5 discriminator 1 view .LVU286
 1122 0508 010BD0E3 		bics	r0, r0, #1024	@ tmp220, tmp153,
 1123 050c 5100001A 		bne	.L84		@,
 145:armwave.c     ****         g_armwave_state.row_shift = 8;
 1124              		.loc 1 145 5 is_stmt 1 view .LVU287
 151:armwave.c     ****         g_armwave_state.row_shift = 10;
 1125              		.loc 1 151 12 view .LVU288
 1126              	@ armwave.c:151:     } else if(target_height == 1024) {
 151:armwave.c     ****         g_armwave_state.row_shift = 10;
 1127              		.loc 1 151 14 is_stmt 0 view .LVU289
 1128 0510 010B52E3 		cmp	r2, #1024	@ target_height,
 1129 0514 4A00000A 		beq	.L85		@,
 154:armwave.c     ****         g_armwave_state.row_shift = 11;
 1130              		.loc 1 154 12 is_stmt 1 view .LVU290
 1131              	@ armwave.c:154:     } else if(target_height == 2048) {
 154:armwave.c     ****         g_armwave_state.row_shift = 11;
 1132              		.loc 1 154 14 is_stmt 0 view .LVU291
 1133 0518 020B52E3 		cmp	r2, #2048	@ target_height,
 155:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1134              		.loc 1 155 9 is_stmt 1 view .LVU292
 1135              	@ armwave.c:155:         g_armwave_state.row_shift = 11;
 155:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1136              		.loc 1 155 35 is_stmt 0 view .LVU293
 1137 051c 0B00A003 		moveq	r0, #11	@ tmp171,
 1138              	@ armwave.c:156:         g_armwave_state.row_mask = 0x7ff;
 156:armwave.c     ****     } 
 1139              		.loc 1 156 34 view .LVU294
 1140 0520 88C19F05 		ldreq	ip, .L88+8	@ tmp173,
 1141              	@ armwave.c:155:         g_armwave_state.row_shift = 11;
 155:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1142              		.loc 1 155 35 view .LVU295
 1143 0524 3C008405 		streq	r0, [r4, #60]	@ tmp171, g_armwave_state.row_shift
 156:armwave.c     ****     } 
 1144              		.loc 1 156 9 is_stmt 1 view .LVU296
 1145              	@ armwave.c:156:         g_armwave_state.row_mask = 0x7ff;
 156:armwave.c     ****     } 
 1146              		.loc 1 156 34 is_stmt 0 view .LVU297
 1147 0528 40C08405 		streq	ip, [r4, #64]	@ tmp173, g_armwave_state.row_mask
 1148              	.L72:
 160:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1149              		.loc 1 160 5 is_stmt 1 view .LVU298
 1150              	@ armwave.c:164:     g_armwave_state.size = target_height * target_width;
 164:armwave.c     ****     g_armwave_state.target_width = target_width;
 1151              		.loc 1 164 42 is_stmt 0 view .LVU299
 1152 052c 970206E0 		mul	r6, r7, r2	@ _8, target_width, target_height
 1153              	@ armwave.c:173:     if(g_armwave_state.ch1_buffer != NULL)
 173:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1154              		.loc 1 173 23 view .LVU300
 1155 0530 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 1156              	@ armwave.c:162:     g_armwave_state.wave_stride = wave_stride;
 162:armwave.c     ****     g_armwave_state.waves = waves;
 1157              		.loc 1 162 33 view .LVU301
 1158 0534 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1159              	@ armwave.c:163:     g_armwave_state.waves = waves;
 163:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1160              		.loc 1 163 27 view .LVU302
 1161 0538 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1162              	@ armwave.c:161:     g_armwave_state.vscale = target_height / 256;
 161:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1163              		.loc 1 161 44 view .LVU303
 1164 053c 2214A0E1 		lsr	r1, r2, #8	@ tmp176, target_height,
 1165              	@ armwave.c:171:     g_armwave_state.slice_height = 64;  
 171:armwave.c     **** 
 1166              		.loc 1 171 34 view .LVU304
 1167 0540 4030A0E3 		mov	r3, #64	@ tmp183,
 1168              	.LVL58:
 1169              	@ armwave.c:173:     if(g_armwave_state.ch1_buffer != NULL)
 173:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1170              		.loc 1 173 7 view .LVU305
 1171 0544 000050E3 		cmp	r0, #0	@ _9,
 1172              	@ armwave.c:160:     g_armwave_state.xstride = target_height;
 160:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1173              		.loc 1 160 29 view .LVU306
 1174 0548 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 161:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1175              		.loc 1 161 5 is_stmt 1 view .LVU307
 1176              	@ armwave.c:165:     g_armwave_state.target_width = target_width;
 165:armwave.c     ****     g_armwave_state.target_height = target_height;
 1177              		.loc 1 165 34 is_stmt 0 view .LVU308
 1178 054c 347084E5 		str	r7, [r4, #52]	@ target_width, g_armwave_state.target_width
 1179              	@ armwave.c:166:     g_armwave_state.target_height = target_height;
 166:armwave.c     **** 
 1180              		.loc 1 166 35 view .LVU309
 1181 0550 382084E5 		str	r2, [r4, #56]	@ target_height, g_armwave_state.target_height
 1182              	@ armwave.c:164:     g_armwave_state.size = target_height * target_width;
 164:armwave.c     ****     g_armwave_state.target_width = target_width;
 1183              		.loc 1 164 26 view .LVU310
 1184 0554 306084E5 		str	r6, [r4, #48]	@ _8, g_armwave_state.size
 1185              	@ armwave.c:161:     g_armwave_state.vscale = target_height / 256;
 161:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1186              		.loc 1 161 28 view .LVU311
 1187 0558 1C1084E5 		str	r1, [r4, #28]	@ tmp176, g_armwave_state.vscale
 162:armwave.c     ****     g_armwave_state.waves = waves;
 1188              		.loc 1 162 5 is_stmt 1 view .LVU312
 163:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1189              		.loc 1 163 5 view .LVU313
 164:armwave.c     ****     g_armwave_state.target_width = target_width;
 1190              		.loc 1 164 5 view .LVU314
 165:armwave.c     ****     g_armwave_state.target_height = target_height;
 1191              		.loc 1 165 5 view .LVU315
 166:armwave.c     **** 
 1192              		.loc 1 166 5 view .LVU316
 171:armwave.c     **** 
 1193              		.loc 1 171 5 view .LVU317
 1194              	@ armwave.c:171:     g_armwave_state.slice_height = 64;  
 171:armwave.c     **** 
 1195              		.loc 1 171 34 is_stmt 0 view .LVU318
 1196 055c 283084E5 		str	r3, [r4, #40]	@ tmp183, g_armwave_state.slice_height
 173:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1197              		.loc 1 173 5 is_stmt 1 view .LVU319
 1198              	@ armwave.c:173:     if(g_armwave_state.ch1_buffer != NULL)
 173:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1199              		.loc 1 173 7 is_stmt 0 view .LVU320
 1200 0560 0100000A 		beq	.L74		@,
 174:armwave.c     **** 
 1201              		.loc 1 174 9 is_stmt 1 view .LVU321
 1202 0564 FEFFFFEB 		bl	free		@
 1203              	.LVL59:
 174:armwave.c     **** 
 1204              		.loc 1 174 9 is_stmt 0 view .LVU322
 1205 0568 306094E5 		ldr	r6, [r4, #48]	@ _8, g_armwave_state.size
 1206              	.L74:
 176:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1207              		.loc 1 176 5 is_stmt 1 view .LVU323
 1208              	@ armwave.c:176:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 176:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1209              		.loc 1 176 34 is_stmt 0 view .LVU324
 1210 056c 0110A0E3 		mov	r1, #1	@,
 1211 0570 0600A0E1 		mov	r0, r6	@, _8
 1212 0574 FEFFFFEB 		bl	calloc		@
 1213              	.LVL60:
 1214              	@ armwave.c:177:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 177:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1215              		.loc 1 177 33 view .LVU325
 1216 0578 34219FE5 		ldr	r2, .L88+12	@ tmp189,
 1217              	@ armwave.c:179:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 179:armwave.c     **** 
 1218              		.loc 1 179 33 view .LVU326
 1219 057c FA30A0E3 		mov	r3, #250	@ tmp192,
 1220              	@ armwave.c:177:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 177:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1221              		.loc 1 177 33 view .LVU327
 1222 0580 482084E5 		str	r2, [r4, #72]	@ tmp189, MEM[(short int *)&g_armwave_state + 72B]
 1223              	@ armwave.c:179:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 179:armwave.c     **** 
 1224              		.loc 1 179 33 view .LVU328
 1225 0584 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 1226              	@ armwave.c:181:     assert(g_armwave_state.ch1_buffer != NULL);
 181:armwave.c     **** 
 1227              		.loc 1 181 5 view .LVU329
 1228 0588 000050E3 		cmp	r0, #0	@ tmp186,
 1229              	@ armwave.c:176:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 176:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1230              		.loc 1 176 32 view .LVU330
 1231 058c 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 177:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1232              		.loc 1 177 5 is_stmt 1 view .LVU331
 178:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1233              		.loc 1 178 5 view .LVU332
 179:armwave.c     **** 
 1234              		.loc 1 179 5 view .LVU333
 181:armwave.c     **** 
 1235              		.loc 1 181 5 view .LVU334
 1236 0590 3500000A 		beq	.L86		@,
 184:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1237              		.loc 1 184 5 view .LVU335
 1238              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 185:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1239              		.loc 1 185 34 is_stmt 0 view .LVU336
 1240 0594 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1241              	@ armwave.c:184:     length = end_point - start_point;
 184:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1242              		.loc 1 184 12 view .LVU337
 1243 0598 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1244              	.LVL61:
 185:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1245              		.loc 1 185 5 is_stmt 1 view .LVU338
 1246              	@ armwave.c:187:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 187:armwave.c     **** 
 1247              		.loc 1 187 40 is_stmt 0 view .LVU339
 1248 059c 8500A0E1 		lsl	r0, r5, #1	@, length,
 1249              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 185:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1250              		.loc 1 185 34 view .LVU340
 1251 05a0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp197, target_width
 1252              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 185:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1253              		.loc 1 185 31 view .LVU341
 1254 05a4 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1255 05a8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp196, length
 1256              	@ armwave.c:186:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 186:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1257              		.loc 1 186 60 view .LVU342
 1258 05ac 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp223, g_armwave_state.slice_height
 1259 05b0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 1260              	@ armwave.c:185:     points_per_pixel = length / ((float)(target_width));
 185:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1261              		.loc 1 185 22 view .LVU343
 1262 05b4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp196, tmp197
 1263              	.LVL62:
 186:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1264              		.loc 1 186 5 is_stmt 1 view .LVU344
 1265              	@ armwave.c:186:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 186:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1266              		.loc 1 186 60 is_stmt 0 view .LVU345
 1267 05b8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 1268              	@ armwave.c:186:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 186:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1269              		.loc 1 186 41 view .LVU346
 1270 05bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 1271 05c0 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp203, g_armwave_state.slice_record_height
 187:armwave.c     **** 
 1272              		.loc 1 187 5 is_stmt 1 view .LVU347
 1273              	@ armwave.c:187:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 187:armwave.c     **** 
 1274              		.loc 1 187 40 is_stmt 0 view .LVU348
 1275 05c4 FEFFFFEB 		bl	malloc		@
 1276              	.LVL63:
 1277              	@ armwave.c:189:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 189:armwave.c     **** 
 1278              		.loc 1 189 5 view .LVU349
 1279 05c8 000050E3 		cmp	r0, #0	@ tmp205,
 1280              	@ armwave.c:187:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 187:armwave.c     **** 
 1281              		.loc 1 187 38 view .LVU350
 1282 05cc 600084E5 		str	r0, [r4, #96]	@ tmp205, g_armwave_state.xcoord_to_xpixel
 189:armwave.c     **** 
 1283              		.loc 1 189 5 is_stmt 1 view .LVU351
 1284 05d0 2A00000A 		beq	.L87		@,
 1285              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 192:armwave.c     **** 
 1286              		.loc 1 192 54 is_stmt 0 view .LVU352
 1287 05d4 337ADFED 		vldr.32	s15, .L88	@ tmp210,
 1288 05d8 020040E2 		sub	r0, r0, #2	@ ivtmp.73, tmp205,
 1289              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1290              		.loc 1 191 12 view .LVU353
 1291 05dc 0030A0E3 		mov	r3, #0	@ xx,
 1292              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 192:armwave.c     **** 
 1293              		.loc 1 192 54 view .LVU354
 1294 05e0 887A87EE 		vdiv.f32	s14, s15, s16	@ _20, tmp210, points_per_pixel
 1295              	.L77:
 1296              	.LVL64:
 192:armwave.c     **** 
 1297              		.loc 1 192 9 is_stmt 1 discriminator 3 view .LVU355
 1298              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 192:armwave.c     **** 
 1299              		.loc 1 192 74 is_stmt 0 discriminator 3 view .LVU356
 1300 05e4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1301              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1302              		.loc 1 191 32 discriminator 3 view .LVU357
 1303 05e8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1304              	.LVL65:
 1305              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1306              		.loc 1 191 5 discriminator 3 view .LVU358
 1307 05ec 030055E1 		cmp	r5, r3	@ length, xx
 1308              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 192:armwave.c     **** 
 1309              		.loc 1 192 74 discriminator 3 view .LVU359
 1310 05f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, xx
 1311 05f4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp212, tmp211, _20
 1312              	@ armwave.c:192:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 192:armwave.c     **** 
 1313              		.loc 1 192 46 discriminator 3 view .LVU360
 1314 05f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp213, tmp212
 1315 05fc 902A17EE 		vmov	r2, s15	@ int	@ tmp213, tmp213
 1316 0600 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp213, MEM[base: _6, offset: 0B]
 1317              	@ armwave.c:191:     for(xx = 0; xx < length; xx++) {
 191:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1318              		.loc 1 191 5 discriminator 3 view .LVU361
 1319 0604 F6FFFF1A 		bne	.L77		@,
 197:armwave.c     **** }
 1320              		.loc 1 197 5 is_stmt 1 view .LVU362
 1321              	@ armwave.c:197:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 197:armwave.c     **** }
 1322              		.loc 1 197 34 is_stmt 0 view .LVU363
 1323 0608 0601A0E1 		lsl	r0, r6, #2	@, _8,
 1324 060c FEFFFFEB 		bl	malloc		@
 1325              	.LVL66:
 1326              	@ armwave.c:198: }
 1327              		.loc 1 198 1 view .LVU364
 1328 0610 028BBDEC 		vldm	sp!, {d8}	@
 1329              		.cfi_remember_state
 1330              		.cfi_restore 80
 1331              		.cfi_restore 81
 1332              		.cfi_def_cfa_offset 24
 1333              	.LVL67:
 1334              	@ armwave.c:197:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 197:armwave.c     **** }
 1335              		.loc 1 197 32 view .LVU365
 1336 0614 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 1337              	@ armwave.c:198: }
 1338              		.loc 1 198 1 view .LVU366
 1339 0618 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1340              	.LVL68:
 1341              	.L69:
 1342              		.cfi_restore_state
 145:armwave.c     ****         g_armwave_state.row_shift = 8;
 1343              		.loc 1 145 5 is_stmt 1 view .LVU367
 1344              	@ armwave.c:145:     if(target_height == 256) {
 145:armwave.c     ****         g_armwave_state.row_shift = 8;
 1345              		.loc 1 145 7 is_stmt 0 view .LVU368
 1346 061c 010C52E3 		cmp	r2, #256	@ target_height,
 146:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1347              		.loc 1 146 9 is_stmt 1 view .LVU369
 1348              	@ armwave.c:146:         g_armwave_state.row_shift = 8;
 146:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1349              		.loc 1 146 35 is_stmt 0 view .LVU370
 1350 0620 08C0A003 		moveq	ip, #8	@ tmp159,
 1351              	@ armwave.c:150:         g_armwave_state.row_mask = 0x1ff;
 150:armwave.c     ****     } else if(target_height == 1024) {
 1352              		.loc 1 150 34 view .LVU371
 1353 0624 8CC09F15 		ldrne	ip, .L88+16	@ tmp165,
 1354              	@ armwave.c:147:         g_armwave_state.row_mask = 0x0ff;
 147:armwave.c     ****     } else if(target_height == 512) {
 1355              		.loc 1 147 34 view .LVU372
 1356 0628 FF00A003 		moveq	r0, #255	@ tmp161,
 1357              	.LVL69:
 1358              	@ armwave.c:149:         g_armwave_state.row_shift = 9;
 149:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1359              		.loc 1 149 35 view .LVU373
 1360 062c 0900A013 		movne	r0, #9	@ tmp163,
 1361              	@ armwave.c:146:         g_armwave_state.row_shift = 8;
 146:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1362              		.loc 1 146 35 view .LVU374
 1363 0630 3CC08405 		streq	ip, [r4, #60]	@ tmp159, g_armwave_state.row_shift
 147:armwave.c     ****     } else if(target_height == 512) {
 1364              		.loc 1 147 9 is_stmt 1 view .LVU375
 1365              	@ armwave.c:147:         g_armwave_state.row_mask = 0x0ff;
 147:armwave.c     ****     } else if(target_height == 512) {
 1366              		.loc 1 147 34 is_stmt 0 view .LVU376
 1367 0634 40008405 		streq	r0, [r4, #64]	@ tmp161, g_armwave_state.row_mask
 148:armwave.c     ****         g_armwave_state.row_shift = 9;
 1368              		.loc 1 148 12 is_stmt 1 view .LVU377
 149:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1369              		.loc 1 149 9 view .LVU378
 1370              	@ armwave.c:150:         g_armwave_state.row_mask = 0x1ff;
 150:armwave.c     ****     } else if(target_height == 1024) {
 1371              		.loc 1 150 34 is_stmt 0 view .LVU379
 1372 0638 40C08415 		strne	ip, [r4, #64]	@ tmp165, g_armwave_state.row_mask
 1373              	@ armwave.c:149:         g_armwave_state.row_shift = 9;
 149:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1374              		.loc 1 149 35 view .LVU380
 1375 063c 3C008415 		strne	r0, [r4, #60]	@ tmp163, g_armwave_state.row_shift
 150:armwave.c     ****     } else if(target_height == 1024) {
 1376              		.loc 1 150 9 is_stmt 1 view .LVU381
 1377 0640 B9FFFFEA 		b	.L72		@
 1378              	.L85:
 152:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1379              		.loc 1 152 9 view .LVU382
 1380              	@ armwave.c:153:         g_armwave_state.row_mask = 0x3ff;
 153:armwave.c     ****     } else if(target_height == 2048) {
 1381              		.loc 1 153 34 is_stmt 0 view .LVU383
 1382 0644 70C09FE5 		ldr	ip, .L88+20	@ tmp169,
 1383              	@ armwave.c:152:         g_armwave_state.row_shift = 10;
 152:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1384              		.loc 1 152 35 view .LVU384
 1385 0648 0A00A0E3 		mov	r0, #10	@ tmp167,
 1386              	@ armwave.c:153:         g_armwave_state.row_mask = 0x3ff;
 153:armwave.c     ****     } else if(target_height == 2048) {
 1387              		.loc 1 153 34 view .LVU385
 1388 064c 40C084E5 		str	ip, [r4, #64]	@ tmp169, g_armwave_state.row_mask
 1389              	@ armwave.c:152:         g_armwave_state.row_shift = 10;
 152:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1390              		.loc 1 152 35 view .LVU386
 1391 0650 3C0084E5 		str	r0, [r4, #60]	@ tmp167, g_armwave_state.row_shift
 153:armwave.c     ****     } else if(target_height == 2048) {
 1392              		.loc 1 153 9 is_stmt 1 view .LVU387
 1393 0654 B4FFFFEA 		b	.L72		@
 1394              	.L84:
 143:armwave.c     **** 
 1395              		.loc 1 143 5 discriminator 2 view .LVU388
 1396 0658 60309FE5 		ldr	r3, .L88+24	@,
 1397              	.LVL70:
 143:armwave.c     **** 
 1398              		.loc 1 143 5 is_stmt 0 discriminator 2 view .LVU389
 1399 065c 8F20A0E3 		mov	r2, #143	@,
 1400 0660 5C109FE5 		ldr	r1, .L88+28	@,
 1401 0664 5C009FE5 		ldr	r0, .L88+32	@,
 1402 0668 FEFFFFEB 		bl	__assert_fail		@
 1403              	.LVL71:
 1404              	.L86:
 181:armwave.c     **** 
 1405              		.loc 1 181 5 is_stmt 1 discriminator 1 view .LVU390
 1406 066c 4C309FE5 		ldr	r3, .L88+24	@,
 1407 0670 B520A0E3 		mov	r2, #181	@,
 1408 0674 48109FE5 		ldr	r1, .L88+28	@,
 1409 0678 4C009FE5 		ldr	r0, .L88+36	@,
 1410 067c FEFFFFEB 		bl	__assert_fail		@
 1411              	.LVL72:
 1412              	.L87:
 189:armwave.c     **** 
 1413              		.loc 1 189 5 discriminator 1 view .LVU391
 1414 0680 38309FE5 		ldr	r3, .L88+24	@,
 1415 0684 BD20A0E3 		mov	r2, #189	@,
 1416 0688 34109FE5 		ldr	r1, .L88+28	@,
 1417 068c 3C009FE5 		ldr	r0, .L88+40	@,
 1418 0690 FEFFFFEB 		bl	__assert_fail		@
 1419              	.LVL73:
 1420              	.L83:
 137:armwave.c     **** 
 1421              		.loc 1 137 5 discriminator 1 view .LVU392
 1422 0694 24309FE5 		ldr	r3, .L88+24	@,
 1423              	.LVL74:
 137:armwave.c     **** 
 1424              		.loc 1 137 5 is_stmt 0 discriminator 1 view .LVU393
 1425 0698 8920A0E3 		mov	r2, #137	@,
 1426 069c 20109FE5 		ldr	r1, .L88+28	@,
 1427 06a0 2C009FE5 		ldr	r0, .L88+44	@,
 1428              	.LVL75:
 137:armwave.c     **** 
 1429              		.loc 1 137 5 discriminator 1 view .LVU394
 1430 06a4 FEFFFFEB 		bl	__assert_fail		@
 1431              	.LVL76:
 1432              	.L89:
 1433              		.align	2
 1434              	.L88:
 1435 06a8 0000803F 		.word	1065353216
 1436 06ac 00000000 		.word	g_armwave_state
 1437 06b0 FF070000 		.word	2047
 1438 06b4 F609F406 		.word	116656630
 1439 06b8 FF010000 		.word	511
 1440 06bc FF030000 		.word	1023
 1441 06c0 00000000 		.word	.LANCHOR0
 1442 06c4 00000000 		.word	.LC0
 1443 06c8 0C000000 		.word	.LC1
 1444 06cc 6C000000 		.word	.LC2
 1445 06d0 90000000 		.word	.LC3
 1446 06d4 BC000000 		.word	.LC4
 1447              		.cfi_endproc
 1448              	.LFE61:
 1450              		.align	2
 1451              		.global	armwave_clear_buffer
 1452              		.syntax unified
 1453              		.arm
 1454              		.fpu vfp
 1456              	armwave_clear_buffer:
 1457              	.LVL77:
 1458              	.LFB62:
 199:armwave.c     **** 
 200:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 201:armwave.c     **** {
 1459              		.loc 1 201 1 is_stmt 1 view -0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 0
 1462              		@ frame_needed = 0, uses_anonymous_args = 0
 1463              		@ link register save eliminated.
 202:armwave.c     ****     // Flags ignored, only one buffer cleared
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1464              		.loc 1 203 5 view .LVU396
 1465 06d8 0C309FE5 		ldr	r3, .L91	@ tmp113,
 1466 06dc 0010A0E3 		mov	r1, #0	@,
 1467 06e0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1468 06e4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1469              	.LVL78:
 1470              		.loc 1 203 5 is_stmt 0 view .LVU397
 1471 06e8 FEFFFFEA 		b	memset		@
 1472              	.LVL79:
 1473              	.L92:
 1474              		.align	2
 1475              	.L91:
 1476 06ec 00000000 		.word	g_armwave_state
 1477              		.cfi_endproc
 1478              	.LFE62:
 1480              		.align	2
 1481              		.global	armwave_fill_pixbuf_256
 1482              		.syntax unified
 1483              		.arm
 1484              		.fpu vfp
 1486              	armwave_fill_pixbuf_256:
 1487              	.LVL80:
 1488              	.LFB63:
 204:armwave.c     **** }
 205:armwave.c     **** 
 206:armwave.c     **** /*
 207:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 208:armwave.c     ****  */
 209:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 210:armwave.c     **** {
 1489              		.loc 1 210 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
 211:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1493              		.loc 1 211 5 view .LVU399
 212:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1494              		.loc 1 212 5 view .LVU400
 213:armwave.c     ****     uint8_t r, g, b, value;
 1495              		.loc 1 213 5 view .LVU401
 214:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1496              		.loc 1 214 5 view .LVU402
 1497              	@ armwave.c:210: {
 210:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1498              		.loc 1 210 1 is_stmt 0 view .LVU403
 1499 06f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1500              		.cfi_def_cfa_offset 36
 1501              		.cfi_offset 4, -36
 1502              		.cfi_offset 5, -32
 1503              		.cfi_offset 6, -28
 1504              		.cfi_offset 7, -24
 1505              		.cfi_offset 8, -20
 1506              		.cfi_offset 9, -16
 1507              		.cfi_offset 10, -12
 1508              		.cfi_offset 11, -8
 1509              		.cfi_offset 14, -4
 1510              	@ armwave.c:218:     assert(out_buffer != NULL);
 215:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 216:armwave.c     ****     uint32_t offset;
 217:armwave.c     **** 
 218:armwave.c     ****     assert(out_buffer != NULL);
 1511              		.loc 1 218 5 view .LVU404
 1512 06f4 000050E3 		cmp	r0, #0	@ out_buffer
 1513              	@ armwave.c:214:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 214:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1514              		.loc 1 214 15 view .LVU405
 1515 06f8 44529FE5 		ldr	r5, .L120	@ tmp361,
 1516              	@ armwave.c:210: {
 210:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1517              		.loc 1 210 1 view .LVU406
 1518 06fc 0CD04DE2 		sub	sp, sp, #12	@,,
 1519              		.cfi_def_cfa_offset 48
 1520              	@ armwave.c:214:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 214:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1521              		.loc 1 214 15 view .LVU407
 1522 0700 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1523              	.LVL81:
 215:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1524              		.loc 1 215 5 is_stmt 1 view .LVU408
 216:armwave.c     **** 
 1525              		.loc 1 216 5 view .LVU409
 1526              		.loc 1 218 5 view .LVU410
 1527 0704 8900000A 		beq	.L118		@,
 219:armwave.c     **** 
 220:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 221:armwave.c     **** 
 222:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1528              		.loc 1 222 5 view .LVU411
 1529              	@ armwave.c:222:     npix = g_armwave_state.target_width * 256;
 1530              		.loc 1 222 41 is_stmt 0 view .LVU412
 1531 0708 34C095E5 		ldr	ip, [r5, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1532 070c 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1533              	.LVL82:
 223:armwave.c     **** 
 224:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1534              		.loc 1 224 5 is_stmt 1 view .LVU413
 1535              		.loc 1 224 5 is_stmt 0 view .LVU414
 1536 0710 00005CE3 		cmp	ip, #0	@ npix,
 1537 0714 0A0000DA 		ble	.L93		@,
 1538              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 225:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 226:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 227:armwave.c     ****         // most normal waveforms.
 228:armwave.c     ****         wave_word = *base_32ptr++;
 229:armwave.c     **** 
 230:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 231:armwave.c     ****             for(i = 0; i < 4; i++) {
 232:armwave.c     ****                 value = wave_word & 0xff;
 233:armwave.c     ****                 wave_word >>= 8;
 234:armwave.c     **** 
 235:armwave.c     ****                 if(value != 0) {
 236:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1539              		.loc 1 236 52 view .LVU415
 1540 0718 F8A4D5E1 		ldrsh	r10, [r5, #72]	@ _70, g_armwave_state.ch1_color.r
 1541              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1542              		.loc 1 237 52 view .LVU416
 1543 071c FA94D5E1 		ldrsh	r9, [r5, #74]	@ _76, g_armwave_state.ch1_color.g
 1544              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1545              		.loc 1 238 52 view .LVU417
 1546 0720 FCB4D5E1 		ldrsh	fp, [r5, #76]	@ _80, g_armwave_state.ch1_color.b
 1547              	@ armwave.c:224:     for(n = 0; n < npix; n += 4) {
 224:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1548              		.loc 1 224 11 view .LVU418
 1549 0724 0030A0E3 		mov	r3, #0	@ n,
 1550 0728 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1551              	.LVL83:
 1552              	.L102:
 228:armwave.c     **** 
 1553              		.loc 1 228 9 is_stmt 1 view .LVU419
 1554              	@ armwave.c:228:         wave_word = *base_32ptr++;
 228:armwave.c     **** 
 1555              		.loc 1 228 19 is_stmt 0 view .LVU420
 1556 072c 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1557              	.LVL84:
 230:armwave.c     ****             for(i = 0; i < 4; i++) {
 1558              		.loc 1 230 9 is_stmt 1 view .LVU421
 1559              	@ armwave.c:230:         if(COND_UNLIKELY(wave_word != 0)) {
 230:armwave.c     ****             for(i = 0; i < 4; i++) {
 1560              		.loc 1 230 11 is_stmt 0 view .LVU422
 1561 0730 000052E3 		cmp	r2, #0	@ wave_word,
 1562 0734 0400001A 		bne	.L119		@,
 1563              	.LVL85:
 1564              	.L97:
 1565              	@ armwave.c:224:     for(n = 0; n < npix; n += 4) {
 224:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1566              		.loc 1 224 28 discriminator 2 view .LVU423
 1567 0738 043083E2 		add	r3, r3, #4	@ n, n,
 1568              	.LVL86:
 1569              	@ armwave.c:224:     for(n = 0; n < npix; n += 4) {
 224:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1570              		.loc 1 224 5 discriminator 2 view .LVU424
 1571 073c 03005CE1 		cmp	ip, r3	@ npix, n
 1572 0740 F9FFFFCA 		bgt	.L102		@,
 1573              	.LVL87:
 1574              	.L93:
 1575              	@ armwave.c:257: }
 239:armwave.c     **** 
 240:armwave.c     ****                     r = MIN(rr, 255);
 241:armwave.c     ****                     g = MIN(gg, 255);
 242:armwave.c     ****                     b = MIN(bb, 255);
 243:armwave.c     **** 
 244:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 246:armwave.c     **** 
 247:armwave.c     ****                     // Is there a better way?
 248:armwave.c     ****                     nsub = n + i;
 249:armwave.c     ****                     xx = nsub & 0xff;
 250:armwave.c     ****                     yy = nsub >> 8;
 251:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 252:armwave.c     ****                     *(out_buffer_base + offset) = word;
 253:armwave.c     ****                 }
 254:armwave.c     ****             }
 255:armwave.c     ****         } 
 256:armwave.c     ****     }
 257:armwave.c     **** }
 1576              		.loc 1 257 1 view .LVU425
 1577 0744 0CD08DE2 		add	sp, sp, #12	@,,
 1578              		.cfi_remember_state
 1579              		.cfi_def_cfa_offset 36
 1580              		@ sp needed	@
 1581 0748 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1582              	.LVL88:
 1583              	.L119:
 1584              		.cfi_restore_state
 232:armwave.c     ****                 wave_word >>= 8;
 1585              		.loc 1 232 17 is_stmt 1 view .LVU426
 233:armwave.c     **** 
 1586              		.loc 1 233 17 view .LVU427
 1587              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1588              		.loc 1 235 19 is_stmt 0 view .LVU428
 1589 074c FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1590              	@ armwave.c:233:                 wave_word >>= 8;
 233:armwave.c     **** 
 1591              		.loc 1 233 27 view .LVU429
 1592 0750 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1593              	.LVL89:
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1594              		.loc 1 235 17 is_stmt 1 view .LVU430
 1595              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1596              		.loc 1 235 19 is_stmt 0 view .LVU431
 1597 0754 1900000A 		beq	.L98		@,
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1598              		.loc 1 236 21 is_stmt 1 view .LVU432
 1599              	.LVL90:
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1600              		.loc 1 237 21 view .LVU433
 238:armwave.c     **** 
 1601              		.loc 1 238 21 view .LVU434
 240:armwave.c     ****                     g = MIN(gg, 255);
 1602              		.loc 1 240 21 view .LVU435
 241:armwave.c     ****                     b = MIN(bb, 255);
 1603              		.loc 1 241 21 view .LVU436
 242:armwave.c     **** 
 1604              		.loc 1 242 21 view .LVU437
 245:armwave.c     **** 
 1605              		.loc 1 245 21 view .LVU438
 248:armwave.c     ****                     xx = nsub & 0xff;
 1606              		.loc 1 248 21 view .LVU439
 249:armwave.c     ****                     yy = nsub >> 8;
 1607              		.loc 1 249 21 view .LVU440
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1608              		.loc 1 250 21 view .LVU441
 251:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1609              		.loc 1 251 21 view .LVU442
 252:armwave.c     ****                 }
 1610              		.loc 1 252 21 view .LVU443
 1611              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1612              		.loc 1 238 55 is_stmt 0 view .LVU444
 1613 0758 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1614              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1615              		.loc 1 237 55 view .LVU445
 1616 075c 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1617              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1618              		.loc 1 238 24 view .LVU446
 1619 0760 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1620              	.LVL91:
 1621              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1622              		.loc 1 242 25 view .LVU447
 1623 0764 FF0054E3 		cmp	r4, #255	@ bb,
 1624              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1625              		.loc 1 237 24 view .LVU448
 1626 0768 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1627              	.LVL92:
 1628              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1629              		.loc 1 242 25 view .LVU449
 1630 076c FF40A0A3 		movge	r4, #255	@ bb,
 1631              	.LVL93:
 1632              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1633              		.loc 1 236 55 view .LVU450
 1634 0770 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1635              	.LVL94:
 1636              	@ armwave.c:241:                     g = MIN(gg, 255);
 241:armwave.c     ****                     b = MIN(bb, 255);
 1637              		.loc 1 241 25 view .LVU451
 1638 0774 FF0058E3 		cmp	r8, #255	@ gg,
 1639 0778 FF80A0A3 		movge	r8, #255	@ gg,
 1640              	.LVL95:
 1641              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1642              		.loc 1 236 24 view .LVU452
 1643 077c 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1644              	.LVL96:
 1645              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1646              		.loc 1 245 56 view .LVU453
 1647 0780 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1648              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1649              		.loc 1 252 39 view .LVU454
 1650 0784 340095E5 		ldr	r0, [r5, #52]	@ tmp373, g_armwave_state.target_width
 1651              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1652              		.loc 1 245 44 view .LVU455
 1653 0788 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1654              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1655              		.loc 1 240 25 view .LVU456
 1656 078c FF0056E3 		cmp	r6, #255	@ rr,
 1657              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1658              		.loc 1 245 56 view .LVU457
 1659 0790 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1660              	@ armwave.c:249:                     xx = nsub & 0xff;
 249:armwave.c     ****                     yy = nsub >> 8;
 1661              		.loc 1 249 24 view .LVU458
 1662 0794 7370EFE6 		uxtb	r7, r3	@ xx, n
 1663              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1664              		.loc 1 245 44 view .LVU459
 1665 0798 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1666              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1667              		.loc 1 245 51 view .LVU460
 1668 079c 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1669              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1670              		.loc 1 240 25 view .LVU461
 1671 07a0 FF60A0A3 		movge	r6, #255	@ rr,
 1672              	.LVL97:
 1673              	@ armwave.c:250:                     yy = nsub >> 8;
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1674              		.loc 1 250 31 view .LVU462
 1675 07a4 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1676              	.LVL98:
 1677              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1678              		.loc 1 252 39 view .LVU463
 1679 07a8 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1680              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1681              		.loc 1 245 62 view .LVU464
 1682 07ac 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1683              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1684              		.loc 1 252 49 view .LVU465
 1685 07b0 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1686              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1687              		.loc 1 245 62 view .LVU466
 1688 07b4 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1689              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1690              		.loc 1 245 26 view .LVU467
 1691 07b8 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1692              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1693              		.loc 1 252 49 view .LVU468
 1694 07bc 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1695              	.LVL99:
 1696              	.L98:
 232:armwave.c     ****                 wave_word >>= 8;
 1697              		.loc 1 232 17 is_stmt 1 view .LVU469
 233:armwave.c     **** 
 1698              		.loc 1 233 17 view .LVU470
 1699              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1700              		.loc 1 235 19 is_stmt 0 view .LVU471
 1701 07c0 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1702              	.LVL100:
 1703              	@ armwave.c:233:                 wave_word >>= 8;
 233:armwave.c     **** 
 1704              		.loc 1 233 27 view .LVU472
 1705 07c4 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1706              	.LVL101:
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1707              		.loc 1 235 17 is_stmt 1 view .LVU473
 1708              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1709              		.loc 1 235 19 is_stmt 0 view .LVU474
 1710 07c8 1C00000A 		beq	.L99		@,
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1711              		.loc 1 236 21 is_stmt 1 view .LVU475
 1712              	.LVL102:
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1713              		.loc 1 237 21 view .LVU476
 238:armwave.c     **** 
 1714              		.loc 1 238 21 view .LVU477
 240:armwave.c     ****                     g = MIN(gg, 255);
 1715              		.loc 1 240 21 view .LVU478
 241:armwave.c     ****                     b = MIN(bb, 255);
 1716              		.loc 1 241 21 view .LVU479
 242:armwave.c     **** 
 1717              		.loc 1 242 21 view .LVU480
 245:armwave.c     **** 
 1718              		.loc 1 245 21 view .LVU481
 248:armwave.c     ****                     xx = nsub & 0xff;
 1719              		.loc 1 248 21 view .LVU482
 1720              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1721              		.loc 1 238 55 is_stmt 0 view .LVU483
 1722 07cc 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1723              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1724              		.loc 1 237 55 view .LVU484
 1725 07d0 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1726              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1727              		.loc 1 238 24 view .LVU485
 1728 07d4 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1729              	.LVL103:
 1730              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1731              		.loc 1 242 25 view .LVU486
 1732 07d8 FF0054E3 		cmp	r4, #255	@ bb,
 1733 07dc FF40A0A3 		movge	r4, #255	@ bb,
 1734              	.LVL104:
 1735              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1736              		.loc 1 236 55 view .LVU487
 1737 07e0 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1738              	.LVL105:
 1739              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1740              		.loc 1 237 24 view .LVU488
 1741 07e4 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1742              	.LVL106:
 1743              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1744              		.loc 1 245 44 view .LVU489
 1745 07e8 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1746              	@ armwave.c:241:                     g = MIN(gg, 255);
 241:armwave.c     ****                     b = MIN(bb, 255);
 1747              		.loc 1 241 25 view .LVU490
 1748 07ec FF0057E3 		cmp	r7, #255	@ gg,
 1749 07f0 016083E2 		add	r6, r3, #1	@ _158, n,
 249:armwave.c     ****                     yy = nsub >> 8;
 1750              		.loc 1 249 21 is_stmt 1 view .LVU491
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1751              		.loc 1 250 21 view .LVU492
 251:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1752              		.loc 1 251 21 view .LVU493
 252:armwave.c     ****                 }
 1753              		.loc 1 252 21 view .LVU494
 1754              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1755              		.loc 1 245 44 is_stmt 0 view .LVU495
 1756 07f4 FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1757              	@ armwave.c:241:                     g = MIN(gg, 255);
 241:armwave.c     ****                     b = MIN(bb, 255);
 1758              		.loc 1 241 25 view .LVU496
 1759 07f8 FF70A0A3 		movge	r7, #255	@ gg,
 1760              	.LVL107:
 1761              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1762              		.loc 1 245 44 view .LVU497
 1763 07fc 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1764              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1765              		.loc 1 252 39 view .LVU498
 1766 0800 344095E5 		ldr	r4, [r5, #52]	@ tmp376, g_armwave_state.target_width
 1767              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1768              		.loc 1 236 24 view .LVU499
 1769 0804 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1770              	.LVL108:
 1771              	@ armwave.c:249:                     xx = nsub & 0xff;
 249:armwave.c     ****                     yy = nsub >> 8;
 1772              		.loc 1 249 24 view .LVU500
 1773 0808 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1774              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1775              		.loc 1 240 25 view .LVU501
 1776 080c FF005EE3 		cmp	lr, #255	@ rr,
 1777              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1778              		.loc 1 245 56 view .LVU502
 1779 0810 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1780              	@ armwave.c:250:                     yy = nsub >> 8;
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1781              		.loc 1 250 31 view .LVU503
 1782 0814 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1783              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1784              		.loc 1 252 39 view .LVU504
 1785 0818 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1786              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1787              		.loc 1 240 25 view .LVU505
 1788 081c FFE0A0A3 		movge	lr, #255	@ rr,
 1789              	.LVL109:
 1790              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1791              		.loc 1 245 51 view .LVU506
 1792 0820 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1793              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1794              		.loc 1 245 56 view .LVU507
 1795 0824 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1796              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1797              		.loc 1 245 51 view .LVU508
 1798 0828 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1799              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1800              		.loc 1 245 62 view .LVU509
 1801 082c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1802              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1803              		.loc 1 252 49 view .LVU510
 1804 0830 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1805              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1806              		.loc 1 245 62 view .LVU511
 1807 0834 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1808              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1809              		.loc 1 245 26 view .LVU512
 1810 0838 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1811              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1812              		.loc 1 252 49 view .LVU513
 1813 083c 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1814              	.LVL110:
 1815              	.L99:
 232:armwave.c     ****                 wave_word >>= 8;
 1816              		.loc 1 232 17 is_stmt 1 view .LVU514
 233:armwave.c     **** 
 1817              		.loc 1 233 17 view .LVU515
 1818              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1819              		.loc 1 235 19 is_stmt 0 view .LVU516
 1820 0840 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1821              	@ armwave.c:233:                 wave_word >>= 8;
 233:armwave.c     **** 
 1822              		.loc 1 233 27 view .LVU517
 1823 0844 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1824              	.LVL111:
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1825              		.loc 1 235 17 is_stmt 1 view .LVU518
 1826              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1827              		.loc 1 235 19 is_stmt 0 view .LVU519
 1828 0848 1A00000A 		beq	.L100		@,
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1829              		.loc 1 236 21 is_stmt 1 view .LVU520
 1830              	.LVL112:
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1831              		.loc 1 237 21 view .LVU521
 238:armwave.c     **** 
 1832              		.loc 1 238 21 view .LVU522
 240:armwave.c     ****                     g = MIN(gg, 255);
 1833              		.loc 1 240 21 view .LVU523
 241:armwave.c     ****                     b = MIN(bb, 255);
 1834              		.loc 1 241 21 view .LVU524
 242:armwave.c     **** 
 1835              		.loc 1 242 21 view .LVU525
 245:armwave.c     **** 
 1836              		.loc 1 245 21 view .LVU526
 248:armwave.c     ****                     xx = nsub & 0xff;
 1837              		.loc 1 248 21 view .LVU527
 1838              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1839              		.loc 1 238 55 is_stmt 0 view .LVU528
 1840 084c 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1841              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1842              		.loc 1 237 55 view .LVU529
 1843 0850 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1844              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1845              		.loc 1 238 24 view .LVU530
 1846 0854 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1847              	.LVL113:
 1848              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1849              		.loc 1 236 55 view .LVU531
 1850 0858 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1851              	.LVL114:
 1852              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1853              		.loc 1 242 25 view .LVU532
 1854 085c FF0054E3 		cmp	r4, #255	@ bb,
 1855              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1856              		.loc 1 237 24 view .LVU533
 1857 0860 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1858              	.LVL115:
 1859              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1860              		.loc 1 242 25 view .LVU534
 1861 0864 FF40A0A3 		movge	r4, #255	@ bb,
 1862              	.LVL116:
 1863              	@ armwave.c:241:                     g = MIN(gg, 255);
 241:armwave.c     ****                     b = MIN(bb, 255);
 1864              		.loc 1 241 25 view .LVU535
 1865 0868 FF0056E3 		cmp	r6, #255	@ gg,
 1866 086c FF60A0A3 		movge	r6, #255	@ gg,
 1867              	.LVL117:
 241:armwave.c     ****                     b = MIN(bb, 255);
 1868              		.loc 1 241 25 view .LVU536
 1869 0870 027083E2 		add	r7, r3, #2	@ _66, n,
 249:armwave.c     ****                     yy = nsub >> 8;
 1870              		.loc 1 249 21 is_stmt 1 view .LVU537
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1871              		.loc 1 250 21 view .LVU538
 251:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1872              		.loc 1 251 21 view .LVU539
 252:armwave.c     ****                 }
 1873              		.loc 1 252 21 view .LVU540
 1874              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1875              		.loc 1 236 24 is_stmt 0 view .LVU541
 1876 0874 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1877              	.LVL118:
 1878              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1879              		.loc 1 252 39 view .LVU542
 1880 0878 340095E5 		ldr	r0, [r5, #52]	@ tmp377, g_armwave_state.target_width
 1881              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1882              		.loc 1 240 25 view .LVU543
 1883 087c FF005EE3 		cmp	lr, #255	@ rr,
 1884              	@ armwave.c:249:                     xx = nsub & 0xff;
 249:armwave.c     ****                     yy = nsub >> 8;
 1885              		.loc 1 249 24 view .LVU544
 1886 0880 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1887              	.LVL119:
 1888              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1889              		.loc 1 245 56 view .LVU545
 1890 0884 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1891              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1892              		.loc 1 245 44 view .LVU546
 1893 0888 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1894              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1895              		.loc 1 240 25 view .LVU547
 1896 088c FFE0A0A3 		movge	lr, #255	@ rr,
 1897              	.LVL120:
 1898              	@ armwave.c:250:                     yy = nsub >> 8;
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1899              		.loc 1 250 31 view .LVU548
 1900 0890 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1901              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1902              		.loc 1 252 39 view .LVU549
 1903 0894 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1904              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1905              		.loc 1 245 44 view .LVU550
 1906 0898 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1907              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1908              		.loc 1 245 56 view .LVU551
 1909 089c 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1910              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1911              		.loc 1 245 51 view .LVU552
 1912 08a0 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1913              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1914              		.loc 1 245 62 view .LVU553
 1915 08a4 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1916              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1917              		.loc 1 252 49 view .LVU554
 1918 08a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1919              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1920              		.loc 1 245 62 view .LVU555
 1921 08ac 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1922              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1923              		.loc 1 245 26 view .LVU556
 1924 08b0 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1925              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 1926              		.loc 1 252 49 view .LVU557
 1927 08b4 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1928              	.L100:
 1929              	.LVL121:
 232:armwave.c     ****                 wave_word >>= 8;
 1930              		.loc 1 232 17 is_stmt 1 view .LVU558
 233:armwave.c     **** 
 1931              		.loc 1 233 17 view .LVU559
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1932              		.loc 1 235 17 view .LVU560
 1933              	@ armwave.c:235:                 if(value != 0) {
 235:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1934              		.loc 1 235 19 is_stmt 0 view .LVU561
 1935 08b8 000052E3 		cmp	r2, #0	@ wave_word,
 1936 08bc 9DFFFF0A 		beq	.L97		@,
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1937              		.loc 1 236 21 is_stmt 1 view .LVU562
 1938              	.LVL122:
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1939              		.loc 1 237 21 view .LVU563
 238:armwave.c     **** 
 1940              		.loc 1 238 21 view .LVU564
 240:armwave.c     ****                     g = MIN(gg, 255);
 1941              		.loc 1 240 21 view .LVU565
 241:armwave.c     ****                     b = MIN(bb, 255);
 1942              		.loc 1 241 21 view .LVU566
 242:armwave.c     **** 
 1943              		.loc 1 242 21 view .LVU567
 245:armwave.c     **** 
 1944              		.loc 1 245 21 view .LVU568
 248:armwave.c     ****                     xx = nsub & 0xff;
 1945              		.loc 1 248 21 view .LVU569
 1946              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1947              		.loc 1 238 55 is_stmt 0 view .LVU570
 1948 08c0 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1949              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1950              		.loc 1 237 55 view .LVU571
 1951 08c4 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 1952              	@ armwave.c:238:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 1953              		.loc 1 238 24 view .LVU572
 1954 08c8 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 1955              	.LVL123:
 1956              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1957              		.loc 1 236 55 view .LVU573
 1958 08cc 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 1959              	.LVL124:
 1960              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1961              		.loc 1 242 25 view .LVU574
 1962 08d0 FF005EE3 		cmp	lr, #255	@ bb,
 1963              	@ armwave.c:237:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1964              		.loc 1 237 24 view .LVU575
 1965 08d4 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 1966              	.LVL125:
 1967              	@ armwave.c:242:                     b = MIN(bb, 255);
 242:armwave.c     **** 
 1968              		.loc 1 242 25 view .LVU576
 1969 08d8 FFE0A0A3 		movge	lr, #255	@ bb,
 1970              	.LVL126:
 1971              	@ armwave.c:241:                     g = MIN(gg, 255);
 241:armwave.c     ****                     b = MIN(bb, 255);
 1972              		.loc 1 241 25 view .LVU577
 1973 08dc FF0054E3 		cmp	r4, #255	@ gg,
 1974 08e0 FF40A0A3 		movge	r4, #255	@ gg,
 1975              	.LVL127:
 241:armwave.c     ****                     b = MIN(bb, 255);
 1976              		.loc 1 241 25 view .LVU578
 1977 08e4 036083E2 		add	r6, r3, #3	@ _59, n,
 249:armwave.c     ****                     yy = nsub >> 8;
 1978              		.loc 1 249 21 is_stmt 1 view .LVU579
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1979              		.loc 1 250 21 view .LVU580
 251:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1980              		.loc 1 251 21 view .LVU581
 252:armwave.c     ****                 }
 1981              		.loc 1 252 21 view .LVU582
 1982              	@ armwave.c:236:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1983              		.loc 1 236 24 is_stmt 0 view .LVU583
 1984 08e8 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 1985              	.LVL128:
 1986              	@ armwave.c:251:                     offset = yy + (xx * g_armwave_state.target_width);
 251:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1987              		.loc 1 251 39 view .LVU584
 1988 08ec 347095E5 		ldr	r7, [r5, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1989              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 1990              		.loc 1 240 25 view .LVU585
 1991 08f0 FF0052E3 		cmp	r2, #255	@ rr,
 1992              	@ armwave.c:249:                     xx = nsub & 0xff;
 249:armwave.c     ****                     yy = nsub >> 8;
 1993              		.loc 1 249 24 view .LVU586
 1994 08f4 7680EFE6 		uxtb	r8, r6	@ xx, _59
 1995              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1996              		.loc 1 245 56 view .LVU587
 1997 08f8 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 1998              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 1999              		.loc 1 245 44 view .LVU588
 2000 08fc 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 2001              	@ armwave.c:240:                     r = MIN(rr, 255);
 240:armwave.c     ****                     g = MIN(gg, 255);
 2002              		.loc 1 240 25 view .LVU589
 2003 0900 FF20A0A3 		movge	r2, #255	@ rr,
 2004              	.LVL129:
 2005              	@ armwave.c:250:                     yy = nsub >> 8;
 250:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2006              		.loc 1 250 31 view .LVU590
 2007 0904 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2008              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2009              		.loc 1 245 44 view .LVU591
 2010 0908 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 2011              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2012              		.loc 1 245 56 view .LVU592
 2013 090c 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 2014              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 2015              		.loc 1 252 39 view .LVU593
 2016 0910 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 2017              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2018              		.loc 1 245 51 view .LVU594
 2019 0914 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 2020              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2021              		.loc 1 245 62 view .LVU595
 2022 0918 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2023              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 2024              		.loc 1 252 49 view .LVU596
 2025 091c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2026              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2027              		.loc 1 245 62 view .LVU597
 2028 0920 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 2029              	@ armwave.c:245:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2030              		.loc 1 245 26 view .LVU598
 2031 0924 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2032              	@ armwave.c:252:                     *(out_buffer_base + offset) = word;
 252:armwave.c     ****                 }
 2033              		.loc 1 252 49 view .LVU599
 2034 0928 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2035 092c 81FFFFEA 		b	.L97		@
 2036              	.LVL130:
 2037              	.L118:
 218:armwave.c     **** 
 2038              		.loc 1 218 5 is_stmt 1 discriminator 1 view .LVU600
 2039 0930 10309FE5 		ldr	r3, .L120+4	@,
 2040 0934 DA20A0E3 		mov	r2, #218	@,
 2041 0938 0C109FE5 		ldr	r1, .L120+8	@,
 2042              	.LVL131:
 218:armwave.c     **** 
 2043              		.loc 1 218 5 is_stmt 0 discriminator 1 view .LVU601
 2044 093c 0C009FE5 		ldr	r0, .L120+12	@,
 2045              	.LVL132:
 218:armwave.c     **** 
 2046              		.loc 1 218 5 discriminator 1 view .LVU602
 2047 0940 FEFFFFEB 		bl	__assert_fail		@
 2048              	.LVL133:
 2049              	.L121:
 218:armwave.c     **** 
 2050              		.loc 1 218 5 discriminator 1 view .LVU603
 2051              		.align	2
 2052              	.L120:
 2053 0944 00000000 		.word	g_armwave_state
 2054 0948 18000000 		.word	.LANCHOR0+24
 2055 094c 00000000 		.word	.LC0
 2056 0950 D4000000 		.word	.LC5
 2057              		.cfi_endproc
 2058              	.LFE63:
 2060              		.global	__aeabi_uidiv
 2061              		.align	2
 2062              		.global	armwave_fill_pixbuf_scaled
 2063              		.syntax unified
 2064              		.arm
 2065              		.fpu vfp
 2067              	armwave_fill_pixbuf_scaled:
 2068              	.LVL134:
 2069              	.LFB64:
 258:armwave.c     **** 
 259:armwave.c     **** /*
 260:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 261:armwave.c     ****  * Rows are repeated as necessary.
 262:armwave.c     ****  */
 263:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 264:armwave.c     **** {
 2070              		.loc 1 264 1 is_stmt 1 view -0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 16
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 265:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2074              		.loc 1 265 5 view .LVU605
 266:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2075              		.loc 1 266 5 view .LVU606
 267:armwave.c     ****     uint8_t r, g, b, value;
 2076              		.loc 1 267 5 view .LVU607
 268:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2077              		.loc 1 268 5 view .LVU608
 2078              	@ armwave.c:264: {
 264:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2079              		.loc 1 264 1 is_stmt 0 view .LVU609
 2080 0954 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2081              		.cfi_def_cfa_offset 36
 2082              		.cfi_offset 4, -36
 2083              		.cfi_offset 5, -32
 2084              		.cfi_offset 6, -28
 2085              		.cfi_offset 7, -24
 2086              		.cfi_offset 8, -20
 2087              		.cfi_offset 9, -16
 2088              		.cfi_offset 10, -12
 2089              		.cfi_offset 11, -8
 2090              		.cfi_offset 14, -4
 2091              	@ armwave.c:272:     assert(out_buffer != NULL);
 269:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 270:armwave.c     ****     uint32_t offset;
 271:armwave.c     **** 
 272:armwave.c     ****     assert(out_buffer != NULL);
 2092              		.loc 1 272 5 view .LVU610
 2093 0958 00A050E2 		subs	r10, r0, #0	@ out_buffer, out_buffer
 2094              	@ armwave.c:268:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 268:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2095              		.loc 1 268 15 view .LVU611
 2096 095c C4829FE5 		ldr	r8, .L149	@ tmp397,
 2097              	@ armwave.c:264: {
 264:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2098              		.loc 1 264 1 view .LVU612
 2099 0960 14D04DE2 		sub	sp, sp, #20	@,,
 2100              		.cfi_def_cfa_offset 56
 2101              	@ armwave.c:268:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 268:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2102              		.loc 1 268 15 view .LVU613
 2103 0964 046098E5 		ldr	r6, [r8, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2104              	.LVL135:
 269:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2105              		.loc 1 269 5 is_stmt 1 view .LVU614
 270:armwave.c     **** 
 2106              		.loc 1 270 5 view .LVU615
 2107              		.loc 1 272 5 view .LVU616
 2108 0968 A900000A 		beq	.L147		@,
 273:armwave.c     **** 
 274:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 275:armwave.c     **** 
 276:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2109              		.loc 1 276 5 view .LVU617
 2110              	@ armwave.c:276:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2111              		.loc 1 276 27 is_stmt 0 view .LVU618
 2112 096c 347098E5 		ldr	r7, [r8, #52]	@ _1, g_armwave_state.target_width
 2113              	@ armwave.c:277:     vscale = g_armwave_state.target_height / 256;
 277:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2114              		.loc 1 277 44 view .LVU619
 2115 0970 389098E5 		ldr	r9, [r8, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2116              	@ armwave.c:279:     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 278:armwave.c     **** 
 279:armwave.c     ****     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 2117              		.loc 1 279 5 view .LVU620
 2118 0974 0720A0E1 		mov	r2, r7	@, _1
 2119              	@ armwave.c:276:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 276:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2120              		.loc 1 276 41 view .LVU621
 2121 0978 0774A0E1 		lsl	r7, r7, #8	@ npix, _1,
 2122              	.LVL136:
 277:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2123              		.loc 1 277 5 is_stmt 1 view .LVU622
 2124              	@ armwave.c:277:     vscale = g_armwave_state.target_height / 256;
 277:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2125              		.loc 1 277 44 is_stmt 0 view .LVU623
 2126 097c 2994A0E1 		lsr	r9, r9, #8	@ _4, g_armwave_state.target_height,
 2127              	.LVL137:
 2128              		.loc 1 279 5 is_stmt 1 view .LVU624
 2129 0980 0710A0E1 		mov	r1, r7	@, npix
 2130 0984 0930A0E1 		mov	r3, r9	@, _4
 2131 0988 9C029FE5 		ldr	r0, .L149+4	@,
 2132              	.LVL138:
 2133              		.loc 1 279 5 is_stmt 0 view .LVU625
 2134 098c FEFFFFEB 		bl	printf		@
 2135              	.LVL139:
 280:armwave.c     **** 
 281:armwave.c     ****     /*
 282:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 283:armwave.c     ****         for(i = 0; i < 4; i++) {
 284:armwave.c     ****             yy = ((n & 0xff) * 4) + i;
 285:armwave.c     ****             xx = n >> 8;
 286:armwave.c     **** 
 287:armwave.c     ****             //offset = (yy + (xx * g_armwave_state.target_width));
 288:armwave.c     ****             //*(out_buffer_base + offset) = 0xff000000 | (yy << 8) | xx;
 289:armwave.c     **** 
 290:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 291:armwave.c     ****             *(out_buffer_base + offset) = 0xff000000 | ((i * 64) << 16); // | (yy << 8) | xx;
 292:armwave.c     ****         }
 293:armwave.c     ****     }
 294:armwave.c     ****     */
 295:armwave.c     **** 
 296:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2136              		.loc 1 296 5 is_stmt 1 view .LVU626
 2137              		.loc 1 296 5 is_stmt 0 view .LVU627
 2138 0990 000057E3 		cmp	r7, #0	@ npix,
 2139 0994 0D0000DA 		ble	.L122		@,
 2140              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 297:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 298:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 299:armwave.c     ****         // most normal waveforms.
 300:armwave.c     ****         wave_word = *base_32ptr++;
 301:armwave.c     **** 
 302:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 303:armwave.c     ****             for(w = 0; w < 4; w++) {
 304:armwave.c     ****                 value = wave_word & 0xff;
 305:armwave.c     ****                 wave_word >>= 8;
 306:armwave.c     **** 
 307:armwave.c     ****                 if(value != 0) {
 308:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 309:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2141              		.loc 1 309 52 view .LVU628
 2142 0998 FA34D8E1 		ldrsh	r3, [r8, #74]	@ _82, g_armwave_state.ch1_color.g
 2143              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2144              		.loc 1 308 52 view .LVU629
 2145 099c F8B4D8E1 		ldrsh	fp, [r8, #72]	@ _76, g_armwave_state.ch1_color.r
 2146              	@ armwave.c:296:     for(n = 0; n < npix; n += 4) {
 296:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2147              		.loc 1 296 11 view .LVU630
 2148 09a0 08A08DE5 		str	r10, [sp, #8]	@ out_buffer, %sfp
 2149              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2150              		.loc 1 309 52 view .LVU631
 2151 09a4 00308DE5 		str	r3, [sp]	@ _82, %sfp
 2152              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2153              		.loc 1 310 52 view .LVU632
 2154 09a8 FC34D8E1 		ldrsh	r3, [r8, #76]	@ _86, g_armwave_state.ch1_color.b
 2155              	@ armwave.c:296:     for(n = 0; n < npix; n += 4) {
 296:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2156              		.loc 1 296 11 view .LVU633
 2157 09ac 0040A0E3 		mov	r4, #0	@ n,
 2158 09b0 09A0A0E1 		mov	r10, r9	@ _4, _4
 2159              	.LVL140:
 2160              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2161              		.loc 1 310 52 view .LVU634
 2162 09b4 04308DE5 		str	r3, [sp, #4]	@ _86, %sfp
 2163              	.LVL141:
 2164              	.L131:
 300:armwave.c     **** 
 2165              		.loc 1 300 9 is_stmt 1 view .LVU635
 2166              	@ armwave.c:300:         wave_word = *base_32ptr++;
 300:armwave.c     **** 
 2167              		.loc 1 300 19 is_stmt 0 view .LVU636
 2168 09b8 045096E4 		ldr	r5, [r6], #4	@ wave_word, MEM[base: base_32ptr_52, offset: 4294967292B]
 2169              	.LVL142:
 302:armwave.c     ****             for(w = 0; w < 4; w++) {
 2170              		.loc 1 302 9 is_stmt 1 view .LVU637
 2171              	@ armwave.c:302:         if(COND_UNLIKELY(wave_word != 0)) {
 302:armwave.c     ****             for(w = 0; w < 4; w++) {
 2172              		.loc 1 302 11 is_stmt 0 view .LVU638
 2173 09bc 000055E3 		cmp	r5, #0	@ wave_word,
 2174 09c0 0400001A 		bne	.L148		@,
 2175              	.LVL143:
 2176              	.L126:
 2177              	@ armwave.c:296:     for(n = 0; n < npix; n += 4) {
 296:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2178              		.loc 1 296 28 discriminator 2 view .LVU639
 2179 09c4 044084E2 		add	r4, r4, #4	@ n, n,
 2180              	.LVL144:
 2181              	@ armwave.c:296:     for(n = 0; n < npix; n += 4) {
 296:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2182              		.loc 1 296 5 discriminator 2 view .LVU640
 2183 09c8 040057E1 		cmp	r7, r4	@ npix, n
 2184 09cc F9FFFFCA 		bgt	.L131		@,
 2185              	.LVL145:
 2186              	.L122:
 2187              	@ armwave.c:333: }
 311:armwave.c     **** 
 312:armwave.c     ****                     r = MIN(rr, 255);
 313:armwave.c     ****                     g = MIN(gg, 255);
 314:armwave.c     ****                     b = MIN(bb, 255);
 315:armwave.c     **** 
 316:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 317:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 318:armwave.c     **** 
 319:armwave.c     ****                     // Do line scaling as necessary.
 320:armwave.c     ****                     nsub = n + w;
 321:armwave.c     ****                     yy = (nsub & 0xff) * vscale;
 322:armwave.c     ****                     xx = nsub >> 8;
 323:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 324:armwave.c     ****                     *(out_buffer_base + offset) = word;
 325:armwave.c     ****                 }
 326:armwave.c     ****             }
 327:armwave.c     ****         }
 328:armwave.c     **** 
 329:armwave.c     ****         //printf("0x%08x, %d\n", out_buffer_base, n);
 330:armwave.c     **** 
 331:armwave.c     ****         //*out_buffer_base++ = 0xff000000 | n;
 332:armwave.c     ****     }
 333:armwave.c     **** }
 2188              		.loc 1 333 1 view .LVU641
 2189 09d0 14D08DE2 		add	sp, sp, #20	@,,
 2190              		.cfi_remember_state
 2191              		.cfi_def_cfa_offset 36
 2192              		@ sp needed	@
 2193 09d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2194              	.LVL146:
 2195              	.L148:
 2196              		.cfi_restore_state
 304:armwave.c     ****                 wave_word >>= 8;
 2197              		.loc 1 304 17 is_stmt 1 view .LVU642
 305:armwave.c     **** 
 2198              		.loc 1 305 17 view .LVU643
 2199              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2200              		.loc 1 307 19 is_stmt 0 view .LVU644
 2201 09d8 FF2015E2 		ands	r2, r5, #255	@ _78, wave_word,
 2202 09dc 0C208DE5 		str	r2, [sp, #12]	@ _78, %sfp
 2203              	@ armwave.c:305:                 wave_word >>= 8;
 305:armwave.c     **** 
 2204              		.loc 1 305 27 view .LVU645
 2205 09e0 2594A0E1 		lsr	r9, r5, #8	@ wave_word, wave_word,
 2206              	.LVL147:
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2207              		.loc 1 307 17 is_stmt 1 view .LVU646
 2208              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2209              		.loc 1 307 19 is_stmt 0 view .LVU647
 2210 09e4 1F00000A 		beq	.L127		@,
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2211              		.loc 1 308 21 is_stmt 1 view .LVU648
 2212              	.LVL148:
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2213              		.loc 1 309 21 view .LVU649
 310:armwave.c     **** 
 2214              		.loc 1 310 21 view .LVU650
 312:armwave.c     ****                     g = MIN(gg, 255);
 2215              		.loc 1 312 21 view .LVU651
 313:armwave.c     ****                     b = MIN(bb, 255);
 2216              		.loc 1 313 21 view .LVU652
 314:armwave.c     **** 
 2217              		.loc 1 314 21 view .LVU653
 317:armwave.c     **** 
 2218              		.loc 1 317 21 view .LVU654
 320:armwave.c     ****                     yy = (nsub & 0xff) * vscale;
 2219              		.loc 1 320 21 view .LVU655
 321:armwave.c     ****                     xx = nsub >> 8;
 2220              		.loc 1 321 21 view .LVU656
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2221              		.loc 1 322 21 view .LVU657
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2222              		.loc 1 323 21 view .LVU658
 324:armwave.c     ****                 }
 2223              		.loc 1 324 21 view .LVU659
 2224              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2225              		.loc 1 321 32 is_stmt 0 view .LVU660
 2226 09e8 74C0EFE6 		uxtb	ip, r4	@ n, n
 2227              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2228              		.loc 1 323 40 view .LVU661
 2229 09ec 34E098E5 		ldr	lr, [r8, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2230              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2231              		.loc 1 321 40 view .LVU662
 2232 09f0 9A0C0CE0 		mul	ip, r10, ip	@ yy, _4, n
 2233              	@ armwave.c:322:                     xx = nsub >> 8;
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2234              		.loc 1 322 31 view .LVU663
 2235 09f4 4404A0E1 		asr	r0, r4, #8	@ xx, n,
 2236              	.LVL149:
 2237              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2238              		.loc 1 323 28 view .LVU664
 2239 09f8 0A10A0E1 		mov	r1, r10	@, _4
 2240 09fc 9E0C20E0 		mla	r0, lr, ip, r0	@, g_armwave_state.target_width, yy, xx
 2241              	.LVL150:
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2242              		.loc 1 323 28 view .LVU665
 2243 0a00 FEFFFFEB 		bl	__aeabi_uidiv		@
 2244              	.LVL151:
 2245              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2246              		.loc 1 310 55 view .LVU666
 2247 0a04 0C209DE5 		ldr	r2, [sp, #12]	@ _78, %sfp
 2248 0a08 04309DE5 		ldr	r3, [sp, #4]	@ _86, %sfp
 2249 0a0c 930201E0 		mul	r1, r3, r2	@ tmp298, _86, _78
 2250              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2251              		.loc 1 309 55 view .LVU667
 2252 0a10 00309DE5 		ldr	r3, [sp]	@ _82, %sfp
 2253              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2254              		.loc 1 310 24 view .LVU668
 2255 0a14 4114A0E1 		asr	r1, r1, #8	@ bb, tmp298,
 2256              	.LVL152:
 2257              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2258              		.loc 1 309 55 view .LVU669
 2259 0a18 93020EE0 		mul	lr, r3, r2	@ tmp302, _82, _78
 2260              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2261              		.loc 1 308 55 view .LVU670
 2262 0a1c 920B02E0 		mul	r2, r2, fp	@ tmp308, _78, _76
 2263              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2264              		.loc 1 309 24 view .LVU671
 2265 0a20 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp302,
 2266              	.LVL153:
 2267              	@ armwave.c:314:                     b = MIN(bb, 255);
 314:armwave.c     **** 
 2268              		.loc 1 314 25 view .LVU672
 2269 0a24 FF0051E3 		cmp	r1, #255	@ bb,
 2270 0a28 FF10A0A3 		movge	r1, #255	@ bb,
 2271              	.LVL154:
 2272              	@ armwave.c:313:                     g = MIN(gg, 255);
 313:armwave.c     ****                     b = MIN(bb, 255);
 2273              		.loc 1 313 25 view .LVU673
 2274 0a2c FF005EE3 		cmp	lr, #255	@ gg,
 2275 0a30 FFE0A0A3 		movge	lr, #255	@ gg,
 2276              	.LVL155:
 2277              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2278              		.loc 1 308 24 view .LVU674
 2279 0a34 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp308,
 2280              	.LVL156:
 2281              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2282              		.loc 1 312 25 view .LVU675
 2283 0a38 FF005CE3 		cmp	ip, #255	@ rr,
 2284              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2285              		.loc 1 317 56 view .LVU676
 2286 0a3c 0EE4A0E1 		lsl	lr, lr, #8	@ tmp303, gg,
 2287              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2288              		.loc 1 317 44 view .LVU677
 2289 0a40 0128A0E1 		lsl	r2, r1, #16	@ tmp299, bb,
 2290              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2291              		.loc 1 312 25 view .LVU678
 2292 0a44 FFC0A0A3 		movge	ip, #255	@ rr,
 2293              	.LVL157:
 2294              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2295              		.loc 1 317 44 view .LVU679
 2296 0a48 FF2802E2 		and	r2, r2, #16711680	@ tmp300, tmp299,
 2297              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2298              		.loc 1 317 56 view .LVU680
 2299 0a4c 7EE0FFE6 		uxth	lr, lr	@ tmp304, tmp303
 2300              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2301              		.loc 1 317 51 view .LVU681
 2302 0a50 0E2082E1 		orr	r2, r2, lr	@ tmp306, tmp300, tmp304
 2303              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2304              		.loc 1 317 62 view .LVU682
 2305 0a54 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 2306              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2307              		.loc 1 324 49 view .LVU683
 2308 0a58 08309DE5 		ldr	r3, [sp, #8]	@ out_buffer, %sfp
 2309              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2310              		.loc 1 317 62 view .LVU684
 2311 0a5c 0C2082E1 		orr	r2, r2, ip	@ tmp310, tmp306, rr
 2312              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2313              		.loc 1 317 26 view .LVU685
 2314 0a60 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp310,
 2315              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2316              		.loc 1 324 49 view .LVU686
 2317 0a64 002183E7 		str	r2, [r3, r0, lsl #2]	@ word, *_114
 2318              	.LVL158:
 2319              	.L127:
 304:armwave.c     ****                 wave_word >>= 8;
 2320              		.loc 1 304 17 is_stmt 1 view .LVU687
 305:armwave.c     **** 
 2321              		.loc 1 305 17 view .LVU688
 2322              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2323              		.loc 1 307 19 is_stmt 0 view .LVU689
 2324 0a68 FF2019E2 		ands	r2, r9, #255	@ _126, wave_word,
 2325 0a6c 0C208DE5 		str	r2, [sp, #12]	@ _126, %sfp
 2326              	@ armwave.c:305:                 wave_word >>= 8;
 305:armwave.c     **** 
 2327              		.loc 1 305 27 view .LVU690
 2328 0a70 2598A0E1 		lsr	r9, r5, #16	@ wave_word, wave_word,
 2329              	.LVL159:
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2330              		.loc 1 307 17 is_stmt 1 view .LVU691
 2331              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2332              		.loc 1 307 19 is_stmt 0 view .LVU692
 2333 0a74 2000000A 		beq	.L128		@,
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2334              		.loc 1 308 21 is_stmt 1 view .LVU693
 2335              	.LVL160:
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2336              		.loc 1 309 21 view .LVU694
 310:armwave.c     **** 
 2337              		.loc 1 310 21 view .LVU695
 312:armwave.c     ****                     g = MIN(gg, 255);
 2338              		.loc 1 312 21 view .LVU696
 313:armwave.c     ****                     b = MIN(bb, 255);
 2339              		.loc 1 313 21 view .LVU697
 314:armwave.c     **** 
 2340              		.loc 1 314 21 view .LVU698
 317:armwave.c     **** 
 2341              		.loc 1 317 21 view .LVU699
 320:armwave.c     ****                     yy = (nsub & 0xff) * vscale;
 2342              		.loc 1 320 21 view .LVU700
 2343 0a78 011084E2 		add	r1, r4, #1	@ _72, n,
 321:armwave.c     ****                     xx = nsub >> 8;
 2344              		.loc 1 321 21 view .LVU701
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2345              		.loc 1 322 21 view .LVU702
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2346              		.loc 1 323 21 view .LVU703
 324:armwave.c     ****                 }
 2347              		.loc 1 324 21 view .LVU704
 2348              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2349              		.loc 1 323 40 is_stmt 0 view .LVU705
 2350 0a7c 34E098E5 		ldr	lr, [r8, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2351              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2352              		.loc 1 321 32 view .LVU706
 2353 0a80 7100EFE6 		uxtb	r0, r1	@ _72, _72
 2354              	@ armwave.c:322:                     xx = nsub >> 8;
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2355              		.loc 1 322 31 view .LVU707
 2356 0a84 41C4A0E1 		asr	ip, r1, #8	@ xx, _72,
 2357              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2358              		.loc 1 321 40 view .LVU708
 2359 0a88 9A0000E0 		mul	r0, r10, r0	@ yy, _4, _72
 2360              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2361              		.loc 1 323 28 view .LVU709
 2362 0a8c 0A10A0E1 		mov	r1, r10	@, _4
 2363 0a90 9EC020E0 		mla	r0, lr, r0, ip	@, g_armwave_state.target_width, yy, xx
 2364 0a94 FEFFFFEB 		bl	__aeabi_uidiv		@
 2365              	.LVL161:
 2366              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2367              		.loc 1 310 55 view .LVU710
 2368 0a98 0C209DE5 		ldr	r2, [sp, #12]	@ _126, %sfp
 2369 0a9c 04309DE5 		ldr	r3, [sp, #4]	@ _86, %sfp
 2370 0aa0 920301E0 		mul	r1, r2, r3	@ tmp326, _126, _86
 2371              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2372              		.loc 1 309 55 view .LVU711
 2373 0aa4 00309DE5 		ldr	r3, [sp]	@ _82, %sfp
 2374              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2375              		.loc 1 310 24 view .LVU712
 2376 0aa8 4114A0E1 		asr	r1, r1, #8	@ bb, tmp326,
 2377              	.LVL162:
 2378              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2379              		.loc 1 309 55 view .LVU713
 2380 0aac 92030EE0 		mul	lr, r2, r3	@ tmp330, _126, _82
 2381              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2382              		.loc 1 308 55 view .LVU714
 2383 0ab0 920B02E0 		mul	r2, r2, fp	@ tmp336, _126, _76
 2384              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2385              		.loc 1 309 24 view .LVU715
 2386 0ab4 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp330,
 2387              	.LVL163:
 2388              	@ armwave.c:314:                     b = MIN(bb, 255);
 314:armwave.c     **** 
 2389              		.loc 1 314 25 view .LVU716
 2390 0ab8 FF0051E3 		cmp	r1, #255	@ bb,
 2391 0abc FF10A0A3 		movge	r1, #255	@ bb,
 2392              	.LVL164:
 2393              	@ armwave.c:313:                     g = MIN(gg, 255);
 313:armwave.c     ****                     b = MIN(bb, 255);
 2394              		.loc 1 313 25 view .LVU717
 2395 0ac0 FF005EE3 		cmp	lr, #255	@ gg,
 2396 0ac4 FFE0A0A3 		movge	lr, #255	@ gg,
 2397              	.LVL165:
 2398              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2399              		.loc 1 308 24 view .LVU718
 2400 0ac8 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp336,
 2401              	.LVL166:
 2402              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2403              		.loc 1 312 25 view .LVU719
 2404 0acc FF005CE3 		cmp	ip, #255	@ rr,
 2405              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2406              		.loc 1 317 56 view .LVU720
 2407 0ad0 0EE4A0E1 		lsl	lr, lr, #8	@ tmp331, gg,
 2408              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2409              		.loc 1 317 44 view .LVU721
 2410 0ad4 0128A0E1 		lsl	r2, r1, #16	@ tmp327, bb,
 2411              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2412              		.loc 1 312 25 view .LVU722
 2413 0ad8 FFC0A0A3 		movge	ip, #255	@ rr,
 2414              	.LVL167:
 2415              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2416              		.loc 1 317 44 view .LVU723
 2417 0adc FF2802E2 		and	r2, r2, #16711680	@ tmp328, tmp327,
 2418              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2419              		.loc 1 317 56 view .LVU724
 2420 0ae0 7EE0FFE6 		uxth	lr, lr	@ tmp332, tmp331
 2421              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2422              		.loc 1 317 51 view .LVU725
 2423 0ae4 0E2082E1 		orr	r2, r2, lr	@ tmp334, tmp328, tmp332
 2424              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2425              		.loc 1 317 62 view .LVU726
 2426 0ae8 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 2427              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2428              		.loc 1 324 49 view .LVU727
 2429 0aec 08309DE5 		ldr	r3, [sp, #8]	@ out_buffer, %sfp
 2430              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2431              		.loc 1 317 62 view .LVU728
 2432 0af0 0C2082E1 		orr	r2, r2, ip	@ tmp338, tmp334, rr
 2433              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2434              		.loc 1 317 26 view .LVU729
 2435 0af4 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp338,
 2436              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2437              		.loc 1 324 49 view .LVU730
 2438 0af8 002183E7 		str	r2, [r3, r0, lsl #2]	@ word, *_162
 2439              	.LVL168:
 2440              	.L128:
 304:armwave.c     ****                 wave_word >>= 8;
 2441              		.loc 1 304 17 is_stmt 1 view .LVU731
 305:armwave.c     **** 
 2442              		.loc 1 305 17 view .LVU732
 2443              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2444              		.loc 1 307 19 is_stmt 0 view .LVU733
 2445 0afc FF9019E2 		ands	r9, r9, #255	@ _174, wave_word,
 2446              	.LVL169:
 2447              	@ armwave.c:305:                 wave_word >>= 8;
 305:armwave.c     **** 
 2448              		.loc 1 305 27 view .LVU734
 2449 0b00 255CA0E1 		lsr	r5, r5, #24	@ wave_word, wave_word,
 2450              	.LVL170:
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2451              		.loc 1 307 17 is_stmt 1 view .LVU735
 2452              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2453              		.loc 1 307 19 is_stmt 0 view .LVU736
 2454 0b04 1F00000A 		beq	.L129		@,
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2455              		.loc 1 308 21 is_stmt 1 view .LVU737
 2456              	.LVL171:
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2457              		.loc 1 309 21 view .LVU738
 310:armwave.c     **** 
 2458              		.loc 1 310 21 view .LVU739
 312:armwave.c     ****                     g = MIN(gg, 255);
 2459              		.loc 1 312 21 view .LVU740
 313:armwave.c     ****                     b = MIN(bb, 255);
 2460              		.loc 1 313 21 view .LVU741
 314:armwave.c     **** 
 2461              		.loc 1 314 21 view .LVU742
 317:armwave.c     **** 
 2462              		.loc 1 317 21 view .LVU743
 320:armwave.c     ****                     yy = (nsub & 0xff) * vscale;
 2463              		.loc 1 320 21 view .LVU744
 2464 0b08 022084E2 		add	r2, r4, #2	@ _68, n,
 321:armwave.c     ****                     xx = nsub >> 8;
 2465              		.loc 1 321 21 view .LVU745
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2466              		.loc 1 322 21 view .LVU746
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2467              		.loc 1 323 21 view .LVU747
 324:armwave.c     ****                 }
 2468              		.loc 1 324 21 view .LVU748
 2469              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2470              		.loc 1 323 40 is_stmt 0 view .LVU749
 2471 0b0c 34C098E5 		ldr	ip, [r8, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2472              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2473              		.loc 1 321 32 view .LVU750
 2474 0b10 7200EFE6 		uxtb	r0, r2	@ _68, _68
 2475              	@ armwave.c:322:                     xx = nsub >> 8;
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2476              		.loc 1 322 31 view .LVU751
 2477 0b14 4224A0E1 		asr	r2, r2, #8	@ xx, _68,
 2478              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2479              		.loc 1 321 40 view .LVU752
 2480 0b18 9A0000E0 		mul	r0, r10, r0	@ yy, _4, _68
 2481              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2482              		.loc 1 323 28 view .LVU753
 2483 0b1c 0A10A0E1 		mov	r1, r10	@, _4
 2484 0b20 9C2020E0 		mla	r0, ip, r0, r2	@, g_armwave_state.target_width, yy, xx
 2485 0b24 FEFFFFEB 		bl	__aeabi_uidiv		@
 2486              	.LVL172:
 2487              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2488              		.loc 1 310 55 view .LVU754
 2489 0b28 04309DE5 		ldr	r3, [sp, #4]	@ _86, %sfp
 2490 0b2c 990302E0 		mul	r2, r9, r3	@ tmp354, _174, _86
 2491              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2492              		.loc 1 309 55 view .LVU755
 2493 0b30 00309DE5 		ldr	r3, [sp]	@ _82, %sfp
 2494              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2495              		.loc 1 310 24 view .LVU756
 2496 0b34 4224A0E1 		asr	r2, r2, #8	@ bb, tmp354,
 2497              	.LVL173:
 2498              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2499              		.loc 1 309 55 view .LVU757
 2500 0b38 990301E0 		mul	r1, r9, r3	@ tmp358, _174, _82
 2501              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2502              		.loc 1 308 55 view .LVU758
 2503 0b3c 990B09E0 		mul	r9, r9, fp	@ tmp364, _174, _76
 2504              	.LVL174:
 2505              	@ armwave.c:314:                     b = MIN(bb, 255);
 314:armwave.c     **** 
 2506              		.loc 1 314 25 view .LVU759
 2507 0b40 FF0052E3 		cmp	r2, #255	@ bb,
 2508              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2509              		.loc 1 309 24 view .LVU760
 2510 0b44 4114A0E1 		asr	r1, r1, #8	@ gg, tmp358,
 2511              	.LVL175:
 2512              	@ armwave.c:314:                     b = MIN(bb, 255);
 314:armwave.c     **** 
 2513              		.loc 1 314 25 view .LVU761
 2514 0b48 FF20A0A3 		movge	r2, #255	@ bb,
 2515              	.LVL176:
 2516              	@ armwave.c:313:                     g = MIN(gg, 255);
 313:armwave.c     ****                     b = MIN(bb, 255);
 2517              		.loc 1 313 25 view .LVU762
 2518 0b4c FF0051E3 		cmp	r1, #255	@ gg,
 2519 0b50 FF10A0A3 		movge	r1, #255	@ gg,
 2520              	.LVL177:
 2521              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2522              		.loc 1 308 24 view .LVU763
 2523 0b54 4994A0E1 		asr	r9, r9, #8	@ rr, tmp364,
 2524              	.LVL178:
 2525              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2526              		.loc 1 312 25 view .LVU764
 2527 0b58 FF0059E3 		cmp	r9, #255	@ rr,
 2528              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2529              		.loc 1 317 56 view .LVU765
 2530 0b5c 0114A0E1 		lsl	r1, r1, #8	@ tmp359, gg,
 2531              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2532              		.loc 1 317 44 view .LVU766
 2533 0b60 0228A0E1 		lsl	r2, r2, #16	@ tmp355, bb,
 2534              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2535              		.loc 1 312 25 view .LVU767
 2536 0b64 FF90A0A3 		movge	r9, #255	@ rr,
 2537              	.LVL179:
 2538              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2539              		.loc 1 317 44 view .LVU768
 2540 0b68 FF2802E2 		and	r2, r2, #16711680	@ tmp356, tmp355,
 2541              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2542              		.loc 1 317 56 view .LVU769
 2543 0b6c 7110FFE6 		uxth	r1, r1	@ tmp360, tmp359
 2544              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2545              		.loc 1 317 51 view .LVU770
 2546 0b70 012082E1 		orr	r2, r2, r1	@ tmp362, tmp356, tmp360
 2547              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2548              		.loc 1 317 62 view .LVU771
 2549 0b74 7990EFE6 		uxtb	r9, r9	@ rr, rr
 2550              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2551              		.loc 1 324 49 view .LVU772
 2552 0b78 08309DE5 		ldr	r3, [sp, #8]	@ out_buffer, %sfp
 2553              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2554              		.loc 1 317 62 view .LVU773
 2555 0b7c 092082E1 		orr	r2, r2, r9	@ tmp366, tmp362, rr
 2556              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2557              		.loc 1 317 26 view .LVU774
 2558 0b80 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp366,
 2559              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2560              		.loc 1 324 49 view .LVU775
 2561 0b84 002183E7 		str	r2, [r3, r0, lsl #2]	@ word, *_210
 2562              	.L129:
 2563              	.LVL180:
 304:armwave.c     ****                 wave_word >>= 8;
 2564              		.loc 1 304 17 is_stmt 1 view .LVU776
 305:armwave.c     **** 
 2565              		.loc 1 305 17 view .LVU777
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2566              		.loc 1 307 17 view .LVU778
 2567              	@ armwave.c:307:                 if(value != 0) {
 307:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2568              		.loc 1 307 19 is_stmt 0 view .LVU779
 2569 0b88 000055E3 		cmp	r5, #0	@ wave_word,
 2570 0b8c 8CFFFF0A 		beq	.L126		@,
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2571              		.loc 1 308 21 is_stmt 1 view .LVU780
 2572              	.LVL181:
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2573              		.loc 1 309 21 view .LVU781
 310:armwave.c     **** 
 2574              		.loc 1 310 21 view .LVU782
 312:armwave.c     ****                     g = MIN(gg, 255);
 2575              		.loc 1 312 21 view .LVU783
 313:armwave.c     ****                     b = MIN(bb, 255);
 2576              		.loc 1 313 21 view .LVU784
 314:armwave.c     **** 
 2577              		.loc 1 314 21 view .LVU785
 317:armwave.c     **** 
 2578              		.loc 1 317 21 view .LVU786
 320:armwave.c     ****                     yy = (nsub & 0xff) * vscale;
 2579              		.loc 1 320 21 view .LVU787
 2580 0b90 032084E2 		add	r2, r4, #3	@ _60, n,
 321:armwave.c     ****                     xx = nsub >> 8;
 2581              		.loc 1 321 21 view .LVU788
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2582              		.loc 1 322 21 view .LVU789
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2583              		.loc 1 323 21 view .LVU790
 324:armwave.c     ****                 }
 2584              		.loc 1 324 21 view .LVU791
 2585              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2586              		.loc 1 323 40 is_stmt 0 view .LVU792
 2587 0b94 34C098E5 		ldr	ip, [r8, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2588              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2589              		.loc 1 321 32 view .LVU793
 2590 0b98 7200EFE6 		uxtb	r0, r2	@ _60, _60
 2591              	@ armwave.c:322:                     xx = nsub >> 8;
 322:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 2592              		.loc 1 322 31 view .LVU794
 2593 0b9c 4224A0E1 		asr	r2, r2, #8	@ xx, _60,
 2594              	@ armwave.c:321:                     yy = (nsub & 0xff) * vscale;
 321:armwave.c     ****                     xx = nsub >> 8;
 2595              		.loc 1 321 40 view .LVU795
 2596 0ba0 9A0000E0 		mul	r0, r10, r0	@ yy, _4, _60
 2597              	@ armwave.c:323:                     offset = (xx + (yy * g_armwave_state.target_width)) / vscale; 
 323:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2598              		.loc 1 323 28 view .LVU796
 2599 0ba4 0A10A0E1 		mov	r1, r10	@, _4
 2600 0ba8 9C2020E0 		mla	r0, ip, r0, r2	@, g_armwave_state.target_width, yy, xx
 2601 0bac FEFFFFEB 		bl	__aeabi_uidiv		@
 2602              	.LVL182:
 2603              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2604              		.loc 1 310 55 view .LVU797
 2605 0bb0 04309DE5 		ldr	r3, [sp, #4]	@ _86, %sfp
 2606 0bb4 950302E0 		mul	r2, r5, r3	@ tmp380, wave_word, _86
 2607              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2608              		.loc 1 309 55 view .LVU798
 2609 0bb8 00309DE5 		ldr	r3, [sp]	@ _82, %sfp
 2610              	@ armwave.c:310:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 310:armwave.c     **** 
 2611              		.loc 1 310 24 view .LVU799
 2612 0bbc 4224A0E1 		asr	r2, r2, #8	@ bb, tmp380,
 2613              	.LVL183:
 2614              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2615              		.loc 1 309 55 view .LVU800
 2616 0bc0 950301E0 		mul	r1, r5, r3	@ tmp384, wave_word, _82
 2617              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2618              		.loc 1 308 55 view .LVU801
 2619 0bc4 950B05E0 		mul	r5, r5, fp	@ tmp390, wave_word, _76
 2620              	.LVL184:
 2621              	@ armwave.c:314:                     b = MIN(bb, 255);
 314:armwave.c     **** 
 2622              		.loc 1 314 25 view .LVU802
 2623 0bc8 FF0052E3 		cmp	r2, #255	@ bb,
 2624              	@ armwave.c:309:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 309:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2625              		.loc 1 309 24 view .LVU803
 2626 0bcc 4114A0E1 		asr	r1, r1, #8	@ gg, tmp384,
 2627              	.LVL185:
 2628              	@ armwave.c:314:                     b = MIN(bb, 255);
 314:armwave.c     **** 
 2629              		.loc 1 314 25 view .LVU804
 2630 0bd0 FF20A0A3 		movge	r2, #255	@ bb,
 2631              	.LVL186:
 2632              	@ armwave.c:313:                     g = MIN(gg, 255);
 313:armwave.c     ****                     b = MIN(bb, 255);
 2633              		.loc 1 313 25 view .LVU805
 2634 0bd4 FF0051E3 		cmp	r1, #255	@ gg,
 2635 0bd8 FF10A0A3 		movge	r1, #255	@ gg,
 2636              	.LVL187:
 2637              	@ armwave.c:308:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 308:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2638              		.loc 1 308 24 view .LVU806
 2639 0bdc 4554A0E1 		asr	r5, r5, #8	@ rr, tmp390,
 2640              	.LVL188:
 2641              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2642              		.loc 1 312 25 view .LVU807
 2643 0be0 FF0055E3 		cmp	r5, #255	@ rr,
 2644              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2645              		.loc 1 317 56 view .LVU808
 2646 0be4 0114A0E1 		lsl	r1, r1, #8	@ tmp385, gg,
 2647              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2648              		.loc 1 317 44 view .LVU809
 2649 0be8 0228A0E1 		lsl	r2, r2, #16	@ tmp381, bb,
 2650              	@ armwave.c:312:                     r = MIN(rr, 255);
 312:armwave.c     ****                     g = MIN(gg, 255);
 2651              		.loc 1 312 25 view .LVU810
 2652 0bec FF50A0A3 		movge	r5, #255	@ rr,
 2653              	.LVL189:
 2654              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2655              		.loc 1 317 44 view .LVU811
 2656 0bf0 FF2802E2 		and	r2, r2, #16711680	@ tmp382, tmp381,
 2657              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2658              		.loc 1 317 56 view .LVU812
 2659 0bf4 7110FFE6 		uxth	r1, r1	@ tmp386, tmp385
 2660              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2661              		.loc 1 317 51 view .LVU813
 2662 0bf8 012082E1 		orr	r2, r2, r1	@ tmp388, tmp382, tmp386
 2663              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2664              		.loc 1 317 62 view .LVU814
 2665 0bfc 7550EFE6 		uxtb	r5, r5	@ rr, rr
 2666              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2667              		.loc 1 324 49 view .LVU815
 2668 0c00 08309DE5 		ldr	r3, [sp, #8]	@ out_buffer, %sfp
 2669              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2670              		.loc 1 317 62 view .LVU816
 2671 0c04 052082E1 		orr	r2, r2, r5	@ tmp392, tmp388, rr
 2672              	@ armwave.c:317:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 317:armwave.c     **** 
 2673              		.loc 1 317 26 view .LVU817
 2674 0c08 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp392,
 2675              	@ armwave.c:324:                     *(out_buffer_base + offset) = word;
 324:armwave.c     ****                 }
 2676              		.loc 1 324 49 view .LVU818
 2677 0c0c 002183E7 		str	r2, [r3, r0, lsl #2]	@ word, *_258
 2678 0c10 6BFFFFEA 		b	.L126		@
 2679              	.LVL190:
 2680              	.L147:
 272:armwave.c     **** 
 2681              		.loc 1 272 5 is_stmt 1 discriminator 1 view .LVU819
 2682 0c14 14309FE5 		ldr	r3, .L149+8	@,
 2683 0c18 112EA0E3 		mov	r2, #272	@,
 2684 0c1c 10109FE5 		ldr	r1, .L149+12	@,
 2685 0c20 10009FE5 		ldr	r0, .L149+16	@,
 2686              	.LVL191:
 272:armwave.c     **** 
 2687              		.loc 1 272 5 is_stmt 0 discriminator 1 view .LVU820
 2688 0c24 FEFFFFEB 		bl	__assert_fail		@
 2689              	.LVL192:
 2690              	.L150:
 2691              		.align	2
 2692              	.L149:
 2693 0c28 00000000 		.word	g_armwave_state
 2694 0c2c E8000000 		.word	.LC6
 2695 0c30 30000000 		.word	.LANCHOR0+48
 2696 0c34 00000000 		.word	.LC0
 2697 0c38 D4000000 		.word	.LC5
 2698              		.cfi_endproc
 2699              	.LFE64:
 2701              		.align	2
 2702              		.global	armwave_dump_ppm_debug
 2703              		.syntax unified
 2704              		.arm
 2705              		.fpu vfp
 2707              	armwave_dump_ppm_debug:
 2708              	.LVL193:
 2709              	.LFB65:
 334:armwave.c     **** 
 335:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 336:armwave.c     **** {
 2710              		.loc 1 336 1 is_stmt 1 view -0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 0
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 337:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2714              		.loc 1 337 5 view .LVU822
 2715              	@ armwave.c:336: {
 336:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2716              		.loc 1 336 1 is_stmt 0 view .LVU823
 2717 0c3c 0130A0E1 		mov	r3, r1	@ fn, fn
 2718 0c40 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2719              		.cfi_def_cfa_offset 28
 2720              		.cfi_offset 4, -28
 2721              		.cfi_offset 5, -24
 2722              		.cfi_offset 6, -20
 2723              		.cfi_offset 7, -16
 2724              		.cfi_offset 8, -12
 2725              		.cfi_offset 9, -8
 2726              		.cfi_offset 14, -4
 2727 0c44 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2728 0c48 0CD04DE2 		sub	sp, sp, #12	@,,
 2729              		.cfi_def_cfa_offset 40
 2730              	@ armwave.c:337:     FILE *fp = fopen(fn, "wb");
 2731              		.loc 1 337 16 view .LVU824
 2732 0c4c D8109FE5 		ldr	r1, .L163	@,
 2733              	.LVL194:
 2734              		.loc 1 337 16 view .LVU825
 2735 0c50 0300A0E1 		mov	r0, r3	@, fn
 2736              	.LVL195:
 2737              		.loc 1 337 16 view .LVU826
 2738 0c54 FEFFFFEB 		bl	fopen64		@
 2739              	.LVL196:
 2740              	@ armwave.c:344:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 338:armwave.c     ****     uint32_t data;
 339:armwave.c     ****     int xx, yy;
 340:armwave.c     **** 
 341:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 342:armwave.c     **** 
 343:armwave.c     ****     fputs("P3\n", fp);
 344:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2741              		.loc 1 344 5 view .LVU827
 2742 0c58 D0609FE5 		ldr	r6, .L163+4	@ tmp154,
 2743              	@ armwave.c:343:     fputs("P3\n", fp);
 343:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2744              		.loc 1 343 5 view .LVU828
 2745 0c5c 0320A0E3 		mov	r2, #3	@,
 2746 0c60 0110A0E3 		mov	r1, #1	@,
 2747              	@ armwave.c:337:     FILE *fp = fopen(fn, "wb");
 337:armwave.c     ****     uint32_t data;
 2748              		.loc 1 337 16 view .LVU829
 2749 0c64 0070A0E1 		mov	r7, r0	@ fp,
 2750              	.LVL197:
 338:armwave.c     ****     uint32_t data;
 2751              		.loc 1 338 5 is_stmt 1 view .LVU830
 339:armwave.c     **** 
 2752              		.loc 1 339 5 view .LVU831
 343:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2753              		.loc 1 343 5 view .LVU832
 2754 0c68 0030A0E1 		mov	r3, r0	@, fp
 2755 0c6c C0009FE5 		ldr	r0, .L163+8	@,
 2756              	.LVL198:
 343:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2757              		.loc 1 343 5 is_stmt 0 view .LVU833
 2758 0c70 FEFFFFEB 		bl	fwrite		@
 2759              	.LVL199:
 2760              		.loc 1 344 5 is_stmt 1 view .LVU834
 2761 0c74 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 2762 0c78 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 2763 0c7c B4109FE5 		ldr	r1, .L163+12	@,
 2764 0c80 0700A0E1 		mov	r0, r7	@, fp
 2765 0c84 FEFFFFEB 		bl	fprintf		@
 2766              	.LVL200:
 345:armwave.c     ****     fputs("255\n", fp);
 2767              		.loc 1 345 5 view .LVU835
 2768 0c88 0420A0E3 		mov	r2, #4	@,
 2769 0c8c 0730A0E1 		mov	r3, r7	@, fp
 2770 0c90 0110A0E3 		mov	r1, #1	@,
 2771 0c94 A0009FE5 		ldr	r0, .L163+16	@,
 2772 0c98 FEFFFFEB 		bl	fwrite		@
 2773              	.LVL201:
 346:armwave.c     **** 
 347:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2774              		.loc 1 347 5 view .LVU836
 2775              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2776              		.loc 1 347 37 is_stmt 0 view .LVU837
 2777 0c9c 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2778              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2779              		.loc 1 347 5 view .LVU838
 2780 0ca0 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2781 0ca4 1800000A 		beq	.L152		@,
 2782 0ca8 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2783              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 349:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 350:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 351:armwave.c     **** 
 352:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2784              		.loc 1 352 13 view .LVU839
 2785 0cac 8C909FE5 		ldr	r9, .L163+20	@ tmp156,
 2786              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2787              		.loc 1 347 12 view .LVU840
 2788 0cb0 0050A0E3 		mov	r5, #0	@ yy,
 2789              	.LVL202:
 2790              	.L153:
 2791              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2792              		.loc 1 348 9 view .LVU841
 2793 0cb4 000053E3 		cmp	r3, #0	@ _12,
 2794              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2795              		.loc 1 348 16 view .LVU842
 2796 0cb8 0040A013 		movne	r4, #0	@ xx,
 2797              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2798              		.loc 1 348 9 view .LVU843
 2799 0cbc 1600000A 		beq	.L162		@,
 2800              	.LVL203:
 2801              	.L154:
 349:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2802              		.loc 1 349 13 is_stmt 1 discriminator 3 view .LVU844
 2803              	@ armwave.c:349:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 349:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2804              		.loc 1 349 29 is_stmt 0 discriminator 3 view .LVU845
 2805 0cc0 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2806              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2807              		.loc 1 352 13 discriminator 3 view .LVU846
 2808 0cc4 0910A0E1 		mov	r1, r9	@, tmp156
 2809 0cc8 0700A0E1 		mov	r0, r7	@, fp
 2810              	@ armwave.c:349:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 349:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2811              		.loc 1 349 18 discriminator 3 view .LVU847
 2812 0ccc 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2813              	.LVL204:
 2814              		.loc 1 352 13 is_stmt 1 discriminator 3 view .LVU848
 2815              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2816              		.loc 1 348 58 is_stmt 0 discriminator 3 view .LVU849
 2817 0cd0 014084E2 		add	r4, r4, #1	@ xx, xx,
 2818              	.LVL205:
 2819              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2820              		.loc 1 352 81 discriminator 3 view .LVU850
 2821 0cd4 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2822              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2823              		.loc 1 352 61 discriminator 3 view .LVU851
 2824 0cd8 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2825              	@ armwave.c:352:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2826              		.loc 1 352 13 discriminator 3 view .LVU852
 2827 0cdc 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2828 0ce0 7330EFE6 		uxtb	r3, r3	@, tmp146
 2829 0ce4 00C08DE5 		str	ip, [sp]	@ tmp151,
 2830 0ce8 7220EFE6 		uxtb	r2, r2	@, data
 2831              	.LVL206:
 2832              		.loc 1 352 13 discriminator 3 view .LVU853
 2833 0cec FEFFFFEB 		bl	fprintf		@
 2834              	.LVL207:
 2835              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2836              		.loc 1 348 41 discriminator 3 view .LVU854
 2837 0cf0 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2838              	@ armwave.c:348:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 348:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2839              		.loc 1 348 9 discriminator 3 view .LVU855
 2840 0cf4 040053E1 		cmp	r3, r4	@ _12, xx
 2841 0cf8 F0FFFF8A 		bhi	.L154		@,
 2842 0cfc 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2843              	.LVL208:
 2844              	.L155:
 2845              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2846              		.loc 1 347 55 discriminator 2 view .LVU856
 2847 0d00 015085E2 		add	r5, r5, #1	@ yy, yy,
 2848              	.LVL209:
 2849              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2850              		.loc 1 347 5 discriminator 2 view .LVU857
 2851 0d04 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2852 0d08 E9FFFF3A 		bcc	.L153		@,
 2853              	.LVL210:
 2854              	.L152:
 353:armwave.c     ****         }
 354:armwave.c     ****     }
 355:armwave.c     **** 
 356:armwave.c     ****     fclose(fp);
 2855              		.loc 1 356 5 is_stmt 1 view .LVU858
 2856 0d0c 0700A0E1 		mov	r0, r7	@, fp
 2857              	@ armwave.c:357: }
 357:armwave.c     **** }
 2858              		.loc 1 357 1 is_stmt 0 view .LVU859
 2859 0d10 0CD08DE2 		add	sp, sp, #12	@,,
 2860              		.cfi_remember_state
 2861              		.cfi_def_cfa_offset 28
 2862              		@ sp needed	@
 2863 0d14 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2864              		.cfi_restore 14
 2865              		.cfi_restore 9
 2866              		.cfi_restore 8
 2867              		.cfi_restore 7
 2868              		.cfi_restore 6
 2869              		.cfi_restore 5
 2870              		.cfi_restore 4
 2871              		.cfi_def_cfa_offset 0
 2872              	.LVL211:
 2873              	@ armwave.c:356:     fclose(fp);
 356:armwave.c     **** }
 2874              		.loc 1 356 5 view .LVU860
 2875 0d18 FEFFFFEA 		b	fclose		@
 2876              	.LVL212:
 2877              	.L162:
 2878              		.cfi_restore_state
 2879              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2880              		.loc 1 347 55 view .LVU861
 2881 0d1c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2882              	.LVL213:
 2883              	@ armwave.c:347:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 347:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2884              		.loc 1 347 5 view .LVU862
 2885 0d20 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2886 0d24 F5FFFF8A 		bhi	.L155		@,
 2887 0d28 F7FFFFEA 		b	.L152		@
 2888              	.L164:
 2889              		.align	2
 2890              	.L163:
 2891 0d2c FC000000 		.word	.LC7
 2892 0d30 00000000 		.word	g_armwave_state
 2893 0d34 00010000 		.word	.LC8
 2894 0d38 04010000 		.word	.LC9
 2895 0d3c 0C010000 		.word	.LC10
 2896 0d40 14010000 		.word	.LC11
 2897              		.cfi_endproc
 2898              	.LFE65:
 2900              		.align	2
 2901              		.global	armwave_test_init
 2902              		.syntax unified
 2903              		.arm
 2904              		.fpu vfp
 2906              	armwave_test_init:
 2907              	.LVL214:
 2908              	.LFB66:
 358:armwave.c     **** 
 359:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 360:armwave.c     **** {
 2909              		.loc 1 360 1 is_stmt 1 view -0
 2910              		.cfi_startproc
 2911              		@ args = 0, pretend = 0, frame = 0
 2912              		@ frame_needed = 0, uses_anonymous_args = 0
 361:armwave.c     ****     mod_depth = mod;
 2913              		.loc 1 361 5 view .LVU864
 2914              	@ armwave.c:361:     mod_depth = mod;
 2915              		.loc 1 361 15 is_stmt 0 view .LVU865
 2916 0d44 98309FE5 		ldr	r3, .L169+20	@ tmp128,
 2917              	@ armwave.c:360: {
 360:armwave.c     ****     mod_depth = mod;
 2918              		.loc 1 360 1 view .LVU866
 2919 0d48 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2920              		.cfi_def_cfa_offset 24
 2921              		.cfi_offset 4, -24
 2922              		.cfi_offset 5, -20
 2923              		.cfi_offset 6, -16
 2924              		.cfi_offset 7, -12
 2925              		.cfi_offset 8, -8
 2926              		.cfi_offset 14, -4
 2927 0d4c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2928              		.cfi_def_cfa_offset 48
 2929              		.cfi_offset 80, -48
 2930              		.cfi_offset 81, -44
 2931              		.cfi_offset 82, -40
 2932              		.cfi_offset 83, -36
 2933              		.cfi_offset 84, -32
 2934              		.cfi_offset 85, -28
 2935 0d50 90409FE5 		ldr	r4, .L169+24	@ ivtmp.105,
 2936              	.LBB6:
 2937              	.LBB7:
 2938              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2939              		.loc 1 87 32 view .LVU867
 2940 0d54 21AA9FED 		vldr.32	s20, .L169+16	@ tmp134,
 2941              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2942              		.loc 1 87 26 view .LVU868
 2943 0d58 1C9B9FED 		vldr.64	d9, .L169	@ tmp143,
 2944              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2945              		.loc 1 87 49 view .LVU869
 2946 0d5c 1D8B9FED 		vldr.64	d8, .L169+8	@ tmp137,
 2947              	.LBE7:
 2948              	.LBE6:
 2949              	@ armwave.c:361:     mod_depth = mod;
 2950              		.loc 1 361 15 view .LVU870
 2951 0d60 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 362:armwave.c     **** 
 363:armwave.c     ****     test_create_waveform();
 2952              		.loc 1 363 5 is_stmt 1 view .LVU871
 2953              	@ armwave.c:360: {
 360:armwave.c     ****     mod_depth = mod;
 2954              		.loc 1 360 1 is_stmt 0 view .LVU872
 2955 0d64 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2956 0d68 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2957              	@ armwave.c:363:     test_create_waveform();
 2958              		.loc 1 363 5 view .LVU873
 2959 0d6c FEFFFFEB 		bl	test_create_waveform		@
 2960              	.LVL215:
 364:armwave.c     ****     test_create_gamma();
 2961              		.loc 1 364 5 is_stmt 1 view .LVU874
 2962              	.LBB9:
 2963              	.LBI6:
  81:armwave.c     **** {
 2964              		.loc 1 81 6 view .LVU875
  81:armwave.c     **** {
 2965              		.loc 1 81 6 is_stmt 0 view .LVU876
 2966 0d70 013084E2 		add	r3, r4, #1	@ _34, ivtmp.105,
 2967 0d74 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.105,
 2968 0d78 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2969              	.LVL216:
 2970              	.L166:
 2971              	.LBB8:
  87:armwave.c     ****     }
 2972              		.loc 1 87 9 is_stmt 1 view .LVU877
 2973              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2974              		.loc 1 87 32 is_stmt 0 view .LVU878
 2975 0d7c 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.105
 2976              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2977              		.loc 1 87 26 view .LVU879
 2978 0d80 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2979              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2980              		.loc 1 87 32 view .LVU880
 2981 0d84 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2982 0d88 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2983 0d8c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2984              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2985              		.loc 1 87 26 view .LVU881
 2986 0d90 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2987 0d94 FEFFFFEB 		bl	pow		@
 2988              	.LVL217:
 2989              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2990              		.loc 1 87 49 view .LVU882
 2991 0d98 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2992              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2993              		.loc 1 87 24 view .LVU883
 2994 0d9c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2995 0da0 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2996 0da4 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2997              	.LVL218:
 2998              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2999              		.loc 1 86 5 view .LVU884
 3000 0da8 080054E1 		cmp	r4, r8	@ ivtmp.105, _35
 3001 0dac F2FFFF1A 		bne	.L166		@,
 3002              	.LVL219:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 3003              		.loc 1 86 5 view .LVU885
 3004              	.LBE8:
 3005              	.LBE9:
 365:armwave.c     **** 
 366:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 3006              		.loc 1 366 5 is_stmt 1 view .LVU886
 3007 0db0 0710A0E1 		mov	r1, r7	@, render_height
 3008 0db4 0600A0E1 		mov	r0, r6	@, render_width
 3009 0db8 90FCFFEB 		bl	armwave_setup_render.constprop.0		@
 3010              	.LVL220:
 367:armwave.c     **** 
 368:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 3011              		.loc 1 368 5 view .LVU887
 3012              	@ armwave.c:369: }
 369:armwave.c     **** }
 3013              		.loc 1 369 1 is_stmt 0 view .LVU888
 3014 0dbc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 3015              		.cfi_restore 84
 3016              		.cfi_restore 85
 3017              		.cfi_restore 82
 3018              		.cfi_restore 83
 3019              		.cfi_restore 80
 3020              		.cfi_restore 81
 3021              		.cfi_def_cfa_offset 24
 3022              	@ armwave.c:368:     printf("armwave version: %s\n", ARMWAVE_VER);
 368:armwave.c     **** }
 3023              		.loc 1 368 5 view .LVU889
 3024 0dc0 24109FE5 		ldr	r1, .L169+28	@,
 3025 0dc4 24009FE5 		ldr	r0, .L169+32	@,
 3026              	@ armwave.c:369: }
 3027              		.loc 1 369 1 view .LVU890
 3028 0dc8 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 3029              		.cfi_restore 14
 3030              		.cfi_restore 8
 3031              		.cfi_restore 7
 3032              		.cfi_restore 6
 3033              		.cfi_restore 5
 3034              		.cfi_restore 4
 3035              		.cfi_def_cfa_offset 0
 3036              	.LVL221:
 3037              	@ armwave.c:368:     printf("armwave version: %s\n", ARMWAVE_VER);
 368:armwave.c     **** }
 3038              		.loc 1 368 5 view .LVU891
 3039 0dcc FEFFFFEA 		b	printf		@
 3040              	.LVL222:
 3041              	.L170:
 3042              		.align	3
 3043              	.L169:
 3044 0dd0 000000C0 		.word	-1073741824
 3045 0dd4 CCCCEC3F 		.word	1072483532
 3046 0dd8 00000000 		.word	0
 3047 0ddc 00E06F40 		.word	1081073664
 3048 0de0 00007F43 		.word	1132396544
 3049 0de4 00000000 		.word	.LANCHOR1
 3050 0de8 FFFFFFFF 		.word	gamma_table-1
 3051 0dec 24010000 		.word	.LC12
 3052 0df0 2C010000 		.word	.LC13
 3053              		.cfi_endproc
 3054              	.LFE66:
 3056              		.align	2
 3057              		.global	armwave_test_generate
 3058              		.syntax unified
 3059              		.arm
 3060              		.fpu vfp
 3062              	armwave_test_generate:
 3063              	.LFB67:
 370:armwave.c     **** 
 371:armwave.c     **** void armwave_test_generate()
 372:armwave.c     **** {
 3064              		.loc 1 372 1 is_stmt 1 view -0
 3065              		.cfi_startproc
 3066              		@ args = 0, pretend = 0, frame = 8
 3067              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     ****     uint32_t yy;
 3068              		.loc 1 373 5 view .LVU893
 374:armwave.c     **** 
 375:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3069              		.loc 1 375 5 view .LVU894
 3070              	@ armwave.c:372: {
 372:armwave.c     ****     uint32_t yy;
 3071              		.loc 1 372 1 is_stmt 0 view .LVU895
 3072 0df4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3073              		.cfi_def_cfa_offset 36
 3074              		.cfi_offset 4, -36
 3075              		.cfi_offset 5, -32
 3076              		.cfi_offset 6, -28
 3077              		.cfi_offset 7, -24
 3078              		.cfi_offset 8, -20
 3079              		.cfi_offset 9, -16
 3080              		.cfi_offset 10, -12
 3081              		.cfi_offset 11, -8
 3082              		.cfi_offset 14, -4
 3083              	@ armwave.c:375:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3084              		.loc 1 375 5 view .LVU896
 3085 0df8 0010A0E3 		mov	r1, #0	@,
 3086 0dfc 44419FE5 		ldr	r4, .L189	@ tmp269,
 3087              	@ armwave.c:372: {
 372:armwave.c     ****     uint32_t yy;
 3088              		.loc 1 372 1 view .LVU897
 3089 0e00 0CD04DE2 		sub	sp, sp, #12	@,,
 3090              		.cfi_def_cfa_offset 48
 3091              	@ armwave.c:375:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3092              		.loc 1 375 5 view .LVU898
 3093 0e04 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 3094 0e08 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3095 0e0c FEFFFFEB 		bl	memset		@
 3096              	.LVL223:
 376:armwave.c     **** 
 377:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3097              		.loc 1 377 5 is_stmt 1 view .LVU899
 3098              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3099              		.loc 1 377 45 is_stmt 0 view .LVU900
 3100 0e10 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 3101              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3102              		.loc 1 377 5 view .LVU901
 3103 0e14 020B55E3 		cmp	r5, #2048	@ _72,
 3104 0e18 4800008A 		bhi	.L171		@,
 3105 0e1c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3106              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3107              		.loc 1 377 12 view .LVU902
 3108 0e20 00A0A0E3 		mov	r10, #0	@ yy,
 3109              	.LVL224:
 3110              	.L177:
 378:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3111              		.loc 1 378 9 is_stmt 1 discriminator 3 view .LVU903
 3112 0e24 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 3113              	.LBB12:
 3114              	.LBB13:
 3115              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3116              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU904
 3117 0e28 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3118              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3119              		.loc 1 109 5 discriminator 3 view .LVU905
 3120 0e2c 000056E3 		cmp	r6, #0	@ prephitmp_171,
 3121              	.LBE13:
 3122              	.LBE12:
 3123              	@ armwave.c:378:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3124              		.loc 1 378 9 discriminator 3 view .LVU906
 3125 0e30 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 3126              	.LVL225:
 3127              	.LBB15:
 3128              	.LBI12:
  98:armwave.c     **** {
 3129              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU907
 3130              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 3131              		.loc 1 100 5 discriminator 3 view .LVU908
 101:armwave.c     ****     uint8_t *wave_base;
 3132              		.loc 1 101 5 discriminator 3 view .LVU909
 102:armwave.c     ****     uint8_t *write_buffer_base;
 3133              		.loc 1 102 5 discriminator 3 view .LVU910
 103:armwave.c     ****     uint8_t *write_buffer;
 3134              		.loc 1 103 5 discriminator 3 view .LVU911
 104:armwave.c     ****     
 3135              		.loc 1 104 5 discriminator 3 view .LVU912
 106:armwave.c     **** 
 3136              		.loc 1 106 5 discriminator 3 view .LVU913
 3137              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3138              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU914
 3139 0e34 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 3140              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3141              		.loc 1 106 40 discriminator 3 view .LVU915
 3142 0e38 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 3143              	.LVL226:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3144              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU916
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3145              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU917
 3146 0e3c 3900000A 		beq	.L173		@,
 3147              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3148              		.loc 1 109 11 view .LVU918
 3149 0e40 0080A0E3 		mov	r8, #0	@ w,
 3150 0e44 043043E2 		sub	r3, r3, #4	@ _77, _3,
 3151              	.LVL227:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3152              		.loc 1 109 11 view .LVU919
 3153 0e48 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 3154              	.LVL228:
 3155              	.L176:
 110:armwave.c     **** 
 3156              		.loc 1 110 9 is_stmt 1 view .LVU920
 3157              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3158              		.loc 1 110 64 is_stmt 0 view .LVU921
 3159 0e4c 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3160              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3161              		.loc 1 114 9 view .LVU922
 3162 0e50 000059E3 		cmp	r9, #0	@ _4,
 3163              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3164              		.loc 1 110 36 view .LVU923
 3165 0e54 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 3166              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3167              		.loc 1 110 64 view .LVU924
 3168 0e58 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 3169              	.LVL229:
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3170              		.loc 1 114 9 is_stmt 1 view .LVU925
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3171              		.loc 1 114 9 is_stmt 0 view .LVU926
 3172 0e5c 2D00000A 		beq	.L174		@,
 3173 0e60 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 3174 0e64 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 3175              	.LVL230:
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3176              		.loc 1 114 9 view .LVU927
 3177 0e68 03E08EE0 		add	lr, lr, r3	@ ivtmp.111, _16, tmp205
 3178              	.LVL231:
 3179              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3180              		.loc 1 114 16 view .LVU928
 3181 0e6c 0010A0E3 		mov	r1, #0	@ yy,
 3182              	.LVL232:
 3183              	.L175:
 115:armwave.c     **** 
 3184              		.loc 1 115 13 is_stmt 1 view .LVU929
 3185              	@ armwave.c:115:             word = *(uint32_t*)(wave_base + yy);
 115:armwave.c     **** 
 3186              		.loc 1 115 18 is_stmt 0 view .LVU930
 3187 0e70 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 3188              	.LVL233:
 117:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3189              		.loc 1 117 13 is_stmt 1 view .LVU931
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3190              		.loc 1 118 17 view .LVU932
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3191              		.loc 1 119 17 view .LVU933
 120:armwave.c     ****                 word >>= 8;
 3192              		.loc 1 120 17 view .LVU934
 3193              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3194              		.loc 1 118 45 is_stmt 0 view .LVU935
 3195 0e74 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3196              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3197              		.loc 1 119 63 view .LVU936
 3198 0e78 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3199              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3200              		.loc 1 118 37 view .LVU937
 3201 0e7c 73C0EFE6 		uxtb	ip, r3	@ word, word
 3202              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 3203              		.loc 1 121 22 view .LVU938
 3204 0e80 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 3205              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3206              		.loc 1 120 47 view .LVU939
 3207 0e84 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 3208              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3209              		.loc 1 118 37 view .LVU940
 3210 0e88 7550EFE6 		uxtb	r5, r5	@ word, word
 3211              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3212              		.loc 1 120 47 view .LVU941
 3213 0e8c 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 3214              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3215              		.loc 1 119 63 view .LVU942
 3216 0e90 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 3217              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 3218              		.loc 1 121 22 view .LVU943
 3219 0e94 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3220              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3221              		.loc 1 120 47 view .LVU944
 3222 0e98 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 3223              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3224              		.loc 1 118 37 view .LVU945
 3225 0e9c 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3226              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 3227              		.loc 1 121 22 view .LVU946
 3228 0ea0 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3229              	.LVL234:
 3230              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3231              		.loc 1 120 47 view .LVU947
 3232 0ea4 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 3233 0ea8 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 3234              	.LVL235:
 121:armwave.c     ****             }
 3235              		.loc 1 121 17 is_stmt 1 view .LVU948
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3236              		.loc 1 118 17 view .LVU949
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3237              		.loc 1 119 17 view .LVU950
 120:armwave.c     ****                 word >>= 8;
 3238              		.loc 1 120 17 view .LVU951
 3239              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3240              		.loc 1 118 45 is_stmt 0 view .LVU952
 3241 0eac 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3242              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3243              		.loc 1 119 63 view .LVU953
 3244 0eb0 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 3245              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3246              		.loc 1 120 47 view .LVU954
 3247 0eb4 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 3248              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3249              		.loc 1 119 63 view .LVU955
 3250 0eb8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3251              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3252              		.loc 1 120 47 view .LVU956
 3253 0ebc 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 3254              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3255              		.loc 1 119 63 view .LVU957
 3256 0ec0 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 3257              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3258              		.loc 1 114 37 view .LVU958
 3259 0ec4 041081E2 		add	r1, r1, #4	@ yy, yy,
 3260              	.LVL236:
 3261              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3262              		.loc 1 120 47 view .LVU959
 3263 0ec8 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 3264              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3265              		.loc 1 114 9 view .LVU960
 3266 0ecc 010059E1 		cmp	r9, r1	@ _4, yy
 3267              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3268              		.loc 1 120 47 view .LVU961
 3269 0ed0 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 3270 0ed4 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 3271              	.LVL237:
 121:armwave.c     ****             }
 3272              		.loc 1 121 17 is_stmt 1 view .LVU962
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3273              		.loc 1 118 17 view .LVU963
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3274              		.loc 1 119 17 view .LVU964
 120:armwave.c     ****                 word >>= 8;
 3275              		.loc 1 120 17 view .LVU965
 3276              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3277              		.loc 1 118 45 is_stmt 0 view .LVU966
 3278 0ed8 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3279              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3280              		.loc 1 119 63 view .LVU967
 3281 0edc 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3282              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3283              		.loc 1 120 47 view .LVU968
 3284 0ee0 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 3285 0ee4 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 3286 0ee8 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 3287 0eec 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 3288 0ef0 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 121:armwave.c     ****             }
 3289              		.loc 1 121 17 is_stmt 1 view .LVU969
 3290              	.LVL238:
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3291              		.loc 1 118 17 view .LVU970
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3292              		.loc 1 119 17 view .LVU971
 120:armwave.c     ****                 word >>= 8;
 3293              		.loc 1 120 17 view .LVU972
 3294              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3295              		.loc 1 118 45 is_stmt 0 view .LVU973
 3296 0ef4 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3297              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3298              		.loc 1 119 63 view .LVU974
 3299 0ef8 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3300              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3301              		.loc 1 120 47 view .LVU975
 3302 0efc 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 3303 0f00 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 3304 0f04 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 3305 0f08 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 3306 0f0c 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 121:armwave.c     ****             }
 3307              		.loc 1 121 17 is_stmt 1 view .LVU976
 3308              	.LVL239:
 3309              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3310              		.loc 1 114 9 is_stmt 0 view .LVU977
 3311 0f10 D6FFFF8A 		bhi	.L175		@,
 3312 0f14 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3313              	.LVL240:
 3314              	.L174:
 3315              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3316              		.loc 1 109 44 view .LVU978
 3317 0f18 018088E2 		add	r8, r8, #1	@ w, w,
 3318              	.LVL241:
 3319              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3320              		.loc 1 109 5 view .LVU979
 3321 0f1c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 3322 0f20 C9FFFF3A 		bcc	.L176		@,
 3323 0f24 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 3324              	.LVL242:
 3325              	.L173:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3326              		.loc 1 109 5 view .LVU980
 3327              	.LBE14:
 3328              	.LBE15:
 3329              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3330              		.loc 1 377 28 discriminator 3 view .LVU981
 3331 0f28 0510A0E1 		mov	r1, r5	@, _72
 3332 0f2c 020BA0E3 		mov	r0, #2048	@,
 3333              	.LVL243:
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3334              		.loc 1 377 28 discriminator 3 view .LVU982
 3335 0f30 FEFFFFEB 		bl	__aeabi_uidiv		@
 3336              	.LVL244:
 3337              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3338              		.loc 1 377 63 discriminator 3 view .LVU983
 3339 0f34 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 3340              	.LVL245:
 3341              	@ armwave.c:377:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3342              		.loc 1 377 5 discriminator 3 view .LVU984
 3343 0f38 0A0050E1 		cmp	r0, r10	@, yy
 3344 0f3c B8FFFF8A 		bhi	.L177		@,
 3345              	.LVL246:
 3346              	.L171:
 3347              	@ armwave.c:380: }
 379:armwave.c     ****     }
 380:armwave.c     **** }
 3348              		.loc 1 380 1 view .LVU985
 3349 0f40 0CD08DE2 		add	sp, sp, #12	@,,
 3350              		.cfi_def_cfa_offset 36
 3351              		@ sp needed	@
 3352 0f44 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3353              	.L190:
 3354              		.align	2
 3355              	.L189:
 3356 0f48 00000000 		.word	g_armwave_state
 3357              		.cfi_endproc
 3358              	.LFE67:
 3360              		.align	2
 3361              		.global	armwave_test_get_buffer
 3362              		.syntax unified
 3363              		.arm
 3364              		.fpu vfp
 3366              	armwave_test_get_buffer:
 3367              	.LFB68:
 381:armwave.c     **** 
 382:armwave.c     **** PyObject *armwave_test_get_buffer()
 383:armwave.c     **** {
 3368              		.loc 1 383 1 is_stmt 1 view -0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 0
 3371              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     PyObject *mv;
 3372              		.loc 1 384 5 view .LVU987
 385:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3373              		.loc 1 385 5 view .LVU988
 3374              	@ armwave.c:383: {
 383:armwave.c     ****     PyObject *mv;
 3375              		.loc 1 383 1 is_stmt 0 view .LVU989
 3376 0f4c 30402DE9 		push	{r4, r5, lr}	@
 3377              		.cfi_def_cfa_offset 12
 3378              		.cfi_offset 4, -12
 3379              		.cfi_offset 5, -8
 3380              		.cfi_offset 14, -4
 3381              	@ armwave.c:385:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3382              		.loc 1 385 22 view .LVU990
 3383 0f50 2C00A0E3 		mov	r0, #44	@,
 3384              	@ armwave.c:383: {
 383:armwave.c     ****     PyObject *mv;
 3385              		.loc 1 383 1 view .LVU991
 3386 0f54 0CD04DE2 		sub	sp, sp, #12	@,,
 3387              		.cfi_def_cfa_offset 24
 3388              	@ armwave.c:385:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3389              		.loc 1 385 22 view .LVU992
 3390 0f58 FEFFFFEB 		bl	malloc		@
 3391              	.LVL247:
 3392              	@ armwave.c:387:  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 386:armwave.c     ****     
 387:armwave.c     ****  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3393              		.loc 1 387 3 view .LVU993
 3394 0f5c 3C409FE5 		ldr	r4, .L193	@ tmp118,
 3395              	@ armwave.c:385:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 385:armwave.c     ****     
 3396              		.loc 1 385 22 view .LVU994
 3397 0f60 0050A0E1 		mov	r5, r0	@ tmp117,
 3398              	.LVL248:
 3399              		.loc 1 387 3 is_stmt 1 view .LVU995
 3400 0f64 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 3401              	.LVL249:
 3402              		.loc 1 387 3 is_stmt 0 view .LVU996
 3403 0f68 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3404              	.LVL250:
 388:armwave.c     **** 
 389:armwave.c     ****     /*
 390:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 391:armwave.c     ****         armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 392:armwave.c     ****     } else {
 393:armwave.c     ****         armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 394:armwave.c     ****     }
 395:armwave.c     ****     */
 396:armwave.c     **** 
 397:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3405              		.loc 1 397 5 is_stmt 1 view .LVU997
 3406              	@ armwave.c:397:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3407              		.loc 1 397 79 is_stmt 0 view .LVU998
 3408 0f6c 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 3409              	@ armwave.c:397:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3410              		.loc 1 397 5 view .LVU999
 3411 0f70 08C0A0E3 		mov	ip, #8	@ tmp125,
 3412 0f74 0110A0E3 		mov	r1, #1	@ tmp126,
 3413 0f78 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3414 0f7c 02108DE8 		stm	sp, {r1, ip}	@,,
 3415 0f80 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.out_pixbuf
 3416 0f84 0500A0E1 		mov	r0, r5	@, tmp117
 3417 0f88 0010A0E3 		mov	r1, #0	@,
 3418 0f8c FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3419              	.LVL251:
 398:armwave.c     **** 
 399:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3420              		.loc 1 399 5 is_stmt 1 view .LVU1000
 3421              	@ armwave.c:399:     mv = PyMemoryView_FromBuffer(buf);
 3422              		.loc 1 399 10 is_stmt 0 view .LVU1001
 3423 0f90 0500A0E1 		mov	r0, r5	@, tmp117
 3424              	@ armwave.c:400: }
 400:armwave.c     **** }
 3425              		.loc 1 400 1 view .LVU1002
 3426 0f94 0CD08DE2 		add	sp, sp, #12	@,,
 3427              		.cfi_def_cfa_offset 12
 3428              		@ sp needed	@
 3429 0f98 3040BDE8 		pop	{r4, r5, lr}	@
 3430              		.cfi_restore 14
 3431              		.cfi_restore 5
 3432              		.cfi_restore 4
 3433              		.cfi_def_cfa_offset 0
 3434              	.LVL252:
 3435              	@ armwave.c:399:     mv = PyMemoryView_FromBuffer(buf);
 399:armwave.c     **** }
 3436              		.loc 1 399 10 view .LVU1003
 3437 0f9c FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3438              	.LVL253:
 3439              	.L194:
 399:armwave.c     **** }
 3440              		.loc 1 399 10 view .LVU1004
 3441              		.align	2
 3442              	.L193:
 3443 0fa0 00000000 		.word	g_armwave_state
 3444              		.cfi_endproc
 3445              	.LFE68:
 3447              		.align	2
 3448              		.global	armwave_test_dump_buffer_to_ppm
 3449              		.syntax unified
 3450              		.arm
 3451              		.fpu vfp
 3453              	armwave_test_dump_buffer_to_ppm:
 3454              	.LVL254:
 3455              	.LFB69:
 401:armwave.c     **** 
 402:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 403:armwave.c     **** {
 3456              		.loc 1 403 1 is_stmt 1 view -0
 3457              		.cfi_startproc
 3458              		@ args = 0, pretend = 0, frame = 0
 3459              		@ frame_needed = 0, uses_anonymous_args = 0
 3460              		@ link register save eliminated.
 404:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3461              		.loc 1 404 5 view .LVU1006
 3462 0fa4 08309FE5 		ldr	r3, .L196	@ tmp112,
 3463 0fa8 0010A0E1 		mov	r1, r0	@, fn
 3464 0fac 440093E5 		ldr	r0, [r3, #68]	@, g_armwave_state.out_pixbuf
 3465              	.LVL255:
 3466              		.loc 1 404 5 is_stmt 0 view .LVU1007
 3467 0fb0 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3468              	.LVL256:
 3469              	.L197:
 3470              		.loc 1 404 5 view .LVU1008
 3471              		.align	2
 3472              	.L196:
 3473 0fb4 00000000 		.word	g_armwave_state
 3474              		.cfi_endproc
 3475              	.LFE69:
 3477              		.align	2
 3478              		.global	armwave_cleanup
 3479              		.syntax unified
 3480              		.arm
 3481              		.fpu vfp
 3483              	armwave_cleanup:
 3484              	.LFB70:
 405:armwave.c     **** }
 406:armwave.c     **** 
 407:armwave.c     **** void armwave_cleanup()
 408:armwave.c     **** {
 3485              		.loc 1 408 1 is_stmt 1 view -0
 3486              		.cfi_startproc
 3487              		@ args = 0, pretend = 0, frame = 0
 3488              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3489              		.loc 1 409 5 view .LVU1010
 3490              	@ armwave.c:408: {
 408:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3491              		.loc 1 408 1 is_stmt 0 view .LVU1011
 3492 0fb8 10402DE9 		push	{r4, lr}	@
 3493              		.cfi_def_cfa_offset 8
 3494              		.cfi_offset 4, -8
 3495              		.cfi_offset 14, -4
 3496              	@ armwave.c:409:     free(g_armwave_state.out_pixbuf);
 3497              		.loc 1 409 25 view .LVU1012
 3498 0fbc 28409FE5 		ldr	r4, .L200	@ tmp113,
 3499              	@ armwave.c:409:     free(g_armwave_state.out_pixbuf);
 3500              		.loc 1 409 5 view .LVU1013
 3501 0fc0 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 3502 0fc4 FEFFFFEB 		bl	free		@
 3503              	.LVL257:
 410:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3504              		.loc 1 410 5 is_stmt 1 view .LVU1014
 3505 0fc8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3506 0fcc FEFFFFEB 		bl	free		@
 3507              	.LVL258:
 411:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3508              		.loc 1 411 5 view .LVU1015
 3509 0fd0 600094E5 		ldr	r0, [r4, #96]	@, g_armwave_state.xcoord_to_xpixel
 3510 0fd4 FEFFFFEB 		bl	free		@
 3511              	.LVL259:
 412:armwave.c     **** 
 413:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3512              		.loc 1 413 5 view .LVU1016
 3513              	@ armwave.c:413:     g_armwave_state.out_pixbuf = NULL;
 3514              		.loc 1 413 32 is_stmt 0 view .LVU1017
 3515 0fd8 0030A0E3 		mov	r3, #0	@ tmp120,
 3516 0fdc 443084E5 		str	r3, [r4, #68]	@ tmp120, g_armwave_state.out_pixbuf
 414:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3517              		.loc 1 414 5 is_stmt 1 view .LVU1018
 3518              	@ armwave.c:414:     g_armwave_state.ch1_buffer = NULL;
 3519              		.loc 1 414 32 is_stmt 0 view .LVU1019
 3520 0fe0 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 415:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3521              		.loc 1 415 5 is_stmt 1 view .LVU1020
 3522              	@ armwave.c:415:     g_armwave_state.xcoord_to_xpixel = NULL;
 3523              		.loc 1 415 38 is_stmt 0 view .LVU1021
 3524 0fe4 603084E5 		str	r3, [r4, #96]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3525              	@ armwave.c:416: }
 416:armwave.c     **** }
 3526              		.loc 1 416 1 view .LVU1022
 3527 0fe8 1080BDE8 		pop	{r4, pc}	@
 3528              	.L201:
 3529              		.align	2
 3530              	.L200:
 3531 0fec 00000000 		.word	g_armwave_state
 3532              		.cfi_endproc
 3533              	.LFE70:
 3535              		.section	.text.startup,"ax",%progbits
 3536              		.align	2
 3537              		.global	main
 3538              		.syntax unified
 3539              		.arm
 3540              		.fpu vfp
 3542              	main:
 3543              	.LVL260:
 3544              	.LFB71:
 417:armwave.c     **** 
 418:armwave.c     **** int main(int argc, char *argv[])
 419:armwave.c     **** {
 3545              		.loc 1 419 1 is_stmt 1 view -0
 3546              		.cfi_startproc
 3547              		@ args = 0, pretend = 0, frame = 8
 3548              		@ frame_needed = 0, uses_anonymous_args = 0
 420:armwave.c     ****     uint32_t *out_buffer;
 3549              		.loc 1 420 5 view .LVU1024
 421:armwave.c     ****     uint32_t xx, yy, n;
 3550              		.loc 1 421 5 view .LVU1025
 422:armwave.c     **** 
 423:armwave.c     ****     //printf("Starting armwave...\n");
 424:armwave.c     ****     armwave_init();
 3551              		.loc 1 424 5 view .LVU1026
 3552              	.LBB20:
 3553              	.LBI20:
 127:armwave.c     **** {
 3554              		.loc 1 127 6 view .LVU1027
 3555              	.LBB21:
 129:armwave.c     **** }
 3556              		.loc 1 129 5 view .LVU1028
 3557              	.LBE21:
 3558              	.LBE20:
 3559              	@ armwave.c:419: {
 419:armwave.c     ****     uint32_t *out_buffer;
 3560              		.loc 1 419 1 is_stmt 0 view .LVU1029
 3561 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3562              		.cfi_def_cfa_offset 36
 3563              		.cfi_offset 4, -36
 3564              		.cfi_offset 5, -32
 3565              		.cfi_offset 6, -28
 3566              		.cfi_offset 7, -24
 3567              		.cfi_offset 8, -20
 3568              		.cfi_offset 9, -16
 3569              		.cfi_offset 10, -12
 3570              		.cfi_offset 11, -8
 3571              		.cfi_offset 14, -4
 3572 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 3573              		.cfi_def_cfa_offset 48
 3574              	.LBB25:
 3575              	.LBB22:
 3576              	@ armwave.c:129:     g_armwave_state.flags = 0;
 129:armwave.c     **** }
 3577              		.loc 1 129 27 view .LVU1030
 3578 0008 70919FE5 		ldr	r9, .L222	@ tmp267,
 3579              	.LBE22:
 3580              	.LBE25:
 3581              	@ armwave.c:433:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 425:armwave.c     **** 
 426:armwave.c     ****     //printf("Creating test waveform...\n");
 427:armwave.c     ****     test_create_waveform();
 428:armwave.c     **** 
 429:armwave.c     ****     //printf("Creating gamma LUT...\n");
 430:armwave.c     ****     test_create_gamma();
 431:armwave.c     **** 
 432:armwave.c     ****     //printf("Setting up render...\n");
 433:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3582              		.loc 1 433 5 view .LVU1031
 3583 000c 70219FE5 		ldr	r2, .L222+4	@ ivtmp_191,
 3584              	.LBB26:
 3585              	.LBB23:
 3586              	@ armwave.c:129:     g_armwave_state.flags = 0;
 129:armwave.c     **** }
 3587              		.loc 1 129 27 view .LVU1032
 3588 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 3589              	.LBE23:
 3590              	.LBE26:
 3591              	@ armwave.c:433:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 3592              		.loc 1 433 5 view .LVU1033
 3593 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 3594              	.LBB27:
 3595              	.LBB24:
 3596              	@ armwave.c:129:     g_armwave_state.flags = 0;
 129:armwave.c     **** }
 3597              		.loc 1 129 27 view .LVU1034
 3598 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 3599              	.LBE24:
 3600              	.LBE27:
 427:armwave.c     **** 
 3601              		.loc 1 427 5 is_stmt 1 view .LVU1035
 3602 001c FEFFFFEB 		bl	test_create_waveform		@
 3603              	.LVL261:
 430:armwave.c     **** 
 3604              		.loc 1 430 5 view .LVU1036
 3605 0020 FEFFFFEB 		bl	test_create_gamma		@
 3606              	.LVL262:
 3607              		.loc 1 433 5 view .LVU1037
 3608 0024 011CA0E3 		mov	r1, #256	@,
 3609 0028 020BA0E3 		mov	r0, #2048	@,
 3610 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3611              	.LVL263:
 434:armwave.c     **** 
 435:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 436:armwave.c     **** 
 437:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3612              		.loc 1 437 5 view .LVU1038
 3613              		.loc 1 437 5 is_stmt 0 view .LVU1039
 3614 0030 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3615              	.LVL264:
 3616              	.L203:
 3617              	@ armwave.c:438:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 438:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3618              		.loc 1 438 9 view .LVU1040
 3619 0034 020B55E3 		cmp	r5, #2048	@ _61,
 3620 0038 4900008A 		bhi	.L211		@,
 3621 003c 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3622              	@ armwave.c:438:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3623              		.loc 1 438 16 view .LVU1041
 3624 0040 0080A0E3 		mov	r8, #0	@ yy,
 3625 0044 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 3626              	.LVL265:
 3627              	.L208:
 439:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 440:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3628              		.loc 1 440 13 is_stmt 1 discriminator 3 view .LVU1042
 3629 0048 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 3630              	.LBB28:
 3631              	.LBB29:
 3632              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3633              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU1043
 3634 004c 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3635              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3636              		.loc 1 109 5 discriminator 3 view .LVU1044
 3637 0050 000056E3 		cmp	r6, #0	@ prephitmp_178,
 3638              	.LBE29:
 3639              	.LBE28:
 3640              	@ armwave.c:440:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3641              		.loc 1 440 13 discriminator 3 view .LVU1045
 3642 0054 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 3643              	.LVL266:
 3644              	.LBB31:
 3645              	.LBI28:
  98:armwave.c     **** {
 3646              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU1046
 3647              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 3648              		.loc 1 100 5 discriminator 3 view .LVU1047
 101:armwave.c     ****     uint8_t *wave_base;
 3649              		.loc 1 101 5 discriminator 3 view .LVU1048
 102:armwave.c     ****     uint8_t *write_buffer_base;
 3650              		.loc 1 102 5 discriminator 3 view .LVU1049
 103:armwave.c     ****     uint8_t *write_buffer;
 3651              		.loc 1 103 5 discriminator 3 view .LVU1050
 104:armwave.c     ****     
 3652              		.loc 1 104 5 discriminator 3 view .LVU1051
 106:armwave.c     **** 
 3653              		.loc 1 106 5 discriminator 3 view .LVU1052
 3654              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3655              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU1053
 3656 0058 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 3657              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3658              		.loc 1 106 40 discriminator 3 view .LVU1054
 3659 005c 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 3660              	.LVL267:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3661              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU1055
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3662              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU1056
 3663 0060 3900000A 		beq	.L204		@,
 3664              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3665              		.loc 1 109 11 view .LVU1057
 3666 0064 0070A0E3 		mov	r7, #0	@ w,
 3667 0068 043043E2 		sub	r3, r3, #4	@ _81, _1,
 3668              	.LVL268:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3669              		.loc 1 109 11 view .LVU1058
 3670 006c 00308DE5 		str	r3, [sp]	@ _81, %sfp
 3671              	.LVL269:
 3672              	.L207:
 110:armwave.c     **** 
 3673              		.loc 1 110 9 is_stmt 1 view .LVU1059
 3674              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3675              		.loc 1 110 64 is_stmt 0 view .LVU1060
 3676 0070 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3677              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3678              		.loc 1 114 9 view .LVU1061
 3679 0074 00005AE3 		cmp	r10, #0	@ _2,
 3680              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3681              		.loc 1 110 36 view .LVU1062
 3682 0078 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 3683              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3684              		.loc 1 110 64 view .LVU1063
 3685 007c 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 3686              	.LVL270:
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3687              		.loc 1 114 9 is_stmt 1 view .LVU1064
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3688              		.loc 1 114 9 is_stmt 0 view .LVU1065
 3689 0080 2D00000A 		beq	.L205		@,
 3690 0084 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 3691 0088 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 3692              	.LVL271:
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3693              		.loc 1 114 9 view .LVU1066
 3694 008c 03E08EE0 		add	lr, lr, r3	@ ivtmp.124, _20, tmp202
 3695              	.LVL272:
 3696              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3697              		.loc 1 114 16 view .LVU1067
 3698 0090 0010A0E3 		mov	r1, #0	@ yy,
 3699              	.LVL273:
 3700              	.L206:
 115:armwave.c     **** 
 3701              		.loc 1 115 13 is_stmt 1 view .LVU1068
 3702              	@ armwave.c:115:             word = *(uint32_t*)(wave_base + yy);
 115:armwave.c     **** 
 3703              		.loc 1 115 18 is_stmt 0 view .LVU1069
 3704 0094 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 3705              	.LVL274:
 117:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3706              		.loc 1 117 13 is_stmt 1 view .LVU1070
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3707              		.loc 1 118 17 view .LVU1071
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3708              		.loc 1 119 17 view .LVU1072
 120:armwave.c     ****                 word >>= 8;
 3709              		.loc 1 120 17 view .LVU1073
 3710              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3711              		.loc 1 118 45 is_stmt 0 view .LVU1074
 3712 0098 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3713              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3714              		.loc 1 119 63 view .LVU1075
 3715 009c 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3716              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3717              		.loc 1 118 37 view .LVU1076
 3718 00a0 73C0EFE6 		uxtb	ip, r3	@ word, word
 3719              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 3720              		.loc 1 121 22 view .LVU1077
 3721 00a4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 3722              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3723              		.loc 1 120 47 view .LVU1078
 3724 00a8 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 3725              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3726              		.loc 1 118 37 view .LVU1079
 3727 00ac 7440EFE6 		uxtb	r4, r4	@ word, word
 3728              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3729              		.loc 1 120 47 view .LVU1080
 3730 00b0 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 3731              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3732              		.loc 1 119 63 view .LVU1081
 3733 00b4 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 3734              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 3735              		.loc 1 121 22 view .LVU1082
 3736 00b8 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3737              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3738              		.loc 1 120 47 view .LVU1083
 3739 00bc 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 3740              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3741              		.loc 1 118 37 view .LVU1084
 3742 00c0 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3743              	@ armwave.c:121:                 word >>= 8;
 121:armwave.c     ****             }
 3744              		.loc 1 121 22 view .LVU1085
 3745 00c4 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3746              	.LVL275:
 3747              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3748              		.loc 1 120 47 view .LVU1086
 3749 00c8 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 3750 00cc 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 3751              	.LVL276:
 121:armwave.c     ****             }
 3752              		.loc 1 121 17 is_stmt 1 view .LVU1087
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3753              		.loc 1 118 17 view .LVU1088
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3754              		.loc 1 119 17 view .LVU1089
 120:armwave.c     ****                 word >>= 8;
 3755              		.loc 1 120 17 view .LVU1090
 3756              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3757              		.loc 1 118 45 is_stmt 0 view .LVU1091
 3758 00d0 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3759              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3760              		.loc 1 119 63 view .LVU1092
 3761 00d4 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 3762              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3763              		.loc 1 120 47 view .LVU1093
 3764 00d8 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 3765              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3766              		.loc 1 119 63 view .LVU1094
 3767 00dc 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3768              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3769              		.loc 1 120 47 view .LVU1095
 3770 00e0 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 3771              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3772              		.loc 1 119 63 view .LVU1096
 3773 00e4 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 3774              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3775              		.loc 1 114 37 view .LVU1097
 3776 00e8 041081E2 		add	r1, r1, #4	@ yy, yy,
 3777              	.LVL277:
 3778              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3779              		.loc 1 120 47 view .LVU1098
 3780 00ec 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 3781              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3782              		.loc 1 114 9 view .LVU1099
 3783 00f0 01005AE1 		cmp	r10, r1	@ _2, yy
 3784              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3785              		.loc 1 120 47 view .LVU1100
 3786 00f4 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 3787 00f8 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 3788              	.LVL278:
 121:armwave.c     ****             }
 3789              		.loc 1 121 17 is_stmt 1 view .LVU1101
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3790              		.loc 1 118 17 view .LVU1102
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3791              		.loc 1 119 17 view .LVU1103
 120:armwave.c     ****                 word >>= 8;
 3792              		.loc 1 120 17 view .LVU1104
 3793              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3794              		.loc 1 118 45 is_stmt 0 view .LVU1105
 3795 00fc 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3796              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3797              		.loc 1 119 63 view .LVU1106
 3798 0100 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3799              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3800              		.loc 1 120 47 view .LVU1107
 3801 0104 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 3802 0108 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 3803 010c 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 3804 0110 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 3805 0114 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 121:armwave.c     ****             }
 3806              		.loc 1 121 17 is_stmt 1 view .LVU1108
 3807              	.LVL279:
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3808              		.loc 1 118 17 view .LVU1109
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3809              		.loc 1 119 17 view .LVU1110
 120:armwave.c     ****                 word >>= 8;
 3810              		.loc 1 120 17 view .LVU1111
 3811              	@ armwave.c:118:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 118:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3812              		.loc 1 118 45 is_stmt 0 view .LVU1112
 3813 0118 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3814              	@ armwave.c:119:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 119:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3815              		.loc 1 119 63 view .LVU1113
 3816 011c 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3817              	@ armwave.c:120:                 *(write_buffer + scale_value) += 1;
 120:armwave.c     ****                 word >>= 8;
 3818              		.loc 1 120 47 view .LVU1114
 3819 0120 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 3820 0124 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 3821 0128 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 3822 012c 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 3823 0130 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 121:armwave.c     ****             }
 3824              		.loc 1 121 17 is_stmt 1 view .LVU1115
 3825              	.LVL280:
 3826              	@ armwave.c:114:         for(yy = 0; yy < height; yy += 4) {
 114:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3827              		.loc 1 114 9 is_stmt 0 view .LVU1116
 3828 0134 D6FFFF8A 		bhi	.L206		@,
 3829 0138 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3830              	.LVL281:
 3831              	.L205:
 3832              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3833              		.loc 1 109 44 view .LVU1117
 3834 013c 017087E2 		add	r7, r7, #1	@ w, w,
 3835              	.LVL282:
 3836              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3837              		.loc 1 109 5 view .LVU1118
 3838 0140 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 3839 0144 C9FFFF3A 		bcc	.L207		@,
 3840 0148 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3841              	.LVL283:
 3842              	.L204:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3843              		.loc 1 109 5 view .LVU1119
 3844              	.LBE30:
 3845              	.LBE31:
 3846              	@ armwave.c:438:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 438:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3847              		.loc 1 438 32 discriminator 3 view .LVU1120
 3848 014c 0510A0E1 		mov	r1, r5	@, _61
 3849 0150 020BA0E3 		mov	r0, #2048	@,
 3850              	.LVL284:
 438:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3851              		.loc 1 438 32 discriminator 3 view .LVU1121
 3852 0154 FEFFFFEB 		bl	__aeabi_uidiv		@
 3853              	.LVL285:
 3854              	@ armwave.c:438:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 438:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3855              		.loc 1 438 67 discriminator 3 view .LVU1122
 3856 0158 018088E2 		add	r8, r8, #1	@ yy, yy,
 3857              	.LVL286:
 3858              	@ armwave.c:438:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 438:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3859              		.loc 1 438 9 discriminator 3 view .LVU1123
 3860 015c 080050E1 		cmp	r0, r8	@, yy
 3861 0160 B8FFFF8A 		bhi	.L208		@,
 3862              	.LVL287:
 3863              	.L211:
 3864              	@ armwave.c:437:     for(n = 0; n < 5000; n++) {
 437:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3865              		.loc 1 437 5 discriminator 2 view .LVU1124
 3866 0164 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 3867 0168 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 3868 016c 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 3869 0170 AFFFFF1A 		bne	.L203		@,
 3870 0174 0300A0E1 		mov	r0, r3	@, ivtmp_191
 441:armwave.c     ****         }
 442:armwave.c     ****     }
 443:armwave.c     **** 
 444:armwave.c     ****     /*
 445:armwave.c     ****     printf("Creating pixbuf\n");
 446:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 447:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 448:armwave.c     **** 
 449:armwave.c     ****     printf("Dumping pixbuf\n");
 450:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 451:armwave.c     ****     */
 452:armwave.c     **** 
 453:armwave.c     ****     return 0;
 3871              		.loc 1 453 5 is_stmt 1 view .LVU1125
 3872              	@ armwave.c:454: }
 454:armwave.c     **** }...
 3873              		.loc 1 454 1 is_stmt 0 view .LVU1126
 3874 0178 0CD08DE2 		add	sp, sp, #12	@,,
 3875              		.cfi_def_cfa_offset 36
 3876              		@ sp needed	@
 3877 017c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3878              	.L223:
 3879              		.align	2
 3880              	.L222:
 3881 0180 00000000 		.word	g_armwave_state
 3882 0184 88130000 		.word	5000
 3883              		.cfi_endproc
 3884              	.LFE71:
 3886              		.global	mod_depth
 3887              		.global	overall_scale
 3888              		.comm	gamma_table,256,4
 3889              		.comm	test_wave_buffer,131072,4
 3890              		.comm	g_armwave_state,100,4
 3891              		.section	.rodata
 3892              		.align	2
 3893              		.set	.LANCHOR0,. + 0
 3896              	__PRETTY_FUNCTION__.17001:
 3897 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3897      6176655F 
 3897      73657475 
 3897      705F7265 
 3897      6E646572 
 3898 0015 000000   		.space	3
 3901              	__PRETTY_FUNCTION__.17029:
 3902 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3902      6176655F 
 3902      66696C6C 
 3902      5F706978 
 3902      6275665F 
 3905              	__PRETTY_FUNCTION__.17059:
 3906 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3906      6176655F 
 3906      66696C6C 
 3906      5F706978 
 3906      6275665F 
 3907 004b 00       		.space	1
 3910              	overall_scale:
 3911 004c 00002041 		.word	1092616192
 3912              		.bss
 3913              		.align	2
 3914              		.set	.LANCHOR1,. + 0
 3917              	mod_depth:
 3918 0000 00000000 		.space	4
 3919              		.section	.rodata.str1.4,"aMS",%progbits,1
 3920              		.align	2
 3921              	.LC0:
 3922 0000 61726D77 		.ascii	"armwave.c\000"
 3922      6176652E 
 3922      6300
 3923 000a 0000     		.space	2
 3924              	.LC1:
 3925 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3925      65745F68 
 3925      65696768 
 3925      74203D3D 
 3925      20323536 
 3926 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3926      68656967 
 3926      6874203D 
 3926      3D203130 
 3926      3234207C 
 3927 006b 00       		.space	1
 3928              	.LC2:
 3929 006c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3929      6D776176 
 3929      655F7374 
 3929      6174652E 
 3929      6368315F 
 3930 008f 00       		.space	1
 3931              	.LC3:
 3932 0090 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3932      6D776176 
 3932      655F7374 
 3932      6174652E 
 3932      78636F6F 
 3933 00b9 000000   		.space	3
 3934              	.LC4:
 3935 00bc 73746172 		.ascii	"start_point < end_point\000"
 3935      745F706F 
 3935      696E7420 
 3935      3C20656E 
 3935      645F706F 
 3936              	.LC5:
 3937 00d4 6F75745F 		.ascii	"out_buffer != NULL\000"
 3937      62756666 
 3937      65722021 
 3937      3D204E55 
 3937      4C4C00
 3938 00e7 00       		.space	1
 3939              	.LC6:
 3940 00e8 6E703D25 		.ascii	"np=%d w=%d v=%d\012\000"
 3940      6420773D 
 3940      25642076 
 3940      3D25640A 
 3940      00
 3941 00f9 000000   		.space	3
 3942              	.LC7:
 3943 00fc 776200   		.ascii	"wb\000"
 3944 00ff 00       		.space	1
 3945              	.LC8:
 3946 0100 50330A00 		.ascii	"P3\012\000"
 3947              	.LC9:
 3948 0104 25642025 		.ascii	"%d %d\012\000"
 3948      640A00
 3949 010b 00       		.space	1
 3950              	.LC10:
 3951 010c 3235350A 		.ascii	"255\012\000"
 3951      00
 3952 0111 000000   		.space	3
 3953              	.LC11:
 3954 0114 25336420 		.ascii	"%3d %3d %3d\012\000"
 3954      25336420 
 3954      2533640A 
 3954      00
 3955 0121 000000   		.space	3
 3956              	.LC12:
 3957 0124 76302E30 		.ascii	"v0.0.1\000"
 3957      2E3100
 3958 012b 00       		.space	1
 3959              	.LC13:
 3960 012c 61726D77 		.ascii	"armwave version: %s\012\000"
 3960      61766520 
 3960      76657273 
 3960      696F6E3A 
 3960      2025730A 
 3961              		.text
 3962              	.Letext0:
 3963              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3964              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3965              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3966              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3967              		.file 6 "/usr/include/stdio.h"
 3968              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3969              		.file 8 "/usr/include/errno.h"
 3970              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3971              		.file 10 "/usr/include/unistd.h"
 3972              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3973              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3974              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3975              		.file 14 "/usr/include/math.h"
 3976              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3977              		.file 16 "/usr/include/time.h"
 3978              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3979              		.file 18 "/usr/local/include/python3.8/object.h"
 3980              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3981              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3982              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3983              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3984              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3985              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3986              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3987              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3988              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3989              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3990              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3991              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3992              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3993              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3994              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3995              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3996              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3997              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3998              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3999              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4000              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4001              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4002              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4003              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4004              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4005              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4006              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4007              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4008              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4009              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4010              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4011              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4012              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4013              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4014              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4015              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4016              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4017              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4018              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4019              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4020              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4021              		.file 60 "/usr/local/include/python3.8/context.h"
 4022              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4023              		.file 62 "/usr/local/include/python3.8/code.h"
 4024              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4025              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4026              		.file 65 "/usr/local/include/python3.8/import.h"
 4027              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4028              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4029              		.file 68 "armwave.h"
 4030              		.file 69 "/usr/include/stdlib.h"
 4031              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4032              		.file 71 "<built-in>"
 4033              		.file 72 "/usr/include/assert.h"
 4034              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
