   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 70819FE5 		ldr	r8, .L22	@ tmp194,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0090A0E1 		mov	r9, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241098E5 		ldr	r1, [r8, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403098E5 		ldr	r3, [r8, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044098E5 		ldr	r4, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 40019FE5 		ldr	r0, .L22+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp204,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383098E5 		ldr	r3, [r8, #56]	@ _82, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _82,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _82, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3E0000DA 		ble	.L12		@,
 317 0108 14A098E5 		ldr	r10, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 318 010c 343098E5 		ldr	r3, [r8, #52]	@ _266, g_armwave_state.wave_stride
 319 0110 09A08AE0 		add	r10, r10, r9	@ ivtmp.52, g_armwave_state.wave_buffer, slice_y
 320              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 103 51 view .LVU52
 322 0114 247098E5 		ldr	r7, [r8, #36]	@ _75, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 324              		.loc 1 103 116 view .LVU53
 325 0118 40E098E5 		ldr	lr, [r8, #64]	@ _79, g_armwave_state.bitdepth_height
 326 011c 00906AE2 		rsb	r9, r10, #0	@ ivtmp.53, ivtmp.52
 327              	.LVL11:
 328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 329              		.loc 1 79 11 view .LVU54
 330 0120 05C0A0E1 		mov	ip, r5	@ write_buffer, write_buffer
 331 0124 24308DE5 		str	r3, [sp, #36]	@ _266, %sfp
 332 0128 0030A0E3 		mov	r3, #0	@ w,
 333 012c 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 334              	.LVL12:
 335              	.L15:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 336              		.loc 1 80 9 is_stmt 1 view .LVU55
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 337              		.loc 1 84 9 view .LVU56
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 338              		.loc 1 84 9 is_stmt 0 view .LVU57
 339 0130 000056E3 		cmp	r6, #0	@ height,
 340 0134 2800000A 		beq	.L13		@,
 341 0138 0A80A0E1 		mov	r8, r10	@ ivtmp.45, ivtmp.52
 342 013c 0030A0E3 		mov	r3, #0	@ ivtmp.46,
 343              	.LVL13:
 344              	.L14:
  87:armwave.c     **** 
 345              		.loc 1 87 13 is_stmt 1 view .LVU58
 346              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 347              		.loc 1 87 18 is_stmt 0 view .LVU59
 348 0140 042098E4 		ldr	r2, [r8], #4	@ word, MEM[base: _275, offset: 0B]
 349              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 350              		.loc 1 89 13 is_stmt 1 view .LVU60
  90:armwave.c     ****                 
 351              		.loc 1 90 17 view .LVU61
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 102 17 view .LVU62
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 107 17 view .LVU63
 354              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 355              		.loc 1 103 74 is_stmt 0 view .LVU64
 356 0144 23C8A0E1 		lsr	ip, r3, #16	@ tmp211, ivtmp.46,
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 34 view .LVU65
 359 0148 033087E0 		add	r3, r7, r3	@ _102, _75, ivtmp.46
 360              	.LVL15:
 361              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 362              		.loc 1 90 29 view .LVU66
 363 014c 7210EFE6 		uxtb	r1, r2	@ scale_value, word
 364              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 107 47 view .LVU67
 366 0150 9E1C2CE0 		mla	ip, lr, ip, r1	@ tmp214, _79, tmp211, scale_value
 367              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 368              		.loc 1 108 22 view .LVU68
 369 0154 2214A0E1 		lsr	r1, r2, #8	@ word, word,
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 74 view .LVU69
 372 0158 2308A0E1 		lsr	r0, r3, #16	@ tmp219, _102,
 373              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 374              		.loc 1 90 29 view .LVU70
 375 015c 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU71
 378 0160 8CC0A0E1 		lsl	ip, ip, #1	@ tmp215, tmp214,
 379 0164 9E1020E0 		mla	r0, lr, r0, r1	@ tmp223, _79, tmp219, scale_value
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 34 view .LVU72
 382 0168 033087E0 		add	r3, r7, r3	@ _128, _75, _102
 383              	@ armwave.c:108:                 word >>= 8;
 384              		.loc 1 108 22 view .LVU73
 385 016c 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 386              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 387              		.loc 1 107 47 view .LVU74
 388 0170 BC5094E1 		ldrh	r5, [r4, ip]	@ *_85, *_85
 389              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 390              		.loc 1 103 74 view .LVU75
 391 0174 23B8A0E1 		lsr	fp, r3, #16	@ tmp228, _128,
 392              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 393              		.loc 1 90 29 view .LVU76
 394 0178 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 395              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 396              		.loc 1 107 47 view .LVU77
 397 017c 8000A0E1 		lsl	r0, r0, #1	@ tmp224, tmp223,
 398              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 399              		.loc 1 103 34 view .LVU78
 400 0180 033087E0 		add	r3, r7, r3	@ _154, _75, _128
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 view .LVU79
 403 0184 9E1B21E0 		mla	r1, lr, fp, r1	@ tmp232, _79, tmp228, scale_value
 404 0188 015085E2 		add	r5, r5, #1	@ tmp218, *_85,
 405 018c BC5084E1 		strh	r5, [r4, ip]	@ movhi	@ tmp218, *_85
 406              		.loc 1 108 17 is_stmt 1 view .LVU80
 407              	.LVL16:
  90:armwave.c     ****                 
 408              		.loc 1 90 17 view .LVU81
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 409              		.loc 1 102 17 view .LVU82
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 17 view .LVU83
 411              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 412              		.loc 1 103 74 is_stmt 0 view .LVU84
 413 0190 23C8A0E1 		lsr	ip, r3, #16	@ tmp237, _154,
 414              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 47 view .LVU85
 416 0194 B05094E1 		ldrh	r5, [r4, r0]	@ *_111, *_111
 417 0198 8110A0E1 		lsl	r1, r1, #1	@ tmp233, tmp232,
 418              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 419              		.loc 1 102 50 view .LVU86
 420 019c 9E0C0CE0 		mul	ip, lr, ip	@ tmp238, _79, tmp237
 421              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 422              		.loc 1 107 47 view .LVU87
 423 01a0 015085E2 		add	r5, r5, #1	@ tmp227, *_111,
 424 01a4 B05084E1 		strh	r5, [r4, r0]	@ movhi	@ tmp227, *_111
 425              		.loc 1 108 17 is_stmt 1 view .LVU88
 426              	.LVL17:
  90:armwave.c     ****                 
 427              		.loc 1 90 17 view .LVU89
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 428              		.loc 1 102 17 view .LVU90
 107:armwave.c     ****                 word >>= 8;
 429              		.loc 1 107 17 view .LVU91
 430              	@ armwave.c:108:                 word >>= 8;
 431              		.loc 1 108 22 is_stmt 0 view .LVU92
 432 01a8 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 433              	.LVL18:
 434              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 435              		.loc 1 107 47 view .LVU93
 436 01ac B10094E1 		ldrh	r0, [r4, r1]	@ *_137, *_137
 437 01b0 8220A0E1 		lsl	r2, r2, #1	@ tmp241, word,
 438              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 439              		.loc 1 102 30 view .LVU94
 440 01b4 8CC084E0 		add	ip, r4, ip, lsl #1	@ write_buffer, write_buffer_base, tmp238,
 441              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 442              		.loc 1 107 47 view .LVU95
 443 01b8 010080E2 		add	r0, r0, #1	@ tmp236, *_137,
 444 01bc B10084E1 		strh	r0, [r4, r1]	@ movhi	@ tmp236, *_137
 445              		.loc 1 108 17 is_stmt 1 view .LVU96
 446              	.LVL19:
  90:armwave.c     ****                 
 447              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 448              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 449              		.loc 1 107 17 view .LVU99
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 is_stmt 0 view .LVU100
 452 01c0 B2109CE1 		ldrh	r1, [ip, r2]	@ *_163, *_163
 453              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 454              		.loc 1 84 9 view .LVU101
 455 01c4 080089E0 		add	r0, r9, r8	@ tmp245, ivtmp.53, ivtmp.45
 456 01c8 000056E1 		cmp	r6, r0	@ height, tmp245
 457              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 458              		.loc 1 107 47 view .LVU102
 459 01cc 011081E2 		add	r1, r1, #1	@ tmp244, *_163,
 460 01d0 033087E0 		add	r3, r7, r3	@ ivtmp.46, _75, _154
 461              	.LVL20:
 107:armwave.c     ****                 word >>= 8;
 462              		.loc 1 107 47 view .LVU103
 463 01d4 B2108CE1 		strh	r1, [ip, r2]	@ movhi	@ tmp244, *_163
 464              		.loc 1 108 17 is_stmt 1 view .LVU104
 465              	.LVL21:
 466              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 467              		.loc 1 84 9 is_stmt 0 view .LVU105
 468 01d8 D8FFFF8A 		bhi	.L14		@,
 469              	.LVL22:
 470              	.L13:
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 discriminator 2 view .LVU106
 473 01dc 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 474              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 475              		.loc 1 79 5 discriminator 2 view .LVU107
 476 01e0 20209DE5 		ldr	r2, [sp, #32]	@ _82, %sfp
 477              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 478              		.loc 1 79 44 discriminator 2 view .LVU108
 479 01e4 013083E2 		add	r3, r3, #1	@ w, w,
 480 01e8 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 481              	.LVL23:
 482              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 discriminator 2 view .LVU109
 484 01ec 020053E1 		cmp	r3, r2	@ w, _82
 485 01f0 24309DE5 		ldr	r3, [sp, #36]	@ _266, %sfp
 486              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 487              		.loc 1 79 5 discriminator 2 view .LVU110
 488 01f4 03A08AE0 		add	r10, r10, r3	@ ivtmp.52, ivtmp.52, _266
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 79 5 discriminator 2 view .LVU111
 490 01f8 039049E0 		sub	r9, r9, r3	@ ivtmp.53, ivtmp.53, _266
 491 01fc CBFFFF1A 		bne	.L15		@,
 492 0200 0C50A0E1 		mov	r5, ip	@ write_buffer, write_buffer
 493              	.LVL25:
 494              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 495              		.loc 1 113 5 is_stmt 1 view .LVU112
 496              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 497              		.loc 1 113 40 is_stmt 0 view .LVU113
 498 0204 041045E0 		sub	r1, r5, r4	@ tmp246, write_buffer, write_buffer_base
 499              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 500              		.loc 1 113 5 view .LVU114
 501 0208 14009FE5 		ldr	r0, .L22+8	@,
 502 020c C110A0E1 		asr	r1, r1, #1	@, tmp246,
 503              	@ armwave.c:114: }
 114:armwave.c     **** }
 504              		.loc 1 114 1 view .LVU115
 505 0210 2CD08DE2 		add	sp, sp, #44	@,,
 506              		.cfi_def_cfa_offset 36
 507              		@ sp needed	@
 508 0214 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_restore 14
 510              		.cfi_restore 11
 511              		.cfi_restore 10
 512              		.cfi_restore 9
 513              		.cfi_restore 8
 514              		.cfi_restore 7
 515              		.cfi_restore 6
 516              		.cfi_restore 5
 517              		.cfi_restore 4
 518              		.cfi_def_cfa_offset 0
 519              	.LVL26:
 520              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 521              		.loc 1 113 5 view .LVU116
 522 0218 FEFFFFEA 		b	printf		@
 523              	.LVL27:
 524              	.L23:
 525              		.align	2
 526              	.L22:
 527 021c 00000000 		.word	g_armwave_state
 528 0220 20000000 		.word	.LC2
 529 0224 78000000 		.word	.LC3
 530              		.cfi_endproc
 531              	.LFE59:
 533              		.align	2
 534              		.global	armwave_fill_pixbuf_scaled
 535              		.syntax unified
 536              		.arm
 537              		.fpu vfp
 539              	armwave_fill_pixbuf_scaled:
 540              	.LVL28:
 541              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 542              		.loc 1 121 1 is_stmt 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 546              		.loc 1 122 5 view .LVU118
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 547              		.loc 1 124 5 view .LVU119
 125:armwave.c     ****     uint8_t r, g, b;
 548              		.loc 1 125 5 view .LVU120
 126:armwave.c     ****     int value; 
 549              		.loc 1 126 5 view .LVU121
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 128 5 view .LVU122
 551              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 552              		.loc 1 121 1 is_stmt 0 view .LVU123
 553 0228 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 565              		.loc 1 132 5 view .LVU124
 566 022c 0010A0E1 		mov	r1, r0	@, out_buffer
 567              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 568              		.loc 1 128 15 view .LVU125
 569 0230 B4719FE5 		ldr	r7, .L49	@ tmp208,
 570              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 571              		.loc 1 121 1 view .LVU126
 572 0234 0040A0E1 		mov	r4, r0	@ out_buffer, out_buffer
 573 0238 14D04DE2 		sub	sp, sp, #20	@,,
 574              		.cfi_def_cfa_offset 56
 575              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 576              		.loc 1 132 5 view .LVU127
 577 023c AC019FE5 		ldr	r0, .L49+4	@,
 578              	.LVL29:
 579              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 580              		.loc 1 128 15 view .LVU128
 581 0240 045097E5 		ldr	r5, [r7, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 582              	.LVL30:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 583              		.loc 1 129 5 is_stmt 1 view .LVU129
 130:armwave.c     **** 
 584              		.loc 1 130 5 view .LVU130
 585              		.loc 1 132 5 view .LVU131
 586 0244 FEFFFFEB 		bl	printf		@
 587              	.LVL31:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 588              		.loc 1 134 5 view .LVU132
 589              	@ armwave.c:134:     if(out_buffer == NULL)
 590              		.loc 1 134 7 is_stmt 0 view .LVU133
 591 0248 000054E3 		cmp	r4, #0	@ out_buffer,
 592 024c 3D00000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 593              		.loc 1 137 5 is_stmt 1 view .LVU134
 594              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 595              		.loc 1 137 27 is_stmt 0 view .LVU135
 596 0250 583097E5 		ldr	r3, [r7, #88]	@ _1, g_armwave_state.target_width
 597              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%08x\n", \
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 598              		.loc 1 140 38 view .LVU136
 599 0254 5C1097E5 		ldr	r1, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 600              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 601              		.loc 1 137 10 view .LVU137
 602 0258 406097E5 		ldr	r6, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 603              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%0
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 604              		.loc 1 139 5 view .LVU138
 605 025c 0C008DE2 		add	r0, sp, #12	@ tmp165,,
 606              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 607              		.loc 1 140 38 view .LVU139
 608 0260 910301E0 		mul	r1, r1, r3	@ tmp161, g_armwave_state.target_height, _1
 609              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 610              		.loc 1 137 10 view .LVU140
 611 0264 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.bitdepth_height, _1
 612              	.LVL32:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 613              		.loc 1 139 5 is_stmt 1 view .LVU141
 614 0268 0111A0E1 		lsl	r1, r1, #2	@, tmp161,
 615 026c 0620A0E1 		mov	r2, r6	@, npix
 616 0270 04008DE5 		str	r0, [sp, #4]	@ tmp165,
 617 0274 503097E5 		ldr	r3, [r7, #80]	@, g_armwave_state.ch_buff_size
 618 0278 00508DE5 		str	r5, [sp]	@ base_32ptr,
 619 027c 70019FE5 		ldr	r0, .L49+8	@,
 620 0280 FEFFFFEB 		bl	printf		@
 621              	.LVL33:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 622              		.loc 1 144 5 view .LVU142
 623              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 624              		.loc 1 144 59 is_stmt 0 view .LVU143
 625 0284 583097E5 		ldr	r3, [r7, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 0288 5C2097E5 		ldr	r2, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 627              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 628              		.loc 1 144 5 view .LVU144
 629 028c 0010A0E3 		mov	r1, #0	@,
 630 0290 0400A0E1 		mov	r0, r4	@, out_buffer
 631              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 632              		.loc 1 144 59 view .LVU145
 633 0294 920302E0 		mul	r2, r2, r3	@ tmp168, g_armwave_state.target_height, g_armwave_state.target_width
 634              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 635              		.loc 1 144 5 view .LVU146
 636 0298 0221A0E1 		lsl	r2, r2, #2	@, tmp168,
 637 029c FEFFFFEB 		bl	memset		@
 638              	.LVL34:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 639              		.loc 1 146 5 is_stmt 1 view .LVU147
 640 02a0 50019FE5 		ldr	r0, .L49+12	@,
 641 02a4 FEFFFFEB 		bl	puts		@
 642              	.LVL35:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 643              		.loc 1 148 5 view .LVU148
 644              		.loc 1 148 5 is_stmt 0 view .LVU149
 645 02a8 000056E3 		cmp	r6, #0	@ npix,
 646 02ac 4C0000DA 		ble	.L33		@,
 647              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 648              		.loc 1 148 11 view .LVU150
 649 02b0 0040A0E3 		mov	r4, #0	@ n,
 650              	.LVL36:
 651              	@ armwave.c:153:         if(n % 200 == 0) {
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         //wave_word = 0x12345678;
 151:armwave.c     ****         wave_word = *base_32ptr++;
 152:armwave.c     **** 
 153:armwave.c     ****         if(n % 200 == 0) {
 652              		.loc 1 153 14 view .LVU151
 653 02b4 40A19FE5 		ldr	r10, .L49+16	@ tmp179,
 654              	@ armwave.c:154:            printf("%d\n", n);
 154:armwave.c     ****            printf("%d\n", n);
 655              		.loc 1 154 12 view .LVU152
 656 02b8 40819FE5 		ldr	r8, .L49+20	@ tmp209,
 657              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 658              		.loc 1 122 46 view .LVU153
 659 02bc 0490A0E1 		mov	r9, r4	@ painted, n
 660 02c0 040000EA 		b	.L32		@
 661              	.LVL37:
 662              	.L28:
 155:armwave.c     ****         }
 156:armwave.c     **** 
 157:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 663              		.loc 1 157 9 is_stmt 1 view .LVU154
 664              	@ armwave.c:157:         if(COND_UNLIKELY(wave_word != 0)) {
 665              		.loc 1 157 11 is_stmt 0 view .LVU155
 666 02c4 00005BE3 		cmp	fp, #0	@ wave_word,
 667 02c8 0F00001A 		bne	.L45		@,
 668              	.LVL38:
 669              	.L29:
 670              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 671              		.loc 1 148 28 discriminator 2 view .LVU156
 672 02cc 024084E2 		add	r4, r4, #2	@ n, n,
 673              	.LVL39:
 674              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 675              		.loc 1 148 5 discriminator 2 view .LVU157
 676 02d0 040056E1 		cmp	r6, r4	@ npix, n
 677 02d4 180000DA 		ble	.L27		@,
 678              	.LVL40:
 679              	.L32:
 151:armwave.c     **** 
 680              		.loc 1 151 9 is_stmt 1 view .LVU158
 681              	@ armwave.c:153:         if(n % 200 == 0) {
 153:armwave.c     ****            printf("%d\n", n);
 682              		.loc 1 153 14 is_stmt 0 view .LVU159
 683 02d8 9A24C3E0 		smull	r2, r3, r10, r4	@ tmp212, tmp178, tmp179, n
 684              	@ armwave.c:151:         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 685              		.loc 1 151 19 view .LVU160
 686 02dc 04B095E4 		ldr	fp, [r5], #4	@ wave_word, MEM[base: base_32ptr_50, offset: 4294967292B]
 687              	.LVL41:
 153:armwave.c     ****            printf("%d\n", n);
 688              		.loc 1 153 9 is_stmt 1 view .LVU161
 689              	@ armwave.c:153:         if(n % 200 == 0) {
 153:armwave.c     ****            printf("%d\n", n);
 690              		.loc 1 153 14 is_stmt 0 view .LVU162
 691 02e0 C41FA0E1 		asr	r1, r4, #31	@ tmp181, n,
 692 02e4 433361E0 		rsb	r3, r1, r3, asr #6	@ tmp177, tmp181, tmp178,
 693 02e8 033183E0 		add	r3, r3, r3, lsl #2	@ tmp184, tmp177, tmp177,
 694 02ec 033183E0 		add	r3, r3, r3, lsl #2	@ tmp186, tmp184, tmp184,
 695              	@ armwave.c:153:         if(n % 200 == 0) {
 153:armwave.c     ****            printf("%d\n", n);
 696              		.loc 1 153 11 view .LVU163
 697 02f0 830154E1 		cmp	r4, r3, lsl #3	@ n, tmp186,
 698 02f4 F2FFFF1A 		bne	.L28		@,
 699              	.LVL42:
 154:armwave.c     ****         }
 700              		.loc 1 154 12 is_stmt 1 view .LVU164
 701 02f8 0410A0E1 		mov	r1, r4	@, n
 702 02fc 0800A0E1 		mov	r0, r8	@, tmp209
 703 0300 FEFFFFEB 		bl	printf		@
 704              	.LVL43:
 705              		.loc 1 157 9 view .LVU165
 706              	@ armwave.c:157:         if(COND_UNLIKELY(wave_word != 0)) {
 707              		.loc 1 157 11 is_stmt 0 view .LVU166
 708 0304 00005BE3 		cmp	fp, #0	@ wave_word,
 709 0308 EFFFFF0A 		beq	.L29		@,
 710              	.LVL44:
 711              	.L45:
 712              	@ armwave.c:159:                 value = wave_word & 0xffff;
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 713              		.loc 1 159 23 view .LVU167
 714 030c 7B30FFE6 		uxth	r3, fp	@ value, wave_word
 715              	@ armwave.c:162:                 if(value != 0) {
 160:armwave.c     ****                 wave_word >>= 16;
 161:armwave.c     **** 
 162:armwave.c     ****                 if(value != 0) {
 716              		.loc 1 162 19 view .LVU168
 717 0310 000053E3 		cmp	r3, #0	@ value,
 718              	@ armwave.c:160:                 wave_word >>= 16;
 160:armwave.c     ****                 wave_word >>= 16;
 719              		.loc 1 160 27 view .LVU169
 720 0314 2BB8A0E1 		lsr	fp, fp, #16	@ wave_word, wave_word,
 721              	.LVL45:
 722              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 167:armwave.c     ****                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 170:armwave.c     **** 
 171:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 172:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 174:armwave.c     ****                     // Plot the pixels
 175:armwave.c     ****                     nsub = n + w;
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 723              		.loc 1 176 57 view .LVU170
 724 0318 0A6AD7ED 		vldr.32	s13, [r7, #40]	@ _20, g_armwave_state.vscale_frac
 159:armwave.c     ****                 wave_word >>= 16;
 725              		.loc 1 159 17 is_stmt 1 view .LVU171
 726              	.LVL46:
 160:armwave.c     ****                 wave_word >>= 16;
 727              		.loc 1 160 17 view .LVU172
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 728              		.loc 1 162 17 view .LVU173
 729              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 730              		.loc 1 162 19 is_stmt 0 view .LVU174
 731 031c 1E00001A 		bne	.L46		@,
 159:armwave.c     ****                 wave_word >>= 16;
 732              		.loc 1 159 17 is_stmt 1 view .LVU175
 733              	.LVL47:
 160:armwave.c     **** 
 734              		.loc 1 160 17 view .LVU176
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 735              		.loc 1 162 17 view .LVU177
 736              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 737              		.loc 1 162 19 is_stmt 0 view .LVU178
 738 0320 00005BE3 		cmp	fp, #0	@ wave_word,
 739 0324 0900001A 		bne	.L47		@,
 740              	.L31:
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 741              		.loc 1 162 19 view .LVU179
 742 0328 0230A0E3 		mov	r3, #2	@ tmp221,
 743 032c 0C308DE5 		str	r3, [sp, #12]	@ tmp221, w
 744              	.L48:
 745              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 746              		.loc 1 148 28 view .LVU180
 747 0330 024084E2 		add	r4, r4, #2	@ n, n,
 748              	.LVL48:
 749              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 750              		.loc 1 148 5 view .LVU181
 751 0334 040056E1 		cmp	r6, r4	@ npix, n
 752 0338 E6FFFFCA 		bgt	.L32		@,
 753              	.LVL49:
 754              	.L27:
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 180:armwave.c     ****                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 183:armwave.c     ****                         painted++;
 184:armwave.c     ****                     }
 185:armwave.c     ****                 }
 186:armwave.c     ****             }
 187:armwave.c     ****         }
 188:armwave.c     ****     }
 189:armwave.c     **** 
 190:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 755              		.loc 1 190 5 is_stmt 1 view .LVU182
 756 033c 0910A0E1 		mov	r1, r9	@, painted
 757 0340 BC009FE5 		ldr	r0, .L49+24	@,
 758 0344 FEFFFFEB 		bl	printf		@
 759              	.LVL50:
 760              	.L24:
 761              	@ armwave.c:191: }
 191:armwave.c     **** }
 762              		.loc 1 191 1 is_stmt 0 view .LVU183
 763 0348 14D08DE2 		add	sp, sp, #20	@,,
 764              		.cfi_remember_state
 765              		.cfi_def_cfa_offset 36
 766              		@ sp needed	@
 767 034c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 768              	.LVL51:
 769              	.L47:
 770              		.cfi_restore_state
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 771              		.loc 1 163 21 is_stmt 1 view .LVU184
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 772              		.loc 1 164 21 view .LVU185
 165:armwave.c     **** 
 773              		.loc 1 165 21 view .LVU186
 167:armwave.c     ****                     g = MIN(gg, 255);
 774              		.loc 1 167 21 view .LVU187
 168:armwave.c     ****                     b = MIN(bb, 255);
 775              		.loc 1 168 21 view .LVU188
 169:armwave.c     **** 
 776              		.loc 1 169 21 view .LVU189
 172:armwave.c     **** 
 777              		.loc 1 172 21 view .LVU190
 175:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 778              		.loc 1 175 21 view .LVU191
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 779              		.loc 1 176 21 view .LVU192
 780              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 781              		.loc 1 176 32 is_stmt 0 view .LVU193
 782 0350 013084E2 		add	r3, r4, #1	@ tmp199, n,
 783              	.LVL52:
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 784              		.loc 1 176 32 view .LVU194
 785 0354 7330EFE6 		uxtb	r3, r3	@ _18, tmp199
 786              	.LVL53:
 787              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 788              		.loc 1 177 41 view .LVU195
 789 0358 012083E2 		add	r2, r3, #1	@ tmp202, _18,
 790              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 791              		.loc 1 176 40 view .LVU196
 792 035c 903A07EE 		vmov	s15, r3	@ int	@ _18, _18
 793              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 794              		.loc 1 177 41 view .LVU197
 795 0360 102A07EE 		vmov	s14, r2	@ int	@ tmp202, tmp202
 796              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 797              		.loc 1 176 40 view .LVU198
 798 0364 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp200, _18
 799              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 800              		.loc 1 177 46 view .LVU199
 801 0368 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp203, tmp202
 802              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 176 40 view .LVU200
 804 036c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp201, tmp200, _20
 805              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 806              		.loc 1 177 46 view .LVU201
 807 0370 267A27EE 		vmul.f32	s14, s14, s13	@ tmp204, tmp203, _20
 808              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 809              		.loc 1 176 24 view .LVU202
 810 0374 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp201
 811 0378 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 812              	.LVL54:
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 813              		.loc 1 177 21 is_stmt 1 view .LVU203
 814              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 815              		.loc 1 177 24 is_stmt 0 view .LVU204
 816 037c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp204
 817 0380 901A17EE 		vmov	r1, s15	@ int	@ ye, ye
 818              	.LVL55:
 178:armwave.c     **** 
 819              		.loc 1 178 21 is_stmt 1 view .LVU205
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 820              		.loc 1 180 21 view .LVU206
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 821              		.loc 1 180 21 is_stmt 0 view .LVU207
 822 0384 010053E1 		cmp	r3, r1	@ yy, ye
 181:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 823              		.loc 1 181 25 is_stmt 1 view .LVU208
 824              	.LVL56:
 183:armwave.c     ****                     }
 825              		.loc 1 183 25 view .LVU209
 183:armwave.c     ****                     }
 826              		.loc 1 183 25 is_stmt 0 view .LVU210
 827 0388 03304130 		subcc	r3, r1, r3	@ tmp205, ye, yy
 828              	.LVL57:
 183:armwave.c     ****                     }
 829              		.loc 1 183 25 view .LVU211
 830 038c 03908930 		addcc	r9, r9, r3	@ painted, painted, tmp205
 831              	.LVL58:
 183:armwave.c     ****                     }
 832              		.loc 1 183 25 view .LVU212
 833 0390 0230A0E3 		mov	r3, #2	@ tmp221,
 834 0394 0C308DE5 		str	r3, [sp, #12]	@ tmp221, w
 835 0398 E4FFFFEA 		b	.L48		@
 836              	.LVL59:
 837              	.L46:
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 838              		.loc 1 163 21 is_stmt 1 view .LVU213
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 839              		.loc 1 164 21 view .LVU214
 165:armwave.c     **** 
 840              		.loc 1 165 21 view .LVU215
 167:armwave.c     ****                     g = MIN(gg, 255);
 841              		.loc 1 167 21 view .LVU216
 168:armwave.c     ****                     b = MIN(bb, 255);
 842              		.loc 1 168 21 view .LVU217
 169:armwave.c     **** 
 843              		.loc 1 169 21 view .LVU218
 172:armwave.c     **** 
 844              		.loc 1 172 21 view .LVU219
 175:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 845              		.loc 1 175 21 view .LVU220
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 846              		.loc 1 176 21 view .LVU221
 847              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 848              		.loc 1 176 32 is_stmt 0 view .LVU222
 849 039c 7430EFE6 		uxtb	r3, r4	@ _15, n
 850              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 851              		.loc 1 177 41 view .LVU223
 852 03a0 012083E2 		add	r2, r3, #1	@ tmp195, _15,
 853              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 854              		.loc 1 176 40 view .LVU224
 855 03a4 103A07EE 		vmov	s14, r3	@ int	@ _15, _15
 856              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 857              		.loc 1 177 41 view .LVU225
 858 03a8 902A07EE 		vmov	s15, r2	@ int	@ tmp195, tmp195
 859              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 860              		.loc 1 176 40 view .LVU226
 861 03ac C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp193, _15
 862              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 863              		.loc 1 177 46 view .LVU227
 864 03b0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, tmp195
 865              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 866              		.loc 1 176 40 view .LVU228
 867 03b4 267A27EE 		vmul.f32	s14, s14, s13	@ tmp194, tmp193, _20
 868              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 869              		.loc 1 177 46 view .LVU229
 870 03b8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _20
 871              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 872              		.loc 1 176 24 view .LVU230
 873 03bc C77ABCEE 		vcvt.u32.f32	s14, s14	@ yy, tmp194
 874              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 875              		.loc 1 177 24 view .LVU231
 876 03c0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ ye, tmp197
 877              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 878              		.loc 1 176 24 view .LVU232
 879 03c4 101A17EE 		vmov	r1, s14	@ int	@ yy, yy
 880              	.LVL60:
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 881              		.loc 1 177 21 is_stmt 1 view .LVU233
 882              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 883              		.loc 1 177 24 is_stmt 0 view .LVU234
 884 03c8 903A17EE 		vmov	r3, s15	@ int	@ ye, ye
 885              	.LVL61:
 178:armwave.c     **** 
 886              		.loc 1 178 21 is_stmt 1 view .LVU235
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 887              		.loc 1 180 21 view .LVU236
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 888              		.loc 1 180 21 is_stmt 0 view .LVU237
 889 03cc 010053E1 		cmp	r3, r1	@ ye, yy
 181:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 890              		.loc 1 181 25 is_stmt 1 view .LVU238
 891              	.LVL62:
 183:armwave.c     ****                     }
 892              		.loc 1 183 25 view .LVU239
 183:armwave.c     ****                     }
 893              		.loc 1 183 25 is_stmt 0 view .LVU240
 894 03d0 01304380 		subhi	r3, r3, r1	@ tmp198, ye, yy
 895              	.LVL63:
 183:armwave.c     ****                     }
 896              		.loc 1 183 25 view .LVU241
 897 03d4 03908980 		addhi	r9, r9, r3	@ painted, painted, tmp198
 898              	.LVL64:
 159:armwave.c     ****                 wave_word >>= 16;
 899              		.loc 1 159 17 is_stmt 1 view .LVU242
 160:armwave.c     **** 
 900              		.loc 1 160 17 view .LVU243
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 901              		.loc 1 162 17 view .LVU244
 902              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 903              		.loc 1 162 19 is_stmt 0 view .LVU245
 904 03d8 00005BE3 		cmp	fp, #0	@ wave_word,
 905 03dc D1FFFF0A 		beq	.L31		@,
 906 03e0 DAFFFFEA 		b	.L47		@
 907              	.LVL65:
 908              	.L33:
 909              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 910              		.loc 1 122 46 view .LVU246
 911 03e4 0090A0E3 		mov	r9, #0	@ painted,
 912 03e8 D3FFFFEA 		b	.L27		@
 913              	.L50:
 914              		.align	2
 915              	.L49:
 916 03ec 00000000 		.word	g_armwave_state
 917 03f0 84000000 		.word	.LC4
 918 03f4 9C000000 		.word	.LC5
 919 03f8 E8000000 		.word	.LC6
 920 03fc 1F85EB51 		.word	1374389535
 921 0400 F0000000 		.word	.LC7
 922 0404 F4000000 		.word	.LC8
 923              		.cfi_endproc
 924              	.LFE60:
 926              		.global	__aeabi_idiv
 927              		.align	2
 928              		.global	armwave_generate
 929              		.syntax unified
 930              		.arm
 931              		.fpu vfp
 933              	armwave_generate:
 934              	.LFB61:
 192:armwave.c     **** 
 193:armwave.c     **** /*
 194:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 195:armwave.c     ****  */
 196:armwave.c     **** void armwave_generate()
 197:armwave.c     **** {
 935              		.loc 1 197 1 is_stmt 1 view -0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 198:armwave.c     ****     uint32_t yy;
 939              		.loc 1 198 5 view .LVU248
 199:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 940              		.loc 1 199 5 view .LVU249
 941              	.LVL66:
 200:armwave.c     **** 
 201:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 942              		.loc 1 201 5 view .LVU250
 943              	@ armwave.c:197: {
 197:armwave.c     ****     uint32_t yy;
 944              		.loc 1 197 1 is_stmt 0 view .LVU251
 945 0408 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 946              		.cfi_def_cfa_offset 20
 947              		.cfi_offset 4, -20
 948              		.cfi_offset 5, -16
 949              		.cfi_offset 6, -12
 950              		.cfi_offset 7, -8
 951              		.cfi_offset 14, -4
 952              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 953              		.loc 1 201 5 view .LVU252
 954 040c 0010A0E3 		mov	r1, #0	@,
 955              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 956              		.loc 1 201 58 view .LVU253
 957 0410 84509FE5 		ldr	r5, .L59	@ tmp154,
 958              	@ armwave.c:197: {
 197:armwave.c     ****     uint32_t yy;
 959              		.loc 1 197 1 view .LVU254
 960 0414 0CD04DE2 		sub	sp, sp, #12	@,,
 961              		.cfi_def_cfa_offset 32
 962              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 963              		.loc 1 201 5 view .LVU255
 964 0418 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 965 041c 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 966 0420 FEFFFFEB 		bl	memset		@
 967              	.LVL67:
 202:armwave.c     **** 
 203:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 968              		.loc 1 203 5 is_stmt 1 view .LVU256
 969              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 970              		.loc 1 203 68 is_stmt 0 view .LVU257
 971 0424 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 972              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 973              		.loc 1 203 51 view .LVU258
 974 0428 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 975 042c 0610A0E1 		mov	r1, r6	@, _13
 976 0430 FEFFFFEB 		bl	__aeabi_idiv		@
 977              	.LVL68:
 978              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 979              		.loc 1 203 5 view .LVU259
 980 0434 000050E3 		cmp	r0, #0	@,
 981 0438 1500000A 		beq	.L51		@,
 982              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 204:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 205:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 983              		.loc 1 205 9 view .LVU260
 984 043c 5C709FE5 		ldr	r7, .L59+4	@ tmp155,
 985              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 986              		.loc 1 203 12 view .LVU261
 987 0440 0040A0E3 		mov	r4, #0	@ yy,
 988              	.LVL69:
 989              	.L53:
 990              		.loc 1 205 9 is_stmt 1 discriminator 3 view .LVU262
 991 0444 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 992              	@ armwave.c:207:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 206:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 207:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 993              		.loc 1 207 48 is_stmt 0 discriminator 3 view .LVU263
 994 0448 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 995              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 205:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 996              		.loc 1 205 9 discriminator 3 view .LVU264
 997 044c 0630A0E1 		mov	r3, r6	@, _13
 998 0450 0120A0E1 		mov	r2, r1	@, _5
 999              	@ armwave.c:207:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1000              		.loc 1 207 48 discriminator 3 view .LVU265
 1001 0454 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1002              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 205:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1003              		.loc 1 205 9 discriminator 3 view .LVU266
 1004 0458 0700A0E1 		mov	r0, r7	@, tmp155
 1005 045c 0410A0E1 		mov	r1, r4	@, yy
 1006 0460 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1007 0464 00C08DE5 		str	ip, [sp]	@ tmp145,
 1008 0468 FEFFFFEB 		bl	printf		@
 1009              	.LVL70:
 208:armwave.c     **** 
 209:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1010              		.loc 1 209 9 is_stmt 1 discriminator 3 view .LVU267
 1011              	@ armwave.c:209:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1012              		.loc 1 209 62 is_stmt 0 discriminator 3 view .LVU268
 1013 046c 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1014              	@ armwave.c:209:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1015              		.loc 1 209 9 discriminator 3 view .LVU269
 1016 0470 940100E0 		mul	r0, r4, r1	@, yy,
 1017 0474 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1018              	.LVL71:
 210:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1019              		.loc 1 210 9 is_stmt 1 discriminator 3 view .LVU270
 211:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1020              		.loc 1 211 9 discriminator 3 view .LVU271
 1021              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1022              		.loc 1 203 68 is_stmt 0 discriminator 3 view .LVU272
 1023 0478 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1024              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1025              		.loc 1 203 51 discriminator 3 view .LVU273
 1026 047c 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1027 0480 0610A0E1 		mov	r1, r6	@, _13
 1028 0484 FEFFFFEB 		bl	__aeabi_idiv		@
 1029              	.LVL72:
 1030              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1031              		.loc 1 203 86 discriminator 3 view .LVU274
 1032 0488 014084E2 		add	r4, r4, #1	@ yy, yy,
 1033              	.LVL73:
 1034              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1035              		.loc 1 203 5 discriminator 3 view .LVU275
 1036 048c 040050E1 		cmp	r0, r4	@, yy
 1037 0490 EBFFFF8A 		bhi	.L53		@,
 1038              	.LVL74:
 1039              	.L51:
 1040              	@ armwave.c:220: }
 212:armwave.c     ****     }
 213:armwave.c     **** 
 214:armwave.c     ****     /*
 215:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 216:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 217:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 218:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 219:armwave.c     ****     */
 220:armwave.c     **** }
 1041              		.loc 1 220 1 view .LVU276
 1042 0494 0CD08DE2 		add	sp, sp, #12	@,,
 1043              		.cfi_def_cfa_offset 20
 1044              		@ sp needed	@
 1045 0498 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1046              	.L60:
 1047              		.align	2
 1048              	.L59:
 1049 049c 00000000 		.word	g_armwave_state
 1050 04a0 10010000 		.word	.LC9
 1051              		.cfi_endproc
 1052              	.LFE61:
 1054              		.align	2
 1055              		.global	armwave_setup_render
 1056              		.syntax unified
 1057              		.arm
 1058              		.fpu vfp
 1060              	armwave_setup_render:
 1061              	.LVL75:
 1062              	.LFB62:
 221:armwave.c     **** 
 222:armwave.c     **** /*
 223:armwave.c     ****  * Setup the renderer with passed parameters.
 224:armwave.c     ****  */
 225:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 226:armwave.c     **** {
 1063              		.loc 1 226 1 is_stmt 1 view -0
 1064              		.cfi_startproc
 1065              		@ args = 12, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 227:armwave.c     ****     uint32_t length, xx;
 1067              		.loc 1 227 5 view .LVU278
 228:armwave.c     ****     float points_per_pixel;
 1068              		.loc 1 228 5 view .LVU279
 229:armwave.c     **** 
 230:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1069              		.loc 1 230 5 view .LVU280
 1070              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1071              		.loc 1 226 1 is_stmt 0 view .LVU281
 1072 04a4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1073              		.cfi_def_cfa_offset 28
 1074              		.cfi_offset 4, -28
 1075              		.cfi_offset 5, -24
 1076              		.cfi_offset 6, -20
 1077              		.cfi_offset 7, -16
 1078              		.cfi_offset 8, -12
 1079              		.cfi_offset 9, -8
 1080              		.cfi_offset 14, -4
 1081 04a8 14D04DE2 		sub	sp, sp, #20	@,,
 1082              		.cfi_def_cfa_offset 48
 1083              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1084              		.loc 1 226 1 view .LVU282
 1085 04ac 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1086 04b0 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1087 04b4 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1088 04b8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1089              	@ armwave.c:230:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1090              		.loc 1 230 5 view .LVU283
 1091 04bc 00308DE5 		str	r3, [sp]	@ wave_stride,
 1092              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1093              		.loc 1 226 1 view .LVU284
 1094 04c0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1095 04c4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1096              	@ armwave.c:230:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1097              		.loc 1 230 5 view .LVU285
 1098 04c8 F460CDE1 		strd	r6, [sp, #4]	@,,
 1099 04cc 0230A0E1 		mov	r3, r2	@, waves_max
 1100              	.LVL76:
 1101              		.loc 1 230 5 view .LVU286
 1102 04d0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1103 04d4 0120A0E1 		mov	r2, r1	@, end_point
 1104              	.LVL77:
 1105              		.loc 1 230 5 view .LVU287
 1106 04d8 0010A0E1 		mov	r1, r0	@, start_point
 1107              	.LVL78:
 1108              		.loc 1 230 5 view .LVU288
 1109 04dc 8C019FE5 		ldr	r0, .L71+12	@,
 1110              	.LVL79:
 1111              		.loc 1 230 5 view .LVU289
 1112 04e0 FEFFFFEB 		bl	printf		@
 1113              	.LVL80:
 231:armwave.c     **** 
 232:armwave.c     ****     // TODO these asserts should instead raise PyExc
 233:armwave.c     ****     assert(start_point < end_point);
 1114              		.loc 1 233 5 is_stmt 1 view .LVU290
 1115 04e4 050054E1 		cmp	r4, r5	@ start_point, end_point
 1116 04e8 5100002A 		bcs	.L69		@,
 234:armwave.c     **** 
 235:armwave.c     ****     /*
 236:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 237:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 238:armwave.c     ****     if(target_height == 256) {
 239:armwave.c     ****         g_armwave_state.row_shift = 8;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 241:armwave.c     ****     } else if(target_height == 512) {
 242:armwave.c     ****         g_armwave_state.row_shift = 9;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 244:armwave.c     ****     } else if(target_height == 1024) {
 245:armwave.c     ****         g_armwave_state.row_shift = 10;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 247:armwave.c     ****     } else if(target_height == 2048) {
 248:armwave.c     ****         g_armwave_state.row_shift = 11;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 250:armwave.c     ****     }
 251:armwave.c     ****     */
 252:armwave.c     **** 
 253:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 254:armwave.c     ****     g_armwave_state.xstride = target_height;
 1117              		.loc 1 254 5 view .LVU291
 1118              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 256:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 257:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 258:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 259:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 260:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 261:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 262:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 263:armwave.c     ****     g_armwave_state.target_width = target_width;
 264:armwave.c     ****     g_armwave_state.target_height = target_height;
 265:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1119              		.loc 1 265 45 is_stmt 0 view .LVU292
 1120 04ec 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1121              	.LVL81:
 1122              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 266:armwave.c     **** 
 267:armwave.c     ****     // Calculate compound scaler
 268:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 269:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1123              		.loc 1 269 48 view .LVU293
 1124 04f0 5B5A9FED 		vldr.32	s10, .L71	@ tmp187,
 1125 04f4 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1126              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1127              		.loc 1 255 49 view .LVU294
 1128 04f8 5A7A9FED 		vldr.32	s14, .L71+4	@ tmp165,
 1129              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1130              		.loc 1 269 81 view .LVU295
 1131 04fc 5A6A9FED 		vldr.32	s12, .L71+8	@ tmp191,
 1132              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1133              		.loc 1 262 90 view .LVU296
 1134 0500 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1135              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1136              		.loc 1 269 48 view .LVU297
 1137 0504 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1138              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1139              		.loc 1 255 49 view .LVU298
 1140 0508 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1141              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1142              		.loc 1 254 29 view .LVU299
 1143 050c 60419FE5 		ldr	r4, .L71+16	@ tmp222,
 1144              	.LVL82:
 1145              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1146              		.loc 1 260 42 view .LVU300
 1147 0510 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1148              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1149              		.loc 1 255 49 view .LVU301
 1150 0514 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1151              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1152              		.loc 1 262 95 view .LVU302
 1153 0518 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1154              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 270:armwave.c     **** 
 271:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1155              		.loc 1 271 5 view .LVU303
 1156 051c 0128A0E3 		mov	r2, #65536	@ tmp194,
 1157              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1158              		.loc 1 269 48 view .LVU304
 1159 0520 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1160              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1161              		.loc 1 271 5 view .LVU305
 1162 0524 04508DE5 		str	r5, [sp, #4]	@ _13,
 1163 0528 00608DE5 		str	r6, [sp]	@ target_width,
 1164              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1165              		.loc 1 262 95 view .LVU306
 1166 052c 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1167              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1168              		.loc 1 254 29 view .LVU307
 1169 0530 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1170              		.loc 1 255 5 is_stmt 1 view .LVU308
 1171              	@ armwave.c:257:     g_armwave_state.wave_stride = wave_stride;
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1172              		.loc 1 257 33 is_stmt 0 view .LVU309
 1173 0534 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1174              	@ armwave.c:258:     g_armwave_state.waves_max = waves_max;
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1175              		.loc 1 258 31 view .LVU310
 1176 0538 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1177              	@ armwave.c:259:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1178              		.loc 1 259 27 view .LVU311
 1179 053c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1180              	@ armwave.c:264:     g_armwave_state.target_height = target_height;
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1181              		.loc 1 264 35 view .LVU312
 1182 0540 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1183              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1184              		.loc 1 271 5 view .LVU313
 1185 0544 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1186              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1187              		.loc 1 261 37 view .LVU314
 1188 0548 022CA0E3 		mov	r2, #512	@ tmp175,
 1189              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1190              		.loc 1 260 26 view .LVU315
 1191 054c 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1192              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1193              		.loc 1 261 37 view .LVU316
 1194 0550 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1195              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1196              		.loc 1 271 5 view .LVU317
 1197 0554 0310A0E1 		mov	r1, r3	@, tmp180
 1198              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1199              		.loc 1 262 34 view .LVU318
 1200 0558 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1201              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1202              		.loc 1 255 49 view .LVU319
 1203 055c 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1204              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1205              		.loc 1 269 40 view .LVU320
 1206 0560 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1207              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 265:armwave.c     **** 
 1208              		.loc 1 265 33 view .LVU321
 1209 0564 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1210              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1211              		.loc 1 271 5 view .LVU322
 1212 0568 08019FE5 		ldr	r0, .L71+20	@,
 1213              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1214              		.loc 1 269 40 view .LVU323
 1215 056c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1216 0570 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1217              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1218              		.loc 1 256 30 view .LVU324
 1219 0574 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1220              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1221              		.loc 1 255 33 view .LVU325
 1222 0578 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1223              		.loc 1 256 5 is_stmt 1 view .LVU326
 1224              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1225              		.loc 1 269 81 is_stmt 0 view .LVU327
 1226 057c 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1227              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1228              		.loc 1 256 30 view .LVU328
 1229 0580 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1230              		.loc 1 257 5 is_stmt 1 view .LVU329
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1231              		.loc 1 258 5 view .LVU330
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1232              		.loc 1 259 5 view .LVU331
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1233              		.loc 1 260 5 view .LVU332
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1234              		.loc 1 261 5 view .LVU333
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1235              		.loc 1 262 5 view .LVU334
 263:armwave.c     ****     g_armwave_state.target_height = target_height;
 1236              		.loc 1 263 5 view .LVU335
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1237              		.loc 1 264 5 view .LVU336
 265:armwave.c     **** 
 1238              		.loc 1 265 5 view .LVU337
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1239              		.loc 1 268 5 view .LVU338
 1240              	@ armwave.c:268:     g_armwave_state.cmp_x_bitdepth_scale = \
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1241              		.loc 1 268 42 is_stmt 0 view .LVU339
 1242 0584 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1243 0588 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1244              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1245              		.loc 1 271 5 view .LVU340
 1246 058c 903A17EE 		vmov	r3, s15	@ int	@, _20
 1247              	@ armwave.c:268:     g_armwave_state.cmp_x_bitdepth_scale = \
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1248              		.loc 1 268 42 view .LVU341
 1249 0590 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1250              		.loc 1 271 5 is_stmt 1 view .LVU342
 1251 0594 0C20A0E1 		mov	r2, ip	@, tmp3
 1252 0598 FEFFFFEB 		bl	printf		@
 1253              	.LVL83:
 272:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 273:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 274:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 275:armwave.c     **** 
 276:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 277:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 278:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 279:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1254              		.loc 1 279 5 view .LVU343
 1255              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 280:armwave.c     **** 
 281:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1256              		.loc 1 281 23 is_stmt 0 view .LVU344
 1257 059c 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1258              	@ armwave.c:279:     g_armwave_state.slice_height = 64; // 64;  
 279:armwave.c     **** 
 1259              		.loc 1 279 34 view .LVU345
 1260 05a0 4030A0E3 		mov	r3, #64	@ tmp196,
 1261              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 1262              		.loc 1 281 7 view .LVU346
 1263 05a4 000050E3 		cmp	r0, #0	@ _21,
 1264              	@ armwave.c:279:     g_armwave_state.slice_height = 64; // 64;  
 279:armwave.c     **** 
 1265              		.loc 1 279 34 view .LVU347
 1266 05a8 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1267              		.loc 1 281 5 is_stmt 1 view .LVU348
 1268              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 1269              		.loc 1 281 7 is_stmt 0 view .LVU349
 1270 05ac 0000000A 		beq	.L63		@,
 282:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1271              		.loc 1 282 9 is_stmt 1 view .LVU350
 1272 05b0 FEFFFFEB 		bl	free		@
 1273              	.LVL84:
 1274              	.L63:
 283:armwave.c     **** 
 284:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1275              		.loc 1 284 5 view .LVU351
 1276              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1277              		.loc 1 284 56 is_stmt 0 view .LVU352
 1278 05b4 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1279              	.LVL85:
 1280              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1281              		.loc 1 284 34 view .LVU353
 1282 05b8 0110A0E3 		mov	r1, #1	@,
 1283 05bc 0800A0E1 		mov	r0, r8	@, _22
 1284 05c0 FEFFFFEB 		bl	calloc		@
 1285              	.LVL86:
 1286              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer == NULL) {
 285:armwave.c     **** 
 286:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1287              		.loc 1 286 7 view .LVU354
 1288 05c4 000050E3 		cmp	r0, #0	@ tmp199,
 1289              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 284:armwave.c     **** 
 1290              		.loc 1 284 34 view .LVU355
 1291 05c8 0070A0E1 		mov	r7, r0	@ tmp199,
 1292              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 284:armwave.c     **** 
 1293              		.loc 1 284 32 view .LVU356
 1294 05cc 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1295              		.loc 1 286 5 is_stmt 1 view .LVU357
 1296              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer == NULL) {
 1297              		.loc 1 286 7 is_stmt 0 view .LVU358
 1298 05d0 1C00000A 		beq	.L70		@,
 287:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 288:armwave.c     ****         exit(-1);
 289:armwave.c     ****     }
 290:armwave.c     **** 
 291:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 292:armwave.c     ****     length = end_point - start_point;
 1299              		.loc 1 292 5 is_stmt 1 view .LVU359
 1300              	.LVL87:
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1301              		.loc 1 293 5 view .LVU360
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1302              		.loc 1 294 5 view .LVU361
 1303              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1304              		.loc 1 293 31 is_stmt 0 view .LVU362
 1305 05d4 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1306              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1307              		.loc 1 293 34 view .LVU363
 1308 05d8 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1309              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1310              		.loc 1 294 60 view .LVU364
 1311 05dc 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1312              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 295:armwave.c     **** 
 296:armwave.c     ****     /*
 297:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     **** 
 299:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 300:armwave.c     **** 
 301:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 303:armwave.c     **** 
 304:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 305:armwave.c     ****     }
 306:armwave.c     ****     */
 307:armwave.c     **** 
 308:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1313              		.loc 1 308 34 view .LVU365
 1314 05e0 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1315              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1316              		.loc 1 293 31 view .LVU366
 1317 05e4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1318              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1319              		.loc 1 293 34 view .LVU367
 1320 05e8 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1321              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1322              		.loc 1 294 60 view .LVU368
 1323 05ec E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1324              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1325              		.loc 1 308 34 view .LVU369
 1326 05f0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1327              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1328              		.loc 1 293 22 view .LVU370
 1329 05f4 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1330              	.LVL88:
 1331              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1332              		.loc 1 294 60 view .LVU371
 1333 05f8 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1334              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1335              		.loc 1 294 41 view .LVU372
 1336 05fc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1337 0600 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1338              		.loc 1 308 5 is_stmt 1 view .LVU373
 1339              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1340              		.loc 1 308 34 is_stmt 0 view .LVU374
 1341 0604 FEFFFFEB 		bl	malloc		@
 1342              	.LVL89:
 1343              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 309:armwave.c     **** 
 310:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1344              		.loc 1 310 5 view .LVU375
 1345 0608 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1346 060c 0710A0E1 		mov	r1, r7	@, tmp199
 1347 0610 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1348 0614 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1349              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1350              		.loc 1 308 34 view .LVU376
 1351 0618 00C0A0E1 		mov	ip, r0	@ tmp215,
 1352              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1353              		.loc 1 310 5 view .LVU377
 1354 061c 0030A0E1 		mov	r3, r0	@, tmp215
 1355              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1356              		.loc 1 308 32 view .LVU378
 1357 0620 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1358              		.loc 1 310 5 is_stmt 1 view .LVU379
 1359 0624 50009FE5 		ldr	r0, .L71+24	@,
 1360              	@ armwave.c:317: }
 311:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 315:armwave.c     **** 
 316:armwave.c     ****      //malloc_stats();
 317:armwave.c     **** }
 1361              		.loc 1 317 1 is_stmt 0 view .LVU380
 1362 0628 14D08DE2 		add	sp, sp, #20	@,,
 1363              		.cfi_remember_state
 1364              		.cfi_def_cfa_offset 28
 1365              		@ sp needed	@
 1366 062c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1367              		.cfi_restore 14
 1368              		.cfi_restore 9
 1369              		.cfi_restore 8
 1370              		.cfi_restore 7
 1371              		.cfi_restore 6
 1372              		.cfi_restore 5
 1373              		.cfi_restore 4
 1374              		.cfi_def_cfa_offset 0
 1375              	.LVL90:
 1376              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 310:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1377              		.loc 1 310 5 view .LVU381
 1378 0630 FEFFFFEA 		b	printf		@
 1379              	.LVL91:
 1380              	.L69:
 1381              		.cfi_restore_state
 233:armwave.c     **** 
 1382              		.loc 1 233 5 is_stmt 1 discriminator 1 view .LVU382
 1383 0634 44309FE5 		ldr	r3, .L71+28	@,
 1384 0638 E920A0E3 		mov	r2, #233	@,
 1385 063c 40109FE5 		ldr	r1, .L71+32	@,
 1386 0640 40009FE5 		ldr	r0, .L71+36	@,
 1387 0644 FEFFFFEB 		bl	__assert_fail		@
 1388              	.LVL92:
 1389              	.L70:
 287:armwave.c     ****         exit(-1);
 1390              		.loc 1 287 9 view .LVU383
 1391 0648 3C309FE5 		ldr	r3, .L71+40	@ tmp202,
 1392 064c 0820A0E1 		mov	r2, r8	@, _22
 1393 0650 38109FE5 		ldr	r1, .L71+44	@,
 1394 0654 000093E5 		ldr	r0, [r3]	@, stderr
 1395 0658 FEFFFFEB 		bl	fprintf		@
 1396              	.LVL93:
 288:armwave.c     ****     }
 1397              		.loc 1 288 9 view .LVU384
 1398 065c 0000E0E3 		mvn	r0, #0	@,
 1399 0660 FEFFFFEB 		bl	exit		@
 1400              	.LVL94:
 1401              	.L72:
 1402              		.align	2
 1403              	.L71:
 1404 0664 0000803F 		.word	1065353216
 1405 0668 00007F43 		.word	1132396544
 1406 066c 00008047 		.word	1199570944
 1407 0670 44010000 		.word	.LC10
 1408 0674 00000000 		.word	g_armwave_state
 1409 0678 94010000 		.word	.LC13
 1410 067c 38020000 		.word	.LC15
 1411 0680 00000000 		.word	.LANCHOR0
 1412 0684 70010000 		.word	.LC11
 1413 0688 7C010000 		.word	.LC12
 1414 068c 00000000 		.word	stderr
 1415 0690 F4010000 		.word	.LC14
 1416              		.cfi_endproc
 1417              	.LFE62:
 1419              		.align	2
 1420              		.global	armwave_set_wave_pointer
 1421              		.syntax unified
 1422              		.arm
 1423              		.fpu vfp
 1425              	armwave_set_wave_pointer:
 1426              	.LVL95:
 1427              	.LFB63:
 318:armwave.c     **** 
 319:armwave.c     **** /*
 320:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 321:armwave.c     ****  * in the future.
 322:armwave.c     ****  */
 323:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 324:armwave.c     **** {
 1428              		.loc 1 324 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1432              		.loc 1 325 5 view .LVU386
 1433 0694 000050E3 		cmp	r0, #0	@ wave_buffer
 1434              		.loc 1 325 5 is_stmt 0 view .LVU387
 1435 0698 0200000A 		beq	.L78		@,
 326:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1436              		.loc 1 326 5 is_stmt 1 view .LVU388
 1437              	@ armwave.c:326:     g_armwave_state.wave_buffer = wave_buffer;
 1438              		.loc 1 326 33 is_stmt 0 view .LVU389
 1439 069c 1C309FE5 		ldr	r3, .L79	@ tmp116,
 1440 06a0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1441 06a4 1EFF2FE1 		bx	lr	@
 1442              	.L78:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1443              		.loc 1 325 5 is_stmt 1 discriminator 1 view .LVU390
 1444              	@ armwave.c:324: {
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1445              		.loc 1 324 1 is_stmt 0 discriminator 1 view .LVU391
 1446 06a8 10402DE9 		push	{r4, lr}	@
 1447              		.cfi_def_cfa_offset 8
 1448              		.cfi_offset 4, -8
 1449              		.cfi_offset 14, -4
 1450              	@ armwave.c:325:     assert(wave_buffer != NULL);
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1451              		.loc 1 325 5 discriminator 1 view .LVU392
 1452 06ac 10309FE5 		ldr	r3, .L79+4	@,
 1453 06b0 10209FE5 		ldr	r2, .L79+8	@,
 1454 06b4 10109FE5 		ldr	r1, .L79+12	@,
 1455 06b8 10009FE5 		ldr	r0, .L79+16	@,
 1456              	.LVL96:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1457              		.loc 1 325 5 discriminator 1 view .LVU393
 1458 06bc FEFFFFEB 		bl	__assert_fail		@
 1459              	.LVL97:
 1460              	.L80:
 1461              		.align	2
 1462              	.L79:
 1463 06c0 00000000 		.word	g_armwave_state
 1464 06c4 18000000 		.word	.LANCHOR0+24
 1465 06c8 45010000 		.word	325
 1466 06cc 70010000 		.word	.LC11
 1467 06d0 5C020000 		.word	.LC16
 1468              		.cfi_endproc
 1469              	.LFE63:
 1471              		.align	2
 1472              		.global	armwave_set_wave_pointer_as_testbuf
 1473              		.syntax unified
 1474              		.arm
 1475              		.fpu vfp
 1477              	armwave_set_wave_pointer_as_testbuf:
 1478              	.LVL98:
 1479              	.LFB64:
 327:armwave.c     **** }
 328:armwave.c     **** 
 329:armwave.c     **** /*
 330:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 331:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 332:armwave.c     ****  */
 333:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 334:armwave.c     **** {
 1480              		.loc 1 334 1 is_stmt 1 view -0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 335:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1485              		.loc 1 335 5 view .LVU395
 1486              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1487              		.loc 1 335 29 is_stmt 0 view .LVU396
 1488 06d4 24309FE5 		ldr	r3, .L84	@ tmp117,
 1489              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1490              		.loc 1 335 7 view .LVU397
 1491 06d8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1492 06dc 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1493 06e0 0400003A 		bcc	.L83		@,
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 337:armwave.c     ****         return;
 338:armwave.c     ****     }
 339:armwave.c     **** 
 340:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1494              		.loc 1 340 5 is_stmt 1 view .LVU398
 1495              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1496              		.loc 1 340 111 is_stmt 0 view .LVU399
 1497 06e4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1498              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1499              		.loc 1 340 68 view .LVU400
 1500 06e8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1501 06ec 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1502              	.LVL99:
 1503              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1504              		.loc 1 340 33 view .LVU401
 1505 06f0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1506              	@ armwave.c:341: }
 341:armwave.c     **** }
 1507              		.loc 1 341 1 view .LVU402
 1508 06f4 1EFF2FE1 		bx	lr	@
 1509              	.LVL100:
 1510              	.L83:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1511              		.loc 1 336 9 is_stmt 1 view .LVU403
 1512 06f8 04009FE5 		ldr	r0, .L84+4	@,
 1513              	.LVL101:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1514              		.loc 1 336 9 is_stmt 0 view .LVU404
 1515 06fc FEFFFFEA 		b	puts		@
 1516              	.LVL102:
 1517              	.L85:
 1518              		.align	2
 1519              	.L84:
 1520 0700 00000000 		.word	g_armwave_state
 1521 0704 70020000 		.word	.LC17
 1522              		.cfi_endproc
 1523              	.LFE64:
 1525              		.align	2
 1526              		.global	armwave_set_wave_pointer_u32
 1527              		.syntax unified
 1528              		.arm
 1529              		.fpu vfp
 1531              	armwave_set_wave_pointer_u32:
 1532              	.LVL103:
 1533              	.LFB65:
 342:armwave.c     **** 
 343:armwave.c     **** /*
 344:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 345:armwave.c     ****  * disjointed buffers in the future.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 348:armwave.c     **** {
 1534              		.loc 1 348 1 is_stmt 1 view -0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 0
 1537              		@ frame_needed = 0, uses_anonymous_args = 0
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1538              		.loc 1 349 5 view .LVU406
 1539 0708 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1540              		.loc 1 349 5 is_stmt 0 view .LVU407
 1541 070c 0200000A 		beq	.L91		@,
 350:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1542              		.loc 1 350 5 is_stmt 1 view .LVU408
 1543              	@ armwave.c:350:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1544              		.loc 1 350 33 is_stmt 0 view .LVU409
 1545 0710 1C309FE5 		ldr	r3, .L92	@ tmp117,
 1546 0714 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1547 0718 1EFF2FE1 		bx	lr	@
 1548              	.L91:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1549              		.loc 1 349 5 is_stmt 1 discriminator 1 view .LVU410
 1550              	@ armwave.c:348: {
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1551              		.loc 1 348 1 is_stmt 0 discriminator 1 view .LVU411
 1552 071c 10402DE9 		push	{r4, lr}	@
 1553              		.cfi_def_cfa_offset 8
 1554              		.cfi_offset 4, -8
 1555              		.cfi_offset 14, -4
 1556              	@ armwave.c:349:     assert(wave_buffer_ptr != 0);
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1557              		.loc 1 349 5 discriminator 1 view .LVU412
 1558 0720 10309FE5 		ldr	r3, .L92+4	@,
 1559 0724 10209FE5 		ldr	r2, .L92+8	@,
 1560 0728 10109FE5 		ldr	r1, .L92+12	@,
 1561 072c 10009FE5 		ldr	r0, .L92+16	@,
 1562              	.LVL104:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1563              		.loc 1 349 5 discriminator 1 view .LVU413
 1564 0730 FEFFFFEB 		bl	__assert_fail		@
 1565              	.LVL105:
 1566              	.L93:
 1567              		.align	2
 1568              	.L92:
 1569 0734 00000000 		.word	g_armwave_state
 1570 0738 34000000 		.word	.LANCHOR0+52
 1571 073c 5D010000 		.word	349
 1572 0740 70010000 		.word	.LC11
 1573 0744 AC020000 		.word	.LC18
 1574              		.cfi_endproc
 1575              	.LFE65:
 1577              		.align	2
 1578              		.global	armwave_clear_buffer
 1579              		.syntax unified
 1580              		.arm
 1581              		.fpu vfp
 1583              	armwave_clear_buffer:
 1584              	.LVL106:
 1585              	.LFB66:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 357:armwave.c     **** {
 1586              		.loc 1 357 1 is_stmt 1 view -0
 1587              		.cfi_startproc
 1588              		@ args = 0, pretend = 0, frame = 0
 1589              		@ frame_needed = 0, uses_anonymous_args = 0
 1590              		@ link register save eliminated.
 358:armwave.c     ****     // Flags ignored, only one buffer cleared
 359:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1591              		.loc 1 359 5 view .LVU415
 1592              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1593              		.loc 1 359 58 is_stmt 0 view .LVU416
 1594 0748 0C309FE5 		ldr	r3, .L95	@ tmp114,
 1595              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1596              		.loc 1 359 5 view .LVU417
 1597 074c 0010A0E3 		mov	r1, #0	@,
 1598 0750 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1599 0754 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1600              	.LVL107:
 1601              		.loc 1 359 5 view .LVU418
 1602 0758 FEFFFFEA 		b	memset		@
 1603              	.LVL108:
 1604              	.L96:
 1605              		.align	2
 1606              	.L95:
 1607 075c 00000000 		.word	g_armwave_state
 1608              		.cfi_endproc
 1609              	.LFE66:
 1611              		.align	2
 1612              		.global	armwave_set_channel_colour
 1613              		.syntax unified
 1614              		.arm
 1615              		.fpu vfp
 1617              	armwave_set_channel_colour:
 1618              	.LVL109:
 1619              	.LFB67:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 364:armwave.c     ****  */
 365:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 366:armwave.c     **** {
 1620              		.loc 1 366 1 is_stmt 1 view -0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 367:armwave.c     ****     // Only 1ch supported for now
 368:armwave.c     ****     switch(ch) {
 1625              		.loc 1 368 5 view .LVU420
 1626 0760 010050E3 		cmp	r0, #1	@ ch,
 369:armwave.c     ****         case 1:
 370:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1627              		.loc 1 370 13 view .LVU421
 1628              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 1629              		.loc 1 370 41 is_stmt 0 view .LVU422
 1630 0764 0C009F05 		ldreq	r0, .L99	@ tmp117,
 1631              	.LVL110:
 1632              		.loc 1 370 41 view .LVU423
 1633 0768 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1634              		.loc 1 371 13 is_stmt 1 view .LVU424
 1635              	@ armwave.c:371:             g_armwave_state.ch1_color.g = g;
 1636              		.loc 1 371 41 is_stmt 0 view .LVU425
 1637 076c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 372:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1638              		.loc 1 372 13 is_stmt 1 view .LVU426
 1639              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 1640              		.loc 1 372 41 is_stmt 0 view .LVU427
 1641 0770 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 373:armwave.c     ****             break;
 1642              		.loc 1 373 13 is_stmt 1 view .LVU428
 1643              	@ armwave.c:375: }
 374:armwave.c     ****     }
 375:armwave.c     **** }
 1644              		.loc 1 375 1 is_stmt 0 view .LVU429
 1645 0774 1EFF2FE1 		bx	lr	@
 1646              	.L100:
 1647              		.align	2
 1648              	.L99:
 1649 0778 00000000 		.word	g_armwave_state
 1650              		.cfi_endproc
 1651              	.LFE67:
 1653              		.align	2
 1654              		.global	armwave_dump_ppm_debug
 1655              		.syntax unified
 1656              		.arm
 1657              		.fpu vfp
 1659              	armwave_dump_ppm_debug:
 1660              	.LVL111:
 1661              	.LFB68:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Dump a ppm of a buffer to a file.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 381:armwave.c     **** {
 1662              		.loc 1 381 1 is_stmt 1 view -0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1666              		.loc 1 382 5 view .LVU431
 1667              	@ armwave.c:381: {
 381:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1668              		.loc 1 381 1 is_stmt 0 view .LVU432
 1669 077c 0130A0E1 		mov	r3, r1	@ fn, fn
 1670 0780 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1671              		.cfi_def_cfa_offset 28
 1672              		.cfi_offset 4, -28
 1673              		.cfi_offset 5, -24
 1674              		.cfi_offset 6, -20
 1675              		.cfi_offset 7, -16
 1676              		.cfi_offset 8, -12
 1677              		.cfi_offset 9, -8
 1678              		.cfi_offset 14, -4
 1679 0784 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1680 0788 0CD04DE2 		sub	sp, sp, #12	@,,
 1681              		.cfi_def_cfa_offset 40
 1682              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 1683              		.loc 1 382 16 view .LVU433
 1684 078c C4109FE5 		ldr	r1, .L109	@,
 1685              	.LVL112:
 1686              		.loc 1 382 16 view .LVU434
 1687 0790 0300A0E1 		mov	r0, r3	@, fn
 1688              	.LVL113:
 1689              		.loc 1 382 16 view .LVU435
 1690 0794 FEFFFFEB 		bl	fopen64		@
 1691              	.LVL114:
 1692              	@ armwave.c:389:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 383:armwave.c     ****     uint32_t data;
 384:armwave.c     ****     int xx, yy;
 385:armwave.c     **** 
 386:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 387:armwave.c     **** 
 388:armwave.c     ****     fputs("P3\n", fp);
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1693              		.loc 1 389 5 view .LVU436
 1694 0798 BC609FE5 		ldr	r6, .L109+4	@ tmp150,
 1695              	@ armwave.c:388:     fputs("P3\n", fp);
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1696              		.loc 1 388 5 view .LVU437
 1697 079c 0320A0E3 		mov	r2, #3	@,
 1698 07a0 0110A0E3 		mov	r1, #1	@,
 1699              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 382:armwave.c     ****     uint32_t data;
 1700              		.loc 1 382 16 view .LVU438
 1701 07a4 0070A0E1 		mov	r7, r0	@ fp,
 1702              	.LVL115:
 383:armwave.c     ****     uint32_t data;
 1703              		.loc 1 383 5 is_stmt 1 view .LVU439
 384:armwave.c     **** 
 1704              		.loc 1 384 5 view .LVU440
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1705              		.loc 1 388 5 view .LVU441
 1706 07a8 0030A0E1 		mov	r3, r0	@, fp
 1707 07ac AC009FE5 		ldr	r0, .L109+8	@,
 1708              	.LVL116:
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1709              		.loc 1 388 5 is_stmt 0 view .LVU442
 1710 07b0 FEFFFFEB 		bl	fwrite		@
 1711              	.LVL117:
 1712              		.loc 1 389 5 is_stmt 1 view .LVU443
 1713 07b4 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1714 07b8 A4109FE5 		ldr	r1, .L109+12	@,
 1715 07bc 0700A0E1 		mov	r0, r7	@, fp
 1716 07c0 FEFFFFEB 		bl	fprintf		@
 1717              	.LVL118:
 390:armwave.c     ****     fputs("255\n", fp);
 1718              		.loc 1 390 5 view .LVU444
 1719 07c4 0420A0E3 		mov	r2, #4	@,
 1720 07c8 0730A0E1 		mov	r3, r7	@, fp
 1721 07cc 0110A0E3 		mov	r1, #1	@,
 1722 07d0 90009FE5 		ldr	r0, .L109+16	@,
 1723 07d4 FEFFFFEB 		bl	fwrite		@
 1724              	.LVL119:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1725              		.loc 1 392 5 view .LVU445
 1726              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1727              		.loc 1 392 37 is_stmt 0 view .LVU446
 1728 07d8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1729              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1730              		.loc 1 392 5 view .LVU447
 1731 07dc 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1732 07e0 180000DA 		ble	.L102		@,
 1733 07e4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1734              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 396:armwave.c     **** 
 397:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1735              		.loc 1 397 13 view .LVU448
 1736 07e8 7C909FE5 		ldr	r9, .L109+20	@ tmp152,
 1737              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1738              		.loc 1 392 12 view .LVU449
 1739 07ec 0050A0E3 		mov	r5, #0	@ yy,
 1740              	.LVL120:
 1741              	.L103:
 1742              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1743              		.loc 1 393 9 view .LVU450
 1744 07f0 000053E3 		cmp	r3, #0	@ _13,
 1745              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1746              		.loc 1 393 16 view .LVU451
 1747 07f4 0040A0C3 		movgt	r4, #0	@ xx,
 1748              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1749              		.loc 1 393 9 view .LVU452
 1750 07f8 0F0000DA 		ble	.L105		@,
 1751              	.LVL121:
 1752              	.L104:
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1753              		.loc 1 394 13 is_stmt 1 discriminator 3 view .LVU453
 1754              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1755              		.loc 1 394 29 is_stmt 0 discriminator 3 view .LVU454
 1756 07fc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1757              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1758              		.loc 1 397 13 discriminator 3 view .LVU455
 1759 0800 0910A0E1 		mov	r1, r9	@, tmp152
 1760 0804 0700A0E1 		mov	r0, r7	@, fp
 1761              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1762              		.loc 1 394 18 discriminator 3 view .LVU456
 1763 0808 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1764              	.LVL122:
 1765              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU457
 1766              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1767              		.loc 1 393 58 is_stmt 0 discriminator 3 view .LVU458
 1768 080c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1769              	.LVL123:
 1770              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1771              		.loc 1 397 81 discriminator 3 view .LVU459
 1772 0810 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1773              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1774              		.loc 1 397 61 discriminator 3 view .LVU460
 1775 0814 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1776              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1777              		.loc 1 397 13 discriminator 3 view .LVU461
 1778 0818 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1779 081c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1780 0820 00C08DE5 		str	ip, [sp]	@ tmp147,
 1781 0824 7220EFE6 		uxtb	r2, r2	@, data
 1782              	.LVL124:
 1783              		.loc 1 397 13 discriminator 3 view .LVU462
 1784 0828 FEFFFFEB 		bl	fprintf		@
 1785              	.LVL125:
 1786              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1787              		.loc 1 393 41 discriminator 3 view .LVU463
 1788 082c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1789              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1790              		.loc 1 393 9 discriminator 3 view .LVU464
 1791 0830 040053E1 		cmp	r3, r4	@ _13, xx
 1792 0834 F0FFFFCA 		bgt	.L104		@,
 1793 0838 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1794              	.LVL126:
 1795              	.L105:
 1796              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1797              		.loc 1 392 55 discriminator 2 view .LVU465
 1798 083c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1799              	.LVL127:
 1800              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1801              		.loc 1 392 5 discriminator 2 view .LVU466
 1802 0840 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1803 0844 E9FFFFBA 		blt	.L103		@,
 1804              	.LVL128:
 1805              	.L102:
 398:armwave.c     ****         }
 399:armwave.c     ****     }
 400:armwave.c     **** 
 401:armwave.c     ****     fclose(fp);
 1806              		.loc 1 401 5 is_stmt 1 view .LVU467
 1807 0848 0700A0E1 		mov	r0, r7	@, fp
 1808              	@ armwave.c:402: }
 402:armwave.c     **** }
 1809              		.loc 1 402 1 is_stmt 0 view .LVU468
 1810 084c 0CD08DE2 		add	sp, sp, #12	@,,
 1811              		.cfi_def_cfa_offset 28
 1812              		@ sp needed	@
 1813 0850 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1814              		.cfi_restore 14
 1815              		.cfi_restore 9
 1816              		.cfi_restore 8
 1817              		.cfi_restore 7
 1818              		.cfi_restore 6
 1819              		.cfi_restore 5
 1820              		.cfi_restore 4
 1821              		.cfi_def_cfa_offset 0
 1822              	.LVL129:
 1823              	@ armwave.c:401:     fclose(fp);
 401:armwave.c     **** }
 1824              		.loc 1 401 5 view .LVU469
 1825 0854 FEFFFFEA 		b	fclose		@
 1826              	.LVL130:
 1827              	.L110:
 401:armwave.c     **** }
 1828              		.loc 1 401 5 view .LVU470
 1829              		.align	2
 1830              	.L109:
 1831 0858 C4020000 		.word	.LC19
 1832 085c 00000000 		.word	g_armwave_state
 1833 0860 C8020000 		.word	.LC20
 1834 0864 CC020000 		.word	.LC21
 1835 0868 D4020000 		.word	.LC22
 1836 086c DC020000 		.word	.LC23
 1837              		.cfi_endproc
 1838              	.LFE68:
 1840              		.align	2
 1841              		.global	armwave_test_init
 1842              		.syntax unified
 1843              		.arm
 1844              		.fpu vfp
 1846              	armwave_test_init:
 1847              	.LVL131:
 1848              	.LFB69:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Initialise some test functionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 408:armwave.c     **** {
 1849              		.loc 1 408 1 is_stmt 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     test_create_gamma();
 1853              		.loc 1 409 5 view .LVU472
 1854              	.LBB12:
 1855              	.LBI12:
  34:armwave.c     **** {
 1856              		.loc 1 34 6 view .LVU473
  34:armwave.c     **** {
 1857              		.loc 1 34 6 is_stmt 0 view .LVU474
 1858              	.LBE12:
 1859              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1860              		.loc 1 408 1 view .LVU475
 1861 0870 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1862              		.cfi_def_cfa_offset 32
 1863              		.cfi_offset 4, -32
 1864              		.cfi_offset 5, -28
 1865              		.cfi_offset 6, -24
 1866              		.cfi_offset 7, -20
 1867              		.cfi_offset 8, -16
 1868              		.cfi_offset 9, -12
 1869              		.cfi_offset 10, -8
 1870              		.cfi_offset 14, -4
 1871 0874 068B2DED 		vpush.64	{d8, d9, d10}	@
 1872              		.cfi_def_cfa_offset 56
 1873              		.cfi_offset 80, -56
 1874              		.cfi_offset 81, -52
 1875              		.cfi_offset 82, -48
 1876              		.cfi_offset 83, -44
 1877              		.cfi_offset 84, -40
 1878              		.cfi_offset 85, -36
 1879 0878 BC409FE5 		ldr	r4, .L115+20	@ ivtmp.79,
 1880              	.LBB15:
 1881              	.LBB13:
 1882              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1883              		.loc 1 40 32 view .LVU476
 1884 087c 2DAA9FED 		vldr.32	s20, .L115+16	@ tmp136,
 1885              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1886              		.loc 1 40 26 view .LVU477
 1887 0880 289B9FED 		vldr.64	d9, .L115	@ tmp151,
 1888              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1889              		.loc 1 40 49 view .LVU478
 1890 0884 298B9FED 		vldr.64	d8, .L115+8	@ tmp139,
 1891 0888 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1892              	.LBE13:
 1893              	.LBE15:
 1894              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1895              		.loc 1 408 1 view .LVU479
 1896 088c 10D04DE2 		sub	sp, sp, #16	@,,
 1897              		.cfi_def_cfa_offset 72
 1898              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1899              		.loc 1 408 1 view .LVU480
 1900 0890 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1901 0894 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1902 0898 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1903 089c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1904 08a0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1905 08a4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1906              	.LVL132:
 1907              	.L112:
 1908              	.LBB16:
 1909              	.LBB14:
  40:armwave.c     ****     }
 1910              		.loc 1 40 9 is_stmt 1 view .LVU481
 1911              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1912              		.loc 1 40 32 is_stmt 0 view .LVU482
 1913 08a8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1914              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1915              		.loc 1 40 26 view .LVU483
 1916 08ac 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1917              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1918              		.loc 1 40 32 view .LVU484
 1919 08b0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1920 08b4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1921 08b8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1922              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1923              		.loc 1 40 26 view .LVU485
 1924 08bc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1925 08c0 FEFFFFEB 		bl	pow		@
 1926              	.LVL133:
 1927              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1928              		.loc 1 40 49 view .LVU486
 1929 08c4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1930              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1931              		.loc 1 40 24 view .LVU487
 1932 08c8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1933 08cc 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1934 08d0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1935              	.LVL134:
 1936              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1937              		.loc 1 39 5 view .LVU488
 1938 08d4 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1939 08d8 F2FFFF1A 		bne	.L112		@,
 1940              	.LVL135:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1941              		.loc 1 39 5 view .LVU489
 1942              	.LBE14:
 1943              	.LBE16:
 410:armwave.c     **** 
 411:armwave.c     ****     // make ch1 yellowish by default
 412:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1944              		.loc 1 412 5 is_stmt 1 view .LVU490
 1945              	.LBB17:
 1946              	.LBI17:
 365:armwave.c     **** {
 1947              		.loc 1 365 6 view .LVU491
 1948              	.LBB18:
 368:armwave.c     ****         case 1:
 1949              		.loc 1 368 5 view .LVU492
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1950              		.loc 1 370 13 view .LVU493
 371:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1951              		.loc 1 371 13 view .LVU494
 1952              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1953              		.loc 1 370 41 is_stmt 0 view .LVU495
 1954 08dc 5CC09FE5 		ldr	ip, .L115+24	@ tmp142,
 1955 08e0 5C409FE5 		ldr	r4, .L115+28	@ tmp143,
 1956              	.LBE18:
 1957              	.LBE17:
 1958              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 413:armwave.c     **** 
 414:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1959              		.loc 1 414 5 view .LVU496
 1960 08e4 0000A0E3 		mov	r0, #0	@ tmp147,
 1961              	.LBB22:
 1962              	.LBB19:
 1963              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 1964              		.loc 1 372 41 view .LVU497
 1965 08e8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1966              	.LBE19:
 1967              	.LBE22:
 1968              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1969              		.loc 1 414 5 view .LVU498
 1970 08ec 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1971 08f0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1972 08f4 00808DE5 		str	r8, [sp]	@ render_width,
 1973 08f8 0610A0E1 		mov	r1, r6	@, tmp3
 1974 08fc 0720A0E1 		mov	r2, r7	@, nwaves
 1975              	.LBB23:
 1976              	.LBB20:
 1977              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1978              		.loc 1 370 41 view .LVU499
 1979 0900 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 372:armwave.c     ****             break;
 1980              		.loc 1 372 13 is_stmt 1 view .LVU500
 1981              	.LBE20:
 1982              	.LBE23:
 1983              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1984              		.loc 1 414 5 is_stmt 0 view .LVU501
 1985 0904 0630A0E1 		mov	r3, r6	@, wave_size
 1986              	.LBB24:
 1987              	.LBB21:
 1988              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 1989              		.loc 1 372 41 view .LVU502
 1990 0908 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 373:armwave.c     ****     }
 1991              		.loc 1 373 13 is_stmt 1 view .LVU503
 1992              	.LVL136:
 373:armwave.c     ****     }
 1993              		.loc 1 373 13 is_stmt 0 view .LVU504
 1994              	.LBE21:
 1995              	.LBE24:
 1996              		.loc 1 414 5 is_stmt 1 view .LVU505
 1997 090c FEFFFFEB 		bl	armwave_setup_render		@
 1998              	.LVL137:
 415:armwave.c     **** 
 416:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1999              		.loc 1 416 5 view .LVU506
 2000 0910 30109FE5 		ldr	r1, .L115+32	@,
 2001 0914 30009FE5 		ldr	r0, .L115+36	@,
 2002              	@ armwave.c:417: }
 417:armwave.c     **** }
 2003              		.loc 1 417 1 is_stmt 0 view .LVU507
 2004 0918 10D08DE2 		add	sp, sp, #16	@,,
 2005              		.cfi_def_cfa_offset 56
 2006              		@ sp needed	@
 2007 091c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2008              		.cfi_restore 84
 2009              		.cfi_restore 85
 2010              		.cfi_restore 82
 2011              		.cfi_restore 83
 2012              		.cfi_restore 80
 2013              		.cfi_restore 81
 2014              		.cfi_def_cfa_offset 32
 2015 0920 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2016              		.cfi_restore 14
 2017              		.cfi_restore 10
 2018              		.cfi_restore 9
 2019              		.cfi_restore 8
 2020              		.cfi_restore 7
 2021              		.cfi_restore 6
 2022              		.cfi_restore 5
 2023              		.cfi_restore 4
 2024              		.cfi_def_cfa_offset 0
 2025              	.LVL138:
 2026              	@ armwave.c:416:     printf("armwave version: %s\n", ARMWAVE_VER);
 416:armwave.c     **** }
 2027              		.loc 1 416 5 view .LVU508
 2028 0924 FEFFFFEA 		b	printf		@
 2029              	.LVL139:
 2030              	.L116:
 2031              		.align	3
 2032              	.L115:
 2033 0928 000000C0 		.word	-1073741824
 2034 092c CCCCEC3F 		.word	1072483532
 2035 0930 00000000 		.word	0
 2036 0934 00E06F40 		.word	1081073664
 2037 0938 00007F43 		.word	1132396544
 2038 093c FFFFFFFF 		.word	gamma_table-1
 2039 0940 00000000 		.word	g_armwave_state
 2040 0944 F609F406 		.word	116656630
 2041 0948 00000000 		.word	.LC0
 2042 094c 08000000 		.word	.LC1
 2043              		.cfi_endproc
 2044              	.LFE69:
 2046              		.align	2
 2047              		.global	armwave_test_fill_outbuf
 2048              		.syntax unified
 2049              		.arm
 2050              		.fpu vfp
 2052              	armwave_test_fill_outbuf:
 2053              	.LFB70:
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Render image to the local allocated buffer.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_fill_outbuf()
 423:armwave.c     **** {
 2054              		.loc 1 423 1 is_stmt 1 view -0
 2055              		.cfi_startproc
 2056              		@ args = 0, pretend = 0, frame = 0
 2057              		@ frame_needed = 0, uses_anonymous_args = 0
 2058              		@ link register save eliminated.
 424:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2059              		.loc 1 424 5 view .LVU510
 2060 0950 04309FE5 		ldr	r3, .L118	@ tmp111,
 2061 0954 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2062 0958 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2063              	.LVL140:
 2064              	.L119:
 2065              		.align	2
 2066              	.L118:
 2067 095c 00000000 		.word	g_armwave_state
 2068              		.cfi_endproc
 2069              	.LFE70:
 2071              		.align	2
 2072              		.global	armwave_test_dump_buffer_to_ppm
 2073              		.syntax unified
 2074              		.arm
 2075              		.fpu vfp
 2077              	armwave_test_dump_buffer_to_ppm:
 2078              	.LVL141:
 2079              	.LFB71:
 425:armwave.c     **** }
 426:armwave.c     **** 
 427:armwave.c     **** /*
 428:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 429:armwave.c     ****  */
 430:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 431:armwave.c     **** {
 2080              		.loc 1 431 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 2084              		@ link register save eliminated.
 432:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2085              		.loc 1 432 5 view .LVU512
 2086 0960 08309FE5 		ldr	r3, .L121	@ tmp112,
 2087 0964 0010A0E1 		mov	r1, r0	@, fn
 2088 0968 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2089              	.LVL142:
 2090              		.loc 1 432 5 is_stmt 0 view .LVU513
 2091 096c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2092              	.LVL143:
 2093              	.L122:
 2094              		.loc 1 432 5 view .LVU514
 2095              		.align	2
 2096              	.L121:
 2097 0970 00000000 		.word	g_armwave_state
 2098              		.cfi_endproc
 2099              	.LFE71:
 2101              		.align	2
 2102              		.global	armwave_test_fill_gdkbuf
 2103              		.syntax unified
 2104              		.arm
 2105              		.fpu vfp
 2107              	armwave_test_fill_gdkbuf:
 2108              	.LVL144:
 2109              	.LFB72:
 433:armwave.c     **** }
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Render GDK buffer with test funtionry.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 439:armwave.c     **** {
 2110              		.loc 1 439 1 is_stmt 1 view -0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              		@ link register save eliminated.
 440:armwave.c     ****     //PyObject *mv;
 441:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 442:armwave.c     **** 
 443:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 444:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2115              		.loc 1 444 5 view .LVU516
 445:armwave.c     ****     
 446:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 447:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2116              		.loc 1 447 5 view .LVU517
 2117              	@ armwave.c:444:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 444:armwave.c     ****     
 2118              		.loc 1 444 11 is_stmt 0 view .LVU518
 2119 0974 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2120              	@ armwave.c:447:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2121              		.loc 1 447 5 view .LVU519
 2122 0978 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2123              	.LVL145:
 2124              		.loc 1 447 5 view .LVU520
 2125 097c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2126              	.LVL146:
 2127              		.loc 1 447 5 view .LVU521
 2128              		.cfi_endproc
 2129              	.LFE72:
 2131              		.align	2
 2132              		.global	armwave_test_buffer_alloc
 2133              		.syntax unified
 2134              		.arm
 2135              		.fpu vfp
 2137              	armwave_test_buffer_alloc:
 2138              	.LVL147:
 2139              	.LFB73:
 448:armwave.c     **** }
 449:armwave.c     **** 
 450:armwave.c     **** /*
 451:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 452:armwave.c     ****  */
 453:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 454:armwave.c     **** {
 2140              		.loc 1 454 1 is_stmt 1 view -0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 0, uses_anonymous_args = 0
 455:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2144              		.loc 1 455 5 view .LVU523
 2145              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2146              		.loc 1 454 1 is_stmt 0 view .LVU524
 2147 0980 70402DE9 		push	{r4, r5, r6, lr}	@
 2148              		.cfi_def_cfa_offset 16
 2149              		.cfi_offset 4, -16
 2150              		.cfi_offset 5, -12
 2151              		.cfi_offset 6, -8
 2152              		.cfi_offset 14, -4
 2153              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2154              		.loc 1 454 1 view .LVU525
 2155 0984 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2156              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2157              		.loc 1 455 23 view .LVU526
 2158 0988 44409FE5 		ldr	r4, .L131	@ tmp128,
 2159 098c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2160              	.LVL148:
 2161              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2162              		.loc 1 455 7 view .LVU527
 2163 0990 000050E3 		cmp	r0, #0	@ _1,
 2164 0994 0000000A 		beq	.L125		@,
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2165              		.loc 1 456 9 is_stmt 1 view .LVU528
 2166 0998 FEFFFFEB 		bl	free		@
 2167              	.LVL149:
 2168              	.L125:
 457:armwave.c     ****     }
 458:armwave.c     **** 
 459:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 460:armwave.c     **** 
 461:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2169              		.loc 1 461 5 view .LVU529
 2170              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2171              		.loc 1 461 75 is_stmt 0 view .LVU530
 2172 099c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2173 09a0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2174              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2175              		.loc 1 461 40 view .LVU531
 2176 09a4 0610A0E1 		mov	r1, r6	@, nsets
 2177              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2178              		.loc 1 461 75 view .LVU532
 2179 09a8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2180              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2181              		.loc 1 461 40 view .LVU533
 2182 09ac 0500A0E1 		mov	r0, r5	@, _4
 2183 09b0 FEFFFFEB 		bl	calloc		@
 2184              	.LVL150:
 2185              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 462:armwave.c     **** 
 463:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2186              		.loc 1 463 7 view .LVU534
 2187 09b4 000050E3 		cmp	r0, #0	@ tmp124,
 2188              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2189              		.loc 1 461 38 view .LVU535
 2190 09b8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2191              		.loc 1 463 5 is_stmt 1 view .LVU536
 2192              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 2193              		.loc 1 463 7 is_stmt 0 view .LVU537
 2194 09bc 7080BD18 		popne	{r4, r5, r6, pc}	@
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2195              		.loc 1 464 9 is_stmt 1 view .LVU538
 2196 09c0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2197 09c4 0620A0E1 		mov	r2, r6	@, nsets
 2198 09c8 08009FE5 		ldr	r0, .L131+4	@,
 2199              	@ armwave.c:468: }
 465:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 466:armwave.c     ****         return;
 467:armwave.c     ****     }
 468:armwave.c     **** }
 2200              		.loc 1 468 1 is_stmt 0 view .LVU539
 2201 09cc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2202              		.cfi_restore 14
 2203              		.cfi_restore 6
 2204              		.cfi_restore 5
 2205              		.cfi_restore 4
 2206              		.cfi_def_cfa_offset 0
 2207              	.LVL151:
 2208              	@ armwave.c:464:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2209              		.loc 1 464 9 view .LVU540
 2210 09d0 FEFFFFEA 		b	printf		@
 2211              	.LVL152:
 2212              	.L132:
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2213              		.loc 1 464 9 view .LVU541
 2214              		.align	2
 2215              	.L131:
 2216 09d4 00000000 		.word	g_armwave_state
 2217 09d8 EC020000 		.word	.LC24
 2218              		.cfi_endproc
 2219              	.LFE73:
 2221              		.align	2
 2222              		.global	armwave_fill_pixbuf_into_pybuffer
 2223              		.syntax unified
 2224              		.arm
 2225              		.fpu vfp
 2227              	armwave_fill_pixbuf_into_pybuffer:
 2228              	.LVL153:
 2229              	.LFB74:
 469:armwave.c     **** 
 470:armwave.c     **** /*
 471:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 472:armwave.c     ****  */
 473:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 474:armwave.c     **** {
 2230              		.loc 1 474 1 is_stmt 1 view -0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 48
 2233              		@ frame_needed = 0, uses_anonymous_args = 0
 475:armwave.c     ****     Py_buffer buffer;
 2234              		.loc 1 475 5 view .LVU543
 476:armwave.c     ****     int ret;
 2235              		.loc 1 476 5 view .LVU544
 477:armwave.c     **** 
 478:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 479:armwave.c     **** 
 480:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2236              		.loc 1 480 5 view .LVU545
 2237              	@ armwave.c:474: {
 474:armwave.c     ****     Py_buffer buffer;
 2238              		.loc 1 474 1 is_stmt 0 view .LVU546
 2239 09dc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2240              		.cfi_def_cfa_offset 4
 2241              		.cfi_offset 14, -4
 2242 09e0 34D04DE2 		sub	sp, sp, #52	@,,
 2243              		.cfi_def_cfa_offset 56
 2244              	@ armwave.c:480:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2245              		.loc 1 480 11 view .LVU547
 2246 09e4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2247 09e8 0120A0E3 		mov	r2, #1	@,
 2248 09ec FEFFFFEB 		bl	PyObject_GetBuffer		@
 2249              	.LVL154:
 481:armwave.c     **** 
 482:armwave.c     ****     if(ret != 0) {
 2250              		.loc 1 482 5 is_stmt 1 view .LVU548
 2251              	@ armwave.c:482:     if(ret != 0) {
 2252              		.loc 1 482 7 is_stmt 0 view .LVU549
 2253 09f0 000050E3 		cmp	r0, #0	@,
 2254 09f4 0A00001A 		bne	.L137		@,
 483:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 484:armwave.c     ****         Py_RETURN_FALSE;
 485:armwave.c     ****     }
 486:armwave.c     **** 
 487:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 488:armwave.c     **** 
 489:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2255              		.loc 1 489 5 is_stmt 1 view .LVU550
 2256 09f8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2257              	.LVL155:
 2258              		.loc 1 489 5 is_stmt 0 view .LVU551
 2259 09fc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2260              	.LVL156:
 490:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 491:armwave.c     **** 
 492:armwave.c     ****     PyBuffer_Release(&buffer);
 2261              		.loc 1 492 5 is_stmt 1 view .LVU552
 2262 0a00 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2263 0a04 FEFFFFEB 		bl	PyBuffer_Release		@
 2264              	.LVL157:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     Py_RETURN_TRUE;
 2265              		.loc 1 495 5 view .LVU553
 2266              	.LBB25:
 2267              	.LBI25:
 2268              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2269              		.loc 2 456 20 view .LVU554
 2270              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2271              		.loc 2 458 21 view .LVU555
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2272              		.loc 2 459 5 view .LVU556
 2273              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2274              		.loc 2 459 18 is_stmt 0 view .LVU557
 2275 0a08 38309FE5 		ldr	r3, .L138	@ tmp126,
 2276              	.LBE26:
 2277              	.LBE25:
 2278              	@ armwave.c:495:     Py_RETURN_TRUE;
 2279              		.loc 1 495 5 view .LVU558
 2280 0a0c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2281              	.LBB28:
 2282              	.LBB27:
 2283              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2284              		.loc 2 459 18 view .LVU559
 2285 0a10 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2286 0a14 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2287 0a18 002083E5 		str	r2, [r3]	@ tmp128,
 2288              	.LBE27:
 2289              	.LBE28:
 2290              	@ armwave.c:496: }
 496:armwave.c     **** }
 2291              		.loc 1 496 1 view .LVU560
 2292 0a1c 34D08DE2 		add	sp, sp, #52	@,,
 2293              		.cfi_remember_state
 2294              		.cfi_def_cfa_offset 4
 2295              		@ sp needed	@
 2296 0a20 04F09DE4 		ldr	pc, [sp], #4	@
 2297              	.LVL158:
 2298              	.L137:
 2299              		.cfi_restore_state
 483:armwave.c     ****         Py_RETURN_FALSE;
 2300              		.loc 1 483 9 is_stmt 1 view .LVU561
 2301 0a24 20009FE5 		ldr	r0, .L138+4	@,
 2302              	.LVL159:
 483:armwave.c     ****         Py_RETURN_FALSE;
 2303              		.loc 1 483 9 is_stmt 0 view .LVU562
 2304 0a28 FEFFFFEB 		bl	puts		@
 2305              	.LVL160:
 484:armwave.c     ****     }
 2306              		.loc 1 484 9 is_stmt 1 view .LVU563
 2307              	.LBB29:
 2308              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2309              		.loc 2 456 20 view .LVU564
 2310              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2311              		.loc 2 458 21 view .LVU565
 2312              		.loc 2 459 5 view .LVU566
 2313              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2314              		.loc 2 459 18 is_stmt 0 view .LVU567
 2315 0a2c 1C309FE5 		ldr	r3, .L138+8	@ tmp120,
 2316              	.LBE30:
 2317              	.LBE29:
 2318              	@ armwave.c:484:         Py_RETURN_FALSE;
 484:armwave.c     ****     }
 2319              		.loc 1 484 9 view .LVU568
 2320 0a30 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2321              	.LBB32:
 2322              	.LBB31:
 2323              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2324              		.loc 2 459 18 view .LVU569
 2325 0a34 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2326 0a38 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2327 0a3c 002083E5 		str	r2, [r3]	@ tmp122,
 2328              	.LBE31:
 2329              	.LBE32:
 2330              	@ armwave.c:496: }
 2331              		.loc 1 496 1 view .LVU570
 2332 0a40 34D08DE2 		add	sp, sp, #52	@,,
 2333              		.cfi_def_cfa_offset 4
 2334              		@ sp needed	@
 2335 0a44 04F09DE4 		ldr	pc, [sp], #4	@
 2336              	.L139:
 2337              		.align	2
 2338              	.L138:
 2339 0a48 00000000 		.word	_Py_TrueStruct
 2340 0a4c 40030000 		.word	.LC25
 2341 0a50 00000000 		.word	_Py_FalseStruct
 2342              		.cfi_endproc
 2343              	.LFE74:
 2345              		.align	2
 2346              		.global	armwave_test_create_am_sine
 2347              		.syntax unified
 2348              		.arm
 2349              		.fpu vfp
 2351              	armwave_test_create_am_sine:
 2352              	.LVL161:
 2353              	.LFB75:
 497:armwave.c     **** 
 498:armwave.c     **** /*
 499:armwave.c     ****  * Make a test AM waveform for render tests.
 500:armwave.c     ****  *
 501:armwave.c     ****  * @param   mod                     modulation depth
 502:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 503:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 504:armwave.c     ****  */
 505:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 506:armwave.c     **** {
 2354              		.loc 1 506 1 is_stmt 1 view -0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 8
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2358              		.loc 1 507 5 view .LVU572
 508:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2359              		.loc 1 508 5 view .LVU573
 2360              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2361              		.loc 1 506 1 is_stmt 0 view .LVU574
 2362 0a54 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2363              		.cfi_def_cfa_offset 32
 2364              		.cfi_offset 4, -32
 2365              		.cfi_offset 5, -28
 2366              		.cfi_offset 6, -24
 2367              		.cfi_offset 7, -20
 2368              		.cfi_offset 8, -16
 2369              		.cfi_offset 9, -12
 2370              		.cfi_offset 10, -8
 2371              		.cfi_offset 14, -4
 2372              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2373              		.loc 1 508 38 view .LVU575
 2374 0a58 7A7A9FED 		vldr.32	s14, .L171	@ tmp180,
 2375              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2376              		.loc 1 508 55 view .LVU576
 2377 0a5c 00529FE5 		ldr	r5, .L171+28	@ tmp250,
 2378              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2379              		.loc 1 506 1 view .LVU577
 2380 0a60 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2381              		.cfi_def_cfa_offset 80
 2382              		.cfi_offset 80, -80
 2383              		.cfi_offset 81, -76
 2384              		.cfi_offset 82, -72
 2385              		.cfi_offset 83, -68
 2386              		.cfi_offset 84, -64
 2387              		.cfi_offset 85, -60
 2388              		.cfi_offset 86, -56
 2389              		.cfi_offset 87, -52
 2390              		.cfi_offset 88, -48
 2391              		.cfi_offset 89, -44
 2392              		.cfi_offset 90, -40
 2393              		.cfi_offset 91, -36
 2394 0a64 0090A0E1 		mov	r9, r0	@ sets, sets
 2395              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2396              		.loc 1 508 38 view .LVU578
 2397 0a68 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2398              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 509:armwave.c     ****     int s, set_offset = 0;
 510:armwave.c     ****     int w, x;
 511:armwave.c     **** 
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2399              		.loc 1 512 70 view .LVU579
 2400 0a6c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2401 0a70 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2402              	.LBB35:
 2403              	.LBB36:
 2404              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2405              		.loc 1 455 23 view .LVU580
 2406 0a74 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2407              	.LVL162:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2408              		.loc 1 455 23 view .LVU581
 2409              	.LBE36:
 2410              	.LBE35:
 2411              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2412              		.loc 1 508 38 view .LVU582
 2413 0a78 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2414              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2415              		.loc 1 512 70 view .LVU583
 2416 0a7c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2417              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2418              		.loc 1 506 1 view .LVU584
 2419 0a80 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2420              	.LBB40:
 2421              	.LBB37:
 2422              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2423              		.loc 1 455 7 view .LVU585
 2424 0a84 000050E3 		cmp	r0, #0	@ _82,
 2425              	.LBE37:
 2426              	.LBE40:
 2427              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2428              		.loc 1 506 1 view .LVU586
 2429 0a88 08D04DE2 		sub	sp, sp, #8	@,,
 2430              		.cfi_def_cfa_offset 88
 2431              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_nsets = sets;
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2432              		.loc 1 513 44 view .LVU587
 2433 0a8c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2434              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2435              		.loc 1 512 45 view .LVU588
 2436 0a90 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2437              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2438              		.loc 1 508 38 view .LVU589
 2439 0a94 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2440              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2441              		.loc 1 508 11 view .LVU590
 2442 0a98 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2443              	.LVL163:
 509:armwave.c     ****     int w, x;
 2444              		.loc 1 509 5 is_stmt 1 view .LVU591
 510:armwave.c     **** 
 2445              		.loc 1 510 5 view .LVU592
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2446              		.loc 1 512 5 view .LVU593
 2447              		.loc 1 513 5 view .LVU594
 514:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2448              		.loc 1 514 5 view .LVU595
 2449              	.LBB41:
 2450              	.LBI35:
 453:armwave.c     **** {
 2451              		.loc 1 453 6 view .LVU596
 2452              	.LBB38:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2453              		.loc 1 455 5 view .LVU597
 2454              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2455              		.loc 1 455 7 is_stmt 0 view .LVU598
 2456 0a9c 0000000A 		beq	.L141		@,
 456:armwave.c     ****     }
 2457              		.loc 1 456 9 is_stmt 1 view .LVU599
 2458 0aa0 FEFFFFEB 		bl	free		@
 2459              	.LVL164:
 2460              	.L141:
 461:armwave.c     **** 
 2461              		.loc 1 461 5 view .LVU600
 2462              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2463              		.loc 1 461 75 is_stmt 0 view .LVU601
 2464 0aa4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2465 0aa8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2466              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2467              		.loc 1 461 40 view .LVU602
 2468 0aac 0910A0E1 		mov	r1, r9	@, sets
 2469              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2470              		.loc 1 461 75 view .LVU603
 2471 0ab0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2472              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2473              		.loc 1 461 40 view .LVU604
 2474 0ab4 0400A0E1 		mov	r0, r4	@, _85
 2475 0ab8 FEFFFFEB 		bl	calloc		@
 2476              	.LVL165:
 2477              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2478              		.loc 1 463 7 view .LVU605
 2479 0abc 000050E3 		cmp	r0, #0	@ tmp191,
 2480              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2481              		.loc 1 461 38 view .LVU606
 2482 0ac0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2483              		.loc 1 463 5 is_stmt 1 view .LVU607
 2484              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2485              		.loc 1 463 7 is_stmt 0 view .LVU608
 2486 0ac4 5A00000A 		beq	.L170		@,
 2487              	.L142:
 2488              	.LVL166:
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2489              		.loc 1 463 7 view .LVU609
 2490              	.LBE38:
 2491              	.LBE41:
 2492              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 515:armwave.c     **** 
 516:armwave.c     ****     for(s = 0; s < sets; s++) {
 2493              		.loc 1 516 5 discriminator 1 view .LVU610
 2494 0ac8 000059E3 		cmp	r9, #0	@ sets,
 2495 0acc 550000DA 		ble	.L140		@,
 2496              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 518:armwave.c     ****     
 519:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 521:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 523:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     **** 
 529:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                     noise = -noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 noise += 1.0f;
 533:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 535:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2497              		.loc 1 535 45 view .LVU611
 2498 0ad0 5C8A9FED 		vldr.32	s16, .L171	@ tmp258,
 2499              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 537:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 538:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2500              		.loc 1 538 104 view .LVU612
 2501 0ad4 5CCA9FED 		vldr.32	s24, .L171+4	@ tmp259,
 2502              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2503              		.loc 1 516 5 view .LVU613
 2504 0ad8 0070A0E3 		mov	r7, #0	@ set_offset,
 2505              	@ armwave.c:517:         printf("Calculating test set %d\n", s);
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2506              		.loc 1 517 9 view .LVU614
 2507 0adc 84A19FE5 		ldr	r10, .L171+32	@ tmp257,
 2508              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2509              		.loc 1 516 5 view .LVU615
 2510 0ae0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2511              	.LVL167:
 2512              	.L143:
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2513              		.loc 1 517 9 is_stmt 1 view .LVU616
 2514 0ae4 0810A0E1 		mov	r1, r8	@, s
 2515 0ae8 0A00A0E1 		mov	r0, r10	@, tmp257
 2516 0aec FEFFFFEB 		bl	printf		@
 2517              	.LVL168:
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2518              		.loc 1 519 9 view .LVU617
 2519              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2520              		.loc 1 519 39 is_stmt 0 view .LVU618
 2521 0af0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2522              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2523              		.loc 1 519 9 view .LVU619
 2524 0af4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2525 0af8 450000DA 		ble	.L144		@,
 2526              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2527              		.loc 1 521 21 view .LVU620
 2528 0afc 53CADFED 		vldr.32	s25, .L171+8	@ tmp200,
 2529              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2530              		.loc 1 535 33 view .LVU621
 2531 0b00 53BA9FED 		vldr.32	s22, .L171+12	@ tmp253,
 2532              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2533              		.loc 1 533 24 view .LVU622
 2534 0b04 53AADFED 		vldr.32	s21, .L171+16	@ tmp254,
 2535 0b08 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2536              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2537              		.loc 1 519 15 view .LVU623
 2538 0b0c 0060A0E3 		mov	r6, #0	@ w,
 2539              	.LVL169:
 2540              	.L151:
 521:armwave.c     **** 
 2541              		.loc 1 521 13 is_stmt 1 view .LVU624
 2542              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2543              		.loc 1 521 21 is_stmt 0 view .LVU625
 2544 0b10 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2545 0b14 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2546              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2547              		.loc 1 523 13 view .LVU626
 2548 0b18 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2549              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2550              		.loc 1 521 21 view .LVU627
 2551 0b1c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2552 0b20 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2553              	.LVL170:
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2554              		.loc 1 523 13 is_stmt 1 view .LVU628
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2555              		.loc 1 523 13 is_stmt 0 view .LVU629
 2556 0b24 370000DA 		ble	.L145		@,
 2557 0b28 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2558              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2559              		.loc 1 538 113 view .LVU630
 2560 0b2c 4AAA9FED 		vldr.32	s20, .L171+20	@ tmp229,
 2561 0b30 4A8ADFED 		vldr.32	s17, .L171+24	@ tmp230,
 2562              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2563              		.loc 1 523 19 view .LVU631
 2564 0b34 0040A0E3 		mov	r4, #0	@ x,
 2565              	.LVL171:
 2566              	.L150:
 524:armwave.c     ****                 noise *= noise;
 2567              		.loc 1 524 17 is_stmt 1 view .LVU632
 2568              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2569              		.loc 1 524 28 is_stmt 0 view .LVU633
 2570 0b38 FEFFFFEB 		bl	rand		@
 2571              	.LVL172:
 2572              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2573              		.loc 1 524 35 view .LVU634
 2574 0b3c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2575              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2576              		.loc 1 524 45 view .LVU635
 2577 0b40 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2578 0b44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2579              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2580              		.loc 1 524 24 view .LVU636
 2581 0b48 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2582              	.LVL173:
 525:armwave.c     ****                 noise *= noise;
 2583              		.loc 1 525 17 is_stmt 1 view .LVU637
 2584              	@ armwave.c:525:                 noise *= noise;
 525:armwave.c     ****                 noise *= noise;
 2585              		.loc 1 525 23 is_stmt 0 view .LVU638
 2586 0b4c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2587              	.LVL174:
 526:armwave.c     ****                 noise *= noise;
 2588              		.loc 1 526 17 is_stmt 1 view .LVU639
 2589              	@ armwave.c:526:                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 2590              		.loc 1 526 23 is_stmt 0 view .LVU640
 2591 0b50 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2592              	.LVL175:
 527:armwave.c     **** 
 2593              		.loc 1 527 17 is_stmt 1 view .LVU641
 2594              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     **** 
 2595              		.loc 1 527 23 is_stmt 0 view .LVU642
 2596 0b54 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2597              	.LVL176:
 529:armwave.c     ****                     noise = -noise;
 2598              		.loc 1 529 17 is_stmt 1 view .LVU643
 2599              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2600              		.loc 1 529 21 is_stmt 0 view .LVU644
 2601 0b58 FEFFFFEB 		bl	rand		@
 2602              	.LVL177:
 530:armwave.c     **** 
 2603              		.loc 1 530 21 is_stmt 1 view .LVU645
 2604              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2605              		.loc 1 529 19 is_stmt 0 view .LVU646
 2606 0b5c 020910E3 		tst	r0, #32768	@,
 2607              	@ armwave.c:530:                     noise = -noise;
 530:armwave.c     **** 
 2608              		.loc 1 530 27 view .LVU647
 2609 0b60 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2610              	.LVL178:
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2611              		.loc 1 532 17 is_stmt 1 view .LVU648
 533:armwave.c     **** 
 2612              		.loc 1 533 17 view .LVU649
 2613              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2614              		.loc 1 533 27 is_stmt 0 view .LVU650
 2615 0b64 FEFFFFEB 		bl	rand		@
 2616              	.LVL179:
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2617              		.loc 1 535 17 is_stmt 1 view .LVU651
 2618              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2619              		.loc 1 535 45 is_stmt 0 view .LVU652
 2620 0b68 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2621              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2622              		.loc 1 535 33 view .LVU653
 2623 0b6c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2624              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2625              		.loc 1 535 45 view .LVU654
 2626 0b70 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2627              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2628              		.loc 1 535 33 view .LVU655
 2629 0b74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2630              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2631              		.loc 1 535 45 view .LVU656
 2632 0b78 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2633              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2634              		.loc 1 535 33 view .LVU657
 2635 0b7c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2636              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2637              		.loc 1 533 34 view .LVU658
 2638 0b80 7000FFE6 		uxth	r0, r0	@ tmp214,
 2639              	.LVL180:
 2640              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2641              		.loc 1 533 44 view .LVU659
 2642 0b84 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2643 0b88 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2644              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2645              		.loc 1 533 24 view .LVU660
 2646 0b8c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2647              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2648              		.loc 1 535 77 view .LVU661
 2649 0b90 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2650              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2651              		.loc 1 535 22 view .LVU662
 2652 0b94 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2653 0b98 FEFFFFEB 		bl	sin		@
 2654              	.LVL181:
 2655              		.loc 1 538 17 is_stmt 1 view .LVU663
 2656              	@ armwave.c:532:                 noise += 1.0f;
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2657              		.loc 1 532 23 is_stmt 0 view .LVU664
 2658 0b9c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2659              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2660              		.loc 1 538 104 view .LVU665
 2661 0ba0 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2662              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2663              		.loc 1 535 98 view .LVU666
 2664 0ba4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2665              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2666              		.loc 1 535 87 view .LVU667
 2667 0ba8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2668              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2669              		.loc 1 535 98 view .LVU668
 2670 0bac 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2671              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2672              		.loc 1 535 19 view .LVU669
 2673 0bb0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2674              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2675              		.loc 1 538 113 view .LVU670
 2676 0bb4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2677 0bb8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2678 0bbc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2679 0bc0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2680 0bc4 050000DA 		ble	.L147		@,
 2681              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2682              		.loc 1 538 104 discriminator 1 view .LVU671
 2683 0bc8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2684 0bcc FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2685 0bd0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2686 0bd4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2687 0bd8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2688 0bdc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2689              	.L147:
 2690              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2691              		.loc 1 538 57 discriminator 12 view .LVU672
 2692 0be0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2693              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2694              		.loc 1 538 102 discriminator 12 view .LVU673
 2695 0be4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2696 0be8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2697 0bec 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2698              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2699              		.loc 1 523 58 discriminator 12 view .LVU674
 2700 0bf0 014084E2 		add	r4, r4, #1	@ x, x,
 2701              	.LVL182:
 2702              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2703              		.loc 1 538 102 discriminator 12 view .LVU675
 2704 0bf4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2705              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2706              		.loc 1 523 43 discriminator 12 view .LVU676
 2707 0bf8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2708              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2709              		.loc 1 523 13 discriminator 12 view .LVU677
 2710 0bfc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2711 0c00 CCFFFFCA 		bgt	.L150		@,
 2712 0c04 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2713              	.LVL183:
 2714              	.L145:
 2715              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2716              		.loc 1 519 48 discriminator 2 view .LVU678
 2717 0c08 016086E2 		add	r6, r6, #1	@ w, w,
 2718              	.LVL184:
 2719              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2720              		.loc 1 519 9 discriminator 2 view .LVU679
 2721 0c0c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2722 0c10 BEFFFFBA 		blt	.L151		@,
 2723              	.LVL185:
 2724              	.L144:
 539:armwave.c     ****             }
 540:armwave.c     ****         }
 541:armwave.c     **** 
 542:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2725              		.loc 1 542 9 is_stmt 1 discriminator 2 view .LVU680
 2726              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2727              		.loc 1 542 46 is_stmt 0 discriminator 2 view .LVU681
 2728 0c14 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2729              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2730              		.loc 1 516 27 discriminator 2 view .LVU682
 2731 0c18 018088E2 		add	r8, r8, #1	@ s, s,
 2732              	.LVL186:
 2733              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2734              		.loc 1 516 5 discriminator 2 view .LVU683
 2735 0c1c 080059E1 		cmp	r9, r8	@ sets, s
 2736              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2737              		.loc 1 542 20 discriminator 2 view .LVU684
 2738 0c20 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2739              	.LVL187:
 2740              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2741              		.loc 1 516 5 discriminator 2 view .LVU685
 2742 0c24 AEFFFF1A 		bne	.L143		@,
 2743              	.LVL188:
 2744              	.L140:
 2745              	@ armwave.c:544: }
 543:armwave.c     ****     }
 544:armwave.c     **** }
 2746              		.loc 1 544 1 view .LVU686
 2747 0c28 08D08DE2 		add	sp, sp, #8	@,,
 2748              		.cfi_remember_state
 2749              		.cfi_def_cfa_offset 80
 2750              		@ sp needed	@
 2751 0c2c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2752              		.cfi_restore 90
 2753              		.cfi_restore 91
 2754              		.cfi_restore 88
 2755              		.cfi_restore 89
 2756              		.cfi_restore 86
 2757              		.cfi_restore 87
 2758              		.cfi_restore 84
 2759              		.cfi_restore 85
 2760              		.cfi_restore 82
 2761              		.cfi_restore 83
 2762              		.cfi_restore 80
 2763              		.cfi_restore 81
 2764              		.cfi_def_cfa_offset 32
 2765              	.LVL189:
 2766              		.loc 1 544 1 view .LVU687
 2767 0c30 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2768              	.LVL190:
 2769              	.L170:
 2770              		.cfi_restore_state
 2771              	.LBB42:
 2772              	.LBB39:
 464:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2773              		.loc 1 464 9 is_stmt 1 view .LVU688
 2774 0c34 940901E0 		mul	r1, r4, r9	@, _85, sets
 2775 0c38 0920A0E1 		mov	r2, r9	@, sets
 2776 0c3c 28009FE5 		ldr	r0, .L171+36	@,
 2777 0c40 FEFFFFEB 		bl	printf		@
 2778              	.LVL191:
 466:armwave.c     ****     }
 2779              		.loc 1 466 9 view .LVU689
 2780 0c44 9FFFFFEA 		b	.L142		@
 2781              	.L172:
 2782              		.align	2
 2783              	.L171:
 2784 0c48 0000803F 		.word	1065353216
 2785 0c4c 00007F43 		.word	1132396544
 2786 0c50 0000003F 		.word	1056964608
 2787 0c54 C3F5C840 		.word	1086911939
 2788 0c58 38FFC74A 		.word	1254620984
 2789 0c5c 0000FE42 		.word	1123942400
 2790 0c60 00000043 		.word	1124073472
 2791 0c64 00000000 		.word	g_armwave_state
 2792 0c68 94030000 		.word	.LC26
 2793 0c6c EC020000 		.word	.LC24
 2794              	.LBE39:
 2795              	.LBE42:
 2796              		.cfi_endproc
 2797              	.LFE75:
 2799              		.align	2
 2800              		.global	armwave_cleanup
 2801              		.syntax unified
 2802              		.arm
 2803              		.fpu vfp
 2805              	armwave_cleanup:
 2806              	.LFB76:
 545:armwave.c     **** 
 546:armwave.c     **** /*
 547:armwave.c     ****  * Make a test square waveform.
 548:armwave.c     ****  *
 549:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 550:armwave.c     ****  */
 551:armwave.c     **** #if 0
 552:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 553:armwave.c     **** {
 554:armwave.c     ****     uint8_t v;
 555:armwave.c     ****     float noise, xnoise;
 556:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 557:armwave.c     ****     int w, x;
 558:armwave.c     **** 
 559:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 560:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 561:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 562:armwave.c     ****             noise *= noise;
 563:armwave.c     ****             noise *= noise;
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     **** 
 566:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 567:armwave.c     ****                 noise = -noise;
 568:armwave.c     **** 
 569:armwave.c     ****             //noise += 1.0f;
 570:armwave.c     **** 
 571:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 572:armwave.c     ****                 new_level = 0.2f;
 573:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 574:armwave.c     ****                 new_level = 0.8f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 576:armwave.c     ****                 new_level = 0.2f;
 577:armwave.c     ****             } else {
 578:armwave.c     ****                 new_level = 0.8f;
 579:armwave.c     ****             }
 580:armwave.c     **** 
 581:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 582:armwave.c     **** 
 583:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 584:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 585:armwave.c     ****         }
 586:armwave.c     ****     }
 587:armwave.c     **** }
 588:armwave.c     **** #endif
 589:armwave.c     **** 
 590:armwave.c     **** /*
 591:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 592:armwave.c     ****  */
 593:armwave.c     **** void armwave_cleanup()
 594:armwave.c     **** {
 2807              		.loc 1 594 1 view -0
 2808              		.cfi_startproc
 2809              		@ args = 0, pretend = 0, frame = 0
 2810              		@ frame_needed = 0, uses_anonymous_args = 0
 595:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2811              		.loc 1 595 5 view .LVU691
 2812              	@ armwave.c:594: {
 594:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2813              		.loc 1 594 1 is_stmt 0 view .LVU692
 2814 0c70 10402DE9 		push	{r4, lr}	@
 2815              		.cfi_def_cfa_offset 8
 2816              		.cfi_offset 4, -8
 2817              		.cfi_offset 14, -4
 2818              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 2819              		.loc 1 595 25 view .LVU693
 2820 0c74 34409FE5 		ldr	r4, .L175	@ tmp114,
 2821              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 2822              		.loc 1 595 5 view .LVU694
 2823 0c78 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2824 0c7c FEFFFFEB 		bl	free		@
 2825              	.LVL192:
 596:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2826              		.loc 1 596 5 is_stmt 1 view .LVU695
 2827 0c80 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2828 0c84 FEFFFFEB 		bl	free		@
 2829              	.LVL193:
 597:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2830              		.loc 1 597 5 view .LVU696
 2831 0c88 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2832 0c8c FEFFFFEB 		bl	free		@
 2833              	.LVL194:
 598:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2834              		.loc 1 598 5 view .LVU697
 2835 0c90 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2836 0c94 FEFFFFEB 		bl	free		@
 2837              	.LVL195:
 599:armwave.c     **** 
 600:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2838              		.loc 1 600 5 view .LVU698
 2839              	@ armwave.c:600:     g_armwave_state.out_pixbuf = NULL;
 2840              		.loc 1 600 32 is_stmt 0 view .LVU699
 2841 0c98 0030A0E3 		mov	r3, #0	@ tmp123,
 2842 0c9c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 601:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2843              		.loc 1 601 5 is_stmt 1 view .LVU700
 2844              	@ armwave.c:601:     g_armwave_state.ch1_buffer = NULL;
 2845              		.loc 1 601 32 is_stmt 0 view .LVU701
 2846 0ca0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 602:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2847              		.loc 1 602 5 is_stmt 1 view .LVU702
 2848              	@ armwave.c:602:     g_armwave_state.xcoord_to_xpixel = NULL;
 2849              		.loc 1 602 38 is_stmt 0 view .LVU703
 2850 0ca4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 603:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2851              		.loc 1 603 5 is_stmt 1 view .LVU704
 2852              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = NULL;
 2853              		.loc 1 603 38 is_stmt 0 view .LVU705
 2854 0ca8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2855              	@ armwave.c:604: }
 604:armwave.c     **** }
 2856              		.loc 1 604 1 view .LVU706
 2857 0cac 1080BDE8 		pop	{r4, pc}	@
 2858              	.L176:
 2859              		.align	2
 2860              	.L175:
 2861 0cb0 00000000 		.word	g_armwave_state
 2862              		.cfi_endproc
 2863              	.LFE76:
 2865              		.comm	gamma_table,256,4
 2866              		.comm	g_armwave_state,136,4
 2867              		.section	.rodata
 2868              		.align	2
 2869              		.set	.LANCHOR0,. + 0
 2872              	__PRETTY_FUNCTION__.17125:
 2873 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2873      6176655F 
 2873      73657475 
 2873      705F7265 
 2873      6E646572 
 2874 0015 000000   		.space	3
 2877              	__PRETTY_FUNCTION__.17129:
 2878 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2878      6176655F 
 2878      7365745F 
 2878      77617665 
 2878      5F706F69 
 2879 0031 000000   		.space	3
 2882              	__PRETTY_FUNCTION__.17136:
 2883 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2883      6176655F 
 2883      7365745F 
 2883      77617665 
 2883      5F706F69 
 2884              		.section	.rodata.str1.4,"aMS",%progbits,1
 2885              		.align	2
 2886              	.LC0:
 2887 0000 76302E30 		.ascii	"v0.0.1\000"
 2887      2E3100
 2888 0007 00       		.space	1
 2889              	.LC1:
 2890 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2890      61766520 
 2890      76657273 
 2890      696F6E3A 
 2890      2025730A 
 2891 001d 000000   		.space	3
 2892              	.LC2:
 2893 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2893      78253038 
 2893      7820623D 
 2893      30782530 
 2893      38782063 
 2894 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2894      25642073 
 2894      63616C65 
 2894      3D256420 
 2894      62697464 
 2895 0077 00       		.space	1
 2896              	.LC3:
 2897 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 2897      6E643D25 
 2897      640A00
 2898 0083 00       		.space	1
 2899              	.LC4:
 2900 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2900      75742062 
 2900      75666665 
 2900      723A2030 
 2900      78253038 
 2901 009b 00       		.space	1
 2902              	.LC5:
 2903 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2903      65742025 
 2903      64206279 
 2903      7465732C 
 2903      206E7069 
 2904 00cf 30782530 		.ascii	"0x%08x, stack ~0x%08x\012\000"
 2904      38782C20 
 2904      73746163 
 2904      6B207E30 
 2904      78253038 
 2905 00e6 0000     		.space	2
 2906              	.LC6:
 2907 00e8 69746572 		.ascii	"iter...\000"
 2907      2E2E2E00 
 2908              	.LC7:
 2909 00f0 25640A00 		.ascii	"%d\012\000"
 2910              	.LC8:
 2911 00f4 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 2911      6F6E6520 
 2911      7061696E 
 2911      74202564 
 2911      20706978 
 2912              	.LC9:
 2913 0110 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2913      6176655F 
 2913      67656E65 
 2913      72617465 
 2913      3A20736C 
 2914 0141 00       		.ascii	"\000"
 2915 0142 0000     		.space	2
 2916              	.LC10:
 2917 0144 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2917      20653D25 
 2917      6420773D 
 2917      25642077 
 2917      733D2564 
 2918              	.LC11:
 2919 0170 61726D77 		.ascii	"armwave.c\000"
 2919      6176652E 
 2919      6300
 2920 017a 0000     		.space	2
 2921              	.LC12:
 2922 017c 73746172 		.ascii	"start_point < end_point\000"
 2922      745F706F 
 2922      696E7420 
 2922      3C20656E 
 2922      645F706F 
 2923              	.LC13:
 2924 0194 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2924      7566665F 
 2924      73697A65 
 2924      3D25642C 
 2924      20636D70 
 2925 01c7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2925      5F776964 
 2925      74683D25 
 2925      642C2077 
 2925      6176655F 
 2926 01f1 000000   		.space	3
 2927              	.LC14:
 2928 01f4 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2928      6F632066 
 2928      61696C75 
 2928      72652061 
 2928      6C6C6F63 
 2929 0227 2E636831 		.ascii	".ch1_buffer)\012\000"
 2929      5F627566 
 2929      66657229 
 2929      0A00
 2930 0235 000000   		.space	3
 2931              	.LC15:
 2932 0238 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2932      3A203078 
 2932      25303878 
 2932      20307825 
 2932      30387820 
 2933              	.LC16:
 2934 025c 77617665 		.ascii	"wave_buffer != NULL\000"
 2934      5F627566 
 2934      66657220 
 2934      213D204E 
 2934      554C4C00 
 2935              	.LC17:
 2936 0270 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2936      6176655F 
 2936      7365745F 
 2936      77617665 
 2936      5F706F69 
 2937 02a3 78636565 		.ascii	"xceeded\000"
 2937      64656400 
 2938 02ab 00       		.space	1
 2939              	.LC18:
 2940 02ac 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2940      5F627566 
 2940      6665725F 
 2940      70747220 
 2940      213D2030 
 2941 02c1 000000   		.space	3
 2942              	.LC19:
 2943 02c4 776200   		.ascii	"wb\000"
 2944 02c7 00       		.space	1
 2945              	.LC20:
 2946 02c8 50330A00 		.ascii	"P3\012\000"
 2947              	.LC21:
 2948 02cc 25642025 		.ascii	"%d %d\012\000"
 2948      640A00
 2949 02d3 00       		.space	1
 2950              	.LC22:
 2951 02d4 3235350A 		.ascii	"255\012\000"
 2951      00
 2952 02d9 000000   		.space	3
 2953              	.LC23:
 2954 02dc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2954      25336420 
 2954      2533640A 
 2954      00
 2955 02e9 000000   		.space	3
 2956              	.LC24:
 2957 02ec 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2957      6176655F 
 2957      74657374 
 2957      5F627566 
 2957      6665725F 
 2958 031f 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2958      20627566 
 2958      66657220 
 2958      28256420 
 2958      62797465 
 2959              	.LC25:
 2960 0340 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2960      6176655F 
 2960      66696C6C 
 2960      5F706978 
 2960      6275665F 
 2961 0373 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2961      20666169 
 2961      6C65642C 
 2961      20726574 
 2961      75726E69 
 2962 0392 0000     		.space	2
 2963              	.LC26:
 2964 0394 43616C63 		.ascii	"Calculating test set %d\012\000"
 2964      756C6174 
 2964      696E6720 
 2964      74657374 
 2964      20736574 
 2965              		.text
 2966              	.Letext0:
 2967              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2968              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2969              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2970              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2971              		.file 7 "/usr/include/stdio.h"
 2972              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2973              		.file 9 "/usr/include/errno.h"
 2974              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2975              		.file 11 "/usr/include/unistd.h"
 2976              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2977              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2978              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2979              		.file 15 "/usr/include/math.h"
 2980              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2981              		.file 17 "/usr/include/time.h"
 2982              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2983              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2984              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2985              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2986              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2987              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2988              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2989              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2990              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2991              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2992              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2993              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2994              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2995              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2996              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2997              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2998              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2999              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3000              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3001              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3002              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3003              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3004              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3005              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3006              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3007              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3008              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3009              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3010              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3011              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3012              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3013              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3014              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3015              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3016              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3017              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3018              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3019              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3020              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3021              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3022              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3023              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3024              		.file 60 "/usr/local/include/python3.8/context.h"
 3025              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3026              		.file 62 "/usr/local/include/python3.8/code.h"
 3027              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3028              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3029              		.file 65 "/usr/local/include/python3.8/import.h"
 3030              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3031              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3032              		.file 68 "/usr/include/malloc.h"
 3033              		.file 69 "armwave.h"
 3034              		.file 70 "/usr/include/stdlib.h"
 3035              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3036              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3037              		.file 73 "<built-in>"
 3038              		.file 74 "/usr/include/assert.h"
