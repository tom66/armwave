   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 70819FE5 		ldr	r8, .L22	@ tmp194,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0090A0E1 		mov	r9, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241098E5 		ldr	r1, [r8, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403098E5 		ldr	r3, [r8, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044098E5 		ldr	r4, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 40019FE5 		ldr	r0, .L22+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp204,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383098E5 		ldr	r3, [r8, #56]	@ _82, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _82,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _82, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3E0000DA 		ble	.L12		@,
 317 0108 14A098E5 		ldr	r10, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 318 010c 343098E5 		ldr	r3, [r8, #52]	@ _266, g_armwave_state.wave_stride
 319 0110 09A08AE0 		add	r10, r10, r9	@ ivtmp.52, g_armwave_state.wave_buffer, slice_y
 320              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 103 51 view .LVU52
 322 0114 247098E5 		ldr	r7, [r8, #36]	@ _75, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 324              		.loc 1 103 116 view .LVU53
 325 0118 40E098E5 		ldr	lr, [r8, #64]	@ _79, g_armwave_state.bitdepth_height
 326 011c 00906AE2 		rsb	r9, r10, #0	@ ivtmp.53, ivtmp.52
 327              	.LVL11:
 328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 329              		.loc 1 79 11 view .LVU54
 330 0120 05C0A0E1 		mov	ip, r5	@ write_buffer, write_buffer
 331 0124 24308DE5 		str	r3, [sp, #36]	@ _266, %sfp
 332 0128 0030A0E3 		mov	r3, #0	@ w,
 333 012c 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 334              	.LVL12:
 335              	.L15:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 336              		.loc 1 80 9 is_stmt 1 view .LVU55
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 337              		.loc 1 84 9 view .LVU56
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 338              		.loc 1 84 9 is_stmt 0 view .LVU57
 339 0130 000056E3 		cmp	r6, #0	@ height,
 340 0134 2800000A 		beq	.L13		@,
 341 0138 0A80A0E1 		mov	r8, r10	@ ivtmp.45, ivtmp.52
 342 013c 0030A0E3 		mov	r3, #0	@ ivtmp.46,
 343              	.LVL13:
 344              	.L14:
  87:armwave.c     **** 
 345              		.loc 1 87 13 is_stmt 1 view .LVU58
 346              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 347              		.loc 1 87 18 is_stmt 0 view .LVU59
 348 0140 042098E4 		ldr	r2, [r8], #4	@ word, MEM[base: _275, offset: 0B]
 349              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 350              		.loc 1 89 13 is_stmt 1 view .LVU60
  90:armwave.c     ****                 
 351              		.loc 1 90 17 view .LVU61
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 102 17 view .LVU62
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 107 17 view .LVU63
 354              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 355              		.loc 1 103 74 is_stmt 0 view .LVU64
 356 0144 23C8A0E1 		lsr	ip, r3, #16	@ tmp211, ivtmp.46,
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 34 view .LVU65
 359 0148 033087E0 		add	r3, r7, r3	@ _102, _75, ivtmp.46
 360              	.LVL15:
 361              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 362              		.loc 1 90 29 view .LVU66
 363 014c 7210EFE6 		uxtb	r1, r2	@ scale_value, word
 364              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 107 47 view .LVU67
 366 0150 9E1C2CE0 		mla	ip, lr, ip, r1	@ tmp214, _79, tmp211, scale_value
 367              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 368              		.loc 1 108 22 view .LVU68
 369 0154 2214A0E1 		lsr	r1, r2, #8	@ word, word,
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 74 view .LVU69
 372 0158 2308A0E1 		lsr	r0, r3, #16	@ tmp219, _102,
 373              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 374              		.loc 1 90 29 view .LVU70
 375 015c 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU71
 378 0160 8CC0A0E1 		lsl	ip, ip, #1	@ tmp215, tmp214,
 379 0164 9E1020E0 		mla	r0, lr, r0, r1	@ tmp223, _79, tmp219, scale_value
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 34 view .LVU72
 382 0168 033087E0 		add	r3, r7, r3	@ _128, _75, _102
 383              	@ armwave.c:108:                 word >>= 8;
 384              		.loc 1 108 22 view .LVU73
 385 016c 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 386              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 387              		.loc 1 107 47 view .LVU74
 388 0170 BC5094E1 		ldrh	r5, [r4, ip]	@ *_85, *_85
 389              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 390              		.loc 1 103 74 view .LVU75
 391 0174 23B8A0E1 		lsr	fp, r3, #16	@ tmp228, _128,
 392              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 393              		.loc 1 90 29 view .LVU76
 394 0178 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 395              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 396              		.loc 1 107 47 view .LVU77
 397 017c 8000A0E1 		lsl	r0, r0, #1	@ tmp224, tmp223,
 398              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 399              		.loc 1 103 34 view .LVU78
 400 0180 033087E0 		add	r3, r7, r3	@ _154, _75, _128
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 view .LVU79
 403 0184 9E1B21E0 		mla	r1, lr, fp, r1	@ tmp232, _79, tmp228, scale_value
 404 0188 015085E2 		add	r5, r5, #1	@ tmp218, *_85,
 405 018c BC5084E1 		strh	r5, [r4, ip]	@ movhi	@ tmp218, *_85
 406              		.loc 1 108 17 is_stmt 1 view .LVU80
 407              	.LVL16:
  90:armwave.c     ****                 
 408              		.loc 1 90 17 view .LVU81
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 409              		.loc 1 102 17 view .LVU82
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 17 view .LVU83
 411              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 412              		.loc 1 103 74 is_stmt 0 view .LVU84
 413 0190 23C8A0E1 		lsr	ip, r3, #16	@ tmp237, _154,
 414              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 47 view .LVU85
 416 0194 B05094E1 		ldrh	r5, [r4, r0]	@ *_111, *_111
 417 0198 8110A0E1 		lsl	r1, r1, #1	@ tmp233, tmp232,
 418              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 419              		.loc 1 102 50 view .LVU86
 420 019c 9E0C0CE0 		mul	ip, lr, ip	@ tmp238, _79, tmp237
 421              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 422              		.loc 1 107 47 view .LVU87
 423 01a0 015085E2 		add	r5, r5, #1	@ tmp227, *_111,
 424 01a4 B05084E1 		strh	r5, [r4, r0]	@ movhi	@ tmp227, *_111
 425              		.loc 1 108 17 is_stmt 1 view .LVU88
 426              	.LVL17:
  90:armwave.c     ****                 
 427              		.loc 1 90 17 view .LVU89
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 428              		.loc 1 102 17 view .LVU90
 107:armwave.c     ****                 word >>= 8;
 429              		.loc 1 107 17 view .LVU91
 430              	@ armwave.c:108:                 word >>= 8;
 431              		.loc 1 108 22 is_stmt 0 view .LVU92
 432 01a8 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 433              	.LVL18:
 434              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 435              		.loc 1 107 47 view .LVU93
 436 01ac B10094E1 		ldrh	r0, [r4, r1]	@ *_137, *_137
 437 01b0 8220A0E1 		lsl	r2, r2, #1	@ tmp241, word,
 438              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 439              		.loc 1 102 30 view .LVU94
 440 01b4 8CC084E0 		add	ip, r4, ip, lsl #1	@ write_buffer, write_buffer_base, tmp238,
 441              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 442              		.loc 1 107 47 view .LVU95
 443 01b8 010080E2 		add	r0, r0, #1	@ tmp236, *_137,
 444 01bc B10084E1 		strh	r0, [r4, r1]	@ movhi	@ tmp236, *_137
 445              		.loc 1 108 17 is_stmt 1 view .LVU96
 446              	.LVL19:
  90:armwave.c     ****                 
 447              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 448              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 449              		.loc 1 107 17 view .LVU99
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 is_stmt 0 view .LVU100
 452 01c0 B2109CE1 		ldrh	r1, [ip, r2]	@ *_163, *_163
 453              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 454              		.loc 1 84 9 view .LVU101
 455 01c4 080089E0 		add	r0, r9, r8	@ tmp245, ivtmp.53, ivtmp.45
 456 01c8 000056E1 		cmp	r6, r0	@ height, tmp245
 457              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 458              		.loc 1 107 47 view .LVU102
 459 01cc 011081E2 		add	r1, r1, #1	@ tmp244, *_163,
 460 01d0 033087E0 		add	r3, r7, r3	@ ivtmp.46, _75, _154
 461              	.LVL20:
 107:armwave.c     ****                 word >>= 8;
 462              		.loc 1 107 47 view .LVU103
 463 01d4 B2108CE1 		strh	r1, [ip, r2]	@ movhi	@ tmp244, *_163
 464              		.loc 1 108 17 is_stmt 1 view .LVU104
 465              	.LVL21:
 466              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 467              		.loc 1 84 9 is_stmt 0 view .LVU105
 468 01d8 D8FFFF8A 		bhi	.L14		@,
 469              	.LVL22:
 470              	.L13:
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 discriminator 2 view .LVU106
 473 01dc 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 474              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 475              		.loc 1 79 5 discriminator 2 view .LVU107
 476 01e0 20209DE5 		ldr	r2, [sp, #32]	@ _82, %sfp
 477              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 478              		.loc 1 79 44 discriminator 2 view .LVU108
 479 01e4 013083E2 		add	r3, r3, #1	@ w, w,
 480 01e8 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 481              	.LVL23:
 482              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 discriminator 2 view .LVU109
 484 01ec 020053E1 		cmp	r3, r2	@ w, _82
 485 01f0 24309DE5 		ldr	r3, [sp, #36]	@ _266, %sfp
 486              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 487              		.loc 1 79 5 discriminator 2 view .LVU110
 488 01f4 03A08AE0 		add	r10, r10, r3	@ ivtmp.52, ivtmp.52, _266
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 79 5 discriminator 2 view .LVU111
 490 01f8 039049E0 		sub	r9, r9, r3	@ ivtmp.53, ivtmp.53, _266
 491 01fc CBFFFF1A 		bne	.L15		@,
 492 0200 0C50A0E1 		mov	r5, ip	@ write_buffer, write_buffer
 493              	.LVL25:
 494              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 495              		.loc 1 113 5 is_stmt 1 view .LVU112
 496              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 497              		.loc 1 113 40 is_stmt 0 view .LVU113
 498 0204 041045E0 		sub	r1, r5, r4	@ tmp246, write_buffer, write_buffer_base
 499              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 500              		.loc 1 113 5 view .LVU114
 501 0208 14009FE5 		ldr	r0, .L22+8	@,
 502 020c C110A0E1 		asr	r1, r1, #1	@, tmp246,
 503              	@ armwave.c:114: }
 114:armwave.c     **** }
 504              		.loc 1 114 1 view .LVU115
 505 0210 2CD08DE2 		add	sp, sp, #44	@,,
 506              		.cfi_def_cfa_offset 36
 507              		@ sp needed	@
 508 0214 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_restore 14
 510              		.cfi_restore 11
 511              		.cfi_restore 10
 512              		.cfi_restore 9
 513              		.cfi_restore 8
 514              		.cfi_restore 7
 515              		.cfi_restore 6
 516              		.cfi_restore 5
 517              		.cfi_restore 4
 518              		.cfi_def_cfa_offset 0
 519              	.LVL26:
 520              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 521              		.loc 1 113 5 view .LVU116
 522 0218 FEFFFFEA 		b	printf		@
 523              	.LVL27:
 524              	.L23:
 525              		.align	2
 526              	.L22:
 527 021c 00000000 		.word	g_armwave_state
 528 0220 20000000 		.word	.LC2
 529 0224 78000000 		.word	.LC3
 530              		.cfi_endproc
 531              	.LFE59:
 533              		.align	2
 534              		.global	armwave_fill_pixbuf_scaled
 535              		.syntax unified
 536              		.arm
 537              		.fpu vfp
 539              	armwave_fill_pixbuf_scaled:
 540              	.LVL28:
 541              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 542              		.loc 1 121 1 is_stmt 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 24
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 546              		.loc 1 122 5 view .LVU118
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 547              		.loc 1 124 5 view .LVU119
 125:armwave.c     ****     uint8_t r, g, b;
 548              		.loc 1 125 5 view .LVU120
 126:armwave.c     ****     int value; 
 549              		.loc 1 126 5 view .LVU121
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 128 5 view .LVU122
 551              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 552              		.loc 1 121 1 is_stmt 0 view .LVU123
 553 0228 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 565              		.loc 1 132 5 view .LVU124
 566 022c 0010A0E1 		mov	r1, r0	@, out_buffer
 567              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 568              		.loc 1 128 15 view .LVU125
 569 0230 AC719FE5 		ldr	r7, .L46	@ tmp194,
 570              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 571              		.loc 1 121 1 view .LVU126
 572 0234 00A0A0E1 		mov	r10, r0	@ out_buffer, out_buffer
 573 0238 34D04DE2 		sub	sp, sp, #52	@,,
 574              		.cfi_def_cfa_offset 88
 575              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 576              		.loc 1 132 5 view .LVU127
 577 023c A4019FE5 		ldr	r0, .L46+4	@,
 578              	.LVL29:
 579              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 580              		.loc 1 128 15 view .LVU128
 581 0240 04B097E5 		ldr	fp, [r7, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 582              	.LVL30:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 583              		.loc 1 129 5 is_stmt 1 view .LVU129
 130:armwave.c     **** 
 584              		.loc 1 130 5 view .LVU130
 585              		.loc 1 132 5 view .LVU131
 586 0244 FEFFFFEB 		bl	printf		@
 587              	.LVL31:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 588              		.loc 1 134 5 view .LVU132
 589              	@ armwave.c:134:     if(out_buffer == NULL)
 590              		.loc 1 134 7 is_stmt 0 view .LVU133
 591 0248 00005AE3 		cmp	r10, #0	@ out_buffer,
 592 024c 2500000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 593              		.loc 1 137 5 is_stmt 1 view .LVU134
 594              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 595              		.loc 1 137 27 is_stmt 0 view .LVU135
 596 0250 583097E5 		ldr	r3, [r7, #88]	@ _1, g_armwave_state.target_width
 597              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack ~0
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 598              		.loc 1 140 38 view .LVU136
 599 0254 5C1097E5 		ldr	r1, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 600              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 601              		.loc 1 137 10 view .LVU137
 602 0258 402097E5 		ldr	r2, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 603              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 604              		.loc 1 139 5 view .LVU138
 605 025c 2C008DE2 		add	r0, sp, #44	@ tmp162,,
 606              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 607              		.loc 1 140 38 view .LVU139
 608 0260 910301E0 		mul	r1, r1, r3	@ tmp158, g_armwave_state.target_height, _1
 609              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 610              		.loc 1 137 10 view .LVU140
 611 0264 920304E0 		mul	r4, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 612              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 613              		.loc 1 139 5 view .LVU141
 614 0268 0111A0E1 		lsl	r1, r1, #2	@, tmp158,
 615 026c 0420A0E1 		mov	r2, r4	@, npix
 616 0270 08008DE5 		str	r0, [sp, #8]	@ tmp162,
 617 0274 503097E5 		ldr	r3, [r7, #80]	@, g_armwave_state.ch_buff_size
 618 0278 04A08DE5 		str	r10, [sp, #4]	@ out_buffer,
 619 027c 00B08DE5 		str	fp, [sp]	@ base_32ptr,
 620 0280 64019FE5 		ldr	r0, .L46+8	@,
 621              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 622              		.loc 1 137 10 view .LVU142
 623 0284 1C408DE5 		str	r4, [sp, #28]	@ npix, %sfp
 624              	.LVL32:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 625              		.loc 1 139 5 is_stmt 1 view .LVU143
 626 0288 FEFFFFEB 		bl	printf		@
 627              	.LVL33:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 628              		.loc 1 144 5 view .LVU144
 629              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 630              		.loc 1 144 59 is_stmt 0 view .LVU145
 631 028c 583097E5 		ldr	r3, [r7, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 632 0290 5C2097E5 		ldr	r2, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 633              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 634              		.loc 1 144 5 view .LVU146
 635 0294 0010A0E3 		mov	r1, #0	@,
 636 0298 0A00A0E1 		mov	r0, r10	@, out_buffer
 637              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 638              		.loc 1 144 59 view .LVU147
 639 029c 920302E0 		mul	r2, r2, r3	@ tmp165, g_armwave_state.target_height, g_armwave_state.target_width
 640              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 641              		.loc 1 144 5 view .LVU148
 642 02a0 0221A0E1 		lsl	r2, r2, #2	@, tmp165,
 643 02a4 FEFFFFEB 		bl	memset		@
 644              	.LVL34:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 645              		.loc 1 146 5 is_stmt 1 view .LVU149
 646 02a8 40019FE5 		ldr	r0, .L46+12	@,
 647 02ac FEFFFFEB 		bl	puts		@
 648              	.LVL35:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 649              		.loc 1 148 5 view .LVU150
 650              		.loc 1 148 5 is_stmt 0 view .LVU151
 651 02b0 000054E3 		cmp	r4, #0	@ npix,
 652 02b4 470000DA 		ble	.L34		@,
 653              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 654              		.loc 1 148 11 view .LVU152
 655 02b8 0060A0E3 		mov	r6, #0	@ n,
 656              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 657              		.loc 1 122 46 view .LVU153
 658 02bc 20608DE5 		str	r6, [sp, #32]	@ n, %sfp
 659              	.LVL36:
 660              	.L33:
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         //wave_word = 0x12345678;
 151:armwave.c     ****         wave_word = *base_32ptr++;
 661              		.loc 1 151 9 is_stmt 1 view .LVU154
 662              	@ armwave.c:151:         wave_word = *base_32ptr++;
 663              		.loc 1 151 19 is_stmt 0 view .LVU155
 664 02c0 04809BE4 		ldr	r8, [fp], #4	@ wave_word, MEM[base: base_32ptr_58, offset: 4294967292B]
 665              	.LVL37:
 152:armwave.c     **** 
 153:armwave.c     ****         /*
 154:armwave.c     ****         if(n % 200 == 0) {
 155:armwave.c     ****            printf("%d\n", n);
 156:armwave.c     ****         }
 157:armwave.c     ****         */
 158:armwave.c     **** 
 159:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 666              		.loc 1 159 9 is_stmt 1 view .LVU156
 667              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 668              		.loc 1 159 11 is_stmt 0 view .LVU157
 669 02c4 000058E3 		cmp	r8, #0	@ wave_word,
 670 02c8 0800001A 		bne	.L44		@,
 671              	.LVL38:
 672              	.L28:
 673              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 674              		.loc 1 148 5 discriminator 2 view .LVU158
 675 02cc 1C309DE5 		ldr	r3, [sp, #28]	@ npix, %sfp
 676              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 677              		.loc 1 148 28 discriminator 2 view .LVU159
 678 02d0 026086E2 		add	r6, r6, #2	@ n, n,
 679              	.LVL39:
 680              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 681              		.loc 1 148 5 discriminator 2 view .LVU160
 682 02d4 060053E1 		cmp	r3, r6	@ npix, n
 683 02d8 F8FFFFCA 		bgt	.L33		@,
 684              	.LVL40:
 685              	.L27:
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 161:armwave.c     ****                 value = wave_word & 0xffff;
 162:armwave.c     ****                 wave_word >>= 16;
 163:armwave.c     **** 
 164:armwave.c     ****                 if(value != 0) {
 165:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 166:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 167:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 168:armwave.c     **** 
 169:armwave.c     ****                     r = MIN(rr, 255);
 170:armwave.c     ****                     g = MIN(gg, 255);
 171:armwave.c     ****                     b = MIN(bb, 255);
 172:armwave.c     **** 
 173:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 174:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 175:armwave.c     **** 
 176:armwave.c     ****                     // Plot the pixels
 177:armwave.c     ****                     nsub = n + w;
 178:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 180:armwave.c     ****                     xx = (nsub >> 8) / 2;
 181:armwave.c     **** 
 182:armwave.c     ****                     for(y = yy; y < ye; y++) {
 183:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 184:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 185:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 186:armwave.c     ****                         painted++;
 187:armwave.c     ****                     }
 188:armwave.c     ****                 }
 189:armwave.c     ****             }
 190:armwave.c     ****         }
 191:armwave.c     ****     }
 192:armwave.c     **** 
 193:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 686              		.loc 1 193 5 is_stmt 1 view .LVU161
 687 02dc 20109DE5 		ldr	r1, [sp, #32]	@, %sfp
 688 02e0 0C019FE5 		ldr	r0, .L46+16	@,
 689 02e4 FEFFFFEB 		bl	printf		@
 690              	.LVL41:
 691              	.L24:
 692              	@ armwave.c:194: }
 194:armwave.c     **** }
 693              		.loc 1 194 1 is_stmt 0 view .LVU162
 694 02e8 34D08DE2 		add	sp, sp, #52	@,,
 695              		.cfi_remember_state
 696              		.cfi_def_cfa_offset 36
 697              		@ sp needed	@
 698 02ec F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 699              	.LVL42:
 700              	.L44:
 701              		.cfi_restore_state
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 702              		.loc 1 160 13 is_stmt 1 view .LVU163
 703              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 704              		.loc 1 160 26 is_stmt 0 view .LVU164
 705 02f0 0030A0E3 		mov	r3, #0	@ _32,
 706              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 707              		.loc 1 160 19 view .LVU165
 708 02f4 2C308DE5 		str	r3, [sp, #44]	@ tmp218, w
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 709              		.loc 1 160 19 view .LVU166
 710 02f8 24B08DE5 		str	fp, [sp, #36]	@ base_32ptr, %sfp
 711 02fc 030000EA 		b	.L32		@
 712              	.LVL43:
 713              	.L29:
 714              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 715              		.loc 1 160 32 discriminator 2 view .LVU167
 716 0300 013083E2 		add	r3, r3, #1	@ _32, _32,
 717              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 718              		.loc 1 160 13 discriminator 2 view .LVU168
 719 0304 010053E3 		cmp	r3, #1	@ _32,
 720              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 721              		.loc 1 160 32 discriminator 2 view .LVU169
 722 0308 2C308DE5 		str	r3, [sp, #44]	@ _32, w
 723              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 724              		.loc 1 160 13 discriminator 2 view .LVU170
 725 030c 2F0000CA 		bgt	.L45		@,
 726              	.L32:
 161:armwave.c     ****                 wave_word >>= 16;
 727              		.loc 1 161 17 is_stmt 1 view .LVU171
 728              	@ armwave.c:161:                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 729              		.loc 1 161 23 is_stmt 0 view .LVU172
 730 0310 7820FFE6 		uxth	r2, r8	@ value, wave_word
 731              	.LVL44:
 162:armwave.c     **** 
 732              		.loc 1 162 17 is_stmt 1 view .LVU173
 733              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 164 19 is_stmt 0 view .LVU174
 735 0314 000052E3 		cmp	r2, #0	@ value,
 736              	@ armwave.c:162:                 wave_word >>= 16;
 162:armwave.c     **** 
 737              		.loc 1 162 27 view .LVU175
 738 0318 2888A0E1 		lsr	r8, r8, #16	@ wave_word, wave_word,
 739              	.LVL45:
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 740              		.loc 1 164 17 is_stmt 1 view .LVU176
 741              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 164 19 is_stmt 0 view .LVU177
 743 031c F7FFFF0A 		beq	.L29		@,
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 744              		.loc 1 165 21 is_stmt 1 view .LVU178
 745              	.LVL46:
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 746              		.loc 1 166 21 view .LVU179
 167:armwave.c     **** 
 747              		.loc 1 167 21 view .LVU180
 169:armwave.c     ****                     g = MIN(gg, 255);
 748              		.loc 1 169 21 view .LVU181
 170:armwave.c     ****                     b = MIN(bb, 255);
 749              		.loc 1 170 21 view .LVU182
 171:armwave.c     **** 
 750              		.loc 1 171 21 view .LVU183
 174:armwave.c     **** 
 751              		.loc 1 174 21 view .LVU184
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 752              		.loc 1 177 21 view .LVU185
 753              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 754              		.loc 1 177 26 is_stmt 0 view .LVU186
 755 0320 065083E0 		add	r5, r3, r6	@ nsub, _32, n
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 756              		.loc 1 178 21 is_stmt 1 view .LVU187
 757              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 178 57 is_stmt 0 view .LVU188
 759 0324 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_108, g_armwave_state.vscale_frac
 760              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 761              		.loc 1 178 32 view .LVU189
 762 0328 7520EFE6 		uxtb	r2, r5	@ _17, nsub
 763              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 764              		.loc 1 179 41 view .LVU190
 765 032c 011082E2 		add	r1, r2, #1	@ tmp179, _17,
 766              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 767              		.loc 1 178 40 view .LVU191
 768 0330 902A07EE 		vmov	s15, r2	@ int	@ _17, _17
 769              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 770              		.loc 1 179 41 view .LVU192
 771 0334 901A06EE 		vmov	s13, r1	@ int	@ tmp179, tmp179
 772              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 773              		.loc 1 180 32 view .LVU193
 774 0338 4554A0E1 		asr	r5, r5, #8	@ tmp182, nsub,
 775              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 776              		.loc 1 178 40 view .LVU194
 777 033c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp177, _17
 778              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 779              		.loc 1 179 46 view .LVU195
 780 0340 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp180, tmp179
 781              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 782              		.loc 1 180 38 view .LVU196
 783 0344 A55F85E0 		add	r5, r5, r5, lsr #31	@ tmp184, tmp182, tmp182,
 784 0348 C550A0E1 		asr	r5, r5, #1	@ xx, tmp184,
 785              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 786              		.loc 1 178 40 view .LVU197
 787 034c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp178, tmp177, pretmp_108
 788              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 789              		.loc 1 179 46 view .LVU198
 790 0350 876A66EE 		vmul.f32	s13, s13, s14	@ tmp181, tmp180, pretmp_108
 791              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 792              		.loc 1 178 24 view .LVU199
 793 0354 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp178
 794 0358 90BA17EE 		vmov	fp, s15	@ int	@ yy, yy
 795              	.LVL47:
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 796              		.loc 1 179 21 is_stmt 1 view .LVU200
 797              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 798              		.loc 1 179 24 is_stmt 0 view .LVU201
 799 035c E67AFCEE 		vcvt.u32.f32	s15, s13	@ ye, tmp181
 800 0360 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 801              	.LVL48:
 180:armwave.c     **** 
 802              		.loc 1 180 21 is_stmt 1 view .LVU202
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 803              		.loc 1 182 21 view .LVU203
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 804              		.loc 1 182 21 is_stmt 0 view .LVU204
 805 0364 09005BE1 		cmp	fp, r9	@ yy, ye
 806 0368 E4FFFF2A 		bcs	.L29		@,
 807 036c 0B40A0E1 		mov	r4, fp	@ y, yy
 808 0370 000000EA 		b	.L31		@
 809              	.LVL49:
 810              	.L30:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 811              		.loc 1 182 21 view .LVU205
 812 0374 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_108, g_armwave_state.vscale_frac
 813              	.L31:
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 814              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU206
 815              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 816              		.loc 1 184 25 is_stmt 0 discriminator 3 view .LVU207
 817 0378 C77AB7EE 		vcvt.f64.f32	d7, s14	@ tmp190, pretmp_108
 818              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 819              		.loc 1 183 60 discriminator 3 view .LVU208
 820 037c 582097E5 		ldr	r2, [r7, #88]	@ _26, g_armwave_state.target_width
 821              	.LVL50:
 184:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 822              		.loc 1 184 25 is_stmt 1 discriminator 3 view .LVU209
 823 0380 50008DE8 		stm	sp, {r4, r6}	@,,
 824 0384 08208DE5 		str	r2, [sp, #8]	@ _26,
 825 0388 0530A0E1 		mov	r3, r5	@, xx
 826 038c 945222E0 		mla	r2, r4, r2, r5	@, y, _26, xx
 827              	.LVL51:
 184:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 828              		.loc 1 184 25 is_stmt 0 discriminator 3 view .LVU210
 829 0390 0A10A0E1 		mov	r1, r10	@, out_buffer
 830 0394 047B8DED 		vstr.64	d7, [sp, #16]	@ tmp190,
 831              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 832              		.loc 1 182 42 discriminator 3 view .LVU211
 833 0398 014084E2 		add	r4, r4, #1	@ y, y,
 834              	.LVL52:
 835              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         //*(out_buffer_base + offset) = word;
 836              		.loc 1 184 25 discriminator 3 view .LVU212
 837 039c 54009FE5 		ldr	r0, .L46+20	@,
 838 03a0 FEFFFFEB 		bl	printf		@
 839              	.LVL53:
 186:armwave.c     ****                     }
 840              		.loc 1 186 25 is_stmt 1 discriminator 3 view .LVU213
 841              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 842              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU214
 843 03a4 040059E1 		cmp	r9, r4	@ ye, y
 844 03a8 F1FFFF1A 		bne	.L30		@,
 845 03ac 20309DE5 		ldr	r3, [sp, #32]	@ painted, %sfp
 846 03b0 0B9049E0 		sub	r9, r9, fp	@ tmp191, ye, yy
 847              	.LVL54:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 848              		.loc 1 182 21 discriminator 3 view .LVU215
 849 03b4 093083E0 		add	r3, r3, r9	@ painted, painted, tmp191
 850 03b8 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 851 03bc 2C309DE5 		ldr	r3, [sp, #44]	@ _32, w
 852              	.LVL55:
 853              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 854              		.loc 1 160 32 view .LVU216
 855 03c0 013083E2 		add	r3, r3, #1	@ _32, _32,
 856              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 857              		.loc 1 160 13 view .LVU217
 858 03c4 010053E3 		cmp	r3, #1	@ _32,
 859              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 860              		.loc 1 160 32 view .LVU218
 861 03c8 2C308DE5 		str	r3, [sp, #44]	@ _32, w
 862              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 863              		.loc 1 160 13 view .LVU219
 864 03cc CFFFFFDA 		ble	.L32		@,
 865              	.LVL56:
 866              	.L45:
 160:armwave.c     ****                 value = wave_word & 0xffff;
 867              		.loc 1 160 13 view .LVU220
 868 03d0 24B09DE5 		ldr	fp, [sp, #36]	@ base_32ptr, %sfp
 869 03d4 BCFFFFEA 		b	.L28		@
 870              	.LVL57:
 871              	.L34:
 872              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 873              		.loc 1 122 46 view .LVU221
 874 03d8 0030A0E3 		mov	r3, #0	@ painted,
 875 03dc 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 876 03e0 BDFFFFEA 		b	.L27		@
 877              	.L47:
 878              		.align	2
 879              	.L46:
 880 03e4 00000000 		.word	g_armwave_state
 881 03e8 84000000 		.word	.LC4
 882 03ec 9C000000 		.word	.LC5
 883 03f0 FC000000 		.word	.LC6
 884 03f4 28010000 		.word	.LC8
 885 03f8 04010000 		.word	.LC7
 886              		.cfi_endproc
 887              	.LFE60:
 889              		.global	__aeabi_idiv
 890              		.align	2
 891              		.global	armwave_generate
 892              		.syntax unified
 893              		.arm
 894              		.fpu vfp
 896              	armwave_generate:
 897              	.LFB61:
 195:armwave.c     **** 
 196:armwave.c     **** /*
 197:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 198:armwave.c     ****  */
 199:armwave.c     **** void armwave_generate()
 200:armwave.c     **** {
 898              		.loc 1 200 1 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 201:armwave.c     ****     uint32_t yy;
 902              		.loc 1 201 5 view .LVU223
 202:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 903              		.loc 1 202 5 view .LVU224
 904              	.LVL58:
 203:armwave.c     **** 
 204:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 905              		.loc 1 204 5 view .LVU225
 906              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 907              		.loc 1 200 1 is_stmt 0 view .LVU226
 908 03fc F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 909              		.cfi_def_cfa_offset 20
 910              		.cfi_offset 4, -20
 911              		.cfi_offset 5, -16
 912              		.cfi_offset 6, -12
 913              		.cfi_offset 7, -8
 914              		.cfi_offset 14, -4
 915              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 916              		.loc 1 204 5 view .LVU227
 917 0400 0010A0E3 		mov	r1, #0	@,
 918              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 919              		.loc 1 204 58 view .LVU228
 920 0404 84509FE5 		ldr	r5, .L56	@ tmp154,
 921              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 922              		.loc 1 200 1 view .LVU229
 923 0408 0CD04DE2 		sub	sp, sp, #12	@,,
 924              		.cfi_def_cfa_offset 32
 925              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 926              		.loc 1 204 5 view .LVU230
 927 040c 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 928 0410 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 929 0414 FEFFFFEB 		bl	memset		@
 930              	.LVL59:
 205:armwave.c     **** 
 206:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 931              		.loc 1 206 5 is_stmt 1 view .LVU231
 932              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 933              		.loc 1 206 68 is_stmt 0 view .LVU232
 934 0418 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 935              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 936              		.loc 1 206 51 view .LVU233
 937 041c 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 938 0420 0610A0E1 		mov	r1, r6	@, _13
 939 0424 FEFFFFEB 		bl	__aeabi_idiv		@
 940              	.LVL60:
 941              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 942              		.loc 1 206 5 view .LVU234
 943 0428 000050E3 		cmp	r0, #0	@,
 944 042c 1500000A 		beq	.L48		@,
 945              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 208:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 946              		.loc 1 208 9 view .LVU235
 947 0430 5C709FE5 		ldr	r7, .L56+4	@ tmp155,
 948              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 949              		.loc 1 206 12 view .LVU236
 950 0434 0040A0E3 		mov	r4, #0	@ yy,
 951              	.LVL61:
 952              	.L50:
 953              		.loc 1 208 9 is_stmt 1 discriminator 3 view .LVU237
 954 0438 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 955              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 209:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 210:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 956              		.loc 1 210 48 is_stmt 0 discriminator 3 view .LVU238
 957 043c 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 958              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 959              		.loc 1 208 9 discriminator 3 view .LVU239
 960 0440 0630A0E1 		mov	r3, r6	@, _13
 961 0444 0120A0E1 		mov	r2, r1	@, _5
 962              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 963              		.loc 1 210 48 discriminator 3 view .LVU240
 964 0448 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 965              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 966              		.loc 1 208 9 discriminator 3 view .LVU241
 967 044c 0700A0E1 		mov	r0, r7	@, tmp155
 968 0450 0410A0E1 		mov	r1, r4	@, yy
 969 0454 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 970 0458 00C08DE5 		str	ip, [sp]	@ tmp145,
 971 045c FEFFFFEB 		bl	printf		@
 972              	.LVL62:
 211:armwave.c     **** 
 212:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 973              		.loc 1 212 9 is_stmt 1 discriminator 3 view .LVU242
 974              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 975              		.loc 1 212 62 is_stmt 0 discriminator 3 view .LVU243
 976 0460 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 977              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 978              		.loc 1 212 9 discriminator 3 view .LVU244
 979 0464 940100E0 		mul	r0, r4, r1	@, yy,
 980 0468 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 981              	.LVL63:
 213:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 982              		.loc 1 213 9 is_stmt 1 discriminator 3 view .LVU245
 214:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 983              		.loc 1 214 9 discriminator 3 view .LVU246
 984              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 985              		.loc 1 206 68 is_stmt 0 discriminator 3 view .LVU247
 986 046c 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 987              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 988              		.loc 1 206 51 discriminator 3 view .LVU248
 989 0470 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 990 0474 0610A0E1 		mov	r1, r6	@, _13
 991 0478 FEFFFFEB 		bl	__aeabi_idiv		@
 992              	.LVL64:
 993              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 994              		.loc 1 206 86 discriminator 3 view .LVU249
 995 047c 014084E2 		add	r4, r4, #1	@ yy, yy,
 996              	.LVL65:
 997              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 998              		.loc 1 206 5 discriminator 3 view .LVU250
 999 0480 040050E1 		cmp	r0, r4	@, yy
 1000 0484 EBFFFF8A 		bhi	.L50		@,
 1001              	.LVL66:
 1002              	.L48:
 1003              	@ armwave.c:223: }
 215:armwave.c     ****     }
 216:armwave.c     **** 
 217:armwave.c     ****     /*
 218:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 219:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 220:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 221:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 222:armwave.c     ****     */
 223:armwave.c     **** }
 1004              		.loc 1 223 1 view .LVU251
 1005 0488 0CD08DE2 		add	sp, sp, #12	@,,
 1006              		.cfi_def_cfa_offset 20
 1007              		@ sp needed	@
 1008 048c F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1009              	.L57:
 1010              		.align	2
 1011              	.L56:
 1012 0490 00000000 		.word	g_armwave_state
 1013 0494 44010000 		.word	.LC9
 1014              		.cfi_endproc
 1015              	.LFE61:
 1017              		.align	2
 1018              		.global	armwave_setup_render
 1019              		.syntax unified
 1020              		.arm
 1021              		.fpu vfp
 1023              	armwave_setup_render:
 1024              	.LVL67:
 1025              	.LFB62:
 224:armwave.c     **** 
 225:armwave.c     **** /*
 226:armwave.c     ****  * Setup the renderer with passed parameters.
 227:armwave.c     ****  */
 228:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 229:armwave.c     **** {
 1026              		.loc 1 229 1 is_stmt 1 view -0
 1027              		.cfi_startproc
 1028              		@ args = 12, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 230:armwave.c     ****     uint32_t length, xx;
 1030              		.loc 1 230 5 view .LVU253
 231:armwave.c     ****     float points_per_pixel;
 1031              		.loc 1 231 5 view .LVU254
 232:armwave.c     **** 
 233:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1032              		.loc 1 233 5 view .LVU255
 1033              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1034              		.loc 1 229 1 is_stmt 0 view .LVU256
 1035 0498 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1036              		.cfi_def_cfa_offset 28
 1037              		.cfi_offset 4, -28
 1038              		.cfi_offset 5, -24
 1039              		.cfi_offset 6, -20
 1040              		.cfi_offset 7, -16
 1041              		.cfi_offset 8, -12
 1042              		.cfi_offset 9, -8
 1043              		.cfi_offset 14, -4
 1044 049c 14D04DE2 		sub	sp, sp, #20	@,,
 1045              		.cfi_def_cfa_offset 48
 1046              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1047              		.loc 1 229 1 view .LVU257
 1048 04a0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1049 04a4 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1050 04a8 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1051 04ac 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1052              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1053              		.loc 1 233 5 view .LVU258
 1054 04b0 00308DE5 		str	r3, [sp]	@ wave_stride,
 1055              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1056              		.loc 1 229 1 view .LVU259
 1057 04b4 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1058 04b8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1059              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1060              		.loc 1 233 5 view .LVU260
 1061 04bc F460CDE1 		strd	r6, [sp, #4]	@,,
 1062 04c0 0230A0E1 		mov	r3, r2	@, waves_max
 1063              	.LVL68:
 1064              		.loc 1 233 5 view .LVU261
 1065 04c4 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1066 04c8 0120A0E1 		mov	r2, r1	@, end_point
 1067              	.LVL69:
 1068              		.loc 1 233 5 view .LVU262
 1069 04cc 0010A0E1 		mov	r1, r0	@, start_point
 1070              	.LVL70:
 1071              		.loc 1 233 5 view .LVU263
 1072 04d0 8C019FE5 		ldr	r0, .L68+12	@,
 1073              	.LVL71:
 1074              		.loc 1 233 5 view .LVU264
 1075 04d4 FEFFFFEB 		bl	printf		@
 1076              	.LVL72:
 234:armwave.c     **** 
 235:armwave.c     ****     // TODO these asserts should instead raise PyExc
 236:armwave.c     ****     assert(start_point < end_point);
 1077              		.loc 1 236 5 is_stmt 1 view .LVU265
 1078 04d8 050054E1 		cmp	r4, r5	@ start_point, end_point
 1079 04dc 5100002A 		bcs	.L66		@,
 237:armwave.c     **** 
 238:armwave.c     ****     /*
 239:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 240:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 241:armwave.c     ****     if(target_height == 256) {
 242:armwave.c     ****         g_armwave_state.row_shift = 8;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 244:armwave.c     ****     } else if(target_height == 512) {
 245:armwave.c     ****         g_armwave_state.row_shift = 9;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 247:armwave.c     ****     } else if(target_height == 1024) {
 248:armwave.c     ****         g_armwave_state.row_shift = 10;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 250:armwave.c     ****     } else if(target_height == 2048) {
 251:armwave.c     ****         g_armwave_state.row_shift = 11;
 252:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 253:armwave.c     ****     }
 254:armwave.c     ****     */
 255:armwave.c     **** 
 256:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 257:armwave.c     ****     g_armwave_state.xstride = target_height;
 1080              		.loc 1 257 5 view .LVU266
 1081              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 259:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 260:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 261:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 262:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 263:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 264:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 265:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 266:armwave.c     ****     g_armwave_state.target_width = target_width;
 267:armwave.c     ****     g_armwave_state.target_height = target_height;
 268:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1082              		.loc 1 268 45 is_stmt 0 view .LVU267
 1083 04e0 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1084              	.LVL73:
 1085              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 270:armwave.c     ****     // Calculate compound scaler
 271:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 272:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1086              		.loc 1 272 48 view .LVU268
 1087 04e4 5B5A9FED 		vldr.32	s10, .L68	@ tmp187,
 1088 04e8 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1089              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1090              		.loc 1 258 49 view .LVU269
 1091 04ec 5A7A9FED 		vldr.32	s14, .L68+4	@ tmp165,
 1092              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1093              		.loc 1 272 81 view .LVU270
 1094 04f0 5A6A9FED 		vldr.32	s12, .L68+8	@ tmp191,
 1095              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1096              		.loc 1 265 90 view .LVU271
 1097 04f4 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1098              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1099              		.loc 1 272 48 view .LVU272
 1100 04f8 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1101              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1102              		.loc 1 258 49 view .LVU273
 1103 04fc 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1104              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1105              		.loc 1 257 29 view .LVU274
 1106 0500 60419FE5 		ldr	r4, .L68+16	@ tmp222,
 1107              	.LVL74:
 1108              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1109              		.loc 1 263 42 view .LVU275
 1110 0504 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1111              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1112              		.loc 1 258 49 view .LVU276
 1113 0508 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1114              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1115              		.loc 1 265 95 view .LVU277
 1116 050c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1117              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 273:armwave.c     **** 
 274:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1118              		.loc 1 274 5 view .LVU278
 1119 0510 0128A0E3 		mov	r2, #65536	@ tmp194,
 1120              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1121              		.loc 1 272 48 view .LVU279
 1122 0514 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1123              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1124              		.loc 1 274 5 view .LVU280
 1125 0518 04508DE5 		str	r5, [sp, #4]	@ _13,
 1126 051c 00608DE5 		str	r6, [sp]	@ target_width,
 1127              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1128              		.loc 1 265 95 view .LVU281
 1129 0520 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1130              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1131              		.loc 1 257 29 view .LVU282
 1132 0524 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1133              		.loc 1 258 5 is_stmt 1 view .LVU283
 1134              	@ armwave.c:260:     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1135              		.loc 1 260 33 is_stmt 0 view .LVU284
 1136 0528 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1137              	@ armwave.c:261:     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1138              		.loc 1 261 31 view .LVU285
 1139 052c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1140              	@ armwave.c:262:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1141              		.loc 1 262 27 view .LVU286
 1142 0530 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1143              	@ armwave.c:267:     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1144              		.loc 1 267 35 view .LVU287
 1145 0534 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1146              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1147              		.loc 1 274 5 view .LVU288
 1148 0538 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1149              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1150              		.loc 1 264 37 view .LVU289
 1151 053c 022CA0E3 		mov	r2, #512	@ tmp175,
 1152              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1153              		.loc 1 263 26 view .LVU290
 1154 0540 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1155              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1156              		.loc 1 264 37 view .LVU291
 1157 0544 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1158              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1159              		.loc 1 274 5 view .LVU292
 1160 0548 0310A0E1 		mov	r1, r3	@, tmp180
 1161              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1162              		.loc 1 265 34 view .LVU293
 1163 054c 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1164              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1165              		.loc 1 258 49 view .LVU294
 1166 0550 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1167              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1168              		.loc 1 272 40 view .LVU295
 1169 0554 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1170              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 268:armwave.c     **** 
 1171              		.loc 1 268 33 view .LVU296
 1172 0558 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1173              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1174              		.loc 1 274 5 view .LVU297
 1175 055c 08019FE5 		ldr	r0, .L68+20	@,
 1176              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1177              		.loc 1 272 40 view .LVU298
 1178 0560 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1179 0564 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1180              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1181              		.loc 1 259 30 view .LVU299
 1182 0568 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1183              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1184              		.loc 1 258 33 view .LVU300
 1185 056c 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1186              		.loc 1 259 5 is_stmt 1 view .LVU301
 1187              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1188              		.loc 1 272 81 is_stmt 0 view .LVU302
 1189 0570 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1190              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1191              		.loc 1 259 30 view .LVU303
 1192 0574 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1193              		.loc 1 260 5 is_stmt 1 view .LVU304
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1194              		.loc 1 261 5 view .LVU305
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1195              		.loc 1 262 5 view .LVU306
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1196              		.loc 1 263 5 view .LVU307
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1197              		.loc 1 264 5 view .LVU308
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1198              		.loc 1 265 5 view .LVU309
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 1199              		.loc 1 266 5 view .LVU310
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1200              		.loc 1 267 5 view .LVU311
 268:armwave.c     **** 
 1201              		.loc 1 268 5 view .LVU312
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1202              		.loc 1 271 5 view .LVU313
 1203              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1204              		.loc 1 271 42 is_stmt 0 view .LVU314
 1205 0578 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1206 057c 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1207              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1208              		.loc 1 274 5 view .LVU315
 1209 0580 903A17EE 		vmov	r3, s15	@ int	@, _20
 1210              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1211              		.loc 1 271 42 view .LVU316
 1212 0584 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1213              		.loc 1 274 5 is_stmt 1 view .LVU317
 1214 0588 0C20A0E1 		mov	r2, ip	@, tmp3
 1215 058c FEFFFFEB 		bl	printf		@
 1216              	.LVL75:
 275:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 276:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 277:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 278:armwave.c     **** 
 279:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 280:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 282:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1217              		.loc 1 282 5 view .LVU318
 1218              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 283:armwave.c     **** 
 284:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1219              		.loc 1 284 23 is_stmt 0 view .LVU319
 1220 0590 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1221              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1222              		.loc 1 282 34 view .LVU320
 1223 0594 4030A0E3 		mov	r3, #64	@ tmp196,
 1224              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1225              		.loc 1 284 7 view .LVU321
 1226 0598 000050E3 		cmp	r0, #0	@ _21,
 1227              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1228              		.loc 1 282 34 view .LVU322
 1229 059c 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1230              		.loc 1 284 5 is_stmt 1 view .LVU323
 1231              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1232              		.loc 1 284 7 is_stmt 0 view .LVU324
 1233 05a0 0000000A 		beq	.L60		@,
 285:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1234              		.loc 1 285 9 is_stmt 1 view .LVU325
 1235 05a4 FEFFFFEB 		bl	free		@
 1236              	.LVL76:
 1237              	.L60:
 286:armwave.c     **** 
 287:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1238              		.loc 1 287 5 view .LVU326
 1239              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1240              		.loc 1 287 56 is_stmt 0 view .LVU327
 1241 05a8 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1242              	.LVL77:
 1243              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1244              		.loc 1 287 34 view .LVU328
 1245 05ac 0110A0E3 		mov	r1, #1	@,
 1246 05b0 0800A0E1 		mov	r0, r8	@, _22
 1247 05b4 FEFFFFEB 		bl	calloc		@
 1248              	.LVL78:
 1249              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 288:armwave.c     **** 
 289:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1250              		.loc 1 289 7 view .LVU329
 1251 05b8 000050E3 		cmp	r0, #0	@ tmp199,
 1252              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1253              		.loc 1 287 34 view .LVU330
 1254 05bc 0070A0E1 		mov	r7, r0	@ tmp199,
 1255              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1256              		.loc 1 287 32 view .LVU331
 1257 05c0 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1258              		.loc 1 289 5 is_stmt 1 view .LVU332
 1259              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 1260              		.loc 1 289 7 is_stmt 0 view .LVU333
 1261 05c4 1C00000A 		beq	.L67		@,
 290:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 291:armwave.c     ****         exit(-1);
 292:armwave.c     ****     }
 293:armwave.c     **** 
 294:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 295:armwave.c     ****     length = end_point - start_point;
 1262              		.loc 1 295 5 is_stmt 1 view .LVU334
 1263              	.LVL79:
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1264              		.loc 1 296 5 view .LVU335
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1265              		.loc 1 297 5 view .LVU336
 1266              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1267              		.loc 1 296 31 is_stmt 0 view .LVU337
 1268 05c8 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1269              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1270              		.loc 1 296 34 view .LVU338
 1271 05cc 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1272              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1273              		.loc 1 297 60 view .LVU339
 1274 05d0 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1275              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 298:armwave.c     **** 
 299:armwave.c     ****     /*
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     **** 
 302:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 303:armwave.c     **** 
 304:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306:armwave.c     **** 
 307:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 308:armwave.c     ****     }
 309:armwave.c     ****     */
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1276              		.loc 1 311 34 view .LVU340
 1277 05d4 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1278              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1279              		.loc 1 296 31 view .LVU341
 1280 05d8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1281              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1282              		.loc 1 296 34 view .LVU342
 1283 05dc 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1284              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1285              		.loc 1 297 60 view .LVU343
 1286 05e0 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1287              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1288              		.loc 1 311 34 view .LVU344
 1289 05e4 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1290              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1291              		.loc 1 296 22 view .LVU345
 1292 05e8 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1293              	.LVL80:
 1294              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1295              		.loc 1 297 60 view .LVU346
 1296 05ec 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1297              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1298              		.loc 1 297 41 view .LVU347
 1299 05f0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1300 05f4 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1301              		.loc 1 311 5 is_stmt 1 view .LVU348
 1302              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1303              		.loc 1 311 34 is_stmt 0 view .LVU349
 1304 05f8 FEFFFFEB 		bl	malloc		@
 1305              	.LVL81:
 1306              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1307              		.loc 1 313 5 view .LVU350
 1308 05fc 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1309 0600 0710A0E1 		mov	r1, r7	@, tmp199
 1310 0604 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1311 0608 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1312              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1313              		.loc 1 311 34 view .LVU351
 1314 060c 00C0A0E1 		mov	ip, r0	@ tmp215,
 1315              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1316              		.loc 1 313 5 view .LVU352
 1317 0610 0030A0E1 		mov	r3, r0	@, tmp215
 1318              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1319              		.loc 1 311 32 view .LVU353
 1320 0614 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1321              		.loc 1 313 5 is_stmt 1 view .LVU354
 1322 0618 50009FE5 		ldr	r0, .L68+24	@,
 1323              	@ armwave.c:320: }
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****      //malloc_stats();
 320:armwave.c     **** }
 1324              		.loc 1 320 1 is_stmt 0 view .LVU355
 1325 061c 14D08DE2 		add	sp, sp, #20	@,,
 1326              		.cfi_remember_state
 1327              		.cfi_def_cfa_offset 28
 1328              		@ sp needed	@
 1329 0620 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1330              		.cfi_restore 14
 1331              		.cfi_restore 9
 1332              		.cfi_restore 8
 1333              		.cfi_restore 7
 1334              		.cfi_restore 6
 1335              		.cfi_restore 5
 1336              		.cfi_restore 4
 1337              		.cfi_def_cfa_offset 0
 1338              	.LVL82:
 1339              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1340              		.loc 1 313 5 view .LVU356
 1341 0624 FEFFFFEA 		b	printf		@
 1342              	.LVL83:
 1343              	.L66:
 1344              		.cfi_restore_state
 236:armwave.c     **** 
 1345              		.loc 1 236 5 is_stmt 1 discriminator 1 view .LVU357
 1346 0628 44309FE5 		ldr	r3, .L68+28	@,
 1347 062c EC20A0E3 		mov	r2, #236	@,
 1348 0630 40109FE5 		ldr	r1, .L68+32	@,
 1349 0634 40009FE5 		ldr	r0, .L68+36	@,
 1350 0638 FEFFFFEB 		bl	__assert_fail		@
 1351              	.LVL84:
 1352              	.L67:
 290:armwave.c     ****         exit(-1);
 1353              		.loc 1 290 9 view .LVU358
 1354 063c 3C309FE5 		ldr	r3, .L68+40	@ tmp202,
 1355 0640 0820A0E1 		mov	r2, r8	@, _22
 1356 0644 38109FE5 		ldr	r1, .L68+44	@,
 1357 0648 000093E5 		ldr	r0, [r3]	@, stderr
 1358 064c FEFFFFEB 		bl	fprintf		@
 1359              	.LVL85:
 291:armwave.c     ****     }
 1360              		.loc 1 291 9 view .LVU359
 1361 0650 0000E0E3 		mvn	r0, #0	@,
 1362 0654 FEFFFFEB 		bl	exit		@
 1363              	.LVL86:
 1364              	.L69:
 1365              		.align	2
 1366              	.L68:
 1367 0658 0000803F 		.word	1065353216
 1368 065c 00007F43 		.word	1132396544
 1369 0660 00008047 		.word	1199570944
 1370 0664 78010000 		.word	.LC10
 1371 0668 00000000 		.word	g_armwave_state
 1372 066c C8010000 		.word	.LC13
 1373 0670 6C020000 		.word	.LC15
 1374 0674 00000000 		.word	.LANCHOR0
 1375 0678 A4010000 		.word	.LC11
 1376 067c B0010000 		.word	.LC12
 1377 0680 00000000 		.word	stderr
 1378 0684 28020000 		.word	.LC14
 1379              		.cfi_endproc
 1380              	.LFE62:
 1382              		.align	2
 1383              		.global	armwave_set_wave_pointer
 1384              		.syntax unified
 1385              		.arm
 1386              		.fpu vfp
 1388              	armwave_set_wave_pointer:
 1389              	.LVL87:
 1390              	.LFB63:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1391              		.loc 1 327 1 view -0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 0
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1395              		.loc 1 328 5 view .LVU361
 1396 0688 000050E3 		cmp	r0, #0	@ wave_buffer
 1397              		.loc 1 328 5 is_stmt 0 view .LVU362
 1398 068c 0200000A 		beq	.L75		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1399              		.loc 1 329 5 is_stmt 1 view .LVU363
 1400              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1401              		.loc 1 329 33 is_stmt 0 view .LVU364
 1402 0690 1C309FE5 		ldr	r3, .L76	@ tmp115,
 1403 0694 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1404 0698 1EFF2FE1 		bx	lr	@
 1405              	.L75:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1406              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU365
 1407              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1408              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU366
 1409 069c 10402DE9 		push	{r4, lr}	@
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 4, -8
 1412              		.cfi_offset 14, -4
 1413              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1414              		.loc 1 328 5 discriminator 1 view .LVU367
 1415 06a0 522FA0E3 		mov	r2, #328	@,
 1416 06a4 0C309FE5 		ldr	r3, .L76+4	@,
 1417 06a8 0C109FE5 		ldr	r1, .L76+8	@,
 1418 06ac 0C009FE5 		ldr	r0, .L76+12	@,
 1419              	.LVL88:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1420              		.loc 1 328 5 discriminator 1 view .LVU368
 1421 06b0 FEFFFFEB 		bl	__assert_fail		@
 1422              	.LVL89:
 1423              	.L77:
 1424              		.align	2
 1425              	.L76:
 1426 06b4 00000000 		.word	g_armwave_state
 1427 06b8 18000000 		.word	.LANCHOR0+24
 1428 06bc A4010000 		.word	.LC11
 1429 06c0 90020000 		.word	.LC16
 1430              		.cfi_endproc
 1431              	.LFE63:
 1433              		.align	2
 1434              		.global	armwave_set_wave_pointer_as_testbuf
 1435              		.syntax unified
 1436              		.arm
 1437              		.fpu vfp
 1439              	armwave_set_wave_pointer_as_testbuf:
 1440              	.LVL90:
 1441              	.LFB64:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1442              		.loc 1 337 1 is_stmt 1 view -0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 0
 1445              		@ frame_needed = 0, uses_anonymous_args = 0
 1446              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1447              		.loc 1 338 5 view .LVU370
 1448              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1449              		.loc 1 338 29 is_stmt 0 view .LVU371
 1450 06c4 24309FE5 		ldr	r3, .L81	@ tmp117,
 1451              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1452              		.loc 1 338 7 view .LVU372
 1453 06c8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1454 06cc 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1455 06d0 0400003A 		bcc	.L80		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1456              		.loc 1 343 5 is_stmt 1 view .LVU373
 1457              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1458              		.loc 1 343 111 is_stmt 0 view .LVU374
 1459 06d4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1460              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1461              		.loc 1 343 68 view .LVU375
 1462 06d8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1463 06dc 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1464              	.LVL91:
 1465              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1466              		.loc 1 343 33 view .LVU376
 1467 06e0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1468              	@ armwave.c:344: }
 344:armwave.c     **** }
 1469              		.loc 1 344 1 view .LVU377
 1470 06e4 1EFF2FE1 		bx	lr	@
 1471              	.LVL92:
 1472              	.L80:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1473              		.loc 1 339 9 is_stmt 1 view .LVU378
 1474 06e8 04009FE5 		ldr	r0, .L81+4	@,
 1475              	.LVL93:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1476              		.loc 1 339 9 is_stmt 0 view .LVU379
 1477 06ec FEFFFFEA 		b	puts		@
 1478              	.LVL94:
 1479              	.L82:
 1480              		.align	2
 1481              	.L81:
 1482 06f0 00000000 		.word	g_armwave_state
 1483 06f4 A4020000 		.word	.LC17
 1484              		.cfi_endproc
 1485              	.LFE64:
 1487              		.align	2
 1488              		.global	armwave_set_wave_pointer_u32
 1489              		.syntax unified
 1490              		.arm
 1491              		.fpu vfp
 1493              	armwave_set_wave_pointer_u32:
 1494              	.LVL95:
 1495              	.LFB65:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1496              		.loc 1 351 1 is_stmt 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1500              		.loc 1 352 5 view .LVU381
 1501 06f8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1502              		.loc 1 352 5 is_stmt 0 view .LVU382
 1503 06fc 0200000A 		beq	.L88		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1504              		.loc 1 353 5 is_stmt 1 view .LVU383
 1505              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1506              		.loc 1 353 33 is_stmt 0 view .LVU384
 1507 0700 1C309FE5 		ldr	r3, .L89	@ tmp116,
 1508 0704 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1509 0708 1EFF2FE1 		bx	lr	@
 1510              	.L88:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1511              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU385
 1512              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1513              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU386
 1514 070c 10402DE9 		push	{r4, lr}	@
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 4, -8
 1517              		.cfi_offset 14, -4
 1518              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1519              		.loc 1 352 5 discriminator 1 view .LVU387
 1520 0710 162EA0E3 		mov	r2, #352	@,
 1521 0714 0C309FE5 		ldr	r3, .L89+4	@,
 1522 0718 0C109FE5 		ldr	r1, .L89+8	@,
 1523 071c 0C009FE5 		ldr	r0, .L89+12	@,
 1524              	.LVL96:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1525              		.loc 1 352 5 discriminator 1 view .LVU388
 1526 0720 FEFFFFEB 		bl	__assert_fail		@
 1527              	.LVL97:
 1528              	.L90:
 1529              		.align	2
 1530              	.L89:
 1531 0724 00000000 		.word	g_armwave_state
 1532 0728 34000000 		.word	.LANCHOR0+52
 1533 072c A4010000 		.word	.LC11
 1534 0730 E0020000 		.word	.LC18
 1535              		.cfi_endproc
 1536              	.LFE65:
 1538              		.align	2
 1539              		.global	armwave_clear_buffer
 1540              		.syntax unified
 1541              		.arm
 1542              		.fpu vfp
 1544              	armwave_clear_buffer:
 1545              	.LVL98:
 1546              	.LFB66:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1547              		.loc 1 360 1 is_stmt 1 view -0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1552              		.loc 1 362 5 view .LVU390
 1553              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1554              		.loc 1 362 58 is_stmt 0 view .LVU391
 1555 0734 0C309FE5 		ldr	r3, .L92	@ tmp114,
 1556              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1557              		.loc 1 362 5 view .LVU392
 1558 0738 0010A0E3 		mov	r1, #0	@,
 1559 073c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1560 0740 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1561              	.LVL99:
 1562              		.loc 1 362 5 view .LVU393
 1563 0744 FEFFFFEA 		b	memset		@
 1564              	.LVL100:
 1565              	.L93:
 1566              		.align	2
 1567              	.L92:
 1568 0748 00000000 		.word	g_armwave_state
 1569              		.cfi_endproc
 1570              	.LFE66:
 1572              		.align	2
 1573              		.global	armwave_set_channel_colour
 1574              		.syntax unified
 1575              		.arm
 1576              		.fpu vfp
 1578              	armwave_set_channel_colour:
 1579              	.LVL101:
 1580              	.LFB67:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1581              		.loc 1 369 1 is_stmt 1 view -0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1586              		.loc 1 371 5 view .LVU395
 1587 074c 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1588              		.loc 1 373 13 view .LVU396
 1589              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1590              		.loc 1 373 41 is_stmt 0 view .LVU397
 1591 0750 0C009F05 		ldreq	r0, .L96	@ tmp117,
 1592              	.LVL102:
 1593              		.loc 1 373 41 view .LVU398
 1594 0754 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1595              		.loc 1 374 13 is_stmt 1 view .LVU399
 1596              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1597              		.loc 1 374 41 is_stmt 0 view .LVU400
 1598 0758 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1599              		.loc 1 375 13 is_stmt 1 view .LVU401
 1600              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1601              		.loc 1 375 41 is_stmt 0 view .LVU402
 1602 075c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1603              		.loc 1 376 13 is_stmt 1 view .LVU403
 1604              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1605              		.loc 1 378 1 is_stmt 0 view .LVU404
 1606 0760 1EFF2FE1 		bx	lr	@
 1607              	.L97:
 1608              		.align	2
 1609              	.L96:
 1610 0764 00000000 		.word	g_armwave_state
 1611              		.cfi_endproc
 1612              	.LFE67:
 1614              		.align	2
 1615              		.global	armwave_dump_ppm_debug
 1616              		.syntax unified
 1617              		.arm
 1618              		.fpu vfp
 1620              	armwave_dump_ppm_debug:
 1621              	.LVL103:
 1622              	.LFB68:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1623              		.loc 1 384 1 is_stmt 1 view -0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1627              		.loc 1 385 5 view .LVU406
 1628              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1629              		.loc 1 384 1 is_stmt 0 view .LVU407
 1630 0768 0130A0E1 		mov	r3, r1	@ fn, fn
 1631 076c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1632              		.cfi_def_cfa_offset 28
 1633              		.cfi_offset 4, -28
 1634              		.cfi_offset 5, -24
 1635              		.cfi_offset 6, -20
 1636              		.cfi_offset 7, -16
 1637              		.cfi_offset 8, -12
 1638              		.cfi_offset 9, -8
 1639              		.cfi_offset 14, -4
 1640 0770 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1641 0774 0CD04DE2 		sub	sp, sp, #12	@,,
 1642              		.cfi_def_cfa_offset 40
 1643              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1644              		.loc 1 385 16 view .LVU408
 1645 0778 C4109FE5 		ldr	r1, .L106	@,
 1646              	.LVL104:
 1647              		.loc 1 385 16 view .LVU409
 1648 077c 0300A0E1 		mov	r0, r3	@, fn
 1649              	.LVL105:
 1650              		.loc 1 385 16 view .LVU410
 1651 0780 FEFFFFEB 		bl	fopen64		@
 1652              	.LVL106:
 1653              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1654              		.loc 1 392 5 view .LVU411
 1655 0784 BC609FE5 		ldr	r6, .L106+4	@ tmp150,
 1656              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1657              		.loc 1 391 5 view .LVU412
 1658 0788 0320A0E3 		mov	r2, #3	@,
 1659 078c 0110A0E3 		mov	r1, #1	@,
 1660              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1661              		.loc 1 385 16 view .LVU413
 1662 0790 0070A0E1 		mov	r7, r0	@ fp,
 1663              	.LVL107:
 386:armwave.c     ****     uint32_t data;
 1664              		.loc 1 386 5 is_stmt 1 view .LVU414
 387:armwave.c     **** 
 1665              		.loc 1 387 5 view .LVU415
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1666              		.loc 1 391 5 view .LVU416
 1667 0794 0030A0E1 		mov	r3, r0	@, fp
 1668 0798 AC009FE5 		ldr	r0, .L106+8	@,
 1669              	.LVL108:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1670              		.loc 1 391 5 is_stmt 0 view .LVU417
 1671 079c FEFFFFEB 		bl	fwrite		@
 1672              	.LVL109:
 1673              		.loc 1 392 5 is_stmt 1 view .LVU418
 1674 07a0 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1675 07a4 A4109FE5 		ldr	r1, .L106+12	@,
 1676 07a8 0700A0E1 		mov	r0, r7	@, fp
 1677 07ac FEFFFFEB 		bl	fprintf		@
 1678              	.LVL110:
 393:armwave.c     ****     fputs("255\n", fp);
 1679              		.loc 1 393 5 view .LVU419
 1680 07b0 0420A0E3 		mov	r2, #4	@,
 1681 07b4 0730A0E1 		mov	r3, r7	@, fp
 1682 07b8 0110A0E3 		mov	r1, #1	@,
 1683 07bc 90009FE5 		ldr	r0, .L106+16	@,
 1684 07c0 FEFFFFEB 		bl	fwrite		@
 1685              	.LVL111:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1686              		.loc 1 395 5 view .LVU420
 1687              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1688              		.loc 1 395 37 is_stmt 0 view .LVU421
 1689 07c4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1690              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1691              		.loc 1 395 5 view .LVU422
 1692 07c8 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1693 07cc 180000DA 		ble	.L99		@,
 1694 07d0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1695              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1696              		.loc 1 400 13 view .LVU423
 1697 07d4 7C909FE5 		ldr	r9, .L106+20	@ tmp152,
 1698              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1699              		.loc 1 395 12 view .LVU424
 1700 07d8 0050A0E3 		mov	r5, #0	@ yy,
 1701              	.LVL112:
 1702              	.L100:
 1703              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1704              		.loc 1 396 9 view .LVU425
 1705 07dc 000053E3 		cmp	r3, #0	@ _13,
 1706              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1707              		.loc 1 396 16 view .LVU426
 1708 07e0 0040A0C3 		movgt	r4, #0	@ xx,
 1709              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1710              		.loc 1 396 9 view .LVU427
 1711 07e4 0F0000DA 		ble	.L102		@,
 1712              	.LVL113:
 1713              	.L101:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1714              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU428
 1715              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1716              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU429
 1717 07e8 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1718              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1719              		.loc 1 400 13 discriminator 3 view .LVU430
 1720 07ec 0910A0E1 		mov	r1, r9	@, tmp152
 1721 07f0 0700A0E1 		mov	r0, r7	@, fp
 1722              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1723              		.loc 1 397 18 discriminator 3 view .LVU431
 1724 07f4 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1725              	.LVL114:
 1726              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU432
 1727              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1728              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU433
 1729 07f8 014084E2 		add	r4, r4, #1	@ xx, xx,
 1730              	.LVL115:
 1731              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1732              		.loc 1 400 81 discriminator 3 view .LVU434
 1733 07fc 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1734              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1735              		.loc 1 400 61 discriminator 3 view .LVU435
 1736 0800 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1737              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1738              		.loc 1 400 13 discriminator 3 view .LVU436
 1739 0804 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1740 0808 7330EFE6 		uxtb	r3, r3	@, tmp142
 1741 080c 00C08DE5 		str	ip, [sp]	@ tmp147,
 1742 0810 7220EFE6 		uxtb	r2, r2	@, data
 1743              	.LVL116:
 1744              		.loc 1 400 13 discriminator 3 view .LVU437
 1745 0814 FEFFFFEB 		bl	fprintf		@
 1746              	.LVL117:
 1747              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1748              		.loc 1 396 41 discriminator 3 view .LVU438
 1749 0818 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1750              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1751              		.loc 1 396 9 discriminator 3 view .LVU439
 1752 081c 040053E1 		cmp	r3, r4	@ _13, xx
 1753 0820 F0FFFFCA 		bgt	.L101		@,
 1754 0824 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1755              	.LVL118:
 1756              	.L102:
 1757              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1758              		.loc 1 395 55 discriminator 2 view .LVU440
 1759 0828 015085E2 		add	r5, r5, #1	@ yy, yy,
 1760              	.LVL119:
 1761              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1762              		.loc 1 395 5 discriminator 2 view .LVU441
 1763 082c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1764 0830 E9FFFFBA 		blt	.L100		@,
 1765              	.LVL120:
 1766              	.L99:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1767              		.loc 1 404 5 is_stmt 1 view .LVU442
 1768 0834 0700A0E1 		mov	r0, r7	@, fp
 1769              	@ armwave.c:405: }
 405:armwave.c     **** }
 1770              		.loc 1 405 1 is_stmt 0 view .LVU443
 1771 0838 0CD08DE2 		add	sp, sp, #12	@,,
 1772              		.cfi_def_cfa_offset 28
 1773              		@ sp needed	@
 1774 083c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1775              		.cfi_restore 14
 1776              		.cfi_restore 9
 1777              		.cfi_restore 8
 1778              		.cfi_restore 7
 1779              		.cfi_restore 6
 1780              		.cfi_restore 5
 1781              		.cfi_restore 4
 1782              		.cfi_def_cfa_offset 0
 1783              	.LVL121:
 1784              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1785              		.loc 1 404 5 view .LVU444
 1786 0840 FEFFFFEA 		b	fclose		@
 1787              	.LVL122:
 1788              	.L107:
 404:armwave.c     **** }
 1789              		.loc 1 404 5 view .LVU445
 1790              		.align	2
 1791              	.L106:
 1792 0844 F8020000 		.word	.LC19
 1793 0848 00000000 		.word	g_armwave_state
 1794 084c FC020000 		.word	.LC20
 1795 0850 00030000 		.word	.LC21
 1796 0854 08030000 		.word	.LC22
 1797 0858 10030000 		.word	.LC23
 1798              		.cfi_endproc
 1799              	.LFE68:
 1801              		.align	2
 1802              		.global	armwave_test_init
 1803              		.syntax unified
 1804              		.arm
 1805              		.fpu vfp
 1807              	armwave_test_init:
 1808              	.LVL123:
 1809              	.LFB69:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1810              		.loc 1 411 1 is_stmt 1 view -0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 0
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1814              		.loc 1 412 5 view .LVU447
 1815              	.LBB12:
 1816              	.LBI12:
  34:armwave.c     **** {
 1817              		.loc 1 34 6 view .LVU448
  34:armwave.c     **** {
 1818              		.loc 1 34 6 is_stmt 0 view .LVU449
 1819              	.LBE12:
 1820              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1821              		.loc 1 411 1 view .LVU450
 1822 085c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1823              		.cfi_def_cfa_offset 32
 1824              		.cfi_offset 4, -32
 1825              		.cfi_offset 5, -28
 1826              		.cfi_offset 6, -24
 1827              		.cfi_offset 7, -20
 1828              		.cfi_offset 8, -16
 1829              		.cfi_offset 9, -12
 1830              		.cfi_offset 10, -8
 1831              		.cfi_offset 14, -4
 1832 0860 068B2DED 		vpush.64	{d8, d9, d10}	@
 1833              		.cfi_def_cfa_offset 56
 1834              		.cfi_offset 80, -56
 1835              		.cfi_offset 81, -52
 1836              		.cfi_offset 82, -48
 1837              		.cfi_offset 83, -44
 1838              		.cfi_offset 84, -40
 1839              		.cfi_offset 85, -36
 1840 0864 C0409FE5 		ldr	r4, .L112+20	@ ivtmp.82,
 1841              	.LBB15:
 1842              	.LBB13:
 1843              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1844              		.loc 1 40 32 view .LVU451
 1845 0868 2EAA9FED 		vldr.32	s20, .L112+16	@ tmp136,
 1846              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1847              		.loc 1 40 26 view .LVU452
 1848 086c 299B9FED 		vldr.64	d9, .L112	@ tmp151,
 1849              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1850              		.loc 1 40 49 view .LVU453
 1851 0870 2A8B9FED 		vldr.64	d8, .L112+8	@ tmp139,
 1852 0874 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 1853              	.LBE13:
 1854              	.LBE15:
 1855              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1856              		.loc 1 411 1 view .LVU454
 1857 0878 10D04DE2 		sub	sp, sp, #16	@,,
 1858              		.cfi_def_cfa_offset 72
 1859              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1860              		.loc 1 411 1 view .LVU455
 1861 087c 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1862 0880 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1863 0884 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1864 0888 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1865 088c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 1866 0890 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1867              	.LVL124:
 1868              	.L109:
 1869              	.LBB16:
 1870              	.LBB14:
  40:armwave.c     ****     }
 1871              		.loc 1 40 9 is_stmt 1 view .LVU456
 1872              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1873              		.loc 1 40 32 is_stmt 0 view .LVU457
 1874 0894 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 1875              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1876              		.loc 1 40 26 view .LVU458
 1877 0898 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1878              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1879              		.loc 1 40 32 view .LVU459
 1880 089c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1881 08a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1882 08a4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1883              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1884              		.loc 1 40 26 view .LVU460
 1885 08a8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1886 08ac FEFFFFEB 		bl	pow		@
 1887              	.LVL125:
 1888              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1889              		.loc 1 40 49 view .LVU461
 1890 08b0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1891              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1892              		.loc 1 40 24 view .LVU462
 1893 08b4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1894 08b8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1895 08bc 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1896              	.LVL126:
 1897              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1898              		.loc 1 39 5 view .LVU463
 1899 08c0 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 1900 08c4 F2FFFF1A 		bne	.L109		@,
 1901              	.LVL127:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1902              		.loc 1 39 5 view .LVU464
 1903              	.LBE14:
 1904              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1905              		.loc 1 415 5 is_stmt 1 view .LVU465
 1906              	.LBB17:
 1907              	.LBI17:
 368:armwave.c     **** {
 1908              		.loc 1 368 6 view .LVU466
 1909              	.LBB18:
 371:armwave.c     ****         case 1:
 1910              		.loc 1 371 5 view .LVU467
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1911              		.loc 1 373 13 view .LVU468
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1912              		.loc 1 374 13 view .LVU469
 1913              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1914              		.loc 1 373 41 is_stmt 0 view .LVU470
 1915 08c8 60C09FE5 		ldr	ip, .L112+24	@ tmp142,
 1916 08cc 60409FE5 		ldr	r4, .L112+28	@ tmp143,
 1917              	.LBE18:
 1918              	.LBE17:
 1919              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1920              		.loc 1 417 5 view .LVU471
 1921 08d0 0000A0E3 		mov	r0, #0	@ tmp147,
 1922              	.LBB22:
 1923              	.LBB19:
 1924              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1925              		.loc 1 375 41 view .LVU472
 1926 08d4 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1927              	.LBE19:
 1928              	.LBE22:
 1929              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1930              		.loc 1 417 5 view .LVU473
 1931 08d8 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1932 08dc 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1933 08e0 00808DE5 		str	r8, [sp]	@ render_width,
 1934 08e4 0610A0E1 		mov	r1, r6	@, tmp3
 1935 08e8 0720A0E1 		mov	r2, r7	@, nwaves
 1936              	.LBB23:
 1937              	.LBB20:
 1938              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1939              		.loc 1 373 41 view .LVU474
 1940 08ec 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 1941              		.loc 1 375 13 is_stmt 1 view .LVU475
 1942              	.LBE20:
 1943              	.LBE23:
 1944              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1945              		.loc 1 417 5 is_stmt 0 view .LVU476
 1946 08f0 0630A0E1 		mov	r3, r6	@, wave_size
 1947              	.LBB24:
 1948              	.LBB21:
 1949              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1950              		.loc 1 375 41 view .LVU477
 1951 08f4 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 1952              		.loc 1 376 13 is_stmt 1 view .LVU478
 1953              	.LVL128:
 376:armwave.c     ****     }
 1954              		.loc 1 376 13 is_stmt 0 view .LVU479
 1955              	.LBE21:
 1956              	.LBE24:
 1957              		.loc 1 417 5 is_stmt 1 view .LVU480
 1958 08f8 FEFFFFEB 		bl	armwave_setup_render		@
 1959              	.LVL129:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1960              		.loc 1 419 5 view .LVU481
 1961 08fc 34109FE5 		ldr	r1, .L112+32	@,
 1962 0900 34009FE5 		ldr	r0, .L112+36	@,
 1963              	@ armwave.c:420: }
 420:armwave.c     **** }
 1964              		.loc 1 420 1 is_stmt 0 view .LVU482
 1965 0904 10D08DE2 		add	sp, sp, #16	@,,
 1966              		.cfi_def_cfa_offset 56
 1967              		@ sp needed	@
 1968 0908 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1969              		.cfi_restore 84
 1970              		.cfi_restore 85
 1971              		.cfi_restore 82
 1972              		.cfi_restore 83
 1973              		.cfi_restore 80
 1974              		.cfi_restore 81
 1975              		.cfi_def_cfa_offset 32
 1976 090c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1977              		.cfi_restore 14
 1978              		.cfi_restore 10
 1979              		.cfi_restore 9
 1980              		.cfi_restore 8
 1981              		.cfi_restore 7
 1982              		.cfi_restore 6
 1983              		.cfi_restore 5
 1984              		.cfi_restore 4
 1985              		.cfi_def_cfa_offset 0
 1986              	.LVL130:
 1987              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 1988              		.loc 1 419 5 view .LVU483
 1989 0910 FEFFFFEA 		b	printf		@
 1990              	.LVL131:
 1991              	.L113:
 1992 0914 0000A0E1 		.align	3
 1993              	.L112:
 1994 0918 000000C0 		.word	-1073741824
 1995 091c CCCCEC3F 		.word	1072483532
 1996 0920 00000000 		.word	0
 1997 0924 00E06F40 		.word	1081073664
 1998 0928 00007F43 		.word	1132396544
 1999 092c FFFFFFFF 		.word	gamma_table-1
 2000 0930 00000000 		.word	g_armwave_state
 2001 0934 F609F406 		.word	116656630
 2002 0938 00000000 		.word	.LC0
 2003 093c 08000000 		.word	.LC1
 2004              		.cfi_endproc
 2005              	.LFE69:
 2007              		.align	2
 2008              		.global	armwave_test_fill_outbuf
 2009              		.syntax unified
 2010              		.arm
 2011              		.fpu vfp
 2013              	armwave_test_fill_outbuf:
 2014              	.LFB70:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Render image to the local allocated buffer.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_fill_outbuf()
 426:armwave.c     **** {
 2015              		.loc 1 426 1 is_stmt 1 view -0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2020              		.loc 1 427 5 view .LVU485
 2021 0940 04309FE5 		ldr	r3, .L115	@ tmp111,
 2022 0944 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2023 0948 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2024              	.LVL132:
 2025              	.L116:
 2026              		.align	2
 2027              	.L115:
 2028 094c 00000000 		.word	g_armwave_state
 2029              		.cfi_endproc
 2030              	.LFE70:
 2032              		.align	2
 2033              		.global	armwave_test_dump_buffer_to_ppm
 2034              		.syntax unified
 2035              		.arm
 2036              		.fpu vfp
 2038              	armwave_test_dump_buffer_to_ppm:
 2039              	.LVL133:
 2040              	.LFB71:
 428:armwave.c     **** }
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 434:armwave.c     **** {
 2041              		.loc 1 434 1 view -0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 0
 2044              		@ frame_needed = 0, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
 435:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2046              		.loc 1 435 5 view .LVU487
 2047 0950 08309FE5 		ldr	r3, .L118	@ tmp112,
 2048 0954 0010A0E1 		mov	r1, r0	@, fn
 2049 0958 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2050              	.LVL134:
 2051              		.loc 1 435 5 is_stmt 0 view .LVU488
 2052 095c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2053              	.LVL135:
 2054              	.L119:
 2055              		.loc 1 435 5 view .LVU489
 2056              		.align	2
 2057              	.L118:
 2058 0960 00000000 		.word	g_armwave_state
 2059              		.cfi_endproc
 2060              	.LFE71:
 2062              		.align	2
 2063              		.global	armwave_test_fill_gdkbuf
 2064              		.syntax unified
 2065              		.arm
 2066              		.fpu vfp
 2068              	armwave_test_fill_gdkbuf:
 2069              	.LVL136:
 2070              	.LFB72:
 436:armwave.c     **** }
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Render GDK buffer with test funtionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 442:armwave.c     **** {
 2071              		.loc 1 442 1 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 443:armwave.c     ****     //PyObject *mv;
 444:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 445:armwave.c     **** 
 446:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 447:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2076              		.loc 1 447 5 view .LVU491
 448:armwave.c     ****     
 449:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2077              		.loc 1 450 5 view .LVU492
 2078              	@ armwave.c:447:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 447:armwave.c     ****     
 2079              		.loc 1 447 11 is_stmt 0 view .LVU493
 2080 0964 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2081              	@ armwave.c:450:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2082              		.loc 1 450 5 view .LVU494
 2083 0968 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2084              	.LVL137:
 2085              		.loc 1 450 5 view .LVU495
 2086 096c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2087              	.LVL138:
 2088              		.loc 1 450 5 view .LVU496
 2089              		.cfi_endproc
 2090              	.LFE72:
 2092              		.align	2
 2093              		.global	armwave_test_buffer_alloc
 2094              		.syntax unified
 2095              		.arm
 2096              		.fpu vfp
 2098              	armwave_test_buffer_alloc:
 2099              	.LVL139:
 2100              	.LFB73:
 451:armwave.c     **** }
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 457:armwave.c     **** {
 2101              		.loc 1 457 1 is_stmt 1 view -0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 0
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
 458:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2105              		.loc 1 458 5 view .LVU498
 2106              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2107              		.loc 1 457 1 is_stmt 0 view .LVU499
 2108 0970 70402DE9 		push	{r4, r5, r6, lr}	@
 2109              		.cfi_def_cfa_offset 16
 2110              		.cfi_offset 4, -16
 2111              		.cfi_offset 5, -12
 2112              		.cfi_offset 6, -8
 2113              		.cfi_offset 14, -4
 2114              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2115              		.loc 1 457 1 view .LVU500
 2116 0974 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2117              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2118              		.loc 1 458 23 view .LVU501
 2119 0978 44409FE5 		ldr	r4, .L128	@ tmp128,
 2120 097c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2121              	.LVL140:
 2122              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2123              		.loc 1 458 7 view .LVU502
 2124 0980 000050E3 		cmp	r0, #0	@ _1,
 2125 0984 0000000A 		beq	.L122		@,
 459:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2126              		.loc 1 459 9 is_stmt 1 view .LVU503
 2127 0988 FEFFFFEB 		bl	free		@
 2128              	.LVL141:
 2129              	.L122:
 460:armwave.c     ****     }
 461:armwave.c     **** 
 462:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 463:armwave.c     **** 
 464:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2130              		.loc 1 464 5 view .LVU504
 2131              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2132              		.loc 1 464 75 is_stmt 0 view .LVU505
 2133 098c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2134 0990 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2135              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2136              		.loc 1 464 40 view .LVU506
 2137 0994 0610A0E1 		mov	r1, r6	@, nsets
 2138              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2139              		.loc 1 464 75 view .LVU507
 2140 0998 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2141              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2142              		.loc 1 464 40 view .LVU508
 2143 099c 0500A0E1 		mov	r0, r5	@, _4
 2144 09a0 FEFFFFEB 		bl	calloc		@
 2145              	.LVL142:
 2146              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     **** 
 466:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2147              		.loc 1 466 7 view .LVU509
 2148 09a4 000050E3 		cmp	r0, #0	@ tmp124,
 2149              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2150              		.loc 1 464 38 view .LVU510
 2151 09a8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2152              		.loc 1 466 5 is_stmt 1 view .LVU511
 2153              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 2154              		.loc 1 466 7 is_stmt 0 view .LVU512
 2155 09ac 7080BD18 		popne	{r4, r5, r6, pc}	@
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2156              		.loc 1 467 9 is_stmt 1 view .LVU513
 2157 09b0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2158 09b4 0620A0E1 		mov	r2, r6	@, nsets
 2159 09b8 08009FE5 		ldr	r0, .L128+4	@,
 2160              	@ armwave.c:471: }
 468:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 469:armwave.c     ****         return;
 470:armwave.c     ****     }
 471:armwave.c     **** }
 2161              		.loc 1 471 1 is_stmt 0 view .LVU514
 2162 09bc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2163              		.cfi_restore 14
 2164              		.cfi_restore 6
 2165              		.cfi_restore 5
 2166              		.cfi_restore 4
 2167              		.cfi_def_cfa_offset 0
 2168              	.LVL143:
 2169              	@ armwave.c:467:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2170              		.loc 1 467 9 view .LVU515
 2171 09c0 FEFFFFEA 		b	printf		@
 2172              	.LVL144:
 2173              	.L129:
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2174              		.loc 1 467 9 view .LVU516
 2175              		.align	2
 2176              	.L128:
 2177 09c4 00000000 		.word	g_armwave_state
 2178 09c8 20030000 		.word	.LC24
 2179              		.cfi_endproc
 2180              	.LFE73:
 2182              		.align	2
 2183              		.global	armwave_fill_pixbuf_into_pybuffer
 2184              		.syntax unified
 2185              		.arm
 2186              		.fpu vfp
 2188              	armwave_fill_pixbuf_into_pybuffer:
 2189              	.LVL145:
 2190              	.LFB74:
 472:armwave.c     **** 
 473:armwave.c     **** /*
 474:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 475:armwave.c     ****  */
 476:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 477:armwave.c     **** {
 2191              		.loc 1 477 1 is_stmt 1 view -0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 48
 2194              		@ frame_needed = 0, uses_anonymous_args = 0
 478:armwave.c     ****     Py_buffer buffer;
 2195              		.loc 1 478 5 view .LVU518
 479:armwave.c     ****     int ret;
 2196              		.loc 1 479 5 view .LVU519
 480:armwave.c     **** 
 481:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 482:armwave.c     **** 
 483:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2197              		.loc 1 483 5 view .LVU520
 2198              	@ armwave.c:477: {
 477:armwave.c     ****     Py_buffer buffer;
 2199              		.loc 1 477 1 is_stmt 0 view .LVU521
 2200 09cc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2201              		.cfi_def_cfa_offset 4
 2202              		.cfi_offset 14, -4
 2203 09d0 34D04DE2 		sub	sp, sp, #52	@,,
 2204              		.cfi_def_cfa_offset 56
 2205              	@ armwave.c:483:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2206              		.loc 1 483 11 view .LVU522
 2207 09d4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2208 09d8 0120A0E3 		mov	r2, #1	@,
 2209 09dc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2210              	.LVL146:
 484:armwave.c     **** 
 485:armwave.c     ****     if(ret != 0) {
 2211              		.loc 1 485 5 is_stmt 1 view .LVU523
 2212              	@ armwave.c:485:     if(ret != 0) {
 2213              		.loc 1 485 7 is_stmt 0 view .LVU524
 2214 09e0 000050E3 		cmp	r0, #0	@,
 2215 09e4 0A00001A 		bne	.L134		@,
 486:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 487:armwave.c     ****         Py_RETURN_FALSE;
 488:armwave.c     ****     }
 489:armwave.c     **** 
 490:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 491:armwave.c     **** 
 492:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2216              		.loc 1 492 5 is_stmt 1 view .LVU525
 2217 09e8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2218              	.LVL147:
 2219              		.loc 1 492 5 is_stmt 0 view .LVU526
 2220 09ec FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2221              	.LVL148:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     PyBuffer_Release(&buffer);
 2222              		.loc 1 495 5 is_stmt 1 view .LVU527
 2223 09f0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2224 09f4 FEFFFFEB 		bl	PyBuffer_Release		@
 2225              	.LVL149:
 496:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 497:armwave.c     **** 
 498:armwave.c     ****     Py_RETURN_TRUE;
 2226              		.loc 1 498 5 view .LVU528
 2227              	.LBB25:
 2228              	.LBI25:
 2229              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2230              		.loc 2 456 20 view .LVU529
 2231              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2232              		.loc 2 458 21 view .LVU530
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2233              		.loc 2 459 5 view .LVU531
 2234              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2235              		.loc 2 459 18 is_stmt 0 view .LVU532
 2236 09f8 38309FE5 		ldr	r3, .L135	@ tmp126,
 2237              	.LBE26:
 2238              	.LBE25:
 2239              	@ armwave.c:498:     Py_RETURN_TRUE;
 2240              		.loc 1 498 5 view .LVU533
 2241 09fc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2242              	.LBB28:
 2243              	.LBB27:
 2244              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2245              		.loc 2 459 18 view .LVU534
 2246 0a00 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2247 0a04 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2248 0a08 002083E5 		str	r2, [r3]	@ tmp128,
 2249              	.LBE27:
 2250              	.LBE28:
 2251              	@ armwave.c:499: }
 499:armwave.c     **** }
 2252              		.loc 1 499 1 view .LVU535
 2253 0a0c 34D08DE2 		add	sp, sp, #52	@,,
 2254              		.cfi_remember_state
 2255              		.cfi_def_cfa_offset 4
 2256              		@ sp needed	@
 2257 0a10 04F09DE4 		ldr	pc, [sp], #4	@
 2258              	.LVL150:
 2259              	.L134:
 2260              		.cfi_restore_state
 486:armwave.c     ****         Py_RETURN_FALSE;
 2261              		.loc 1 486 9 is_stmt 1 view .LVU536
 2262 0a14 20009FE5 		ldr	r0, .L135+4	@,
 2263              	.LVL151:
 486:armwave.c     ****         Py_RETURN_FALSE;
 2264              		.loc 1 486 9 is_stmt 0 view .LVU537
 2265 0a18 FEFFFFEB 		bl	puts		@
 2266              	.LVL152:
 487:armwave.c     ****     }
 2267              		.loc 1 487 9 is_stmt 1 view .LVU538
 2268              	.LBB29:
 2269              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2270              		.loc 2 456 20 view .LVU539
 2271              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2272              		.loc 2 458 21 view .LVU540
 2273              		.loc 2 459 5 view .LVU541
 2274              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2275              		.loc 2 459 18 is_stmt 0 view .LVU542
 2276 0a1c 1C309FE5 		ldr	r3, .L135+8	@ tmp120,
 2277              	.LBE30:
 2278              	.LBE29:
 2279              	@ armwave.c:487:         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 2280              		.loc 1 487 9 view .LVU543
 2281 0a20 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2282              	.LBB32:
 2283              	.LBB31:
 2284              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2285              		.loc 2 459 18 view .LVU544
 2286 0a24 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2287 0a28 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2288 0a2c 002083E5 		str	r2, [r3]	@ tmp122,
 2289              	.LBE31:
 2290              	.LBE32:
 2291              	@ armwave.c:499: }
 2292              		.loc 1 499 1 view .LVU545
 2293 0a30 34D08DE2 		add	sp, sp, #52	@,,
 2294              		.cfi_def_cfa_offset 4
 2295              		@ sp needed	@
 2296 0a34 04F09DE4 		ldr	pc, [sp], #4	@
 2297              	.L136:
 2298              		.align	2
 2299              	.L135:
 2300 0a38 00000000 		.word	_Py_TrueStruct
 2301 0a3c 74030000 		.word	.LC25
 2302 0a40 00000000 		.word	_Py_FalseStruct
 2303              		.cfi_endproc
 2304              	.LFE74:
 2306              		.align	2
 2307              		.global	armwave_test_create_am_sine
 2308              		.syntax unified
 2309              		.arm
 2310              		.fpu vfp
 2312              	armwave_test_create_am_sine:
 2313              	.LVL153:
 2314              	.LFB75:
 500:armwave.c     **** 
 501:armwave.c     **** /*
 502:armwave.c     ****  * Make a test AM waveform for render tests.
 503:armwave.c     ****  *
 504:armwave.c     ****  * @param   mod                     modulation depth
 505:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 506:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 509:armwave.c     **** {
 2315              		.loc 1 509 1 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 8
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     float v, noise, xnoise, mod_val;
 2319              		.loc 1 510 5 view .LVU547
 511:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2320              		.loc 1 511 5 view .LVU548
 2321              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2322              		.loc 1 509 1 is_stmt 0 view .LVU549
 2323 0a44 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2324              		.cfi_def_cfa_offset 32
 2325              		.cfi_offset 4, -32
 2326              		.cfi_offset 5, -28
 2327              		.cfi_offset 6, -24
 2328              		.cfi_offset 7, -20
 2329              		.cfi_offset 8, -16
 2330              		.cfi_offset 9, -12
 2331              		.cfi_offset 10, -8
 2332              		.cfi_offset 14, -4
 2333              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2334              		.loc 1 511 38 view .LVU550
 2335 0a48 7A7A9FED 		vldr.32	s14, .L168	@ tmp180,
 2336              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2337              		.loc 1 511 55 view .LVU551
 2338 0a4c 00529FE5 		ldr	r5, .L168+28	@ tmp250,
 2339              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2340              		.loc 1 509 1 view .LVU552
 2341 0a50 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2342              		.cfi_def_cfa_offset 80
 2343              		.cfi_offset 80, -80
 2344              		.cfi_offset 81, -76
 2345              		.cfi_offset 82, -72
 2346              		.cfi_offset 83, -68
 2347              		.cfi_offset 84, -64
 2348              		.cfi_offset 85, -60
 2349              		.cfi_offset 86, -56
 2350              		.cfi_offset 87, -52
 2351              		.cfi_offset 88, -48
 2352              		.cfi_offset 89, -44
 2353              		.cfi_offset 90, -40
 2354              		.cfi_offset 91, -36
 2355 0a54 0090A0E1 		mov	r9, r0	@ sets, sets
 2356              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2357              		.loc 1 511 38 view .LVU553
 2358 0a58 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2359              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     int s, set_offset = 0;
 513:armwave.c     ****     int w, x;
 514:armwave.c     **** 
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2360              		.loc 1 515 70 view .LVU554
 2361 0a5c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2362 0a60 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2363              	.LBB35:
 2364              	.LBB36:
 2365              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2366              		.loc 1 458 23 view .LVU555
 2367 0a64 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2368              	.LVL154:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2369              		.loc 1 458 23 view .LVU556
 2370              	.LBE36:
 2371              	.LBE35:
 2372              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2373              		.loc 1 511 38 view .LVU557
 2374 0a68 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2375              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2376              		.loc 1 515 70 view .LVU558
 2377 0a6c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2378              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2379              		.loc 1 509 1 view .LVU559
 2380 0a70 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2381              	.LBB40:
 2382              	.LBB37:
 2383              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2384              		.loc 1 458 7 view .LVU560
 2385 0a74 000050E3 		cmp	r0, #0	@ _82,
 2386              	.LBE37:
 2387              	.LBE40:
 2388              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2389              		.loc 1 509 1 view .LVU561
 2390 0a78 08D04DE2 		sub	sp, sp, #8	@,,
 2391              		.cfi_def_cfa_offset 88
 2392              	@ armwave.c:516:     g_armwave_state.test_wave_buffer_nsets = sets;
 516:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2393              		.loc 1 516 44 view .LVU562
 2394 0a7c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2395              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2396              		.loc 1 515 45 view .LVU563
 2397 0a80 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2398              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2399              		.loc 1 511 38 view .LVU564
 2400 0a84 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2401              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2402              		.loc 1 511 11 view .LVU565
 2403 0a88 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2404              	.LVL155:
 512:armwave.c     ****     int w, x;
 2405              		.loc 1 512 5 is_stmt 1 view .LVU566
 513:armwave.c     **** 
 2406              		.loc 1 513 5 view .LVU567
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2407              		.loc 1 515 5 view .LVU568
 2408              		.loc 1 516 5 view .LVU569
 517:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2409              		.loc 1 517 5 view .LVU570
 2410              	.LBB41:
 2411              	.LBI35:
 456:armwave.c     **** {
 2412              		.loc 1 456 6 view .LVU571
 2413              	.LBB38:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2414              		.loc 1 458 5 view .LVU572
 2415              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2416              		.loc 1 458 7 is_stmt 0 view .LVU573
 2417 0a8c 0000000A 		beq	.L138		@,
 459:armwave.c     ****     }
 2418              		.loc 1 459 9 is_stmt 1 view .LVU574
 2419 0a90 FEFFFFEB 		bl	free		@
 2420              	.LVL156:
 2421              	.L138:
 464:armwave.c     **** 
 2422              		.loc 1 464 5 view .LVU575
 2423              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2424              		.loc 1 464 75 is_stmt 0 view .LVU576
 2425 0a94 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2426 0a98 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2427              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2428              		.loc 1 464 40 view .LVU577
 2429 0a9c 0910A0E1 		mov	r1, r9	@, sets
 2430              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2431              		.loc 1 464 75 view .LVU578
 2432 0aa0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2433              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2434              		.loc 1 464 40 view .LVU579
 2435 0aa4 0400A0E1 		mov	r0, r4	@, _85
 2436 0aa8 FEFFFFEB 		bl	calloc		@
 2437              	.LVL157:
 2438              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2439              		.loc 1 466 7 view .LVU580
 2440 0aac 000050E3 		cmp	r0, #0	@ tmp191,
 2441              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2442              		.loc 1 464 38 view .LVU581
 2443 0ab0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2444              		.loc 1 466 5 is_stmt 1 view .LVU582
 2445              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2446              		.loc 1 466 7 is_stmt 0 view .LVU583
 2447 0ab4 5A00000A 		beq	.L167		@,
 2448              	.L139:
 2449              	.LVL158:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2450              		.loc 1 466 7 view .LVU584
 2451              	.LBE38:
 2452              	.LBE41:
 2453              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 518:armwave.c     **** 
 519:armwave.c     ****     for(s = 0; s < sets; s++) {
 2454              		.loc 1 519 5 discriminator 1 view .LVU585
 2455 0ab8 000059E3 		cmp	r9, #0	@ sets,
 2456 0abc 550000DA 		ble	.L137		@,
 2457              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 521:armwave.c     ****     
 522:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 524:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 525:armwave.c     **** 
 526:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 527:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     ****                 noise *= noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 533:armwave.c     ****                     noise = -noise;
 534:armwave.c     **** 
 535:armwave.c     ****                 noise += 1.0f;
 536:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 537:armwave.c     **** 
 538:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2458              		.loc 1 538 45 view .LVU586
 2459 0ac0 5C8A9FED 		vldr.32	s16, .L168	@ tmp258,
 2460              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 539:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 540:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 541:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2461              		.loc 1 541 104 view .LVU587
 2462 0ac4 5CCA9FED 		vldr.32	s24, .L168+4	@ tmp259,
 2463              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2464              		.loc 1 519 5 view .LVU588
 2465 0ac8 0070A0E3 		mov	r7, #0	@ set_offset,
 2466              	@ armwave.c:520:         printf("Calculating test set %d\n", s);
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2467              		.loc 1 520 9 view .LVU589
 2468 0acc 84A19FE5 		ldr	r10, .L168+32	@ tmp257,
 2469              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2470              		.loc 1 519 5 view .LVU590
 2471 0ad0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2472              	.LVL159:
 2473              	.L140:
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2474              		.loc 1 520 9 is_stmt 1 view .LVU591
 2475 0ad4 0810A0E1 		mov	r1, r8	@, s
 2476 0ad8 0A00A0E1 		mov	r0, r10	@, tmp257
 2477 0adc FEFFFFEB 		bl	printf		@
 2478              	.LVL160:
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2479              		.loc 1 522 9 view .LVU592
 2480              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2481              		.loc 1 522 39 is_stmt 0 view .LVU593
 2482 0ae0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2483              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2484              		.loc 1 522 9 view .LVU594
 2485 0ae4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2486 0ae8 450000DA 		ble	.L141		@,
 2487              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2488              		.loc 1 524 21 view .LVU595
 2489 0aec 53CADFED 		vldr.32	s25, .L168+8	@ tmp200,
 2490              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2491              		.loc 1 538 33 view .LVU596
 2492 0af0 53BA9FED 		vldr.32	s22, .L168+12	@ tmp253,
 2493              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2494              		.loc 1 536 24 view .LVU597
 2495 0af4 53AADFED 		vldr.32	s21, .L168+16	@ tmp254,
 2496 0af8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2497              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2498              		.loc 1 522 15 view .LVU598
 2499 0afc 0060A0E3 		mov	r6, #0	@ w,
 2500              	.LVL161:
 2501              	.L148:
 524:armwave.c     **** 
 2502              		.loc 1 524 13 is_stmt 1 view .LVU599
 2503              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2504              		.loc 1 524 21 is_stmt 0 view .LVU600
 2505 0b00 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2506 0b04 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2507              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2508              		.loc 1 526 13 view .LVU601
 2509 0b08 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2510              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2511              		.loc 1 524 21 view .LVU602
 2512 0b0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2513 0b10 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2514              	.LVL162:
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2515              		.loc 1 526 13 is_stmt 1 view .LVU603
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2516              		.loc 1 526 13 is_stmt 0 view .LVU604
 2517 0b14 370000DA 		ble	.L142		@,
 2518 0b18 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2519              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2520              		.loc 1 541 113 view .LVU605
 2521 0b1c 4AAA9FED 		vldr.32	s20, .L168+20	@ tmp229,
 2522 0b20 4A8ADFED 		vldr.32	s17, .L168+24	@ tmp230,
 2523              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2524              		.loc 1 526 19 view .LVU606
 2525 0b24 0040A0E3 		mov	r4, #0	@ x,
 2526              	.LVL163:
 2527              	.L147:
 527:armwave.c     ****                 noise *= noise;
 2528              		.loc 1 527 17 is_stmt 1 view .LVU607
 2529              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2530              		.loc 1 527 28 is_stmt 0 view .LVU608
 2531 0b28 FEFFFFEB 		bl	rand		@
 2532              	.LVL164:
 2533              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2534              		.loc 1 527 35 view .LVU609
 2535 0b2c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2536              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2537              		.loc 1 527 45 view .LVU610
 2538 0b30 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2539 0b34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2540              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2541              		.loc 1 527 24 view .LVU611
 2542 0b38 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2543              	.LVL165:
 528:armwave.c     ****                 noise *= noise;
 2544              		.loc 1 528 17 is_stmt 1 view .LVU612
 2545              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2546              		.loc 1 528 23 is_stmt 0 view .LVU613
 2547 0b3c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2548              	.LVL166:
 529:armwave.c     ****                 noise *= noise;
 2549              		.loc 1 529 17 is_stmt 1 view .LVU614
 2550              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 2551              		.loc 1 529 23 is_stmt 0 view .LVU615
 2552 0b40 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2553              	.LVL167:
 530:armwave.c     **** 
 2554              		.loc 1 530 17 is_stmt 1 view .LVU616
 2555              	@ armwave.c:530:                 noise *= noise;
 530:armwave.c     **** 
 2556              		.loc 1 530 23 is_stmt 0 view .LVU617
 2557 0b44 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2558              	.LVL168:
 532:armwave.c     ****                     noise = -noise;
 2559              		.loc 1 532 17 is_stmt 1 view .LVU618
 2560              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2561              		.loc 1 532 21 is_stmt 0 view .LVU619
 2562 0b48 FEFFFFEB 		bl	rand		@
 2563              	.LVL169:
 533:armwave.c     **** 
 2564              		.loc 1 533 21 is_stmt 1 view .LVU620
 2565              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2566              		.loc 1 532 19 is_stmt 0 view .LVU621
 2567 0b4c 020910E3 		tst	r0, #32768	@,
 2568              	@ armwave.c:533:                     noise = -noise;
 533:armwave.c     **** 
 2569              		.loc 1 533 27 view .LVU622
 2570 0b50 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2571              	.LVL170:
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2572              		.loc 1 535 17 is_stmt 1 view .LVU623
 536:armwave.c     **** 
 2573              		.loc 1 536 17 view .LVU624
 2574              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2575              		.loc 1 536 27 is_stmt 0 view .LVU625
 2576 0b54 FEFFFFEB 		bl	rand		@
 2577              	.LVL171:
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2578              		.loc 1 538 17 is_stmt 1 view .LVU626
 2579              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2580              		.loc 1 538 45 is_stmt 0 view .LVU627
 2581 0b58 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2582              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2583              		.loc 1 538 33 view .LVU628
 2584 0b5c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2585              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2586              		.loc 1 538 45 view .LVU629
 2587 0b60 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2588              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2589              		.loc 1 538 33 view .LVU630
 2590 0b64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2591              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2592              		.loc 1 538 45 view .LVU631
 2593 0b68 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2594              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2595              		.loc 1 538 33 view .LVU632
 2596 0b6c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2597              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2598              		.loc 1 536 34 view .LVU633
 2599 0b70 7000FFE6 		uxth	r0, r0	@ tmp214,
 2600              	.LVL172:
 2601              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2602              		.loc 1 536 44 view .LVU634
 2603 0b74 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2604 0b78 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2605              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2606              		.loc 1 536 24 view .LVU635
 2607 0b7c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2608              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2609              		.loc 1 538 77 view .LVU636
 2610 0b80 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2611              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2612              		.loc 1 538 22 view .LVU637
 2613 0b84 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2614 0b88 FEFFFFEB 		bl	sin		@
 2615              	.LVL173:
 2616              		.loc 1 541 17 is_stmt 1 view .LVU638
 2617              	@ armwave.c:535:                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2618              		.loc 1 535 23 is_stmt 0 view .LVU639
 2619 0b8c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2620              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2621              		.loc 1 541 104 view .LVU640
 2622 0b90 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2623              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2624              		.loc 1 538 98 view .LVU641
 2625 0b94 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2626              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2627              		.loc 1 538 87 view .LVU642
 2628 0b98 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2629              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2630              		.loc 1 538 98 view .LVU643
 2631 0b9c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2632              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2633              		.loc 1 538 19 view .LVU644
 2634 0ba0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2635              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2636              		.loc 1 541 113 view .LVU645
 2637 0ba4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2638 0ba8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2639 0bac C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2640 0bb0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2641 0bb4 050000DA 		ble	.L144		@,
 2642              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2643              		.loc 1 541 104 discriminator 1 view .LVU646
 2644 0bb8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2645 0bbc FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2646 0bc0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2647 0bc4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2648 0bc8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2649 0bcc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2650              	.L144:
 2651              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2652              		.loc 1 541 57 discriminator 12 view .LVU647
 2653 0bd0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2654              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2655              		.loc 1 541 102 discriminator 12 view .LVU648
 2656 0bd4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2657 0bd8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2658 0bdc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2659              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2660              		.loc 1 526 58 discriminator 12 view .LVU649
 2661 0be0 014084E2 		add	r4, r4, #1	@ x, x,
 2662              	.LVL174:
 2663              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2664              		.loc 1 541 102 discriminator 12 view .LVU650
 2665 0be4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2666              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2667              		.loc 1 526 43 discriminator 12 view .LVU651
 2668 0be8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2669              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2670              		.loc 1 526 13 discriminator 12 view .LVU652
 2671 0bec 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2672 0bf0 CCFFFFCA 		bgt	.L147		@,
 2673 0bf4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2674              	.LVL175:
 2675              	.L142:
 2676              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2677              		.loc 1 522 48 discriminator 2 view .LVU653
 2678 0bf8 016086E2 		add	r6, r6, #1	@ w, w,
 2679              	.LVL176:
 2680              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2681              		.loc 1 522 9 discriminator 2 view .LVU654
 2682 0bfc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2683 0c00 BEFFFFBA 		blt	.L148		@,
 2684              	.LVL177:
 2685              	.L141:
 542:armwave.c     ****             }
 543:armwave.c     ****         }
 544:armwave.c     **** 
 545:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2686              		.loc 1 545 9 is_stmt 1 discriminator 2 view .LVU655
 2687              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2688              		.loc 1 545 46 is_stmt 0 discriminator 2 view .LVU656
 2689 0c04 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2690              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2691              		.loc 1 519 27 discriminator 2 view .LVU657
 2692 0c08 018088E2 		add	r8, r8, #1	@ s, s,
 2693              	.LVL178:
 2694              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2695              		.loc 1 519 5 discriminator 2 view .LVU658
 2696 0c0c 080059E1 		cmp	r9, r8	@ sets, s
 2697              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2698              		.loc 1 545 20 discriminator 2 view .LVU659
 2699 0c10 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2700              	.LVL179:
 2701              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2702              		.loc 1 519 5 discriminator 2 view .LVU660
 2703 0c14 AEFFFF1A 		bne	.L140		@,
 2704              	.LVL180:
 2705              	.L137:
 2706              	@ armwave.c:547: }
 546:armwave.c     ****     }
 547:armwave.c     **** }
 2707              		.loc 1 547 1 view .LVU661
 2708 0c18 08D08DE2 		add	sp, sp, #8	@,,
 2709              		.cfi_remember_state
 2710              		.cfi_def_cfa_offset 80
 2711              		@ sp needed	@
 2712 0c1c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2713              		.cfi_restore 90
 2714              		.cfi_restore 91
 2715              		.cfi_restore 88
 2716              		.cfi_restore 89
 2717              		.cfi_restore 86
 2718              		.cfi_restore 87
 2719              		.cfi_restore 84
 2720              		.cfi_restore 85
 2721              		.cfi_restore 82
 2722              		.cfi_restore 83
 2723              		.cfi_restore 80
 2724              		.cfi_restore 81
 2725              		.cfi_def_cfa_offset 32
 2726              	.LVL181:
 2727              		.loc 1 547 1 view .LVU662
 2728 0c20 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2729              	.LVL182:
 2730              	.L167:
 2731              		.cfi_restore_state
 2732              	.LBB42:
 2733              	.LBB39:
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2734              		.loc 1 467 9 is_stmt 1 view .LVU663
 2735 0c24 940901E0 		mul	r1, r4, r9	@, _85, sets
 2736 0c28 0920A0E1 		mov	r2, r9	@, sets
 2737 0c2c 28009FE5 		ldr	r0, .L168+36	@,
 2738 0c30 FEFFFFEB 		bl	printf		@
 2739              	.LVL183:
 469:armwave.c     ****     }
 2740              		.loc 1 469 9 view .LVU664
 2741 0c34 9FFFFFEA 		b	.L139		@
 2742              	.L169:
 2743              		.align	2
 2744              	.L168:
 2745 0c38 0000803F 		.word	1065353216
 2746 0c3c 00007F43 		.word	1132396544
 2747 0c40 0000003F 		.word	1056964608
 2748 0c44 C3F5C840 		.word	1086911939
 2749 0c48 38FFC74A 		.word	1254620984
 2750 0c4c 0000FE42 		.word	1123942400
 2751 0c50 00000043 		.word	1124073472
 2752 0c54 00000000 		.word	g_armwave_state
 2753 0c58 C8030000 		.word	.LC26
 2754 0c5c 20030000 		.word	.LC24
 2755              	.LBE39:
 2756              	.LBE42:
 2757              		.cfi_endproc
 2758              	.LFE75:
 2760              		.align	2
 2761              		.global	armwave_cleanup
 2762              		.syntax unified
 2763              		.arm
 2764              		.fpu vfp
 2766              	armwave_cleanup:
 2767              	.LFB76:
 548:armwave.c     **** 
 549:armwave.c     **** /*
 550:armwave.c     ****  * Make a test square waveform.
 551:armwave.c     ****  *
 552:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 553:armwave.c     ****  */
 554:armwave.c     **** #if 0
 555:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 556:armwave.c     **** {
 557:armwave.c     ****     uint8_t v;
 558:armwave.c     ****     float noise, xnoise;
 559:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 560:armwave.c     ****     int w, x;
 561:armwave.c     **** 
 562:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 563:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 564:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     ****             noise *= noise;
 568:armwave.c     **** 
 569:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 570:armwave.c     ****                 noise = -noise;
 571:armwave.c     **** 
 572:armwave.c     ****             //noise += 1.0f;
 573:armwave.c     **** 
 574:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 575:armwave.c     ****                 new_level = 0.2f;
 576:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 577:armwave.c     ****                 new_level = 0.8f;
 578:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 579:armwave.c     ****                 new_level = 0.2f;
 580:armwave.c     ****             } else {
 581:armwave.c     ****                 new_level = 0.8f;
 582:armwave.c     ****             }
 583:armwave.c     **** 
 584:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 585:armwave.c     **** 
 586:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 587:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 588:armwave.c     ****         }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 591:armwave.c     **** #endif
 592:armwave.c     **** 
 593:armwave.c     **** /*
 594:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 595:armwave.c     ****  */
 596:armwave.c     **** void armwave_cleanup()
 597:armwave.c     **** {
 2768              		.loc 1 597 1 view -0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 598:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2772              		.loc 1 598 5 view .LVU666
 2773              	@ armwave.c:597: {
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2774              		.loc 1 597 1 is_stmt 0 view .LVU667
 2775 0c60 10402DE9 		push	{r4, lr}	@
 2776              		.cfi_def_cfa_offset 8
 2777              		.cfi_offset 4, -8
 2778              		.cfi_offset 14, -4
 2779              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2780              		.loc 1 598 25 view .LVU668
 2781 0c64 34409FE5 		ldr	r4, .L172	@ tmp114,
 2782              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2783              		.loc 1 598 5 view .LVU669
 2784 0c68 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2785 0c6c FEFFFFEB 		bl	free		@
 2786              	.LVL184:
 599:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2787              		.loc 1 599 5 is_stmt 1 view .LVU670
 2788 0c70 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2789 0c74 FEFFFFEB 		bl	free		@
 2790              	.LVL185:
 600:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2791              		.loc 1 600 5 view .LVU671
 2792 0c78 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2793 0c7c FEFFFFEB 		bl	free		@
 2794              	.LVL186:
 601:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2795              		.loc 1 601 5 view .LVU672
 2796 0c80 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2797 0c84 FEFFFFEB 		bl	free		@
 2798              	.LVL187:
 602:armwave.c     **** 
 603:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2799              		.loc 1 603 5 view .LVU673
 2800              	@ armwave.c:603:     g_armwave_state.out_pixbuf = NULL;
 2801              		.loc 1 603 32 is_stmt 0 view .LVU674
 2802 0c88 0030A0E3 		mov	r3, #0	@ tmp123,
 2803 0c8c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 604:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2804              		.loc 1 604 5 is_stmt 1 view .LVU675
 2805              	@ armwave.c:604:     g_armwave_state.ch1_buffer = NULL;
 2806              		.loc 1 604 32 is_stmt 0 view .LVU676
 2807 0c90 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 605:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2808              		.loc 1 605 5 is_stmt 1 view .LVU677
 2809              	@ armwave.c:605:     g_armwave_state.xcoord_to_xpixel = NULL;
 2810              		.loc 1 605 38 is_stmt 0 view .LVU678
 2811 0c94 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 606:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2812              		.loc 1 606 5 is_stmt 1 view .LVU679
 2813              	@ armwave.c:606:     g_armwave_state.test_wave_buffer = NULL;
 2814              		.loc 1 606 38 is_stmt 0 view .LVU680
 2815 0c98 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2816              	@ armwave.c:607: }
 607:armwave.c     **** }
 2817              		.loc 1 607 1 view .LVU681
 2818 0c9c 1080BDE8 		pop	{r4, pc}	@
 2819              	.L173:
 2820              		.align	2
 2821              	.L172:
 2822 0ca0 00000000 		.word	g_armwave_state
 2823              		.cfi_endproc
 2824              	.LFE76:
 2826              		.comm	gamma_table,256,4
 2827              		.comm	g_armwave_state,136,4
 2828              		.section	.rodata
 2829              		.align	2
 2830              		.set	.LANCHOR0,. + 0
 2833              	__PRETTY_FUNCTION__.17125:
 2834 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2834      6176655F 
 2834      73657475 
 2834      705F7265 
 2834      6E646572 
 2835 0015 000000   		.space	3
 2838              	__PRETTY_FUNCTION__.17129:
 2839 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2839      6176655F 
 2839      7365745F 
 2839      77617665 
 2839      5F706F69 
 2840 0031 000000   		.space	3
 2843              	__PRETTY_FUNCTION__.17136:
 2844 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2844      6176655F 
 2844      7365745F 
 2844      77617665 
 2844      5F706F69 
 2845              		.section	.rodata.str1.4,"aMS",%progbits,1
 2846              		.align	2
 2847              	.LC0:
 2848 0000 76302E30 		.ascii	"v0.0.1\000"
 2848      2E3100
 2849 0007 00       		.space	1
 2850              	.LC1:
 2851 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2851      61766520 
 2851      76657273 
 2851      696F6E3A 
 2851      2025730A 
 2852 001d 000000   		.space	3
 2853              	.LC2:
 2854 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2854      78253038 
 2854      7820623D 
 2854      30782530 
 2854      38782063 
 2855 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2855      25642073 
 2855      63616C65 
 2855      3D256420 
 2855      62697464 
 2856 0077 00       		.space	1
 2857              	.LC3:
 2858 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 2858      6E643D25 
 2858      640A00
 2859 0083 00       		.space	1
 2860              	.LC4:
 2861 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2861      75742062 
 2861      75666665 
 2861      723A2030 
 2861      78253038 
 2862 009b 00       		.space	1
 2863              	.LC5:
 2864 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2864      65742025 
 2864      64206279 
 2864      7465732C 
 2864      206E7069 
 2865 00cf 30782530 		.ascii	"0x%08x, dest_buffer 0x%08x, stack ~0x%08x\012\000"
 2865      38782C20 
 2865      64657374 
 2865      5F627566 
 2865      66657220 
 2866 00fa 0000     		.space	2
 2867              	.LC6:
 2868 00fc 69746572 		.ascii	"iter...\000"
 2868      2E2E2E00 
 2869              	.LC7:
 2870 0104 30782530 		.ascii	"0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\012\000"
 2870      38782C25 
 2870      36642C25 
 2870      36642C25 
 2870      36642C25 
 2871 0125 000000   		.space	3
 2872              	.LC8:
 2873 0128 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 2873      6F6E6520 
 2873      7061696E 
 2873      74202564 
 2873      20706978 
 2874              	.LC9:
 2875 0144 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2875      6176655F 
 2875      67656E65 
 2875      72617465 
 2875      3A20736C 
 2876 0175 00       		.ascii	"\000"
 2877 0176 0000     		.space	2
 2878              	.LC10:
 2879 0178 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2879      20653D25 
 2879      6420773D 
 2879      25642077 
 2879      733D2564 
 2880              	.LC11:
 2881 01a4 61726D77 		.ascii	"armwave.c\000"
 2881      6176652E 
 2881      6300
 2882 01ae 0000     		.space	2
 2883              	.LC12:
 2884 01b0 73746172 		.ascii	"start_point < end_point\000"
 2884      745F706F 
 2884      696E7420 
 2884      3C20656E 
 2884      645F706F 
 2885              	.LC13:
 2886 01c8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2886      7566665F 
 2886      73697A65 
 2886      3D25642C 
 2886      20636D70 
 2887 01fb 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2887      5F776964 
 2887      74683D25 
 2887      642C2077 
 2887      6176655F 
 2888 0225 000000   		.space	3
 2889              	.LC14:
 2890 0228 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2890      6F632066 
 2890      61696C75 
 2890      72652061 
 2890      6C6C6F63 
 2891 025b 2E636831 		.ascii	".ch1_buffer)\012\000"
 2891      5F627566 
 2891      66657229 
 2891      0A00
 2892 0269 000000   		.space	3
 2893              	.LC15:
 2894 026c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2894      3A203078 
 2894      25303878 
 2894      20307825 
 2894      30387820 
 2895              	.LC16:
 2896 0290 77617665 		.ascii	"wave_buffer != NULL\000"
 2896      5F627566 
 2896      66657220 
 2896      213D204E 
 2896      554C4C00 
 2897              	.LC17:
 2898 02a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2898      6176655F 
 2898      7365745F 
 2898      77617665 
 2898      5F706F69 
 2899 02d7 78636565 		.ascii	"xceeded\000"
 2899      64656400 
 2900 02df 00       		.space	1
 2901              	.LC18:
 2902 02e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2902      5F627566 
 2902      6665725F 
 2902      70747220 
 2902      213D2030 
 2903 02f5 000000   		.space	3
 2904              	.LC19:
 2905 02f8 776200   		.ascii	"wb\000"
 2906 02fb 00       		.space	1
 2907              	.LC20:
 2908 02fc 50330A00 		.ascii	"P3\012\000"
 2909              	.LC21:
 2910 0300 25642025 		.ascii	"%d %d\012\000"
 2910      640A00
 2911 0307 00       		.space	1
 2912              	.LC22:
 2913 0308 3235350A 		.ascii	"255\012\000"
 2913      00
 2914 030d 000000   		.space	3
 2915              	.LC23:
 2916 0310 25336420 		.ascii	"%3d %3d %3d\012\000"
 2916      25336420 
 2916      2533640A 
 2916      00
 2917 031d 000000   		.space	3
 2918              	.LC24:
 2919 0320 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2919      6176655F 
 2919      74657374 
 2919      5F627566 
 2919      6665725F 
 2920 0353 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2920      20627566 
 2920      66657220 
 2920      28256420 
 2920      62797465 
 2921              	.LC25:
 2922 0374 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2922      6176655F 
 2922      66696C6C 
 2922      5F706978 
 2922      6275665F 
 2923 03a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2923      20666169 
 2923      6C65642C 
 2923      20726574 
 2923      75726E69 
 2924 03c6 0000     		.space	2
 2925              	.LC26:
 2926 03c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 2926      756C6174 
 2926      696E6720 
 2926      74657374 
 2926      20736574 
 2927              		.text
 2928              	.Letext0:
 2929              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2930              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2931              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2932              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2933              		.file 7 "/usr/include/stdio.h"
 2934              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2935              		.file 9 "/usr/include/errno.h"
 2936              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2937              		.file 11 "/usr/include/unistd.h"
 2938              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2939              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2940              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2941              		.file 15 "/usr/include/math.h"
 2942              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2943              		.file 17 "/usr/include/time.h"
 2944              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2945              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2946              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2947              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2948              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2949              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2950              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2951              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2952              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2953              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2954              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2955              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2956              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2957              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2958              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2959              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2960              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2961              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2962              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2963              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2964              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2965              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2966              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2967              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2968              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2969              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2970              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2971              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2972              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2973              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2974              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2975              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2976              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2977              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2978              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2979              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2980              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2981              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2982              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2983              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2984              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2985              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2986              		.file 60 "/usr/local/include/python3.8/context.h"
 2987              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2988              		.file 62 "/usr/local/include/python3.8/code.h"
 2989              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2990              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2991              		.file 65 "/usr/local/include/python3.8/import.h"
 2992              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2993              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2994              		.file 68 "/usr/include/malloc.h"
 2995              		.file 69 "armwave.h"
 2996              		.file 70 "/usr/include/stdlib.h"
 2997              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 2998              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2999              		.file 73 "<built-in>"
 3000              		.file 74 "/usr/include/assert.h"
