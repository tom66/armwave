   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** #define TEST_WAVE_SIZE              2048
  27:armwave.c     **** 
  28:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  29:armwave.c     **** 
  30:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  31:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  32:armwave.c     **** 
  33:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  34:armwave.c     **** 
  35:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  36:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  37:armwave.c     **** 
  38:armwave.c     **** struct armwave_state_t g_armwave_state;
  39:armwave.c     **** 
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.41,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.41,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.41,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.41
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.41, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     **** 
  81:armwave.c     ****     //printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 82 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 14D04DE2 		sub	sp, sp, #20	@,,
 249              		.cfi_def_cfa_offset 56
 250              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 251              		.loc 1 82 40 view .LVU32
 252 00a4 64719FE5 		ldr	r7, .L27	@ tmp278,
 253              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 254              		.loc 1 74 1 view .LVU33
 255 00a8 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 256              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 257              		.loc 1 82 63 view .LVU34
 258 00ac 348097E5 		ldr	r8, [r7, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  83:armwave.c     **** 
  84:armwave.c     ****     // roll through each waveform
  85:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 85 5 view .LVU35
 261 00b0 2C3097E5 		ldr	r3, [r7, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 263              		.loc 1 82 40 view .LVU36
 264 00b4 042097E5 		ldr	r2, [r7, #4]	@ _1, g_armwave_state.ch1_buffer
 265              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 85 5 view .LVU37
 267 00b8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 269              		.loc 1 82 63 view .LVU38
 270 00bc 980008E0 		mul	r8, r8, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 271              	.LVL7:
 272              		.loc 1 85 5 is_stmt 1 view .LVU39
 273              		.loc 1 85 5 is_stmt 0 view .LVU40
 274 00c0 5000000A 		beq	.L11		@,
 275 00c4 000051E3 		cmp	r1, #0	@ height,
 276 00c8 4E00000A 		beq	.L11		@,
 277 00cc 043040E2 		sub	r3, r0, #4	@ tmp279, slice_y,
 278 00d0 0C308DE5 		str	r3, [sp, #12]	@ tmp279, %sfp
 279              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 280              		.loc 1 85 11 view .LVU41
 281 00d4 0030A0E3 		mov	r3, #0	@ w,
 282 00d8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 283              	.LVL8:
 284              	.L18:
  86:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 285              		.loc 1 87 9 is_stmt 1 view .LVU42
  88:armwave.c     **** 
  89:armwave.c     ****         // roll through y and render the slice into the out buffer
  90:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  91:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 286              		.loc 1 91 9 view .LVU43
 287              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 288              		.loc 1 87 64 is_stmt 0 view .LVU44
 289 00dc 283097E5 		ldr	r3, [r7, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 290 00e0 08009DE5 		ldr	r0, [sp, #8]	@ w, %sfp
 291 00e4 0CC09DE5 		ldr	ip, [sp, #12]	@ tmp279, %sfp
 292 00e8 149097E5 		ldr	r9, [r7, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 293 00ec 93C023E0 		mla	r3, r3, r0, ip	@ tmp205, g_armwave_state.wave_stride, w, tmp279
 294              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
 295              		.loc 1 91 16 view .LVU45
 296 00f0 0010A0E3 		mov	r1, #0	@ yy,
 297 00f4 039089E0 		add	r9, r9, r3	@ ivtmp.48, g_armwave_state.wave_buffer, tmp205
 298              	.LVL9:
 299              	.L17:
  92:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 300              		.loc 1 92 13 is_stmt 1 view .LVU46
  93:armwave.c     **** 
  94:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  95:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  96:armwave.c     ****                 scale_value = (word & 0xff);
  97:armwave.c     ****                 
  98:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  99:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
 100:armwave.c     ****                     continue;
 101:armwave.c     **** 
 102:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 102 17 view .LVU47
 103:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 302              		.loc 1 103 17 view .LVU48
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 303              		.loc 1 102 17 view .LVU49
 304              		.loc 1 103 17 view .LVU50
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 102 17 view .LVU51
 306              		.loc 1 103 17 view .LVU52
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 307              		.loc 1 102 17 view .LVU53
 308              		.loc 1 103 17 view .LVU54
 309              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
  92:armwave.c     **** 
 310              		.loc 1 92 18 is_stmt 0 view .LVU55
 311 00f8 0430B9E5 		ldr	r3, [r9, #4]!	@ word, MEM[base: _158, offset: 0B]
 312              	.LVL10:
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 313              		.loc 1 94 13 is_stmt 1 view .LVU56
  96:armwave.c     ****                 
 314              		.loc 1 96 17 view .LVU57
  99:armwave.c     ****                     continue;
 315              		.loc 1 99 17 view .LVU58
 316              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 317              		.loc 1 102 63 is_stmt 0 view .LVU59
 318 00fc 01A081E2 		add	r10, r1, #1	@ tmp232, yy,
 319              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 320              		.loc 1 99 20 view .LVU60
 321 0100 FFB013E2 		ands	fp, r3, #255	@ scale_value, word,
 322 0104 0160A003 		moveq	r6, #1	@ tmp208,
 323 0108 0060A013 		movne	r6, #0	@ tmp208,
 324              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 325              		.loc 1 99 19 view .LVU61
 326 010c FF005BE3 		cmp	fp, #255	@ scale_value,
 327 0110 01608603 		orreq	r6, r6, #1	@,, tmp213, tmp208
 328 0114 000056E3 		cmp	r6, #0	@ tmp213,
 329              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 102 63 view .LVU62
 331 0118 024081E2 		add	r4, r1, #2	@ tmp250, yy,
 332 011c 03E081E2 		add	lr, r1, #3	@ tmp266, yy,
 333              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 103 47 view .LVU63
 335 0120 08508BE0 		add	r5, fp, r8	@ tmp217, scale_value, _3
 336              	@ armwave.c:104:                 word >>= 8;
 104:armwave.c     ****                 word >>= 8;
 337              		.loc 1 104 22 view .LVU64
 338 0124 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 339 0128 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 340              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 341              		.loc 1 99 19 view .LVU65
 342 012c 2B00001A 		bne	.L20		@,
 343              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 344              		.loc 1 102 63 view .LVU66
 345 0130 346097E5 		ldr	r6, [r7, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 346              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 347              		.loc 1 99 20 view .LVU67
 348 0134 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 349              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 350              		.loc 1 103 47 view .LVU68
 351 0138 08B08CE0 		add	fp, ip, r8	@ tmp235, scale_value, _3
 352 013c 965125E0 		mla	r5, r6, r1, r5	@ tmp218, g_armwave_state.bitdepth_height, yy, tmp217
 353              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 354              		.loc 1 99 20 view .LVU69
 355 0140 0160A003 		moveq	r6, #1	@ tmp225,
 356 0144 0060A013 		movne	r6, #0	@ tmp225,
 357              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 358              		.loc 1 99 19 view .LVU70
 359 0148 FF005CE3 		cmp	ip, #255	@ scale_value,
 360 014c 06C0A011 		movne	ip, r6	@, tmp230, tmp225
 361 0150 01C08603 		orreq	ip, r6, #1	@,, tmp230, tmp225
 362              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 363              		.loc 1 103 47 view .LVU71
 364 0154 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 365              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 366              		.loc 1 99 19 view .LVU72
 367 0158 00005CE3 		cmp	ip, #0	@ tmp230,
 368              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 369              		.loc 1 103 47 view .LVU73
 370 015c 016086E2 		add	r6, r6, #1	@ tmp221, *_67,
 371 0160 0560C2E7 		strb	r6, [r2, r5]	@ tmp221, *_67
 372              	.LVL11:
 373              		.loc 1 104 17 is_stmt 1 view .LVU74
  96:armwave.c     ****                 
 374              		.loc 1 96 17 view .LVU75
  99:armwave.c     ****                     continue;
 375              		.loc 1 99 17 view .LVU76
 376              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 377              		.loc 1 99 19 is_stmt 0 view .LVU77
 378 0164 1D00001A 		bne	.L20		@,
 379              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 380              		.loc 1 102 63 view .LVU78
 381 0168 34C097E5 		ldr	ip, [r7, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 382              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 383              		.loc 1 99 20 view .LVU79
 384 016c FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 385              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 386              		.loc 1 103 47 view .LVU80
 387 0170 085080E0 		add	r5, r0, r8	@ tmp253, scale_value, _3
 388 0174 9CBA2AE0 		mla	r10, ip, r10, fp	@ tmp236, g_armwave_state.bitdepth_height, tmp232, tmp235
 389              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 390              		.loc 1 99 20 view .LVU81
 391 0178 01C0A003 		moveq	ip, #1	@ tmp243,
 392 017c 00C0A013 		movne	ip, #0	@ tmp243,
 393              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 394              		.loc 1 99 19 view .LVU82
 395 0180 FF0050E3 		cmp	r0, #255	@ scale_value,
 396 0184 01C08C03 		orreq	ip, ip, #1	@,, tmp248, tmp243
 397              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 398              		.loc 1 103 47 view .LVU83
 399 0188 0A00D2E7 		ldrb	r0, [r2, r10]	@ zero_extendqisi2	@ *_94, *_94
 400              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 401              		.loc 1 99 19 view .LVU84
 402 018c 00005CE3 		cmp	ip, #0	@ tmp248,
 403              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 404              		.loc 1 103 47 view .LVU85
 405 0190 010080E2 		add	r0, r0, #1	@ tmp239, *_94,
 406 0194 0A00C2E7 		strb	r0, [r2, r10]	@ tmp239, *_94
 407              		.loc 1 104 17 is_stmt 1 view .LVU86
 408              	.LVL12:
  96:armwave.c     ****                 
 409              		.loc 1 96 17 view .LVU87
  99:armwave.c     ****                     continue;
 410              		.loc 1 99 17 view .LVU88
 411              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 412              		.loc 1 99 19 is_stmt 0 view .LVU89
 413 0198 1000001A 		bne	.L20		@,
 414              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 415              		.loc 1 102 63 view .LVU90
 416 019c 34C097E5 		ldr	ip, [r7, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 417              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 418              		.loc 1 99 20 view .LVU91
 419 01a0 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 420              	.LVL13:
 421              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 422              		.loc 1 103 47 view .LVU92
 423 01a4 030088E0 		add	r0, r8, r3	@ tmp270, _3, word
 424 01a8 9C5424E0 		mla	r4, ip, r4, r5	@ tmp254, g_armwave_state.bitdepth_height, tmp250, tmp253
 425              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 426              		.loc 1 99 20 view .LVU93
 427 01ac 01C0A003 		moveq	ip, #1	@ tmp260,
 428 01b0 00C0A013 		movne	ip, #0	@ tmp260,
 429              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 430              		.loc 1 99 19 view .LVU94
 431 01b4 FF0053E3 		cmp	r3, #255	@ word,
 432 01b8 01C08C03 		orreq	ip, ip, #1	@,, tmp265, tmp260
 433              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 434              		.loc 1 103 47 view .LVU95
 435 01bc 0430D2E7 		ldrb	r3, [r2, r4]	@ zero_extendqisi2	@ *_121, *_121
 436              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 437              		.loc 1 99 19 view .LVU96
 438 01c0 00005CE3 		cmp	ip, #0	@ tmp265,
 439              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 440              		.loc 1 103 47 view .LVU97
 441 01c4 013083E2 		add	r3, r3, #1	@ tmp257, *_121,
 442 01c8 0430C2E7 		strb	r3, [r2, r4]	@ tmp257, *_121
 443              		.loc 1 104 17 is_stmt 1 view .LVU98
 444              	.LVL14:
  96:armwave.c     ****                 
 445              		.loc 1 96 17 view .LVU99
  99:armwave.c     ****                     continue;
 446              		.loc 1 99 17 view .LVU100
 447              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 448              		.loc 1 102 63 is_stmt 0 view .LVU101
 449 01cc 34309705 		ldreq	r3, [r7, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 450              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 451              		.loc 1 103 47 view .LVU102
 452 01d0 930E2E00 		mlaeq	lr, r3, lr, r0	@ tmp271, g_armwave_state.bitdepth_height, tmp266, tmp270
 453 01d4 0E30D207 		ldrbeq	r3, [r2, lr]	@ zero_extendqisi2	@ *_148, *_148
 454 01d8 01308302 		addeq	r3, r3, #1	@ tmp274, *_148,
 455 01dc 0E30C207 		strbeq	r3, [r2, lr]	@ tmp274, *_148
 456              		.loc 1 104 17 is_stmt 1 view .LVU103
 457              	.LVL15:
 458              	.L20:
 459              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 460              		.loc 1 91 9 is_stmt 0 view .LVU104
 461 01e0 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 462              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 463              		.loc 1 91 37 view .LVU105
 464 01e4 041081E2 		add	r1, r1, #4	@ yy, yy,
 465              	.LVL16:
 466              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 467              		.loc 1 91 9 view .LVU106
 468 01e8 010053E1 		cmp	r3, r1	@ height, yy
 469 01ec C1FFFF8A 		bhi	.L17		@,
 470              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 471              		.loc 1 85 44 view .LVU107
 472 01f0 08109DE5 		ldr	r1, [sp, #8]	@ w, %sfp
 473              	.LVL17:
 474              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 475              		.loc 1 85 5 view .LVU108
 476 01f4 2C3097E5 		ldr	r3, [r7, #44]	@ g_armwave_state.waves, g_armwave_state.waves
 477              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 478              		.loc 1 85 44 view .LVU109
 479 01f8 011081E2 		add	r1, r1, #1	@ w, w,
 480              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 481              		.loc 1 85 5 view .LVU110
 482 01fc 030051E1 		cmp	r1, r3	@ w, g_armwave_state.waves
 483              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 484              		.loc 1 85 44 view .LVU111
 485 0200 08108DE5 		str	r1, [sp, #8]	@ w, %sfp
 486              	.LVL18:
 487              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 488              		.loc 1 85 5 view .LVU112
 489 0204 B4FFFF3A 		bcc	.L18		@,
 490              	.LVL19:
 491              	.L11:
 492              	@ armwave.c:108: }
 105:armwave.c     ****             }
 106:armwave.c     ****         }
 107:armwave.c     ****     }
 108:armwave.c     **** }
 493              		.loc 1 108 1 view .LVU113
 494 0208 14D08DE2 		add	sp, sp, #20	@,,
 495              		.cfi_def_cfa_offset 36
 496              		@ sp needed	@
 497 020c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 498              	.LVL20:
 499              	.L28:
 500              		.loc 1 108 1 view .LVU114
 501              		.align	2
 502              	.L27:
 503 0210 00000000 		.word	g_armwave_state
 504              		.cfi_endproc
 505              	.LFE59:
 507              		.align	2
 508              		.global	armwave_fill_pixbuf_256
 509              		.syntax unified
 510              		.arm
 511              		.fpu vfp
 513              	armwave_fill_pixbuf_256:
 514              	.LVL21:
 515              	.LFB60:
 109:armwave.c     **** 
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 516              		.loc 1 114 1 is_stmt 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 8
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 520              		.loc 1 115 5 view .LVU116
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 521              		.loc 1 116 5 view .LVU117
 117:armwave.c     ****     uint8_t r, g, b, value;
 522              		.loc 1 117 5 view .LVU118
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 523              		.loc 1 118 5 view .LVU119
 524              	@ armwave.c:114: {
 114:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 525              		.loc 1 114 1 is_stmt 0 view .LVU120
 526 0214 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 527              		.cfi_def_cfa_offset 36
 528              		.cfi_offset 4, -36
 529              		.cfi_offset 5, -32
 530              		.cfi_offset 6, -28
 531              		.cfi_offset 7, -24
 532              		.cfi_offset 8, -20
 533              		.cfi_offset 9, -16
 534              		.cfi_offset 10, -12
 535              		.cfi_offset 11, -8
 536              		.cfi_offset 14, -4
 537              	@ armwave.c:122:     assert(out_buffer != NULL);
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 538              		.loc 1 122 5 view .LVU121
 539 0218 000050E3 		cmp	r0, #0	@ out_buffer
 540              	@ armwave.c:118:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 118:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 541              		.loc 1 118 15 view .LVU122
 542 021c 44529FE5 		ldr	r5, .L56	@ tmp360,
 543              	@ armwave.c:114: {
 114:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 544              		.loc 1 114 1 view .LVU123
 545 0220 0CD04DE2 		sub	sp, sp, #12	@,,
 546              		.cfi_def_cfa_offset 48
 547              	@ armwave.c:118:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 118:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 548              		.loc 1 118 15 view .LVU124
 549 0224 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 550              	.LVL22:
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 551              		.loc 1 119 5 is_stmt 1 view .LVU125
 120:armwave.c     **** 
 552              		.loc 1 120 5 view .LVU126
 553              		.loc 1 122 5 view .LVU127
 554 0228 8900000A 		beq	.L54		@,
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 555              		.loc 1 126 5 view .LVU128
 556              	@ armwave.c:126:     npix = g_armwave_state.target_width * 256;
 557              		.loc 1 126 41 is_stmt 0 view .LVU129
 558 022c 4CC095E5 		ldr	ip, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 559 0230 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 560              	.LVL23:
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 561              		.loc 1 128 5 is_stmt 1 view .LVU130
 562              		.loc 1 128 5 is_stmt 0 view .LVU131
 563 0234 00005CE3 		cmp	ip, #0	@ npix,
 564 0238 0A0000DA 		ble	.L29		@,
 565              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 566              		.loc 1 140 52 view .LVU132
 567 023c F0A6D5E1 		ldrsh	r10, [r5, #96]	@ _70, g_armwave_state.ch1_color.r
 568              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 569              		.loc 1 141 52 view .LVU133
 570 0240 F296D5E1 		ldrsh	r9, [r5, #98]	@ _76, g_armwave_state.ch1_color.g
 571              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 572              		.loc 1 142 52 view .LVU134
 573 0244 F4B6D5E1 		ldrsh	fp, [r5, #100]	@ _80, g_armwave_state.ch1_color.b
 574              	@ armwave.c:128:     for(n = 0; n < npix; n += 4) {
 128:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 575              		.loc 1 128 11 view .LVU135
 576 0248 0030A0E3 		mov	r3, #0	@ n,
 577 024c 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 578              	.LVL24:
 579              	.L38:
 132:armwave.c     **** 
 580              		.loc 1 132 9 is_stmt 1 view .LVU136
 581              	@ armwave.c:132:         wave_word = *base_32ptr++;
 132:armwave.c     **** 
 582              		.loc 1 132 19 is_stmt 0 view .LVU137
 583 0250 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 584              	.LVL25:
 134:armwave.c     ****             for(i = 0; i < 4; i++) {
 585              		.loc 1 134 9 is_stmt 1 view .LVU138
 586              	@ armwave.c:134:         if(COND_UNLIKELY(wave_word != 0)) {
 134:armwave.c     ****             for(i = 0; i < 4; i++) {
 587              		.loc 1 134 11 is_stmt 0 view .LVU139
 588 0254 000052E3 		cmp	r2, #0	@ wave_word,
 589 0258 0400001A 		bne	.L55		@,
 590              	.LVL26:
 591              	.L33:
 592              	@ armwave.c:128:     for(n = 0; n < npix; n += 4) {
 128:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 593              		.loc 1 128 28 discriminator 2 view .LVU140
 594 025c 043083E2 		add	r3, r3, #4	@ n, n,
 595              	.LVL27:
 596              	@ armwave.c:128:     for(n = 0; n < npix; n += 4) {
 128:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 597              		.loc 1 128 5 discriminator 2 view .LVU141
 598 0260 03005CE1 		cmp	ip, r3	@ npix, n
 599 0264 F9FFFFCA 		bgt	.L38		@,
 600              	.LVL28:
 601              	.L29:
 602              	@ armwave.c:161: }
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 603              		.loc 1 161 1 view .LVU142
 604 0268 0CD08DE2 		add	sp, sp, #12	@,,
 605              		.cfi_remember_state
 606              		.cfi_def_cfa_offset 36
 607              		@ sp needed	@
 608 026c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 609              	.LVL29:
 610              	.L55:
 611              		.cfi_restore_state
 136:armwave.c     ****                 wave_word >>= 8;
 612              		.loc 1 136 17 is_stmt 1 view .LVU143
 137:armwave.c     **** 
 613              		.loc 1 137 17 view .LVU144
 614              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 615              		.loc 1 139 19 is_stmt 0 view .LVU145
 616 0270 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 617              	@ armwave.c:137:                 wave_word >>= 8;
 137:armwave.c     **** 
 618              		.loc 1 137 27 view .LVU146
 619 0274 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 620              	.LVL30:
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 621              		.loc 1 139 17 is_stmt 1 view .LVU147
 622              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 139 19 is_stmt 0 view .LVU148
 624 0278 1900000A 		beq	.L34		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 625              		.loc 1 140 21 is_stmt 1 view .LVU149
 626              	.LVL31:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 627              		.loc 1 141 21 view .LVU150
 142:armwave.c     **** 
 628              		.loc 1 142 21 view .LVU151
 144:armwave.c     ****                     g = MIN(gg, 255);
 629              		.loc 1 144 21 view .LVU152
 145:armwave.c     ****                     b = MIN(bb, 255);
 630              		.loc 1 145 21 view .LVU153
 146:armwave.c     **** 
 631              		.loc 1 146 21 view .LVU154
 149:armwave.c     **** 
 632              		.loc 1 149 21 view .LVU155
 152:armwave.c     ****                     xx = nsub & 0xff;
 633              		.loc 1 152 21 view .LVU156
 153:armwave.c     ****                     yy = nsub >> 8;
 634              		.loc 1 153 21 view .LVU157
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 635              		.loc 1 154 21 view .LVU158
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 636              		.loc 1 155 21 view .LVU159
 156:armwave.c     ****                 }
 637              		.loc 1 156 21 view .LVU160
 638              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 639              		.loc 1 142 55 is_stmt 0 view .LVU161
 640 027c 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 641              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 642              		.loc 1 141 55 view .LVU162
 643 0280 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 644              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 645              		.loc 1 142 24 view .LVU163
 646 0284 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 647              	.LVL32:
 648              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 649              		.loc 1 146 25 view .LVU164
 650 0288 FF0054E3 		cmp	r4, #255	@ bb,
 651              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 652              		.loc 1 141 24 view .LVU165
 653 028c 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 654              	.LVL33:
 655              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 656              		.loc 1 146 25 view .LVU166
 657 0290 FF40A0A3 		movge	r4, #255	@ bb,
 658              	.LVL34:
 659              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 660              		.loc 1 140 55 view .LVU167
 661 0294 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 662              	.LVL35:
 663              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 664              		.loc 1 145 25 view .LVU168
 665 0298 FF0058E3 		cmp	r8, #255	@ gg,
 666 029c FF80A0A3 		movge	r8, #255	@ gg,
 667              	.LVL36:
 668              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 669              		.loc 1 140 24 view .LVU169
 670 02a0 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 671              	.LVL37:
 672              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 673              		.loc 1 149 56 view .LVU170
 674 02a4 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 675              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 676              		.loc 1 156 39 view .LVU171
 677 02a8 4C0095E5 		ldr	r0, [r5, #76]	@ tmp372, g_armwave_state.target_width
 678              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 679              		.loc 1 149 44 view .LVU172
 680 02ac 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 681              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 682              		.loc 1 144 25 view .LVU173
 683 02b0 FF0056E3 		cmp	r6, #255	@ rr,
 684              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 685              		.loc 1 149 56 view .LVU174
 686 02b4 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 687              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 688              		.loc 1 153 24 view .LVU175
 689 02b8 7370EFE6 		uxtb	r7, r3	@ xx, n
 690              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 691              		.loc 1 149 44 view .LVU176
 692 02bc FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 693              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 694              		.loc 1 149 51 view .LVU177
 695 02c0 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 696              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 697              		.loc 1 144 25 view .LVU178
 698 02c4 FF60A0A3 		movge	r6, #255	@ rr,
 699              	.LVL38:
 700              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 701              		.loc 1 154 31 view .LVU179
 702 02c8 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 703              	.LVL39:
 704              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 705              		.loc 1 156 39 view .LVU180
 706 02cc 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 707              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 708              		.loc 1 149 62 view .LVU181
 709 02d0 7660EFE6 		uxtb	r6, r6	@ rr, rr
 710              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 711              		.loc 1 156 49 view .LVU182
 712 02d4 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 713              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 714              		.loc 1 149 62 view .LVU183
 715 02d8 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 716              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 717              		.loc 1 149 26 view .LVU184
 718 02dc FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 719              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 720              		.loc 1 156 49 view .LVU185
 721 02e0 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 722              	.LVL40:
 723              	.L34:
 136:armwave.c     ****                 wave_word >>= 8;
 724              		.loc 1 136 17 is_stmt 1 view .LVU186
 137:armwave.c     **** 
 725              		.loc 1 137 17 view .LVU187
 726              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 727              		.loc 1 139 19 is_stmt 0 view .LVU188
 728 02e4 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 729              	.LVL41:
 730              	@ armwave.c:137:                 wave_word >>= 8;
 137:armwave.c     **** 
 731              		.loc 1 137 27 view .LVU189
 732 02e8 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 733              	.LVL42:
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 139 17 is_stmt 1 view .LVU190
 735              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 736              		.loc 1 139 19 is_stmt 0 view .LVU191
 737 02ec 1C00000A 		beq	.L35		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 738              		.loc 1 140 21 is_stmt 1 view .LVU192
 739              	.LVL43:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 740              		.loc 1 141 21 view .LVU193
 142:armwave.c     **** 
 741              		.loc 1 142 21 view .LVU194
 144:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 144 21 view .LVU195
 145:armwave.c     ****                     b = MIN(bb, 255);
 743              		.loc 1 145 21 view .LVU196
 146:armwave.c     **** 
 744              		.loc 1 146 21 view .LVU197
 149:armwave.c     **** 
 745              		.loc 1 149 21 view .LVU198
 152:armwave.c     ****                     xx = nsub & 0xff;
 746              		.loc 1 152 21 view .LVU199
 747              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 748              		.loc 1 142 55 is_stmt 0 view .LVU200
 749 02f0 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 750              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 141 55 view .LVU201
 752 02f4 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 753              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 754              		.loc 1 142 24 view .LVU202
 755 02f8 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 756              	.LVL44:
 757              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 758              		.loc 1 146 25 view .LVU203
 759 02fc FF0054E3 		cmp	r4, #255	@ bb,
 760 0300 FF40A0A3 		movge	r4, #255	@ bb,
 761              	.LVL45:
 762              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 763              		.loc 1 140 55 view .LVU204
 764 0304 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 765              	.LVL46:
 766              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 767              		.loc 1 141 24 view .LVU205
 768 0308 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 769              	.LVL47:
 770              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 771              		.loc 1 149 44 view .LVU206
 772 030c 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 773              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 774              		.loc 1 145 25 view .LVU207
 775 0310 FF0057E3 		cmp	r7, #255	@ gg,
 776 0314 016083E2 		add	r6, r3, #1	@ _158, n,
 153:armwave.c     ****                     yy = nsub >> 8;
 777              		.loc 1 153 21 is_stmt 1 view .LVU208
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 778              		.loc 1 154 21 view .LVU209
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 779              		.loc 1 155 21 view .LVU210
 156:armwave.c     ****                 }
 780              		.loc 1 156 21 view .LVU211
 781              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 782              		.loc 1 149 44 is_stmt 0 view .LVU212
 783 0318 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 784              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 785              		.loc 1 145 25 view .LVU213
 786 031c FF70A0A3 		movge	r7, #255	@ gg,
 787              	.LVL48:
 788              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 789              		.loc 1 149 44 view .LVU214
 790 0320 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 791              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 792              		.loc 1 156 39 view .LVU215
 793 0324 4C4095E5 		ldr	r4, [r5, #76]	@ tmp375, g_armwave_state.target_width
 794              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 795              		.loc 1 140 24 view .LVU216
 796 0328 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 797              	.LVL49:
 798              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 799              		.loc 1 153 24 view .LVU217
 800 032c 7600EFE6 		uxtb	r0, r6	@ xx, _158
 801              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 802              		.loc 1 144 25 view .LVU218
 803 0330 FF005EE3 		cmp	lr, #255	@ rr,
 804              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 805              		.loc 1 149 56 view .LVU219
 806 0334 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 807              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 808              		.loc 1 154 31 view .LVU220
 809 0338 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 810              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 811              		.loc 1 156 39 view .LVU221
 812 033c 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 813              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 814              		.loc 1 144 25 view .LVU222
 815 0340 FFE0A0A3 		movge	lr, #255	@ rr,
 816              	.LVL50:
 817              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 818              		.loc 1 149 51 view .LVU223
 819 0344 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 820              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 821              		.loc 1 149 56 view .LVU224
 822 0348 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 823              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 824              		.loc 1 149 51 view .LVU225
 825 034c 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 826              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 827              		.loc 1 149 62 view .LVU226
 828 0350 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 829              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 830              		.loc 1 156 49 view .LVU227
 831 0354 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 832              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 833              		.loc 1 149 62 view .LVU228
 834 0358 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 835              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 836              		.loc 1 149 26 view .LVU229
 837 035c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 838              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 839              		.loc 1 156 49 view .LVU230
 840 0360 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 841              	.LVL51:
 842              	.L35:
 136:armwave.c     ****                 wave_word >>= 8;
 843              		.loc 1 136 17 is_stmt 1 view .LVU231
 137:armwave.c     **** 
 844              		.loc 1 137 17 view .LVU232
 845              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 846              		.loc 1 139 19 is_stmt 0 view .LVU233
 847 0364 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 848              	@ armwave.c:137:                 wave_word >>= 8;
 137:armwave.c     **** 
 849              		.loc 1 137 27 view .LVU234
 850 0368 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 851              	.LVL52:
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 852              		.loc 1 139 17 is_stmt 1 view .LVU235
 853              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 854              		.loc 1 139 19 is_stmt 0 view .LVU236
 855 036c 1A00000A 		beq	.L36		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 856              		.loc 1 140 21 is_stmt 1 view .LVU237
 857              	.LVL53:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 858              		.loc 1 141 21 view .LVU238
 142:armwave.c     **** 
 859              		.loc 1 142 21 view .LVU239
 144:armwave.c     ****                     g = MIN(gg, 255);
 860              		.loc 1 144 21 view .LVU240
 145:armwave.c     ****                     b = MIN(bb, 255);
 861              		.loc 1 145 21 view .LVU241
 146:armwave.c     **** 
 862              		.loc 1 146 21 view .LVU242
 149:armwave.c     **** 
 863              		.loc 1 149 21 view .LVU243
 152:armwave.c     ****                     xx = nsub & 0xff;
 864              		.loc 1 152 21 view .LVU244
 865              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 866              		.loc 1 142 55 is_stmt 0 view .LVU245
 867 0370 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 868              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 869              		.loc 1 141 55 view .LVU246
 870 0374 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 871              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 872              		.loc 1 142 24 view .LVU247
 873 0378 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 874              	.LVL54:
 875              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 876              		.loc 1 140 55 view .LVU248
 877 037c 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 878              	.LVL55:
 879              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 880              		.loc 1 146 25 view .LVU249
 881 0380 FF0054E3 		cmp	r4, #255	@ bb,
 882              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 883              		.loc 1 141 24 view .LVU250
 884 0384 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 885              	.LVL56:
 886              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 887              		.loc 1 146 25 view .LVU251
 888 0388 FF40A0A3 		movge	r4, #255	@ bb,
 889              	.LVL57:
 890              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 891              		.loc 1 145 25 view .LVU252
 892 038c FF0056E3 		cmp	r6, #255	@ gg,
 893 0390 FF60A0A3 		movge	r6, #255	@ gg,
 894              	.LVL58:
 145:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 145 25 view .LVU253
 896 0394 027083E2 		add	r7, r3, #2	@ _66, n,
 153:armwave.c     ****                     yy = nsub >> 8;
 897              		.loc 1 153 21 is_stmt 1 view .LVU254
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 898              		.loc 1 154 21 view .LVU255
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 899              		.loc 1 155 21 view .LVU256
 156:armwave.c     ****                 }
 900              		.loc 1 156 21 view .LVU257
 901              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 902              		.loc 1 140 24 is_stmt 0 view .LVU258
 903 0398 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 904              	.LVL59:
 905              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 906              		.loc 1 156 39 view .LVU259
 907 039c 4C0095E5 		ldr	r0, [r5, #76]	@ tmp376, g_armwave_state.target_width
 908              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 909              		.loc 1 144 25 view .LVU260
 910 03a0 FF005EE3 		cmp	lr, #255	@ rr,
 911              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 912              		.loc 1 153 24 view .LVU261
 913 03a4 7780EFE6 		uxtb	r8, r7	@ xx, _66
 914              	.LVL60:
 915              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 916              		.loc 1 149 56 view .LVU262
 917 03a8 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 918              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 919              		.loc 1 149 44 view .LVU263
 920 03ac 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 921              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 922              		.loc 1 144 25 view .LVU264
 923 03b0 FFE0A0A3 		movge	lr, #255	@ rr,
 924              	.LVL61:
 925              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 926              		.loc 1 154 31 view .LVU265
 927 03b4 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 928              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 929              		.loc 1 156 39 view .LVU266
 930 03b8 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 931              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 932              		.loc 1 149 44 view .LVU267
 933 03bc FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 934              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 935              		.loc 1 149 56 view .LVU268
 936 03c0 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 937              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 938              		.loc 1 149 51 view .LVU269
 939 03c4 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 940              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 941              		.loc 1 149 62 view .LVU270
 942 03c8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 943              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 944              		.loc 1 156 49 view .LVU271
 945 03cc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 946              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 947              		.loc 1 149 62 view .LVU272
 948 03d0 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 949              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 950              		.loc 1 149 26 view .LVU273
 951 03d4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 952              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 953              		.loc 1 156 49 view .LVU274
 954 03d8 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 955              	.L36:
 956              	.LVL62:
 136:armwave.c     ****                 wave_word >>= 8;
 957              		.loc 1 136 17 is_stmt 1 view .LVU275
 137:armwave.c     **** 
 958              		.loc 1 137 17 view .LVU276
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 959              		.loc 1 139 17 view .LVU277
 960              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 961              		.loc 1 139 19 is_stmt 0 view .LVU278
 962 03dc 000052E3 		cmp	r2, #0	@ wave_word,
 963 03e0 9DFFFF0A 		beq	.L33		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 964              		.loc 1 140 21 is_stmt 1 view .LVU279
 965              	.LVL63:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 966              		.loc 1 141 21 view .LVU280
 142:armwave.c     **** 
 967              		.loc 1 142 21 view .LVU281
 144:armwave.c     ****                     g = MIN(gg, 255);
 968              		.loc 1 144 21 view .LVU282
 145:armwave.c     ****                     b = MIN(bb, 255);
 969              		.loc 1 145 21 view .LVU283
 146:armwave.c     **** 
 970              		.loc 1 146 21 view .LVU284
 149:armwave.c     **** 
 971              		.loc 1 149 21 view .LVU285
 152:armwave.c     ****                     xx = nsub & 0xff;
 972              		.loc 1 152 21 view .LVU286
 973              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 974              		.loc 1 142 55 is_stmt 0 view .LVU287
 975 03e4 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 976              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 977              		.loc 1 141 55 view .LVU288
 978 03e8 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 979              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 980              		.loc 1 142 24 view .LVU289
 981 03ec 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 982              	.LVL64:
 983              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 984              		.loc 1 140 55 view .LVU290
 985 03f0 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 986              	.LVL65:
 987              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 988              		.loc 1 146 25 view .LVU291
 989 03f4 FF005EE3 		cmp	lr, #255	@ bb,
 990              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 991              		.loc 1 141 24 view .LVU292
 992 03f8 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 993              	.LVL66:
 994              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 995              		.loc 1 146 25 view .LVU293
 996 03fc FFE0A0A3 		movge	lr, #255	@ bb,
 997              	.LVL67:
 998              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 999              		.loc 1 145 25 view .LVU294
 1000 0400 FF0054E3 		cmp	r4, #255	@ gg,
 1001 0404 FF40A0A3 		movge	r4, #255	@ gg,
 1002              	.LVL68:
 145:armwave.c     ****                     b = MIN(bb, 255);
 1003              		.loc 1 145 25 view .LVU295
 1004 0408 036083E2 		add	r6, r3, #3	@ _59, n,
 153:armwave.c     ****                     yy = nsub >> 8;
 1005              		.loc 1 153 21 is_stmt 1 view .LVU296
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1006              		.loc 1 154 21 view .LVU297
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1007              		.loc 1 155 21 view .LVU298
 156:armwave.c     ****                 }
 1008              		.loc 1 156 21 view .LVU299
 1009              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1010              		.loc 1 140 24 is_stmt 0 view .LVU300
 1011 040c 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 1012              	.LVL69:
 1013              	@ armwave.c:155:                     offset = yy + (xx * g_armwave_state.target_width);
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1014              		.loc 1 155 39 view .LVU301
 1015 0410 4C7095E5 		ldr	r7, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1016              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 1017              		.loc 1 144 25 view .LVU302
 1018 0414 FF0052E3 		cmp	r2, #255	@ rr,
 1019              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 1020              		.loc 1 153 24 view .LVU303
 1021 0418 7680EFE6 		uxtb	r8, r6	@ xx, _59
 1022              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1023              		.loc 1 149 56 view .LVU304
 1024 041c 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 1025              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1026              		.loc 1 149 44 view .LVU305
 1027 0420 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 1028              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 1029              		.loc 1 144 25 view .LVU306
 1030 0424 FF20A0A3 		movge	r2, #255	@ rr,
 1031              	.LVL70:
 1032              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1033              		.loc 1 154 31 view .LVU307
 1034 0428 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 1035              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1036              		.loc 1 149 44 view .LVU308
 1037 042c FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 1038              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1039              		.loc 1 149 56 view .LVU309
 1040 0430 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 1041              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 1042              		.loc 1 156 39 view .LVU310
 1043 0434 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 1044              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1045              		.loc 1 149 51 view .LVU311
 1046 0438 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 1047              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1048              		.loc 1 149 62 view .LVU312
 1049 043c 7220EFE6 		uxtb	r2, r2	@ rr, rr
 1050              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 1051              		.loc 1 156 49 view .LVU313
 1052 0440 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1053              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1054              		.loc 1 149 62 view .LVU314
 1055 0444 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 1056              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1057              		.loc 1 149 26 view .LVU315
 1058 0448 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 1059              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 1060              		.loc 1 156 49 view .LVU316
 1061 044c 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 1062 0450 81FFFFEA 		b	.L33		@
 1063              	.LVL71:
 1064              	.L54:
 122:armwave.c     **** 
 1065              		.loc 1 122 5 is_stmt 1 discriminator 1 view .LVU317
 1066 0454 10309FE5 		ldr	r3, .L56+4	@,
 1067 0458 7A20A0E3 		mov	r2, #122	@,
 1068 045c 0C109FE5 		ldr	r1, .L56+8	@,
 1069              	.LVL72:
 122:armwave.c     **** 
 1070              		.loc 1 122 5 is_stmt 0 discriminator 1 view .LVU318
 1071 0460 0C009FE5 		ldr	r0, .L56+12	@,
 1072              	.LVL73:
 122:armwave.c     **** 
 1073              		.loc 1 122 5 discriminator 1 view .LVU319
 1074 0464 FEFFFFEB 		bl	__assert_fail		@
 1075              	.LVL74:
 1076              	.L57:
 122:armwave.c     **** 
 1077              		.loc 1 122 5 discriminator 1 view .LVU320
 1078              		.align	2
 1079              	.L56:
 1080 0468 00000000 		.word	g_armwave_state
 1081 046c 00000000 		.word	.LANCHOR0
 1082 0470 20000000 		.word	.LC2
 1083 0474 2C000000 		.word	.LC3
 1084              		.cfi_endproc
 1085              	.LFE60:
 1087              		.align	2
 1088              		.global	armwave_fill_pixbuf_scaled
 1089              		.syntax unified
 1090              		.arm
 1091              		.fpu vfp
 1093              	armwave_fill_pixbuf_scaled:
 1094              	.LVL75:
 1095              	.LFB61:
 162:armwave.c     **** 
 163:armwave.c     **** /*
 164:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 165:armwave.c     ****  * Rows are repeated as necessary.
 166:armwave.c     ****  */
 167:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 168:armwave.c     **** {
 1096              		.loc 1 168 1 is_stmt 1 view -0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 169:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1100              		.loc 1 169 5 view .LVU322
 170:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 1101              		.loc 1 170 5 view .LVU323
 171:armwave.c     ****     uint8_t r, g, b, value, row;
 1102              		.loc 1 171 5 view .LVU324
 172:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1103              		.loc 1 172 5 view .LVU325
 1104              	@ armwave.c:168: {
 168:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1105              		.loc 1 168 1 is_stmt 0 view .LVU326
 1106 0478 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1107              		.cfi_def_cfa_offset 36
 1108              		.cfi_offset 4, -36
 1109              		.cfi_offset 5, -32
 1110              		.cfi_offset 6, -28
 1111              		.cfi_offset 7, -24
 1112              		.cfi_offset 8, -20
 1113              		.cfi_offset 9, -16
 1114              		.cfi_offset 10, -12
 1115              		.cfi_offset 11, -8
 1116              		.cfi_offset 14, -4
 1117              	@ armwave.c:176:     assert(out_buffer != NULL);
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 174:armwave.c     ****     uint32_t offset;
 175:armwave.c     **** 
 176:armwave.c     ****     assert(out_buffer != NULL);
 1118              		.loc 1 176 5 view .LVU327
 1119 047c 000050E3 		cmp	r0, #0	@ out_buffer
 1120              	@ armwave.c:172:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1121              		.loc 1 172 15 view .LVU328
 1122 0480 44619FE5 		ldr	r6, .L80	@ tmp204,
 1123              	@ armwave.c:168: {
 168:armwave.c     ****     uint32_t xx, yy, ye, y, ysub, word, wave_word;
 1124              		.loc 1 168 1 view .LVU329
 1125 0484 0CD04DE2 		sub	sp, sp, #12	@,,
 1126              		.cfi_def_cfa_offset 48
 1127              	@ armwave.c:172:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1128              		.loc 1 172 15 view .LVU330
 1129 0488 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1130              	.LVL76:
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1131              		.loc 1 173 5 is_stmt 1 view .LVU331
 174:armwave.c     **** 
 1132              		.loc 1 174 5 view .LVU332
 1133              		.loc 1 176 5 view .LVU333
 1134 048c 4900000A 		beq	.L77		@,
 177:armwave.c     **** 
 178:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1135              		.loc 1 178 5 view .LVU334
 1136              	@ armwave.c:178:     npix = g_armwave_state.target_width * 256; 
 1137              		.loc 1 178 41 is_stmt 0 view .LVU335
 1138 0490 4C8096E5 		ldr	r8, [r6, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1139 0494 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1140              	.LVL77:
 179:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1141              		.loc 1 179 5 is_stmt 1 view .LVU336
 180:armwave.c     **** 
 181:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1142              		.loc 1 181 5 view .LVU337
 1143              		.loc 1 181 5 is_stmt 0 view .LVU338
 1144 0498 000058E3 		cmp	r8, #0	@ npix,
 1145 049c 0C0000DA 		ble	.L58		@,
 1146              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 183:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 184:armwave.c     ****         // most normal waveforms.
 185:armwave.c     ****         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 187:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 190:armwave.c     ****                 wave_word >>= 8;
 191:armwave.c     **** 
 192:armwave.c     ****                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1147              		.loc 1 194 52 view .LVU339
 1148 04a0 F236D6E1 		ldrsh	r3, [r6, #98]	@ _11, g_armwave_state.ch1_color.g
 1149              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1150              		.loc 1 193 52 view .LVU340
 1151 04a4 F0B6D6E1 		ldrsh	fp, [r6, #96]	@ _7, g_armwave_state.ch1_color.r
 1152              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 197:armwave.c     ****                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 200:armwave.c     **** 
 201:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 202:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 204:armwave.c     ****                     // Do line scaling as necessary.
 205:armwave.c     ****                     /*
 206:armwave.c     ****                     nsub = n + w;
 207:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 208:armwave.c     ****                     xx = (nsub >> 8);
 209:armwave.c     **** 
 210:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 211:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 212:armwave.c     ****                         *(out_buffer_base + offset) = word;
 213:armwave.c     ****                     }
 214:armwave.c     ****                     */
 215:armwave.c     **** 
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1153              		.loc 1 217 57 view .LVU341
 1154 04a8 076AD6ED 		vldr.32	s13, [r6, #28]	@ _28, g_armwave_state.vscale_frac
 1155              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1156              		.loc 1 194 52 view .LVU342
 1157 04ac 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1158              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1159              		.loc 1 195 52 view .LVU343
 1160 04b0 F436D6E1 		ldrsh	r3, [r6, #100]	@ _14, g_armwave_state.ch1_color.b
 1161              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1162              		.loc 1 181 11 view .LVU344
 1163 04b4 0010A0E3 		mov	r1, #0	@ n,
 1164              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1165              		.loc 1 195 52 view .LVU345
 1166 04b8 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1167              	.LVL78:
 1168              	.L65:
 185:armwave.c     **** 
 1169              		.loc 1 185 9 is_stmt 1 view .LVU346
 1170              	@ armwave.c:185:         wave_word = *base_32ptr++;
 185:armwave.c     **** 
 1171              		.loc 1 185 19 is_stmt 0 view .LVU347
 1172 04bc 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 1173              	.LVL79:
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 1174              		.loc 1 187 9 is_stmt 1 view .LVU348
 1175              	@ armwave.c:187:         if(COND_UNLIKELY(wave_word != 0)) {
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 1176              		.loc 1 187 11 is_stmt 0 view .LVU349
 1177 04c0 000053E3 		cmp	r3, #0	@ wave_word,
 1178 04c4 0400001A 		bne	.L78		@,
 1179              	.L61:
 1180              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1181              		.loc 1 181 28 view .LVU350
 1182 04c8 041081E2 		add	r1, r1, #4	@ n, n,
 1183              	.LVL80:
 1184              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1185              		.loc 1 181 5 view .LVU351
 1186 04cc 010058E1 		cmp	r8, r1	@ npix, n
 1187 04d0 F9FFFFCA 		bgt	.L65		@,
 1188              	.LVL81:
 1189              	.L58:
 1190              	@ armwave.c:229: }
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** }
 1191              		.loc 1 229 1 view .LVU352
 1192 04d4 0CD08DE2 		add	sp, sp, #12	@,,
 1193              		.cfi_remember_state
 1194              		.cfi_def_cfa_offset 36
 1195              		@ sp needed	@
 1196 04d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1197              	.LVL82:
 1198              	.L78:
 1199              		.cfi_restore_state
 1200              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1201              		.loc 1 192 19 view .LVU353
 1202 04dc FF2013E2 		ands	r2, r3, #255	@ _8, wave_word,
 1203              	@ armwave.c:188:             for(w = 0; w < 4; w++) {
 188:armwave.c     ****                 value = wave_word & 0xff;
 1204              		.loc 1 188 19 view .LVU354
 1205 04e0 0070A0E3 		mov	r7, #0	@ w,
 1206              	.LVL83:
 189:armwave.c     ****                 wave_word >>= 8;
 1207              		.loc 1 189 17 is_stmt 1 view .LVU355
 190:armwave.c     **** 
 1208              		.loc 1 190 17 view .LVU356
 1209              	@ armwave.c:190:                 wave_word >>= 8;
 190:armwave.c     **** 
 1210              		.loc 1 190 27 is_stmt 0 view .LVU357
 1211 04e4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1212              	.LVL84:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1213              		.loc 1 192 17 is_stmt 1 view .LVU358
 1214              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1215              		.loc 1 192 19 is_stmt 0 view .LVU359
 1216 04e8 0500001A 		bne	.L79		@,
 1217              	.L62:
 1218              	@ armwave.c:188:             for(w = 0; w < 4; w++) {
 188:armwave.c     ****                 value = wave_word & 0xff;
 1219              		.loc 1 188 32 view .LVU360
 1220 04ec 017087E2 		add	r7, r7, #1	@ w, w,
 1221              	.LVL85:
 1222              	@ armwave.c:188:             for(w = 0; w < 4; w++) {
 188:armwave.c     ****                 value = wave_word & 0xff;
 1223              		.loc 1 188 13 view .LVU361
 1224 04f0 040057E3 		cmp	r7, #4	@ w,
 1225 04f4 F3FFFF0A 		beq	.L61		@,
 189:armwave.c     ****                 wave_word >>= 8;
 1226              		.loc 1 189 17 is_stmt 1 view .LVU362
 1227              	.LVL86:
 190:armwave.c     **** 
 1228              		.loc 1 190 17 view .LVU363
 1229              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1230              		.loc 1 192 19 is_stmt 0 view .LVU364
 1231 04f8 FF2013E2 		ands	r2, r3, #255	@ _8, wave_word,
 1232              	@ armwave.c:190:                 wave_word >>= 8;
 190:armwave.c     **** 
 1233              		.loc 1 190 27 view .LVU365
 1234 04fc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1235              	.LVL87:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1236              		.loc 1 192 17 is_stmt 1 view .LVU366
 1237              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1238              		.loc 1 192 19 is_stmt 0 view .LVU367
 1239 0500 F9FFFF0A 		beq	.L62		@,
 1240              	.L79:
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1241              		.loc 1 193 21 is_stmt 1 view .LVU368
 1242              	.LVL88:
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1243              		.loc 1 194 21 view .LVU369
 195:armwave.c     **** 
 1244              		.loc 1 195 21 view .LVU370
 197:armwave.c     ****                     g = MIN(gg, 255);
 1245              		.loc 1 197 21 view .LVU371
 198:armwave.c     ****                     b = MIN(bb, 255);
 1246              		.loc 1 198 21 view .LVU372
 199:armwave.c     **** 
 1247              		.loc 1 199 21 view .LVU373
 202:armwave.c     **** 
 1248              		.loc 1 202 21 view .LVU374
 1249              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 1250              		.loc 1 195 55 is_stmt 0 view .LVU375
 1251 0504 04C09DE5 		ldr	ip, [sp, #4]	@ _14, %sfp
 1252 0508 075081E0 		add	r5, r1, r7	@ _117, n, w
 1253 050c 9C020AE0 		mul	r10, ip, r2	@ tmp182, _14, _8
 1254              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1255              		.loc 1 217 32 view .LVU376
 1256 0510 75C0EFE6 		uxtb	ip, r5	@ _26, _117
 1257              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 1258              		.loc 1 218 41 view .LVU377
 1259 0514 01408CE2 		add	r4, ip, #1	@ tmp197, _26,
 1260              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1261              		.loc 1 217 40 view .LVU378
 1262 0518 90CA07EE 		vmov	s15, ip	@ int	@ _26, _26
 1263              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 1264              		.loc 1 218 41 view .LVU379
 1265 051c 104A07EE 		vmov	s14, r4	@ int	@ tmp197, tmp197
 1266              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1267              		.loc 1 194 55 view .LVU380
 1268 0520 00C09DE5 		ldr	ip, [sp]	@ _11, %sfp
 1269              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 1270              		.loc 1 195 24 view .LVU381
 1271 0524 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp182,
 1272              	.LVL89:
 1273              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1274              		.loc 1 217 40 view .LVU382
 1275 0528 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _26
 1276              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 1277              		.loc 1 218 46 view .LVU383
 1278 052c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 1279              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1280              		.loc 1 194 55 view .LVU384
 1281 0530 9C0204E0 		mul	r4, ip, r2	@ tmp186, _11, _8
 1282              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1283              		.loc 1 193 55 view .LVU385
 1284 0534 920B02E0 		mul	r2, r2, fp	@ tmp192, _8, _7
 1285              	.LVL90:
 1286              	@ armwave.c:199:                     b = MIN(bb, 255);
 199:armwave.c     **** 
 1287              		.loc 1 199 25 view .LVU386
 1288 0538 FF005AE3 		cmp	r10, #255	@ bb,
 1289              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1290              		.loc 1 194 24 view .LVU387
 1291 053c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp186,
 1292              	.LVL91:
 1293              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1294              		.loc 1 217 40 view .LVU388
 1295 0540 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _28
 1296              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 1297              		.loc 1 218 46 view .LVU389
 1298 0544 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _28
 1299              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1300              		.loc 1 193 24 view .LVU390
 1301 0548 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp192,
 1302              	.LVL92:
 1303              	@ armwave.c:199:                     b = MIN(bb, 255);
 199:armwave.c     **** 
 1304              		.loc 1 199 25 view .LVU391
 1305 054c FFA0A0A3 		movge	r10, #255	@ bb,
 1306              	.LVL93:
 1307              	@ armwave.c:198:                     g = MIN(gg, 255);
 198:armwave.c     ****                     b = MIN(bb, 255);
 1308              		.loc 1 198 25 view .LVU392
 1309 0550 FF0054E3 		cmp	r4, #255	@ gg,
 1310 0554 FF40A0A3 		movge	r4, #255	@ gg,
 1311              	.LVL94:
 1312              	@ armwave.c:197:                     r = MIN(rr, 255);
 197:armwave.c     ****                     g = MIN(gg, 255);
 1313              		.loc 1 197 25 view .LVU393
 1314 0558 FF005CE3 		cmp	ip, #255	@ rr,
 1315              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 1316              		.loc 1 202 56 view .LVU394
 1317 055c 0444A0E1 		lsl	r4, r4, #8	@ tmp187, gg,
 1318              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1319              		.loc 1 217 24 view .LVU395
 1320 0560 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 1321              	@ armwave.c:197:                     r = MIN(rr, 255);
 197:armwave.c     ****                     g = MIN(gg, 255);
 1322              		.loc 1 197 25 view .LVU396
 1323 0564 FFC0A0A3 		movge	ip, #255	@ rr,
 1324              	.LVL95:
 1325              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 1326              		.loc 1 202 44 view .LVU397
 1327 0568 0AA8A0E1 		lsl	r10, r10, #16	@ tmp183, bb,
 1328 056c FFA80AE2 		and	r10, r10, #16711680	@ tmp184, tmp183,
 1329              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 1330              		.loc 1 202 56 view .LVU398
 1331 0570 7440FFE6 		uxth	r4, r4	@ tmp188, tmp187
 1332              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 1333              		.loc 1 202 51 view .LVU399
 1334 0574 04408AE1 		orr	r4, r10, r4	@ tmp190, tmp184, tmp188
 1335              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 1336              		.loc 1 202 62 view .LVU400
 1337 0578 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 1338 057c 0CC084E1 		orr	ip, r4, ip	@ tmp194, tmp190, rr
 1339              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1340              		.loc 1 217 24 view .LVU401
 1341 0580 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 1342              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 1343              		.loc 1 218 24 view .LVU402
 1344 0584 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 1345              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 1346              		.loc 1 202 26 view .LVU403
 1347 0588 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp194,
 1348              	.LVL96:
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1349              		.loc 1 216 21 is_stmt 1 view .LVU404
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1350              		.loc 1 217 21 view .LVU405
 218:armwave.c     ****                     xx = (nsub >> 8);
 1351              		.loc 1 218 21 view .LVU406
 1352              	@ armwave.c:219:                     xx = (nsub >> 8);
 219:armwave.c     **** 
 1353              		.loc 1 219 32 is_stmt 0 view .LVU407
 1354 058c 4554A0E1 		asr	r5, r5, #8	@ xx, _117,
 1355              	.LVL97:
 1356              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 1357              		.loc 1 218 24 view .LVU408
 1358 0590 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 1359              	.LVL98:
 219:armwave.c     **** 
 1360              		.loc 1 219 21 is_stmt 1 view .LVU409
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1361              		.loc 1 221 21 view .LVU410
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1362              		.loc 1 221 21 is_stmt 0 view .LVU411
 1363 0594 090052E1 		cmp	r2, r9	@ yy, ye
 1364 0598 D3FFFF2A 		bcs	.L62		@,
 1365              	.LVL99:
 1366              	.L63:
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1367              		.loc 1 222 25 is_stmt 1 discriminator 3 view .LVU412
 223:armwave.c     ****                     }
 1368              		.loc 1 223 25 discriminator 3 view .LVU413
 1369              	@ armwave.c:222:                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1370              		.loc 1 222 43 is_stmt 0 discriminator 3 view .LVU414
 1371 059c 4CC096E5 		ldr	ip, [r6, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1372              	@ armwave.c:223:                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 1373              		.loc 1 223 43 discriminator 3 view .LVU415
 1374 05a0 9C522CE0 		mla	ip, ip, r2, r5	@ tmp203, g_armwave_state.target_width, yy, xx
 1375              	.LVL100:
 1376              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1377              		.loc 1 221 42 discriminator 3 view .LVU416
 1378 05a4 012082E2 		add	r2, r2, #1	@ yy, yy,
 1379              	.LVL101:
 1380              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1381              		.loc 1 221 21 discriminator 3 view .LVU417
 1382 05a8 020059E1 		cmp	r9, r2	@ ye, yy
 1383              	@ armwave.c:223:                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 1384              		.loc 1 223 53 discriminator 3 view .LVU418
 1385 05ac 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 1386              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1387              		.loc 1 221 21 discriminator 3 view .LVU419
 1388 05b0 F9FFFF1A 		bne	.L63		@,
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1389              		.loc 1 221 21 discriminator 3 view .LVU420
 1390 05b4 CCFFFFEA 		b	.L62		@
 1391              	.LVL102:
 1392              	.L77:
 176:armwave.c     **** 
 1393              		.loc 1 176 5 is_stmt 1 discriminator 1 view .LVU421
 1394 05b8 10309FE5 		ldr	r3, .L80+4	@,
 1395 05bc B020A0E3 		mov	r2, #176	@,
 1396 05c0 0C109FE5 		ldr	r1, .L80+8	@,
 1397 05c4 0C009FE5 		ldr	r0, .L80+12	@,
 1398              	.LVL103:
 176:armwave.c     **** 
 1399              		.loc 1 176 5 is_stmt 0 discriminator 1 view .LVU422
 1400 05c8 FEFFFFEB 		bl	__assert_fail		@
 1401              	.LVL104:
 1402              	.L81:
 176:armwave.c     **** 
 1403              		.loc 1 176 5 discriminator 1 view .LVU423
 1404              		.align	2
 1405              	.L80:
 1406 05cc 00000000 		.word	g_armwave_state
 1407 05d0 18000000 		.word	.LANCHOR0+24
 1408 05d4 20000000 		.word	.LC2
 1409 05d8 2C000000 		.word	.LC3
 1410              		.cfi_endproc
 1411              	.LFE61:
 1413              		.align	2
 1414              		.global	armwave_setup_render
 1415              		.syntax unified
 1416              		.arm
 1417              		.fpu vfp
 1419              	armwave_setup_render:
 1420              	.LVL105:
 1421              	.LFB62:
 230:armwave.c     **** 
 231:armwave.c     **** /*
 232:armwave.c     ****  * Setup the renderer with passed parameters.
 233:armwave.c     ****  */
 234:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 235:armwave.c     **** {
 1422              		.loc 1 235 1 is_stmt 1 view -0
 1423              		.cfi_startproc
 1424              		@ args = 12, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 236:armwave.c     ****     uint32_t length, xx;
 1426              		.loc 1 236 5 view .LVU425
 237:armwave.c     ****     float points_per_pixel;
 1427              		.loc 1 237 5 view .LVU426
 238:armwave.c     **** 
 239:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1428              		.loc 1 239 5 view .LVU427
 1429              	@ armwave.c:235: {
 235:armwave.c     ****     uint32_t length, xx;
 1430              		.loc 1 235 1 is_stmt 0 view .LVU428
 1431 05dc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1432              		.cfi_def_cfa_offset 32
 1433              		.cfi_offset 4, -32
 1434              		.cfi_offset 5, -28
 1435              		.cfi_offset 6, -24
 1436              		.cfi_offset 7, -20
 1437              		.cfi_offset 8, -16
 1438              		.cfi_offset 9, -12
 1439              		.cfi_offset 10, -8
 1440              		.cfi_offset 14, -4
 1441 05e0 028B2DED 		vpush.64	{d8}	@
 1442              		.cfi_def_cfa_offset 40
 1443              		.cfi_offset 80, -40
 1444              		.cfi_offset 81, -36
 1445 05e4 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1446 05e8 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1447 05ec 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1448 05f0 10D04DE2 		sub	sp, sp, #16	@,,
 1449              		.cfi_def_cfa_offset 56
 1450              	@ armwave.c:235: {
 235:armwave.c     ****     uint32_t length, xx;
 1451              		.loc 1 235 1 view .LVU429
 1452 05f4 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1453 05f8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1454 05fc 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1455              	@ armwave.c:239:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1456              		.loc 1 239 5 view .LVU430
 1457 0600 00308DE5 		str	r3, [sp]	@ wave_stride,
 1458 0604 F460CDE1 		strd	r6, [sp, #4]	@,,
 1459 0608 0230A0E1 		mov	r3, r2	@, waves_max
 1460              	.LVL106:
 1461              		.loc 1 239 5 view .LVU431
 1462 060c 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1463 0610 0120A0E1 		mov	r2, r1	@, end_point
 1464              	.LVL107:
 1465              		.loc 1 239 5 view .LVU432
 1466 0614 0010A0E1 		mov	r1, r0	@, start_point
 1467              	.LVL108:
 1468              		.loc 1 239 5 view .LVU433
 1469 0618 94019FE5 		ldr	r0, .L96+8	@,
 1470              	.LVL109:
 1471              		.loc 1 239 5 view .LVU434
 1472 061c FEFFFFEB 		bl	printf		@
 1473              	.LVL110:
 240:armwave.c     **** 
 241:armwave.c     ****     // TODO these asserts should instead raise PyExc
 242:armwave.c     ****     assert(start_point < end_point);
 1474              		.loc 1 242 5 is_stmt 1 view .LVU435
 1475 0620 090055E1 		cmp	r5, r9	@ start_point, end_point
 1476 0624 5100002A 		bcs	.L93		@,
 243:armwave.c     **** 
 244:armwave.c     ****     /*
 245:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 246:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 247:armwave.c     **** 
 248:armwave.c     ****     if(target_height == 256) {
 249:armwave.c     ****         g_armwave_state.row_shift = 8;
 250:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 251:armwave.c     ****     } else if(target_height == 512) {
 252:armwave.c     ****         g_armwave_state.row_shift = 9;
 253:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 254:armwave.c     ****     } else if(target_height == 1024) {
 255:armwave.c     ****         g_armwave_state.row_shift = 10;
 256:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 257:armwave.c     ****     } else if(target_height == 2048) {
 258:armwave.c     ****         g_armwave_state.row_shift = 11;
 259:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 260:armwave.c     ****     }
 261:armwave.c     ****     */
 262:armwave.c     **** 
 263:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 264:armwave.c     ****     g_armwave_state.xstride = target_height;
 1477              		.loc 1 264 5 view .LVU436
 1478              	@ armwave.c:265:     g_armwave_state.vscale_frac = target_height / 255.0f;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1479              		.loc 1 265 49 is_stmt 0 view .LVU437
 1480 0628 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1481 062c 5E7A9FED 		vldr.32	s14, .L96	@ tmp156,
 1482              	@ armwave.c:264:     g_armwave_state.xstride = target_height;
 264:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1483              		.loc 1 264 29 view .LVU438
 1484 0630 80419FE5 		ldr	r4, .L96+12	@ tmp212,
 1485              	@ armwave.c:270:     g_armwave_state.size = target_height * target_width;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1486              		.loc 1 270 42 view .LVU439
 1487 0634 970600E0 		mul	r0, r7, r6	@ tmp164, target_height, target_width
 1488              	@ armwave.c:265:     g_armwave_state.vscale_frac = target_height / 255.0f;
 265:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1489              		.loc 1 265 49 view .LVU440
 1490 0638 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp155, target_height
 1491              	@ armwave.c:272:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 272:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1492              		.loc 1 272 68 view .LVU441
 1493 063c 0634A0E1 		lsl	r3, r6, #8	@ _6, target_width,
 1494              	@ armwave.c:271:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1495              		.loc 1 271 37 view .LVU442
 1496 0640 012CA0E3 		mov	r2, #256	@ tmp166,
 1497              	@ armwave.c:277:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 274:armwave.c     ****     g_armwave_state.target_height = target_height;
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 276:armwave.c     **** 
 277:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1498              		.loc 1 277 5 view .LVU443
 1499 0644 0310A0E1 		mov	r1, r3	@, _6
 1500              	@ armwave.c:270:     g_armwave_state.size = target_height * target_width;
 270:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1501              		.loc 1 270 26 view .LVU444
 1502 0648 480084E5 		str	r0, [r4, #72]	@ tmp164, g_armwave_state.size
 1503              	@ armwave.c:275:     g_armwave_state.wave_length = end_point - start_point;
 275:armwave.c     **** 
 1504              		.loc 1 275 45 view .LVU445
 1505 064c 055049E0 		sub	r5, r9, r5	@ _7, end_point, start_point
 1506              	.LVL111:
 1507              	@ armwave.c:277:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1508              		.loc 1 277 5 view .LVU446
 1509 0650 64019FE5 		ldr	r0, .L96+16	@,
 1510              	@ armwave.c:272:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 272:armwave.c     ****     g_armwave_state.target_width = target_width;
 1511              		.loc 1 272 34 view .LVU447
 1512 0654 443084E5 		str	r3, [r4, #68]	@ _6, g_armwave_state.ch_buff_size
 1513              	@ armwave.c:265:     g_armwave_state.vscale_frac = target_height / 255.0f;
 265:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1514              		.loc 1 265 49 view .LVU448
 1515 0658 877AC6EE 		vdiv.f32	s15, s13, s14	@ _2, tmp155, tmp156
 1516              	@ armwave.c:264:     g_armwave_state.xstride = target_height;
 264:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1517              		.loc 1 264 29 view .LVU449
 1518 065c 207084E5 		str	r7, [r4, #32]	@ target_height, g_armwave_state.xstride
 265:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1519              		.loc 1 265 5 is_stmt 1 view .LVU450
 1520              	@ armwave.c:267:     g_armwave_state.wave_stride = wave_stride;
 267:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1521              		.loc 1 267 33 is_stmt 0 view .LVU451
 1522 0660 28A084E5 		str	r10, [r4, #40]	@ wave_stride, g_armwave_state.wave_stride
 1523              	@ armwave.c:268:     g_armwave_state.waves_max = waves_max;
 268:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1524              		.loc 1 268 31 view .LVU452
 1525 0664 308084E5 		str	r8, [r4, #48]	@ waves_max, g_armwave_state.waves_max
 1526              	@ armwave.c:269:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 269:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1527              		.loc 1 269 27 view .LVU453
 1528 0668 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves
 1529              	@ armwave.c:274:     g_armwave_state.target_height = target_height;
 274:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1530              		.loc 1 274 35 view .LVU454
 1531 066c FC64C4E1 		strd	r6, [r4, #76]	@, tmp212,
 1532              	@ armwave.c:275:     g_armwave_state.wave_length = end_point - start_point;
 275:armwave.c     **** 
 1533              		.loc 1 275 33 view .LVU455
 1534 0670 405084E5 		str	r5, [r4, #64]	@ _7, g_armwave_state.wave_length
 1535              	@ armwave.c:271:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 271:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1536              		.loc 1 271 37 view .LVU456
 1537 0674 342084E5 		str	r2, [r4, #52]	@ tmp166, g_armwave_state.bitdepth_height
 1538              	@ armwave.c:266:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 266:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1539              		.loc 1 266 30 view .LVU457
 1540 0678 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp159, _2
 1541              	@ armwave.c:265:     g_armwave_state.vscale_frac = target_height / 255.0f;
 265:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1542              		.loc 1 265 33 view .LVU458
 1543 067c 077AC4ED 		vstr.32	s15, [r4, #28]	@ _2, g_armwave_state.vscale_frac
 266:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1544              		.loc 1 266 5 is_stmt 1 view .LVU459
 1545              	@ armwave.c:266:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 266:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1546              		.loc 1 266 30 is_stmt 0 view .LVU460
 1547 0680 097A84ED 		vstr.32	s14, [r4, #36]	@ int	@ tmp159, g_armwave_state.vscale
 267:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1548              		.loc 1 267 5 is_stmt 1 view .LVU461
 268:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1549              		.loc 1 268 5 view .LVU462
 269:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1550              		.loc 1 269 5 view .LVU463
 270:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1551              		.loc 1 270 5 view .LVU464
 271:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1552              		.loc 1 271 5 view .LVU465
 272:armwave.c     ****     g_armwave_state.target_width = target_width;
 1553              		.loc 1 272 5 view .LVU466
 273:armwave.c     ****     g_armwave_state.target_height = target_height;
 1554              		.loc 1 273 5 view .LVU467
 274:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1555              		.loc 1 274 5 view .LVU468
 275:armwave.c     **** 
 1556              		.loc 1 275 5 view .LVU469
 1557              		.loc 1 277 5 view .LVU470
 1558 0684 FEFFFFEB 		bl	printf		@
 1559              	.LVL112:
 278:armwave.c     **** 
 279:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 280:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 282:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1560              		.loc 1 282 5 view .LVU471
 1561              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 283:armwave.c     **** 
 284:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1562              		.loc 1 284 23 is_stmt 0 view .LVU472
 1563 0688 040094E5 		ldr	r0, [r4, #4]	@ _8, g_armwave_state.ch1_buffer
 1564              	@ armwave.c:282:     g_armwave_state.slice_height = 64;  
 282:armwave.c     **** 
 1565              		.loc 1 282 34 view .LVU473
 1566 068c 4030A0E3 		mov	r3, #64	@ tmp173,
 1567              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1568              		.loc 1 284 7 view .LVU474
 1569 0690 000050E3 		cmp	r0, #0	@ _8,
 1570              	@ armwave.c:282:     g_armwave_state.slice_height = 64;  
 282:armwave.c     **** 
 1571              		.loc 1 282 34 view .LVU475
 1572 0694 383084E5 		str	r3, [r4, #56]	@ tmp173, g_armwave_state.slice_height
 1573              		.loc 1 284 5 is_stmt 1 view .LVU476
 1574              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1575              		.loc 1 284 7 is_stmt 0 view .LVU477
 1576 0698 0000000A 		beq	.L84		@,
 285:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1577              		.loc 1 285 9 is_stmt 1 view .LVU478
 1578 069c FEFFFFEB 		bl	free		@
 1579              	.LVL113:
 1580              	.L84:
 286:armwave.c     **** 
 287:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1581              		.loc 1 287 5 view .LVU479
 1582              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1583              		.loc 1 287 34 is_stmt 0 view .LVU480
 1584 06a0 0110A0E3 		mov	r1, #1	@,
 1585 06a4 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.ch_buff_size
 1586 06a8 FEFFFFEB 		bl	calloc		@
 1587              	.LVL114:
 1588              	@ armwave.c:289:     assert(g_armwave_state.ch1_buffer != NULL);
 288:armwave.c     **** 
 289:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1589              		.loc 1 289 5 view .LVU481
 1590 06ac 000050E3 		cmp	r0, #0	@ _10,
 1591              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1592              		.loc 1 287 34 view .LVU482
 1593 06b0 0070A0E1 		mov	r7, r0	@ _10,
 1594              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1595              		.loc 1 287 32 view .LVU483
 1596 06b4 040084E5 		str	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1597              		.loc 1 289 5 is_stmt 1 view .LVU484
 1598 06b8 3600000A 		beq	.L94		@,
 290:armwave.c     **** 
 291:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 292:armwave.c     ****     length = end_point - start_point;
 1599              		.loc 1 292 5 view .LVU485
 1600              	.LVL115:
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1601              		.loc 1 293 5 view .LVU486
 1602              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 1603              		.loc 1 293 34 is_stmt 0 view .LVU487
 1604 06bc 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1605              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 1606              		.loc 1 293 22 view .LVU488
 1607 06c0 905A06EE 		vmov	s13, r5	@ int	@ _7, _7
 1608              	@ armwave.c:295:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 295:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1609              		.loc 1 295 40 view .LVU489
 1610 06c4 8500A0E1 		lsl	r0, r5, #1	@, _7,
 1611              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1612              		.loc 1 293 34 view .LVU490
 1613 06c8 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp185, target_width
 1614              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1615              		.loc 1 293 22 view .LVU491
 1616 06cc 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp184, _7
 1617              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1618              		.loc 1 294 60 view .LVU492
 1619 06d0 0E7AD4ED 		vldr.32	s15, [r4, #56]	@ int	@ tmp218, g_armwave_state.slice_height
 1620 06d4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp188, tmp218
 1621              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1622              		.loc 1 293 22 view .LVU493
 1623 06d8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp184, tmp185
 1624              	.LVL116:
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1625              		.loc 1 294 5 is_stmt 1 view .LVU494
 1626              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1627              		.loc 1 294 60 is_stmt 0 view .LVU495
 1628 06dc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp190, tmp188, points_per_pixel
 1629              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1630              		.loc 1 294 41 view .LVU496
 1631 06e0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp191, tmp190
 1632 06e4 0F7AC4ED 		vstr.32	s15, [r4, #60]	@ int	@ tmp191, g_armwave_state.slice_record_height
 1633              		.loc 1 295 5 is_stmt 1 view .LVU497
 1634              	@ armwave.c:295:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1635              		.loc 1 295 40 is_stmt 0 view .LVU498
 1636 06e8 FEFFFFEB 		bl	malloc		@
 1637              	.LVL117:
 1638              	@ armwave.c:297:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 296:armwave.c     **** 
 297:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1639              		.loc 1 297 5 view .LVU499
 1640 06ec 000050E3 		cmp	r0, #0	@ _18,
 1641              	@ armwave.c:295:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 295:armwave.c     **** 
 1642              		.loc 1 295 40 view .LVU500
 1643 06f0 0060A0E1 		mov	r6, r0	@ _18,
 1644              	@ armwave.c:295:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 295:armwave.c     **** 
 1645              		.loc 1 295 38 view .LVU501
 1646 06f4 780084E5 		str	r0, [r4, #120]	@ _18, g_armwave_state.xcoord_to_xpixel
 1647              		.loc 1 297 5 is_stmt 1 view .LVU502
 1648 06f8 2100000A 		beq	.L95		@,
 1649              	@ armwave.c:300:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 298:armwave.c     **** 
 299:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 300:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1650              		.loc 1 300 54 is_stmt 0 view .LVU503
 1651 06fc 2B7ADFED 		vldr.32	s15, .L96+4	@ tmp200,
 1652 0700 02C040E2 		sub	ip, r0, #2	@ ivtmp.84, _18,
 1653              	@ armwave.c:299:     for(xx = 0; xx < length; xx++) {
 299:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1654              		.loc 1 299 12 view .LVU504
 1655 0704 0030A0E3 		mov	r3, #0	@ xx,
 1656              	@ armwave.c:300:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1657              		.loc 1 300 54 view .LVU505
 1658 0708 887A87EE 		vdiv.f32	s14, s15, s16	@ _19, tmp200, points_per_pixel
 1659              	.L87:
 1660              	.LVL118:
 1661              		.loc 1 300 9 is_stmt 1 discriminator 3 view .LVU506
 1662              	@ armwave.c:300:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1663              		.loc 1 300 74 is_stmt 0 discriminator 3 view .LVU507
 1664 070c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1665              	@ armwave.c:299:     for(xx = 0; xx < length; xx++) {
 299:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1666              		.loc 1 299 32 discriminator 3 view .LVU508
 1667 0710 013083E2 		add	r3, r3, #1	@ xx, xx,
 1668              	.LVL119:
 1669              	@ armwave.c:299:     for(xx = 0; xx < length; xx++) {
 299:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1670              		.loc 1 299 5 discriminator 3 view .LVU509
 1671 0714 030055E1 		cmp	r5, r3	@ _7, xx
 1672              	@ armwave.c:300:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1673              		.loc 1 300 74 discriminator 3 view .LVU510
 1674 0718 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, xx
 1675 071c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp202, tmp201, _19
 1676              	@ armwave.c:300:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1677              		.loc 1 300 46 discriminator 3 view .LVU511
 1678 0720 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 1679 0724 902A17EE 		vmov	r2, s15	@ int	@ tmp203, tmp203
 1680 0728 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp203, MEM[base: _74, offset: 0B]
 1681              	@ armwave.c:299:     for(xx = 0; xx < length; xx++) {
 299:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1682              		.loc 1 299 5 discriminator 3 view .LVU512
 1683 072c F6FFFF1A 		bne	.L87		@,
 301:armwave.c     **** 
 302:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 303:armwave.c     ****     }
 304:armwave.c     **** 
 305:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1684              		.loc 1 305 5 is_stmt 1 view .LVU513
 1685              	@ armwave.c:305:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1686              		.loc 1 305 34 is_stmt 0 view .LVU514
 1687 0730 480094E5 		ldr	r0, [r4, #72]	@ g_armwave_state.size, g_armwave_state.size
 1688 0734 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1689 0738 FEFFFFEB 		bl	malloc		@
 1690              	.LVL120:
 1691              	@ armwave.c:307:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 306:armwave.c     **** 
 307:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1692              		.loc 1 307 5 view .LVU515
 1693 073c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1694 0740 0620A0E1 		mov	r2, r6	@, _18
 1695 0744 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1696 0748 0710A0E1 		mov	r1, r7	@, _10
 1697              	@ armwave.c:305:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 305:armwave.c     **** 
 1698              		.loc 1 305 34 view .LVU516
 1699 074c 00C0A0E1 		mov	ip, r0	@ tmp207,
 1700              	@ armwave.c:307:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1701              		.loc 1 307 5 view .LVU517
 1702 0750 0030A0E1 		mov	r3, r0	@, tmp207
 1703 0754 64009FE5 		ldr	r0, .L96+20	@,
 1704              	@ armwave.c:305:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 305:armwave.c     **** 
 1705              		.loc 1 305 32 view .LVU518
 1706 0758 5CC084E5 		str	ip, [r4, #92]	@ tmp207, g_armwave_state.out_pixbuf
 1707              		.loc 1 307 5 is_stmt 1 view .LVU519
 1708 075c FEFFFFEB 		bl	printf		@
 1709              	.LVL121:
 308:armwave.c     ****         g_armwave_state.ch1_buffer, g_armwave_state.xcoord_to_xpixel, g_armwave_state.out_pixbuf, g
 309:armwave.c     **** 
 310:armwave.c     ****     malloc_stats();
 1710              		.loc 1 310 5 view .LVU520
 1711              	@ armwave.c:311: }
 311:armwave.c     **** }
 1712              		.loc 1 311 1 is_stmt 0 view .LVU521
 1713 0760 10D08DE2 		add	sp, sp, #16	@,,
 1714              		.cfi_remember_state
 1715              		.cfi_def_cfa_offset 40
 1716              		@ sp needed	@
 1717 0764 028BBDEC 		vldm	sp!, {d8}	@
 1718              		.cfi_restore 80
 1719              		.cfi_restore 81
 1720              		.cfi_def_cfa_offset 32
 1721              	.LVL122:
 1722              		.loc 1 311 1 view .LVU522
 1723 0768 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1724              		.cfi_restore 14
 1725              		.cfi_restore 10
 1726              		.cfi_restore 9
 1727              		.cfi_restore 8
 1728              		.cfi_restore 7
 1729              		.cfi_restore 6
 1730              		.cfi_restore 5
 1731              		.cfi_restore 4
 1732              		.cfi_def_cfa_offset 0
 1733              	.LVL123:
 1734              	@ armwave.c:310:     malloc_stats();
 310:armwave.c     **** }
 1735              		.loc 1 310 5 view .LVU523
 1736 076c FEFFFFEA 		b	malloc_stats		@
 1737              	.LVL124:
 1738              	.L93:
 1739              		.cfi_restore_state
 242:armwave.c     **** 
 1740              		.loc 1 242 5 is_stmt 1 discriminator 1 view .LVU524
 1741 0770 4C309FE5 		ldr	r3, .L96+24	@,
 1742 0774 F220A0E3 		mov	r2, #242	@,
 1743 0778 48109FE5 		ldr	r1, .L96+28	@,
 1744 077c 48009FE5 		ldr	r0, .L96+32	@,
 1745 0780 FEFFFFEB 		bl	__assert_fail		@
 1746              	.LVL125:
 1747              	.L95:
 297:armwave.c     **** 
 1748              		.loc 1 297 5 discriminator 1 view .LVU525
 1749 0784 38309FE5 		ldr	r3, .L96+24	@,
 1750 0788 40209FE5 		ldr	r2, .L96+36	@,
 1751 078c 34109FE5 		ldr	r1, .L96+28	@,
 1752 0790 3C009FE5 		ldr	r0, .L96+40	@,
 1753 0794 FEFFFFEB 		bl	__assert_fail		@
 1754              	.LVL126:
 1755              	.L94:
 289:armwave.c     **** 
 1756              		.loc 1 289 5 discriminator 1 view .LVU526
 1757 0798 24309FE5 		ldr	r3, .L96+24	@,
 1758 079c 34209FE5 		ldr	r2, .L96+44	@,
 1759 07a0 20109FE5 		ldr	r1, .L96+28	@,
 1760 07a4 30009FE5 		ldr	r0, .L96+48	@,
 1761 07a8 FEFFFFEB 		bl	__assert_fail		@
 1762              	.LVL127:
 1763              	.L97:
 1764              		.align	2
 1765              	.L96:
 1766 07ac 00007F43 		.word	1132396544
 1767 07b0 0000803F 		.word	1065353216
 1768 07b4 40000000 		.word	.LC4
 1769 07b8 00000000 		.word	g_armwave_state
 1770 07bc 84000000 		.word	.LC6
 1771 07c0 E8000000 		.word	.LC9
 1772 07c4 34000000 		.word	.LANCHOR0+52
 1773 07c8 20000000 		.word	.LC2
 1774 07cc 6C000000 		.word	.LC5
 1775 07d0 29010000 		.word	297
 1776 07d4 BC000000 		.word	.LC8
 1777 07d8 21010000 		.word	289
 1778 07dc 98000000 		.word	.LC7
 1779              		.cfi_endproc
 1780              	.LFE62:
 1782              		.align	2
 1783              		.global	armwave_set_wave_pointer
 1784              		.syntax unified
 1785              		.arm
 1786              		.fpu vfp
 1788              	armwave_set_wave_pointer:
 1789              	.LVL128:
 1790              	.LFB63:
 312:armwave.c     **** 
 313:armwave.c     **** /*
 314:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 315:armwave.c     ****  * in the future.
 316:armwave.c     ****  */
 317:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 318:armwave.c     **** {
 1791              		.loc 1 318 1 view -0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 319:armwave.c     ****     assert(wave_buffer != NULL);
 1795              		.loc 1 319 5 view .LVU528
 1796 07e0 000050E3 		cmp	r0, #0	@ wave_buffer
 1797              		.loc 1 319 5 is_stmt 0 view .LVU529
 1798 07e4 0200000A 		beq	.L103		@,
 320:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1799              		.loc 1 320 5 is_stmt 1 view .LVU530
 1800              	@ armwave.c:320:     g_armwave_state.wave_buffer = wave_buffer;
 1801              		.loc 1 320 33 is_stmt 0 view .LVU531
 1802 07e8 1C309FE5 		ldr	r3, .L104	@ tmp116,
 1803 07ec 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1804 07f0 1EFF2FE1 		bx	lr	@
 1805              	.L103:
 319:armwave.c     ****     assert(wave_buffer != NULL);
 1806              		.loc 1 319 5 is_stmt 1 discriminator 1 view .LVU532
 1807              	@ armwave.c:318: {
 318:armwave.c     ****     assert(wave_buffer != NULL);
 1808              		.loc 1 318 1 is_stmt 0 discriminator 1 view .LVU533
 1809 07f4 10402DE9 		push	{r4, lr}	@
 1810              		.cfi_def_cfa_offset 8
 1811              		.cfi_offset 4, -8
 1812              		.cfi_offset 14, -4
 1813              	@ armwave.c:319:     assert(wave_buffer != NULL);
 319:armwave.c     ****     assert(wave_buffer != NULL);
 1814              		.loc 1 319 5 discriminator 1 view .LVU534
 1815 07f8 10309FE5 		ldr	r3, .L104+4	@,
 1816 07fc 10209FE5 		ldr	r2, .L104+8	@,
 1817 0800 10109FE5 		ldr	r1, .L104+12	@,
 1818 0804 10009FE5 		ldr	r0, .L104+16	@,
 1819              	.LVL129:
 319:armwave.c     ****     assert(wave_buffer != NULL);
 1820              		.loc 1 319 5 discriminator 1 view .LVU535
 1821 0808 FEFFFFEB 		bl	__assert_fail		@
 1822              	.LVL130:
 1823              	.L105:
 1824              		.align	2
 1825              	.L104:
 1826 080c 00000000 		.word	g_armwave_state
 1827 0810 4C000000 		.word	.LANCHOR0+76
 1828 0814 3F010000 		.word	319
 1829 0818 20000000 		.word	.LC2
 1830 081c 0C010000 		.word	.LC10
 1831              		.cfi_endproc
 1832              	.LFE63:
 1834              		.align	2
 1835              		.global	armwave_set_wave_pointer_as_testbuf
 1836              		.syntax unified
 1837              		.arm
 1838              		.fpu vfp
 1840              	armwave_set_wave_pointer_as_testbuf:
 1841              	.LFB64:
 321:armwave.c     **** }
 322:armwave.c     **** 
 323:armwave.c     **** /*
 324:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 325:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 326:armwave.c     ****  */
 327:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 328:armwave.c     **** {
 1842              		.loc 1 328 1 is_stmt 1 view -0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 0
 1845              		@ frame_needed = 0, uses_anonymous_args = 0
 1846              		@ link register save eliminated.
 329:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1847              		.loc 1 329 5 view .LVU537
 1848              	@ armwave.c:329:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1849              		.loc 1 329 33 is_stmt 0 view .LVU538
 1850 0820 08309FE5 		ldr	r3, .L107	@ tmp111,
 1851 0824 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1852 0828 142083E5 		str	r2, [r3, #20]	@ g_armwave_state.test_wave_buffer, g_armwave_state.wave_buffer
 1853              	@ armwave.c:330: }
 330:armwave.c     **** }
 1854              		.loc 1 330 1 view .LVU539
 1855 082c 1EFF2FE1 		bx	lr	@
 1856              	.L108:
 1857              		.align	2
 1858              	.L107:
 1859 0830 00000000 		.word	g_armwave_state
 1860              		.cfi_endproc
 1861              	.LFE64:
 1863              		.align	2
 1864              		.global	armwave_set_wave_pointer_u32
 1865              		.syntax unified
 1866              		.arm
 1867              		.fpu vfp
 1869              	armwave_set_wave_pointer_u32:
 1870              	.LVL131:
 1871              	.LFB65:
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 334:armwave.c     ****  * disjointed buffers in the future.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 337:armwave.c     **** {
 1872              		.loc 1 337 1 is_stmt 1 view -0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 338:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1876              		.loc 1 338 5 view .LVU541
 1877 0834 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1878              		.loc 1 338 5 is_stmt 0 view .LVU542
 1879 0838 0200000A 		beq	.L114		@,
 339:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1880              		.loc 1 339 5 is_stmt 1 view .LVU543
 1881              	@ armwave.c:339:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1882              		.loc 1 339 33 is_stmt 0 view .LVU544
 1883 083c 1C309FE5 		ldr	r3, .L115	@ tmp117,
 1884 0840 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1885 0844 1EFF2FE1 		bx	lr	@
 1886              	.L114:
 338:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1887              		.loc 1 338 5 is_stmt 1 discriminator 1 view .LVU545
 1888              	@ armwave.c:337: {
 337:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1889              		.loc 1 337 1 is_stmt 0 discriminator 1 view .LVU546
 1890 0848 10402DE9 		push	{r4, lr}	@
 1891              		.cfi_def_cfa_offset 8
 1892              		.cfi_offset 4, -8
 1893              		.cfi_offset 14, -4
 1894              	@ armwave.c:338:     assert(wave_buffer_ptr != 0);
 338:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1895              		.loc 1 338 5 discriminator 1 view .LVU547
 1896 084c 10309FE5 		ldr	r3, .L115+4	@,
 1897 0850 10209FE5 		ldr	r2, .L115+8	@,
 1898 0854 10109FE5 		ldr	r1, .L115+12	@,
 1899 0858 10009FE5 		ldr	r0, .L115+16	@,
 1900              	.LVL132:
 338:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1901              		.loc 1 338 5 discriminator 1 view .LVU548
 1902 085c FEFFFFEB 		bl	__assert_fail		@
 1903              	.LVL133:
 1904              	.L116:
 1905              		.align	2
 1906              	.L115:
 1907 0860 00000000 		.word	g_armwave_state
 1908 0864 68000000 		.word	.LANCHOR0+104
 1909 0868 52010000 		.word	338
 1910 086c 20000000 		.word	.LC2
 1911 0870 20010000 		.word	.LC11
 1912              		.cfi_endproc
 1913              	.LFE65:
 1915              		.align	2
 1916              		.global	armwave_clear_buffer
 1917              		.syntax unified
 1918              		.arm
 1919              		.fpu vfp
 1921              	armwave_clear_buffer:
 1922              	.LVL134:
 1923              	.LFB66:
 340:armwave.c     **** }
 341:armwave.c     **** 
 342:armwave.c     **** /*
 343:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 344:armwave.c     ****  */
 345:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 346:armwave.c     **** {
 1924              		.loc 1 346 1 is_stmt 1 view -0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 0
 1927              		@ frame_needed = 0, uses_anonymous_args = 0
 1928              		@ link register save eliminated.
 347:armwave.c     ****     // Flags ignored, only one buffer cleared
 348:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1929              		.loc 1 348 5 view .LVU550
 1930 0874 0C309FE5 		ldr	r3, .L118	@ tmp113,
 1931 0878 0010A0E3 		mov	r1, #0	@,
 1932 087c 442093E5 		ldr	r2, [r3, #68]	@, g_armwave_state.ch_buff_size
 1933 0880 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1934              	.LVL135:
 1935              		.loc 1 348 5 is_stmt 0 view .LVU551
 1936 0884 FEFFFFEA 		b	memset		@
 1937              	.LVL136:
 1938              	.L119:
 1939              		.align	2
 1940              	.L118:
 1941 0888 00000000 		.word	g_armwave_state
 1942              		.cfi_endproc
 1943              	.LFE66:
 1945              		.align	2
 1946              		.global	armwave_set_channel_colour
 1947              		.syntax unified
 1948              		.arm
 1949              		.fpu vfp
 1951              	armwave_set_channel_colour:
 1952              	.LVL137:
 1953              	.LFB67:
 349:armwave.c     **** }
 350:armwave.c     **** 
 351:armwave.c     **** /*
 352:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 353:armwave.c     ****  */
 354:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 355:armwave.c     **** {
 1954              		.loc 1 355 1 is_stmt 1 view -0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              		@ link register save eliminated.
 356:armwave.c     ****     // Only 1ch supported for now
 357:armwave.c     ****     switch(ch) {
 1959              		.loc 1 357 5 view .LVU553
 1960 088c 010050E3 		cmp	r0, #1	@ ch,
 358:armwave.c     ****         case 1:
 359:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1961              		.loc 1 359 13 view .LVU554
 1962              	@ armwave.c:359:             g_armwave_state.ch1_color.r = r;
 1963              		.loc 1 359 41 is_stmt 0 view .LVU555
 1964 0890 0C009F05 		ldreq	r0, .L122	@ tmp117,
 1965              	.LVL138:
 1966              		.loc 1 359 41 view .LVU556
 1967 0894 B016C001 		strheq	r1, [r0, #96]	@ movhi	@ r, g_armwave_state.ch1_color.r
 360:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1968              		.loc 1 360 13 is_stmt 1 view .LVU557
 1969              	@ armwave.c:360:             g_armwave_state.ch1_color.g = g;
 1970              		.loc 1 360 41 is_stmt 0 view .LVU558
 1971 0898 B226C001 		strheq	r2, [r0, #98]	@ movhi	@ g, g_armwave_state.ch1_color.g
 361:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1972              		.loc 1 361 13 is_stmt 1 view .LVU559
 1973              	@ armwave.c:361:             g_armwave_state.ch1_color.b = b;
 1974              		.loc 1 361 41 is_stmt 0 view .LVU560
 1975 089c B436C001 		strheq	r3, [r0, #100]	@ movhi	@ b, g_armwave_state.ch1_color.b
 362:armwave.c     ****             break;
 1976              		.loc 1 362 13 is_stmt 1 view .LVU561
 1977              	@ armwave.c:364: }
 363:armwave.c     ****     }
 364:armwave.c     **** }
 1978              		.loc 1 364 1 is_stmt 0 view .LVU562
 1979 08a0 1EFF2FE1 		bx	lr	@
 1980              	.L123:
 1981              		.align	2
 1982              	.L122:
 1983 08a4 00000000 		.word	g_armwave_state
 1984              		.cfi_endproc
 1985              	.LFE67:
 1987              		.align	2
 1988              		.global	armwave_dump_ppm_debug
 1989              		.syntax unified
 1990              		.arm
 1991              		.fpu vfp
 1993              	armwave_dump_ppm_debug:
 1994              	.LVL139:
 1995              	.LFB68:
 365:armwave.c     **** 
 366:armwave.c     **** /*
 367:armwave.c     ****  * Dump a ppm of a buffer to a file.
 368:armwave.c     ****  */
 369:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 370:armwave.c     **** {
 1996              		.loc 1 370 1 is_stmt 1 view -0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 371:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2000              		.loc 1 371 5 view .LVU564
 2001              	@ armwave.c:370: {
 370:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2002              		.loc 1 370 1 is_stmt 0 view .LVU565
 2003 08a8 0130A0E1 		mov	r3, r1	@ fn, fn
 2004 08ac F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2005              		.cfi_def_cfa_offset 28
 2006              		.cfi_offset 4, -28
 2007              		.cfi_offset 5, -24
 2008              		.cfi_offset 6, -20
 2009              		.cfi_offset 7, -16
 2010              		.cfi_offset 8, -12
 2011              		.cfi_offset 9, -8
 2012              		.cfi_offset 14, -4
 2013 08b0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2014 08b4 0CD04DE2 		sub	sp, sp, #12	@,,
 2015              		.cfi_def_cfa_offset 40
 2016              	@ armwave.c:371:     FILE *fp = fopen(fn, "wb");
 2017              		.loc 1 371 16 view .LVU566
 2018 08b8 D4109FE5 		ldr	r1, .L136	@,
 2019              	.LVL140:
 2020              		.loc 1 371 16 view .LVU567
 2021 08bc 0300A0E1 		mov	r0, r3	@, fn
 2022              	.LVL141:
 2023              		.loc 1 371 16 view .LVU568
 2024 08c0 FEFFFFEB 		bl	fopen64		@
 2025              	.LVL142:
 2026              	@ armwave.c:378:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 372:armwave.c     ****     uint32_t data;
 373:armwave.c     ****     int xx, yy;
 374:armwave.c     **** 
 375:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 376:armwave.c     **** 
 377:armwave.c     ****     fputs("P3\n", fp);
 378:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2027              		.loc 1 378 5 view .LVU569
 2028 08c4 CC609FE5 		ldr	r6, .L136+4	@ tmp154,
 2029              	@ armwave.c:377:     fputs("P3\n", fp);
 377:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2030              		.loc 1 377 5 view .LVU570
 2031 08c8 0320A0E3 		mov	r2, #3	@,
 2032 08cc 0110A0E3 		mov	r1, #1	@,
 2033              	@ armwave.c:371:     FILE *fp = fopen(fn, "wb");
 371:armwave.c     ****     uint32_t data;
 2034              		.loc 1 371 16 view .LVU571
 2035 08d0 0070A0E1 		mov	r7, r0	@ fp,
 2036              	.LVL143:
 372:armwave.c     ****     uint32_t data;
 2037              		.loc 1 372 5 is_stmt 1 view .LVU572
 373:armwave.c     **** 
 2038              		.loc 1 373 5 view .LVU573
 377:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2039              		.loc 1 377 5 view .LVU574
 2040 08d4 0030A0E1 		mov	r3, r0	@, fp
 2041 08d8 BC009FE5 		ldr	r0, .L136+8	@,
 2042              	.LVL144:
 377:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2043              		.loc 1 377 5 is_stmt 0 view .LVU575
 2044 08dc FEFFFFEB 		bl	fwrite		@
 2045              	.LVL145:
 2046              		.loc 1 378 5 is_stmt 1 view .LVU576
 2047 08e0 DC24C6E1 		ldrd	r2, [r6, #76]	@, tmp154,
 2048 08e4 B4109FE5 		ldr	r1, .L136+12	@,
 2049 08e8 0700A0E1 		mov	r0, r7	@, fp
 2050 08ec FEFFFFEB 		bl	fprintf		@
 2051              	.LVL146:
 379:armwave.c     ****     fputs("255\n", fp);
 2052              		.loc 1 379 5 view .LVU577
 2053 08f0 0420A0E3 		mov	r2, #4	@,
 2054 08f4 0730A0E1 		mov	r3, r7	@, fp
 2055 08f8 0110A0E3 		mov	r1, #1	@,
 2056 08fc A0009FE5 		ldr	r0, .L136+16	@,
 2057 0900 FEFFFFEB 		bl	fwrite		@
 2058              	.LVL147:
 380:armwave.c     **** 
 381:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2059              		.loc 1 381 5 view .LVU578
 2060              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2061              		.loc 1 381 37 is_stmt 0 view .LVU579
 2062 0904 502096E5 		ldr	r2, [r6, #80]	@ prephitmp_57, g_armwave_state.target_height
 2063              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2064              		.loc 1 381 5 view .LVU580
 2065 0908 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2066 090c 1800000A 		beq	.L125		@,
 2067 0910 4C3096E5 		ldr	r3, [r6, #76]	@ _12, g_armwave_state.target_width
 2068              	@ armwave.c:386:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 383:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 384:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 385:armwave.c     **** 
 386:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2069              		.loc 1 386 13 view .LVU581
 2070 0914 8C909FE5 		ldr	r9, .L136+20	@ tmp156,
 2071              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 381:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2072              		.loc 1 381 12 view .LVU582
 2073 0918 0050A0E3 		mov	r5, #0	@ yy,
 2074              	.LVL148:
 2075              	.L126:
 2076              	@ armwave.c:382:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2077              		.loc 1 382 9 view .LVU583
 2078 091c 000053E3 		cmp	r3, #0	@ _12,
 2079              	@ armwave.c:382:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2080              		.loc 1 382 16 view .LVU584
 2081 0920 0040A013 		movne	r4, #0	@ xx,
 2082              	@ armwave.c:382:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2083              		.loc 1 382 9 view .LVU585
 2084 0924 1600000A 		beq	.L135		@,
 2085              	.LVL149:
 2086              	.L127:
 383:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2087              		.loc 1 383 13 is_stmt 1 discriminator 3 view .LVU586
 2088              	@ armwave.c:383:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 383:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2089              		.loc 1 383 29 is_stmt 0 discriminator 3 view .LVU587
 2090 0928 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2091              	@ armwave.c:386:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2092              		.loc 1 386 13 discriminator 3 view .LVU588
 2093 092c 0910A0E1 		mov	r1, r9	@, tmp156
 2094 0930 0700A0E1 		mov	r0, r7	@, fp
 2095              	@ armwave.c:383:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 383:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2096              		.loc 1 383 18 discriminator 3 view .LVU589
 2097 0934 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2098              	.LVL150:
 2099              		.loc 1 386 13 is_stmt 1 discriminator 3 view .LVU590
 2100              	@ armwave.c:382:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2101              		.loc 1 382 58 is_stmt 0 discriminator 3 view .LVU591
 2102 0938 014084E2 		add	r4, r4, #1	@ xx, xx,
 2103              	.LVL151:
 2104              	@ armwave.c:386:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2105              		.loc 1 386 81 discriminator 3 view .LVU592
 2106 093c 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2107              	@ armwave.c:386:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2108              		.loc 1 386 61 discriminator 3 view .LVU593
 2109 0940 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2110              	@ armwave.c:386:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2111              		.loc 1 386 13 discriminator 3 view .LVU594
 2112 0944 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2113 0948 7330EFE6 		uxtb	r3, r3	@, tmp146
 2114 094c 00C08DE5 		str	ip, [sp]	@ tmp151,
 2115 0950 7220EFE6 		uxtb	r2, r2	@, data
 2116              	.LVL152:
 2117              		.loc 1 386 13 discriminator 3 view .LVU595
 2118 0954 FEFFFFEB 		bl	fprintf		@
 2119              	.LVL153:
 2120              	@ armwave.c:382:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2121              		.loc 1 382 41 discriminator 3 view .LVU596
 2122 0958 4C3096E5 		ldr	r3, [r6, #76]	@ _12, g_armwave_state.target_width
 2123              	@ armwave.c:382:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 382:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2124              		.loc 1 382 9 discriminator 3 view .LVU597
 2125 095c 040053E1 		cmp	r3, r4	@ _12, xx
 2126 0960 F0FFFF8A 		bhi	.L127		@,
 2127 0964 502096E5 		ldr	r2, [r6, #80]	@ prephitmp_57, g_armwave_state.target_height
 2128              	.LVL154:
 2129              	.L128:
 2130              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 381:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2131              		.loc 1 381 55 discriminator 2 view .LVU598
 2132 0968 015085E2 		add	r5, r5, #1	@ yy, yy,
 2133              	.LVL155:
 2134              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 381:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2135              		.loc 1 381 5 discriminator 2 view .LVU599
 2136 096c 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2137 0970 E9FFFF3A 		bcc	.L126		@,
 2138              	.LVL156:
 2139              	.L125:
 387:armwave.c     ****         }
 388:armwave.c     ****     }
 389:armwave.c     **** 
 390:armwave.c     ****     fclose(fp);
 2140              		.loc 1 390 5 is_stmt 1 view .LVU600
 2141 0974 0700A0E1 		mov	r0, r7	@, fp
 2142              	@ armwave.c:391: }
 391:armwave.c     **** }
 2143              		.loc 1 391 1 is_stmt 0 view .LVU601
 2144 0978 0CD08DE2 		add	sp, sp, #12	@,,
 2145              		.cfi_remember_state
 2146              		.cfi_def_cfa_offset 28
 2147              		@ sp needed	@
 2148 097c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2149              		.cfi_restore 14
 2150              		.cfi_restore 9
 2151              		.cfi_restore 8
 2152              		.cfi_restore 7
 2153              		.cfi_restore 6
 2154              		.cfi_restore 5
 2155              		.cfi_restore 4
 2156              		.cfi_def_cfa_offset 0
 2157              	.LVL157:
 2158              	@ armwave.c:390:     fclose(fp);
 390:armwave.c     **** }
 2159              		.loc 1 390 5 view .LVU602
 2160 0980 FEFFFFEA 		b	fclose		@
 2161              	.LVL158:
 2162              	.L135:
 2163              		.cfi_restore_state
 2164              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 381:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2165              		.loc 1 381 55 view .LVU603
 2166 0984 015085E2 		add	r5, r5, #1	@ yy, yy,
 2167              	.LVL159:
 2168              	@ armwave.c:381:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 381:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2169              		.loc 1 381 5 view .LVU604
 2170 0988 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2171 098c F5FFFF8A 		bhi	.L128		@,
 2172 0990 F7FFFFEA 		b	.L125		@
 2173              	.L137:
 2174              		.align	2
 2175              	.L136:
 2176 0994 38010000 		.word	.LC12
 2177 0998 00000000 		.word	g_armwave_state
 2178 099c 3C010000 		.word	.LC13
 2179 09a0 40010000 		.word	.LC14
 2180 09a4 48010000 		.word	.LC15
 2181 09a8 50010000 		.word	.LC16
 2182              		.cfi_endproc
 2183              	.LFE68:
 2185              		.align	2
 2186              		.global	armwave_test_init
 2187              		.syntax unified
 2188              		.arm
 2189              		.fpu vfp
 2191              	armwave_test_init:
 2192              	.LVL160:
 2193              	.LFB69:
 392:armwave.c     **** 
 393:armwave.c     **** /*
 394:armwave.c     ****  * Initialise some test functionry.
 395:armwave.c     ****  */
 396:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 397:armwave.c     **** {
 2194              		.loc 1 397 1 is_stmt 1 view -0
 2195              		.cfi_startproc
 2196              		@ args = 0, pretend = 0, frame = 0
 2197              		@ frame_needed = 0, uses_anonymous_args = 0
 398:armwave.c     ****     test_create_gamma();
 2198              		.loc 1 398 5 view .LVU606
 2199              	.LBB12:
 2200              	.LBI12:
  45:armwave.c     **** {
 2201              		.loc 1 45 6 view .LVU607
  45:armwave.c     **** {
 2202              		.loc 1 45 6 is_stmt 0 view .LVU608
 2203              	.LBE12:
 2204              	@ armwave.c:397: {
 397:armwave.c     ****     test_create_gamma();
 2205              		.loc 1 397 1 view .LVU609
 2206 09ac F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2207              		.cfi_def_cfa_offset 32
 2208              		.cfi_offset 4, -32
 2209              		.cfi_offset 5, -28
 2210              		.cfi_offset 6, -24
 2211              		.cfi_offset 7, -20
 2212              		.cfi_offset 8, -16
 2213              		.cfi_offset 9, -12
 2214              		.cfi_offset 10, -8
 2215              		.cfi_offset 14, -4
 2216 09b0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2217              		.cfi_def_cfa_offset 56
 2218              		.cfi_offset 80, -56
 2219              		.cfi_offset 81, -52
 2220              		.cfi_offset 82, -48
 2221              		.cfi_offset 83, -44
 2222              		.cfi_offset 84, -40
 2223              		.cfi_offset 85, -36
 2224 09b4 C0409FE5 		ldr	r4, .L142+20	@ ivtmp.98,
 2225              	.LBB15:
 2226              	.LBB13:
 2227              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2228              		.loc 1 51 32 view .LVU610
 2229 09b8 2EAA9FED 		vldr.32	s20, .L142+16	@ tmp136,
 2230              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2231              		.loc 1 51 26 view .LVU611
 2232 09bc 299B9FED 		vldr.64	d9, .L142	@ tmp151,
 2233              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2234              		.loc 1 51 49 view .LVU612
 2235 09c0 2A8B9FED 		vldr.64	d8, .L142+8	@ tmp139,
 2236 09c4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.98,
 2237              	.LBE13:
 2238              	.LBE15:
 2239              	@ armwave.c:397: {
 397:armwave.c     ****     test_create_gamma();
 2240              		.loc 1 397 1 view .LVU613
 2241 09c8 10D04DE2 		sub	sp, sp, #16	@,,
 2242              		.cfi_def_cfa_offset 72
 2243              	@ armwave.c:397: {
 397:armwave.c     ****     test_create_gamma();
 2244              		.loc 1 397 1 view .LVU614
 2245 09cc 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2246 09d0 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2247 09d4 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2248 09d8 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2249 09dc 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.98,
 2250 09e0 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2251              	.LVL161:
 2252              	.L139:
 2253              	.LBB16:
 2254              	.LBB14:
  51:armwave.c     ****     }
 2255              		.loc 1 51 9 is_stmt 1 view .LVU615
 2256              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2257              		.loc 1 51 32 is_stmt 0 view .LVU616
 2258 09e4 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.98
 2259              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2260              		.loc 1 51 26 view .LVU617
 2261 09e8 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2262              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2263              		.loc 1 51 32 view .LVU618
 2264 09ec 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2265 09f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2266 09f4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2267              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2268              		.loc 1 51 26 view .LVU619
 2269 09f8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2270 09fc FEFFFFEB 		bl	pow		@
 2271              	.LVL162:
 2272              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2273              		.loc 1 51 49 view .LVU620
 2274 0a00 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2275              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2276              		.loc 1 51 24 view .LVU621
 2277 0a04 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2278 0a08 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2279 0a0c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2280              	.LVL163:
 2281              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2282              		.loc 1 50 5 view .LVU622
 2283 0a10 0A0054E1 		cmp	r4, r10	@ ivtmp.98, _39
 2284 0a14 F2FFFF1A 		bne	.L139		@,
 2285              	.LVL164:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2286              		.loc 1 50 5 view .LVU623
 2287              	.LBE14:
 2288              	.LBE16:
 399:armwave.c     **** 
 400:armwave.c     ****     // make ch1 yellowish by default
 401:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2289              		.loc 1 401 5 is_stmt 1 view .LVU624
 2290              	.LBB17:
 2291              	.LBI17:
 354:armwave.c     **** {
 2292              		.loc 1 354 6 view .LVU625
 2293              	.LBB18:
 357:armwave.c     ****         case 1:
 2294              		.loc 1 357 5 view .LVU626
 359:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2295              		.loc 1 359 13 view .LVU627
 360:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2296              		.loc 1 360 13 view .LVU628
 2297              	@ armwave.c:359:             g_armwave_state.ch1_color.r = r;
 359:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2298              		.loc 1 359 41 is_stmt 0 view .LVU629
 2299 0a18 60C09FE5 		ldr	ip, .L142+24	@ tmp142,
 2300 0a1c 60409FE5 		ldr	r4, .L142+28	@ tmp143,
 2301              	.LBE18:
 2302              	.LBE17:
 2303              	@ armwave.c:403:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 402:armwave.c     **** 
 403:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2304              		.loc 1 403 5 view .LVU630
 2305 0a20 0000A0E3 		mov	r0, #0	@ tmp147,
 2306              	.LBB22:
 2307              	.LBB19:
 2308              	@ armwave.c:361:             g_armwave_state.ch1_color.b = b;
 361:armwave.c     ****             break;
 2309              		.loc 1 361 41 view .LVU631
 2310 0a24 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2311              	.LBE19:
 2312              	.LBE22:
 2313              	@ armwave.c:403:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2314              		.loc 1 403 5 view .LVU632
 2315 0a28 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2316 0a2c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2317 0a30 00808DE5 		str	r8, [sp]	@ render_width,
 2318 0a34 0610A0E1 		mov	r1, r6	@, tmp3
 2319 0a38 0720A0E1 		mov	r2, r7	@, nwaves
 2320              	.LBB23:
 2321              	.LBB20:
 2322              	@ armwave.c:359:             g_armwave_state.ch1_color.r = r;
 359:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2323              		.loc 1 359 41 view .LVU633
 2324 0a3c 60408CE5 		str	r4, [ip, #96]	@ tmp143, MEM[(short int *)&g_armwave_state + 96B]
 361:armwave.c     ****             break;
 2325              		.loc 1 361 13 is_stmt 1 view .LVU634
 2326              	.LBE20:
 2327              	.LBE23:
 2328              	@ armwave.c:403:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2329              		.loc 1 403 5 is_stmt 0 view .LVU635
 2330 0a40 0630A0E1 		mov	r3, r6	@, wave_size
 2331              	.LBB24:
 2332              	.LBB21:
 2333              	@ armwave.c:361:             g_armwave_state.ch1_color.b = b;
 361:armwave.c     ****             break;
 2334              		.loc 1 361 41 view .LVU636
 2335 0a44 B4E6CCE1 		strh	lr, [ip, #100]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 362:armwave.c     ****     }
 2336              		.loc 1 362 13 is_stmt 1 view .LVU637
 2337              	.LVL165:
 362:armwave.c     ****     }
 2338              		.loc 1 362 13 is_stmt 0 view .LVU638
 2339              	.LBE21:
 2340              	.LBE24:
 2341              		.loc 1 403 5 is_stmt 1 view .LVU639
 2342 0a48 FEFFFFEB 		bl	armwave_setup_render		@
 2343              	.LVL166:
 404:armwave.c     **** 
 405:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2344              		.loc 1 405 5 view .LVU640
 2345 0a4c 34109FE5 		ldr	r1, .L142+32	@,
 2346 0a50 34009FE5 		ldr	r0, .L142+36	@,
 2347              	@ armwave.c:406: }
 406:armwave.c     **** }
 2348              		.loc 1 406 1 is_stmt 0 view .LVU641
 2349 0a54 10D08DE2 		add	sp, sp, #16	@,,
 2350              		.cfi_def_cfa_offset 56
 2351              		@ sp needed	@
 2352 0a58 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2353              		.cfi_restore 84
 2354              		.cfi_restore 85
 2355              		.cfi_restore 82
 2356              		.cfi_restore 83
 2357              		.cfi_restore 80
 2358              		.cfi_restore 81
 2359              		.cfi_def_cfa_offset 32
 2360 0a5c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2361              		.cfi_restore 14
 2362              		.cfi_restore 10
 2363              		.cfi_restore 9
 2364              		.cfi_restore 8
 2365              		.cfi_restore 7
 2366              		.cfi_restore 6
 2367              		.cfi_restore 5
 2368              		.cfi_restore 4
 2369              		.cfi_def_cfa_offset 0
 2370              	.LVL167:
 2371              	@ armwave.c:405:     printf("armwave version: %s\n", ARMWAVE_VER);
 405:armwave.c     **** }
 2372              		.loc 1 405 5 view .LVU642
 2373 0a60 FEFFFFEA 		b	printf		@
 2374              	.LVL168:
 2375              	.L143:
 2376 0a64 0000A0E1 		.align	3
 2377              	.L142:
 2378 0a68 000000C0 		.word	-1073741824
 2379 0a6c CCCCEC3F 		.word	1072483532
 2380 0a70 00000000 		.word	0
 2381 0a74 00E06F40 		.word	1081073664
 2382 0a78 00007F43 		.word	1132396544
 2383 0a7c FFFFFFFF 		.word	gamma_table-1
 2384 0a80 00000000 		.word	g_armwave_state
 2385 0a84 F609F406 		.word	116656630
 2386 0a88 00000000 		.word	.LC0
 2387 0a8c 08000000 		.word	.LC1
 2388              		.cfi_endproc
 2389              	.LFE69:
 2391              		.global	__aeabi_uidiv
 2392              		.align	2
 2393              		.global	armwave_test_generate
 2394              		.syntax unified
 2395              		.arm
 2396              		.fpu vfp
 2398              	armwave_test_generate:
 2399              	.LFB70:
 407:armwave.c     **** 
 408:armwave.c     **** /*
 409:armwave.c     ****  * Fill buffers with test funtionry.
 410:armwave.c     ****  */
 411:armwave.c     **** void armwave_test_generate()
 412:armwave.c     **** {
 2400              		.loc 1 412 1 is_stmt 1 view -0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 24
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 413:armwave.c     ****     uint32_t yy;
 2404              		.loc 1 413 5 view .LVU644
 414:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2405              		.loc 1 414 5 view .LVU645
 2406              	@ armwave.c:412: {
 412:armwave.c     ****     uint32_t yy;
 2407              		.loc 1 412 1 is_stmt 0 view .LVU646
 2408 0a90 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2409              		.cfi_def_cfa_offset 36
 2410              		.cfi_offset 4, -36
 2411              		.cfi_offset 5, -32
 2412              		.cfi_offset 6, -28
 2413              		.cfi_offset 7, -24
 2414              		.cfi_offset 8, -20
 2415              		.cfi_offset 9, -16
 2416              		.cfi_offset 10, -12
 2417              		.cfi_offset 11, -8
 2418              		.cfi_offset 14, -4
 2419 0a94 1CD04DE2 		sub	sp, sp, #28	@,,
 2420              		.cfi_def_cfa_offset 64
 2421              	@ armwave.c:414:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2422              		.loc 1 414 14 view .LVU647
 2423 0a98 0C929FE5 		ldr	r9, .L166	@ tmp297,
 2424              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 415:armwave.c     **** 
 416:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2425              		.loc 1 416 5 view .LVU648
 2426 0a9c 0010A0E3 		mov	r1, #0	@,
 2427              	@ armwave.c:414:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 414:armwave.c     **** 
 2428              		.loc 1 414 14 view .LVU649
 2429 0aa0 4C3099E5 		ldr	r3, [r9, #76]	@ xx_rem, g_armwave_state.target_width
 2430              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2431              		.loc 1 416 5 view .LVU650
 2432 0aa4 442099E5 		ldr	r2, [r9, #68]	@, g_armwave_state.ch_buff_size
 2433 0aa8 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 2434              	@ armwave.c:414:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 414:armwave.c     **** 
 2435              		.loc 1 414 14 view .LVU651
 2436 0aac 0C308DE5 		str	r3, [sp, #12]	@ xx_rem, %sfp
 2437              	.LVL169:
 2438              		.loc 1 416 5 is_stmt 1 view .LVU652
 2439 0ab0 FEFFFFEB 		bl	memset		@
 2440              	.LVL170:
 417:armwave.c     **** 
 418:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 2441              		.loc 1 418 5 view .LVU653
 2442              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2443              		.loc 1 418 38 is_stmt 0 view .LVU654
 2444 0ab4 4C6099E5 		ldr	r6, [r9, #76]	@ prephitmp_95, g_armwave_state.target_width
 2445              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2446              		.loc 1 418 69 view .LVU655
 2447 0ab8 384099E5 		ldr	r4, [r9, #56]	@ _36, g_armwave_state.slice_height
 2448              	@ armwave.c:414:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 414:armwave.c     **** 
 2449              		.loc 1 414 53 view .LVU656
 2450 0abc 0030A0E3 		mov	r3, #0	@ ypos,
 2451              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2452              		.loc 1 418 5 view .LVU657
 2453 0ac0 040056E1 		cmp	r6, r4	@ prephitmp_95, _36
 2454              	@ armwave.c:414:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 414:armwave.c     **** 
 2455              		.loc 1 414 53 view .LVU658
 2456 0ac4 10308DE5 		str	r3, [sp, #16]	@ ypos, %sfp
 2457              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2458              		.loc 1 418 5 view .LVU659
 2459 0ac8 7200003A 		bcc	.L155		@,
 2460 0acc 2C5099E5 		ldr	r5, [r9, #44]	@ prephitmp_183, g_armwave_state.waves
 2461              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2462              		.loc 1 418 12 view .LVU660
 2463 0ad0 08308DE5 		str	r3, [sp, #8]	@ ypos, %sfp
 2464              	.LVL171:
 2465              	.L153:
 419:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 420:armwave.c     **** 
 421:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2466              		.loc 1 421 9 is_stmt 1 discriminator 3 view .LVU661
 2467 0ad4 08309DE5 		ldr	r3, [sp, #8]	@ yy, %sfp
 2468              	.LBB27:
 2469              	.LBB28:
 2470              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2471              		.loc 1 82 63 is_stmt 0 discriminator 3 view .LVU662
 2472 0ad8 340099E5 		ldr	r0, [r9, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2473              	.LBE28:
 2474              	.LBE27:
 2475              	@ armwave.c:421:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2476              		.loc 1 421 9 discriminator 3 view .LVU663
 2477 0adc 3C2099E5 		ldr	r2, [r9, #60]	@ _5, g_armwave_state.slice_record_height
 2478 0ae0 930403E0 		mul	r3, r3, r4	@ _4, yy, _36
 2479              	.LBB31:
 2480              	.LBB29:
 2481              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2482              		.loc 1 85 5 discriminator 3 view .LVU664
 2483 0ae4 000055E3 		cmp	r5, #0	@ prephitmp_183,
 2484              	.LBE29:
 2485              	.LBE31:
 2486              	@ armwave.c:421:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2487              		.loc 1 421 9 discriminator 3 view .LVU665
 2488 0ae8 04208DE5 		str	r2, [sp, #4]	@ _5, %sfp
 2489              	.LVL172:
 2490              	.LBB32:
 2491              	.LBI27:
  73:armwave.c     **** {
 2492              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU666
 2493              	.LBB30:
  75:armwave.c     ****     uint32_t value, word;
 2494              		.loc 1 75 5 discriminator 3 view .LVU667
  76:armwave.c     ****     uint8_t *wave_base;
 2495              		.loc 1 76 5 discriminator 3 view .LVU668
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2496              		.loc 1 77 5 discriminator 3 view .LVU669
  78:armwave.c     ****     uint8_t *write_buffer;
 2497              		.loc 1 78 5 discriminator 3 view .LVU670
  79:armwave.c     **** 
 2498              		.loc 1 79 5 discriminator 3 view .LVU671
  82:armwave.c     **** 
 2499              		.loc 1 82 5 discriminator 3 view .LVU672
 2500              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2501              		.loc 1 82 63 is_stmt 0 discriminator 3 view .LVU673
 2502 0aec 900300E0 		mul	r0, r0, r3	@ _25, g_armwave_state.bitdepth_height, _4
 2503              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2504              		.loc 1 82 40 discriminator 3 view .LVU674
 2505 0af0 042099E5 		ldr	r2, [r9, #4]	@ _23, g_armwave_state.ch1_buffer
 2506              	.LVL173:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2507              		.loc 1 85 5 is_stmt 1 discriminator 3 view .LVU675
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2508              		.loc 1 85 5 is_stmt 0 discriminator 3 view .LVU676
 2509 0af4 5400000A 		beq	.L146		@,
 2510 0af8 043043E2 		sub	r3, r3, #4	@ _105, _4,
 2511              	.LVL174:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2512              		.loc 1 85 5 discriminator 3 view .LVU677
 2513 0afc 14308DE5 		str	r3, [sp, #20]	@ _105, %sfp
 2514              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2515              		.loc 1 85 11 view .LVU678
 2516 0b00 0030A0E3 		mov	r3, #0	@ w,
 2517              	.LVL175:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2518              		.loc 1 85 11 view .LVU679
 2519 0b04 00308DE5 		str	r3, [sp]	@ w, %sfp
 2520              	.LVL176:
 2521              	.L152:
  87:armwave.c     **** 
 2522              		.loc 1 87 9 is_stmt 1 view .LVU680
 2523              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2524              		.loc 1 91 9 is_stmt 0 view .LVU681
 2525 0b08 04109DE5 		ldr	r1, [sp, #4]	@ _5, %sfp
 2526              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2527              		.loc 1 87 64 view .LVU682
 2528 0b0c 283099E5 		ldr	r3, [r9, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2529              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2530              		.loc 1 91 9 view .LVU683
 2531 0b10 000051E3 		cmp	r1, #0	@ _5,
 2532              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2533              		.loc 1 87 64 view .LVU684
 2534 0b14 00109DE5 		ldr	r1, [sp]	@ w, %sfp
 2535              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2536              		.loc 1 87 36 view .LVU685
 2537 0b18 144099E5 		ldr	r4, [r9, #20]	@ _26, g_armwave_state.wave_buffer
 2538              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2539              		.loc 1 87 64 view .LVU686
 2540 0b1c 930103E0 		mul	r3, r3, r1	@ _29, g_armwave_state.wave_stride, w
 2541              	.LVL177:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2542              		.loc 1 91 9 is_stmt 1 view .LVU687
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2543              		.loc 1 91 9 is_stmt 0 view .LVU688
 2544 0b20 4200000A 		beq	.L147		@,
 2545 0b24 14109DE5 		ldr	r1, [sp, #20]	@ _105, %sfp
 2546 0b28 013083E0 		add	r3, r3, r1	@ tmp220, _29, _105
 2547              	.LVL178:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2548              		.loc 1 91 9 view .LVU689
 2549 0b2c 034084E0 		add	r4, r4, r3	@ ivtmp.104, _26, tmp220
 2550              	.LVL179:
 2551              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2552              		.loc 1 91 16 view .LVU690
 2553 0b30 0010A0E3 		mov	r1, #0	@ yy,
 2554              	.LVL180:
 2555              	.L151:
  92:armwave.c     **** 
 2556              		.loc 1 92 13 is_stmt 1 view .LVU691
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2557              		.loc 1 102 17 view .LVU692
 103:armwave.c     ****                 word >>= 8;
 2558              		.loc 1 103 17 view .LVU693
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2559              		.loc 1 102 17 view .LVU694
 103:armwave.c     ****                 word >>= 8;
 2560              		.loc 1 103 17 view .LVU695
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2561              		.loc 1 102 17 view .LVU696
 103:armwave.c     ****                 word >>= 8;
 2562              		.loc 1 103 17 view .LVU697
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2563              		.loc 1 102 17 view .LVU698
 103:armwave.c     ****                 word >>= 8;
 2564              		.loc 1 103 17 view .LVU699
 2565              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
  92:armwave.c     **** 
 2566              		.loc 1 92 18 is_stmt 0 view .LVU700
 2567 0b34 0430B4E5 		ldr	r3, [r4, #4]!	@ word, MEM[base: _206, offset: 0B]
 2568              	.LVL181:
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2569              		.loc 1 94 13 is_stmt 1 view .LVU701
  96:armwave.c     ****                 
 2570              		.loc 1 96 17 view .LVU702
  99:armwave.c     ****                     continue;
 2571              		.loc 1 99 17 view .LVU703
 2572              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2573              		.loc 1 102 63 is_stmt 0 view .LVU704
 2574 0b38 01B081E2 		add	fp, r1, #1	@ tmp246, yy,
 2575              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2576              		.loc 1 99 20 view .LVU705
 2577 0b3c FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 2578 0b40 0180A003 		moveq	r8, #1	@ tmp222,
 2579 0b44 0080A013 		movne	r8, #0	@ tmp222,
 2580              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2581              		.loc 1 99 19 view .LVU706
 2582 0b48 FF005AE3 		cmp	r10, #255	@ scale_value,
 2583 0b4c 01808803 		orreq	r8, r8, #1	@,, tmp227, tmp222
 2584 0b50 000058E3 		cmp	r8, #0	@ tmp227,
 2585              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2586              		.loc 1 102 63 view .LVU707
 2587 0b54 026081E2 		add	r6, r1, #2	@ tmp264, yy,
 2588 0b58 035081E2 		add	r5, r1, #3	@ tmp281, yy,
 2589              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2590              		.loc 1 103 47 view .LVU708
 2591 0b5c 00708AE0 		add	r7, r10, r0	@ tmp231, scale_value, _25
 2592              	@ armwave.c:104:                 word >>= 8;
 104:armwave.c     ****             }
 2593              		.loc 1 104 22 view .LVU709
 2594 0b60 23E4A0E1 		lsr	lr, r3, #8	@ word, word,
 2595 0b64 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2596              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2597              		.loc 1 99 19 view .LVU710
 2598 0b68 2B00001A 		bne	.L154		@,
 2599              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2600              		.loc 1 102 63 view .LVU711
 2601 0b6c 348099E5 		ldr	r8, [r9, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2602              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2603              		.loc 1 99 20 view .LVU712
 2604 0b70 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 2605              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2606              		.loc 1 103 47 view .LVU713
 2607 0b74 00A08EE0 		add	r10, lr, r0	@ tmp249, scale_value, _25
 2608 0b78 987127E0 		mla	r7, r8, r1, r7	@ tmp232, g_armwave_state.bitdepth_height, yy, tmp231
 2609              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2610              		.loc 1 99 20 view .LVU714
 2611 0b7c 0180A003 		moveq	r8, #1	@ tmp239,
 2612 0b80 0080A013 		movne	r8, #0	@ tmp239,
 2613              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2614              		.loc 1 99 19 view .LVU715
 2615 0b84 FF005EE3 		cmp	lr, #255	@ scale_value,
 2616 0b88 01808803 		orreq	r8, r8, #1	@,, tmp244, tmp239
 2617              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2618              		.loc 1 103 47 view .LVU716
 2619 0b8c 07E0D2E7 		ldrb	lr, [r2, r7]	@ zero_extendqisi2	@ *_85, *_85
 2620              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2621              		.loc 1 99 19 view .LVU717
 2622 0b90 000058E3 		cmp	r8, #0	@ tmp244,
 2623              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2624              		.loc 1 103 47 view .LVU718
 2625 0b94 01E08EE2 		add	lr, lr, #1	@ tmp235, *_85,
 2626 0b98 07E0C2E7 		strb	lr, [r2, r7]	@ tmp235, *_85
 2627              	.LVL182:
 104:armwave.c     ****             }
 2628              		.loc 1 104 17 is_stmt 1 view .LVU719
  96:armwave.c     ****                 
 2629              		.loc 1 96 17 view .LVU720
  99:armwave.c     ****                     continue;
 2630              		.loc 1 99 17 view .LVU721
 2631              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2632              		.loc 1 99 19 is_stmt 0 view .LVU722
 2633 0b9c 1E00001A 		bne	.L154		@,
 2634              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2635              		.loc 1 102 63 view .LVU723
 2636 0ba0 34E099E5 		ldr	lr, [r9, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2637              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2638              		.loc 1 99 20 view .LVU724
 2639 0ba4 FF701CE2 		ands	r7, ip, #255	@ scale_value, word,
 2640 0ba8 01C0A003 		moveq	ip, #1	@ tmp257,
 2641              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2642              		.loc 1 103 47 view .LVU725
 2643 0bac 9EAB2EE0 		mla	lr, lr, fp, r10	@ tmp250, g_armwave_state.bitdepth_height, tmp246, tmp249
 2644              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2645              		.loc 1 99 20 view .LVU726
 2646 0bb0 00C0A013 		movne	ip, #0	@ tmp257,
 2647              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2648              		.loc 1 99 19 view .LVU727
 2649 0bb4 FF0057E3 		cmp	r7, #255	@ scale_value,
 2650 0bb8 01C08C03 		orreq	ip, ip, #1	@,, tmp262, tmp257
 2651              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2652              		.loc 1 103 47 view .LVU728
 2653 0bbc 008087E0 		add	r8, r7, r0	@ tmp267, scale_value, _25
 2654 0bc0 0E70D2E7 		ldrb	r7, [r2, lr]	@ zero_extendqisi2	@ *_112, *_112
 2655              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2656              		.loc 1 99 19 view .LVU729
 2657 0bc4 00005CE3 		cmp	ip, #0	@ tmp262,
 2658              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2659              		.loc 1 103 47 view .LVU730
 2660 0bc8 017087E2 		add	r7, r7, #1	@ tmp253, *_112,
 2661 0bcc 0E70C2E7 		strb	r7, [r2, lr]	@ tmp253, *_112
 104:armwave.c     ****             }
 2662              		.loc 1 104 17 is_stmt 1 view .LVU731
 2663              	.LVL183:
  96:armwave.c     ****                 
 2664              		.loc 1 96 17 view .LVU732
  99:armwave.c     ****                     continue;
 2665              		.loc 1 99 17 view .LVU733
 2666              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2667              		.loc 1 99 19 is_stmt 0 view .LVU734
 2668 0bd0 1100001A 		bne	.L154		@,
 2669              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2670              		.loc 1 102 63 view .LVU735
 2671 0bd4 34C099E5 		ldr	ip, [r9, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2672              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2673              		.loc 1 99 20 view .LVU736
 2674 0bd8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2675              	.LVL184:
  99:armwave.c     ****                     continue;
 2676              		.loc 1 99 20 view .LVU737
 2677 0bdc 01E0A003 		moveq	lr, #1	@ tmp274,
 2678              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2679              		.loc 1 103 47 view .LVU738
 2680 0be0 9C862CE0 		mla	ip, ip, r6, r8	@ tmp268, g_armwave_state.bitdepth_height, tmp264, tmp267
 2681              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2682              		.loc 1 99 20 view .LVU739
 2683 0be4 00E0A013 		movne	lr, #0	@ tmp274,
 2684              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2685              		.loc 1 103 47 view .LVU740
 2686 0be8 037080E0 		add	r7, r0, r3	@ tmp284, _25, word
 2687              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2688              		.loc 1 99 19 view .LVU741
 2689 0bec FF0053E3 		cmp	r3, #255	@ word,
 2690 0bf0 0E30A011 		movne	r3, lr	@, tmp279, tmp274
 2691 0bf4 01308E03 		orreq	r3, lr, #1	@,, tmp279, tmp274
 2692              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2693              		.loc 1 103 47 view .LVU742
 2694 0bf8 0CE0D2E7 		ldrb	lr, [r2, ip]	@ zero_extendqisi2	@ *_139, *_139
 2695              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2696              		.loc 1 99 19 view .LVU743
 2697 0bfc 000053E3 		cmp	r3, #0	@ tmp279,
 2698              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2699              		.loc 1 103 47 view .LVU744
 2700 0c00 01E08EE2 		add	lr, lr, #1	@ tmp271, *_139,
 2701 0c04 0CE0C2E7 		strb	lr, [r2, ip]	@ tmp271, *_139
 104:armwave.c     ****             }
 2702              		.loc 1 104 17 is_stmt 1 view .LVU745
 2703              	.LVL185:
  96:armwave.c     ****                 
 2704              		.loc 1 96 17 view .LVU746
  99:armwave.c     ****                     continue;
 2705              		.loc 1 99 17 view .LVU747
 2706              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2707              		.loc 1 102 63 is_stmt 0 view .LVU748
 2708 0c08 34309905 		ldreq	r3, [r9, #52]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2709              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2710              		.loc 1 103 47 view .LVU749
 2711 0c0c 93752300 		mlaeq	r3, r3, r5, r7	@ tmp285, g_armwave_state.bitdepth_height, tmp281, tmp284
 2712 0c10 03C0D207 		ldrbeq	ip, [r2, r3]	@ zero_extendqisi2	@ *_166, *_166
 2713 0c14 01C08C02 		addeq	ip, ip, #1	@ tmp288, *_166,
 2714 0c18 03C0C207 		strbeq	ip, [r2, r3]	@ tmp288, *_166
 104:armwave.c     ****             }
 2715              		.loc 1 104 17 is_stmt 1 view .LVU750
 2716              	.LVL186:
 2717              	.L154:
 2718              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2719              		.loc 1 91 9 is_stmt 0 view .LVU751
 2720 0c1c 04309DE5 		ldr	r3, [sp, #4]	@ _5, %sfp
 2721              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2722              		.loc 1 91 37 view .LVU752
 2723 0c20 041081E2 		add	r1, r1, #4	@ yy, yy,
 2724              	.LVL187:
 2725              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2726              		.loc 1 91 9 view .LVU753
 2727 0c24 010053E1 		cmp	r3, r1	@ _5, yy
 2728 0c28 C1FFFF8A 		bhi	.L151		@,
 2729 0c2c 2C5099E5 		ldr	r5, [r9, #44]	@ prephitmp_183, g_armwave_state.waves
 2730              	.LVL188:
 2731              	.L147:
 2732              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2733              		.loc 1 85 44 view .LVU754
 2734 0c30 00309DE5 		ldr	r3, [sp]	@ w, %sfp
 2735 0c34 013083E2 		add	r3, r3, #1	@ w, w,
 2736              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2737              		.loc 1 85 5 view .LVU755
 2738 0c38 050053E1 		cmp	r3, r5	@ w, prephitmp_183
 2739              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2740              		.loc 1 85 44 view .LVU756
 2741 0c3c 00308DE5 		str	r3, [sp]	@ w, %sfp
 2742              	.LVL189:
 2743              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2744              		.loc 1 85 5 view .LVU757
 2745 0c40 B0FFFF3A 		bcc	.L152		@,
 2746 0c44 384099E5 		ldr	r4, [r9, #56]	@ _36, g_armwave_state.slice_height
 2747 0c48 4C6099E5 		ldr	r6, [r9, #76]	@ prephitmp_95, g_armwave_state.target_width
 2748              	.LVL190:
 2749              	.L146:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2750              		.loc 1 85 5 view .LVU758
 2751              	.LBE30:
 2752              	.LBE32:
 422:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2753              		.loc 1 422 9 is_stmt 1 discriminator 3 view .LVU759
 2754              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 418:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2755              		.loc 1 418 52 is_stmt 0 discriminator 3 view .LVU760
 2756 0c4c 0410A0E1 		mov	r1, r4	@, _36
 2757 0c50 0600A0E1 		mov	r0, r6	@, prephitmp_95
 2758              	.LVL191:
 418:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2759              		.loc 1 418 52 discriminator 3 view .LVU761
 2760 0c54 FEFFFFEB 		bl	__aeabi_uidiv		@
 2761              	.LVL192:
 2762              	@ armwave.c:422:         xx_rem -= g_armwave_state.slice_height;
 2763              		.loc 1 422 16 discriminator 3 view .LVU762
 2764 0c58 0C209DE5 		ldr	r2, [sp, #12]	@ xx_rem, %sfp
 2765              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 418:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2766              		.loc 1 418 87 discriminator 3 view .LVU763
 2767 0c5c 08309DE5 		ldr	r3, [sp, #8]	@ yy, %sfp
 2768              	@ armwave.c:422:         xx_rem -= g_armwave_state.slice_height;
 2769              		.loc 1 422 16 discriminator 3 view .LVU764
 2770 0c60 042042E0 		sub	r2, r2, r4	@ xx_rem, xx_rem, _36
 2771 0c64 0C208DE5 		str	r2, [sp, #12]	@ xx_rem, %sfp
 2772              	.LVL193:
 423:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2773              		.loc 1 423 9 is_stmt 1 discriminator 3 view .LVU765
 2774              	@ armwave.c:423:         ypos += g_armwave_state.slice_height;
 2775              		.loc 1 423 14 is_stmt 0 discriminator 3 view .LVU766
 2776 0c68 10209DE5 		ldr	r2, [sp, #16]	@ ypos, %sfp
 2777              	.LVL194:
 2778              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 418:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2779              		.loc 1 418 87 discriminator 3 view .LVU767
 2780 0c6c 013083E2 		add	r3, r3, #1	@ yy, yy,
 2781              	@ armwave.c:423:         ypos += g_armwave_state.slice_height;
 2782              		.loc 1 423 14 discriminator 3 view .LVU768
 2783 0c70 042082E0 		add	r2, r2, r4	@ ypos, ypos, _36
 2784              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 418:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2785              		.loc 1 418 87 discriminator 3 view .LVU769
 2786 0c74 08308DE5 		str	r3, [sp, #8]	@ yy, %sfp
 2787              	.LVL195:
 2788              	@ armwave.c:423:         ypos += g_armwave_state.slice_height;
 2789              		.loc 1 423 14 discriminator 3 view .LVU770
 2790 0c78 10208DE5 		str	r2, [sp, #16]	@ ypos, %sfp
 2791              	.LVL196:
 2792              	@ armwave.c:418:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 418:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2793              		.loc 1 418 5 discriminator 3 view .LVU771
 2794 0c7c 030050E1 		cmp	r0, r3	@, yy
 2795 0c80 93FFFF8A 		bhi	.L153		@,
 2796 0c84 0200A0E1 		mov	r0, r2	@, ypos
 424:armwave.c     ****     }
 425:armwave.c     **** 
 426:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2797              		.loc 1 426 5 is_stmt 1 view .LVU772
 2798 0c88 0C109DE5 		ldr	r1, [sp, #12]	@, %sfp
 2799              	@ armwave.c:427: }
 427:armwave.c     **** }
 2800              		.loc 1 427 1 is_stmt 0 view .LVU773
 2801 0c8c 1CD08DE2 		add	sp, sp, #28	@,,
 2802              		.cfi_remember_state
 2803              		.cfi_def_cfa_offset 36
 2804              		@ sp needed	@
 2805 0c90 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2806              		.cfi_restore 14
 2807              		.cfi_restore 11
 2808              		.cfi_restore 10
 2809              		.cfi_restore 9
 2810              		.cfi_restore 8
 2811              		.cfi_restore 7
 2812              		.cfi_restore 6
 2813              		.cfi_restore 5
 2814              		.cfi_restore 4
 2815              		.cfi_def_cfa_offset 0
 2816              	@ armwave.c:426:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 426:armwave.c     **** }
 2817              		.loc 1 426 5 view .LVU774
 2818 0c94 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2819              	.LVL197:
 2820              	.L155:
 2821              		.cfi_restore_state
 426:armwave.c     **** }
 2822              		.loc 1 426 5 view .LVU775
 2823 0c98 0300A0E1 		mov	r0, r3	@, ypos
 426:armwave.c     **** }
 2824              		.loc 1 426 5 is_stmt 1 view .LVU776
 2825 0c9c 0C109DE5 		ldr	r1, [sp, #12]	@, %sfp
 2826              	@ armwave.c:427: }
 2827              		.loc 1 427 1 is_stmt 0 view .LVU777
 2828 0ca0 1CD08DE2 		add	sp, sp, #28	@,,
 2829              		.cfi_def_cfa_offset 36
 2830              		@ sp needed	@
 2831 0ca4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2832              		.cfi_restore 14
 2833              		.cfi_restore 11
 2834              		.cfi_restore 10
 2835              		.cfi_restore 9
 2836              		.cfi_restore 8
 2837              		.cfi_restore 7
 2838              		.cfi_restore 6
 2839              		.cfi_restore 5
 2840              		.cfi_restore 4
 2841              		.cfi_def_cfa_offset 0
 2842              	@ armwave.c:426:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 426:armwave.c     **** }
 2843              		.loc 1 426 5 view .LVU778
 2844 0ca8 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2845              	.LVL198:
 2846              	.L167:
 2847              		.align	2
 2848              	.L166:
 2849 0cac 00000000 		.word	g_armwave_state
 2850              		.cfi_endproc
 2851              	.LFE70:
 2853              		.align	2
 2854              		.global	armwave_test_fill_outbuf
 2855              		.syntax unified
 2856              		.arm
 2857              		.fpu vfp
 2859              	armwave_test_fill_outbuf:
 2860              	.LFB71:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Render image to the local allocated buffer.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_fill_outbuf()
 433:armwave.c     **** {
 2861              		.loc 1 433 1 is_stmt 1 view -0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 8
 2864              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2865              		.loc 1 434 5 view .LVU780
 2866 0cb0 50C19FE5 		ldr	ip, .L189	@ tmp205,
 2867              	@ armwave.c:433: {
 433:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2868              		.loc 1 433 1 is_stmt 0 view .LVU781
 2869 0cb4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2870              		.cfi_def_cfa_offset 36
 2871              		.cfi_offset 4, -36
 2872              		.cfi_offset 5, -32
 2873              		.cfi_offset 6, -28
 2874              		.cfi_offset 7, -24
 2875              		.cfi_offset 8, -20
 2876              		.cfi_offset 9, -16
 2877              		.cfi_offset 10, -12
 2878              		.cfi_offset 11, -8
 2879              		.cfi_offset 14, -4
 2880 0cb8 0CD04DE2 		sub	sp, sp, #12	@,,
 2881              		.cfi_def_cfa_offset 48
 2882              	@ armwave.c:434:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2883              		.loc 1 434 5 view .LVU782
 2884 0cbc 5C809CE5 		ldr	r8, [ip, #92]	@ _1, g_armwave_state.out_pixbuf
 2885              	.LVL199:
 2886              	.LBB35:
 2887              	.LBI35:
 167:armwave.c     **** {
 2888              		.loc 1 167 6 is_stmt 1 view .LVU783
 2889              	.LBB36:
 169:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2890              		.loc 1 169 5 view .LVU784
 170:armwave.c     ****     uint8_t r, g, b, value, row;
 2891              		.loc 1 170 5 view .LVU785
 171:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2892              		.loc 1 171 5 view .LVU786
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2893              		.loc 1 172 5 view .LVU787
 2894              	@ armwave.c:172:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2895              		.loc 1 172 15 is_stmt 0 view .LVU788
 2896 0cc0 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2897              	.LVL200:
 173:armwave.c     ****     uint32_t offset;
 2898              		.loc 1 173 5 is_stmt 1 view .LVU789
 174:armwave.c     **** 
 2899              		.loc 1 174 5 view .LVU790
 176:armwave.c     **** 
 2900              		.loc 1 176 5 view .LVU791
 2901 0cc4 000058E3 		cmp	r8, #0	@ _1,
 2902 0cc8 4900000A 		beq	.L187		@,
 178:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2903              		.loc 1 178 5 view .LVU792
 2904              	@ armwave.c:178:     npix = g_armwave_state.target_width * 256; 
 178:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2905              		.loc 1 178 41 is_stmt 0 view .LVU793
 2906 0ccc 4C709CE5 		ldr	r7, [ip, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2907 0cd0 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2908              	.LVL201:
 179:armwave.c     **** 
 2909              		.loc 1 179 5 is_stmt 1 view .LVU794
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2910              		.loc 1 181 5 view .LVU795
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2911              		.loc 1 181 5 is_stmt 0 view .LVU796
 2912 0cd4 000057E3 		cmp	r7, #0	@ npix,
 2913 0cd8 0A0000DA 		ble	.L168		@,
 2914              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2915              		.loc 1 193 52 view .LVU797
 2916 0cdc F0B6DCE1 		ldrsh	fp, [ip, #96]	@ _18, g_armwave_state.ch1_color.r
 2917              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2918              		.loc 1 194 52 view .LVU798
 2919 0ce0 F2A6DCE1 		ldrsh	r10, [ip, #98]	@ _24, g_armwave_state.ch1_color.g
 2920              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 2921              		.loc 1 195 52 view .LVU799
 2922 0ce4 F456DCE1 		ldrsh	r5, [ip, #100]	@ _28, g_armwave_state.ch1_color.b
 2923              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2924              		.loc 1 217 57 view .LVU800
 2925 0ce8 076ADCED 		vldr.32	s13, [ip, #28]	@ _50, g_armwave_state.vscale_frac
 2926              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2927              		.loc 1 181 11 view .LVU801
 2928 0cec 00E0A0E3 		mov	lr, #0	@ n,
 2929              	.LVL202:
 2930              	.L175:
 185:armwave.c     **** 
 2931              		.loc 1 185 9 is_stmt 1 view .LVU802
 2932              	@ armwave.c:185:         wave_word = *base_32ptr++;
 185:armwave.c     **** 
 2933              		.loc 1 185 19 is_stmt 0 view .LVU803
 2934 0cf0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2935              	.LVL203:
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 2936              		.loc 1 187 9 is_stmt 1 view .LVU804
 2937              	@ armwave.c:187:         if(COND_UNLIKELY(wave_word != 0)) {
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 2938              		.loc 1 187 11 is_stmt 0 view .LVU805
 2939 0cf4 000050E3 		cmp	r0, #0	@ wave_word,
 2940 0cf8 0400001A 		bne	.L184		@,
 2941 0cfc 04E08EE2 		add	lr, lr, #4	@ n, n,
 2942              	.L171:
 2943              	.LVL204:
 2944              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2945              		.loc 1 181 5 view .LVU806
 2946 0d00 0E0057E1 		cmp	r7, lr	@ npix, n
 2947 0d04 F9FFFFCA 		bgt	.L175		@,
 2948              	.LVL205:
 2949              	.L168:
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2950              		.loc 1 181 5 view .LVU807
 2951              	.LBE36:
 2952              	.LBE35:
 2953              	@ armwave.c:435: }
 435:armwave.c     **** }
 2954              		.loc 1 435 1 view .LVU808
 2955 0d08 0CD08DE2 		add	sp, sp, #12	@,,
 2956              		.cfi_remember_state
 2957              		.cfi_def_cfa_offset 36
 2958              		@ sp needed	@
 2959 0d0c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2960              	.LVL206:
 2961              	.L184:
 2962              		.cfi_restore_state
 2963              	.LBB38:
 2964              	.LBB37:
 2965              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2966              		.loc 1 192 19 view .LVU809
 2967 0d10 FF1010E2 		ands	r1, r0, #255	@ _20, wave_word,
 2968              	@ armwave.c:187:         if(COND_UNLIKELY(wave_word != 0)) {
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 2969              		.loc 1 187 11 view .LVU810
 2970 0d14 0E60A0E1 		mov	r6, lr	@ ivtmp.121, n
 2971              	.LVL207:
 189:armwave.c     ****                 wave_word >>= 8;
 2972              		.loc 1 189 17 is_stmt 1 view .LVU811
 190:armwave.c     **** 
 2973              		.loc 1 190 17 view .LVU812
 2974              	@ armwave.c:190:                 wave_word >>= 8;
 190:armwave.c     **** 
 2975              		.loc 1 190 27 is_stmt 0 view .LVU813
 2976 0d18 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2977              	.LVL208:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2978              		.loc 1 192 17 is_stmt 1 view .LVU814
 2979 0d1c 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.121,
 2980              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2981              		.loc 1 192 19 is_stmt 0 view .LVU815
 2982 0d20 0500001A 		bne	.L188		@,
 2983              	.LVL209:
 2984              	.L172:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2985              		.loc 1 192 19 view .LVU816
 2986 0d24 016086E2 		add	r6, r6, #1	@ ivtmp.121, ivtmp.121,
 2987              	@ armwave.c:188:             for(w = 0; w < 4; w++) {
 188:armwave.c     ****                 value = wave_word & 0xff;
 2988              		.loc 1 188 13 view .LVU817
 2989 0d28 06005EE1 		cmp	lr, r6	@ n, ivtmp.121
 2990 0d2c F3FFFF0A 		beq	.L171		@,
 189:armwave.c     ****                 wave_word >>= 8;
 2991              		.loc 1 189 17 is_stmt 1 view .LVU818
 2992              	.LVL210:
 190:armwave.c     **** 
 2993              		.loc 1 190 17 view .LVU819
 2994              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2995              		.loc 1 192 19 is_stmt 0 view .LVU820
 2996 0d30 FF1010E2 		ands	r1, r0, #255	@ _20, wave_word,
 2997              	@ armwave.c:190:                 wave_word >>= 8;
 190:armwave.c     **** 
 2998              		.loc 1 190 27 view .LVU821
 2999 0d34 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3000              	.LVL211:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3001              		.loc 1 192 17 is_stmt 1 view .LVU822
 3002              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3003              		.loc 1 192 19 is_stmt 0 view .LVU823
 3004 0d38 F9FFFF0A 		beq	.L172		@,
 3005              	.L188:
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3006              		.loc 1 193 21 is_stmt 1 view .LVU824
 3007              	.LVL212:
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3008              		.loc 1 194 21 view .LVU825
 195:armwave.c     **** 
 3009              		.loc 1 195 21 view .LVU826
 197:armwave.c     ****                     g = MIN(gg, 255);
 3010              		.loc 1 197 21 view .LVU827
 198:armwave.c     ****                     b = MIN(bb, 255);
 3011              		.loc 1 198 21 view .LVU828
 199:armwave.c     **** 
 3012              		.loc 1 199 21 view .LVU829
 202:armwave.c     **** 
 3013              		.loc 1 202 21 view .LVU830
 3014              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3015              		.loc 1 217 32 is_stmt 0 view .LVU831
 3016 0d3c 7630EFE6 		uxtb	r3, r6	@ _48, ivtmp.121
 3017              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3018              		.loc 1 218 41 view .LVU832
 3019 0d40 012083E2 		add	r2, r3, #1	@ tmp197, _48,
 3020              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3021              		.loc 1 217 40 view .LVU833
 3022 0d44 903A07EE 		vmov	s15, r3	@ int	@ _48, _48
 3023              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3024              		.loc 1 218 41 view .LVU834
 3025 0d48 102A07EE 		vmov	s14, r2	@ int	@ tmp197, tmp197
 3026              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 3027              		.loc 1 195 55 view .LVU835
 3028 0d4c 950103E0 		mul	r3, r5, r1	@ tmp182, _28, _20
 3029              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3030              		.loc 1 217 40 view .LVU836
 3031 0d50 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _48
 3032              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3033              		.loc 1 218 46 view .LVU837
 3034 0d54 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 3035              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3036              		.loc 1 194 55 view .LVU838
 3037 0d58 9A0102E0 		mul	r2, r10, r1	@ tmp186, _24, _20
 3038              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 3039              		.loc 1 195 24 view .LVU839
 3040 0d5c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp182,
 3041              	.LVL213:
 3042              	@ armwave.c:199:                     b = MIN(bb, 255);
 199:armwave.c     **** 
 3043              		.loc 1 199 25 view .LVU840
 3044 0d60 FF0053E3 		cmp	r3, #255	@ bb,
 3045              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3046              		.loc 1 194 24 view .LVU841
 3047 0d64 4224A0E1 		asr	r2, r2, #8	@ gg, tmp186,
 3048              	.LVL214:
 3049              	@ armwave.c:199:                     b = MIN(bb, 255);
 199:armwave.c     **** 
 3050              		.loc 1 199 25 view .LVU842
 3051 0d68 FF30A0A3 		movge	r3, #255	@ bb,
 3052              	.LVL215:
 3053              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3054              		.loc 1 217 40 view .LVU843
 3055 0d6c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _50
 3056              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3057              		.loc 1 218 46 view .LVU844
 3058 0d70 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _50
 3059              	@ armwave.c:198:                     g = MIN(gg, 255);
 198:armwave.c     ****                     b = MIN(bb, 255);
 3060              		.loc 1 198 25 view .LVU845
 3061 0d74 FF0052E3 		cmp	r2, #255	@ gg,
 3062 0d78 FF20A0A3 		movge	r2, #255	@ gg,
 3063              	.LVL216:
 3064              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3065              		.loc 1 193 55 view .LVU846
 3066 0d7c 910B01E0 		mul	r1, r1, fp	@ tmp192, _20, _18
 3067              	.LVL217:
 3068              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3069              		.loc 1 202 56 view .LVU847
 3070 0d80 0224A0E1 		lsl	r2, r2, #8	@ tmp187, gg,
 3071              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3072              		.loc 1 202 44 view .LVU848
 3073 0d84 0338A0E1 		lsl	r3, r3, #16	@ tmp183, bb,
 3074              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3075              		.loc 1 217 24 view .LVU849
 3076 0d88 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 3077              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3078              		.loc 1 193 24 view .LVU850
 3079 0d8c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp192,
 3080              	.LVL218:
 3081              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3082              		.loc 1 202 56 view .LVU851
 3083 0d90 7220FFE6 		uxth	r2, r2	@ tmp188, tmp187
 3084              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3085              		.loc 1 202 44 view .LVU852
 3086 0d94 FF3803E2 		and	r3, r3, #16711680	@ tmp184, tmp183,
 3087              	@ armwave.c:197:                     r = MIN(rr, 255);
 197:armwave.c     ****                     g = MIN(gg, 255);
 3088              		.loc 1 197 25 view .LVU853
 3089 0d98 FF0051E3 		cmp	r1, #255	@ rr,
 3090              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3091              		.loc 1 202 51 view .LVU854
 3092 0d9c 023083E1 		orr	r3, r3, r2	@ tmp190, tmp184, tmp188
 3093              	@ armwave.c:197:                     r = MIN(rr, 255);
 197:armwave.c     ****                     g = MIN(gg, 255);
 3094              		.loc 1 197 25 view .LVU855
 3095 0da0 FF10A0A3 		movge	r1, #255	@ rr,
 3096              	.LVL219:
 3097              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3098              		.loc 1 217 24 view .LVU856
 3099 0da4 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 3100              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3101              		.loc 1 218 24 view .LVU857
 3102 0da8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 3103              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3104              		.loc 1 202 62 view .LVU858
 3105 0dac 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3106 0db0 013083E1 		orr	r3, r3, r1	@ tmp194, tmp190, rr
 3107              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3108              		.loc 1 202 26 view .LVU859
 3109 0db4 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp194,
 3110              	.LVL220:
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3111              		.loc 1 216 21 is_stmt 1 view .LVU860
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3112              		.loc 1 217 21 view .LVU861
 218:armwave.c     ****                     xx = (nsub >> 8);
 3113              		.loc 1 218 21 view .LVU862
 219:armwave.c     **** 
 3114              		.loc 1 219 21 view .LVU863
 3115              	@ armwave.c:219:                     xx = (nsub >> 8);
 219:armwave.c     **** 
 3116              		.loc 1 219 32 is_stmt 0 view .LVU864
 3117 0db8 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.121,
 3118              	.LVL221:
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3119              		.loc 1 221 21 is_stmt 1 view .LVU865
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3120              		.loc 1 221 21 is_stmt 0 view .LVU866
 3121 0dbc 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3122              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3123              		.loc 1 218 24 view .LVU867
 3124 0dc0 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3125              	.LVL222:
 3126              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3127              		.loc 1 221 21 view .LVU868
 3128 0dc4 020054E1 		cmp	r4, r2	@ yy, ye
 3129 0dc8 D5FFFF2A 		bcs	.L172		@,
 3130 0dcc 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3131              	.LVL223:
 3132              	.L173:
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3133              		.loc 1 222 25 is_stmt 1 view .LVU869
 223:armwave.c     ****                     }
 3134              		.loc 1 223 25 view .LVU870
 3135              	@ armwave.c:222:                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3136              		.loc 1 222 43 is_stmt 0 view .LVU871
 3137 0dd0 4C209CE5 		ldr	r2, [ip, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3138              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3139              		.loc 1 221 21 view .LVU872
 3140 0dd4 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3141              	@ armwave.c:223:                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 3142              		.loc 1 223 43 view .LVU873
 3143 0dd8 921422E0 		mla	r2, r2, r4, r1	@ tmp203, g_armwave_state.target_width, yy, xx
 3144              	.LVL224:
 3145              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3146              		.loc 1 221 42 view .LVU874
 3147 0ddc 014084E2 		add	r4, r4, #1	@ yy, yy,
 3148              	.LVL225:
 3149              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3150              		.loc 1 221 21 view .LVU875
 3151 0de0 040050E1 		cmp	r0, r4	@ ye, yy
 3152              	@ armwave.c:223:                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 3153              		.loc 1 223 53 view .LVU876
 3154 0de4 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 3155              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3156              		.loc 1 221 21 view .LVU877
 3157 0de8 F8FFFF1A 		bne	.L173		@,
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3158              		.loc 1 221 21 view .LVU878
 3159 0dec 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3160 0df0 CBFFFFEA 		b	.L172		@
 3161              	.LVL226:
 3162              	.L187:
 176:armwave.c     **** 
 3163              		.loc 1 176 5 is_stmt 1 view .LVU879
 3164 0df4 10309FE5 		ldr	r3, .L189+4	@,
 3165 0df8 B020A0E3 		mov	r2, #176	@,
 3166 0dfc 0C109FE5 		ldr	r1, .L189+8	@,
 3167 0e00 0C009FE5 		ldr	r0, .L189+12	@,
 3168 0e04 FEFFFFEB 		bl	__assert_fail		@
 3169              	.LVL227:
 3170              	.L190:
 3171              		.align	2
 3172              	.L189:
 3173 0e08 00000000 		.word	g_armwave_state
 3174 0e0c 18000000 		.word	.LANCHOR0+24
 3175 0e10 20000000 		.word	.LC2
 3176 0e14 2C000000 		.word	.LC3
 3177              	.LBE37:
 3178              	.LBE38:
 3179              		.cfi_endproc
 3180              	.LFE71:
 3182              		.align	2
 3183              		.global	armwave_test_dump_buffer_to_ppm
 3184              		.syntax unified
 3185              		.arm
 3186              		.fpu vfp
 3188              	armwave_test_dump_buffer_to_ppm:
 3189              	.LVL228:
 3190              	.LFB72:
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 441:armwave.c     **** {
 3191              		.loc 1 441 1 view -0
 3192              		.cfi_startproc
 3193              		@ args = 0, pretend = 0, frame = 0
 3194              		@ frame_needed = 0, uses_anonymous_args = 0
 3195              		@ link register save eliminated.
 442:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3196              		.loc 1 442 5 view .LVU881
 3197 0e18 08309FE5 		ldr	r3, .L192	@ tmp112,
 3198 0e1c 0010A0E1 		mov	r1, r0	@, fn
 3199 0e20 5C0093E5 		ldr	r0, [r3, #92]	@, g_armwave_state.out_pixbuf
 3200              	.LVL229:
 3201              		.loc 1 442 5 is_stmt 0 view .LVU882
 3202 0e24 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3203              	.LVL230:
 3204              	.L193:
 3205              		.loc 1 442 5 view .LVU883
 3206              		.align	2
 3207              	.L192:
 3208 0e28 00000000 		.word	g_armwave_state
 3209              		.cfi_endproc
 3210              	.LFE72:
 3212              		.align	2
 3213              		.global	armwave_test_fill_gdkbuf
 3214              		.syntax unified
 3215              		.arm
 3216              		.fpu vfp
 3218              	armwave_test_fill_gdkbuf:
 3219              	.LVL231:
 3220              	.LFB73:
 443:armwave.c     **** }
 444:armwave.c     **** 
 445:armwave.c     **** /*
 446:armwave.c     ****  * Render GDK buffer with test funtionry.
 447:armwave.c     ****  */
 448:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 449:armwave.c     **** {
 3221              		.loc 1 449 1 is_stmt 1 view -0
 3222              		.cfi_startproc
 3223              		@ args = 0, pretend = 0, frame = 8
 3224              		@ frame_needed = 0, uses_anonymous_args = 0
 450:armwave.c     ****     //PyObject *mv;
 451:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 452:armwave.c     **** 
 453:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 454:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3225              		.loc 1 454 5 view .LVU885
 3226              	@ armwave.c:454:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3227              		.loc 1 454 11 is_stmt 0 view .LVU886
 3228 0e2c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3229              	@ armwave.c:449: {
 449:armwave.c     ****     //PyObject *mv;
 3230              		.loc 1 449 1 view .LVU887
 3231 0e30 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3232              		.cfi_def_cfa_offset 36
 3233              		.cfi_offset 4, -36
 3234              		.cfi_offset 5, -32
 3235              		.cfi_offset 6, -28
 3236              		.cfi_offset 7, -24
 3237              		.cfi_offset 8, -20
 3238              		.cfi_offset 9, -16
 3239              		.cfi_offset 10, -12
 3240              		.cfi_offset 11, -8
 3241              		.cfi_offset 14, -4
 3242 0e34 0CD04DE2 		sub	sp, sp, #12	@,,
 3243              		.cfi_def_cfa_offset 48
 3244              	.LBB41:
 3245              	.LBB42:
 3246              	@ armwave.c:172:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3247              		.loc 1 172 15 view .LVU888
 3248 0e38 48519FE5 		ldr	r5, .L215	@ tmp208,
 3249              	.LBE42:
 3250              	.LBE41:
 3251              	@ armwave.c:454:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3252              		.loc 1 454 11 view .LVU889
 3253 0e3c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3254              	.LVL232:
 455:armwave.c     ****     
 456:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 457:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3255              		.loc 1 457 5 is_stmt 1 view .LVU890
 3256              	.LBB45:
 3257              	.LBI41:
 167:armwave.c     **** {
 3258              		.loc 1 167 6 view .LVU891
 3259              	.LBB43:
 169:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 3260              		.loc 1 169 5 view .LVU892
 170:armwave.c     ****     uint8_t r, g, b, value, row;
 3261              		.loc 1 170 5 view .LVU893
 171:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 3262              		.loc 1 171 5 view .LVU894
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3263              		.loc 1 172 5 view .LVU895
 3264              	@ armwave.c:176:     assert(out_buffer != NULL);
 176:armwave.c     **** 
 3265              		.loc 1 176 5 is_stmt 0 view .LVU896
 3266 0e40 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3267              	@ armwave.c:172:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 172:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3268              		.loc 1 172 15 view .LVU897
 3269 0e44 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3270              	.LVL233:
 173:armwave.c     ****     uint32_t offset;
 3271              		.loc 1 173 5 is_stmt 1 view .LVU898
 174:armwave.c     **** 
 3272              		.loc 1 174 5 view .LVU899
 176:armwave.c     **** 
 3273              		.loc 1 176 5 view .LVU900
 3274 0e48 4900000A 		beq	.L213		@,
 178:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3275              		.loc 1 178 5 view .LVU901
 3276              	@ armwave.c:178:     npix = g_armwave_state.target_width * 256; 
 178:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 3277              		.loc 1 178 41 is_stmt 0 view .LVU902
 3278 0e4c 4C7095E5 		ldr	r7, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3279 0e50 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 3280              	.LVL234:
 179:armwave.c     **** 
 3281              		.loc 1 179 5 is_stmt 1 view .LVU903
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3282              		.loc 1 181 5 view .LVU904
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3283              		.loc 1 181 5 is_stmt 0 view .LVU905
 3284 0e54 000057E3 		cmp	r7, #0	@ npix,
 3285 0e58 0A0000DA 		ble	.L194		@,
 3286              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3287              		.loc 1 193 52 view .LVU906
 3288 0e5c F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _20, g_armwave_state.ch1_color.r
 3289              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3290              		.loc 1 194 52 view .LVU907
 3291 0e60 F2A6D5E1 		ldrsh	r10, [r5, #98]	@ _26, g_armwave_state.ch1_color.g
 3292              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 3293              		.loc 1 195 52 view .LVU908
 3294 0e64 F446D5E1 		ldrsh	r4, [r5, #100]	@ _30, g_armwave_state.ch1_color.b
 3295              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3296              		.loc 1 217 57 view .LVU909
 3297 0e68 076AD5ED 		vldr.32	s13, [r5, #28]	@ _52, g_armwave_state.vscale_frac
 3298              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3299              		.loc 1 181 11 view .LVU910
 3300 0e6c 00C0A0E3 		mov	ip, #0	@ n,
 3301              	.LVL235:
 3302              	.L201:
 185:armwave.c     **** 
 3303              		.loc 1 185 9 is_stmt 1 view .LVU911
 3304              	@ armwave.c:185:         wave_word = *base_32ptr++;
 185:armwave.c     **** 
 3305              		.loc 1 185 19 is_stmt 0 view .LVU912
 3306 0e70 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 3307              	.LVL236:
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 3308              		.loc 1 187 9 is_stmt 1 view .LVU913
 3309              	@ armwave.c:187:         if(COND_UNLIKELY(wave_word != 0)) {
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 3310              		.loc 1 187 11 is_stmt 0 view .LVU914
 3311 0e74 000050E3 		cmp	r0, #0	@ wave_word,
 3312 0e78 0400001A 		bne	.L210		@,
 3313 0e7c 04C08CE2 		add	ip, ip, #4	@ n, n,
 3314              	.L197:
 3315              	.LVL237:
 3316              	@ armwave.c:181:     for(n = 0; n < npix; n += 4) {
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3317              		.loc 1 181 5 view .LVU915
 3318 0e80 0C0057E1 		cmp	r7, ip	@ npix, n
 3319 0e84 F9FFFFCA 		bgt	.L201		@,
 3320              	.LVL238:
 3321              	.L194:
 181:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3322              		.loc 1 181 5 view .LVU916
 3323              	.LBE43:
 3324              	.LBE45:
 3325              	@ armwave.c:458: }
 458:armwave.c     **** }
 3326              		.loc 1 458 1 view .LVU917
 3327 0e88 0CD08DE2 		add	sp, sp, #12	@,,
 3328              		.cfi_remember_state
 3329              		.cfi_def_cfa_offset 36
 3330              		@ sp needed	@
 3331 0e8c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3332              	.LVL239:
 3333              	.L210:
 3334              		.cfi_restore_state
 3335              	.LBB46:
 3336              	.LBB44:
 3337              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3338              		.loc 1 192 19 view .LVU918
 3339 0e90 FF1010E2 		ands	r1, r0, #255	@ _22, wave_word,
 3340              	@ armwave.c:187:         if(COND_UNLIKELY(wave_word != 0)) {
 187:armwave.c     ****             for(w = 0; w < 4; w++) {
 3341              		.loc 1 187 11 view .LVU919
 3342 0e94 0C60A0E1 		mov	r6, ip	@ ivtmp.137, n
 3343              	.LVL240:
 189:armwave.c     ****                 wave_word >>= 8;
 3344              		.loc 1 189 17 is_stmt 1 view .LVU920
 190:armwave.c     **** 
 3345              		.loc 1 190 17 view .LVU921
 3346              	@ armwave.c:190:                 wave_word >>= 8;
 190:armwave.c     **** 
 3347              		.loc 1 190 27 is_stmt 0 view .LVU922
 3348 0e98 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3349              	.LVL241:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3350              		.loc 1 192 17 is_stmt 1 view .LVU923
 3351 0e9c 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.137,
 3352              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3353              		.loc 1 192 19 is_stmt 0 view .LVU924
 3354 0ea0 0500001A 		bne	.L214		@,
 3355              	.LVL242:
 3356              	.L198:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3357              		.loc 1 192 19 view .LVU925
 3358 0ea4 016086E2 		add	r6, r6, #1	@ ivtmp.137, ivtmp.137,
 3359              	@ armwave.c:188:             for(w = 0; w < 4; w++) {
 188:armwave.c     ****                 value = wave_word & 0xff;
 3360              		.loc 1 188 13 view .LVU926
 3361 0ea8 06005CE1 		cmp	ip, r6	@ n, ivtmp.137
 3362 0eac F3FFFF0A 		beq	.L197		@,
 189:armwave.c     ****                 wave_word >>= 8;
 3363              		.loc 1 189 17 is_stmt 1 view .LVU927
 3364              	.LVL243:
 190:armwave.c     **** 
 3365              		.loc 1 190 17 view .LVU928
 3366              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3367              		.loc 1 192 19 is_stmt 0 view .LVU929
 3368 0eb0 FF1010E2 		ands	r1, r0, #255	@ _22, wave_word,
 3369              	@ armwave.c:190:                 wave_word >>= 8;
 190:armwave.c     **** 
 3370              		.loc 1 190 27 view .LVU930
 3371 0eb4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3372              	.LVL244:
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3373              		.loc 1 192 17 is_stmt 1 view .LVU931
 3374              	@ armwave.c:192:                 if(value != 0) {
 192:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3375              		.loc 1 192 19 is_stmt 0 view .LVU932
 3376 0eb8 F9FFFF0A 		beq	.L198		@,
 3377              	.L214:
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3378              		.loc 1 193 21 is_stmt 1 view .LVU933
 3379              	.LVL245:
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3380              		.loc 1 194 21 view .LVU934
 195:armwave.c     **** 
 3381              		.loc 1 195 21 view .LVU935
 197:armwave.c     ****                     g = MIN(gg, 255);
 3382              		.loc 1 197 21 view .LVU936
 198:armwave.c     ****                     b = MIN(bb, 255);
 3383              		.loc 1 198 21 view .LVU937
 199:armwave.c     **** 
 3384              		.loc 1 199 21 view .LVU938
 202:armwave.c     **** 
 3385              		.loc 1 202 21 view .LVU939
 3386              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3387              		.loc 1 217 32 is_stmt 0 view .LVU940
 3388 0ebc 7630EFE6 		uxtb	r3, r6	@ _50, ivtmp.137
 3389              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3390              		.loc 1 218 41 view .LVU941
 3391 0ec0 012083E2 		add	r2, r3, #1	@ tmp199, _50,
 3392              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3393              		.loc 1 217 40 view .LVU942
 3394 0ec4 903A07EE 		vmov	s15, r3	@ int	@ _50, _50
 3395              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3396              		.loc 1 218 41 view .LVU943
 3397 0ec8 102A07EE 		vmov	s14, r2	@ int	@ tmp199, tmp199
 3398              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 3399              		.loc 1 195 55 view .LVU944
 3400 0ecc 940103E0 		mul	r3, r4, r1	@ tmp184, _30, _22
 3401              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3402              		.loc 1 217 40 view .LVU945
 3403 0ed0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp197, _50
 3404              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3405              		.loc 1 218 46 view .LVU946
 3406 0ed4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp200, tmp199
 3407              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3408              		.loc 1 194 55 view .LVU947
 3409 0ed8 9A0102E0 		mul	r2, r10, r1	@ tmp188, _26, _22
 3410              	@ armwave.c:195:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 195:armwave.c     **** 
 3411              		.loc 1 195 24 view .LVU948
 3412 0edc 4334A0E1 		asr	r3, r3, #8	@ bb, tmp184,
 3413              	.LVL246:
 3414              	@ armwave.c:199:                     b = MIN(bb, 255);
 199:armwave.c     **** 
 3415              		.loc 1 199 25 view .LVU949
 3416 0ee0 FF0053E3 		cmp	r3, #255	@ bb,
 3417              	@ armwave.c:194:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 194:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3418              		.loc 1 194 24 view .LVU950
 3419 0ee4 4224A0E1 		asr	r2, r2, #8	@ gg, tmp188,
 3420              	.LVL247:
 3421              	@ armwave.c:199:                     b = MIN(bb, 255);
 199:armwave.c     **** 
 3422              		.loc 1 199 25 view .LVU951
 3423 0ee8 FF30A0A3 		movge	r3, #255	@ bb,
 3424              	.LVL248:
 3425              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3426              		.loc 1 217 40 view .LVU952
 3427 0eec A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, _52
 3428              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3429              		.loc 1 218 46 view .LVU953
 3430 0ef0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp201, tmp200, _52
 3431              	@ armwave.c:198:                     g = MIN(gg, 255);
 198:armwave.c     ****                     b = MIN(bb, 255);
 3432              		.loc 1 198 25 view .LVU954
 3433 0ef4 FF0052E3 		cmp	r2, #255	@ gg,
 3434 0ef8 FF20A0A3 		movge	r2, #255	@ gg,
 3435              	.LVL249:
 3436              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3437              		.loc 1 193 55 view .LVU955
 3438 0efc 910B01E0 		mul	r1, r1, fp	@ tmp194, _22, _20
 3439              	.LVL250:
 3440              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3441              		.loc 1 202 56 view .LVU956
 3442 0f00 0224A0E1 		lsl	r2, r2, #8	@ tmp189, gg,
 3443              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3444              		.loc 1 202 44 view .LVU957
 3445 0f04 0338A0E1 		lsl	r3, r3, #16	@ tmp185, bb,
 3446              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3447              		.loc 1 217 24 view .LVU958
 3448 0f08 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp198
 3449              	@ armwave.c:193:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 193:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3450              		.loc 1 193 24 view .LVU959
 3451 0f0c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp194,
 3452              	.LVL251:
 3453              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3454              		.loc 1 202 56 view .LVU960
 3455 0f10 7220FFE6 		uxth	r2, r2	@ tmp190, tmp189
 3456              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3457              		.loc 1 202 44 view .LVU961
 3458 0f14 FF3803E2 		and	r3, r3, #16711680	@ tmp186, tmp185,
 3459              	@ armwave.c:197:                     r = MIN(rr, 255);
 197:armwave.c     ****                     g = MIN(gg, 255);
 3460              		.loc 1 197 25 view .LVU962
 3461 0f18 FF0051E3 		cmp	r1, #255	@ rr,
 3462              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3463              		.loc 1 202 51 view .LVU963
 3464 0f1c 023083E1 		orr	r3, r3, r2	@ tmp192, tmp186, tmp190
 3465              	@ armwave.c:197:                     r = MIN(rr, 255);
 197:armwave.c     ****                     g = MIN(gg, 255);
 3466              		.loc 1 197 25 view .LVU964
 3467 0f20 FF10A0A3 		movge	r1, #255	@ rr,
 3468              	.LVL252:
 3469              	@ armwave.c:217:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3470              		.loc 1 217 24 view .LVU965
 3471 0f24 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 3472              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3473              		.loc 1 218 24 view .LVU966
 3474 0f28 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp201
 3475              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3476              		.loc 1 202 62 view .LVU967
 3477 0f2c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3478 0f30 013083E1 		orr	r3, r3, r1	@ tmp196, tmp192, rr
 3479              	@ armwave.c:202:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 202:armwave.c     **** 
 3480              		.loc 1 202 26 view .LVU968
 3481 0f34 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp196,
 3482              	.LVL253:
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3483              		.loc 1 216 21 is_stmt 1 view .LVU969
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3484              		.loc 1 217 21 view .LVU970
 218:armwave.c     ****                     xx = (nsub >> 8);
 3485              		.loc 1 218 21 view .LVU971
 219:armwave.c     **** 
 3486              		.loc 1 219 21 view .LVU972
 3487              	@ armwave.c:219:                     xx = (nsub >> 8);
 219:armwave.c     **** 
 3488              		.loc 1 219 32 is_stmt 0 view .LVU973
 3489 0f38 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.137,
 3490              	.LVL254:
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3491              		.loc 1 221 21 is_stmt 1 view .LVU974
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3492              		.loc 1 221 21 is_stmt 0 view .LVU975
 3493 0f3c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3494              	@ armwave.c:218:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 3495              		.loc 1 218 24 view .LVU976
 3496 0f40 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3497              	.LVL255:
 3498              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3499              		.loc 1 221 21 view .LVU977
 3500 0f44 02005EE1 		cmp	lr, r2	@ yy, ye
 3501 0f48 D5FFFF2A 		bcs	.L198		@,
 3502 0f4c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3503              	.LVL256:
 3504              	.L199:
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3505              		.loc 1 222 25 is_stmt 1 view .LVU978
 223:armwave.c     ****                     }
 3506              		.loc 1 223 25 view .LVU979
 3507              	@ armwave.c:222:                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3508              		.loc 1 222 43 is_stmt 0 view .LVU980
 3509 0f50 4C2095E5 		ldr	r2, [r5, #76]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3510              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3511              		.loc 1 221 21 view .LVU981
 3512 0f54 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3513              	@ armwave.c:223:                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 3514              		.loc 1 223 43 view .LVU982
 3515 0f58 921E22E0 		mla	r2, r2, lr, r1	@ tmp205, g_armwave_state.target_width, yy, xx
 3516              	.LVL257:
 3517              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3518              		.loc 1 221 42 view .LVU983
 3519 0f5c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3520              	.LVL258:
 3521              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3522              		.loc 1 221 21 view .LVU984
 3523 0f60 0E0050E1 		cmp	r0, lr	@ ye, yy
 3524              	@ armwave.c:223:                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 3525              		.loc 1 223 53 view .LVU985
 3526 0f64 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3527              	@ armwave.c:221:                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3528              		.loc 1 221 21 view .LVU986
 3529 0f68 F8FFFF1A 		bne	.L199		@,
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3530              		.loc 1 221 21 view .LVU987
 3531 0f6c 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3532 0f70 CBFFFFEA 		b	.L198		@
 3533              	.LVL259:
 3534              	.L213:
 176:armwave.c     **** 
 3535              		.loc 1 176 5 is_stmt 1 view .LVU988
 3536 0f74 10309FE5 		ldr	r3, .L215+4	@,
 3537 0f78 B020A0E3 		mov	r2, #176	@,
 3538 0f7c 0C109FE5 		ldr	r1, .L215+8	@,
 3539 0f80 0C009FE5 		ldr	r0, .L215+12	@,
 3540              	.LVL260:
 176:armwave.c     **** 
 3541              		.loc 1 176 5 is_stmt 0 view .LVU989
 3542 0f84 FEFFFFEB 		bl	__assert_fail		@
 3543              	.LVL261:
 3544              	.L216:
 3545              		.align	2
 3546              	.L215:
 3547 0f88 00000000 		.word	g_armwave_state
 3548 0f8c 18000000 		.word	.LANCHOR0+24
 3549 0f90 20000000 		.word	.LC2
 3550 0f94 2C000000 		.word	.LC3
 3551              	.LBE44:
 3552              	.LBE46:
 3553              		.cfi_endproc
 3554              	.LFE73:
 3556              		.align	2
 3557              		.global	armwave_test_buffer_alloc
 3558              		.syntax unified
 3559              		.arm
 3560              		.fpu vfp
 3562              	armwave_test_buffer_alloc:
 3563              	.LFB74:
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_buffer_alloc()
 464:armwave.c     **** {
 3564              		.loc 1 464 1 is_stmt 1 view -0
 3565              		.cfi_startproc
 3566              		@ args = 0, pretend = 0, frame = 0
 3567              		@ frame_needed = 0, uses_anonymous_args = 0
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3568              		.loc 1 465 5 view .LVU991
 3569              	@ armwave.c:464: {
 464:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3570              		.loc 1 464 1 is_stmt 0 view .LVU992
 3571 0f98 70402DE9 		push	{r4, r5, r6, lr}	@
 3572              		.cfi_def_cfa_offset 16
 3573              		.cfi_offset 4, -16
 3574              		.cfi_offset 5, -12
 3575              		.cfi_offset 6, -8
 3576              		.cfi_offset 14, -4
 3577              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer != NULL) {
 3578              		.loc 1 465 23 view .LVU993
 3579 0f9c 40409FE5 		ldr	r4, .L224	@ tmp123,
 3580 0fa0 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3581              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer != NULL) {
 3582              		.loc 1 465 7 view .LVU994
 3583 0fa4 000050E3 		cmp	r0, #0	@ _1,
 3584 0fa8 0000000A 		beq	.L218		@,
 466:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3585              		.loc 1 466 9 is_stmt 1 view .LVU995
 3586 0fac FEFFFFEB 		bl	free		@
 3587              	.LVL262:
 3588              	.L218:
 467:armwave.c     ****     }
 468:armwave.c     **** 
 469:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 470:armwave.c     **** 
 471:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3589              		.loc 1 471 5 view .LVU996
 3590              	@ armwave.c:471:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3591              		.loc 1 471 40 is_stmt 0 view .LVU997
 3592 0fb0 403094E5 		ldr	r3, [r4, #64]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3593 0fb4 305094E5 		ldr	r5, [r4, #48]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3594 0fb8 0110A0E3 		mov	r1, #1	@,
 3595 0fbc 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3596 0fc0 0500A0E1 		mov	r0, r5	@, _4
 3597 0fc4 FEFFFFEB 		bl	calloc		@
 3598              	.LVL263:
 3599              	@ armwave.c:473:     if(g_armwave_state.test_wave_buffer == NULL) {
 472:armwave.c     **** 
 473:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3600              		.loc 1 473 7 view .LVU998
 3601 0fc8 000050E3 		cmp	r0, #0	@ tmp120,
 3602              	@ armwave.c:471:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 471:armwave.c     **** 
 3603              		.loc 1 471 38 view .LVU999
 3604 0fcc 180084E5 		str	r0, [r4, #24]	@ tmp120, g_armwave_state.test_wave_buffer
 3605              		.loc 1 473 5 is_stmt 1 view .LVU1000
 3606              	@ armwave.c:473:     if(g_armwave_state.test_wave_buffer == NULL) {
 3607              		.loc 1 473 7 is_stmt 0 view .LVU1001
 3608 0fd0 7080BD18 		popne	{r4, r5, r6, pc}	@
 474:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3609              		.loc 1 474 9 is_stmt 1 view .LVU1002
 3610 0fd4 0510A0E1 		mov	r1, r5	@, _4
 3611 0fd8 08009FE5 		ldr	r0, .L224+4	@,
 3612              	@ armwave.c:477: }
 475:armwave.c     ****         return;
 476:armwave.c     ****     }
 477:armwave.c     **** }
 3613              		.loc 1 477 1 is_stmt 0 view .LVU1003
 3614 0fdc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3615              		.cfi_restore 14
 3616              		.cfi_restore 6
 3617              		.cfi_restore 5
 3618              		.cfi_restore 4
 3619              		.cfi_def_cfa_offset 0
 3620              	@ armwave.c:474:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 474:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3621              		.loc 1 474 9 view .LVU1004
 3622 0fe0 FEFFFFEA 		b	printf		@
 3623              	.LVL264:
 3624              	.L225:
 3625              		.align	2
 3626              	.L224:
 3627 0fe4 00000000 		.word	g_armwave_state
 3628 0fe8 60010000 		.word	.LC17
 3629              		.cfi_endproc
 3630              	.LFE74:
 3632              		.align	2
 3633              		.global	armwave_fill_pixbuf_into_pybuffer
 3634              		.syntax unified
 3635              		.arm
 3636              		.fpu vfp
 3638              	armwave_fill_pixbuf_into_pybuffer:
 3639              	.LVL265:
 3640              	.LFB75:
 478:armwave.c     **** 
 479:armwave.c     **** /*
 480:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 481:armwave.c     ****  */
 482:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 483:armwave.c     **** {
 3641              		.loc 1 483 1 is_stmt 1 view -0
 3642              		.cfi_startproc
 3643              		@ args = 0, pretend = 0, frame = 48
 3644              		@ frame_needed = 0, uses_anonymous_args = 0
 484:armwave.c     ****     Py_buffer buffer;
 3645              		.loc 1 484 5 view .LVU1006
 485:armwave.c     ****     int ret;
 3646              		.loc 1 485 5 view .LVU1007
 486:armwave.c     **** 
 487:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 488:armwave.c     **** 
 489:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3647              		.loc 1 489 5 view .LVU1008
 3648              	@ armwave.c:483: {
 483:armwave.c     ****     Py_buffer buffer;
 3649              		.loc 1 483 1 is_stmt 0 view .LVU1009
 3650 0fec 04E02DE5 		str	lr, [sp, #-4]!	@,
 3651              		.cfi_def_cfa_offset 4
 3652              		.cfi_offset 14, -4
 3653 0ff0 34D04DE2 		sub	sp, sp, #52	@,,
 3654              		.cfi_def_cfa_offset 56
 3655              	@ armwave.c:489:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3656              		.loc 1 489 11 view .LVU1010
 3657 0ff4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3658 0ff8 0120A0E3 		mov	r2, #1	@,
 3659 0ffc FEFFFFEB 		bl	PyObject_GetBuffer		@
 3660              	.LVL266:
 490:armwave.c     **** 
 491:armwave.c     ****     if(ret != 0) {
 3661              		.loc 1 491 5 is_stmt 1 view .LVU1011
 3662              	@ armwave.c:491:     if(ret != 0) {
 3663              		.loc 1 491 7 is_stmt 0 view .LVU1012
 3664 1000 000050E3 		cmp	r0, #0	@,
 3665 1004 0A00001A 		bne	.L230		@,
 492:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 493:armwave.c     ****         Py_RETURN_FALSE;
 494:armwave.c     ****     }
 495:armwave.c     **** 
 496:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 497:armwave.c     **** 
 498:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3666              		.loc 1 498 5 is_stmt 1 view .LVU1013
 3667 1008 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3668              	.LVL267:
 3669              		.loc 1 498 5 is_stmt 0 view .LVU1014
 3670 100c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3671              	.LVL268:
 499:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 500:armwave.c     **** 
 501:armwave.c     ****     PyBuffer_Release(&buffer);
 3672              		.loc 1 501 5 is_stmt 1 view .LVU1015
 3673 1010 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3674 1014 FEFFFFEB 		bl	PyBuffer_Release		@
 3675              	.LVL269:
 502:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 503:armwave.c     **** 
 504:armwave.c     ****     Py_RETURN_TRUE;
 3676              		.loc 1 504 5 view .LVU1016
 3677              	.LBB47:
 3678              	.LBI47:
 3679              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3680              		.loc 2 456 20 view .LVU1017
 3681              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3682              		.loc 2 458 21 view .LVU1018
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3683              		.loc 2 459 5 view .LVU1019
 3684              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3685              		.loc 2 459 18 is_stmt 0 view .LVU1020
 3686 1018 38309FE5 		ldr	r3, .L231	@ tmp126,
 3687              	.LBE48:
 3688              	.LBE47:
 3689              	@ armwave.c:504:     Py_RETURN_TRUE;
 3690              		.loc 1 504 5 view .LVU1021
 3691 101c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3692              	.LBB50:
 3693              	.LBB49:
 3694              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3695              		.loc 2 459 18 view .LVU1022
 3696 1020 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3697 1024 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3698 1028 002083E5 		str	r2, [r3]	@ tmp128,
 3699              	.LBE49:
 3700              	.LBE50:
 3701              	@ armwave.c:505: }
 505:armwave.c     **** }
 3702              		.loc 1 505 1 view .LVU1023
 3703 102c 34D08DE2 		add	sp, sp, #52	@,,
 3704              		.cfi_remember_state
 3705              		.cfi_def_cfa_offset 4
 3706              		@ sp needed	@
 3707 1030 04F09DE4 		ldr	pc, [sp], #4	@
 3708              	.LVL270:
 3709              	.L230:
 3710              		.cfi_restore_state
 492:armwave.c     ****         Py_RETURN_FALSE;
 3711              		.loc 1 492 9 is_stmt 1 view .LVU1024
 3712 1034 20009FE5 		ldr	r0, .L231+4	@,
 3713              	.LVL271:
 492:armwave.c     ****         Py_RETURN_FALSE;
 3714              		.loc 1 492 9 is_stmt 0 view .LVU1025
 3715 1038 FEFFFFEB 		bl	puts		@
 3716              	.LVL272:
 493:armwave.c     ****     }
 3717              		.loc 1 493 9 is_stmt 1 view .LVU1026
 3718              	.LBB51:
 3719              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3720              		.loc 2 456 20 view .LVU1027
 3721              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3722              		.loc 2 458 21 view .LVU1028
 3723              		.loc 2 459 5 view .LVU1029
 3724              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3725              		.loc 2 459 18 is_stmt 0 view .LVU1030
 3726 103c 1C309FE5 		ldr	r3, .L231+8	@ tmp120,
 3727              	.LBE52:
 3728              	.LBE51:
 3729              	@ armwave.c:493:         Py_RETURN_FALSE;
 493:armwave.c     ****     }
 3730              		.loc 1 493 9 view .LVU1031
 3731 1040 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3732              	.LBB54:
 3733              	.LBB53:
 3734              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3735              		.loc 2 459 18 view .LVU1032
 3736 1044 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3737 1048 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3738 104c 002083E5 		str	r2, [r3]	@ tmp122,
 3739              	.LBE53:
 3740              	.LBE54:
 3741              	@ armwave.c:505: }
 3742              		.loc 1 505 1 view .LVU1033
 3743 1050 34D08DE2 		add	sp, sp, #52	@,,
 3744              		.cfi_def_cfa_offset 4
 3745              		@ sp needed	@
 3746 1054 04F09DE4 		ldr	pc, [sp], #4	@
 3747              	.L232:
 3748              		.align	2
 3749              	.L231:
 3750 1058 00000000 		.word	_Py_TrueStruct
 3751 105c AC010000 		.word	.LC18
 3752 1060 00000000 		.word	_Py_FalseStruct
 3753              		.cfi_endproc
 3754              	.LFE75:
 3756              		.align	2
 3757              		.global	armwave_test_create_am_sine
 3758              		.syntax unified
 3759              		.arm
 3760              		.fpu vfp
 3762              	armwave_test_create_am_sine:
 3763              	.LVL273:
 3764              	.LFB76:
 506:armwave.c     **** 
 507:armwave.c     **** /*
 508:armwave.c     ****  * Make a test AM waveform for render tests.
 509:armwave.c     ****  *
 510:armwave.c     ****  * @param   mod                 modulation depth
 511:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 512:armwave.c     ****  */
 513:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 514:armwave.c     **** {
 3765              		.loc 1 514 1 is_stmt 1 view -0
 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 8
 3768              		@ frame_needed = 0, uses_anonymous_args = 0
 515:armwave.c     ****     float v, noise, xnoise, mod_val;
 3769              		.loc 1 515 5 view .LVU1035
 516:armwave.c     ****     int w, x;
 3770              		.loc 1 516 5 view .LVU1036
 517:armwave.c     **** 
 518:armwave.c     ****     armwave_test_buffer_alloc();
 3771              		.loc 1 518 5 view .LVU1037
 3772              	.LBB57:
 3773              	.LBI57:
 463:armwave.c     **** {
 3774              		.loc 1 463 6 view .LVU1038
 3775              	.LBB58:
 465:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3776              		.loc 1 465 5 view .LVU1039
 3777              	.LBE58:
 3778              	.LBE57:
 3779              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 3780              		.loc 1 514 1 is_stmt 0 view .LVU1040
 3781 1064 70402DE9 		push	{r4, r5, r6, lr}	@
 3782              		.cfi_def_cfa_offset 16
 3783              		.cfi_offset 4, -16
 3784              		.cfi_offset 5, -12
 3785              		.cfi_offset 6, -8
 3786              		.cfi_offset 14, -4
 3787 1068 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3788              		.cfi_def_cfa_offset 72
 3789              		.cfi_offset 80, -72
 3790              		.cfi_offset 81, -68
 3791              		.cfi_offset 82, -64
 3792              		.cfi_offset 83, -60
 3793              		.cfi_offset 84, -56
 3794              		.cfi_offset 85, -52
 3795              		.cfi_offset 86, -48
 3796              		.cfi_offset 87, -44
 3797              		.cfi_offset 88, -40
 3798              		.cfi_offset 89, -36
 3799              		.cfi_offset 90, -32
 3800              		.cfi_offset 91, -28
 3801              		.cfi_offset 92, -24
 3802              		.cfi_offset 93, -20
 3803              	.LBB63:
 3804              	.LBB59:
 3805              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer != NULL) {
 465:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3806              		.loc 1 465 23 view .LVU1041
 3807 106c A8519FE5 		ldr	r5, .L264+32	@ tmp224,
 3808              	.LBE59:
 3809              	.LBE63:
 3810              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 3811              		.loc 1 514 1 view .LVU1042
 3812 1070 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3813 1074 60BAB0EE 		vmov.f32	s22, s1	@ noise_fraction, noise_fraction
 3814              	.LBB64:
 3815              	.LBB60:
 3816              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer != NULL) {
 465:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3817              		.loc 1 465 23 view .LVU1043
 3818 1078 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3819              	.LBE60:
 3820              	.LBE64:
 3821              	@ armwave.c:514: {
 514:armwave.c     ****     float v, noise, xnoise, mod_val;
 3822              		.loc 1 514 1 view .LVU1044
 3823 107c 08D04DE2 		sub	sp, sp, #8	@,,
 3824              		.cfi_def_cfa_offset 80
 3825              	.LBB65:
 3826              	.LBB61:
 3827              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer != NULL) {
 465:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3828              		.loc 1 465 7 view .LVU1045
 3829 1080 000050E3 		cmp	r0, #0	@ _63,
 3830 1084 0000000A 		beq	.L234		@,
 466:armwave.c     ****     }
 3831              		.loc 1 466 9 is_stmt 1 view .LVU1046
 3832 1088 FEFFFFEB 		bl	free		@
 3833              	.LVL274:
 3834              	.L234:
 471:armwave.c     **** 
 3835              		.loc 1 471 5 view .LVU1047
 3836              	@ armwave.c:471:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 471:armwave.c     **** 
 3837              		.loc 1 471 40 is_stmt 0 view .LVU1048
 3838 108c 403095E5 		ldr	r3, [r5, #64]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3839 1090 304095E5 		ldr	r4, [r5, #48]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3840 1094 0110A0E3 		mov	r1, #1	@,
 3841 1098 940304E0 		mul	r4, r4, r3	@ _66, g_armwave_state.waves_max, g_armwave_state.wave_length
 3842 109c 0400A0E1 		mov	r0, r4	@, _66
 3843 10a0 FEFFFFEB 		bl	calloc		@
 3844              	.LVL275:
 3845              	@ armwave.c:473:     if(g_armwave_state.test_wave_buffer == NULL) {
 473:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3846              		.loc 1 473 7 view .LVU1049
 3847 10a4 000050E3 		cmp	r0, #0	@ tmp170,
 3848              	@ armwave.c:471:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 471:armwave.c     **** 
 3849              		.loc 1 471 38 view .LVU1050
 3850 10a8 180085E5 		str	r0, [r5, #24]	@ tmp170, g_armwave_state.test_wave_buffer
 473:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3851              		.loc 1 473 5 is_stmt 1 view .LVU1051
 3852              	@ armwave.c:473:     if(g_armwave_state.test_wave_buffer == NULL) {
 473:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3853              		.loc 1 473 7 is_stmt 0 view .LVU1052
 3854 10ac 4E00000A 		beq	.L263		@,
 3855              	.L235:
 3856              	.LVL276:
 473:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3857              		.loc 1 473 7 view .LVU1053
 3858              	.LBE61:
 3859              	.LBE65:
 3860              	@ armwave.c:520:     for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     **** 
 520:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3861              		.loc 1 520 35 discriminator 1 view .LVU1054
 3862 10b0 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_92, g_armwave_state.waves
 3863              	@ armwave.c:520:     for(w = 0; w < g_armwave_state.waves; w++) {
 3864              		.loc 1 520 5 discriminator 1 view .LVU1055
 3865 10b4 000052E3 		cmp	r2, #0	@ prephitmp_92,
 3866 10b8 4800000A 		beq	.L233		@,
 3867              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 521:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3868              		.loc 1 521 37 view .LVU1056
 3869 10bc 4EDADFED 		vldr.32	s27, .L264	@ tmp177,
 3870              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3871              		.loc 1 521 17 view .LVU1057
 3872 10c0 4EDA9FED 		vldr.32	s26, .L264+4	@ tmp179,
 3873              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 522:armwave.c     ****         //mod = 1.0f;
 523:armwave.c     **** 
 524:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 528:armwave.c     ****             noise *= noise;
 529:armwave.c     **** 
 530:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                 noise = -noise;
 532:armwave.c     **** 
 533:armwave.c     ****             noise += 1.0f;
 534:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 536:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3874              		.loc 1 536 41 view .LVU1058
 3875 10c4 4E8A9FED 		vldr.32	s16, .L264+8	@ tmp227,
 3876              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 3877              		.loc 1 536 29 view .LVU1059
 3878 10c8 4EBADFED 		vldr.32	s23, .L264+12	@ tmp228,
 3879              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 537:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 538:armwave.c     ****             //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127), 0
 539:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = (uint8_t)MIN(
 3880              		.loc 1 539 87 view .LVU1060
 3881 10cc 4ECA9FED 		vldr.32	s24, .L264+16	@ tmp229,
 3882 10d0 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_97, g_armwave_state.wave_length
 3883              	@ armwave.c:520:     for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3884              		.loc 1 520 5 view .LVU1061
 3885 10d4 0060A0E3 		mov	r6, #0	@ w,
 3886              	.LVL277:
 3887              	.L243:
 521:armwave.c     ****         //mod = 1.0f;
 3888              		.loc 1 521 9 is_stmt 1 view .LVU1062
 3889              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 521:armwave.c     ****         //mod = 1.0f;
 3890              		.loc 1 521 28 is_stmt 0 view .LVU1063
 3891 10d8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3892              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 521:armwave.c     ****         //mod = 1.0f;
 3893              		.loc 1 521 17 view .LVU1064
 3894 10dc 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp179
 3895              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3896              		.loc 1 524 9 view .LVU1065
 3897 10e0 000053E3 		cmp	r3, #0	@ prephitmp_97,
 3898              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 521:armwave.c     ****         //mod = 1.0f;
 3899              		.loc 1 521 28 view .LVU1066
 3900 10e4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp175, w
 3901              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 521:armwave.c     ****         //mod = 1.0f;
 3902              		.loc 1 521 37 view .LVU1067
 3903 10e8 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp176, tmp175, tmp177
 3904              	@ armwave.c:521:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 521:armwave.c     ****         //mod = 1.0f;
 3905              		.loc 1 521 17 view .LVU1068
 3906 10ec AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp176, mod
 3907              	.LVL278:
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3908              		.loc 1 524 9 is_stmt 1 view .LVU1069
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3909              		.loc 1 524 9 is_stmt 0 view .LVU1070
 3910 10f0 3700000A 		beq	.L237		@,
 3911 10f4 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp225, mod_val
 3912              	@ armwave.c:534:             xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 3913              		.loc 1 534 20 view .LVU1071
 3914 10f8 44AADFED 		vldr.32	s21, .L264+20	@ tmp197,
 3915              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3916              		.loc 1 539 96 view .LVU1072
 3917 10fc 44AA9FED 		vldr.32	s20, .L264+24	@ tmp208,
 3918 1100 448ADFED 		vldr.32	s17, .L264+28	@ tmp209,
 3919              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3920              		.loc 1 524 15 view .LVU1073
 3921 1104 0040A0E3 		mov	r4, #0	@ x,
 3922              	.LVL279:
 3923              	.L242:
 525:armwave.c     ****             noise *= noise;
 3924              		.loc 1 525 13 is_stmt 1 view .LVU1074
 3925              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3926              		.loc 1 525 24 is_stmt 0 view .LVU1075
 3927 1108 FEFFFFEB 		bl	rand		@
 3928              	.LVL280:
 3929              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3930              		.loc 1 525 31 view .LVU1076
 3931 110c 7000FFE6 		uxth	r0, r0	@ tmp180,
 3932              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3933              		.loc 1 525 41 view .LVU1077
 3934 1110 900A07EE 		vmov	s15, r0	@ int	@ tmp180, tmp180
 3935 1114 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, tmp180
 3936              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3937              		.loc 1 525 20 view .LVU1078
 3938 1118 8B7A67EE 		vmul.f32	s15, s15, s22	@ noise, tmp182, noise_fraction
 3939              	.LVL281:
 526:armwave.c     ****             noise *= noise;
 3940              		.loc 1 526 13 is_stmt 1 view .LVU1079
 3941              	@ armwave.c:526:             noise *= noise;
 526:armwave.c     ****             noise *= noise;
 3942              		.loc 1 526 19 is_stmt 0 view .LVU1080
 3943 111c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3944              	.LVL282:
 527:armwave.c     ****             noise *= noise;
 3945              		.loc 1 527 13 is_stmt 1 view .LVU1081
 3946              	@ armwave.c:527:             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 3947              		.loc 1 527 19 is_stmt 0 view .LVU1082
 3948 1120 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3949              	.LVL283:
 528:armwave.c     **** 
 3950              		.loc 1 528 13 is_stmt 1 view .LVU1083
 3951              	@ armwave.c:528:             noise *= noise;
 528:armwave.c     **** 
 3952              		.loc 1 528 19 is_stmt 0 view .LVU1084
 3953 1124 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3954              	.LVL284:
 530:armwave.c     ****                 noise = -noise;
 3955              		.loc 1 530 13 is_stmt 1 view .LVU1085
 3956              	@ armwave.c:530:             if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                 noise = -noise;
 3957              		.loc 1 530 17 is_stmt 0 view .LVU1086
 3958 1128 FEFFFFEB 		bl	rand		@
 3959              	.LVL285:
 531:armwave.c     **** 
 3960              		.loc 1 531 17 is_stmt 1 view .LVU1087
 3961              	@ armwave.c:530:             if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                 noise = -noise;
 3962              		.loc 1 530 15 is_stmt 0 view .LVU1088
 3963 112c 020910E3 		tst	r0, #32768	@,
 3964              	@ armwave.c:531:                 noise = -noise;
 531:armwave.c     **** 
 3965              		.loc 1 531 23 view .LVU1089
 3966 1130 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3967              	.LVL286:
 533:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3968              		.loc 1 533 13 is_stmt 1 view .LVU1090
 534:armwave.c     **** 
 3969              		.loc 1 534 13 view .LVU1091
 3970              	@ armwave.c:534:             xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 3971              		.loc 1 534 23 is_stmt 0 view .LVU1092
 3972 1134 FEFFFFEB 		bl	rand		@
 3973              	.LVL287:
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3974              		.loc 1 536 13 is_stmt 1 view .LVU1093
 3975              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3976              		.loc 1 536 41 is_stmt 0 view .LVU1094
 3977 1138 107A95ED 		vldr.32	s14, [r5, #64]	@ int	@ tmp235, g_armwave_state.wave_length
 3978              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3979              		.loc 1 536 29 view .LVU1095
 3980 113c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3981              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3982              		.loc 1 536 41 view .LVU1096
 3983 1140 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp185, tmp235
 3984              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3985              		.loc 1 536 29 view .LVU1097
 3986 1144 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, x
 3987              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3988              		.loc 1 536 41 view .LVU1098
 3989 1148 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp187, tmp227, tmp185
 3990              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3991              		.loc 1 536 29 view .LVU1099
 3992 114c AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp190, tmp189, tmp228
 3993              	@ armwave.c:534:             xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 3994              		.loc 1 534 30 view .LVU1100
 3995 1150 7000FFE6 		uxth	r0, r0	@ tmp193,
 3996              	.LVL288:
 3997              	@ armwave.c:534:             xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 3998              		.loc 1 534 40 view .LVU1101
 3999 1154 100A07EE 		vmov	s14, r0	@ int	@ tmp193, tmp193
 4000 1158 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp195, tmp193
 4001              	@ armwave.c:534:             xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 4002              		.loc 1 534 20 view .LVU1102
 4003 115c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp195, tmp197
 4004              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 4005              		.loc 1 536 73 view .LVU1103
 4006 1160 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp198, tmp187, tmp190
 4007              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 4008              		.loc 1 536 18 view .LVU1104
 4009 1164 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp198
 4010 1168 FEFFFFEB 		bl	sin		@
 4011              	.LVL289:
 4012              		.loc 1 539 13 is_stmt 1 view .LVU1105
 4013              	@ armwave.c:533:             noise += 1.0f;
 533:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 4014              		.loc 1 533 19 is_stmt 0 view .LVU1106
 4015 116c 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp227
 4016              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4017              		.loc 1 539 87 view .LVU1107
 4018 1170 0020A0E3 		mov	r2, #0	@ iftmp.20_39,
 4019              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 4020              		.loc 1 536 94 view .LVU1108
 4021 1174 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp204, noise
 4022              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 4023              		.loc 1 536 83 view .LVU1109
 4024 1178 000B29EE 		vmul.f64	d0, d9, d0	@ tmp201, tmp225,
 4025              	.LVL290:
 4026              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 4027              		.loc 1 536 94 view .LVU1110
 4028 117c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp205, tmp201, tmp204
 4029              	@ armwave.c:536:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 536:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 4030              		.loc 1 536 15 view .LVU1111
 4031 1180 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp205
 4032              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4033              		.loc 1 539 96 view .LVU1112
 4034 1184 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp209
 4035 1188 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp208
 4036 118c C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 4037 1190 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4038 1194 050000DA 		ble	.L239		@,
 4039              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4040              		.loc 1 539 87 discriminator 1 view .LVU1113
 4041 1198 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp229
 4042 119c FF20A0E3 		mov	r2, #255	@ iftmp.20_39,
 4043 11a0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4044 11a4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp213, _26
 4045 11a8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp213, %sfp
 4046 11ac 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.20_39, %sfp
 4047              	.L239:
 4048              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4049              		.loc 1 539 53 discriminator 12 view .LVU1114
 4050 11b0 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4051              	@ armwave.c:539:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4052              		.loc 1 539 85 discriminator 12 view .LVU1115
 4053 11b4 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4054 11b8 931623E0 		mla	r3, r3, r6, r1	@ tmp219, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4055 11bc 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.20_39, *_31
 4056              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4057              		.loc 1 524 39 discriminator 12 view .LVU1116
 4058 11c0 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_97, g_armwave_state.wave_length
 4059              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4060              		.loc 1 524 54 discriminator 12 view .LVU1117
 4061 11c4 014084E2 		add	r4, r4, #1	@ x, x,
 4062              	.LVL291:
 4063              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4064              		.loc 1 524 9 discriminator 12 view .LVU1118
 4065 11c8 040053E1 		cmp	r3, r4	@ prephitmp_97, x
 4066 11cc CDFFFF8A 		bhi	.L242		@,
 4067 11d0 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_92, g_armwave_state.waves
 4068              	.LVL292:
 4069              	.L237:
 4070              	@ armwave.c:520:     for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4071              		.loc 1 520 44 discriminator 2 view .LVU1119
 4072 11d4 016086E2 		add	r6, r6, #1	@ w, w,
 4073              	.LVL293:
 4074              	@ armwave.c:520:     for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 4075              		.loc 1 520 5 discriminator 2 view .LVU1120
 4076 11d8 020056E1 		cmp	r6, r2	@ w, prephitmp_92
 4077 11dc BDFFFF3A 		bcc	.L243		@,
 4078              	.LVL294:
 4079              	.L233:
 4080              	@ armwave.c:542: }
 540:armwave.c     ****         }
 541:armwave.c     ****     }
 542:armwave.c     **** }
 4081              		.loc 1 542 1 view .LVU1121
 4082 11e0 08D08DE2 		add	sp, sp, #8	@,,
 4083              		.cfi_remember_state
 4084              		.cfi_def_cfa_offset 72
 4085              		@ sp needed	@
 4086 11e4 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 4087              		.cfi_restore 92
 4088              		.cfi_restore 93
 4089              		.cfi_restore 90
 4090              		.cfi_restore 91
 4091              		.cfi_restore 88
 4092              		.cfi_restore 89
 4093              		.cfi_restore 86
 4094              		.cfi_restore 87
 4095              		.cfi_restore 84
 4096              		.cfi_restore 85
 4097              		.cfi_restore 82
 4098              		.cfi_restore 83
 4099              		.cfi_restore 80
 4100              		.cfi_restore 81
 4101              		.cfi_def_cfa_offset 16
 4102              	.LVL295:
 4103              		.loc 1 542 1 view .LVU1122
 4104 11e8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4105              	.LVL296:
 4106              	.L263:
 4107              		.cfi_restore_state
 4108              	.LBB66:
 4109              	.LBB62:
 474:armwave.c     ****         return;
 4110              		.loc 1 474 9 is_stmt 1 view .LVU1123
 4111 11ec 0410A0E1 		mov	r1, r4	@, _66
 4112 11f0 28009FE5 		ldr	r0, .L264+36	@,
 4113 11f4 FEFFFFEB 		bl	printf		@
 4114              	.LVL297:
 475:armwave.c     ****     }
 4115              		.loc 1 475 9 view .LVU1124
 4116 11f8 ACFFFFEA 		b	.L235		@
 4117              	.L265:
 4118              		.align	2
 4119              	.L264:
 4120 11fc 0000803C 		.word	1015021568
 4121 1200 0000003F 		.word	1056964608
 4122 1204 0000803F 		.word	1065353216
 4123 1208 C3F5C840 		.word	1086911939
 4124 120c 00007F43 		.word	1132396544
 4125 1210 38FFC74A 		.word	1254620984
 4126 1214 0000FE42 		.word	1123942400
 4127 1218 00000043 		.word	1124073472
 4128 121c 00000000 		.word	g_armwave_state
 4129 1220 60010000 		.word	.LC17
 4130              	.LBE62:
 4131              	.LBE66:
 4132              		.cfi_endproc
 4133              	.LFE76:
 4135              		.align	2
 4136              		.global	armwave_test_create_square
 4137              		.syntax unified
 4138              		.arm
 4139              		.fpu vfp
 4141              	armwave_test_create_square:
 4142              	.LVL298:
 4143              	.LFB77:
 543:armwave.c     **** 
 544:armwave.c     **** /*
 545:armwave.c     ****  * Make a test square waveform.
 546:armwave.c     ****  *
 547:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 548:armwave.c     ****  */
 549:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 550:armwave.c     **** {
 4144              		.loc 1 550 1 view -0
 4145              		.cfi_startproc
 4146              		@ args = 0, pretend = 0, frame = 8
 4147              		@ frame_needed = 0, uses_anonymous_args = 0
 551:armwave.c     ****     uint8_t v;
 4148              		.loc 1 551 5 view .LVU1126
 552:armwave.c     ****     float noise, xnoise;
 4149              		.loc 1 552 5 view .LVU1127
 553:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 4150              		.loc 1 553 5 view .LVU1128
 554:armwave.c     ****     int w, x;
 4151              		.loc 1 554 5 view .LVU1129
 555:armwave.c     **** 
 556:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 4152              		.loc 1 556 5 view .LVU1130
 4153              	@ armwave.c:550: {
 550:armwave.c     ****     uint8_t v;
 4154              		.loc 1 550 1 is_stmt 0 view .LVU1131
 4155 1224 70402DE9 		push	{r4, r5, r6, lr}	@
 4156              		.cfi_def_cfa_offset 16
 4157              		.cfi_offset 4, -16
 4158              		.cfi_offset 5, -12
 4159              		.cfi_offset 6, -8
 4160              		.cfi_offset 14, -4
 4161 1228 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 4162              		.cfi_def_cfa_offset 56
 4163              		.cfi_offset 80, -56
 4164              		.cfi_offset 81, -52
 4165              		.cfi_offset 82, -48
 4166              		.cfi_offset 83, -44
 4167              		.cfi_offset 84, -40
 4168              		.cfi_offset 85, -36
 4169              		.cfi_offset 86, -32
 4170              		.cfi_offset 87, -28
 4171              		.cfi_offset 88, -24
 4172              		.cfi_offset 89, -20
 4173              	@ armwave.c:556:     for(w = 0; w < g_armwave_state.waves; w++) {
 4174              		.loc 1 556 35 view .LVU1132
 4175 122c 54519FE5 		ldr	r5, .L294+32	@ tmp179,
 4176 1230 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_33, g_armwave_state.waves
 4177              	@ armwave.c:550: {
 550:armwave.c     ****     uint8_t v;
 4178              		.loc 1 550 1 view .LVU1133
 4179 1234 08D04DE2 		sub	sp, sp, #8	@,,
 4180              		.cfi_def_cfa_offset 64
 4181              	@ armwave.c:556:     for(w = 0; w < g_armwave_state.waves; w++) {
 4182              		.loc 1 556 5 view .LVU1134
 4183 1238 000052E3 		cmp	r2, #0	@ prephitmp_33,
 4184 123c 4600000A 		beq	.L266		@,
 4185 1240 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 4186              	@ armwave.c:553:     float level = 0.8f, new_level = 0.8f;
 553:armwave.c     ****     int w, x;
 4187              		.loc 1 553 11 view .LVU1135
 4188 1244 47CA9FED 		vldr.32	s24, .L294	@ level,
 4189              	@ armwave.c:568:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 557:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****             noise *= noise;
 560:armwave.c     ****             noise *= noise;
 561:armwave.c     ****             noise *= noise;
 562:armwave.c     **** 
 563:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 564:armwave.c     ****                 noise = -noise;
 565:armwave.c     **** 
 566:armwave.c     ****             //noise += 1.0f;
 567:armwave.c     **** 
 568:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 4190              		.loc 1 568 49 view .LVU1136
 4191 1248 47AA9FED 		vldr.32	s20, .L294+4	@ tmp186,
 4192              	@ armwave.c:573:                 new_level = 0.2f;
 569:armwave.c     ****                 new_level = 0.2f;
 570:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 571:armwave.c     ****                 new_level = 0.8f;
 572:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 573:armwave.c     ****                 new_level = 0.2f;
 4193              		.loc 1 573 27 view .LVU1137
 4194 124c 47AADFED 		vldr.32	s21, .L294+8	@ new_level,
 4195              	@ armwave.c:570:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 570:armwave.c     ****                 new_level = 0.8f;
 4196              		.loc 1 570 56 view .LVU1138
 4197 1250 47BADFED 		vldr.32	s23, .L294+12	@ tmp188,
 4198              	@ armwave.c:572:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 572:armwave.c     ****                 new_level = 0.2f;
 4199              		.loc 1 572 56 view .LVU1139
 4200 1254 478ADFED 		vldr.32	s17, .L294+16	@ tmp189,
 4201 1258 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_70, g_armwave_state.wave_length
 4202              	@ armwave.c:556:     for(w = 0; w < g_armwave_state.waves; w++) {
 556:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4203              		.loc 1 556 11 view .LVU1140
 4204 125c 0060A0E3 		mov	r6, #0	@ w,
 4205              	.LVL299:
 4206              	.L268:
 4207              	@ armwave.c:557:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4208              		.loc 1 557 9 view .LVU1141
 4209 1260 000053E3 		cmp	r3, #0	@ prephitmp_70,
 4210 1264 3900000A 		beq	.L275		@,
 4211              	@ armwave.c:571:                 new_level = 0.8f;
 571:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4212              		.loc 1 571 27 view .LVU1142
 4213 1268 3EBA9FED 		vldr.32	s22, .L294	@ new_level,
 4214              	@ armwave.c:578:             level = ((level * 3) + new_level) * 0.25f;
 574:armwave.c     ****             } else {
 575:armwave.c     ****                 new_level = 0.8f;
 576:armwave.c     ****             }
 577:armwave.c     **** 
 578:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 4215              		.loc 1 578 29 view .LVU1143
 4216 126c 429A9FED 		vldr.32	s18, .L294+20	@ tmp161,
 4217              	@ armwave.c:557:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4218              		.loc 1 557 15 view .LVU1144
 4219 1270 0040A0E3 		mov	r4, #0	@ x,
 4220              	.LVL300:
 4221              	.L274:
 558:armwave.c     ****             noise *= noise;
 4222              		.loc 1 558 13 is_stmt 1 view .LVU1145
 4223              	@ armwave.c:558:             noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****             noise *= noise;
 4224              		.loc 1 558 24 is_stmt 0 view .LVU1146
 4225 1274 FEFFFFEB 		bl	rand		@
 4226              	.LVL301:
 4227              	@ armwave.c:558:             noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****             noise *= noise;
 4228              		.loc 1 558 31 view .LVU1147
 4229 1278 7000FFE6 		uxth	r0, r0	@ tmp148,
 4230              	@ armwave.c:558:             noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****             noise *= noise;
 4231              		.loc 1 558 41 view .LVU1148
 4232 127c 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 4233 1280 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 4234              	@ armwave.c:558:             noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****             noise *= noise;
 4235              		.loc 1 558 20 view .LVU1149
 4236 1284 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 4237              	.LVL302:
 559:armwave.c     ****             noise *= noise;
 4238              		.loc 1 559 13 is_stmt 1 view .LVU1150
 4239              	@ armwave.c:559:             noise *= noise;
 559:armwave.c     ****             noise *= noise;
 4240              		.loc 1 559 19 is_stmt 0 view .LVU1151
 4241 1288 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4242              	.LVL303:
 560:armwave.c     ****             noise *= noise;
 4243              		.loc 1 560 13 is_stmt 1 view .LVU1152
 4244              	@ armwave.c:560:             noise *= noise;
 560:armwave.c     ****             noise *= noise;
 4245              		.loc 1 560 19 is_stmt 0 view .LVU1153
 4246 128c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4247              	.LVL304:
 561:armwave.c     **** 
 4248              		.loc 1 561 13 is_stmt 1 view .LVU1154
 4249              	@ armwave.c:561:             noise *= noise;
 561:armwave.c     **** 
 4250              		.loc 1 561 19 is_stmt 0 view .LVU1155
 4251 1290 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 4252              	.LVL305:
 563:armwave.c     ****                 noise = -noise;
 4253              		.loc 1 563 13 is_stmt 1 view .LVU1156
 4254              	@ armwave.c:563:             if((rand() & 0xff) > 0x7f)
 563:armwave.c     ****                 noise = -noise;
 4255              		.loc 1 563 17 is_stmt 0 view .LVU1157
 4256 1294 FEFFFFEB 		bl	rand		@
 4257              	.LVL306:
 4258              	@ armwave.c:568:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 568:armwave.c     ****                 new_level = 0.2f;
 4259              		.loc 1 568 18 view .LVU1158
 4260 1298 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4261 129c E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 4262              	@ armwave.c:568:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 568:armwave.c     ****                 new_level = 0.2f;
 4263              		.loc 1 568 49 view .LVU1159
 4264 12a0 107AD5ED 		vldr.32	s15, [r5, #64]	@ int	@ tmp195, g_armwave_state.wave_length
 4265 12a4 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp195
 4266 12a8 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp186
 4267              	@ armwave.c:568:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 568:armwave.c     ****                 new_level = 0.2f;
 4268              		.loc 1 568 15 view .LVU1160
 4269 12ac E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 4270              	@ armwave.c:563:             if((rand() & 0xff) > 0x7f)
 563:armwave.c     ****                 noise = -noise;
 4271              		.loc 1 563 15 view .LVU1161
 4272 12b0 800010E3 		tst	r0, #128	@,
 564:armwave.c     **** 
 4273              		.loc 1 564 17 is_stmt 1 view .LVU1162
 4274              	@ armwave.c:564:                 noise = -noise;
 564:armwave.c     **** 
 4275              		.loc 1 564 23 is_stmt 0 view .LVU1163
 4276 12b4 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 4277              	.LVL307:
 568:armwave.c     ****                 new_level = 0.2f;
 4278              		.loc 1 568 13 is_stmt 1 view .LVU1164
 4279              	@ armwave.c:568:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 568:armwave.c     ****                 new_level = 0.2f;
 4280              		.loc 1 568 15 is_stmt 0 view .LVU1165
 4281 12b8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4282              	@ armwave.c:573:                 new_level = 0.2f;
 573:armwave.c     ****             } else {
 4283              		.loc 1 573 27 view .LVU1166
 4284 12bc 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 4285              	@ armwave.c:568:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 568:armwave.c     ****                 new_level = 0.2f;
 4286              		.loc 1 568 15 view .LVU1167
 4287 12c0 090000CA 		bgt	.L270		@,
 570:armwave.c     ****                 new_level = 0.8f;
 4288              		.loc 1 570 20 is_stmt 1 view .LVU1168
 4289              	@ armwave.c:570:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 570:armwave.c     ****                 new_level = 0.8f;
 4290              		.loc 1 570 56 is_stmt 0 view .LVU1169
 4291 12c4 AB6A67EE 		vmul.f32	s13, s15, s23	@ tmp156, _8, tmp188
 4292              	@ armwave.c:570:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 570:armwave.c     ****                 new_level = 0.8f;
 4293              		.loc 1 570 22 view .LVU1170
 4294 12c8 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 4295 12cc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4296              	@ armwave.c:571:                 new_level = 0.8f;
 571:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4297              		.loc 1 571 27 view .LVU1171
 4298 12d0 4B7AF0CE 		vmovgt.f32	s15, s22	@ new_level, new_level
 4299              	@ armwave.c:570:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 570:armwave.c     ****                 new_level = 0.8f;
 4300              		.loc 1 570 22 view .LVU1172
 4301 12d4 040000CA 		bgt	.L270		@,
 572:armwave.c     ****                 new_level = 0.2f;
 4302              		.loc 1 572 20 is_stmt 1 view .LVU1173
 4303              	@ armwave.c:572:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 572:armwave.c     ****                 new_level = 0.2f;
 4304              		.loc 1 572 56 is_stmt 0 view .LVU1174
 4305 12d8 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp189
 4306              	@ armwave.c:571:                 new_level = 0.8f;
 571:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 4307              		.loc 1 571 27 view .LVU1175
 4308 12dc E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 4309 12e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4310 12e4 4B7AF0DE 		vmovle.f32	s15, s22	@, new_level, new_level
 4311 12e8 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 4312              	.L270:
 4313              	.LVL308:
 4314              		.loc 1 578 13 is_stmt 1 view .LVU1176
 4315              	@ armwave.c:578:             level = ((level * 3) + new_level) * 0.25f;
 4316              		.loc 1 578 34 is_stmt 0 view .LVU1177
 4317 12ec 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 4318              	.LVL309:
 4319              	@ armwave.c:578:             level = ((level * 3) + new_level) * 0.25f;
 4320              		.loc 1 578 19 view .LVU1178
 4321 12f0 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp189
 4322              	.LVL310:
 579:armwave.c     **** 
 580:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4323              		.loc 1 580 13 is_stmt 1 view .LVU1179
 4324              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4325              		.loc 1 580 27 is_stmt 0 view .LVU1180
 4326 12f4 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 4327 12f8 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 4328 12fc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4329              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4330              		.loc 1 580 17 view .LVU1181
 4331 1300 0020A0D3 		movle	r2, #0	@ iftmp.27_32,
 4332              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4333              		.loc 1 580 27 view .LVU1182
 4334 1304 080000DA 		ble	.L271		@,
 4335              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4336              		.loc 1 580 17 discriminator 1 view .LVU1183
 4337 1308 1C7A9FED 		vldr.32	s14, .L294+24	@ tmp164,
 4338 130c C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 4339 1310 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4340              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4341              		.loc 1 580 60 discriminator 1 view .LVU1184
 4342 1314 1A7A9F4D 		vldrmi.32	s14, .L294+28	@ tmp166,
 4343              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4344              		.loc 1 580 17 discriminator 1 view .LVU1185
 4345 1318 FF20A053 		movpl	r2, #255	@ iftmp.27_32,
 4346              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4347              		.loc 1 580 60 discriminator 1 view .LVU1186
 4348 131c 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 4349              	@ armwave.c:580:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 4350              		.loc 1 580 17 discriminator 1 view .LVU1187
 4351 1320 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 4352 1324 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 4353 1328 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_32, %sfp
 4354              	.L271:
 4355              	.LVL311:
 581:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 4356              		.loc 1 581 13 is_stmt 1 discriminator 12 view .LVU1188
 4357              	@ armwave.c:581:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4358              		.loc 1 581 53 is_stmt 0 discriminator 12 view .LVU1189
 4359 132c 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4360              	@ armwave.c:581:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 4361              		.loc 1 581 85 discriminator 12 view .LVU1190
 4362 1330 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4363 1334 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 4364 1338 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.27_32, *_21
 4365              	@ armwave.c:557:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4366              		.loc 1 557 39 discriminator 12 view .LVU1191
 4367 133c 403095E5 		ldr	r3, [r5, #64]	@ prephitmp_70, g_armwave_state.wave_length
 4368              	@ armwave.c:557:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4369              		.loc 1 557 54 discriminator 12 view .LVU1192
 4370 1340 014084E2 		add	r4, r4, #1	@ x, x,
 4371              	.LVL312:
 4372              	@ armwave.c:557:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 4373              		.loc 1 557 9 discriminator 12 view .LVU1193
 4374 1344 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 4375 1348 C9FFFF8A 		bhi	.L274		@,
 4376 134c 2C2095E5 		ldr	r2, [r5, #44]	@ prephitmp_33, g_armwave_state.waves
 4377              	.LVL313:
 4378              	.L275:
 4379              	@ armwave.c:556:     for(w = 0; w < g_armwave_state.waves; w++) {
 556:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4380              		.loc 1 556 44 discriminator 2 view .LVU1194
 4381 1350 016086E2 		add	r6, r6, #1	@ w, w,
 4382              	.LVL314:
 4383              	@ armwave.c:556:     for(w = 0; w < g_armwave_state.waves; w++) {
 556:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 4384              		.loc 1 556 5 discriminator 2 view .LVU1195
 4385 1354 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 4386 1358 C0FFFF3A 		bcc	.L268		@,
 4387              	.LVL315:
 4388              	.L266:
 4389              	@ armwave.c:584: }
 582:armwave.c     ****         }
 583:armwave.c     ****     }
 584:armwave.c     **** }
 4390              		.loc 1 584 1 view .LVU1196
 4391 135c 08D08DE2 		add	sp, sp, #8	@,,
 4392              		.cfi_def_cfa_offset 56
 4393              		@ sp needed	@
 4394 1360 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 4395              		.cfi_restore 88
 4396              		.cfi_restore 89
 4397              		.cfi_restore 86
 4398              		.cfi_restore 87
 4399              		.cfi_restore 84
 4400              		.cfi_restore 85
 4401              		.cfi_restore 82
 4402              		.cfi_restore 83
 4403              		.cfi_restore 80
 4404              		.cfi_restore 81
 4405              		.cfi_def_cfa_offset 16
 4406 1364 7080BDE8 		pop	{r4, r5, r6, pc}	@
 4407              	.L295:
 4408              		.align	2
 4409              	.L294:
 4410 1368 CDCC4C3F 		.word	1061997773
 4411 136c 0000403F 		.word	1061158912
 4412 1370 CDCC4C3E 		.word	1045220557
 4413 1374 0000003F 		.word	1056964608
 4414 1378 0000803E 		.word	1048576000
 4415 137c 00004040 		.word	1077936128
 4416 1380 0000803F 		.word	1065353216
 4417 1384 00007F43 		.word	1132396544
 4418 1388 00000000 		.word	g_armwave_state
 4419              		.cfi_endproc
 4420              	.LFE77:
 4422              		.align	2
 4423              		.global	armwave_cleanup
 4424              		.syntax unified
 4425              		.arm
 4426              		.fpu vfp
 4428              	armwave_cleanup:
 4429              	.LFB78:
 585:armwave.c     **** 
 586:armwave.c     **** /*
 587:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 588:armwave.c     ****  */
 589:armwave.c     **** void armwave_cleanup()
 590:armwave.c     **** {
 4430              		.loc 1 590 1 is_stmt 1 view -0
 4431              		.cfi_startproc
 4432              		@ args = 0, pretend = 0, frame = 0
 4433              		@ frame_needed = 0, uses_anonymous_args = 0
 591:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4434              		.loc 1 591 5 view .LVU1198
 4435              	@ armwave.c:590: {
 590:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4436              		.loc 1 590 1 is_stmt 0 view .LVU1199
 4437 138c 10402DE9 		push	{r4, lr}	@
 4438              		.cfi_def_cfa_offset 8
 4439              		.cfi_offset 4, -8
 4440              		.cfi_offset 14, -4
 4441              	@ armwave.c:591:     free(g_armwave_state.out_pixbuf);
 4442              		.loc 1 591 25 view .LVU1200
 4443 1390 34409FE5 		ldr	r4, .L298	@ tmp114,
 4444              	@ armwave.c:591:     free(g_armwave_state.out_pixbuf);
 4445              		.loc 1 591 5 view .LVU1201
 4446 1394 5C0094E5 		ldr	r0, [r4, #92]	@, g_armwave_state.out_pixbuf
 4447 1398 FEFFFFEB 		bl	free		@
 4448              	.LVL316:
 592:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4449              		.loc 1 592 5 is_stmt 1 view .LVU1202
 4450 139c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4451 13a0 FEFFFFEB 		bl	free		@
 4452              	.LVL317:
 593:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4453              		.loc 1 593 5 view .LVU1203
 4454 13a4 780094E5 		ldr	r0, [r4, #120]	@, g_armwave_state.xcoord_to_xpixel
 4455 13a8 FEFFFFEB 		bl	free		@
 4456              	.LVL318:
 594:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4457              		.loc 1 594 5 view .LVU1204
 4458 13ac 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4459 13b0 FEFFFFEB 		bl	free		@
 4460              	.LVL319:
 595:armwave.c     **** 
 596:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4461              		.loc 1 596 5 view .LVU1205
 4462              	@ armwave.c:596:     g_armwave_state.out_pixbuf = NULL;
 4463              		.loc 1 596 32 is_stmt 0 view .LVU1206
 4464 13b4 0030A0E3 		mov	r3, #0	@ tmp123,
 4465 13b8 5C3084E5 		str	r3, [r4, #92]	@ tmp123, g_armwave_state.out_pixbuf
 597:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4466              		.loc 1 597 5 is_stmt 1 view .LVU1207
 4467              	@ armwave.c:597:     g_armwave_state.ch1_buffer = NULL;
 4468              		.loc 1 597 32 is_stmt 0 view .LVU1208
 4469 13bc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 598:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4470              		.loc 1 598 5 is_stmt 1 view .LVU1209
 4471              	@ armwave.c:598:     g_armwave_state.xcoord_to_xpixel = NULL;
 4472              		.loc 1 598 38 is_stmt 0 view .LVU1210
 4473 13c0 783084E5 		str	r3, [r4, #120]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 599:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4474              		.loc 1 599 5 is_stmt 1 view .LVU1211
 4475              	@ armwave.c:599:     g_armwave_state.test_wave_buffer = NULL;
 4476              		.loc 1 599 38 is_stmt 0 view .LVU1212
 4477 13c4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4478              	@ armwave.c:600: }
 600:armwave.c     **** }
 4479              		.loc 1 600 1 view .LVU1213
 4480 13c8 1080BDE8 		pop	{r4, pc}	@
 4481              	.L299:
 4482              		.align	2
 4483              	.L298:
 4484 13cc 00000000 		.word	g_armwave_state
 4485              		.cfi_endproc
 4486              	.LFE78:
 4488              		.comm	gamma_table,256,4
 4489              		.comm	g_armwave_state,124,4
 4490              		.section	.rodata
 4491              		.align	2
 4492              		.set	.LANCHOR0,. + 0
 4495              	__PRETTY_FUNCTION__.17093:
 4496 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4496      6176655F 
 4496      66696C6C 
 4496      5F706978 
 4496      6275665F 
 4499              	__PRETTY_FUNCTION__.17126:
 4500 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4500      6176655F 
 4500      66696C6C 
 4500      5F706978 
 4500      6275665F 
 4501 0033 00       		.space	1
 4504              	__PRETTY_FUNCTION__.17148:
 4505 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4505      6176655F 
 4505      73657475 
 4505      705F7265 
 4505      6E646572 
 4506 0049 000000   		.space	3
 4509              	__PRETTY_FUNCTION__.17155:
 4510 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4510      6176655F 
 4510      7365745F 
 4510      77617665 
 4510      5F706F69 
 4511 0065 000000   		.space	3
 4514              	__PRETTY_FUNCTION__.17161:
 4515 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4515      6176655F 
 4515      7365745F 
 4515      77617665 
 4515      5F706F69 
 4516              		.section	.rodata.str1.4,"aMS",%progbits,1
 4517              		.align	2
 4518              	.LC0:
 4519 0000 76302E30 		.ascii	"v0.0.1\000"
 4519      2E3100
 4520 0007 00       		.space	1
 4521              	.LC1:
 4522 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4522      61766520 
 4522      76657273 
 4522      696F6E3A 
 4522      2025730A 
 4523 001d 000000   		.space	3
 4524              	.LC2:
 4525 0020 61726D77 		.ascii	"armwave.c\000"
 4525      6176652E 
 4525      6300
 4526 002a 0000     		.space	2
 4527              	.LC3:
 4528 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4528      62756666 
 4528      65722021 
 4528      3D204E55 
 4528      4C4C00
 4529 003f 00       		.space	1
 4530              	.LC4:
 4531 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4531      20653D25 
 4531      6420773D 
 4531      25642077 
 4531      733D2564 
 4532              	.LC5:
 4533 006c 73746172 		.ascii	"start_point < end_point\000"
 4533      745F706F 
 4533      696E7420 
 4533      3C20656E 
 4533      645F706F 
 4534              	.LC6:
 4535 0084 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4535      7566665F 
 4535      73697A65 
 4535      3D25640A 
 4535      00
 4536 0095 000000   		.space	3
 4537              	.LC7:
 4538 0098 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4538      6D776176 
 4538      655F7374 
 4538      6174652E 
 4538      6368315F 
 4539 00bb 00       		.space	1
 4540              	.LC8:
 4541 00bc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4541      6D776176 
 4541      655F7374 
 4541      6174652E 
 4541      78636F6F 
 4542 00e5 000000   		.space	3
 4543              	.LC9:
 4544 00e8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 4544      3A203078 
 4544      25303878 
 4544      20307825 
 4544      30387820 
 4545              	.LC10:
 4546 010c 77617665 		.ascii	"wave_buffer != NULL\000"
 4546      5F627566 
 4546      66657220 
 4546      213D204E 
 4546      554C4C00 
 4547              	.LC11:
 4548 0120 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4548      5F627566 
 4548      6665725F 
 4548      70747220 
 4548      213D2030 
 4549 0135 000000   		.space	3
 4550              	.LC12:
 4551 0138 776200   		.ascii	"wb\000"
 4552 013b 00       		.space	1
 4553              	.LC13:
 4554 013c 50330A00 		.ascii	"P3\012\000"
 4555              	.LC14:
 4556 0140 25642025 		.ascii	"%d %d\012\000"
 4556      640A00
 4557 0147 00       		.space	1
 4558              	.LC15:
 4559 0148 3235350A 		.ascii	"255\012\000"
 4559      00
 4560 014d 000000   		.space	3
 4561              	.LC16:
 4562 0150 25336420 		.ascii	"%3d %3d %3d\012\000"
 4562      25336420 
 4562      2533640A 
 4562      00
 4563 015d 000000   		.space	3
 4564              	.LC17:
 4565 0160 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4565      6176655F 
 4565      74657374 
 4565      5F627566 
 4565      6665725F 
 4566 0193 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4566      20627566 
 4566      66657220 
 4566      28256420 
 4566      62797465 
 4567 01ab 00       		.space	1
 4568              	.LC18:
 4569 01ac 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4569      6176655F 
 4569      66696C6C 
 4569      5F706978 
 4569      6275665F 
 4570 01df 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4570      20666169 
 4570      6C65642C 
 4570      20726574 
 4570      75726E69 
 4571              		.text
 4572              	.Letext0:
 4573              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4574              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4575              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4576              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4577              		.file 7 "/usr/include/stdio.h"
 4578              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4579              		.file 9 "/usr/include/errno.h"
 4580              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4581              		.file 11 "/usr/include/unistd.h"
 4582              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4583              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4584              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4585              		.file 15 "/usr/include/math.h"
 4586              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4587              		.file 17 "/usr/include/time.h"
 4588              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4589              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4590              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4591              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4592              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4593              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4594              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4595              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4596              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4597              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4598              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4599              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4600              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4601              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4602              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4603              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4604              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4605              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4606              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4607              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4608              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4609              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4610              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4611              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4612              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4613              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4614              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4615              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4616              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4617              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4618              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4619              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4620              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4621              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4622              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4623              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4624              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4625              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4626              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4627              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4628              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4629              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4630              		.file 60 "/usr/local/include/python3.8/context.h"
 4631              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4632              		.file 62 "/usr/local/include/python3.8/code.h"
 4633              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4634              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4635              		.file 65 "/usr/local/include/python3.8/import.h"
 4636              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4637              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4638              		.file 68 "/usr/include/malloc.h"
 4639              		.file 69 "armwave.h"
 4640              		.file 70 "/usr/include/stdlib.h"
 4641              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 4642              		.file 72 "/usr/include/assert.h"
 4643              		.file 73 "<built-in>"
 4644              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
