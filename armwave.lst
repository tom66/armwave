   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 48319FE5 		ldr	r3, .L21	@ tmp189,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 1CD04DE2 		sub	sp, sp, #28	@,,
 252              		.cfi_def_cfa_offset 64
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 247093E5 		ldr	r7, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 257              		.loc 1 79 35 view .LVU34
 258 00ac 382093E5 		ldr	r2, [r3, #56]	@ _135, g_armwave_state.waves
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 260              		.loc 1 71 147 view .LVU35
 261 00b0 405093E5 		ldr	r5, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 900704E0 		mul	r4, r0, r7	@ tmp192, slice_y, _2
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ _135,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01C0A0E1 		mov	ip, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2448A0E1 		lsr	r4, r4, #16	@ tmp193, tmp192,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 00108DE5 		str	r1, [sp]	@ height, %sfp
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU41
 279 00c8 0C208DE5 		str	r2, [sp, #12]	@ _135, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 041093E5 		ldr	r1, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 285              		.loc 1 71 130 view .LVU43
 286 00d0 950404E0 		mul	r4, r5, r4	@ _7, _6, tmp193
 287              	.LVL8:
 288              		.loc 1 79 5 is_stmt 1 view .LVU44
 289              		.loc 1 79 5 is_stmt 0 view .LVU45
 290 00d4 420000DA 		ble	.L11		@,
 291              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 292              		.loc 1 80 36 view .LVU46
 293 00d8 142093E5 		ldr	r2, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 294              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 295              		.loc 1 80 81 view .LVU47
 296 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 297 00e0 00005CE3 		cmp	ip, #0	@ height,
 298 00e4 10308DE5 		str	r3, [sp, #16]	@ _9, %sfp
 299 00e8 3D00000A 		beq	.L11		@,
 300 00ec 003082E0 		add	r3, r2, r0	@ ivtmp.48, _8, slice_y
 301 00f0 8720A0E1 		lsl	r2, r7, #1	@ tmp239, _2,
 302 00f4 078082E0 		add	r8, r2, r7	@ tmp237, tmp239, _2
 303 00f8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.48, %sfp
 304 00fc 00B063E2 		rsb	fp, r3, #0	@ ivtmp.49, ivtmp.48
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 306              		.loc 1 79 11 view .LVU48
 307 0100 0030A0E3 		mov	r3, #0	@ w,
 308 0104 14208DE5 		str	r2, [sp, #20]	@ tmp239, %sfp
 309 0108 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 310              	.LVL9:
 311              	.L14:
 312              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 313              		.loc 1 84 9 view .LVU50
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 315              		.loc 1 79 11 is_stmt 0 view .LVU51
 316 010c 14E09DE5 		ldr	lr, [sp, #20]	@ ivtmp.44, %sfp
 317 0110 04609DE5 		ldr	r6, [sp, #4]	@ ivtmp.41, %sfp
 318 0114 00C0A0E3 		mov	ip, #0	@ ivtmp.42,
 319              	.LVL10:
 320              	.L13:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 321              		.loc 1 87 13 is_stmt 1 view .LVU52
 322              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 103 74 is_stmt 0 view .LVU53
 324 0118 2C28A0E1 		lsr	r2, ip, #16	@ tmp197, ivtmp.42,
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 view .LVU54
 327 011c 043096E4 		ldr	r3, [r6], #4	@ word, MEM[base: _264, offset: 0B]
 328              	.LVL11:
  89:armwave.c     ****                 scale_value = word & 0xff;
 329              		.loc 1 89 13 is_stmt 1 view .LVU55
  90:armwave.c     ****                 
 330              		.loc 1 90 17 view .LVU56
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 17 view .LVU57
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 332              		.loc 1 107 17 view .LVU58
 333              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 107 47 is_stmt 0 view .LVU59
 335 0120 954222E0 		mla	r2, r5, r2, r4	@ tmp199, _6, tmp197, _7
 336              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 337              		.loc 1 103 34 view .LVU60
 338 0124 0CC087E0 		add	ip, r7, ip	@ _78, _2, ivtmp.42
 339              	.LVL12:
 340              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 341              		.loc 1 107 47 view .LVU61
 342 0128 7320E2E6 		uxtab	r2, r2, r3	@ tmp201, tmp199, word
 343              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 344              		.loc 1 103 74 view .LVU62
 345 012c 2C08A0E1 		lsr	r0, ip, #16	@ tmp206, _78,
 346              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 347              		.loc 1 107 47 view .LVU63
 348 0130 8220A0E1 		lsl	r2, r2, #1	@ tmp202, tmp201,
 349 0134 954020E0 		mla	r0, r5, r0, r4	@ tmp208, _6, tmp206, _7
 350              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 351              		.loc 1 108 22 view .LVU64
 352 0138 23A4A0E1 		lsr	r10, r3, #8	@ word, word,
 353              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 354              		.loc 1 107 47 view .LVU65
 355 013c B29091E1 		ldrh	r9, [r1, r2]	@ *_63, *_63
 356 0140 7A00E0E6 		uxtab	r0, r0, r10	@ tmp211, tmp208, word
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 74 view .LVU66
 359 0144 2EA8A0E1 		lsr	r10, lr, #16	@ tmp216, ivtmp.44,
 360              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 361              		.loc 1 107 47 view .LVU67
 362 0148 019089E2 		add	r9, r9, #1	@ tmp205, *_63,
 363 014c 954A2AE0 		mla	r10, r5, r10, r4	@ tmp218, _6, tmp216, _7
 364 0150 B29081E1 		strh	r9, [r1, r2]	@ movhi	@ tmp205, *_63
 365              		.loc 1 108 17 is_stmt 1 view .LVU68
 366              	.LVL13:
  90:armwave.c     ****                 
 367              		.loc 1 90 17 view .LVU69
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 368              		.loc 1 102 17 view .LVU70
 107:armwave.c     ****                 word >>= 8;
 369              		.loc 1 107 17 view .LVU71
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 34 is_stmt 0 view .LVU72
 372 0154 0EE087E0 		add	lr, r7, lr	@ _122, _2, ivtmp.44
 373              	@ armwave.c:108:                 word >>= 8;
 374              		.loc 1 108 22 view .LVU73
 375 0158 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU74
 378 015c 8000A0E1 		lsl	r0, r0, #1	@ tmp212, tmp211,
 379 0160 7220EAE6 		uxtab	r2, r10, r2	@ tmp221, tmp218, word
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 74 view .LVU75
 382 0164 2EA8A0E1 		lsr	r10, lr, #16	@ tmp226, _122,
 383              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 384              		.loc 1 107 47 view .LVU76
 385 0168 B09091E1 		ldrh	r9, [r1, r0]	@ *_85, *_85
 386              	@ armwave.c:108:                 word >>= 8;
 387              		.loc 1 108 22 view .LVU77
 388 016c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 389              	.LVL14:
 390              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 391              		.loc 1 107 47 view .LVU78
 392 0170 953A23E0 		mla	r3, r5, r10, r3	@ tmp229, _6, tmp226, word
 393 0174 8220A0E1 		lsl	r2, r2, #1	@ tmp222, tmp221,
 394 0178 019089E2 		add	r9, r9, #1	@ tmp215, *_85,
 395 017c B09081E1 		strh	r9, [r1, r0]	@ movhi	@ tmp215, *_85
 396              		.loc 1 108 17 is_stmt 1 view .LVU79
 397              	.LVL15:
  90:armwave.c     ****                 
 398              		.loc 1 90 17 view .LVU80
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 399              		.loc 1 102 17 view .LVU81
 107:armwave.c     ****                 word >>= 8;
 400              		.loc 1 107 17 view .LVU82
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 is_stmt 0 view .LVU83
 403 0180 043083E0 		add	r3, r3, r4	@ tmp230, tmp229, _7
 404 0184 B20091E1 		ldrh	r0, [r1, r2]	@ *_107, *_107
 405 0188 8330A0E1 		lsl	r3, r3, #1	@ tmp231, tmp230,
 406              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 407              		.loc 1 84 9 view .LVU84
 408 018c 00909DE5 		ldr	r9, [sp]	@ height, %sfp
 409              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 47 view .LVU85
 411 0190 010080E2 		add	r0, r0, #1	@ tmp225, *_107,
 412 0194 B20081E1 		strh	r0, [r1, r2]	@ movhi	@ tmp225, *_107
 413              		.loc 1 108 17 is_stmt 1 view .LVU86
 414              	.LVL16:
  90:armwave.c     ****                 
 415              		.loc 1 90 17 view .LVU87
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 416              		.loc 1 102 17 view .LVU88
 107:armwave.c     ****                 word >>= 8;
 417              		.loc 1 107 17 view .LVU89
 418              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 419              		.loc 1 107 47 is_stmt 0 view .LVU90
 420 0198 B32091E1 		ldrh	r2, [r1, r3]	@ *_129, *_129
 421              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 422              		.loc 1 84 9 view .LVU91
 423 019c 06008BE0 		add	r0, fp, r6	@ tmp238, ivtmp.49, ivtmp.41
 424 01a0 000059E1 		cmp	r9, r0	@ height, tmp238
 425              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 426              		.loc 1 107 47 view .LVU92
 427 01a4 012082E2 		add	r2, r2, #1	@ tmp234, *_129,
 428 01a8 08C08CE0 		add	ip, ip, r8	@ ivtmp.42, _78, tmp237
 429 01ac 08E08EE0 		add	lr, lr, r8	@ ivtmp.44, _122, tmp237
 430              	.LVL17:
 107:armwave.c     ****                 word >>= 8;
 431              		.loc 1 107 47 view .LVU93
 432 01b0 B32081E1 		strh	r2, [r1, r3]	@ movhi	@ tmp234, *_129
 433              		.loc 1 108 17 is_stmt 1 view .LVU94
 434              	.LVL18:
 435              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 436              		.loc 1 84 9 is_stmt 0 view .LVU95
 437 01b4 D7FFFF8A 		bhi	.L13		@,
 438              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 439              		.loc 1 79 44 view .LVU96
 440 01b8 08309DE5 		ldr	r3, [sp, #8]	@ w, %sfp
 441              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 442              		.loc 1 79 5 view .LVU97
 443 01bc 0C209DE5 		ldr	r2, [sp, #12]	@ _135, %sfp
 444              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 445              		.loc 1 79 44 view .LVU98
 446 01c0 013083E2 		add	r3, r3, #1	@ w, w,
 447              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 448              		.loc 1 79 5 view .LVU99
 449 01c4 020053E1 		cmp	r3, r2	@ w, _135
 450              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 451              		.loc 1 79 44 view .LVU100
 452 01c8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 453              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 454              		.loc 1 79 44 view .LVU101
 455 01cc 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.48, %sfp
 456 01d0 10309DE5 		ldr	r3, [sp, #16]	@ _9, %sfp
 457              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 458              		.loc 1 79 44 view .LVU102
 459 01d4 032082E0 		add	r2, r2, r3	@ ivtmp.48, ivtmp.48, _9
 460 01d8 04208DE5 		str	r2, [sp, #4]	@ ivtmp.48, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 461              		.loc 1 79 44 view .LVU103
 462 01dc 03B04BE0 		sub	fp, fp, r3	@ ivtmp.49, ivtmp.49, _9
 463              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 464              		.loc 1 79 5 view .LVU104
 465 01e0 C9FFFF1A 		bne	.L14		@,
 466              	.LVL21:
 467              	.L11:
 468              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 469              		.loc 1 112 1 view .LVU105
 470 01e4 1CD08DE2 		add	sp, sp, #28	@,,
 471              		.cfi_def_cfa_offset 36
 472              	.LVL22:
 473              		.loc 1 112 1 view .LVU106
 474              		@ sp needed	@
 475 01e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 476              	.LVL23:
 477              	.L22:
 478              		.loc 1 112 1 view .LVU107
 479              		.align	2
 480              	.L21:
 481 01ec 00000000 		.word	g_armwave_state
 482              		.cfi_endproc
 483              	.LFE59:
 485              		.align	2
 486              		.global	armwave_fill_pixbuf_scaled
 487              		.syntax unified
 488              		.arm
 489              		.fpu vfp
 491              	armwave_fill_pixbuf_scaled:
 492              	.LVL24:
 493              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 494              		.loc 1 119 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 8
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 498              		.loc 1 120 5 view .LVU109
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 499              		.loc 1 122 5 view .LVU110
 123:armwave.c     ****     uint8_t r, g, b;
 500              		.loc 1 123 5 view .LVU111
 124:armwave.c     ****     int value; 
 501              		.loc 1 124 5 view .LVU112
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 502              		.loc 1 126 5 view .LVU113
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 503              		.loc 1 127 5 view .LVU114
 128:armwave.c     ****     uint32_t offset;
 504              		.loc 1 128 5 view .LVU115
 129:armwave.c     **** 
 130:armwave.c     ****     if(out_buffer == NULL)
 505              		.loc 1 130 5 view .LVU116
 506              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 507              		.loc 1 119 1 is_stmt 0 view .LVU117
 508 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_def_cfa_offset 36
 510              		.cfi_offset 4, -36
 511              		.cfi_offset 5, -32
 512              		.cfi_offset 6, -28
 513              		.cfi_offset 7, -24
 514              		.cfi_offset 8, -20
 515              		.cfi_offset 9, -16
 516              		.cfi_offset 10, -12
 517              		.cfi_offset 11, -8
 518              		.cfi_offset 14, -4
 519              	@ armwave.c:130:     if(out_buffer == NULL)
 520              		.loc 1 130 7 view .LVU118
 521 01f4 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 522              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 523              		.loc 1 119 1 view .LVU119
 524 01f8 0CD04DE2 		sub	sp, sp, #12	@,,
 525              		.cfi_def_cfa_offset 48
 526              	@ armwave.c:130:     if(out_buffer == NULL)
 527              		.loc 1 130 7 view .LVU120
 528 01fc 1A00000A 		beq	.L23		@,
 529              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 530              		.loc 1 126 15 view .LVU121
 531 0200 54519FE5 		ldr	r5, .L44	@ tmp221,
 532              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     ****         return;
 132:armwave.c     **** 
 133:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 134:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 533              		.loc 1 134 5 view .LVU122
 534 0204 0010A0E3 		mov	r1, #0	@,
 535              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 536              		.loc 1 134 59 view .LVU123
 537 0208 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 538 020c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 539              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 540              		.loc 1 126 15 view .LVU124
 541 0210 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 542              		.loc 1 134 5 is_stmt 1 view .LVU125
 543              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 544              		.loc 1 134 59 is_stmt 0 view .LVU126
 545 0214 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 546              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 547              		.loc 1 134 5 view .LVU127
 548 0218 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 549 021c FEFFFFEB 		bl	memset		@
 550              	.LVL25:
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 551              		.loc 1 136 5 is_stmt 1 view .LVU128
 552              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 553              		.loc 1 136 10 is_stmt 0 view .LVU129
 554 0220 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 555 0224 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 556 0228 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 557              	.LVL26:
 137:armwave.c     ****     
 138:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 558              		.loc 1 138 5 is_stmt 1 view .LVU130
 559              		.loc 1 138 5 is_stmt 0 view .LVU131
 560 022c 000050E3 		cmp	r0, #0	@ npix,
 561 0230 0D0000DA 		ble	.L23		@,
 562              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 139:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 140:armwave.c     ****         wave_word = *base_32ptr++;
 141:armwave.c     **** 
 142:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 143:armwave.c     ****             for(w = 0; w < 2; w++) {
 144:armwave.c     ****                 value = wave_word & 0xffff;
 145:armwave.c     ****                 wave_word >>= 16;
 146:armwave.c     **** 
 147:armwave.c     ****                 if(value != 0) {
 148:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 149:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 563              		.loc 1 149 52 view .LVU132
 564 0234 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 565              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 148 52 view .LVU133
 567 0238 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 568              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 151:armwave.c     **** 
 152:armwave.c     ****                     r = MIN(rr, 255);
 153:armwave.c     ****                     g = MIN(gg, 255);
 154:armwave.c     ****                     b = MIN(bb, 255);
 155:armwave.c     **** 
 156:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 157:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 158:armwave.c     **** 
 159:armwave.c     ****                     // Plot the pixels
 160:armwave.c     ****                     nsub = n + w;
 161:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 569              		.loc 1 161 57 view .LVU134
 570 023c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 571              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 572              		.loc 1 149 52 view .LVU135
 573 0240 00308DE5 		str	r3, [sp]	@ _16, %sfp
 574              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 575              		.loc 1 150 52 view .LVU136
 576 0244 F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 577 0248 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 578              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 579              		.loc 1 138 11 view .LVU137
 580 024c 0030A0E3 		mov	r3, #0	@ n,
 581              	.LVL27:
 582              	.L29:
 140:armwave.c     **** 
 583              		.loc 1 140 9 is_stmt 1 view .LVU138
 584              	@ armwave.c:140:         wave_word = *base_32ptr++;
 140:armwave.c     **** 
 585              		.loc 1 140 19 is_stmt 0 view .LVU139
 586 0250 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 587              	.LVL28:
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 588              		.loc 1 142 9 is_stmt 1 view .LVU140
 589              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 590              		.loc 1 142 11 is_stmt 0 view .LVU141
 591 0254 000052E3 		cmp	r2, #0	@ wave_word,
 592              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 593              		.loc 1 143 19 view .LVU142
 594 0258 0080A013 		movne	r8, #0	@ w,
 595              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 596              		.loc 1 142 11 view .LVU143
 597 025c 0400001A 		bne	.L28		@,
 598              	.L25:
 599              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 600              		.loc 1 138 28 view .LVU144
 601 0260 023083E2 		add	r3, r3, #2	@ n, n,
 602              	.LVL29:
 603              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 604              		.loc 1 138 5 view .LVU145
 605 0264 030050E1 		cmp	r0, r3	@ npix, n
 606 0268 F8FFFFCA 		bgt	.L29		@,
 607              	.LVL30:
 608              	.L23:
 609              	@ armwave.c:173: }
 162:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     xx = (nsub >> 8) / 2;
 164:armwave.c     **** 
 165:armwave.c     ****                     for(y = yy; y < ye; y++) {
 166:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 167:armwave.c     ****                         *(out_buffer_base + offset) = word;
 168:armwave.c     ****                     }
 169:armwave.c     ****                 }
 170:armwave.c     ****             }
 171:armwave.c     ****         }
 172:armwave.c     ****     }
 173:armwave.c     **** }
 610              		.loc 1 173 1 view .LVU146
 611 026c 0CD08DE2 		add	sp, sp, #12	@,,
 612              		.cfi_remember_state
 613              		.cfi_def_cfa_offset 36
 614              		@ sp needed	@
 615 0270 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 616              	.LVL31:
 617              	.L28:
 618              		.cfi_restore_state
 144:armwave.c     ****                 wave_word >>= 16;
 619              		.loc 1 144 17 is_stmt 1 view .LVU147
 620              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 621              		.loc 1 144 23 is_stmt 0 view .LVU148
 622 0274 7290FFE6 		uxth	r9, r2	@ value, wave_word
 623              	.LVL32:
 145:armwave.c     **** 
 624              		.loc 1 145 17 is_stmt 1 view .LVU149
 625              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 626              		.loc 1 147 19 is_stmt 0 view .LVU150
 627 0278 000059E3 		cmp	r9, #0	@ value,
 628              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 629              		.loc 1 145 27 view .LVU151
 630 027c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 631              	.LVL33:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 147 17 is_stmt 1 view .LVU152
 633              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 634              		.loc 1 147 19 is_stmt 0 view .LVU153
 635 0280 0600001A 		bne	.L43		@,
 636              	.LVL34:
 637              	.L26:
 638              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 639              		.loc 1 143 13 view .LVU154
 640 0284 010058E3 		cmp	r8, #1	@ w,
 641 0288 F4FFFF0A 		beq	.L25		@,
 642              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 643              		.loc 1 144 23 view .LVU155
 644 028c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 645              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 646              		.loc 1 147 19 view .LVU156
 647 0290 000059E3 		cmp	r9, #0	@ value,
 648 0294 0180A0E3 		mov	r8, #1	@ w,
 649              	.LVL35:
 144:armwave.c     ****                 wave_word >>= 16;
 650              		.loc 1 144 17 is_stmt 1 view .LVU157
 145:armwave.c     **** 
 651              		.loc 1 145 17 view .LVU158
 652              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 653              		.loc 1 145 27 is_stmt 0 view .LVU159
 654 0298 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 655              	.LVL36:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 656              		.loc 1 147 17 is_stmt 1 view .LVU160
 657              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 658              		.loc 1 147 19 is_stmt 0 view .LVU161
 659 029c F8FFFF0A 		beq	.L26		@,
 660              	.L43:
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 661              		.loc 1 148 21 is_stmt 1 view .LVU162
 662              	.LVL37:
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 149 21 view .LVU163
 150:armwave.c     **** 
 664              		.loc 1 150 21 view .LVU164
 152:armwave.c     ****                     g = MIN(gg, 255);
 665              		.loc 1 152 21 view .LVU165
 153:armwave.c     ****                     b = MIN(bb, 255);
 666              		.loc 1 153 21 view .LVU166
 154:armwave.c     **** 
 667              		.loc 1 154 21 view .LVU167
 157:armwave.c     **** 
 668              		.loc 1 157 21 view .LVU168
 669              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 670              		.loc 1 150 55 is_stmt 0 view .LVU169
 671 02a0 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 672 02a4 08E083E0 		add	lr, r3, r8	@ _130, n, w
 673 02a8 99010CE0 		mul	ip, r9, r1	@ tmp195, value, _19
 674              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 675              		.loc 1 161 32 view .LVU170
 676 02ac 7E10EFE6 		uxtb	r1, lr	@ _31, _130
 677              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 678              		.loc 1 162 41 view .LVU171
 679 02b0 017081E2 		add	r7, r1, #1	@ tmp210, _31,
 680              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 681              		.loc 1 161 40 view .LVU172
 682 02b4 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 683              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 684              		.loc 1 162 41 view .LVU173
 685 02b8 107A07EE 		vmov	s14, r7	@ int	@ tmp210, tmp210
 686              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 687              		.loc 1 149 55 view .LVU174
 688 02bc 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 689              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 690              		.loc 1 150 24 view .LVU175
 691 02c0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp195,
 692              	.LVL38:
 693              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 161 40 view .LVU176
 695 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp208, _31
 696              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 697              		.loc 1 162 46 view .LVU177
 698 02c8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp211, tmp210
 699              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 700              		.loc 1 149 55 view .LVU178
 701 02cc 99010AE0 		mul	r10, r9, r1	@ tmp199, value, _16
 702              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 703              		.loc 1 148 55 view .LVU179
 704 02d0 990B09E0 		mul	r9, r9, fp	@ tmp205, value, _13
 705              	.LVL39:
 706              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 707              		.loc 1 154 25 view .LVU180
 708 02d4 FF005CE3 		cmp	ip, #255	@ bb,
 709              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 149 24 view .LVU181
 711 02d8 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp199,
 712              	.LVL40:
 713              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 161 40 view .LVU182
 715 02dc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp209, tmp208, _33
 716              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 717              		.loc 1 162 46 view .LVU183
 718 02e0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp212, tmp211, _33
 719              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 720              		.loc 1 154 25 view .LVU184
 721 02e4 FFC0A0A3 		movge	ip, #255	@ bb,
 722              	.LVL41:
 723              	@ armwave.c:153:                     g = MIN(gg, 255);
 153:armwave.c     ****                     b = MIN(bb, 255);
 724              		.loc 1 153 25 view .LVU185
 725 02e8 FF005AE3 		cmp	r10, #255	@ gg,
 726 02ec FFA0A0A3 		movge	r10, #255	@ gg,
 727              	.LVL42:
 728              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 729              		.loc 1 148 24 view .LVU186
 730 02f0 4994A0E1 		asr	r9, r9, #8	@ rr, tmp205,
 731              	.LVL43:
 732              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 733              		.loc 1 152 25 view .LVU187
 734 02f4 FF0059E3 		cmp	r9, #255	@ rr,
 735              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 736              		.loc 1 157 56 view .LVU188
 737 02f8 0AA4A0E1 		lsl	r10, r10, #8	@ tmp200, gg,
 738              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 161 24 view .LVU189
 740 02fc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp209
 741              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 152 25 view .LVU190
 743 0300 FF90A0A3 		movge	r9, #255	@ rr,
 744              	.LVL44:
 745              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 746              		.loc 1 163 32 view .LVU191
 747 0304 4EE4A0E1 		asr	lr, lr, #8	@ tmp213, _130,
 748              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 749              		.loc 1 157 44 view .LVU192
 750 0308 0CC8A0E1 		lsl	ip, ip, #16	@ tmp196, bb,
 751              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 752              		.loc 1 157 56 view .LVU193
 753 030c 7AA0FFE6 		uxth	r10, r10	@ tmp201, tmp200
 754              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 755              		.loc 1 157 44 view .LVU194
 756 0310 FFC80CE2 		and	ip, ip, #16711680	@ tmp197, tmp196,
 757              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 758              		.loc 1 157 51 view .LVU195
 759 0314 0AC08CE1 		orr	ip, ip, r10	@ tmp203, tmp197, tmp201
 760              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 761              		.loc 1 157 62 view .LVU196
 762 0318 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 763              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 161 24 view .LVU197
 765 031c 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 766              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 767              		.loc 1 162 24 view .LVU198
 768 0320 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp212
 769              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 770              		.loc 1 163 38 view .LVU199
 771 0324 AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp215, tmp213, tmp213,
 772              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 773              		.loc 1 157 62 view .LVU200
 774 0328 0AC08CE1 		orr	ip, ip, r10	@ tmp207, tmp203, rr
 775              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 776              		.loc 1 157 26 view .LVU201
 777 032c FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp207,
 778              	.LVL45:
 160:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 779              		.loc 1 160 21 is_stmt 1 view .LVU202
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 161 21 view .LVU203
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 781              		.loc 1 162 21 view .LVU204
 782              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 783              		.loc 1 163 38 is_stmt 0 view .LVU205
 784 0330 C990A0E1 		asr	r9, r9, #1	@ xx, tmp215,
 785              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 786              		.loc 1 162 24 view .LVU206
 787 0334 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 788              	.LVL46:
 163:armwave.c     **** 
 789              		.loc 1 163 21 is_stmt 1 view .LVU207
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 790              		.loc 1 165 21 view .LVU208
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 791              		.loc 1 165 21 is_stmt 0 view .LVU209
 792 0338 070051E1 		cmp	r1, r7	@ yy, ye
 793 033c D0FFFF2A 		bcs	.L26		@,
 794              	.LVL47:
 795              	.L27:
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 796              		.loc 1 166 25 is_stmt 1 discriminator 3 view .LVU210
 167:armwave.c     ****                     }
 797              		.loc 1 167 25 discriminator 3 view .LVU211
 798              	@ armwave.c:166:                         offset = (xx + (y * g_armwave_state.target_width)); 
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 799              		.loc 1 166 43 is_stmt 0 discriminator 3 view .LVU212
 800 0340 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 801              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 802              		.loc 1 167 43 discriminator 3 view .LVU213
 803 0344 9C912CE0 		mla	ip, ip, r1, r9	@ tmp220, g_armwave_state.target_width, yy, xx
 804              	.LVL48:
 805              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 806              		.loc 1 165 42 discriminator 3 view .LVU214
 807 0348 011081E2 		add	r1, r1, #1	@ yy, yy,
 808              	.LVL49:
 809              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 165 21 discriminator 3 view .LVU215
 811 034c 010057E1 		cmp	r7, r1	@ ye, yy
 812              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 813              		.loc 1 167 53 discriminator 3 view .LVU216
 814 0350 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 815              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 816              		.loc 1 165 21 discriminator 3 view .LVU217
 817 0354 F9FFFF1A 		bne	.L27		@,
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 818              		.loc 1 165 21 discriminator 3 view .LVU218
 819 0358 C9FFFFEA 		b	.L26		@
 820              	.L45:
 821              		.align	2
 822              	.L44:
 823 035c 00000000 		.word	g_armwave_state
 824              		.cfi_endproc
 825              	.LFE60:
 827              		.global	__aeabi_idiv
 828              		.align	2
 829              		.global	armwave_generate
 830              		.syntax unified
 831              		.arm
 832              		.fpu vfp
 834              	armwave_generate:
 835              	.LFB61:
 174:armwave.c     **** 
 175:armwave.c     **** /*
 176:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 177:armwave.c     ****  */
 178:armwave.c     **** void armwave_generate()
 179:armwave.c     **** {
 836              		.loc 1 179 1 is_stmt 1 view -0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 56
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 180:armwave.c     ****     uint32_t yy;
 840              		.loc 1 180 5 view .LVU220
 181:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 841              		.loc 1 181 5 view .LVU221
 842              	.LVL50:
 182:armwave.c     **** 
 183:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 843              		.loc 1 183 5 view .LVU222
 844              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 845              		.loc 1 179 1 is_stmt 0 view .LVU223
 846 0360 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 847              		.cfi_def_cfa_offset 36
 848              		.cfi_offset 4, -36
 849              		.cfi_offset 5, -32
 850              		.cfi_offset 6, -28
 851              		.cfi_offset 7, -24
 852              		.cfi_offset 8, -20
 853              		.cfi_offset 9, -16
 854              		.cfi_offset 10, -12
 855              		.cfi_offset 11, -8
 856              		.cfi_offset 14, -4
 857              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 858              		.loc 1 183 5 view .LVU224
 859 0364 0010A0E3 		mov	r1, #0	@,
 860              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 861              		.loc 1 183 58 view .LVU225
 862 0368 D0419FE5 		ldr	r4, .L61	@ tmp198,
 863              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 864              		.loc 1 179 1 view .LVU226
 865 036c 3CD04DE2 		sub	sp, sp, #60	@,,
 866              		.cfi_def_cfa_offset 96
 867              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 868              		.loc 1 183 5 view .LVU227
 869 0370 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 870 0374 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 871 0378 FEFFFFEB 		bl	memset		@
 872              	.LVL51:
 184:armwave.c     **** 
 185:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 873              		.loc 1 185 5 is_stmt 1 view .LVU228
 874              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 875              		.loc 1 185 68 is_stmt 0 view .LVU229
 876 037c 445094E5 		ldr	r5, [r4, #68]	@ _146, g_armwave_state.slice_height
 877              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 878              		.loc 1 185 51 view .LVU230
 879 0380 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 880 0384 0510A0E1 		mov	r1, r5	@, _146
 881              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 882              		.loc 1 185 68 view .LVU231
 883 0388 18508DE5 		str	r5, [sp, #24]	@ _146, %sfp
 884              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 885              		.loc 1 185 51 view .LVU232
 886 038c FEFFFFEB 		bl	__aeabi_idiv		@
 887              	.LVL52:
 888              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 889              		.loc 1 185 5 view .LVU233
 890 0390 003050E2 		subs	r3, r0, #0	@ _130,
 891 0394 30308DE5 		str	r3, [sp, #48]	@ _130, %sfp
 892 0398 6600000A 		beq	.L46		@,
 893              	.LBB10:
 894              	.LBB11:
 895              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 896              		.loc 1 79 35 view .LVU234
 897 039c 383094E5 		ldr	r3, [r4, #56]	@ _128, g_armwave_state.waves
 898              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 899              		.loc 1 71 82 view .LVU235
 900 03a0 242094E5 		ldr	r2, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 901              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 902              		.loc 1 80 81 view .LVU236
 903 03a4 340094E5 		ldr	r0, [r4, #52]	@ _24, g_armwave_state.wave_stride
 904 03a8 000053E3 		cmp	r3, #0	@ _128,
 905              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 79 35 view .LVU237
 907 03ac 28308DE5 		str	r3, [sp, #40]	@ _128, %sfp
 908              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 909              		.loc 1 71 40 view .LVU238
 910 03b0 041094E5 		ldr	r1, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 911              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 912              		.loc 1 71 82 view .LVU239
 913 03b4 20208DE5 		str	r2, [sp, #32]	@ _17, %sfp
 914              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 915              		.loc 1 71 147 view .LVU240
 916 03b8 40B094E5 		ldr	fp, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 917              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 918              		.loc 1 80 36 view .LVU241
 919 03bc 143094E5 		ldr	r3, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 920              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 921              		.loc 1 80 81 view .LVU242
 922 03c0 24008DE5 		str	r0, [sp, #36]	@ _24, %sfp
 923 03c4 5B0000DA 		ble	.L46		@,
 924 03c8 000055E3 		cmp	r5, #0	@ _146,
 925 03cc 5900000A 		beq	.L46		@,
 926 03d0 920500E0 		mul	r0, r2, r5	@ _267, _17, _146
 927 03d4 08308DE5 		str	r3, [sp, #8]	@ ivtmp.84, %sfp
 928 03d8 34008DE5 		str	r0, [sp, #52]	@ _267, %sfp
 929 03dc 003063E2 		rsb	r3, r3, #0	@ ivtmp.85, ivtmp.84
 930 03e0 8200A0E1 		lsl	r0, r2, #1	@ tmp259, _17,
 931 03e4 00C0A0E3 		mov	ip, #0	@ ivtmp.83,
 932 03e8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.85, %sfp
 933 03ec 023080E0 		add	r3, r0, r2	@ tmp257, tmp259, _17
 934 03f0 2C008DE5 		str	r0, [sp, #44]	@ tmp259, %sfp
 935 03f4 0CC08DE5 		str	ip, [sp, #12]	@ ivtmp.83, %sfp
 936 03f8 10308DE5 		str	r3, [sp, #16]	@ tmp257, %sfp
 937              	.LBE11:
 938              	.LBE10:
 939              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 940              		.loc 1 185 12 view .LVU243
 941 03fc 1CC08DE5 		str	ip, [sp, #28]	@ ivtmp.83, %sfp
 942              	.LVL53:
 943              	.L50:
 186:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 187:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 188:armwave.c     **** 
 189:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 944              		.loc 1 189 9 is_stmt 1 discriminator 3 view .LVU244
 945              	.LBB13:
 946              	.LBI10:
  62:armwave.c     **** {
 947              		.loc 1 62 6 discriminator 3 view .LVU245
 948              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 949              		.loc 1 64 5 discriminator 3 view .LVU246
  65:armwave.c     ****     uint8_t *wave_base;
 950              		.loc 1 65 5 discriminator 3 view .LVU247
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 951              		.loc 1 66 5 discriminator 3 view .LVU248
  67:armwave.c     ****     bufftyp_t *write_buffer;
 952              		.loc 1 67 5 discriminator 3 view .LVU249
  68:armwave.c     **** 
 953              		.loc 1 68 5 discriminator 3 view .LVU250
  71:armwave.c     **** 
 954              		.loc 1 71 5 discriminator 3 view .LVU251
 955              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 956              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU252
 957 0400 0C309DE5 		ldr	r3, [sp, #12]	@ ivtmp.83, %sfp
 958              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 959              		.loc 1 71 130 discriminator 3 view .LVU253
 960 0404 04A09DE5 		ldr	r10, [sp, #4]	@ ivtmp.80, %sfp
 961 0408 08609DE5 		ldr	r6, [sp, #8]	@ ivtmp.79, %sfp
 962              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 963              		.loc 1 71 105 discriminator 3 view .LVU254
 964 040c 2308A0E1 		lsr	r0, r3, #16	@ tmp216, ivtmp.83,
 965              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 966              		.loc 1 79 11 discriminator 3 view .LVU255
 967 0410 0050A0E3 		mov	r5, #0	@ w,
 968              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 969              		.loc 1 71 130 discriminator 3 view .LVU256
 970 0414 9B0000E0 		mul	r0, fp, r0	@ _22, _21, tmp216
 971              	.LVL54:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 972              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU257
 973              	.L49:
  80:armwave.c     **** 
 974              		.loc 1 80 9 view .LVU258
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 975              		.loc 1 84 9 view .LVU259
 976              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 977              		.loc 1 79 11 is_stmt 0 view .LVU260
 978 0418 2CE09DE5 		ldr	lr, [sp, #44]	@ ivtmp.75, %sfp
 979 041c 0690A0E1 		mov	r9, r6	@ ivtmp.72, ivtmp.79
 980 0420 00C0A0E3 		mov	ip, #0	@ ivtmp.73,
 981 0424 14508DE5 		str	r5, [sp, #20]	@ w, %sfp
 982              	.LVL55:
 983              	.L48:
  87:armwave.c     **** 
 984              		.loc 1 87 13 is_stmt 1 view .LVU261
 985              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 986              		.loc 1 103 74 is_stmt 0 view .LVU262
 987 0428 2C28A0E1 		lsr	r2, ip, #16	@ tmp217, ivtmp.73,
 988              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 989              		.loc 1 87 18 view .LVU263
 990 042c 043099E4 		ldr	r3, [r9], #4	@ word, MEM[base: _286, offset: 0B]
 991              	.LVL56:
  89:armwave.c     ****                 scale_value = word & 0xff;
 992              		.loc 1 89 13 is_stmt 1 view .LVU264
  90:armwave.c     ****                 
 993              		.loc 1 90 17 view .LVU265
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 994              		.loc 1 102 17 view .LVU266
 107:armwave.c     ****                 word >>= 8;
 995              		.loc 1 107 17 view .LVU267
 996              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 997              		.loc 1 103 34 is_stmt 0 view .LVU268
 998 0430 20509DE5 		ldr	r5, [sp, #32]	@ _17, %sfp
 999              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1000              		.loc 1 107 47 view .LVU269
 1001 0434 9B0222E0 		mla	r2, fp, r2, r0	@ tmp219, _21, tmp217, _22
 1002              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1003              		.loc 1 103 34 view .LVU270
 1004 0438 0CC085E0 		add	ip, r5, ip	@ _89, _17, ivtmp.73
 1005              	.LVL57:
 1006              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1007              		.loc 1 107 47 view .LVU271
 1008 043c 7320E2E6 		uxtab	r2, r2, r3	@ tmp221, tmp219, word
 1009              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1010              		.loc 1 103 74 view .LVU272
 1011 0440 2C48A0E1 		lsr	r4, ip, #16	@ tmp226, _89,
 1012              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1013              		.loc 1 107 47 view .LVU273
 1014 0444 8220A0E1 		lsl	r2, r2, #1	@ tmp222, tmp221,
 1015 0448 10709DE5 		ldr	r7, [sp, #16]	@ tmp257, %sfp
 1016 044c 9B0424E0 		mla	r4, fp, r4, r0	@ tmp228, _21, tmp226, _22
 1017              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1018              		.loc 1 108 22 view .LVU274
 1019 0450 2384A0E1 		lsr	r8, r3, #8	@ word, word,
 1020 0454 0CC087E0 		add	ip, r7, ip	@ ivtmp.73, tmp257, _89
 1021              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1022              		.loc 1 107 47 view .LVU275
 1023 0458 B27091E1 		ldrh	r7, [r1, r2]	@ *_74, *_74
 1024 045c 7840E4E6 		uxtab	r4, r4, r8	@ tmp231, tmp228, word
 1025              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1026              		.loc 1 103 74 view .LVU276
 1027 0460 2E88A0E1 		lsr	r8, lr, #16	@ tmp236, ivtmp.75,
 1028              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1029              		.loc 1 107 47 view .LVU277
 1030 0464 017087E2 		add	r7, r7, #1	@ tmp225, *_74,
 1031 0468 9B0828E0 		mla	r8, fp, r8, r0	@ tmp238, _21, tmp236, _22
 1032 046c B27081E1 		strh	r7, [r1, r2]	@ movhi	@ tmp225, *_74
 108:armwave.c     ****             }
 1033              		.loc 1 108 17 is_stmt 1 view .LVU278
 1034              	.LVL58:
  90:armwave.c     ****                 
 1035              		.loc 1 90 17 view .LVU279
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1036              		.loc 1 102 17 view .LVU280
 107:armwave.c     ****                 word >>= 8;
 1037              		.loc 1 107 17 view .LVU281
 1038              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1039              		.loc 1 103 34 is_stmt 0 view .LVU282
 1040 0470 0EE085E0 		add	lr, r5, lr	@ _133, _17, ivtmp.75
 1041              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1042              		.loc 1 108 22 view .LVU283
 1043 0474 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 1044              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1045              		.loc 1 107 47 view .LVU284
 1046 0478 8440A0E1 		lsl	r4, r4, #1	@ tmp232, tmp231,
 1047 047c 7220E8E6 		uxtab	r2, r8, r2	@ tmp241, tmp238, word
 1048              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1049              		.loc 1 103 74 view .LVU285
 1050 0480 2E88A0E1 		lsr	r8, lr, #16	@ tmp246, _133,
 1051              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1052              		.loc 1 107 47 view .LVU286
 1053 0484 B47091E1 		ldrh	r7, [r1, r4]	@ *_96, *_96
 1054              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1055              		.loc 1 108 22 view .LVU287
 1056 0488 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1057              	.LVL59:
 1058              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1059              		.loc 1 107 47 view .LVU288
 1060 048c 9B3823E0 		mla	r3, fp, r8, r3	@ tmp249, _21, tmp246, word
 1061 0490 8220A0E1 		lsl	r2, r2, #1	@ tmp242, tmp241,
 1062 0494 017087E2 		add	r7, r7, #1	@ tmp235, *_96,
 1063 0498 B47081E1 		strh	r7, [r1, r4]	@ movhi	@ tmp235, *_96
 108:armwave.c     ****             }
 1064              		.loc 1 108 17 is_stmt 1 view .LVU289
 1065              	.LVL60:
  90:armwave.c     ****                 
 1066              		.loc 1 90 17 view .LVU290
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1067              		.loc 1 102 17 view .LVU291
 107:armwave.c     ****                 word >>= 8;
 1068              		.loc 1 107 17 view .LVU292
 1069              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1070              		.loc 1 107 47 is_stmt 0 view .LVU293
 1071 049c 003083E0 		add	r3, r3, r0	@ tmp250, tmp249, _22
 1072 04a0 B24091E1 		ldrh	r4, [r1, r2]	@ *_118, *_118
 1073 04a4 8330A0E1 		lsl	r3, r3, #1	@ tmp251, tmp250,
 1074              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1075              		.loc 1 84 9 view .LVU294
 1076 04a8 18509DE5 		ldr	r5, [sp, #24]	@ _146, %sfp
 1077              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1078              		.loc 1 107 47 view .LVU295
 1079 04ac 014084E2 		add	r4, r4, #1	@ tmp245, *_118,
 1080 04b0 B24081E1 		strh	r4, [r1, r2]	@ movhi	@ tmp245, *_118
 108:armwave.c     ****             }
 1081              		.loc 1 108 17 is_stmt 1 view .LVU296
 1082              	.LVL61:
  90:armwave.c     ****                 
 1083              		.loc 1 90 17 view .LVU297
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1084              		.loc 1 102 17 view .LVU298
 107:armwave.c     ****                 word >>= 8;
 1085              		.loc 1 107 17 view .LVU299
 1086              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1087              		.loc 1 107 47 is_stmt 0 view .LVU300
 1088 04b4 B32091E1 		ldrh	r2, [r1, r3]	@ *_140, *_140
 1089 04b8 10709DE5 		ldr	r7, [sp, #16]	@ tmp257, %sfp
 1090              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1091              		.loc 1 84 9 view .LVU301
 1092 04bc 09408AE0 		add	r4, r10, r9	@ tmp258, ivtmp.80, ivtmp.72
 1093              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1094              		.loc 1 107 47 view .LVU302
 1095 04c0 012082E2 		add	r2, r2, #1	@ tmp254, *_140,
 1096              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1097              		.loc 1 84 9 view .LVU303
 1098 04c4 040055E1 		cmp	r5, r4	@ _146, tmp258
 1099 04c8 0EE087E0 		add	lr, r7, lr	@ ivtmp.75, tmp257, _133
 1100              	.LVL62:
 1101              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1102              		.loc 1 107 47 view .LVU304
 1103 04cc B32081E1 		strh	r2, [r1, r3]	@ movhi	@ tmp254, *_140
 108:armwave.c     ****             }
 1104              		.loc 1 108 17 is_stmt 1 view .LVU305
 1105              	.LVL63:
 1106              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1107              		.loc 1 84 9 is_stmt 0 view .LVU306
 1108 04d0 D4FFFF8A 		bhi	.L48		@,
 1109 04d4 14509DE5 		ldr	r5, [sp, #20]	@ w, %sfp
 1110              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1111              		.loc 1 79 5 view .LVU307
 1112 04d8 28309DE5 		ldr	r3, [sp, #40]	@ _128, %sfp
 1113              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1114              		.loc 1 79 44 view .LVU308
 1115 04dc 015085E2 		add	r5, r5, #1	@ w, w,
 1116              	.LVL64:
 1117              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1118              		.loc 1 79 5 view .LVU309
 1119 04e0 030055E1 		cmp	r5, r3	@ w, _128
 1120 04e4 24309DE5 		ldr	r3, [sp, #36]	@ _24, %sfp
 1121 04e8 036086E0 		add	r6, r6, r3	@ ivtmp.79, ivtmp.79, _24
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1122              		.loc 1 79 5 view .LVU310
 1123 04ec 03A04AE0 		sub	r10, r10, r3	@ ivtmp.80, ivtmp.80, _24
 1124 04f0 C8FFFF1A 		bne	.L49		@,
 1125              	.LVL65:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1126              		.loc 1 79 5 view .LVU311
 1127              	.LBE12:
 1128              	.LBE13:
 190:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1129              		.loc 1 190 9 is_stmt 1 view .LVU312
 191:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1130              		.loc 1 191 9 view .LVU313
 1131              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1132              		.loc 1 185 86 is_stmt 0 view .LVU314
 1133 04f4 1C309DE5 		ldr	r3, [sp, #28]	@ yy, %sfp
 1134              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1135              		.loc 1 185 5 view .LVU315
 1136 04f8 30209DE5 		ldr	r2, [sp, #48]	@ _130, %sfp
 1137              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1138              		.loc 1 185 86 view .LVU316
 1139 04fc 013083E2 		add	r3, r3, #1	@ yy, yy,
 1140              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1141              		.loc 1 185 5 view .LVU317
 1142 0500 020053E1 		cmp	r3, r2	@ yy, _130
 1143              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1144              		.loc 1 185 86 view .LVU318
 1145 0504 1C308DE5 		str	r3, [sp, #28]	@ yy, %sfp
 1146              	.LVL66:
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1147              		.loc 1 185 86 view .LVU319
 1148 0508 34209DE5 		ldr	r2, [sp, #52]	@ _267, %sfp
 1149 050c 0C309DE5 		ldr	r3, [sp, #12]	@ ivtmp.83, %sfp
 1150              	.LVL67:
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1151              		.loc 1 185 86 view .LVU320
 1152 0510 023083E0 		add	r3, r3, r2	@ ivtmp.83, ivtmp.83, _267
 1153 0514 0C308DE5 		str	r3, [sp, #12]	@ ivtmp.83, %sfp
 1154 0518 08209DE5 		ldr	r2, [sp, #8]	@ ivtmp.84, %sfp
 1155 051c 18309DE5 		ldr	r3, [sp, #24]	@ _146, %sfp
 1156 0520 032082E0 		add	r2, r2, r3	@ ivtmp.84, ivtmp.84, _146
 1157 0524 08208DE5 		str	r2, [sp, #8]	@ ivtmp.84, %sfp
 1158 0528 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.85, %sfp
 1159 052c 033042E0 		sub	r3, r2, r3	@ ivtmp.85, ivtmp.85, _146
 1160 0530 04308DE5 		str	r3, [sp, #4]	@ ivtmp.85, %sfp
 1161              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1162              		.loc 1 185 5 view .LVU321
 1163 0534 B1FFFF1A 		bne	.L50		@,
 1164              	.LVL68:
 1165              	.L46:
 1166              	@ armwave.c:195: }
 192:armwave.c     ****     }
 193:armwave.c     **** 
 194:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 195:armwave.c     **** }
 1167              		.loc 1 195 1 view .LVU322
 1168 0538 3CD08DE2 		add	sp, sp, #60	@,,
 1169              		.cfi_def_cfa_offset 36
 1170              		@ sp needed	@
 1171 053c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1172              	.L62:
 1173              		.align	2
 1174              	.L61:
 1175 0540 00000000 		.word	g_armwave_state
 1176              		.cfi_endproc
 1177              	.LFE61:
 1179              		.align	2
 1180              		.global	armwave_setup_render
 1181              		.syntax unified
 1182              		.arm
 1183              		.fpu vfp
 1185              	armwave_setup_render:
 1186              	.LVL69:
 1187              	.LFB62:
 196:armwave.c     **** 
 197:armwave.c     **** /*
 198:armwave.c     ****  * Setup the renderer with passed parameters.
 199:armwave.c     ****  */
 200:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 201:armwave.c     **** {
 1188              		.loc 1 201 1 is_stmt 1 view -0
 1189              		.cfi_startproc
 1190              		@ args = 12, pretend = 0, frame = 0
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 202:armwave.c     ****     uint32_t length, xx;
 1192              		.loc 1 202 5 view .LVU324
 203:armwave.c     ****     float points_per_pixel;
 1193              		.loc 1 203 5 view .LVU325
 204:armwave.c     **** 
 205:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1194              		.loc 1 205 5 view .LVU326
 1195              	@ armwave.c:201: {
 201:armwave.c     ****     uint32_t length, xx;
 1196              		.loc 1 201 1 is_stmt 0 view .LVU327
 1197 0544 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1198              		.cfi_def_cfa_offset 32
 1199              		.cfi_offset 4, -32
 1200              		.cfi_offset 5, -28
 1201              		.cfi_offset 6, -24
 1202              		.cfi_offset 7, -20
 1203              		.cfi_offset 8, -16
 1204              		.cfi_offset 9, -12
 1205              		.cfi_offset 10, -8
 1206              		.cfi_offset 14, -4
 1207 0548 028B2DED 		vpush.64	{d8}	@
 1208              		.cfi_def_cfa_offset 40
 1209              		.cfi_offset 80, -40
 1210              		.cfi_offset 81, -36
 1211 054c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1212 0550 0170A0E1 		mov	r7, r1	@ end_point, end_point
 1213 0554 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 1214 0558 10D04DE2 		sub	sp, sp, #16	@,,
 1215              		.cfi_def_cfa_offset 56
 1216              	@ armwave.c:201: {
 201:armwave.c     ****     uint32_t length, xx;
 1217              		.loc 1 201 1 view .LVU328
 1218 055c 38608DE2 		add	r6, sp, #56	@,,
 1219 0560 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1220 0564 401196E8 		ldm	r6, {r6, r8, ip}	@,,,
 1221              	@ armwave.c:205:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1222              		.loc 1 205 5 view .LVU329
 1223 0568 00308DE5 		str	r3, [sp]	@ wave_stride,
 1224 056c 0230A0E1 		mov	r3, r2	@, waves_max
 1225              	.LVL70:
 1226              		.loc 1 205 5 view .LVU330
 1227 0570 40118DE9 		stmib	sp, {r6, r8, ip}	@,,,
 1228 0574 0120A0E1 		mov	r2, r1	@, end_point
 1229              	.LVL71:
 1230              		.loc 1 205 5 view .LVU331
 1231 0578 0010A0E1 		mov	r1, r0	@, start_point
 1232              	.LVL72:
 1233              		.loc 1 205 5 view .LVU332
 1234 057c CC019FE5 		ldr	r0, .L77+8	@,
 1235              	.LVL73:
 1236              		.loc 1 205 5 view .LVU333
 1237 0580 FEFFFFEB 		bl	printf		@
 1238              	.LVL74:
 206:armwave.c     **** 
 207:armwave.c     ****     // TODO these asserts should instead raise PyExc
 208:armwave.c     ****     assert(start_point < end_point);
 1239              		.loc 1 208 5 is_stmt 1 view .LVU334
 1240 0584 070055E1 		cmp	r5, r7	@ start_point, end_point
 1241 0588 5F00002A 		bcs	.L74		@,
 209:armwave.c     **** 
 210:armwave.c     ****     /*
 211:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 212:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 213:armwave.c     ****     if(target_height == 256) {
 214:armwave.c     ****         g_armwave_state.row_shift = 8;
 215:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 216:armwave.c     ****     } else if(target_height == 512) {
 217:armwave.c     ****         g_armwave_state.row_shift = 9;
 218:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 219:armwave.c     ****     } else if(target_height == 1024) {
 220:armwave.c     ****         g_armwave_state.row_shift = 10;
 221:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 222:armwave.c     ****     } else if(target_height == 2048) {
 223:armwave.c     ****         g_armwave_state.row_shift = 11;
 224:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 225:armwave.c     ****     }
 226:armwave.c     ****     */
 227:armwave.c     **** 
 228:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 229:armwave.c     ****     g_armwave_state.xstride = target_height;
 1242              		.loc 1 229 5 view .LVU335
 1243              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1244              		.loc 1 230 49 is_stmt 0 view .LVU336
 1245 058c 908A07EE 		vmov	s15, r8	@ int	@ target_height, target_height
 1246 0590 6C7A9FED 		vldr.32	s14, .L77	@ tmp171,
 1247              	@ armwave.c:240:     g_armwave_state.wave_length = end_point - start_point;
 231:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 232:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 233:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 234:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 235:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 236:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 237:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 239:armwave.c     ****     g_armwave_state.target_height = target_height;
 240:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1248              		.loc 1 240 45 view .LVU337
 1249 0594 055047E0 		sub	r5, r7, r5	@ _13, end_point, start_point
 1250              	.LVL75:
 1251              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1252              		.loc 1 237 90 view .LVU338
 1253 0598 047086E2 		add	r7, r6, #4	@ tmp182, target_width,
 1254              	.LVL76:
 1255              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1256              		.loc 1 230 49 view .LVU339
 1257 059c 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp170, target_height
 1258              	@ armwave.c:229:     g_armwave_state.xstride = target_height;
 229:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1259              		.loc 1 229 29 view .LVU340
 1260 05a0 AC419FE5 		ldr	r4, .L77+12	@ tmp236,
 1261              	@ armwave.c:235:     g_armwave_state.size = target_height * target_width;
 235:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1262              		.loc 1 235 42 view .LVU341
 1263 05a4 980602E0 		mul	r2, r8, r6	@ tmp179, target_height, target_width
 1264              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1265              		.loc 1 237 95 view .LVU342
 1266 05a8 877387E0 		add	r7, r7, r7, lsl #7	@ tmp185, tmp182, tmp182,
 1267              	@ armwave.c:236:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 236:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1268              		.loc 1 236 37 view .LVU343
 1269 05ac 023CA0E3 		mov	r3, #512	@ tmp181,
 1270              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1271              		.loc 1 237 95 view .LVU344
 1272 05b0 8771A0E1 		lsl	r7, r7, #3	@ tmp186, tmp185,
 1273              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 241:armwave.c     **** 
 242:armwave.c     ****     // Calculate compound scaler
 243:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 244:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1274              		.loc 1 244 40 view .LVU345
 1275 05b4 0510A0E1 		mov	r1, r5	@, _13
 1276              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1277              		.loc 1 230 49 view .LVU346
 1278 05b8 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp170, tmp171
 1279              	@ armwave.c:235:     g_armwave_state.size = target_height * target_width;
 235:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1280              		.loc 1 235 26 view .LVU347
 1281 05bc 542084E5 		str	r2, [r4, #84]	@ tmp179, g_armwave_state.size
 1282              	@ armwave.c:236:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 236:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1283              		.loc 1 236 37 view .LVU348
 1284 05c0 403084E5 		str	r3, [r4, #64]	@ tmp181, g_armwave_state.bitdepth_height
 1285              	@ armwave.c:229:     g_armwave_state.xstride = target_height;
 229:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1286              		.loc 1 229 29 view .LVU349
 1287 05c4 2C8084E5 		str	r8, [r4, #44]	@ target_height, g_armwave_state.xstride
 230:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1288              		.loc 1 230 5 is_stmt 1 view .LVU350
 1289              	@ armwave.c:232:     g_armwave_state.wave_stride = wave_stride;
 232:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1290              		.loc 1 232 33 is_stmt 0 view .LVU351
 1291 05c8 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1292              	@ armwave.c:233:     g_armwave_state.waves_max = waves_max;
 233:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1293              		.loc 1 233 31 view .LVU352
 1294 05cc 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1295              	@ armwave.c:234:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 234:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1296              		.loc 1 234 27 view .LVU353
 1297 05d0 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 1298              	@ armwave.c:238:     g_armwave_state.target_width = target_width;
 238:armwave.c     ****     g_armwave_state.target_height = target_height;
 1299              		.loc 1 238 34 view .LVU354
 1300 05d4 586084E5 		str	r6, [r4, #88]	@ target_width, g_armwave_state.target_width
 1301              	@ armwave.c:239:     g_armwave_state.target_height = target_height;
 239:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1302              		.loc 1 239 35 view .LVU355
 1303 05d8 5C8084E5 		str	r8, [r4, #92]	@ target_height, g_armwave_state.target_height
 1304              	@ armwave.c:240:     g_armwave_state.wave_length = end_point - start_point;
 240:armwave.c     **** 
 1305              		.loc 1 240 33 view .LVU356
 1306 05dc 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1307              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1308              		.loc 1 244 40 view .LVU357
 1309 05e0 0600A0E1 		mov	r0, r6	@, target_width
 1310              	@ armwave.c:237:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1311              		.loc 1 237 34 view .LVU358
 1312 05e4 507084E5 		str	r7, [r4, #80]	@ tmp186, g_armwave_state.ch_buff_size
 1313              	@ armwave.c:231:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 231:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1314              		.loc 1 231 30 view .LVU359
 1315 05e8 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp174, _3
 1316              	@ armwave.c:230:     g_armwave_state.vscale_frac = target_height / 255.0f;
 230:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1317              		.loc 1 230 33 view .LVU360
 1318 05ec 0A7AC4ED 		vstr.32	s15, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 231:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1319              		.loc 1 231 5 is_stmt 1 view .LVU361
 1320              	@ armwave.c:231:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 231:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1321              		.loc 1 231 30 is_stmt 0 view .LVU362
 1322 05f0 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp174, g_armwave_state.vscale
 232:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1323              		.loc 1 232 5 is_stmt 1 view .LVU363
 233:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1324              		.loc 1 233 5 view .LVU364
 234:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1325              		.loc 1 234 5 view .LVU365
 235:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1326              		.loc 1 235 5 view .LVU366
 236:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1327              		.loc 1 236 5 view .LVU367
 237:armwave.c     ****     g_armwave_state.target_width = target_width;
 1328              		.loc 1 237 5 view .LVU368
 238:armwave.c     ****     g_armwave_state.target_height = target_height;
 1329              		.loc 1 238 5 view .LVU369
 239:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1330              		.loc 1 239 5 view .LVU370
 240:armwave.c     **** 
 1331              		.loc 1 240 5 view .LVU371
 243:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1332              		.loc 1 243 5 view .LVU372
 1333              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1334              		.loc 1 244 40 is_stmt 0 view .LVU373
 1335 05f4 FEFFFFEB 		bl	__aeabi_idiv		@
 1336              	.LVL77:
 1337              	@ armwave.c:246:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 245:armwave.c     **** 
 246:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1338              		.loc 1 246 5 view .LVU374
 1339 05f8 0138A0E3 		mov	r3, #65536	@ tmp197,
 1340 05fc 08308DE5 		str	r3, [sp, #8]	@ tmp197,
 1341 0600 0710A0E1 		mov	r1, r7	@, tmp186
 1342 0604 04508DE5 		str	r5, [sp, #4]	@ _13,
 1343 0608 00608DE5 		str	r6, [sp]	@ target_width,
 1344              	@ armwave.c:244:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 244:armwave.c     **** 
 1345              		.loc 1 244 72 view .LVU375
 1346 060c 00C8A0E1 		lsl	ip, r0, #16	@ _17,,
 1347              	@ armwave.c:246:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1348              		.loc 1 246 5 view .LVU376
 1349 0610 0C30A0E1 		mov	r3, ip	@, _17
 1350 0614 0C20A0E1 		mov	r2, ip	@, tmp3
 1351 0618 38019FE5 		ldr	r0, .L77+16	@,
 1352              	@ armwave.c:243:     g_armwave_state.cmp_x_bitdepth_scale = \
 243:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1353              		.loc 1 243 42 view .LVU377
 1354 061c 24C084E5 		str	ip, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1355              		.loc 1 246 5 is_stmt 1 view .LVU378
 1356 0620 FEFFFFEB 		bl	printf		@
 1357              	.LVL78:
 247:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 248:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 249:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 250:armwave.c     **** 
 251:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 252:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 253:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 254:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1358              		.loc 1 254 5 view .LVU379
 1359              	@ armwave.c:256:     if(g_armwave_state.ch1_buffer != NULL)
 255:armwave.c     **** 
 256:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1360              		.loc 1 256 23 is_stmt 0 view .LVU380
 1361 0624 040094E5 		ldr	r0, [r4, #4]	@ _18, g_armwave_state.ch1_buffer
 1362              	@ armwave.c:254:     g_armwave_state.slice_height = 64; // 64;  
 254:armwave.c     **** 
 1363              		.loc 1 254 34 view .LVU381
 1364 0628 4030A0E3 		mov	r3, #64	@ tmp199,
 1365              	@ armwave.c:256:     if(g_armwave_state.ch1_buffer != NULL)
 1366              		.loc 1 256 7 view .LVU382
 1367 062c 000050E3 		cmp	r0, #0	@ _18,
 1368              	@ armwave.c:254:     g_armwave_state.slice_height = 64; // 64;  
 254:armwave.c     **** 
 1369              		.loc 1 254 34 view .LVU383
 1370 0630 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1371              		.loc 1 256 5 is_stmt 1 view .LVU384
 1372              	@ armwave.c:256:     if(g_armwave_state.ch1_buffer != NULL)
 1373              		.loc 1 256 7 is_stmt 0 view .LVU385
 1374 0634 0000000A 		beq	.L65		@,
 257:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1375              		.loc 1 257 9 is_stmt 1 view .LVU386
 1376 0638 FEFFFFEB 		bl	free		@
 1377              	.LVL79:
 1378              	.L65:
 258:armwave.c     **** 
 259:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1379              		.loc 1 259 5 view .LVU387
 1380              	@ armwave.c:259:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1381              		.loc 1 259 34 is_stmt 0 view .LVU388
 1382 063c 0110A0E3 		mov	r1, #1	@,
 1383 0640 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1384 0644 FEFFFFEB 		bl	calloc		@
 1385              	.LVL80:
 1386              	@ armwave.c:261:     assert(g_armwave_state.ch1_buffer != NULL);
 260:armwave.c     **** 
 261:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1387              		.loc 1 261 5 view .LVU389
 1388 0648 000050E3 		cmp	r0, #0	@ _21,
 1389              	@ armwave.c:259:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 259:armwave.c     **** 
 1390              		.loc 1 259 34 view .LVU390
 1391 064c 0070A0E1 		mov	r7, r0	@ _21,
 1392              	@ armwave.c:259:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 259:armwave.c     **** 
 1393              		.loc 1 259 32 view .LVU391
 1394 0650 040084E5 		str	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1395              		.loc 1 261 5 is_stmt 1 view .LVU392
 1396 0654 3600000A 		beq	.L75		@,
 262:armwave.c     **** 
 263:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 264:armwave.c     ****     length = end_point - start_point;
 1397              		.loc 1 264 5 view .LVU393
 1398              	.LVL81:
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1399              		.loc 1 265 5 view .LVU394
 1400              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 1401              		.loc 1 265 34 is_stmt 0 view .LVU395
 1402 0658 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1403              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 1404              		.loc 1 265 22 view .LVU396
 1405 065c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1406              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1407              		.loc 1 266 60 view .LVU397
 1408 0660 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp243, g_armwave_state.slice_height
 1409              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1410              		.loc 1 267 40 view .LVU398
 1411 0664 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1412              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1413              		.loc 1 265 34 view .LVU399
 1414 0668 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp210, target_width
 1415              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1416              		.loc 1 265 22 view .LVU400
 1417 066c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp209, _13
 1418              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1419              		.loc 1 266 60 view .LVU401
 1420 0670 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp213, tmp243
 1421              	@ armwave.c:265:     points_per_pixel = length / ((float)(target_width));
 265:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1422              		.loc 1 265 22 view .LVU402
 1423 0674 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp209, tmp210
 1424              	.LVL82:
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1425              		.loc 1 266 5 is_stmt 1 view .LVU403
 1426              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1427              		.loc 1 266 60 is_stmt 0 view .LVU404
 1428 0678 087A67EE 		vmul.f32	s15, s14, s16	@ tmp215, tmp213, points_per_pixel
 1429              	@ armwave.c:266:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 266:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1430              		.loc 1 266 41 view .LVU405
 1431 067c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp216, tmp215
 1432 0680 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp216, g_armwave_state.slice_record_height
 1433              		.loc 1 267 5 is_stmt 1 view .LVU406
 1434              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1435              		.loc 1 267 40 is_stmt 0 view .LVU407
 1436 0684 FEFFFFEB 		bl	malloc		@
 1437              	.LVL83:
 1438              	@ armwave.c:269:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 268:armwave.c     **** 
 269:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1439              		.loc 1 269 5 view .LVU408
 1440 0688 000050E3 		cmp	r0, #0	@ _29,
 1441              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1442              		.loc 1 267 40 view .LVU409
 1443 068c 0060A0E1 		mov	r6, r0	@ _29,
 1444              	@ armwave.c:267:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1445              		.loc 1 267 38 view .LVU410
 1446 0690 840084E5 		str	r0, [r4, #132]	@ _29, g_armwave_state.xcoord_to_xpixel
 1447              		.loc 1 269 5 is_stmt 1 view .LVU411
 1448 0694 2100000A 		beq	.L76		@,
 1449              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 270:armwave.c     **** 
 271:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 272:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1450              		.loc 1 272 54 is_stmt 0 view .LVU412
 1451 0698 2B7ADFED 		vldr.32	s15, .L77+4	@ tmp224,
 1452 069c 020040E2 		sub	r0, r0, #2	@ ivtmp.89, _29,
 1453              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1454              		.loc 1 271 12 view .LVU413
 1455 06a0 0030A0E3 		mov	r3, #0	@ xx,
 1456              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1457              		.loc 1 272 54 view .LVU414
 1458 06a4 887A87EE 		vdiv.f32	s14, s15, s16	@ _30, tmp224, points_per_pixel
 1459              	.L68:
 1460              	.LVL84:
 1461              		.loc 1 272 9 is_stmt 1 discriminator 3 view .LVU415
 1462              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1463              		.loc 1 272 74 is_stmt 0 discriminator 3 view .LVU416
 1464 06a8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1465              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1466              		.loc 1 271 32 discriminator 3 view .LVU417
 1467 06ac 013083E2 		add	r3, r3, #1	@ xx, xx,
 1468              	.LVL85:
 1469              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1470              		.loc 1 271 5 discriminator 3 view .LVU418
 1471 06b0 030055E1 		cmp	r5, r3	@ _13, xx
 1472              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1473              		.loc 1 272 74 discriminator 3 view .LVU419
 1474 06b4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, xx
 1475 06b8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, _30
 1476              	@ armwave.c:272:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1477              		.loc 1 272 46 discriminator 3 view .LVU420
 1478 06bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp227, tmp226
 1479 06c0 902A17EE 		vmov	r2, s15	@ int	@ tmp227, tmp227
 1480 06c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp227, MEM[base: _99, offset: 0B]
 1481              	@ armwave.c:271:     for(xx = 0; xx < length; xx++) {
 271:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1482              		.loc 1 271 5 discriminator 3 view .LVU421
 1483 06c8 F6FFFF1A 		bne	.L68		@,
 273:armwave.c     **** 
 274:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 275:armwave.c     ****     }
 276:armwave.c     **** 
 277:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1484              		.loc 1 277 5 is_stmt 1 view .LVU422
 1485              	@ armwave.c:277:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1486              		.loc 1 277 34 is_stmt 0 view .LVU423
 1487 06cc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1488 06d0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1489 06d4 FEFFFFEB 		bl	malloc		@
 1490              	.LVL86:
 1491              	@ armwave.c:279:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 278:armwave.c     **** 
 279:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1492              		.loc 1 279 5 view .LVU424
 1493 06d8 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1494 06dc 0620A0E1 		mov	r2, r6	@, _29
 1495 06e0 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1496 06e4 0710A0E1 		mov	r1, r7	@, _21
 1497              	@ armwave.c:277:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 277:armwave.c     **** 
 1498              		.loc 1 277 34 view .LVU425
 1499 06e8 00C0A0E1 		mov	ip, r0	@ tmp231,
 1500              	@ armwave.c:279:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1501              		.loc 1 279 5 view .LVU426
 1502 06ec 0030A0E1 		mov	r3, r0	@, tmp231
 1503 06f0 64009FE5 		ldr	r0, .L77+20	@,
 1504              	@ armwave.c:277:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 277:armwave.c     **** 
 1505              		.loc 1 277 32 view .LVU427
 1506 06f4 68C084E5 		str	ip, [r4, #104]	@ tmp231, g_armwave_state.out_pixbuf
 1507              		.loc 1 279 5 is_stmt 1 view .LVU428
 1508 06f8 FEFFFFEB 		bl	printf		@
 1509              	.LVL87:
 280:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 281:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 282:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 283:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 284:armwave.c     **** 
 285:armwave.c     ****     malloc_stats();
 1510              		.loc 1 285 5 view .LVU429
 1511              	@ armwave.c:286: }
 286:armwave.c     **** }
 1512              		.loc 1 286 1 is_stmt 0 view .LVU430
 1513 06fc 10D08DE2 		add	sp, sp, #16	@,,
 1514              		.cfi_remember_state
 1515              		.cfi_def_cfa_offset 40
 1516              		@ sp needed	@
 1517 0700 028BBDEC 		vldm	sp!, {d8}	@
 1518              		.cfi_restore 80
 1519              		.cfi_restore 81
 1520              		.cfi_def_cfa_offset 32
 1521              	.LVL88:
 1522              		.loc 1 286 1 view .LVU431
 1523 0704 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1524              		.cfi_restore 14
 1525              		.cfi_restore 10
 1526              		.cfi_restore 9
 1527              		.cfi_restore 8
 1528              		.cfi_restore 7
 1529              		.cfi_restore 6
 1530              		.cfi_restore 5
 1531              		.cfi_restore 4
 1532              		.cfi_def_cfa_offset 0
 1533              	.LVL89:
 1534              	@ armwave.c:285:     malloc_stats();
 285:armwave.c     **** }
 1535              		.loc 1 285 5 view .LVU432
 1536 0708 FEFFFFEA 		b	malloc_stats		@
 1537              	.LVL90:
 1538              	.L74:
 1539              		.cfi_restore_state
 208:armwave.c     **** 
 1540              		.loc 1 208 5 is_stmt 1 discriminator 1 view .LVU433
 1541 070c 4C309FE5 		ldr	r3, .L77+24	@,
 1542 0710 D020A0E3 		mov	r2, #208	@,
 1543 0714 48109FE5 		ldr	r1, .L77+28	@,
 1544 0718 48009FE5 		ldr	r0, .L77+32	@,
 1545 071c FEFFFFEB 		bl	__assert_fail		@
 1546              	.LVL91:
 1547              	.L76:
 269:armwave.c     **** 
 1548              		.loc 1 269 5 discriminator 1 view .LVU434
 1549 0720 38309FE5 		ldr	r3, .L77+24	@,
 1550 0724 40209FE5 		ldr	r2, .L77+36	@,
 1551 0728 34109FE5 		ldr	r1, .L77+28	@,
 1552 072c 3C009FE5 		ldr	r0, .L77+40	@,
 1553 0730 FEFFFFEB 		bl	__assert_fail		@
 1554              	.LVL92:
 1555              	.L75:
 261:armwave.c     **** 
 1556              		.loc 1 261 5 discriminator 1 view .LVU435
 1557 0734 24309FE5 		ldr	r3, .L77+24	@,
 1558 0738 34209FE5 		ldr	r2, .L77+44	@,
 1559 073c 20109FE5 		ldr	r1, .L77+28	@,
 1560 0740 30009FE5 		ldr	r0, .L77+48	@,
 1561 0744 FEFFFFEB 		bl	__assert_fail		@
 1562              	.LVL93:
 1563              	.L78:
 1564              		.align	2
 1565              	.L77:
 1566 0748 00007F43 		.word	1132396544
 1567 074c 0000803F 		.word	1065353216
 1568 0750 20000000 		.word	.LC2
 1569 0754 00000000 		.word	g_armwave_state
 1570 0758 70000000 		.word	.LC5
 1571 075c 20010000 		.word	.LC8
 1572 0760 00000000 		.word	.LANCHOR0
 1573 0764 4C000000 		.word	.LC3
 1574 0768 58000000 		.word	.LC4
 1575 076c 0D010000 		.word	269
 1576 0770 F4000000 		.word	.LC7
 1577 0774 05010000 		.word	261
 1578 0778 D0000000 		.word	.LC6
 1579              		.cfi_endproc
 1580              	.LFE62:
 1582              		.align	2
 1583              		.global	armwave_set_wave_pointer
 1584              		.syntax unified
 1585              		.arm
 1586              		.fpu vfp
 1588              	armwave_set_wave_pointer:
 1589              	.LVL94:
 1590              	.LFB63:
 287:armwave.c     **** 
 288:armwave.c     **** /*
 289:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 290:armwave.c     ****  * in the future.
 291:armwave.c     ****  */
 292:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 293:armwave.c     **** {
 1591              		.loc 1 293 1 view -0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1595              		.loc 1 294 5 view .LVU437
 1596 077c 000050E3 		cmp	r0, #0	@ wave_buffer
 1597              		.loc 1 294 5 is_stmt 0 view .LVU438
 1598 0780 0200000A 		beq	.L84		@,
 295:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1599              		.loc 1 295 5 is_stmt 1 view .LVU439
 1600              	@ armwave.c:295:     g_armwave_state.wave_buffer = wave_buffer;
 1601              		.loc 1 295 33 is_stmt 0 view .LVU440
 1602 0784 1C309FE5 		ldr	r3, .L85	@ tmp116,
 1603 0788 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1604 078c 1EFF2FE1 		bx	lr	@
 1605              	.L84:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1606              		.loc 1 294 5 is_stmt 1 discriminator 1 view .LVU441
 1607              	@ armwave.c:293: {
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1608              		.loc 1 293 1 is_stmt 0 discriminator 1 view .LVU442
 1609 0790 10402DE9 		push	{r4, lr}	@
 1610              		.cfi_def_cfa_offset 8
 1611              		.cfi_offset 4, -8
 1612              		.cfi_offset 14, -4
 1613              	@ armwave.c:294:     assert(wave_buffer != NULL);
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1614              		.loc 1 294 5 discriminator 1 view .LVU443
 1615 0794 10309FE5 		ldr	r3, .L85+4	@,
 1616 0798 10209FE5 		ldr	r2, .L85+8	@,
 1617 079c 10109FE5 		ldr	r1, .L85+12	@,
 1618 07a0 10009FE5 		ldr	r0, .L85+16	@,
 1619              	.LVL95:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1620              		.loc 1 294 5 discriminator 1 view .LVU444
 1621 07a4 FEFFFFEB 		bl	__assert_fail		@
 1622              	.LVL96:
 1623              	.L86:
 1624              		.align	2
 1625              	.L85:
 1626 07a8 00000000 		.word	g_armwave_state
 1627 07ac 18000000 		.word	.LANCHOR0+24
 1628 07b0 26010000 		.word	294
 1629 07b4 4C000000 		.word	.LC3
 1630 07b8 44010000 		.word	.LC9
 1631              		.cfi_endproc
 1632              	.LFE63:
 1634              		.align	2
 1635              		.global	armwave_set_wave_pointer_as_testbuf
 1636              		.syntax unified
 1637              		.arm
 1638              		.fpu vfp
 1640              	armwave_set_wave_pointer_as_testbuf:
 1641              	.LVL97:
 1642              	.LFB64:
 296:armwave.c     **** }
 297:armwave.c     **** 
 298:armwave.c     **** /*
 299:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 300:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 301:armwave.c     ****  */
 302:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 303:armwave.c     **** {
 1643              		.loc 1 303 1 is_stmt 1 view -0
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 0
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 1647              		@ link register save eliminated.
 304:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1648              		.loc 1 304 5 view .LVU446
 1649              	@ armwave.c:304:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1650              		.loc 1 304 29 is_stmt 0 view .LVU447
 1651 07bc 24309FE5 		ldr	r3, .L90	@ tmp117,
 1652              	@ armwave.c:304:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1653              		.loc 1 304 7 view .LVU448
 1654 07c0 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1655 07c4 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1656 07c8 0400003A 		bcc	.L89		@,
 305:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 306:armwave.c     ****         return;
 307:armwave.c     ****     }
 308:armwave.c     **** 
 309:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1657              		.loc 1 309 5 is_stmt 1 view .LVU449
 1658              	@ armwave.c:309:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1659              		.loc 1 309 111 is_stmt 0 view .LVU450
 1660 07cc 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1661              	@ armwave.c:309:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1662              		.loc 1 309 68 view .LVU451
 1663 07d0 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1664 07d4 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1665              	.LVL98:
 1666              	@ armwave.c:309:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1667              		.loc 1 309 33 view .LVU452
 1668 07d8 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1669              	@ armwave.c:310: }
 310:armwave.c     **** }
 1670              		.loc 1 310 1 view .LVU453
 1671 07dc 1EFF2FE1 		bx	lr	@
 1672              	.LVL99:
 1673              	.L89:
 305:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1674              		.loc 1 305 9 is_stmt 1 view .LVU454
 1675 07e0 04009FE5 		ldr	r0, .L90+4	@,
 1676              	.LVL100:
 305:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1677              		.loc 1 305 9 is_stmt 0 view .LVU455
 1678 07e4 FEFFFFEA 		b	puts		@
 1679              	.LVL101:
 1680              	.L91:
 1681              		.align	2
 1682              	.L90:
 1683 07e8 00000000 		.word	g_armwave_state
 1684 07ec 58010000 		.word	.LC10
 1685              		.cfi_endproc
 1686              	.LFE64:
 1688              		.align	2
 1689              		.global	armwave_set_wave_pointer_u32
 1690              		.syntax unified
 1691              		.arm
 1692              		.fpu vfp
 1694              	armwave_set_wave_pointer_u32:
 1695              	.LVL102:
 1696              	.LFB65:
 311:armwave.c     **** 
 312:armwave.c     **** /*
 313:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 314:armwave.c     ****  * disjointed buffers in the future.
 315:armwave.c     ****  */
 316:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 317:armwave.c     **** {
 1697              		.loc 1 317 1 is_stmt 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1701              		.loc 1 318 5 view .LVU457
 1702 07f0 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1703              		.loc 1 318 5 is_stmt 0 view .LVU458
 1704 07f4 0200000A 		beq	.L97		@,
 319:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1705              		.loc 1 319 5 is_stmt 1 view .LVU459
 1706              	@ armwave.c:319:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1707              		.loc 1 319 33 is_stmt 0 view .LVU460
 1708 07f8 1C309FE5 		ldr	r3, .L98	@ tmp117,
 1709 07fc 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1710 0800 1EFF2FE1 		bx	lr	@
 1711              	.L97:
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1712              		.loc 1 318 5 is_stmt 1 discriminator 1 view .LVU461
 1713              	@ armwave.c:317: {
 317:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1714              		.loc 1 317 1 is_stmt 0 discriminator 1 view .LVU462
 1715 0804 10402DE9 		push	{r4, lr}	@
 1716              		.cfi_def_cfa_offset 8
 1717              		.cfi_offset 4, -8
 1718              		.cfi_offset 14, -4
 1719              	@ armwave.c:318:     assert(wave_buffer_ptr != 0);
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1720              		.loc 1 318 5 discriminator 1 view .LVU463
 1721 0808 10309FE5 		ldr	r3, .L98+4	@,
 1722 080c 10209FE5 		ldr	r2, .L98+8	@,
 1723 0810 10109FE5 		ldr	r1, .L98+12	@,
 1724 0814 10009FE5 		ldr	r0, .L98+16	@,
 1725              	.LVL103:
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1726              		.loc 1 318 5 discriminator 1 view .LVU464
 1727 0818 FEFFFFEB 		bl	__assert_fail		@
 1728              	.LVL104:
 1729              	.L99:
 1730              		.align	2
 1731              	.L98:
 1732 081c 00000000 		.word	g_armwave_state
 1733 0820 34000000 		.word	.LANCHOR0+52
 1734 0824 3E010000 		.word	318
 1735 0828 4C000000 		.word	.LC3
 1736 082c 94010000 		.word	.LC11
 1737              		.cfi_endproc
 1738              	.LFE65:
 1740              		.align	2
 1741              		.global	armwave_clear_buffer
 1742              		.syntax unified
 1743              		.arm
 1744              		.fpu vfp
 1746              	armwave_clear_buffer:
 1747              	.LVL105:
 1748              	.LFB66:
 320:armwave.c     **** }
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 326:armwave.c     **** {
 1749              		.loc 1 326 1 is_stmt 1 view -0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
 327:armwave.c     ****     // Flags ignored, only one buffer cleared
 328:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1754              		.loc 1 328 5 view .LVU466
 1755              	@ armwave.c:328:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1756              		.loc 1 328 58 is_stmt 0 view .LVU467
 1757 0830 0C309FE5 		ldr	r3, .L101	@ tmp114,
 1758              	@ armwave.c:328:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1759              		.loc 1 328 5 view .LVU468
 1760 0834 0010A0E3 		mov	r1, #0	@,
 1761 0838 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1762 083c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1763              	.LVL106:
 1764              		.loc 1 328 5 view .LVU469
 1765 0840 FEFFFFEA 		b	memset		@
 1766              	.LVL107:
 1767              	.L102:
 1768              		.align	2
 1769              	.L101:
 1770 0844 00000000 		.word	g_armwave_state
 1771              		.cfi_endproc
 1772              	.LFE66:
 1774              		.align	2
 1775              		.global	armwave_set_channel_colour
 1776              		.syntax unified
 1777              		.arm
 1778              		.fpu vfp
 1780              	armwave_set_channel_colour:
 1781              	.LVL108:
 1782              	.LFB67:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 333:armwave.c     ****  */
 334:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 335:armwave.c     **** {
 1783              		.loc 1 335 1 is_stmt 1 view -0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 0
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 336:armwave.c     ****     // Only 1ch supported for now
 337:armwave.c     ****     switch(ch) {
 1788              		.loc 1 337 5 view .LVU471
 1789 0848 010050E3 		cmp	r0, #1	@ ch,
 338:armwave.c     ****         case 1:
 339:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1790              		.loc 1 339 13 view .LVU472
 1791              	@ armwave.c:339:             g_armwave_state.ch1_color.r = r;
 1792              		.loc 1 339 41 is_stmt 0 view .LVU473
 1793 084c 0C009F05 		ldreq	r0, .L105	@ tmp117,
 1794              	.LVL109:
 1795              		.loc 1 339 41 view .LVU474
 1796 0850 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 340:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1797              		.loc 1 340 13 is_stmt 1 view .LVU475
 1798              	@ armwave.c:340:             g_armwave_state.ch1_color.g = g;
 1799              		.loc 1 340 41 is_stmt 0 view .LVU476
 1800 0854 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 341:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1801              		.loc 1 341 13 is_stmt 1 view .LVU477
 1802              	@ armwave.c:341:             g_armwave_state.ch1_color.b = b;
 1803              		.loc 1 341 41 is_stmt 0 view .LVU478
 1804 0858 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 342:armwave.c     ****             break;
 1805              		.loc 1 342 13 is_stmt 1 view .LVU479
 1806              	@ armwave.c:344: }
 343:armwave.c     ****     }
 344:armwave.c     **** }
 1807              		.loc 1 344 1 is_stmt 0 view .LVU480
 1808 085c 1EFF2FE1 		bx	lr	@
 1809              	.L106:
 1810              		.align	2
 1811              	.L105:
 1812 0860 00000000 		.word	g_armwave_state
 1813              		.cfi_endproc
 1814              	.LFE67:
 1816              		.align	2
 1817              		.global	armwave_dump_ppm_debug
 1818              		.syntax unified
 1819              		.arm
 1820              		.fpu vfp
 1822              	armwave_dump_ppm_debug:
 1823              	.LVL110:
 1824              	.LFB68:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Dump a ppm of a buffer to a file.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 350:armwave.c     **** {
 1825              		.loc 1 350 1 is_stmt 1 view -0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1829              		.loc 1 351 5 view .LVU482
 1830              	@ armwave.c:350: {
 350:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1831              		.loc 1 350 1 is_stmt 0 view .LVU483
 1832 0864 0130A0E1 		mov	r3, r1	@ fn, fn
 1833 0868 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1834              		.cfi_def_cfa_offset 28
 1835              		.cfi_offset 4, -28
 1836              		.cfi_offset 5, -24
 1837              		.cfi_offset 6, -20
 1838              		.cfi_offset 7, -16
 1839              		.cfi_offset 8, -12
 1840              		.cfi_offset 9, -8
 1841              		.cfi_offset 14, -4
 1842 086c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1843 0870 0CD04DE2 		sub	sp, sp, #12	@,,
 1844              		.cfi_def_cfa_offset 40
 1845              	@ armwave.c:351:     FILE *fp = fopen(fn, "wb");
 1846              		.loc 1 351 16 view .LVU484
 1847 0874 C4109FE5 		ldr	r1, .L115	@,
 1848              	.LVL111:
 1849              		.loc 1 351 16 view .LVU485
 1850 0878 0300A0E1 		mov	r0, r3	@, fn
 1851              	.LVL112:
 1852              		.loc 1 351 16 view .LVU486
 1853 087c FEFFFFEB 		bl	fopen64		@
 1854              	.LVL113:
 1855              	@ armwave.c:358:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 352:armwave.c     ****     uint32_t data;
 353:armwave.c     ****     int xx, yy;
 354:armwave.c     **** 
 355:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 356:armwave.c     **** 
 357:armwave.c     ****     fputs("P3\n", fp);
 358:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1856              		.loc 1 358 5 view .LVU487
 1857 0880 BC609FE5 		ldr	r6, .L115+4	@ tmp150,
 1858              	@ armwave.c:357:     fputs("P3\n", fp);
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1859              		.loc 1 357 5 view .LVU488
 1860 0884 0320A0E3 		mov	r2, #3	@,
 1861 0888 0110A0E3 		mov	r1, #1	@,
 1862              	@ armwave.c:351:     FILE *fp = fopen(fn, "wb");
 351:armwave.c     ****     uint32_t data;
 1863              		.loc 1 351 16 view .LVU489
 1864 088c 0070A0E1 		mov	r7, r0	@ fp,
 1865              	.LVL114:
 352:armwave.c     ****     uint32_t data;
 1866              		.loc 1 352 5 is_stmt 1 view .LVU490
 353:armwave.c     **** 
 1867              		.loc 1 353 5 view .LVU491
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1868              		.loc 1 357 5 view .LVU492
 1869 0890 0030A0E1 		mov	r3, r0	@, fp
 1870 0894 AC009FE5 		ldr	r0, .L115+8	@,
 1871              	.LVL115:
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1872              		.loc 1 357 5 is_stmt 0 view .LVU493
 1873 0898 FEFFFFEB 		bl	fwrite		@
 1874              	.LVL116:
 1875              		.loc 1 358 5 is_stmt 1 view .LVU494
 1876 089c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1877 08a0 A4109FE5 		ldr	r1, .L115+12	@,
 1878 08a4 0700A0E1 		mov	r0, r7	@, fp
 1879 08a8 FEFFFFEB 		bl	fprintf		@
 1880              	.LVL117:
 359:armwave.c     ****     fputs("255\n", fp);
 1881              		.loc 1 359 5 view .LVU495
 1882 08ac 0420A0E3 		mov	r2, #4	@,
 1883 08b0 0730A0E1 		mov	r3, r7	@, fp
 1884 08b4 0110A0E3 		mov	r1, #1	@,
 1885 08b8 90009FE5 		ldr	r0, .L115+16	@,
 1886 08bc FEFFFFEB 		bl	fwrite		@
 1887              	.LVL118:
 360:armwave.c     **** 
 361:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1888              		.loc 1 361 5 view .LVU496
 1889              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1890              		.loc 1 361 37 is_stmt 0 view .LVU497
 1891 08c0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1892              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1893              		.loc 1 361 5 view .LVU498
 1894 08c4 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1895 08c8 180000DA 		ble	.L108		@,
 1896 08cc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1897              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 364:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 365:armwave.c     **** 
 366:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1898              		.loc 1 366 13 view .LVU499
 1899 08d0 7C909FE5 		ldr	r9, .L115+20	@ tmp152,
 1900              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1901              		.loc 1 361 12 view .LVU500
 1902 08d4 0050A0E3 		mov	r5, #0	@ yy,
 1903              	.LVL119:
 1904              	.L109:
 1905              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1906              		.loc 1 362 9 view .LVU501
 1907 08d8 000053E3 		cmp	r3, #0	@ _13,
 1908              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1909              		.loc 1 362 16 view .LVU502
 1910 08dc 0040A0C3 		movgt	r4, #0	@ xx,
 1911              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1912              		.loc 1 362 9 view .LVU503
 1913 08e0 0F0000DA 		ble	.L111		@,
 1914              	.LVL120:
 1915              	.L110:
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1916              		.loc 1 363 13 is_stmt 1 discriminator 3 view .LVU504
 1917              	@ armwave.c:363:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1918              		.loc 1 363 29 is_stmt 0 discriminator 3 view .LVU505
 1919 08e4 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1920              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1921              		.loc 1 366 13 discriminator 3 view .LVU506
 1922 08e8 0910A0E1 		mov	r1, r9	@, tmp152
 1923 08ec 0700A0E1 		mov	r0, r7	@, fp
 1924              	@ armwave.c:363:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1925              		.loc 1 363 18 discriminator 3 view .LVU507
 1926 08f0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1927              	.LVL121:
 1928              		.loc 1 366 13 is_stmt 1 discriminator 3 view .LVU508
 1929              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1930              		.loc 1 362 58 is_stmt 0 discriminator 3 view .LVU509
 1931 08f4 014084E2 		add	r4, r4, #1	@ xx, xx,
 1932              	.LVL122:
 1933              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1934              		.loc 1 366 81 discriminator 3 view .LVU510
 1935 08f8 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1936              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1937              		.loc 1 366 61 discriminator 3 view .LVU511
 1938 08fc 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1939              	@ armwave.c:366:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1940              		.loc 1 366 13 discriminator 3 view .LVU512
 1941 0900 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1942 0904 7330EFE6 		uxtb	r3, r3	@, tmp142
 1943 0908 00C08DE5 		str	ip, [sp]	@ tmp147,
 1944 090c 7220EFE6 		uxtb	r2, r2	@, data
 1945              	.LVL123:
 1946              		.loc 1 366 13 discriminator 3 view .LVU513
 1947 0910 FEFFFFEB 		bl	fprintf		@
 1948              	.LVL124:
 1949              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1950              		.loc 1 362 41 discriminator 3 view .LVU514
 1951 0914 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1952              	@ armwave.c:362:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1953              		.loc 1 362 9 discriminator 3 view .LVU515
 1954 0918 040053E1 		cmp	r3, r4	@ _13, xx
 1955 091c F0FFFFCA 		bgt	.L110		@,
 1956 0920 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1957              	.LVL125:
 1958              	.L111:
 1959              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1960              		.loc 1 361 55 discriminator 2 view .LVU516
 1961 0924 015085E2 		add	r5, r5, #1	@ yy, yy,
 1962              	.LVL126:
 1963              	@ armwave.c:361:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1964              		.loc 1 361 5 discriminator 2 view .LVU517
 1965 0928 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1966 092c E9FFFFBA 		blt	.L109		@,
 1967              	.LVL127:
 1968              	.L108:
 367:armwave.c     ****         }
 368:armwave.c     ****     }
 369:armwave.c     **** 
 370:armwave.c     ****     fclose(fp);
 1969              		.loc 1 370 5 is_stmt 1 view .LVU518
 1970 0930 0700A0E1 		mov	r0, r7	@, fp
 1971              	@ armwave.c:371: }
 371:armwave.c     **** }
 1972              		.loc 1 371 1 is_stmt 0 view .LVU519
 1973 0934 0CD08DE2 		add	sp, sp, #12	@,,
 1974              		.cfi_def_cfa_offset 28
 1975              		@ sp needed	@
 1976 0938 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1977              		.cfi_restore 14
 1978              		.cfi_restore 9
 1979              		.cfi_restore 8
 1980              		.cfi_restore 7
 1981              		.cfi_restore 6
 1982              		.cfi_restore 5
 1983              		.cfi_restore 4
 1984              		.cfi_def_cfa_offset 0
 1985              	.LVL128:
 1986              	@ armwave.c:370:     fclose(fp);
 370:armwave.c     **** }
 1987              		.loc 1 370 5 view .LVU520
 1988 093c FEFFFFEA 		b	fclose		@
 1989              	.LVL129:
 1990              	.L116:
 370:armwave.c     **** }
 1991              		.loc 1 370 5 view .LVU521
 1992              		.align	2
 1993              	.L115:
 1994 0940 AC010000 		.word	.LC12
 1995 0944 00000000 		.word	g_armwave_state
 1996 0948 B0010000 		.word	.LC13
 1997 094c B4010000 		.word	.LC14
 1998 0950 BC010000 		.word	.LC15
 1999 0954 C4010000 		.word	.LC16
 2000              		.cfi_endproc
 2001              	.LFE68:
 2003              		.align	2
 2004              		.global	armwave_test_init
 2005              		.syntax unified
 2006              		.arm
 2007              		.fpu vfp
 2009              	armwave_test_init:
 2010              	.LVL130:
 2011              	.LFB69:
 372:armwave.c     **** 
 373:armwave.c     **** /*
 374:armwave.c     ****  * Initialise some test functionry.
 375:armwave.c     ****  */
 376:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 377:armwave.c     **** {
 2012              		.loc 1 377 1 is_stmt 1 view -0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 0, uses_anonymous_args = 0
 378:armwave.c     ****     test_create_gamma();
 2016              		.loc 1 378 5 view .LVU523
 2017              	.LBB18:
 2018              	.LBI18:
  34:armwave.c     **** {
 2019              		.loc 1 34 6 view .LVU524
  34:armwave.c     **** {
 2020              		.loc 1 34 6 is_stmt 0 view .LVU525
 2021              	.LBE18:
 2022              	@ armwave.c:377: {
 377:armwave.c     ****     test_create_gamma();
 2023              		.loc 1 377 1 view .LVU526
 2024 0958 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2025              		.cfi_def_cfa_offset 32
 2026              		.cfi_offset 4, -32
 2027              		.cfi_offset 5, -28
 2028              		.cfi_offset 6, -24
 2029              		.cfi_offset 7, -20
 2030              		.cfi_offset 8, -16
 2031              		.cfi_offset 9, -12
 2032              		.cfi_offset 10, -8
 2033              		.cfi_offset 14, -4
 2034 095c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2035              		.cfi_def_cfa_offset 56
 2036              		.cfi_offset 80, -56
 2037              		.cfi_offset 81, -52
 2038              		.cfi_offset 82, -48
 2039              		.cfi_offset 83, -44
 2040              		.cfi_offset 84, -40
 2041              		.cfi_offset 85, -36
 2042 0960 BC409FE5 		ldr	r4, .L121+20	@ ivtmp.103,
 2043              	.LBB21:
 2044              	.LBB19:
 2045              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2046              		.loc 1 40 32 view .LVU527
 2047 0964 2DAA9FED 		vldr.32	s20, .L121+16	@ tmp136,
 2048              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2049              		.loc 1 40 26 view .LVU528
 2050 0968 289B9FED 		vldr.64	d9, .L121	@ tmp151,
 2051              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2052              		.loc 1 40 49 view .LVU529
 2053 096c 298B9FED 		vldr.64	d8, .L121+8	@ tmp139,
 2054 0970 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.103,
 2055              	.LBE19:
 2056              	.LBE21:
 2057              	@ armwave.c:377: {
 377:armwave.c     ****     test_create_gamma();
 2058              		.loc 1 377 1 view .LVU530
 2059 0974 10D04DE2 		sub	sp, sp, #16	@,,
 2060              		.cfi_def_cfa_offset 72
 2061              	@ armwave.c:377: {
 377:armwave.c     ****     test_create_gamma();
 2062              		.loc 1 377 1 view .LVU531
 2063 0978 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2064 097c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2065 0980 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2066 0984 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2067 0988 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.103,
 2068 098c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2069              	.LVL131:
 2070              	.L118:
 2071              	.LBB22:
 2072              	.LBB20:
  40:armwave.c     ****     }
 2073              		.loc 1 40 9 is_stmt 1 view .LVU532
 2074              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2075              		.loc 1 40 32 is_stmt 0 view .LVU533
 2076 0990 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.103
 2077              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2078              		.loc 1 40 26 view .LVU534
 2079 0994 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2080              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2081              		.loc 1 40 32 view .LVU535
 2082 0998 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2083 099c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2084 09a0 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2085              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2086              		.loc 1 40 26 view .LVU536
 2087 09a4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2088 09a8 FEFFFFEB 		bl	pow		@
 2089              	.LVL132:
 2090              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2091              		.loc 1 40 49 view .LVU537
 2092 09ac 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2093              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2094              		.loc 1 40 24 view .LVU538
 2095 09b0 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2096 09b4 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2097 09b8 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2098              	.LVL133:
 2099              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2100              		.loc 1 39 5 view .LVU539
 2101 09bc 0A0054E1 		cmp	r4, r10	@ ivtmp.103, _39
 2102 09c0 F2FFFF1A 		bne	.L118		@,
 2103              	.LVL134:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2104              		.loc 1 39 5 view .LVU540
 2105              	.LBE20:
 2106              	.LBE22:
 379:armwave.c     **** 
 380:armwave.c     ****     // make ch1 yellowish by default
 381:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2107              		.loc 1 381 5 is_stmt 1 view .LVU541
 2108              	.LBB23:
 2109              	.LBI23:
 334:armwave.c     **** {
 2110              		.loc 1 334 6 view .LVU542
 2111              	.LBB24:
 337:armwave.c     ****         case 1:
 2112              		.loc 1 337 5 view .LVU543
 339:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2113              		.loc 1 339 13 view .LVU544
 340:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2114              		.loc 1 340 13 view .LVU545
 2115              	@ armwave.c:339:             g_armwave_state.ch1_color.r = r;
 339:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2116              		.loc 1 339 41 is_stmt 0 view .LVU546
 2117 09c4 5CC09FE5 		ldr	ip, .L121+24	@ tmp142,
 2118 09c8 5C409FE5 		ldr	r4, .L121+28	@ tmp143,
 2119              	.LBE24:
 2120              	.LBE23:
 2121              	@ armwave.c:383:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 382:armwave.c     **** 
 383:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2122              		.loc 1 383 5 view .LVU547
 2123 09cc 0000A0E3 		mov	r0, #0	@ tmp147,
 2124              	.LBB28:
 2125              	.LBB25:
 2126              	@ armwave.c:341:             g_armwave_state.ch1_color.b = b;
 341:armwave.c     ****             break;
 2127              		.loc 1 341 41 view .LVU548
 2128 09d0 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2129              	.LBE25:
 2130              	.LBE28:
 2131              	@ armwave.c:383:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2132              		.loc 1 383 5 view .LVU549
 2133 09d4 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2134 09d8 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2135 09dc 00808DE5 		str	r8, [sp]	@ render_width,
 2136 09e0 0610A0E1 		mov	r1, r6	@, tmp3
 2137 09e4 0720A0E1 		mov	r2, r7	@, nwaves
 2138              	.LBB29:
 2139              	.LBB26:
 2140              	@ armwave.c:339:             g_armwave_state.ch1_color.r = r;
 339:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2141              		.loc 1 339 41 view .LVU550
 2142 09e8 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 341:armwave.c     ****             break;
 2143              		.loc 1 341 13 is_stmt 1 view .LVU551
 2144              	.LBE26:
 2145              	.LBE29:
 2146              	@ armwave.c:383:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2147              		.loc 1 383 5 is_stmt 0 view .LVU552
 2148 09ec 0630A0E1 		mov	r3, r6	@, wave_size
 2149              	.LBB30:
 2150              	.LBB27:
 2151              	@ armwave.c:341:             g_armwave_state.ch1_color.b = b;
 341:armwave.c     ****             break;
 2152              		.loc 1 341 41 view .LVU553
 2153 09f0 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 342:armwave.c     ****     }
 2154              		.loc 1 342 13 is_stmt 1 view .LVU554
 2155              	.LVL135:
 342:armwave.c     ****     }
 2156              		.loc 1 342 13 is_stmt 0 view .LVU555
 2157              	.LBE27:
 2158              	.LBE30:
 2159              		.loc 1 383 5 is_stmt 1 view .LVU556
 2160 09f4 FEFFFFEB 		bl	armwave_setup_render		@
 2161              	.LVL136:
 384:armwave.c     **** 
 385:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2162              		.loc 1 385 5 view .LVU557
 2163 09f8 30109FE5 		ldr	r1, .L121+32	@,
 2164 09fc 30009FE5 		ldr	r0, .L121+36	@,
 2165              	@ armwave.c:386: }
 386:armwave.c     **** }
 2166              		.loc 1 386 1 is_stmt 0 view .LVU558
 2167 0a00 10D08DE2 		add	sp, sp, #16	@,,
 2168              		.cfi_def_cfa_offset 56
 2169              		@ sp needed	@
 2170 0a04 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2171              		.cfi_restore 84
 2172              		.cfi_restore 85
 2173              		.cfi_restore 82
 2174              		.cfi_restore 83
 2175              		.cfi_restore 80
 2176              		.cfi_restore 81
 2177              		.cfi_def_cfa_offset 32
 2178 0a08 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2179              		.cfi_restore 14
 2180              		.cfi_restore 10
 2181              		.cfi_restore 9
 2182              		.cfi_restore 8
 2183              		.cfi_restore 7
 2184              		.cfi_restore 6
 2185              		.cfi_restore 5
 2186              		.cfi_restore 4
 2187              		.cfi_def_cfa_offset 0
 2188              	.LVL137:
 2189              	@ armwave.c:385:     printf("armwave version: %s\n", ARMWAVE_VER);
 385:armwave.c     **** }
 2190              		.loc 1 385 5 view .LVU559
 2191 0a0c FEFFFFEA 		b	printf		@
 2192              	.LVL138:
 2193              	.L122:
 2194              		.align	3
 2195              	.L121:
 2196 0a10 000000C0 		.word	-1073741824
 2197 0a14 CCCCEC3F 		.word	1072483532
 2198 0a18 00000000 		.word	0
 2199 0a1c 00E06F40 		.word	1081073664
 2200 0a20 00007F43 		.word	1132396544
 2201 0a24 FFFFFFFF 		.word	gamma_table-1
 2202 0a28 00000000 		.word	g_armwave_state
 2203 0a2c F609F406 		.word	116656630
 2204 0a30 00000000 		.word	.LC0
 2205 0a34 08000000 		.word	.LC1
 2206              		.cfi_endproc
 2207              	.LFE69:
 2209              		.align	2
 2210              		.global	armwave_test_fill_outbuf
 2211              		.syntax unified
 2212              		.arm
 2213              		.fpu vfp
 2215              	armwave_test_fill_outbuf:
 2216              	.LFB70:
 387:armwave.c     **** 
 388:armwave.c     **** /*
 389:armwave.c     ****  * Render image to the local allocated buffer.
 390:armwave.c     ****  */
 391:armwave.c     **** void armwave_test_fill_outbuf()
 392:armwave.c     **** {
 2217              		.loc 1 392 1 is_stmt 1 view -0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
 2221              		@ link register save eliminated.
 393:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2222              		.loc 1 393 5 view .LVU561
 2223 0a38 04309FE5 		ldr	r3, .L124	@ tmp111,
 2224 0a3c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2225 0a40 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2226              	.LVL139:
 2227              	.L125:
 2228              		.align	2
 2229              	.L124:
 2230 0a44 00000000 		.word	g_armwave_state
 2231              		.cfi_endproc
 2232              	.LFE70:
 2234              		.align	2
 2235              		.global	armwave_test_dump_buffer_to_ppm
 2236              		.syntax unified
 2237              		.arm
 2238              		.fpu vfp
 2240              	armwave_test_dump_buffer_to_ppm:
 2241              	.LVL140:
 2242              	.LFB71:
 394:armwave.c     **** }
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 400:armwave.c     **** {
 2243              		.loc 1 400 1 view -0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 0
 2246              		@ frame_needed = 0, uses_anonymous_args = 0
 2247              		@ link register save eliminated.
 401:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2248              		.loc 1 401 5 view .LVU563
 2249 0a48 08309FE5 		ldr	r3, .L127	@ tmp112,
 2250 0a4c 0010A0E1 		mov	r1, r0	@, fn
 2251 0a50 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2252              	.LVL141:
 2253              		.loc 1 401 5 is_stmt 0 view .LVU564
 2254 0a54 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2255              	.LVL142:
 2256              	.L128:
 2257              		.loc 1 401 5 view .LVU565
 2258              		.align	2
 2259              	.L127:
 2260 0a58 00000000 		.word	g_armwave_state
 2261              		.cfi_endproc
 2262              	.LFE71:
 2264              		.align	2
 2265              		.global	armwave_test_fill_gdkbuf
 2266              		.syntax unified
 2267              		.arm
 2268              		.fpu vfp
 2270              	armwave_test_fill_gdkbuf:
 2271              	.LVL143:
 2272              	.LFB72:
 402:armwave.c     **** }
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Render GDK buffer with test funtionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 408:armwave.c     **** {
 2273              		.loc 1 408 1 is_stmt 1 view -0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 2277              		@ link register save eliminated.
 409:armwave.c     ****     //PyObject *mv;
 410:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 411:armwave.c     **** 
 412:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 413:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2278              		.loc 1 413 5 view .LVU567
 414:armwave.c     ****     
 415:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 416:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2279              		.loc 1 416 5 view .LVU568
 2280              	@ armwave.c:413:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 413:armwave.c     ****     
 2281              		.loc 1 413 11 is_stmt 0 view .LVU569
 2282 0a5c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2283              	@ armwave.c:416:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2284              		.loc 1 416 5 view .LVU570
 2285 0a60 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2286              	.LVL144:
 2287              		.loc 1 416 5 view .LVU571
 2288 0a64 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2289              	.LVL145:
 2290              		.loc 1 416 5 view .LVU572
 2291              		.cfi_endproc
 2292              	.LFE72:
 2294              		.align	2
 2295              		.global	armwave_test_buffer_alloc
 2296              		.syntax unified
 2297              		.arm
 2298              		.fpu vfp
 2300              	armwave_test_buffer_alloc:
 2301              	.LVL146:
 2302              	.LFB73:
 417:armwave.c     **** }
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 423:armwave.c     **** {
 2303              		.loc 1 423 1 is_stmt 1 view -0
 2304              		.cfi_startproc
 2305              		@ args = 0, pretend = 0, frame = 0
 2306              		@ frame_needed = 0, uses_anonymous_args = 0
 424:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2307              		.loc 1 424 5 view .LVU574
 2308              	@ armwave.c:423: {
 423:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2309              		.loc 1 423 1 is_stmt 0 view .LVU575
 2310 0a68 70402DE9 		push	{r4, r5, r6, lr}	@
 2311              		.cfi_def_cfa_offset 16
 2312              		.cfi_offset 4, -16
 2313              		.cfi_offset 5, -12
 2314              		.cfi_offset 6, -8
 2315              		.cfi_offset 14, -4
 2316              	@ armwave.c:423: {
 423:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2317              		.loc 1 423 1 view .LVU576
 2318 0a6c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2319              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 2320              		.loc 1 424 23 view .LVU577
 2321 0a70 44409FE5 		ldr	r4, .L137	@ tmp128,
 2322 0a74 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2323              	.LVL147:
 2324              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 2325              		.loc 1 424 7 view .LVU578
 2326 0a78 000050E3 		cmp	r0, #0	@ _1,
 2327 0a7c 0000000A 		beq	.L131		@,
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2328              		.loc 1 425 9 is_stmt 1 view .LVU579
 2329 0a80 FEFFFFEB 		bl	free		@
 2330              	.LVL148:
 2331              	.L131:
 426:armwave.c     ****     }
 427:armwave.c     **** 
 428:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 429:armwave.c     **** 
 430:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2332              		.loc 1 430 5 view .LVU580
 2333              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2334              		.loc 1 430 75 is_stmt 0 view .LVU581
 2335 0a84 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2336 0a88 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2337              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2338              		.loc 1 430 40 view .LVU582
 2339 0a8c 0610A0E1 		mov	r1, r6	@, nsets
 2340              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2341              		.loc 1 430 75 view .LVU583
 2342 0a90 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2343              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2344              		.loc 1 430 40 view .LVU584
 2345 0a94 0500A0E1 		mov	r0, r5	@, _4
 2346 0a98 FEFFFFEB 		bl	calloc		@
 2347              	.LVL149:
 2348              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 431:armwave.c     **** 
 432:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2349              		.loc 1 432 7 view .LVU585
 2350 0a9c 000050E3 		cmp	r0, #0	@ tmp124,
 2351              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2352              		.loc 1 430 38 view .LVU586
 2353 0aa0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2354              		.loc 1 432 5 is_stmt 1 view .LVU587
 2355              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 2356              		.loc 1 432 7 is_stmt 0 view .LVU588
 2357 0aa4 7080BD18 		popne	{r4, r5, r6, pc}	@
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2358              		.loc 1 433 9 is_stmt 1 view .LVU589
 2359 0aa8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2360 0aac 0620A0E1 		mov	r2, r6	@, nsets
 2361 0ab0 08009FE5 		ldr	r0, .L137+4	@,
 2362              	@ armwave.c:437: }
 434:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 435:armwave.c     ****         return;
 436:armwave.c     ****     }
 437:armwave.c     **** }
 2363              		.loc 1 437 1 is_stmt 0 view .LVU590
 2364 0ab4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2365              		.cfi_restore 14
 2366              		.cfi_restore 6
 2367              		.cfi_restore 5
 2368              		.cfi_restore 4
 2369              		.cfi_def_cfa_offset 0
 2370              	.LVL150:
 2371              	@ armwave.c:433:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2372              		.loc 1 433 9 view .LVU591
 2373 0ab8 FEFFFFEA 		b	printf		@
 2374              	.LVL151:
 2375              	.L138:
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2376              		.loc 1 433 9 view .LVU592
 2377              		.align	2
 2378              	.L137:
 2379 0abc 00000000 		.word	g_armwave_state
 2380 0ac0 D4010000 		.word	.LC17
 2381              		.cfi_endproc
 2382              	.LFE73:
 2384              		.align	2
 2385              		.global	armwave_fill_pixbuf_into_pybuffer
 2386              		.syntax unified
 2387              		.arm
 2388              		.fpu vfp
 2390              	armwave_fill_pixbuf_into_pybuffer:
 2391              	.LVL152:
 2392              	.LFB74:
 438:armwave.c     **** 
 439:armwave.c     **** /*
 440:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 441:armwave.c     ****  */
 442:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 443:armwave.c     **** {
 2393              		.loc 1 443 1 is_stmt 1 view -0
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 48
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 444:armwave.c     ****     Py_buffer buffer;
 2397              		.loc 1 444 5 view .LVU594
 445:armwave.c     ****     int ret;
 2398              		.loc 1 445 5 view .LVU595
 446:armwave.c     **** 
 447:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 448:armwave.c     **** 
 449:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2399              		.loc 1 449 5 view .LVU596
 2400              	@ armwave.c:443: {
 443:armwave.c     ****     Py_buffer buffer;
 2401              		.loc 1 443 1 is_stmt 0 view .LVU597
 2402 0ac4 04E02DE5 		str	lr, [sp, #-4]!	@,
 2403              		.cfi_def_cfa_offset 4
 2404              		.cfi_offset 14, -4
 2405 0ac8 34D04DE2 		sub	sp, sp, #52	@,,
 2406              		.cfi_def_cfa_offset 56
 2407              	@ armwave.c:449:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2408              		.loc 1 449 11 view .LVU598
 2409 0acc 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2410 0ad0 0120A0E3 		mov	r2, #1	@,
 2411 0ad4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2412              	.LVL153:
 450:armwave.c     **** 
 451:armwave.c     ****     if(ret != 0) {
 2413              		.loc 1 451 5 is_stmt 1 view .LVU599
 2414              	@ armwave.c:451:     if(ret != 0) {
 2415              		.loc 1 451 7 is_stmt 0 view .LVU600
 2416 0ad8 000050E3 		cmp	r0, #0	@,
 2417 0adc 0A00001A 		bne	.L143		@,
 452:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 453:armwave.c     ****         Py_RETURN_FALSE;
 454:armwave.c     ****     }
 455:armwave.c     **** 
 456:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 457:armwave.c     **** 
 458:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2418              		.loc 1 458 5 is_stmt 1 view .LVU601
 2419 0ae0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2420              	.LVL154:
 2421              		.loc 1 458 5 is_stmt 0 view .LVU602
 2422 0ae4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2423              	.LVL155:
 459:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 460:armwave.c     **** 
 461:armwave.c     ****     PyBuffer_Release(&buffer);
 2424              		.loc 1 461 5 is_stmt 1 view .LVU603
 2425 0ae8 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2426 0aec FEFFFFEB 		bl	PyBuffer_Release		@
 2427              	.LVL156:
 462:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 463:armwave.c     **** 
 464:armwave.c     ****     Py_RETURN_TRUE;
 2428              		.loc 1 464 5 view .LVU604
 2429              	.LBB31:
 2430              	.LBI31:
 2431              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2432              		.loc 2 456 20 view .LVU605
 2433              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2434              		.loc 2 458 21 view .LVU606
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2435              		.loc 2 459 5 view .LVU607
 2436              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2437              		.loc 2 459 18 is_stmt 0 view .LVU608
 2438 0af0 38309FE5 		ldr	r3, .L144	@ tmp126,
 2439              	.LBE32:
 2440              	.LBE31:
 2441              	@ armwave.c:464:     Py_RETURN_TRUE;
 2442              		.loc 1 464 5 view .LVU609
 2443 0af4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2444              	.LBB34:
 2445              	.LBB33:
 2446              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2447              		.loc 2 459 18 view .LVU610
 2448 0af8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2449 0afc 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2450 0b00 002083E5 		str	r2, [r3]	@ tmp128,
 2451              	.LBE33:
 2452              	.LBE34:
 2453              	@ armwave.c:465: }
 465:armwave.c     **** }
 2454              		.loc 1 465 1 view .LVU611
 2455 0b04 34D08DE2 		add	sp, sp, #52	@,,
 2456              		.cfi_remember_state
 2457              		.cfi_def_cfa_offset 4
 2458              		@ sp needed	@
 2459 0b08 04F09DE4 		ldr	pc, [sp], #4	@
 2460              	.LVL157:
 2461              	.L143:
 2462              		.cfi_restore_state
 452:armwave.c     ****         Py_RETURN_FALSE;
 2463              		.loc 1 452 9 is_stmt 1 view .LVU612
 2464 0b0c 20009FE5 		ldr	r0, .L144+4	@,
 2465              	.LVL158:
 452:armwave.c     ****         Py_RETURN_FALSE;
 2466              		.loc 1 452 9 is_stmt 0 view .LVU613
 2467 0b10 FEFFFFEB 		bl	puts		@
 2468              	.LVL159:
 453:armwave.c     ****     }
 2469              		.loc 1 453 9 is_stmt 1 view .LVU614
 2470              	.LBB35:
 2471              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2472              		.loc 2 456 20 view .LVU615
 2473              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2474              		.loc 2 458 21 view .LVU616
 2475              		.loc 2 459 5 view .LVU617
 2476              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2477              		.loc 2 459 18 is_stmt 0 view .LVU618
 2478 0b14 1C309FE5 		ldr	r3, .L144+8	@ tmp120,
 2479              	.LBE36:
 2480              	.LBE35:
 2481              	@ armwave.c:453:         Py_RETURN_FALSE;
 453:armwave.c     ****     }
 2482              		.loc 1 453 9 view .LVU619
 2483 0b18 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2484              	.LBB38:
 2485              	.LBB37:
 2486              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2487              		.loc 2 459 18 view .LVU620
 2488 0b1c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2489 0b20 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2490 0b24 002083E5 		str	r2, [r3]	@ tmp122,
 2491              	.LBE37:
 2492              	.LBE38:
 2493              	@ armwave.c:465: }
 2494              		.loc 1 465 1 view .LVU621
 2495 0b28 34D08DE2 		add	sp, sp, #52	@,,
 2496              		.cfi_def_cfa_offset 4
 2497              		@ sp needed	@
 2498 0b2c 04F09DE4 		ldr	pc, [sp], #4	@
 2499              	.L145:
 2500              		.align	2
 2501              	.L144:
 2502 0b30 00000000 		.word	_Py_TrueStruct
 2503 0b34 28020000 		.word	.LC18
 2504 0b38 00000000 		.word	_Py_FalseStruct
 2505              		.cfi_endproc
 2506              	.LFE74:
 2508              		.align	2
 2509              		.global	armwave_test_create_am_sine
 2510              		.syntax unified
 2511              		.arm
 2512              		.fpu vfp
 2514              	armwave_test_create_am_sine:
 2515              	.LVL160:
 2516              	.LFB75:
 466:armwave.c     **** 
 467:armwave.c     **** /*
 468:armwave.c     ****  * Make a test AM waveform for render tests.
 469:armwave.c     ****  *
 470:armwave.c     ****  * @param   mod                     modulation depth
 471:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 472:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 473:armwave.c     ****  */
 474:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 475:armwave.c     **** {
 2517              		.loc 1 475 1 is_stmt 1 view -0
 2518              		.cfi_startproc
 2519              		@ args = 0, pretend = 0, frame = 8
 2520              		@ frame_needed = 0, uses_anonymous_args = 0
 476:armwave.c     ****     float v, noise, xnoise, mod_val;
 2521              		.loc 1 476 5 view .LVU623
 477:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2522              		.loc 1 477 5 view .LVU624
 2523              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2524              		.loc 1 475 1 is_stmt 0 view .LVU625
 2525 0b3c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2526              		.cfi_def_cfa_offset 32
 2527              		.cfi_offset 4, -32
 2528              		.cfi_offset 5, -28
 2529              		.cfi_offset 6, -24
 2530              		.cfi_offset 7, -20
 2531              		.cfi_offset 8, -16
 2532              		.cfi_offset 9, -12
 2533              		.cfi_offset 10, -8
 2534              		.cfi_offset 14, -4
 2535              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2536              		.loc 1 477 38 view .LVU626
 2537 0b40 7A7A9FED 		vldr.32	s14, .L177	@ tmp180,
 2538              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2539              		.loc 1 477 55 view .LVU627
 2540 0b44 00529FE5 		ldr	r5, .L177+28	@ tmp250,
 2541              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2542              		.loc 1 475 1 view .LVU628
 2543 0b48 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2544              		.cfi_def_cfa_offset 80
 2545              		.cfi_offset 80, -80
 2546              		.cfi_offset 81, -76
 2547              		.cfi_offset 82, -72
 2548              		.cfi_offset 83, -68
 2549              		.cfi_offset 84, -64
 2550              		.cfi_offset 85, -60
 2551              		.cfi_offset 86, -56
 2552              		.cfi_offset 87, -52
 2553              		.cfi_offset 88, -48
 2554              		.cfi_offset 89, -44
 2555              		.cfi_offset 90, -40
 2556              		.cfi_offset 91, -36
 2557 0b4c 0090A0E1 		mov	r9, r0	@ sets, sets
 2558              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2559              		.loc 1 477 38 view .LVU629
 2560 0b50 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2561              	@ armwave.c:481:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 478:armwave.c     ****     int s, set_offset = 0;
 479:armwave.c     ****     int w, x;
 480:armwave.c     **** 
 481:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2562              		.loc 1 481 70 view .LVU630
 2563 0b54 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2564 0b58 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2565              	.LBB41:
 2566              	.LBB42:
 2567              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2568              		.loc 1 424 23 view .LVU631
 2569 0b5c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2570              	.LVL161:
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2571              		.loc 1 424 23 view .LVU632
 2572              	.LBE42:
 2573              	.LBE41:
 2574              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 477:armwave.c     ****     int s, set_offset = 0;
 2575              		.loc 1 477 38 view .LVU633
 2576 0b60 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2577              	@ armwave.c:481:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2578              		.loc 1 481 70 view .LVU634
 2579 0b64 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2580              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2581              		.loc 1 475 1 view .LVU635
 2582 0b68 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2583              	.LBB46:
 2584              	.LBB43:
 2585              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2586              		.loc 1 424 7 view .LVU636
 2587 0b6c 000050E3 		cmp	r0, #0	@ _82,
 2588              	.LBE43:
 2589              	.LBE46:
 2590              	@ armwave.c:475: {
 475:armwave.c     ****     float v, noise, xnoise, mod_val;
 2591              		.loc 1 475 1 view .LVU637
 2592 0b70 08D04DE2 		sub	sp, sp, #8	@,,
 2593              		.cfi_def_cfa_offset 88
 2594              	@ armwave.c:482:     g_armwave_state.test_wave_buffer_nsets = sets;
 482:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2595              		.loc 1 482 44 view .LVU638
 2596 0b74 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2597              	@ armwave.c:481:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 481:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2598              		.loc 1 481 45 view .LVU639
 2599 0b78 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2600              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 477:armwave.c     ****     int s, set_offset = 0;
 2601              		.loc 1 477 38 view .LVU640
 2602 0b7c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2603              	@ armwave.c:477:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 477:armwave.c     ****     int s, set_offset = 0;
 2604              		.loc 1 477 11 view .LVU641
 2605 0b80 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2606              	.LVL162:
 478:armwave.c     ****     int w, x;
 2607              		.loc 1 478 5 is_stmt 1 view .LVU642
 479:armwave.c     **** 
 2608              		.loc 1 479 5 view .LVU643
 481:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2609              		.loc 1 481 5 view .LVU644
 2610              		.loc 1 482 5 view .LVU645
 483:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2611              		.loc 1 483 5 view .LVU646
 2612              	.LBB47:
 2613              	.LBI41:
 422:armwave.c     **** {
 2614              		.loc 1 422 6 view .LVU647
 2615              	.LBB44:
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2616              		.loc 1 424 5 view .LVU648
 2617              	@ armwave.c:424:     if(g_armwave_state.test_wave_buffer != NULL) {
 424:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2618              		.loc 1 424 7 is_stmt 0 view .LVU649
 2619 0b84 0000000A 		beq	.L147		@,
 425:armwave.c     ****     }
 2620              		.loc 1 425 9 is_stmt 1 view .LVU650
 2621 0b88 FEFFFFEB 		bl	free		@
 2622              	.LVL163:
 2623              	.L147:
 430:armwave.c     **** 
 2624              		.loc 1 430 5 view .LVU651
 2625              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2626              		.loc 1 430 75 is_stmt 0 view .LVU652
 2627 0b8c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2628 0b90 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2629              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2630              		.loc 1 430 40 view .LVU653
 2631 0b94 0910A0E1 		mov	r1, r9	@, sets
 2632              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2633              		.loc 1 430 75 view .LVU654
 2634 0b98 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2635              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2636              		.loc 1 430 40 view .LVU655
 2637 0b9c 0400A0E1 		mov	r0, r4	@, _85
 2638 0ba0 FEFFFFEB 		bl	calloc		@
 2639              	.LVL164:
 2640              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2641              		.loc 1 432 7 view .LVU656
 2642 0ba4 000050E3 		cmp	r0, #0	@ tmp191,
 2643              	@ armwave.c:430:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 430:armwave.c     **** 
 2644              		.loc 1 430 38 view .LVU657
 2645 0ba8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2646              		.loc 1 432 5 is_stmt 1 view .LVU658
 2647              	@ armwave.c:432:     if(g_armwave_state.test_wave_buffer == NULL) {
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2648              		.loc 1 432 7 is_stmt 0 view .LVU659
 2649 0bac 5A00000A 		beq	.L176		@,
 2650              	.L148:
 2651              	.LVL165:
 432:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2652              		.loc 1 432 7 view .LVU660
 2653              	.LBE44:
 2654              	.LBE47:
 2655              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 484:armwave.c     **** 
 485:armwave.c     ****     for(s = 0; s < sets; s++) {
 2656              		.loc 1 485 5 discriminator 1 view .LVU661
 2657 0bb0 000059E3 		cmp	r9, #0	@ sets,
 2658 0bb4 550000DA 		ble	.L146		@,
 2659              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 487:armwave.c     ****     
 488:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 490:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 491:armwave.c     **** 
 492:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****                 noise *= noise;
 495:armwave.c     ****                 noise *= noise;
 496:armwave.c     ****                 noise *= noise;
 497:armwave.c     **** 
 498:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 499:armwave.c     ****                     noise = -noise;
 500:armwave.c     **** 
 501:armwave.c     ****                 noise += 1.0f;
 502:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 504:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2660              		.loc 1 504 45 view .LVU662
 2661 0bb8 5C8A9FED 		vldr.32	s16, .L177	@ tmp258,
 2662              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 506:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 507:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2663              		.loc 1 507 104 view .LVU663
 2664 0bbc 5CCA9FED 		vldr.32	s24, .L177+4	@ tmp259,
 2665              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2666              		.loc 1 485 5 view .LVU664
 2667 0bc0 0070A0E3 		mov	r7, #0	@ set_offset,
 2668              	@ armwave.c:486:         printf("Calculating test set %d\n", s);
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2669              		.loc 1 486 9 view .LVU665
 2670 0bc4 84A19FE5 		ldr	r10, .L177+32	@ tmp257,
 2671              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2672              		.loc 1 485 5 view .LVU666
 2673 0bc8 0780A0E1 		mov	r8, r7	@ s, set_offset
 2674              	.LVL166:
 2675              	.L149:
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2676              		.loc 1 486 9 is_stmt 1 view .LVU667
 2677 0bcc 0810A0E1 		mov	r1, r8	@, s
 2678 0bd0 0A00A0E1 		mov	r0, r10	@, tmp257
 2679 0bd4 FEFFFFEB 		bl	printf		@
 2680              	.LVL167:
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2681              		.loc 1 488 9 view .LVU668
 2682              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2683              		.loc 1 488 39 is_stmt 0 view .LVU669
 2684 0bd8 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2685              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2686              		.loc 1 488 9 view .LVU670
 2687 0bdc 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2688 0be0 450000DA 		ble	.L150		@,
 2689              	@ armwave.c:490:             mod_val = 0.5f + (_1_waves_mod * w);
 490:armwave.c     **** 
 2690              		.loc 1 490 21 view .LVU671
 2691 0be4 53CADFED 		vldr.32	s25, .L177+8	@ tmp200,
 2692              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2693              		.loc 1 504 33 view .LVU672
 2694 0be8 53BA9FED 		vldr.32	s22, .L177+12	@ tmp253,
 2695              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2696              		.loc 1 502 24 view .LVU673
 2697 0bec 53AADFED 		vldr.32	s21, .L177+16	@ tmp254,
 2698 0bf0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2699              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2700              		.loc 1 488 15 view .LVU674
 2701 0bf4 0060A0E3 		mov	r6, #0	@ w,
 2702              	.LVL168:
 2703              	.L157:
 490:armwave.c     **** 
 2704              		.loc 1 490 13 is_stmt 1 view .LVU675
 2705              	@ armwave.c:490:             mod_val = 0.5f + (_1_waves_mod * w);
 490:armwave.c     **** 
 2706              		.loc 1 490 21 is_stmt 0 view .LVU676
 2707 0bf8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2708 0bfc 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2709              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2710              		.loc 1 492 13 view .LVU677
 2711 0c00 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2712              	@ armwave.c:490:             mod_val = 0.5f + (_1_waves_mod * w);
 490:armwave.c     **** 
 2713              		.loc 1 490 21 view .LVU678
 2714 0c04 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2715 0c08 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2716              	.LVL169:
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2717              		.loc 1 492 13 is_stmt 1 view .LVU679
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2718              		.loc 1 492 13 is_stmt 0 view .LVU680
 2719 0c0c 370000DA 		ble	.L151		@,
 2720 0c10 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2721              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2722              		.loc 1 507 113 view .LVU681
 2723 0c14 4AAA9FED 		vldr.32	s20, .L177+20	@ tmp229,
 2724 0c18 4A8ADFED 		vldr.32	s17, .L177+24	@ tmp230,
 2725              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2726              		.loc 1 492 19 view .LVU682
 2727 0c1c 0040A0E3 		mov	r4, #0	@ x,
 2728              	.LVL170:
 2729              	.L156:
 493:armwave.c     ****                 noise *= noise;
 2730              		.loc 1 493 17 is_stmt 1 view .LVU683
 2731              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2732              		.loc 1 493 28 is_stmt 0 view .LVU684
 2733 0c20 FEFFFFEB 		bl	rand		@
 2734              	.LVL171:
 2735              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2736              		.loc 1 493 35 view .LVU685
 2737 0c24 7000FFE6 		uxth	r0, r0	@ tmp201,
 2738              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2739              		.loc 1 493 45 view .LVU686
 2740 0c28 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2741 0c2c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2742              	@ armwave.c:493:                 noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****                 noise *= noise;
 2743              		.loc 1 493 24 view .LVU687
 2744 0c30 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2745              	.LVL172:
 494:armwave.c     ****                 noise *= noise;
 2746              		.loc 1 494 17 is_stmt 1 view .LVU688
 2747              	@ armwave.c:494:                 noise *= noise;
 494:armwave.c     ****                 noise *= noise;
 2748              		.loc 1 494 23 is_stmt 0 view .LVU689
 2749 0c34 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2750              	.LVL173:
 495:armwave.c     ****                 noise *= noise;
 2751              		.loc 1 495 17 is_stmt 1 view .LVU690
 2752              	@ armwave.c:495:                 noise *= noise;
 495:armwave.c     ****                 noise *= noise;
 2753              		.loc 1 495 23 is_stmt 0 view .LVU691
 2754 0c38 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2755              	.LVL174:
 496:armwave.c     **** 
 2756              		.loc 1 496 17 is_stmt 1 view .LVU692
 2757              	@ armwave.c:496:                 noise *= noise;
 496:armwave.c     **** 
 2758              		.loc 1 496 23 is_stmt 0 view .LVU693
 2759 0c3c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2760              	.LVL175:
 498:armwave.c     ****                     noise = -noise;
 2761              		.loc 1 498 17 is_stmt 1 view .LVU694
 2762              	@ armwave.c:498:                 if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                     noise = -noise;
 2763              		.loc 1 498 21 is_stmt 0 view .LVU695
 2764 0c40 FEFFFFEB 		bl	rand		@
 2765              	.LVL176:
 499:armwave.c     **** 
 2766              		.loc 1 499 21 is_stmt 1 view .LVU696
 2767              	@ armwave.c:498:                 if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                     noise = -noise;
 2768              		.loc 1 498 19 is_stmt 0 view .LVU697
 2769 0c44 020910E3 		tst	r0, #32768	@,
 2770              	@ armwave.c:499:                     noise = -noise;
 499:armwave.c     **** 
 2771              		.loc 1 499 27 view .LVU698
 2772 0c48 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2773              	.LVL177:
 501:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2774              		.loc 1 501 17 is_stmt 1 view .LVU699
 502:armwave.c     **** 
 2775              		.loc 1 502 17 view .LVU700
 2776              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2777              		.loc 1 502 27 is_stmt 0 view .LVU701
 2778 0c4c FEFFFFEB 		bl	rand		@
 2779              	.LVL178:
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2780              		.loc 1 504 17 is_stmt 1 view .LVU702
 2781              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2782              		.loc 1 504 45 is_stmt 0 view .LVU703
 2783 0c50 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2784              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2785              		.loc 1 504 33 view .LVU704
 2786 0c54 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2787              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2788              		.loc 1 504 45 view .LVU705
 2789 0c58 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2790              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2791              		.loc 1 504 33 view .LVU706
 2792 0c5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2793              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2794              		.loc 1 504 45 view .LVU707
 2795 0c60 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2796              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2797              		.loc 1 504 33 view .LVU708
 2798 0c64 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2799              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2800              		.loc 1 502 34 view .LVU709
 2801 0c68 7000FFE6 		uxth	r0, r0	@ tmp214,
 2802              	.LVL179:
 2803              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2804              		.loc 1 502 44 view .LVU710
 2805 0c6c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2806 0c70 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2807              	@ armwave.c:502:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 2808              		.loc 1 502 24 view .LVU711
 2809 0c74 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2810              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2811              		.loc 1 504 77 view .LVU712
 2812 0c78 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2813              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2814              		.loc 1 504 22 view .LVU713
 2815 0c7c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2816 0c80 FEFFFFEB 		bl	sin		@
 2817              	.LVL180:
 2818              		.loc 1 507 17 is_stmt 1 view .LVU714
 2819              	@ armwave.c:501:                 noise += 1.0f;
 501:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2820              		.loc 1 501 23 is_stmt 0 view .LVU715
 2821 0c84 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2822              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2823              		.loc 1 507 104 view .LVU716
 2824 0c88 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 2825              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2826              		.loc 1 504 98 view .LVU717
 2827 0c8c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2828              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2829              		.loc 1 504 87 view .LVU718
 2830 0c90 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2831              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2832              		.loc 1 504 98 view .LVU719
 2833 0c94 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2834              	@ armwave.c:504:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 504:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2835              		.loc 1 504 19 view .LVU720
 2836 0c98 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2837              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2838              		.loc 1 507 113 view .LVU721
 2839 0c9c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2840 0ca0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2841 0ca4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2842 0ca8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2843 0cac 050000DA 		ble	.L153		@,
 2844              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2845              		.loc 1 507 104 discriminator 1 view .LVU722
 2846 0cb0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2847 0cb4 FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 2848 0cb8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2849 0cbc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2850 0cc0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2851 0cc4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 2852              	.L153:
 2853              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2854              		.loc 1 507 57 discriminator 12 view .LVU723
 2855 0cc8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2856              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2857              		.loc 1 507 102 discriminator 12 view .LVU724
 2858 0ccc 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2859 0cd0 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2860 0cd4 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2861              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2862              		.loc 1 492 58 discriminator 12 view .LVU725
 2863 0cd8 014084E2 		add	r4, r4, #1	@ x, x,
 2864              	.LVL181:
 2865              	@ armwave.c:507:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2866              		.loc 1 507 102 discriminator 12 view .LVU726
 2867 0cdc 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 2868              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2869              		.loc 1 492 43 discriminator 12 view .LVU727
 2870 0ce0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2871              	@ armwave.c:492:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2872              		.loc 1 492 13 discriminator 12 view .LVU728
 2873 0ce4 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2874 0ce8 CCFFFFCA 		bgt	.L156		@,
 2875 0cec 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2876              	.LVL182:
 2877              	.L151:
 2878              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2879              		.loc 1 488 48 discriminator 2 view .LVU729
 2880 0cf0 016086E2 		add	r6, r6, #1	@ w, w,
 2881              	.LVL183:
 2882              	@ armwave.c:488:         for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2883              		.loc 1 488 9 discriminator 2 view .LVU730
 2884 0cf4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2885 0cf8 BEFFFFBA 		blt	.L157		@,
 2886              	.LVL184:
 2887              	.L150:
 508:armwave.c     ****             }
 509:armwave.c     ****         }
 510:armwave.c     **** 
 511:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2888              		.loc 1 511 9 is_stmt 1 discriminator 2 view .LVU731
 2889              	@ armwave.c:511:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2890              		.loc 1 511 46 is_stmt 0 discriminator 2 view .LVU732
 2891 0cfc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2892              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2893              		.loc 1 485 27 discriminator 2 view .LVU733
 2894 0d00 018088E2 		add	r8, r8, #1	@ s, s,
 2895              	.LVL185:
 2896              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2897              		.loc 1 485 5 discriminator 2 view .LVU734
 2898 0d04 080059E1 		cmp	r9, r8	@ sets, s
 2899              	@ armwave.c:511:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2900              		.loc 1 511 20 discriminator 2 view .LVU735
 2901 0d08 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2902              	.LVL186:
 2903              	@ armwave.c:485:     for(s = 0; s < sets; s++) {
 485:armwave.c     ****         printf("Calculating test set %d\n", s);
 2904              		.loc 1 485 5 discriminator 2 view .LVU736
 2905 0d0c AEFFFF1A 		bne	.L149		@,
 2906              	.LVL187:
 2907              	.L146:
 2908              	@ armwave.c:513: }
 512:armwave.c     ****     }
 513:armwave.c     **** }
 2909              		.loc 1 513 1 view .LVU737
 2910 0d10 08D08DE2 		add	sp, sp, #8	@,,
 2911              		.cfi_remember_state
 2912              		.cfi_def_cfa_offset 80
 2913              		@ sp needed	@
 2914 0d14 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2915              		.cfi_restore 90
 2916              		.cfi_restore 91
 2917              		.cfi_restore 88
 2918              		.cfi_restore 89
 2919              		.cfi_restore 86
 2920              		.cfi_restore 87
 2921              		.cfi_restore 84
 2922              		.cfi_restore 85
 2923              		.cfi_restore 82
 2924              		.cfi_restore 83
 2925              		.cfi_restore 80
 2926              		.cfi_restore 81
 2927              		.cfi_def_cfa_offset 32
 2928              	.LVL188:
 2929              		.loc 1 513 1 view .LVU738
 2930 0d18 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2931              	.LVL189:
 2932              	.L176:
 2933              		.cfi_restore_state
 2934              	.LBB48:
 2935              	.LBB45:
 433:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2936              		.loc 1 433 9 is_stmt 1 view .LVU739
 2937 0d1c 940901E0 		mul	r1, r4, r9	@, _85, sets
 2938 0d20 0920A0E1 		mov	r2, r9	@, sets
 2939 0d24 28009FE5 		ldr	r0, .L177+36	@,
 2940 0d28 FEFFFFEB 		bl	printf		@
 2941              	.LVL190:
 435:armwave.c     ****     }
 2942              		.loc 1 435 9 view .LVU740
 2943 0d2c 9FFFFFEA 		b	.L148		@
 2944              	.L178:
 2945              		.align	2
 2946              	.L177:
 2947 0d30 0000803F 		.word	1065353216
 2948 0d34 00007F43 		.word	1132396544
 2949 0d38 0000003F 		.word	1056964608
 2950 0d3c C3F5C840 		.word	1086911939
 2951 0d40 38FFC74A 		.word	1254620984
 2952 0d44 0000FE42 		.word	1123942400
 2953 0d48 00000043 		.word	1124073472
 2954 0d4c 00000000 		.word	g_armwave_state
 2955 0d50 7C020000 		.word	.LC19
 2956 0d54 D4010000 		.word	.LC17
 2957              	.LBE45:
 2958              	.LBE48:
 2959              		.cfi_endproc
 2960              	.LFE75:
 2962              		.align	2
 2963              		.global	armwave_cleanup
 2964              		.syntax unified
 2965              		.arm
 2966              		.fpu vfp
 2968              	armwave_cleanup:
 2969              	.LFB76:
 514:armwave.c     **** 
 515:armwave.c     **** /*
 516:armwave.c     ****  * Make a test square waveform.
 517:armwave.c     ****  *
 518:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 519:armwave.c     ****  */
 520:armwave.c     **** #if 0
 521:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 522:armwave.c     **** {
 523:armwave.c     ****     uint8_t v;
 524:armwave.c     ****     float noise, xnoise;
 525:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 526:armwave.c     ****     int w, x;
 527:armwave.c     **** 
 528:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 529:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 530:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 531:armwave.c     ****             noise *= noise;
 532:armwave.c     ****             noise *= noise;
 533:armwave.c     ****             noise *= noise;
 534:armwave.c     **** 
 535:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 536:armwave.c     ****                 noise = -noise;
 537:armwave.c     **** 
 538:armwave.c     ****             //noise += 1.0f;
 539:armwave.c     **** 
 540:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 541:armwave.c     ****                 new_level = 0.2f;
 542:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 543:armwave.c     ****                 new_level = 0.8f;
 544:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 545:armwave.c     ****                 new_level = 0.2f;
 546:armwave.c     ****             } else {
 547:armwave.c     ****                 new_level = 0.8f;
 548:armwave.c     ****             }
 549:armwave.c     **** 
 550:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 551:armwave.c     **** 
 552:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 553:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 554:armwave.c     ****         }
 555:armwave.c     ****     }
 556:armwave.c     **** }
 557:armwave.c     **** #endif
 558:armwave.c     **** 
 559:armwave.c     **** /*
 560:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 561:armwave.c     ****  */
 562:armwave.c     **** void armwave_cleanup()
 563:armwave.c     **** {
 2970              		.loc 1 563 1 view -0
 2971              		.cfi_startproc
 2972              		@ args = 0, pretend = 0, frame = 0
 2973              		@ frame_needed = 0, uses_anonymous_args = 0
 564:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2974              		.loc 1 564 5 view .LVU742
 2975              	@ armwave.c:563: {
 563:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2976              		.loc 1 563 1 is_stmt 0 view .LVU743
 2977 0d58 10402DE9 		push	{r4, lr}	@
 2978              		.cfi_def_cfa_offset 8
 2979              		.cfi_offset 4, -8
 2980              		.cfi_offset 14, -4
 2981              	@ armwave.c:564:     free(g_armwave_state.out_pixbuf);
 2982              		.loc 1 564 25 view .LVU744
 2983 0d5c 34409FE5 		ldr	r4, .L181	@ tmp114,
 2984              	@ armwave.c:564:     free(g_armwave_state.out_pixbuf);
 2985              		.loc 1 564 5 view .LVU745
 2986 0d60 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2987 0d64 FEFFFFEB 		bl	free		@
 2988              	.LVL191:
 565:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2989              		.loc 1 565 5 is_stmt 1 view .LVU746
 2990 0d68 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2991 0d6c FEFFFFEB 		bl	free		@
 2992              	.LVL192:
 566:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2993              		.loc 1 566 5 view .LVU747
 2994 0d70 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2995 0d74 FEFFFFEB 		bl	free		@
 2996              	.LVL193:
 567:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2997              		.loc 1 567 5 view .LVU748
 2998 0d78 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2999 0d7c FEFFFFEB 		bl	free		@
 3000              	.LVL194:
 568:armwave.c     **** 
 569:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3001              		.loc 1 569 5 view .LVU749
 3002              	@ armwave.c:569:     g_armwave_state.out_pixbuf = NULL;
 3003              		.loc 1 569 32 is_stmt 0 view .LVU750
 3004 0d80 0030A0E3 		mov	r3, #0	@ tmp123,
 3005 0d84 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 570:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3006              		.loc 1 570 5 is_stmt 1 view .LVU751
 3007              	@ armwave.c:570:     g_armwave_state.ch1_buffer = NULL;
 3008              		.loc 1 570 32 is_stmt 0 view .LVU752
 3009 0d88 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 571:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3010              		.loc 1 571 5 is_stmt 1 view .LVU753
 3011              	@ armwave.c:571:     g_armwave_state.xcoord_to_xpixel = NULL;
 3012              		.loc 1 571 38 is_stmt 0 view .LVU754
 3013 0d8c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 572:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3014              		.loc 1 572 5 is_stmt 1 view .LVU755
 3015              	@ armwave.c:572:     g_armwave_state.test_wave_buffer = NULL;
 3016              		.loc 1 572 38 is_stmt 0 view .LVU756
 3017 0d90 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3018              	@ armwave.c:573: }
 573:armwave.c     **** }
 3019              		.loc 1 573 1 view .LVU757
 3020 0d94 1080BDE8 		pop	{r4, pc}	@
 3021              	.L182:
 3022              		.align	2
 3023              	.L181:
 3024 0d98 00000000 		.word	g_armwave_state
 3025              		.cfi_endproc
 3026              	.LFE76:
 3028              		.comm	gamma_table,256,4
 3029              		.comm	g_armwave_state,136,4
 3030              		.section	.rodata
 3031              		.align	2
 3032              		.set	.LANCHOR0,. + 0
 3035              	__PRETTY_FUNCTION__.17124:
 3036 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3036      6176655F 
 3036      73657475 
 3036      705F7265 
 3036      6E646572 
 3037 0015 000000   		.space	3
 3040              	__PRETTY_FUNCTION__.17131:
 3041 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3041      6176655F 
 3041      7365745F 
 3041      77617665 
 3041      5F706F69 
 3042 0031 000000   		.space	3
 3045              	__PRETTY_FUNCTION__.17138:
 3046 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3046      6176655F 
 3046      7365745F 
 3046      77617665 
 3046      5F706F69 
 3047              		.section	.rodata.str1.4,"aMS",%progbits,1
 3048              		.align	2
 3049              	.LC0:
 3050 0000 76302E30 		.ascii	"v0.0.1\000"
 3050      2E3100
 3051 0007 00       		.space	1
 3052              	.LC1:
 3053 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3053      61766520 
 3053      76657273 
 3053      696F6E3A 
 3053      2025730A 
 3054 001d 000000   		.space	3
 3055              	.LC2:
 3056 0020 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3056      20653D25 
 3056      6420773D 
 3056      25642077 
 3056      733D2564 
 3057              	.LC3:
 3058 004c 61726D77 		.ascii	"armwave.c\000"
 3058      6176652E 
 3058      6300
 3059 0056 0000     		.space	2
 3060              	.LC4:
 3061 0058 73746172 		.ascii	"start_point < end_point\000"
 3061      745F706F 
 3061      696E7420 
 3061      3C20656E 
 3061      645F706F 
 3062              	.LC5:
 3063 0070 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3063      7566665F 
 3063      73697A65 
 3063      3D25642C 
 3063      20636D70 
 3064 00a3 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3064      5F776964 
 3064      74683D25 
 3064      642C2077 
 3064      6176655F 
 3065 00cd 000000   		.space	3
 3066              	.LC6:
 3067 00d0 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3067      6D776176 
 3067      655F7374 
 3067      6174652E 
 3067      6368315F 
 3068 00f3 00       		.space	1
 3069              	.LC7:
 3070 00f4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3070      6D776176 
 3070      655F7374 
 3070      6174652E 
 3070      78636F6F 
 3071 011d 000000   		.space	3
 3072              	.LC8:
 3073 0120 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3073      3A203078 
 3073      25303878 
 3073      20307825 
 3073      30387820 
 3074              	.LC9:
 3075 0144 77617665 		.ascii	"wave_buffer != NULL\000"
 3075      5F627566 
 3075      66657220 
 3075      213D204E 
 3075      554C4C00 
 3076              	.LC10:
 3077 0158 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3077      6176655F 
 3077      7365745F 
 3077      77617665 
 3077      5F706F69 
 3078 018b 78636565 		.ascii	"xceeded\000"
 3078      64656400 
 3079 0193 00       		.space	1
 3080              	.LC11:
 3081 0194 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3081      5F627566 
 3081      6665725F 
 3081      70747220 
 3081      213D2030 
 3082 01a9 000000   		.space	3
 3083              	.LC12:
 3084 01ac 776200   		.ascii	"wb\000"
 3085 01af 00       		.space	1
 3086              	.LC13:
 3087 01b0 50330A00 		.ascii	"P3\012\000"
 3088              	.LC14:
 3089 01b4 25642025 		.ascii	"%d %d\012\000"
 3089      640A00
 3090 01bb 00       		.space	1
 3091              	.LC15:
 3092 01bc 3235350A 		.ascii	"255\012\000"
 3092      00
 3093 01c1 000000   		.space	3
 3094              	.LC16:
 3095 01c4 25336420 		.ascii	"%3d %3d %3d\012\000"
 3095      25336420 
 3095      2533640A 
 3095      00
 3096 01d1 000000   		.space	3
 3097              	.LC17:
 3098 01d4 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3098      6176655F 
 3098      74657374 
 3098      5F627566 
 3098      6665725F 
 3099 0207 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3099      20627566 
 3099      66657220 
 3099      28256420 
 3099      62797465 
 3100              	.LC18:
 3101 0228 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3101      6176655F 
 3101      66696C6C 
 3101      5F706978 
 3101      6275665F 
 3102 025b 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3102      20666169 
 3102      6C65642C 
 3102      20726574 
 3102      75726E69 
 3103 027a 0000     		.space	2
 3104              	.LC19:
 3105 027c 43616C63 		.ascii	"Calculating test set %d\012\000"
 3105      756C6174 
 3105      696E6720 
 3105      74657374 
 3105      20736574 
 3106              		.text
 3107              	.Letext0:
 3108              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3109              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3110              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3111              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3112              		.file 7 "/usr/include/stdio.h"
 3113              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3114              		.file 9 "/usr/include/errno.h"
 3115              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3116              		.file 11 "/usr/include/unistd.h"
 3117              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3118              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3119              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3120              		.file 15 "/usr/include/math.h"
 3121              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3122              		.file 17 "/usr/include/time.h"
 3123              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3124              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3125              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3126              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3127              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3128              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3129              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3130              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3131              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3132              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3133              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3134              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3135              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3136              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3137              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3138              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3139              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3140              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3141              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3142              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3143              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3144              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3145              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3146              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3147              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3148              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3149              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3150              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3151              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3152              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3153              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3154              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3155              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3156              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3157              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3158              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3159              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3160              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3161              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3162              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3163              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3164              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3165              		.file 60 "/usr/local/include/python3.8/context.h"
 3166              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3167              		.file 62 "/usr/local/include/python3.8/code.h"
 3168              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3169              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3170              		.file 65 "/usr/local/include/python3.8/import.h"
 3171              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3172              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3173              		.file 68 "/usr/include/malloc.h"
 3174              		.file 69 "armwave.h"
 3175              		.file 70 "/usr/include/stdlib.h"
 3176              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3177              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3178              		.file 73 "<built-in>"
 3179              		.file 74 "/usr/include/assert.h"
