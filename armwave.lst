   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 B8419FE5 		ldr	r4, .L27	@ tmp313,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 0160A0E1 		mov	r6, r1	@ height, height
 255 00ac 24D04DE2 		sub	sp, sp, #36	@,,
 256              		.cfi_def_cfa_offset 72
 257              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 258              		.loc 1 71 82 view .LVU34
 259 00b0 240094E5 		ldr	r0, [r4, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 260              	.LVL7:
 261              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 262              		.loc 1 71 147 view .LVU35
 263 00b4 401094E5 		ldr	r1, [r4, #64]	@ _5, g_armwave_state.bitdepth_height
 264              	.LVL8:
 265              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 266              		.loc 1 71 40 view .LVU36
 267 00b8 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 268              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 269              		.loc 1 71 65 view .LVU37
 270 00bc 970002E0 		mul	r2, r7, r0	@ tmp216, slice_y, _2
 271              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 272              		.loc 1 73 5 view .LVU38
 273 00c0 0C008DE5 		str	r0, [sp, #12]	@ _2,
 274 00c4 10108DE5 		str	r1, [sp, #16]	@ _5,
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 276              		.loc 1 71 105 view .LVU39
 277 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp217, tmp216,
 278              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 279              		.loc 1 73 5 view .LVU40
 280 00cc 04708DE5 		str	r7, [sp, #4]	@ slice_y,
 281              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 282              		.loc 1 71 130 view .LVU41
 283 00d0 910202E0 		mul	r2, r1, r2	@ _7, _5, tmp217
 284              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 285              		.loc 1 73 5 view .LVU42
 286 00d4 08608DE5 		str	r6, [sp, #8]	@ height,
 287              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 288              		.loc 1 71 23 view .LVU43
 289 00d8 025083E0 		add	r5, r3, r2	@ write_buffer_base, _1, _7
 290              	.LVL9:
 291              		.loc 1 73 5 is_stmt 1 view .LVU44
 292 00dc 00208DE5 		str	r2, [sp]	@ _7,
 293 00e0 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 294 00e4 0520A0E1 		mov	r2, r5	@, write_buffer_base
 295 00e8 78019FE5 		ldr	r0, .L27+4	@,
 296 00ec FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 79 5 view .LVU45
 299              		.loc 1 79 5 is_stmt 0 view .LVU46
 300 00f0 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00f4 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f8 570000DA 		ble	.L11		@,
 303 00fc 000056E3 		cmp	r6, #0	@ height,
 304 0100 5500000A 		beq	.L11		@,
 305 0104 043047E2 		sub	r3, r7, #4	@ tmp314, slice_y,
 306 0108 1C308DE5 		str	r3, [sp, #28]	@ tmp314, %sfp
 307              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 308              		.loc 1 79 11 view .LVU47
 309 010c 0030A0E3 		mov	r3, #0	@ w,
 310 0110 18308DE5 		str	r3, [sp, #24]	@ w, %sfp
 311              	.LVL11:
 312              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 313              		.loc 1 80 9 is_stmt 1 view .LVU48
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 314              		.loc 1 84 9 view .LVU49
 315              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 316              		.loc 1 80 64 is_stmt 0 view .LVU50
 317 0114 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 318 0118 18109DE5 		ldr	r1, [sp, #24]	@ w, %sfp
 319 011c 1C009DE5 		ldr	r0, [sp, #28]	@ tmp314, %sfp
 320 0120 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 321 0124 930123E0 		mla	r3, r3, r1, r0	@ tmp228, g_armwave_state.wave_stride, w, tmp314
 322              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 323              		.loc 1 84 16 view .LVU51
 324 0128 0020A0E3 		mov	r2, #0	@ yy,
 325 012c 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 326              	.LVL12:
 327              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 338              		.loc 1 87 18 is_stmt 0 view .LVU61
 339 0130 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _184, offset: 0B]
 340              	.LVL13:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 341              		.loc 1 89 13 is_stmt 1 view .LVU62
  91:armwave.c     ****                 
 342              		.loc 1 91 17 view .LVU63
  94:armwave.c     ****                     continue;
 343              		.loc 1 94 17 view .LVU64
 344              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 345              		.loc 1 102 34 is_stmt 0 view .LVU65
 346 0134 01B082E2 		add	fp, r2, #1	@ tmp258, yy,
 347              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 20 view .LVU66
 349 0138 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 350 013c 0110A003 		moveq	r1, #1	@ tmp231,
 351 0140 0010A013 		movne	r1, #0	@ tmp231,
 352              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 353              		.loc 1 94 19 view .LVU67
 354 0144 FF0057E3 		cmp	r7, #255	@ scale_value,
 355 0148 01108103 		orreq	r1, r1, #1	@,, tmp236, tmp231
 356 014c 000051E3 		cmp	r1, #0	@ tmp236,
 357              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 358              		.loc 1 102 34 view .LVU68
 359 0150 02A082E2 		add	r10, r2, #2	@ tmp279, yy,
 360 0154 039082E2 		add	r9, r2, #3	@ tmp298, yy,
 361              	.LVL14:
 362              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 363              		.loc 1 107 22 view .LVU69
 364 0158 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 365 015c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 19 view .LVU70
 368 0160 3400001A 		bne	.L20		@,
 369              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 370              		.loc 1 102 34 view .LVU71
 371 0164 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 372              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 373              		.loc 1 94 20 view .LVU72
 374 0168 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 375 016c 01E0A003 		moveq	lr, #1	@ tmp251,
 376              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 377              		.loc 1 102 34 view .LVU73
 378 0170 910201E0 		mul	r1, r1, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 379              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 380              		.loc 1 94 20 view .LVU74
 381 0174 00E0A013 		movne	lr, #0	@ tmp251,
 382              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 383              		.loc 1 94 19 view .LVU75
 384 0178 FF005CE3 		cmp	ip, #255	@ scale_value,
 385 017c 01E08E03 		orreq	lr, lr, #1	@,, tmp256, tmp251
 386 0180 00005EE3 		cmp	lr, #0	@ tmp256,
 387              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 388              		.loc 1 106 47 view .LVU76
 389 0184 40E094E5 		ldr	lr, [r4, #64]	@ tmp325, g_armwave_state.bitdepth_height
 390              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 391              		.loc 1 102 74 view .LVU77
 392 0188 2118A0E1 		lsr	r1, r1, #16	@ tmp240, tmp238,
 393              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 394              		.loc 1 106 47 view .LVU78
 395 018c 9E7121E0 		mla	r1, lr, r1, r7	@ tmp244, tmp325, tmp240, scale_value
 396 0190 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_81, *_81
 397 0194 01E08EE2 		add	lr, lr, #1	@ tmp247, *_81,
 398 0198 01E0C5E7 		strb	lr, [r5, r1]	@ tmp247, *_81
 399              	.LVL15:
 400              		.loc 1 107 17 is_stmt 1 view .LVU79
  91:armwave.c     ****                 
 401              		.loc 1 91 17 view .LVU80
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 17 view .LVU81
 403              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 404              		.loc 1 94 19 is_stmt 0 view .LVU82
 405 019c 2500001A 		bne	.L20		@,
 406              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 407              		.loc 1 102 34 view .LVU83
 408 01a0 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 409              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 410              		.loc 1 102 99 view .LVU84
 411 01a4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 20 view .LVU85
 414 01a8 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU86
 417 01ac 9E0B0BE0 		mul	fp, lr, fp	@ tmp259, g_armwave_state.cmp_x_bitdepth_scale, tmp258
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU87
 420 01b0 01E0A003 		moveq	lr, #1	@ tmp272,
 421 01b4 00E0A013 		movne	lr, #0	@ tmp272,
 422              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 423              		.loc 1 102 74 view .LVU88
 424 01b8 2BB8A0E1 		lsr	fp, fp, #16	@ tmp261, tmp259,
 425              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 426              		.loc 1 94 19 view .LVU89
 427 01bc FF0050E3 		cmp	r0, #255	@ scale_value,
 428 01c0 01E08E03 		orreq	lr, lr, #1	@,, tmp277, tmp272
 429              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 430              		.loc 1 106 47 view .LVU90
 431 01c4 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp265, g_armwave_state.bitdepth_height, tmp261, scale_value
 432              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 433              		.loc 1 94 19 view .LVU91
 434 01c8 00005EE3 		cmp	lr, #0	@ tmp277,
 435              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 436              		.loc 1 106 47 view .LVU92
 437 01cc 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_111, *_111
 438 01d0 011081E2 		add	r1, r1, #1	@ tmp268, *_111,
 439 01d4 0C10C5E7 		strb	r1, [r5, ip]	@ tmp268, *_111
 440              		.loc 1 107 17 is_stmt 1 view .LVU93
 441              	.LVL16:
  91:armwave.c     ****                 
 442              		.loc 1 91 17 view .LVU94
  94:armwave.c     ****                     continue;
 443              		.loc 1 94 17 view .LVU95
 444              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 445              		.loc 1 94 19 is_stmt 0 view .LVU96
 446 01d8 1600001A 		bne	.L20		@,
 447              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 448              		.loc 1 102 34 view .LVU97
 449 01dc 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 450              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 451              		.loc 1 102 99 view .LVU98
 452 01e0 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 20 view .LVU99
 455 01e4 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 456              	.LVL17:
 457              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 458              		.loc 1 102 34 view .LVU100
 459 01e8 910A0AE0 		mul	r10, r1, r10	@ tmp280, g_armwave_state.cmp_x_bitdepth_scale, tmp279
 460              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 461              		.loc 1 94 20 view .LVU101
 462 01ec 0110A003 		moveq	r1, #1	@ tmp292,
 463 01f0 0010A013 		movne	r1, #0	@ tmp292,
 464              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 465              		.loc 1 102 74 view .LVU102
 466 01f4 2AA8A0E1 		lsr	r10, r10, #16	@ tmp282, tmp280,
 467              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 468              		.loc 1 94 19 view .LVU103
 469 01f8 FF0053E3 		cmp	r3, #255	@ word,
 470 01fc 01108103 		orreq	r1, r1, #1	@,, tmp297, tmp292
 471              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 472              		.loc 1 106 47 view .LVU104
 473 0200 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp286, g_armwave_state.bitdepth_height, tmp282, scale_value
 474              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 475              		.loc 1 94 19 view .LVU105
 476 0204 000051E3 		cmp	r1, #0	@ tmp297,
 477              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 478              		.loc 1 106 47 view .LVU106
 479 0208 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_141, *_141
 480 020c 011081E2 		add	r1, r1, #1	@ tmp289, *_141,
 481 0210 0010C5E7 		strb	r1, [r5, r0]	@ tmp289, *_141
 482              		.loc 1 107 17 is_stmt 1 view .LVU107
 483              	.LVL18:
  91:armwave.c     ****                 
 484              		.loc 1 91 17 view .LVU108
  94:armwave.c     ****                     continue;
 485              		.loc 1 94 17 view .LVU109
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 is_stmt 0 view .LVU110
 488 0214 0700001A 		bne	.L20		@,
 489              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 490              		.loc 1 102 34 view .LVU111
 491 0218 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 492              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 493              		.loc 1 102 99 view .LVU112
 494 021c 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 495              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 496              		.loc 1 102 34 view .LVU113
 497 0220 910909E0 		mul	r9, r1, r9	@ tmp300, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 498              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 499              		.loc 1 102 74 view .LVU114
 500 0224 2998A0E1 		lsr	r9, r9, #16	@ tmp302, tmp300,
 501              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 502              		.loc 1 106 47 view .LVU115
 503 0228 903923E0 		mla	r3, r0, r9, r3	@ tmp306, g_armwave_state.bitdepth_height, tmp302, word
 504 022c 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_171, *_171
 505 0230 011081E2 		add	r1, r1, #1	@ tmp309, *_171,
 506 0234 0310C5E7 		strb	r1, [r5, r3]	@ tmp309, *_171
 507              		.loc 1 107 17 is_stmt 1 view .LVU116
 508              	.LVL19:
 509              	.L20:
 510              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 511              		.loc 1 84 37 is_stmt 0 view .LVU117
 512 0238 042082E2 		add	r2, r2, #4	@ yy, yy,
 513              	.LVL20:
 514              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 515              		.loc 1 84 9 view .LVU118
 516 023c 020056E1 		cmp	r6, r2	@ height, yy
 517 0240 BAFFFF8A 		bhi	.L17		@,
 518              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 79 44 view .LVU119
 520 0244 18209DE5 		ldr	r2, [sp, #24]	@ w, %sfp
 521              	.LVL21:
 522              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 79 5 view .LVU120
 524 0248 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 525              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 79 44 view .LVU121
 527 024c 012082E2 		add	r2, r2, #1	@ w, w,
 528              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 79 5 view .LVU122
 530 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 531              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 79 44 view .LVU123
 533 0254 18208DE5 		str	r2, [sp, #24]	@ w, %sfp
 534              	.LVL22:
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU124
 537 0258 ADFFFFBA 		blt	.L18		@,
 538              	.LVL23:
 539              	.L11:
 540              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 541              		.loc 1 111 1 view .LVU125
 542 025c 24D08DE2 		add	sp, sp, #36	@,,
 543              		.cfi_def_cfa_offset 36
 544              		@ sp needed	@
 545 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 546              	.LVL24:
 547              	.L28:
 548              		.loc 1 111 1 view .LVU126
 549              		.align	2
 550              	.L27:
 551 0264 00000000 		.word	g_armwave_state
 552 0268 20000000 		.word	.LC2
 553              		.cfi_endproc
 554              	.LFE59:
 556              		.align	2
 557              		.global	armwave_fill_pixbuf_scaled
 558              		.syntax unified
 559              		.arm
 560              		.fpu vfp
 562              	armwave_fill_pixbuf_scaled:
 563              	.LVL25:
 564              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 565              		.loc 1 173 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 569              		.loc 1 174 5 view .LVU128
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 570              		.loc 1 176 5 view .LVU129
 177:armwave.c     ****     uint8_t r, g, b, value; 
 571              		.loc 1 177 5 view .LVU130
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 572              		.loc 1 179 5 view .LVU131
 573              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 574              		.loc 1 173 1 is_stmt 0 view .LVU132
 575 026c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 576              		.cfi_def_cfa_offset 36
 577              		.cfi_offset 4, -36
 578              		.cfi_offset 5, -32
 579              		.cfi_offset 6, -28
 580              		.cfi_offset 7, -24
 581              		.cfi_offset 8, -20
 582              		.cfi_offset 9, -16
 583              		.cfi_offset 10, -12
 584              		.cfi_offset 11, -8
 585              		.cfi_offset 14, -4
 586              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 587              		.loc 1 183 5 view .LVU133
 588 0270 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 589              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 590              		.loc 1 179 15 view .LVU134
 591 0274 5C519FE5 		ldr	r5, .L51	@ tmp221,
 592              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 593              		.loc 1 173 1 view .LVU135
 594 0278 0CD04DE2 		sub	sp, sp, #12	@,,
 595              		.cfi_def_cfa_offset 48
 596              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 597              		.loc 1 179 15 view .LVU136
 598 027c 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 599              	.LVL26:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 600              		.loc 1 180 5 is_stmt 1 view .LVU137
 181:armwave.c     **** 
 601              		.loc 1 181 5 view .LVU138
 602              		.loc 1 183 5 view .LVU139
 603 0280 4F00000A 		beq	.L48		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this
 186:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 604              		.loc 1 186 5 view .LVU140
 605              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 606              		.loc 1 186 59 is_stmt 0 view .LVU141
 607 0284 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 608 0288 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 609              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 186 5 view .LVU142
 611 028c 0110A0E3 		mov	r1, #1	@,
 612              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 186 59 view .LVU143
 614 0290 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 615              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 186 5 view .LVU144
 617 0294 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 618 0298 FEFFFFEB 		bl	memset		@
 619              	.LVL27:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 620              		.loc 1 188 5 is_stmt 1 view .LVU145
 621              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 622              		.loc 1 188 10 is_stmt 0 view .LVU146
 623 029c 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 624 02a0 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 625              	.LVL28:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 626              		.loc 1 191 5 is_stmt 1 view .LVU147
 627              		.loc 1 191 5 is_stmt 0 view .LVU148
 628 02a4 000058E3 		cmp	r8, #0	@ npix,
 629 02a8 0C0000DA 		ble	.L29		@,
 630              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 631              		.loc 1 204 52 view .LVU149
 632 02ac FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 633              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 203 52 view .LVU150
 635 02b0 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 636              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Do line scaling as necessary.
 215:armwave.c     ****                     /*
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 221:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                     */
 225:armwave.c     **** 
 226:armwave.c     ****                     nsub = n + w;
 227:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 637              		.loc 1 227 57 view .LVU151
 638 02b4 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 639              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 640              		.loc 1 204 52 view .LVU152
 641 02b8 00308DE5 		str	r3, [sp]	@ _15, %sfp
 642              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 643              		.loc 1 205 52 view .LVU153
 644 02bc F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 645              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 646              		.loc 1 191 11 view .LVU154
 647 02c0 0010A0E3 		mov	r1, #0	@ n,
 648              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 205 52 view .LVU155
 650 02c4 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 651              	.LVL29:
 652              	.L36:
 195:armwave.c     **** 
 653              		.loc 1 195 9 is_stmt 1 view .LVU156
 654              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 655              		.loc 1 195 19 is_stmt 0 view .LVU157
 656 02c8 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 657              	.LVL30:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 658              		.loc 1 197 9 is_stmt 1 view .LVU158
 659              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 660              		.loc 1 197 11 is_stmt 0 view .LVU159
 661 02cc 000053E3 		cmp	r3, #0	@ wave_word,
 662 02d0 0400001A 		bne	.L49		@,
 663              	.L32:
 664              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 191 28 view .LVU160
 666 02d4 041081E2 		add	r1, r1, #4	@ n, n,
 667              	.LVL31:
 668              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 669              		.loc 1 191 5 view .LVU161
 670 02d8 010058E1 		cmp	r8, r1	@ npix, n
 671 02dc F9FFFFCA 		bgt	.L36		@,
 672              	.LVL32:
 673              	.L29:
 674              	@ armwave.c:239: }
 228:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 229:armwave.c     ****                     xx = (nsub >> 8);
 230:armwave.c     **** 
 231:armwave.c     ****                     for(y = yy; y < ye; y++) {
 232:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 233:armwave.c     ****                         *(out_buffer_base + offset) = word;
 234:armwave.c     ****                     }
 235:armwave.c     ****                 }
 236:armwave.c     ****             }
 237:armwave.c     ****         }
 238:armwave.c     ****     }
 239:armwave.c     **** }
 675              		.loc 1 239 1 view .LVU162
 676 02e0 0CD08DE2 		add	sp, sp, #12	@,,
 677              		.cfi_remember_state
 678              		.cfi_def_cfa_offset 36
 679              		@ sp needed	@
 680 02e4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 681              	.LVL33:
 682              	.L49:
 683              		.cfi_restore_state
 684              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 685              		.loc 1 202 19 view .LVU163
 686 02e8 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 687              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 688              		.loc 1 198 19 view .LVU164
 689 02ec 0070A0E3 		mov	r7, #0	@ w,
 690              	.LVL34:
 199:armwave.c     ****                 wave_word >>= 8;
 691              		.loc 1 199 17 is_stmt 1 view .LVU165
 200:armwave.c     **** 
 692              		.loc 1 200 17 view .LVU166
 693              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 694              		.loc 1 200 27 is_stmt 0 view .LVU167
 695 02f0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 696              	.LVL35:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 202 17 is_stmt 1 view .LVU168
 698              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 699              		.loc 1 202 19 is_stmt 0 view .LVU169
 700 02f4 0500001A 		bne	.L50		@,
 701              	.L33:
 702              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 198 32 view .LVU170
 704 02f8 017087E2 		add	r7, r7, #1	@ w, w,
 705              	.LVL36:
 706              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 707              		.loc 1 198 13 view .LVU171
 708 02fc 040057E3 		cmp	r7, #4	@ w,
 709 0300 F3FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 710              		.loc 1 199 17 is_stmt 1 view .LVU172
 711              	.LVL37:
 200:armwave.c     **** 
 712              		.loc 1 200 17 view .LVU173
 713              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 202 19 is_stmt 0 view .LVU174
 715 0304 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 716              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 717              		.loc 1 200 27 view .LVU175
 718 0308 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 719              	.LVL38:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 202 17 is_stmt 1 view .LVU176
 721              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 722              		.loc 1 202 19 is_stmt 0 view .LVU177
 723 030c F9FFFF0A 		beq	.L33		@,
 724              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 725              		.loc 1 203 21 is_stmt 1 view .LVU178
 726              	.LVL39:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 727              		.loc 1 204 21 view .LVU179
 205:armwave.c     **** 
 728              		.loc 1 205 21 view .LVU180
 207:armwave.c     ****                     g = MIN(gg, 255);
 729              		.loc 1 207 21 view .LVU181
 208:armwave.c     ****                     b = MIN(bb, 255);
 730              		.loc 1 208 21 view .LVU182
 209:armwave.c     **** 
 731              		.loc 1 209 21 view .LVU183
 212:armwave.c     **** 
 732              		.loc 1 212 21 view .LVU184
 733              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 734              		.loc 1 205 55 is_stmt 0 view .LVU185
 735 0310 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 736 0314 07E081E0 		add	lr, r1, r7	@ _126, n, w
 737 0318 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 738              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 227 32 view .LVU186
 740 031c 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 741              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 742              		.loc 1 228 41 view .LVU187
 743 0320 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 744              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 745              		.loc 1 227 40 view .LVU188
 746 0324 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 747              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 748              		.loc 1 228 41 view .LVU189
 749 0328 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 750              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 204 55 view .LVU190
 752 032c 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 753              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 754              		.loc 1 205 24 view .LVU191
 755 0330 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 756              	.LVL40:
 757              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 227 40 view .LVU192
 759 0334 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 760              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 228 46 view .LVU193
 762 0338 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 763              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 764              		.loc 1 204 55 view .LVU194
 765 033c 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 766              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 203 55 view .LVU195
 768 0340 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 769              	.LVL41:
 770              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 771              		.loc 1 209 25 view .LVU196
 772 0344 FF005AE3 		cmp	r10, #255	@ bb,
 773              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 204 24 view .LVU197
 775 0348 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 776              	.LVL42:
 777              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 227 40 view .LVU198
 779 034c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 780              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 781              		.loc 1 228 46 view .LVU199
 782 0350 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 783              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 784              		.loc 1 203 24 view .LVU200
 785 0354 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 786              	.LVL43:
 787              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 788              		.loc 1 209 25 view .LVU201
 789 0358 FFA0A0A3 		movge	r10, #255	@ bb,
 790              	.LVL44:
 791              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 792              		.loc 1 208 25 view .LVU202
 793 035c FF005CE3 		cmp	ip, #255	@ gg,
 794 0360 FFC0A0A3 		movge	ip, #255	@ gg,
 795              	.LVL45:
 796              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 797              		.loc 1 207 25 view .LVU203
 798 0364 FF0050E3 		cmp	r0, #255	@ rr,
 799              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 800              		.loc 1 212 56 view .LVU204
 801 0368 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 802              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 227 24 view .LVU205
 804 036c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 805              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 806              		.loc 1 207 25 view .LVU206
 807 0370 FF00A0A3 		movge	r0, #255	@ rr,
 808              	.LVL46:
 809              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 810              		.loc 1 212 44 view .LVU207
 811 0374 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 812 0378 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 813              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 814              		.loc 1 212 56 view .LVU208
 815 037c 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 816              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 817              		.loc 1 212 51 view .LVU209
 818 0380 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 819              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 820              		.loc 1 212 62 view .LVU210
 821 0384 7000EFE6 		uxtb	r0, r0	@ rr, rr
 822 0388 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 823              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 227 24 view .LVU211
 825 038c 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 826              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 827              		.loc 1 228 24 view .LVU212
 828 0390 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 829              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 830              		.loc 1 212 26 view .LVU213
 831 0394 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 832              	.LVL47:
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 833              		.loc 1 226 21 is_stmt 1 view .LVU214
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 834              		.loc 1 227 21 view .LVU215
 228:armwave.c     ****                     xx = (nsub >> 8);
 835              		.loc 1 228 21 view .LVU216
 836              	@ armwave.c:229:                     xx = (nsub >> 8);
 229:armwave.c     **** 
 837              		.loc 1 229 32 is_stmt 0 view .LVU217
 838 0398 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 839              	.LVL48:
 840              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 841              		.loc 1 228 24 view .LVU218
 842 039c 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 843              	.LVL49:
 229:armwave.c     **** 
 844              		.loc 1 229 21 is_stmt 1 view .LVU219
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 231 21 view .LVU220
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 231 21 is_stmt 0 view .LVU221
 847 03a0 090052E1 		cmp	r2, r9	@ yy, ye
 848 03a4 D3FFFF2A 		bcs	.L33		@,
 849              	.LVL50:
 850              	.L34:
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 851              		.loc 1 232 25 is_stmt 1 discriminator 3 view .LVU222
 233:armwave.c     ****                     }
 852              		.loc 1 233 25 discriminator 3 view .LVU223
 853              	@ armwave.c:232:                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 854              		.loc 1 232 43 is_stmt 0 discriminator 3 view .LVU224
 855 03a8 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 856              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 857              		.loc 1 233 43 discriminator 3 view .LVU225
 858 03ac 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 859              	.LVL51:
 860              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 231 42 discriminator 3 view .LVU226
 862 03b0 012082E2 		add	r2, r2, #1	@ yy, yy,
 863              	.LVL52:
 864              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 231 21 discriminator 3 view .LVU227
 866 03b4 020059E1 		cmp	r9, r2	@ ye, yy
 867              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 868              		.loc 1 233 53 discriminator 3 view .LVU228
 869 03b8 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 870              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 231 21 discriminator 3 view .LVU229
 872 03bc F9FFFF1A 		bne	.L34		@,
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 231 21 discriminator 3 view .LVU230
 874 03c0 CCFFFFEA 		b	.L33		@
 875              	.LVL53:
 876              	.L48:
 183:armwave.c     **** 
 877              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU231
 878 03c4 10309FE5 		ldr	r3, .L51+4	@,
 879 03c8 B720A0E3 		mov	r2, #183	@,
 880 03cc 0C109FE5 		ldr	r1, .L51+8	@,
 881 03d0 0C009FE5 		ldr	r0, .L51+12	@,
 882              	.LVL54:
 183:armwave.c     **** 
 883              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU232
 884 03d4 FEFFFFEB 		bl	__assert_fail		@
 885              	.LVL55:
 886              	.L52:
 887              		.align	2
 888              	.L51:
 889 03d8 00000000 		.word	g_armwave_state
 890 03dc 00000000 		.word	.LANCHOR0
 891 03e0 78000000 		.word	.LC3
 892 03e4 84000000 		.word	.LC4
 893              		.cfi_endproc
 894              	.LFE60:
 896              		.align	2
 897              		.global	armwave_generate
 898              		.syntax unified
 899              		.arm
 900              		.fpu vfp
 902              	armwave_generate:
 903              	.LFB61:
 240:armwave.c     **** 
 241:armwave.c     **** /*
 242:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 243:armwave.c     ****  */
 244:armwave.c     **** void armwave_generate()
 245:armwave.c     **** {
 904              		.loc 1 245 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 246:armwave.c     ****     uint32_t yy;
 908              		.loc 1 246 5 view .LVU234
 247:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 909              		.loc 1 247 5 view .LVU235
 910              	.LVL56:
 248:armwave.c     **** 
 249:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 911              		.loc 1 249 5 view .LVU236
 912              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 913              		.loc 1 245 1 is_stmt 0 view .LVU237
 914 03e8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 915              		.cfi_def_cfa_offset 36
 916              		.cfi_offset 4, -36
 917              		.cfi_offset 5, -32
 918              		.cfi_offset 6, -28
 919              		.cfi_offset 7, -24
 920              		.cfi_offset 8, -20
 921              		.cfi_offset 9, -16
 922              		.cfi_offset 10, -12
 923              		.cfi_offset 11, -8
 924              		.cfi_offset 14, -4
 925              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 926              		.loc 1 249 5 view .LVU238
 927 03ec 0010A0E3 		mov	r1, #0	@,
 928              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 929              		.loc 1 249 58 view .LVU239
 930 03f0 E8919FE5 		ldr	r9, .L73	@ tmp330,
 931              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 932              		.loc 1 245 1 view .LVU240
 933 03f4 2CD04DE2 		sub	sp, sp, #44	@,,
 934              		.cfi_def_cfa_offset 80
 935              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 250:armwave.c     **** 
 251:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 252:armwave.c     ****     for(yy = 0; yy < 10; yy++) {
 936              		.loc 1 252 12 view .LVU241
 937 03f8 00B0A0E3 		mov	fp, #0	@ yy,
 938              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 249:armwave.c     **** 
 939              		.loc 1 249 5 view .LVU242
 940 03fc 502099E5 		ldr	r2, [r9, #80]	@, g_armwave_state.ch_buff_size
 941 0400 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 942 0404 FEFFFFEB 		bl	memset		@
 943              	.LVL57:
 944              		.loc 1 252 5 is_stmt 1 view .LVU243
 945              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 946              		.loc 1 252 12 is_stmt 0 view .LVU244
 947 0408 0B80A0E1 		mov	r8, fp	@ yy, yy
 948              	.LVL58:
 949              	.L55:
 253:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 254:armwave.c     **** 
 255:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 950              		.loc 1 255 9 is_stmt 1 discriminator 3 view .LVU245
 951 040c 445099E5 		ldr	r5, [r9, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 952              	.LBB10:
 953              	.LBB11:
 954              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 955              		.loc 1 71 82 is_stmt 0 discriminator 3 view .LVU246
 956 0410 241099E5 		ldr	r1, [r9, #36]	@ _16, g_armwave_state.cmp_x_bitdepth_scale
 957              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 958              		.loc 1 71 147 discriminator 3 view .LVU247
 959 0414 402099E5 		ldr	r2, [r9, #64]	@ _19, g_armwave_state.bitdepth_height
 960              	.LBE11:
 961              	.LBE10:
 962              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 963              		.loc 1 255 9 discriminator 3 view .LVU248
 964 0418 950805E0 		mul	r5, r5, r8	@ _6, g_armwave_state.slice_height, yy
 965              	.LBB15:
 966              	.LBB12:
 967              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 968              		.loc 1 73 5 discriminator 3 view .LVU249
 969 041c 10208DE5 		str	r2, [sp, #16]	@ _19,
 970              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 971              		.loc 1 71 40 discriminator 3 view .LVU250
 972 0420 044099E5 		ldr	r4, [r9, #4]	@ _15, g_armwave_state.ch1_buffer
 973              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 974              		.loc 1 71 65 discriminator 3 view .LVU251
 975 0424 910503E0 		mul	r3, r1, r5	@ tmp233, _16, _6
 976              	.LBE12:
 977              	.LBE15:
 978              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 979              		.loc 1 255 9 discriminator 3 view .LVU252
 980 0428 480099E5 		ldr	r0, [r9, #72]	@ _8, g_armwave_state.slice_record_height
 981              	.LBB16:
 982              	.LBB13:
 983              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 984              		.loc 1 73 5 discriminator 3 view .LVU253
 985 042c 0C108DE5 		str	r1, [sp, #12]	@ _16,
 986              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 987              		.loc 1 71 105 discriminator 3 view .LVU254
 988 0430 2338A0E1 		lsr	r3, r3, #16	@ tmp234, tmp233,
 989              	.LBE13:
 990              	.LBE16:
 991              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 992              		.loc 1 255 9 discriminator 3 view .LVU255
 993 0434 1C008DE5 		str	r0, [sp, #28]	@ _8, %sfp
 994              	.LVL59:
 995              	.LBB17:
 996              	.LBI10:
  62:armwave.c     **** {
 997              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU256
 998              	.LBB14:
  64:armwave.c     ****     uint32_t value, word;
 999              		.loc 1 64 5 discriminator 3 view .LVU257
  65:armwave.c     ****     uint8_t *wave_base;
 1000              		.loc 1 65 5 discriminator 3 view .LVU258
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1001              		.loc 1 66 5 discriminator 3 view .LVU259
  67:armwave.c     ****     uint8_t *write_buffer;
 1002              		.loc 1 67 5 discriminator 3 view .LVU260
  68:armwave.c     **** 
 1003              		.loc 1 68 5 discriminator 3 view .LVU261
  71:armwave.c     **** 
 1004              		.loc 1 71 5 discriminator 3 view .LVU262
 1005              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1006              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU263
 1007 0438 920302E0 		mul	r2, r2, r3	@ _21, _19, tmp234
 1008              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1009              		.loc 1 73 5 discriminator 3 view .LVU264
 1010 043c 0430A0E1 		mov	r3, r4	@, _15
 1011              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1012              		.loc 1 71 23 discriminator 3 view .LVU265
 1013 0440 024084E0 		add	r4, r4, r2	@ write_buffer_base, _15, _21
 1014              	.LVL60:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1015              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU266
 1016 0444 00208DE5 		str	r2, [sp]	@ _21,
 1017 0448 08008DE5 		str	r0, [sp, #8]	@ _8,
 1018 044c 04508DE5 		str	r5, [sp, #4]	@ _6,
 1019 0450 0420A0E1 		mov	r2, r4	@, write_buffer_base
 1020 0454 141099E5 		ldr	r1, [r9, #20]	@, g_armwave_state.wave_buffer
 1021 0458 84019FE5 		ldr	r0, .L73+4	@,
 1022              	.LVL61:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1023              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU267
 1024 045c FEFFFFEB 		bl	printf		@
 1025              	.LVL62:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1026              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU268
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1027              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU269
 1028 0460 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1029 0464 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 1030 0468 570000DA 		ble	.L63		@,
 1031 046c 1C309DE5 		ldr	r3, [sp, #28]	@ _8, %sfp
 1032 0470 000053E3 		cmp	r3, #0	@ _8,
 1033 0474 5400000A 		beq	.L63		@,
 1034              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1035              		.loc 1 79 11 view .LVU270
 1036 0478 0060A0E3 		mov	r6, #0	@ w,
 1037 047c 043045E2 		sub	r3, r5, #4	@ tmp331, _6,
 1038 0480 20308DE5 		str	r3, [sp, #32]	@ tmp331, %sfp
 1039 0484 24808DE5 		str	r8, [sp, #36]	@ yy, %sfp
 1040              	.LVL63:
 1041              	.L62:
  80:armwave.c     **** 
 1042              		.loc 1 80 9 is_stmt 1 view .LVU271
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 84 9 view .LVU272
 1044              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1045              		.loc 1 80 64 is_stmt 0 view .LVU273
 1046 0488 343099E5 		ldr	r3, [r9, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1047 048c 20209DE5 		ldr	r2, [sp, #32]	@ tmp331, %sfp
 1048 0490 14E099E5 		ldr	lr, [r9, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1049 0494 932623E0 		mla	r3, r3, r6, r2	@ tmp245, g_armwave_state.wave_stride, w, tmp331
 1050              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1051              		.loc 1 84 16 view .LVU274
 1052 0498 0010A0E3 		mov	r1, #0	@ yy,
 1053 049c 03E08EE0 		add	lr, lr, r3	@ ivtmp.66, g_armwave_state.wave_buffer, tmp245
 1054              	.LVL64:
 1055              	.L61:
  87:armwave.c     **** 
 1056              		.loc 1 87 13 is_stmt 1 view .LVU275
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1057              		.loc 1 101 17 view .LVU276
 106:armwave.c     ****                 word >>= 8;
 1058              		.loc 1 106 17 view .LVU277
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1059              		.loc 1 101 17 view .LVU278
 106:armwave.c     ****                 word >>= 8;
 1060              		.loc 1 106 17 view .LVU279
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1061              		.loc 1 101 17 view .LVU280
 106:armwave.c     ****                 word >>= 8;
 1062              		.loc 1 106 17 view .LVU281
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1063              		.loc 1 101 17 view .LVU282
 106:armwave.c     ****                 word >>= 8;
 1064              		.loc 1 106 17 view .LVU283
 1065              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1066              		.loc 1 87 18 is_stmt 0 view .LVU284
 1067 04a0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _251, offset: 0B]
 1068              	.LVL65:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1069              		.loc 1 89 13 is_stmt 1 view .LVU285
  91:armwave.c     ****                 
 1070              		.loc 1 91 17 view .LVU286
  94:armwave.c     ****                     continue;
 1071              		.loc 1 94 17 view .LVU287
 1072              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1073              		.loc 1 102 34 is_stmt 0 view .LVU288
 1074 04a4 01B081E2 		add	fp, r1, #1	@ tmp275, yy,
 1075              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1076              		.loc 1 94 20 view .LVU289
 1077 04a8 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 1078 04ac 0120A003 		moveq	r2, #1	@ tmp248,
 1079 04b0 0020A013 		movne	r2, #0	@ tmp248,
 1080              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1081              		.loc 1 94 19 view .LVU290
 1082 04b4 FF0057E3 		cmp	r7, #255	@ scale_value,
 1083 04b8 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1084 04bc 000052E3 		cmp	r2, #0	@ tmp253,
 1085              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1086              		.loc 1 102 34 view .LVU291
 1087 04c0 02A081E2 		add	r10, r1, #2	@ tmp296, yy,
 1088 04c4 038081E2 		add	r8, r1, #3	@ tmp316, yy,
 1089              	.LVL66:
 1090              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1091              		.loc 1 107 22 view .LVU292
 1092 04c8 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 1093 04cc 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 1094              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1095              		.loc 1 94 19 view .LVU293
 1096 04d0 3400001A 		bne	.L64		@,
 1097              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1098              		.loc 1 102 34 view .LVU294
 1099 04d4 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1100              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1101              		.loc 1 94 20 view .LVU295
 1102 04d8 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 1103 04dc 0150A003 		moveq	r5, #1	@ tmp268,
 1104              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1105              		.loc 1 102 34 view .LVU296
 1106 04e0 920102E0 		mul	r2, r2, r1	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1107              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1108              		.loc 1 94 20 view .LVU297
 1109 04e4 0050A013 		movne	r5, #0	@ tmp268,
 1110              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1111              		.loc 1 94 19 view .LVU298
 1112 04e8 FF005CE3 		cmp	ip, #255	@ scale_value,
 1113 04ec 01508503 		orreq	r5, r5, #1	@,, tmp273, tmp268
 1114 04f0 000055E3 		cmp	r5, #0	@ tmp273,
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU299
 1117 04f4 405099E5 		ldr	r5, [r9, #64]	@ tmp346, g_armwave_state.bitdepth_height
 1118              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1119              		.loc 1 102 74 view .LVU300
 1120 04f8 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1121              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1122              		.loc 1 106 47 view .LVU301
 1123 04fc 957222E0 		mla	r2, r5, r2, r7	@ tmp261, tmp346, tmp257, scale_value
 1124 0500 0250D4E7 		ldrb	r5, [r4, r2]	@ zero_extendqisi2	@ *_91, *_91
 1125 0504 015085E2 		add	r5, r5, #1	@ tmp264, *_91,
 1126 0508 0250C4E7 		strb	r5, [r4, r2]	@ tmp264, *_91
 1127              	.LVL67:
 107:armwave.c     ****             }
 1128              		.loc 1 107 17 is_stmt 1 view .LVU302
  91:armwave.c     ****                 
 1129              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1130              		.loc 1 94 17 view .LVU304
 1131              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 19 is_stmt 0 view .LVU305
 1133 050c 2500001A 		bne	.L64		@,
 1134              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1135              		.loc 1 102 34 view .LVU306
 1136 0510 245099E5 		ldr	r5, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1137              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1138              		.loc 1 102 99 view .LVU307
 1139 0514 402099E5 		ldr	r2, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1140              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1141              		.loc 1 94 20 view .LVU308
 1142 0518 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 1143              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1144              		.loc 1 102 34 view .LVU309
 1145 051c 950B0BE0 		mul	fp, r5, fp	@ tmp276, g_armwave_state.cmp_x_bitdepth_scale, tmp275
 1146              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1147              		.loc 1 94 20 view .LVU310
 1148 0520 0150A003 		moveq	r5, #1	@ tmp289,
 1149 0524 0050A013 		movne	r5, #0	@ tmp289,
 1150              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1151              		.loc 1 102 74 view .LVU311
 1152 0528 2BB8A0E1 		lsr	fp, fp, #16	@ tmp278, tmp276,
 1153              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1154              		.loc 1 94 19 view .LVU312
 1155 052c FF0050E3 		cmp	r0, #255	@ scale_value,
 1156 0530 01508503 		orreq	r5, r5, #1	@,, tmp294, tmp289
 1157              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 47 view .LVU313
 1159 0534 92CB2CE0 		mla	ip, r2, fp, ip	@ tmp282, g_armwave_state.bitdepth_height, tmp278, scale_value
 1160              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1161              		.loc 1 94 19 view .LVU314
 1162 0538 000055E3 		cmp	r5, #0	@ tmp294,
 1163              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1164              		.loc 1 106 47 view .LVU315
 1165 053c 0C20D4E7 		ldrb	r2, [r4, ip]	@ zero_extendqisi2	@ *_121, *_121
 1166 0540 012082E2 		add	r2, r2, #1	@ tmp285, *_121,
 1167 0544 0C20C4E7 		strb	r2, [r4, ip]	@ tmp285, *_121
 107:armwave.c     ****             }
 1168              		.loc 1 107 17 is_stmt 1 view .LVU316
 1169              	.LVL68:
  91:armwave.c     ****                 
 1170              		.loc 1 91 17 view .LVU317
  94:armwave.c     ****                     continue;
 1171              		.loc 1 94 17 view .LVU318
 1172              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1173              		.loc 1 94 19 is_stmt 0 view .LVU319
 1174 0548 1600001A 		bne	.L64		@,
 1175              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1176              		.loc 1 102 34 view .LVU320
 1177 054c 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1178              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1179              		.loc 1 102 99 view .LVU321
 1180 0550 40C099E5 		ldr	ip, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1181              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1182              		.loc 1 94 20 view .LVU322
 1183 0554 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1184              	.LVL69:
 1185              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1186              		.loc 1 102 34 view .LVU323
 1187 0558 920A0AE0 		mul	r10, r2, r10	@ tmp297, g_armwave_state.cmp_x_bitdepth_scale, tmp296
 1188              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1189              		.loc 1 94 20 view .LVU324
 1190 055c 0120A003 		moveq	r2, #1	@ tmp309,
 1191 0560 0020A013 		movne	r2, #0	@ tmp309,
 1192              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1193              		.loc 1 102 74 view .LVU325
 1194 0564 2AA8A0E1 		lsr	r10, r10, #16	@ tmp299, tmp297,
 1195              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1196              		.loc 1 94 19 view .LVU326
 1197 0568 FF0053E3 		cmp	r3, #255	@ word,
 1198 056c 01208203 		orreq	r2, r2, #1	@,, tmp314, tmp309
 1199              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1200              		.loc 1 106 47 view .LVU327
 1201 0570 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp303, g_armwave_state.bitdepth_height, tmp299, scale_value
 1202              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1203              		.loc 1 94 19 view .LVU328
 1204 0574 000052E3 		cmp	r2, #0	@ tmp314,
 1205              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1206              		.loc 1 106 47 view .LVU329
 1207 0578 0020D4E7 		ldrb	r2, [r4, r0]	@ zero_extendqisi2	@ *_151, *_151
 1208 057c 012082E2 		add	r2, r2, #1	@ tmp306, *_151,
 1209 0580 0020C4E7 		strb	r2, [r4, r0]	@ tmp306, *_151
 107:armwave.c     ****             }
 1210              		.loc 1 107 17 is_stmt 1 view .LVU330
 1211              	.LVL70:
  91:armwave.c     ****                 
 1212              		.loc 1 91 17 view .LVU331
  94:armwave.c     ****                     continue;
 1213              		.loc 1 94 17 view .LVU332
 1214              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1215              		.loc 1 94 19 is_stmt 0 view .LVU333
 1216 0584 0700001A 		bne	.L64		@,
 1217              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1218              		.loc 1 102 34 view .LVU334
 1219 0588 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1220              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1221              		.loc 1 102 99 view .LVU335
 1222 058c 400099E5 		ldr	r0, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1223              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1224              		.loc 1 102 34 view .LVU336
 1225 0590 920808E0 		mul	r8, r2, r8	@ tmp317, g_armwave_state.cmp_x_bitdepth_scale, tmp316
 1226              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1227              		.loc 1 102 74 view .LVU337
 1228 0594 2888A0E1 		lsr	r8, r8, #16	@ tmp319, tmp317,
 1229              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1230              		.loc 1 106 47 view .LVU338
 1231 0598 903823E0 		mla	r3, r0, r8, r3	@ tmp323, g_armwave_state.bitdepth_height, tmp319, word
 1232 059c 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_181, *_181
 1233 05a0 012082E2 		add	r2, r2, #1	@ tmp326, *_181,
 1234 05a4 0320C4E7 		strb	r2, [r4, r3]	@ tmp326, *_181
 107:armwave.c     ****             }
 1235              		.loc 1 107 17 is_stmt 1 view .LVU339
 1236              	.LVL71:
 1237              	.L64:
 1238              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1239              		.loc 1 84 9 is_stmt 0 view .LVU340
 1240 05a8 1C309DE5 		ldr	r3, [sp, #28]	@ _8, %sfp
 1241              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1242              		.loc 1 84 37 view .LVU341
 1243 05ac 041081E2 		add	r1, r1, #4	@ yy, yy,
 1244              	.LVL72:
 1245              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1246              		.loc 1 84 9 view .LVU342
 1247 05b0 010053E1 		cmp	r3, r1	@ _8, yy
 1248 05b4 B9FFFF8A 		bhi	.L61		@,
 1249              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1250              		.loc 1 79 5 view .LVU343
 1251 05b8 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1252              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1253              		.loc 1 79 44 view .LVU344
 1254 05bc 016086E2 		add	r6, r6, #1	@ w, w,
 1255              	.LVL73:
 1256              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1257              		.loc 1 79 5 view .LVU345
 1258 05c0 030056E1 		cmp	r6, r3	@ w, g_armwave_state.waves
 1259 05c4 AFFFFFBA 		blt	.L62		@,
 1260 05c8 24809DE5 		ldr	r8, [sp, #36]	@ yy, %sfp
 1261              	.LVL74:
 1262              	.L63:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1263              		.loc 1 79 5 view .LVU346
 1264              	.LBE14:
 1265              	.LBE17:
 256:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 1266              		.loc 1 256 9 is_stmt 1 view .LVU347
 257:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 1267              		.loc 1 257 9 view .LVU348
 1268              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1269              		.loc 1 252 28 is_stmt 0 view .LVU349
 1270 05cc 018088E2 		add	r8, r8, #1	@ yy, yy,
 1271              	.LVL75:
 1272              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1273              		.loc 1 252 5 view .LVU350
 1274 05d0 0A0058E3 		cmp	r8, #10	@ yy,
 1275 05d4 8CFFFF1A 		bne	.L55		@,
 1276              	@ armwave.c:261: }
 258:armwave.c     ****     }
 259:armwave.c     **** 
 260:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 261:armwave.c     **** }
 1277              		.loc 1 261 1 view .LVU351
 1278 05d8 2CD08DE2 		add	sp, sp, #44	@,,
 1279              		.cfi_def_cfa_offset 36
 1280              		@ sp needed	@
 1281 05dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1282              	.LVL76:
 1283              	.L74:
 1284              		.loc 1 261 1 view .LVU352
 1285              		.align	2
 1286              	.L73:
 1287 05e0 00000000 		.word	g_armwave_state
 1288 05e4 20000000 		.word	.LC2
 1289              		.cfi_endproc
 1290              	.LFE61:
 1292              		.align	2
 1293              		.global	armwave_setup_render
 1294              		.syntax unified
 1295              		.arm
 1296              		.fpu vfp
 1298              	armwave_setup_render:
 1299              	.LVL77:
 1300              	.LFB62:
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Setup the renderer with passed parameters.
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 267:armwave.c     **** {
 1301              		.loc 1 267 1 is_stmt 1 view -0
 1302              		.cfi_startproc
 1303              		@ args = 12, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t length, xx;
 1305              		.loc 1 268 5 view .LVU354
 269:armwave.c     ****     float points_per_pixel;
 1306              		.loc 1 269 5 view .LVU355
 270:armwave.c     **** 
 271:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1307              		.loc 1 271 5 view .LVU356
 1308              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1309              		.loc 1 267 1 is_stmt 0 view .LVU357
 1310 05e8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1311              		.cfi_def_cfa_offset 28
 1312              		.cfi_offset 4, -28
 1313              		.cfi_offset 5, -24
 1314              		.cfi_offset 6, -20
 1315              		.cfi_offset 7, -16
 1316              		.cfi_offset 8, -12
 1317              		.cfi_offset 9, -8
 1318              		.cfi_offset 14, -4
 1319 05ec 028B2DED 		vpush.64	{d8}	@
 1320              		.cfi_def_cfa_offset 36
 1321              		.cfi_offset 80, -36
 1322              		.cfi_offset 81, -32
 1323 05f0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1324 05f4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1325 05f8 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1326 05fc 14D04DE2 		sub	sp, sp, #20	@,,
 1327              		.cfi_def_cfa_offset 56
 1328              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1329              		.loc 1 267 1 view .LVU358
 1330 0600 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1331 0604 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1332 0608 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1333              	@ armwave.c:271:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1334              		.loc 1 271 5 view .LVU359
 1335 060c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1336 0610 F460CDE1 		strd	r6, [sp, #4]	@,,
 1337 0614 0230A0E1 		mov	r3, r2	@, waves_max
 1338              	.LVL78:
 1339              		.loc 1 271 5 view .LVU360
 1340 0618 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1341 061c 0120A0E1 		mov	r2, r1	@, end_point
 1342              	.LVL79:
 1343              		.loc 1 271 5 view .LVU361
 1344 0620 0010A0E1 		mov	r1, r0	@, start_point
 1345              	.LVL80:
 1346              		.loc 1 271 5 view .LVU362
 1347 0624 D8019FE5 		ldr	r0, .L89+12	@,
 1348              	.LVL81:
 1349              		.loc 1 271 5 view .LVU363
 1350 0628 FEFFFFEB 		bl	printf		@
 1351              	.LVL82:
 272:armwave.c     **** 
 273:armwave.c     ****     // TODO these asserts should instead raise PyExc
 274:armwave.c     ****     assert(start_point < end_point);
 1352              		.loc 1 274 5 is_stmt 1 view .LVU364
 1353 062c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1354 0630 6100002A 		bcs	.L86		@,
 275:armwave.c     **** 
 276:armwave.c     ****     /*
 277:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 278:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 279:armwave.c     **** 
 280:armwave.c     ****     if(target_height == 256) {
 281:armwave.c     ****         g_armwave_state.row_shift = 8;
 282:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 283:armwave.c     ****     } else if(target_height == 512) {
 284:armwave.c     ****         g_armwave_state.row_shift = 9;
 285:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 286:armwave.c     ****     } else if(target_height == 1024) {
 287:armwave.c     ****         g_armwave_state.row_shift = 10;
 288:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 289:armwave.c     ****     } else if(target_height == 2048) {
 290:armwave.c     ****         g_armwave_state.row_shift = 11;
 291:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 292:armwave.c     ****     }
 293:armwave.c     ****     */
 294:armwave.c     **** 
 295:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 296:armwave.c     ****     g_armwave_state.xstride = target_height;
 1355              		.loc 1 296 5 view .LVU365
 1356              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 298:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 299:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 300:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 301:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 302:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 303:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 304:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 305:armwave.c     ****     g_armwave_state.target_width = target_width;
 306:armwave.c     ****     g_armwave_state.target_height = target_height;
 307:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1357              		.loc 1 307 45 is_stmt 0 view .LVU366
 1358 0634 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1359              	.LVL83:
 1360              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1361              		.loc 1 297 49 view .LVU367
 1362 0638 6E6A9FED 		vldr.32	s12, .L89	@ tmp175,
 1363              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 308:armwave.c     **** 
 309:armwave.c     ****     // Calculate compound scaler
 310:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 311:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1364              		.loc 1 311 48 view .LVU368
 1365 063c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1366              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1367              		.loc 1 311 79 view .LVU369
 1368 0640 6D6ADFED 		vldr.32	s13, .L89+4	@ tmp199,
 1369              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1370              		.loc 1 304 90 view .LVU370
 1371 0644 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1372              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1373              		.loc 1 296 29 view .LVU371
 1374 0648 B8419FE5 		ldr	r4, .L89+16	@ tmp241,
 1375              	.LVL84:
 1376              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1377              		.loc 1 311 48 view .LVU372
 1378 064c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1379              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1380              		.loc 1 297 49 view .LVU373
 1381 0650 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1382              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1383              		.loc 1 302 42 view .LVU374
 1384 0654 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1385              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1386              		.loc 1 304 74 view .LVU375
 1387 0658 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1388              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1389              		.loc 1 297 49 view .LVU376
 1390 065c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1391              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1392              		.loc 1 311 48 view .LVU377
 1393 0660 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1394              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), weve_length=%d, sca
 312:armwave.c     **** 
 313:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), weve_length=%d, scaler=%d\n", \
 1395              		.loc 1 313 5 view .LVU378
 1396 0664 00508DE5 		str	r5, [sp]	@ _13,
 1397              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1398              		.loc 1 304 74 view .LVU379
 1399 0668 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1400              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1401              		.loc 1 296 29 view .LVU380
 1402 066c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1403              		.loc 1 297 5 is_stmt 1 view .LVU381
 1404              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1405              		.loc 1 311 48 is_stmt 0 view .LVU382
 1406 0670 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1407              	@ armwave.c:306:     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1408              		.loc 1 306 35 view .LVU383
 1409 0674 F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1410              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), weve_length=%d, sca
 1411              		.loc 1 313 5 view .LVU384
 1412 0678 0118A0E3 		mov	r1, #65536	@ tmp202,
 1413              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1414              		.loc 1 303 37 view .LVU385
 1415 067c 017CA0E3 		mov	r7, #256	@ tmp185,
 1416              	@ armwave.c:299:     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1417              		.loc 1 299 33 view .LVU386
 1418 0680 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1419              	@ armwave.c:300:     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1420              		.loc 1 300 31 view .LVU387
 1421 0684 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1422              	@ armwave.c:301:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1423              		.loc 1 301 27 view .LVU388
 1424 0688 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1425              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), weve_length=%d, sca
 1426              		.loc 1 313 5 view .LVU389
 1427 068c 78019FE5 		ldr	r0, .L89+20	@,
 1428              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1429              		.loc 1 311 48 view .LVU390
 1430 0690 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1431              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), weve_length=%d, sca
 1432              		.loc 1 313 5 view .LVU391
 1433 0694 04108DE5 		str	r1, [sp, #4]	@ tmp202,
 1434 0698 0310A0E1 		mov	r1, r3	@, tmp190
 1435              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1436              		.loc 1 302 26 view .LVU392
 1437 069c 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1438              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1439              		.loc 1 304 34 view .LVU393
 1440 06a0 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1441              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 307:armwave.c     **** 
 1442              		.loc 1 307 33 view .LVU394
 1443 06a4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1444              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1445              		.loc 1 303 37 view .LVU395
 1446 06a8 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1447              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1448              		.loc 1 297 49 view .LVU396
 1449 06ac 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1450              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1451              		.loc 1 311 79 view .LVU397
 1452 06b0 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1453              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1454              		.loc 1 310 42 view .LVU398
 1455 06b4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1456              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1457              		.loc 1 297 33 view .LVU399
 1458 06b8 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1459              		.loc 1 298 5 is_stmt 1 view .LVU400
 1460              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1461              		.loc 1 310 42 is_stmt 0 view .LVU401
 1462 06bc 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1463              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1464              		.loc 1 298 30 view .LVU402
 1465 06c0 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1466              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), weve_length=%d, sca
 1467              		.loc 1 313 5 view .LVU403
 1468 06c4 0C30A0E1 		mov	r3, ip	@, _19
 1469 06c8 0C20A0E1 		mov	r2, ip	@, tmp3
 1470              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1471              		.loc 1 310 42 view .LVU404
 1472 06cc 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1473              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1474              		.loc 1 298 30 view .LVU405
 1475 06d0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1476              		.loc 1 299 5 is_stmt 1 view .LVU406
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1477              		.loc 1 300 5 view .LVU407
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1478              		.loc 1 301 5 view .LVU408
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1479              		.loc 1 302 5 view .LVU409
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1480              		.loc 1 303 5 view .LVU410
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1481              		.loc 1 304 5 view .LVU411
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 1482              		.loc 1 305 5 view .LVU412
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1483              		.loc 1 306 5 view .LVU413
 307:armwave.c     **** 
 1484              		.loc 1 307 5 view .LVU414
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1485              		.loc 1 310 5 view .LVU415
 1486              		.loc 1 313 5 view .LVU416
 1487 06d4 FEFFFFEB 		bl	printf		@
 1488              	.LVL85:
 314:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 315:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.wave_length,
 316:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 317:armwave.c     **** 
 318:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 319:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 320:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 321:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1489              		.loc 1 321 5 view .LVU417
 1490              	@ armwave.c:323:     if(g_armwave_state.ch1_buffer != NULL)
 322:armwave.c     **** 
 323:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1491              		.loc 1 323 23 is_stmt 0 view .LVU418
 1492 06d8 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1493              	@ armwave.c:321:     g_armwave_state.slice_height = 256; // 64;  
 321:armwave.c     **** 
 1494              		.loc 1 321 34 view .LVU419
 1495 06dc 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1496              		.loc 1 323 5 is_stmt 1 view .LVU420
 1497              	@ armwave.c:323:     if(g_armwave_state.ch1_buffer != NULL)
 1498              		.loc 1 323 7 is_stmt 0 view .LVU421
 1499 06e0 000050E3 		cmp	r0, #0	@ _20,
 1500 06e4 0000000A 		beq	.L77		@,
 324:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1501              		.loc 1 324 9 is_stmt 1 view .LVU422
 1502 06e8 FEFFFFEB 		bl	free		@
 1503              	.LVL86:
 1504              	.L77:
 325:armwave.c     **** 
 326:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1505              		.loc 1 326 5 view .LVU423
 1506              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1507              		.loc 1 326 34 is_stmt 0 view .LVU424
 1508 06ec 0110A0E3 		mov	r1, #1	@,
 1509 06f0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1510 06f4 FEFFFFEB 		bl	calloc		@
 1511              	.LVL87:
 1512              	@ armwave.c:328:     assert(g_armwave_state.ch1_buffer != NULL);
 327:armwave.c     **** 
 328:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1513              		.loc 1 328 5 view .LVU425
 1514 06f8 000050E3 		cmp	r0, #0	@ _23,
 1515              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 326:armwave.c     **** 
 1516              		.loc 1 326 34 view .LVU426
 1517 06fc 0070A0E1 		mov	r7, r0	@ _23,
 1518              	@ armwave.c:326:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 326:armwave.c     **** 
 1519              		.loc 1 326 32 view .LVU427
 1520 0700 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1521              		.loc 1 328 5 is_stmt 1 view .LVU428
 1522 0704 3600000A 		beq	.L87		@,
 329:armwave.c     **** 
 330:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 331:armwave.c     ****     length = end_point - start_point;
 1523              		.loc 1 331 5 view .LVU429
 1524              	.LVL88:
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1525              		.loc 1 332 5 view .LVU430
 1526              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 1527              		.loc 1 332 34 is_stmt 0 view .LVU431
 1528 0708 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1529              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 1530              		.loc 1 332 22 view .LVU432
 1531 070c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1532              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1533              		.loc 1 333 60 view .LVU433
 1534 0710 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1535              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1536              		.loc 1 334 40 view .LVU434
 1537 0714 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1538              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1539              		.loc 1 332 34 view .LVU435
 1540 0718 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1541              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1542              		.loc 1 332 22 view .LVU436
 1543 071c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1544              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1545              		.loc 1 333 60 view .LVU437
 1546 0720 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1547              	@ armwave.c:332:     points_per_pixel = length / ((float)(target_width));
 332:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1548              		.loc 1 332 22 view .LVU438
 1549 0724 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1550              	.LVL89:
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1551              		.loc 1 333 5 is_stmt 1 view .LVU439
 1552              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1553              		.loc 1 333 60 is_stmt 0 view .LVU440
 1554 0728 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1555              	@ armwave.c:333:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 333:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1556              		.loc 1 333 41 view .LVU441
 1557 072c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1558 0730 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1559              		.loc 1 334 5 is_stmt 1 view .LVU442
 1560              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1561              		.loc 1 334 40 is_stmt 0 view .LVU443
 1562 0734 FEFFFFEB 		bl	malloc		@
 1563              	.LVL90:
 1564              	@ armwave.c:336:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 335:armwave.c     **** 
 336:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1565              		.loc 1 336 5 view .LVU444
 1566 0738 000050E3 		cmp	r0, #0	@ _31,
 1567              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1568              		.loc 1 334 40 view .LVU445
 1569 073c 0060A0E1 		mov	r6, r0	@ _31,
 1570              	@ armwave.c:334:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 334:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1571              		.loc 1 334 38 view .LVU446
 1572 0740 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1573              		.loc 1 336 5 is_stmt 1 view .LVU447
 1574 0744 2100000A 		beq	.L88		@,
 1575              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 337:armwave.c     **** 
 338:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 339:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1576              		.loc 1 339 54 is_stmt 0 view .LVU448
 1577 0748 2C7ADFED 		vldr.32	s15, .L89+8	@ tmp229,
 1578 074c 020040E2 		sub	r0, r0, #2	@ ivtmp.81, _31,
 1579              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1580              		.loc 1 338 12 view .LVU449
 1581 0750 0030A0E3 		mov	r3, #0	@ xx,
 1582              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1583              		.loc 1 339 54 view .LVU450
 1584 0754 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1585              	.L80:
 1586              	.LVL91:
 1587              		.loc 1 339 9 is_stmt 1 discriminator 3 view .LVU451
 1588              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1589              		.loc 1 339 74 is_stmt 0 discriminator 3 view .LVU452
 1590 0758 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1591              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1592              		.loc 1 338 32 discriminator 3 view .LVU453
 1593 075c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1594              	.LVL92:
 1595              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1596              		.loc 1 338 5 discriminator 3 view .LVU454
 1597 0760 030055E1 		cmp	r5, r3	@ _13, xx
 1598              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1599              		.loc 1 339 74 discriminator 3 view .LVU455
 1600 0764 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1601 0768 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1602              	@ armwave.c:339:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1603              		.loc 1 339 46 discriminator 3 view .LVU456
 1604 076c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1605 0770 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1606 0774 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1607              	@ armwave.c:338:     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1608              		.loc 1 338 5 discriminator 3 view .LVU457
 1609 0778 F6FFFF1A 		bne	.L80		@,
 340:armwave.c     **** 
 341:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 342:armwave.c     ****     }
 343:armwave.c     **** 
 344:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1610              		.loc 1 344 5 is_stmt 1 view .LVU458
 1611              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1612              		.loc 1 344 34 is_stmt 0 view .LVU459
 1613 077c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1614 0780 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1615 0784 FEFFFFEB 		bl	malloc		@
 1616              	.LVL93:
 1617              	@ armwave.c:346:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 345:armwave.c     **** 
 346:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1618              		.loc 1 346 5 view .LVU460
 1619 0788 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1620 078c 0620A0E1 		mov	r2, r6	@, _31
 1621 0790 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1622 0794 0710A0E1 		mov	r1, r7	@, _23
 1623              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 344:armwave.c     **** 
 1624              		.loc 1 344 34 view .LVU461
 1625 0798 00C0A0E1 		mov	ip, r0	@ tmp236,
 1626              	@ armwave.c:346:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1627              		.loc 1 346 5 view .LVU462
 1628 079c 0030A0E1 		mov	r3, r0	@, tmp236
 1629              	@ armwave.c:344:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 344:armwave.c     **** 
 1630              		.loc 1 344 32 view .LVU463
 1631 07a0 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1632              		.loc 1 346 5 is_stmt 1 view .LVU464
 1633 07a4 64009FE5 		ldr	r0, .L89+24	@,
 1634 07a8 FEFFFFEB 		bl	printf		@
 1635              	.LVL94:
 347:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 348:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 349:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 350:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 351:armwave.c     **** 
 352:armwave.c     ****     malloc_stats();
 1636              		.loc 1 352 5 view .LVU465
 1637              	@ armwave.c:353: }
 353:armwave.c     **** }
 1638              		.loc 1 353 1 is_stmt 0 view .LVU466
 1639 07ac 14D08DE2 		add	sp, sp, #20	@,,
 1640              		.cfi_remember_state
 1641              		.cfi_def_cfa_offset 36
 1642              		@ sp needed	@
 1643 07b0 028BBDEC 		vldm	sp!, {d8}	@
 1644              		.cfi_restore 80
 1645              		.cfi_restore 81
 1646              		.cfi_def_cfa_offset 28
 1647              	.LVL95:
 1648              		.loc 1 353 1 view .LVU467
 1649 07b4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1650              		.cfi_restore 14
 1651              		.cfi_restore 9
 1652              		.cfi_restore 8
 1653              		.cfi_restore 7
 1654              		.cfi_restore 6
 1655              		.cfi_restore 5
 1656              		.cfi_restore 4
 1657              		.cfi_def_cfa_offset 0
 1658              	.LVL96:
 1659              	@ armwave.c:352:     malloc_stats();
 352:armwave.c     **** }
 1660              		.loc 1 352 5 view .LVU468
 1661 07b8 FEFFFFEA 		b	malloc_stats		@
 1662              	.LVL97:
 1663              	.L86:
 1664              		.cfi_restore_state
 274:armwave.c     **** 
 1665              		.loc 1 274 5 is_stmt 1 discriminator 1 view .LVU469
 1666 07bc 50309FE5 		ldr	r3, .L89+28	@,
 1667 07c0 50209FE5 		ldr	r2, .L89+32	@,
 1668 07c4 50109FE5 		ldr	r1, .L89+36	@,
 1669 07c8 50009FE5 		ldr	r0, .L89+40	@,
 1670 07cc FEFFFFEB 		bl	__assert_fail		@
 1671              	.LVL98:
 1672              	.L88:
 336:armwave.c     **** 
 1673              		.loc 1 336 5 discriminator 1 view .LVU470
 1674 07d0 3C309FE5 		ldr	r3, .L89+28	@,
 1675 07d4 152EA0E3 		mov	r2, #336	@,
 1676 07d8 3C109FE5 		ldr	r1, .L89+36	@,
 1677 07dc 40009FE5 		ldr	r0, .L89+44	@,
 1678 07e0 FEFFFFEB 		bl	__assert_fail		@
 1679              	.LVL99:
 1680              	.L87:
 328:armwave.c     **** 
 1681              		.loc 1 328 5 discriminator 1 view .LVU471
 1682 07e4 28309FE5 		ldr	r3, .L89+28	@,
 1683 07e8 522FA0E3 		mov	r2, #328	@,
 1684 07ec 28109FE5 		ldr	r1, .L89+36	@,
 1685 07f0 30009FE5 		ldr	r0, .L89+48	@,
 1686 07f4 FEFFFFEB 		bl	__assert_fail		@
 1687              	.LVL100:
 1688              	.L90:
 1689              		.align	2
 1690              	.L89:
 1691 07f8 00007F43 		.word	1132396544
 1692 07fc 00008047 		.word	1199570944
 1693 0800 0000803F 		.word	1065353216
 1694 0804 98000000 		.word	.LC5
 1695 0808 00000000 		.word	g_armwave_state
 1696 080c DC000000 		.word	.LC7
 1697 0810 7C010000 		.word	.LC10
 1698 0814 1C000000 		.word	.LANCHOR0+28
 1699 0818 12010000 		.word	274
 1700 081c 78000000 		.word	.LC3
 1701 0820 C4000000 		.word	.LC6
 1702 0824 50010000 		.word	.LC9
 1703 0828 2C010000 		.word	.LC8
 1704              		.cfi_endproc
 1705              	.LFE62:
 1707              		.align	2
 1708              		.global	armwave_set_wave_pointer
 1709              		.syntax unified
 1710              		.arm
 1711              		.fpu vfp
 1713              	armwave_set_wave_pointer:
 1714              	.LVL101:
 1715              	.LFB63:
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 357:armwave.c     ****  * in the future.
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 360:armwave.c     **** {
 1716              		.loc 1 360 1 view -0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1720              		.loc 1 361 5 view .LVU473
 1721 082c 000050E3 		cmp	r0, #0	@ wave_buffer
 1722              		.loc 1 361 5 is_stmt 0 view .LVU474
 1723 0830 0200000A 		beq	.L96		@,
 362:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1724              		.loc 1 362 5 is_stmt 1 view .LVU475
 1725              	@ armwave.c:362:     g_armwave_state.wave_buffer = wave_buffer;
 1726              		.loc 1 362 33 is_stmt 0 view .LVU476
 1727 0834 1C309FE5 		ldr	r3, .L97	@ tmp116,
 1728 0838 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1729 083c 1EFF2FE1 		bx	lr	@
 1730              	.L96:
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1731              		.loc 1 361 5 is_stmt 1 discriminator 1 view .LVU477
 1732              	@ armwave.c:360: {
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1733              		.loc 1 360 1 is_stmt 0 discriminator 1 view .LVU478
 1734 0840 10402DE9 		push	{r4, lr}	@
 1735              		.cfi_def_cfa_offset 8
 1736              		.cfi_offset 4, -8
 1737              		.cfi_offset 14, -4
 1738              	@ armwave.c:361:     assert(wave_buffer != NULL);
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1739              		.loc 1 361 5 discriminator 1 view .LVU479
 1740 0844 10309FE5 		ldr	r3, .L97+4	@,
 1741 0848 10209FE5 		ldr	r2, .L97+8	@,
 1742 084c 10109FE5 		ldr	r1, .L97+12	@,
 1743 0850 10009FE5 		ldr	r0, .L97+16	@,
 1744              	.LVL102:
 361:armwave.c     ****     assert(wave_buffer != NULL);
 1745              		.loc 1 361 5 discriminator 1 view .LVU480
 1746 0854 FEFFFFEB 		bl	__assert_fail		@
 1747              	.LVL103:
 1748              	.L98:
 1749              		.align	2
 1750              	.L97:
 1751 0858 00000000 		.word	g_armwave_state
 1752 085c 34000000 		.word	.LANCHOR0+52
 1753 0860 69010000 		.word	361
 1754 0864 78000000 		.word	.LC3
 1755 0868 A0010000 		.word	.LC11
 1756              		.cfi_endproc
 1757              	.LFE63:
 1759              		.align	2
 1760              		.global	armwave_set_wave_pointer_as_testbuf
 1761              		.syntax unified
 1762              		.arm
 1763              		.fpu vfp
 1765              	armwave_set_wave_pointer_as_testbuf:
 1766              	.LVL104:
 1767              	.LFB64:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 367:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 368:armwave.c     ****  */
 369:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 370:armwave.c     **** {
 1768              		.loc 1 370 1 is_stmt 1 view -0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
 371:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1773              		.loc 1 371 5 view .LVU482
 1774              	@ armwave.c:371:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1775              		.loc 1 371 29 is_stmt 0 view .LVU483
 1776 086c 24309FE5 		ldr	r3, .L102	@ tmp117,
 1777              	@ armwave.c:371:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1778              		.loc 1 371 7 view .LVU484
 1779 0870 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1780 0874 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1781 0878 0400003A 		bcc	.L101		@,
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 373:armwave.c     ****         return;
 374:armwave.c     ****     }
 375:armwave.c     **** 
 376:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1782              		.loc 1 376 5 is_stmt 1 view .LVU485
 1783              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1784              		.loc 1 376 111 is_stmt 0 view .LVU486
 1785 087c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1786              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1787              		.loc 1 376 68 view .LVU487
 1788 0880 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1789 0884 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1790              	.LVL105:
 1791              	@ armwave.c:376:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1792              		.loc 1 376 33 view .LVU488
 1793 0888 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1794              	@ armwave.c:377: }
 377:armwave.c     **** }
 1795              		.loc 1 377 1 view .LVU489
 1796 088c 1EFF2FE1 		bx	lr	@
 1797              	.LVL106:
 1798              	.L101:
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1799              		.loc 1 372 9 is_stmt 1 view .LVU490
 1800 0890 04009FE5 		ldr	r0, .L102+4	@,
 1801              	.LVL107:
 372:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1802              		.loc 1 372 9 is_stmt 0 view .LVU491
 1803 0894 FEFFFFEA 		b	puts		@
 1804              	.LVL108:
 1805              	.L103:
 1806              		.align	2
 1807              	.L102:
 1808 0898 00000000 		.word	g_armwave_state
 1809 089c B4010000 		.word	.LC12
 1810              		.cfi_endproc
 1811              	.LFE64:
 1813              		.align	2
 1814              		.global	armwave_set_wave_pointer_u32
 1815              		.syntax unified
 1816              		.arm
 1817              		.fpu vfp
 1819              	armwave_set_wave_pointer_u32:
 1820              	.LVL109:
 1821              	.LFB65:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 381:armwave.c     ****  * disjointed buffers in the future.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 384:armwave.c     **** {
 1822              		.loc 1 384 1 is_stmt 1 view -0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1826              		.loc 1 385 5 view .LVU493
 1827 08a0 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1828              		.loc 1 385 5 is_stmt 0 view .LVU494
 1829 08a4 0200000A 		beq	.L109		@,
 386:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1830              		.loc 1 386 5 is_stmt 1 view .LVU495
 1831              	@ armwave.c:386:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1832              		.loc 1 386 33 is_stmt 0 view .LVU496
 1833 08a8 1C309FE5 		ldr	r3, .L110	@ tmp117,
 1834 08ac 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1835 08b0 1EFF2FE1 		bx	lr	@
 1836              	.L109:
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1837              		.loc 1 385 5 is_stmt 1 discriminator 1 view .LVU497
 1838              	@ armwave.c:384: {
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1839              		.loc 1 384 1 is_stmt 0 discriminator 1 view .LVU498
 1840 08b4 10402DE9 		push	{r4, lr}	@
 1841              		.cfi_def_cfa_offset 8
 1842              		.cfi_offset 4, -8
 1843              		.cfi_offset 14, -4
 1844              	@ armwave.c:385:     assert(wave_buffer_ptr != 0);
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1845              		.loc 1 385 5 discriminator 1 view .LVU499
 1846 08b8 10309FE5 		ldr	r3, .L110+4	@,
 1847 08bc 10209FE5 		ldr	r2, .L110+8	@,
 1848 08c0 10109FE5 		ldr	r1, .L110+12	@,
 1849 08c4 10009FE5 		ldr	r0, .L110+16	@,
 1850              	.LVL110:
 385:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1851              		.loc 1 385 5 discriminator 1 view .LVU500
 1852 08c8 FEFFFFEB 		bl	__assert_fail		@
 1853              	.LVL111:
 1854              	.L111:
 1855              		.align	2
 1856              	.L110:
 1857 08cc 00000000 		.word	g_armwave_state
 1858 08d0 50000000 		.word	.LANCHOR0+80
 1859 08d4 81010000 		.word	385
 1860 08d8 78000000 		.word	.LC3
 1861 08dc F0010000 		.word	.LC13
 1862              		.cfi_endproc
 1863              	.LFE65:
 1865              		.align	2
 1866              		.global	armwave_clear_buffer
 1867              		.syntax unified
 1868              		.arm
 1869              		.fpu vfp
 1871              	armwave_clear_buffer:
 1872              	.LVL112:
 1873              	.LFB66:
 387:armwave.c     **** }
 388:armwave.c     **** 
 389:armwave.c     **** /*
 390:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 391:armwave.c     ****  */
 392:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 393:armwave.c     **** {
 1874              		.loc 1 393 1 is_stmt 1 view -0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878              		@ link register save eliminated.
 394:armwave.c     ****     // Flags ignored, only one buffer cleared
 395:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1879              		.loc 1 395 5 view .LVU502
 1880              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1881              		.loc 1 395 58 is_stmt 0 view .LVU503
 1882 08e0 0C309FE5 		ldr	r3, .L113	@ tmp114,
 1883              	@ armwave.c:395:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1884              		.loc 1 395 5 view .LVU504
 1885 08e4 0010A0E3 		mov	r1, #0	@,
 1886 08e8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1887 08ec 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1888              	.LVL113:
 1889              		.loc 1 395 5 view .LVU505
 1890 08f0 FEFFFFEA 		b	memset		@
 1891              	.LVL114:
 1892              	.L114:
 1893              		.align	2
 1894              	.L113:
 1895 08f4 00000000 		.word	g_armwave_state
 1896              		.cfi_endproc
 1897              	.LFE66:
 1899              		.align	2
 1900              		.global	armwave_set_channel_colour
 1901              		.syntax unified
 1902              		.arm
 1903              		.fpu vfp
 1905              	armwave_set_channel_colour:
 1906              	.LVL115:
 1907              	.LFB67:
 396:armwave.c     **** }
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 400:armwave.c     ****  */
 401:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 402:armwave.c     **** {
 1908              		.loc 1 402 1 is_stmt 1 view -0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 0
 1911              		@ frame_needed = 0, uses_anonymous_args = 0
 1912              		@ link register save eliminated.
 403:armwave.c     ****     // Only 1ch supported for now
 404:armwave.c     ****     switch(ch) {
 1913              		.loc 1 404 5 view .LVU507
 1914 08f8 010050E3 		cmp	r0, #1	@ ch,
 405:armwave.c     ****         case 1:
 406:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1915              		.loc 1 406 13 view .LVU508
 1916              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 1917              		.loc 1 406 41 is_stmt 0 view .LVU509
 1918 08fc 0C009F05 		ldreq	r0, .L117	@ tmp117,
 1919              	.LVL116:
 1920              		.loc 1 406 41 view .LVU510
 1921 0900 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 407:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1922              		.loc 1 407 13 is_stmt 1 view .LVU511
 1923              	@ armwave.c:407:             g_armwave_state.ch1_color.g = g;
 1924              		.loc 1 407 41 is_stmt 0 view .LVU512
 1925 0904 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 408:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1926              		.loc 1 408 13 is_stmt 1 view .LVU513
 1927              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 1928              		.loc 1 408 41 is_stmt 0 view .LVU514
 1929 0908 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 409:armwave.c     ****             break;
 1930              		.loc 1 409 13 is_stmt 1 view .LVU515
 1931              	@ armwave.c:411: }
 410:armwave.c     ****     }
 411:armwave.c     **** }
 1932              		.loc 1 411 1 is_stmt 0 view .LVU516
 1933 090c 1EFF2FE1 		bx	lr	@
 1934              	.L118:
 1935              		.align	2
 1936              	.L117:
 1937 0910 00000000 		.word	g_armwave_state
 1938              		.cfi_endproc
 1939              	.LFE67:
 1941              		.align	2
 1942              		.global	armwave_dump_ppm_debug
 1943              		.syntax unified
 1944              		.arm
 1945              		.fpu vfp
 1947              	armwave_dump_ppm_debug:
 1948              	.LVL117:
 1949              	.LFB68:
 412:armwave.c     **** 
 413:armwave.c     **** /*
 414:armwave.c     ****  * Dump a ppm of a buffer to a file.
 415:armwave.c     ****  */
 416:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 417:armwave.c     **** {
 1950              		.loc 1 417 1 is_stmt 1 view -0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 418:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1954              		.loc 1 418 5 view .LVU518
 1955              	@ armwave.c:417: {
 417:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1956              		.loc 1 417 1 is_stmt 0 view .LVU519
 1957 0914 0130A0E1 		mov	r3, r1	@ fn, fn
 1958 0918 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1959              		.cfi_def_cfa_offset 28
 1960              		.cfi_offset 4, -28
 1961              		.cfi_offset 5, -24
 1962              		.cfi_offset 6, -20
 1963              		.cfi_offset 7, -16
 1964              		.cfi_offset 8, -12
 1965              		.cfi_offset 9, -8
 1966              		.cfi_offset 14, -4
 1967 091c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1968 0920 0CD04DE2 		sub	sp, sp, #12	@,,
 1969              		.cfi_def_cfa_offset 40
 1970              	@ armwave.c:418:     FILE *fp = fopen(fn, "wb");
 1971              		.loc 1 418 16 view .LVU520
 1972 0924 C4109FE5 		ldr	r1, .L127	@,
 1973              	.LVL118:
 1974              		.loc 1 418 16 view .LVU521
 1975 0928 0300A0E1 		mov	r0, r3	@, fn
 1976              	.LVL119:
 1977              		.loc 1 418 16 view .LVU522
 1978 092c FEFFFFEB 		bl	fopen64		@
 1979              	.LVL120:
 1980              	@ armwave.c:425:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 419:armwave.c     ****     uint32_t data;
 420:armwave.c     ****     int xx, yy;
 421:armwave.c     **** 
 422:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 423:armwave.c     **** 
 424:armwave.c     ****     fputs("P3\n", fp);
 425:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1981              		.loc 1 425 5 view .LVU523
 1982 0930 BC609FE5 		ldr	r6, .L127+4	@ tmp150,
 1983              	@ armwave.c:424:     fputs("P3\n", fp);
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1984              		.loc 1 424 5 view .LVU524
 1985 0934 0320A0E3 		mov	r2, #3	@,
 1986 0938 0110A0E3 		mov	r1, #1	@,
 1987              	@ armwave.c:418:     FILE *fp = fopen(fn, "wb");
 418:armwave.c     ****     uint32_t data;
 1988              		.loc 1 418 16 view .LVU525
 1989 093c 0070A0E1 		mov	r7, r0	@ fp,
 1990              	.LVL121:
 419:armwave.c     ****     uint32_t data;
 1991              		.loc 1 419 5 is_stmt 1 view .LVU526
 420:armwave.c     **** 
 1992              		.loc 1 420 5 view .LVU527
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1993              		.loc 1 424 5 view .LVU528
 1994 0940 0030A0E1 		mov	r3, r0	@, fp
 1995 0944 AC009FE5 		ldr	r0, .L127+8	@,
 1996              	.LVL122:
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1997              		.loc 1 424 5 is_stmt 0 view .LVU529
 1998 0948 FEFFFFEB 		bl	fwrite		@
 1999              	.LVL123:
 2000              		.loc 1 425 5 is_stmt 1 view .LVU530
 2001 094c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2002 0950 A4109FE5 		ldr	r1, .L127+12	@,
 2003 0954 0700A0E1 		mov	r0, r7	@, fp
 2004 0958 FEFFFFEB 		bl	fprintf		@
 2005              	.LVL124:
 426:armwave.c     ****     fputs("255\n", fp);
 2006              		.loc 1 426 5 view .LVU531
 2007 095c 0420A0E3 		mov	r2, #4	@,
 2008 0960 0730A0E1 		mov	r3, r7	@, fp
 2009 0964 0110A0E3 		mov	r1, #1	@,
 2010 0968 90009FE5 		ldr	r0, .L127+16	@,
 2011 096c FEFFFFEB 		bl	fwrite		@
 2012              	.LVL125:
 427:armwave.c     **** 
 428:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2013              		.loc 1 428 5 view .LVU532
 2014              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2015              		.loc 1 428 37 is_stmt 0 view .LVU533
 2016 0970 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2017              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2018              		.loc 1 428 5 view .LVU534
 2019 0974 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2020 0978 180000DA 		ble	.L120		@,
 2021 097c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2022              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 430:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 431:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 432:armwave.c     **** 
 433:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2023              		.loc 1 433 13 view .LVU535
 2024 0980 7C909FE5 		ldr	r9, .L127+20	@ tmp152,
 2025              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2026              		.loc 1 428 12 view .LVU536
 2027 0984 0050A0E3 		mov	r5, #0	@ yy,
 2028              	.LVL126:
 2029              	.L121:
 2030              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2031              		.loc 1 429 9 view .LVU537
 2032 0988 000053E3 		cmp	r3, #0	@ _13,
 2033              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2034              		.loc 1 429 16 view .LVU538
 2035 098c 0040A0C3 		movgt	r4, #0	@ xx,
 2036              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2037              		.loc 1 429 9 view .LVU539
 2038 0990 0F0000DA 		ble	.L123		@,
 2039              	.LVL127:
 2040              	.L122:
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2041              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU540
 2042              	@ armwave.c:430:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2043              		.loc 1 430 29 is_stmt 0 discriminator 3 view .LVU541
 2044 0994 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2045              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2046              		.loc 1 433 13 discriminator 3 view .LVU542
 2047 0998 0910A0E1 		mov	r1, r9	@, tmp152
 2048 099c 0700A0E1 		mov	r0, r7	@, fp
 2049              	@ armwave.c:430:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2050              		.loc 1 430 18 discriminator 3 view .LVU543
 2051 09a0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2052              	.LVL128:
 2053              		.loc 1 433 13 is_stmt 1 discriminator 3 view .LVU544
 2054              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2055              		.loc 1 429 58 is_stmt 0 discriminator 3 view .LVU545
 2056 09a4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2057              	.LVL129:
 2058              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2059              		.loc 1 433 81 discriminator 3 view .LVU546
 2060 09a8 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2061              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2062              		.loc 1 433 61 discriminator 3 view .LVU547
 2063 09ac 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2064              	@ armwave.c:433:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2065              		.loc 1 433 13 discriminator 3 view .LVU548
 2066 09b0 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2067 09b4 7330EFE6 		uxtb	r3, r3	@, tmp142
 2068 09b8 00C08DE5 		str	ip, [sp]	@ tmp147,
 2069 09bc 7220EFE6 		uxtb	r2, r2	@, data
 2070              	.LVL130:
 2071              		.loc 1 433 13 discriminator 3 view .LVU549
 2072 09c0 FEFFFFEB 		bl	fprintf		@
 2073              	.LVL131:
 2074              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2075              		.loc 1 429 41 discriminator 3 view .LVU550
 2076 09c4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2077              	@ armwave.c:429:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2078              		.loc 1 429 9 discriminator 3 view .LVU551
 2079 09c8 040053E1 		cmp	r3, r4	@ _13, xx
 2080 09cc F0FFFFCA 		bgt	.L122		@,
 2081 09d0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2082              	.LVL132:
 2083              	.L123:
 2084              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2085              		.loc 1 428 55 discriminator 2 view .LVU552
 2086 09d4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2087              	.LVL133:
 2088              	@ armwave.c:428:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2089              		.loc 1 428 5 discriminator 2 view .LVU553
 2090 09d8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2091 09dc E9FFFFBA 		blt	.L121		@,
 2092              	.LVL134:
 2093              	.L120:
 434:armwave.c     ****         }
 435:armwave.c     ****     }
 436:armwave.c     **** 
 437:armwave.c     ****     fclose(fp);
 2094              		.loc 1 437 5 is_stmt 1 view .LVU554
 2095 09e0 0700A0E1 		mov	r0, r7	@, fp
 2096              	@ armwave.c:438: }
 438:armwave.c     **** }
 2097              		.loc 1 438 1 is_stmt 0 view .LVU555
 2098 09e4 0CD08DE2 		add	sp, sp, #12	@,,
 2099              		.cfi_def_cfa_offset 28
 2100              		@ sp needed	@
 2101 09e8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2102              		.cfi_restore 14
 2103              		.cfi_restore 9
 2104              		.cfi_restore 8
 2105              		.cfi_restore 7
 2106              		.cfi_restore 6
 2107              		.cfi_restore 5
 2108              		.cfi_restore 4
 2109              		.cfi_def_cfa_offset 0
 2110              	.LVL135:
 2111              	@ armwave.c:437:     fclose(fp);
 437:armwave.c     **** }
 2112              		.loc 1 437 5 view .LVU556
 2113 09ec FEFFFFEA 		b	fclose		@
 2114              	.LVL136:
 2115              	.L128:
 437:armwave.c     **** }
 2116              		.loc 1 437 5 view .LVU557
 2117              		.align	2
 2118              	.L127:
 2119 09f0 08020000 		.word	.LC14
 2120 09f4 00000000 		.word	g_armwave_state
 2121 09f8 0C020000 		.word	.LC15
 2122 09fc 10020000 		.word	.LC16
 2123 0a00 18020000 		.word	.LC17
 2124 0a04 20020000 		.word	.LC18
 2125              		.cfi_endproc
 2126              	.LFE68:
 2128              		.align	2
 2129              		.global	armwave_test_init
 2130              		.syntax unified
 2131              		.arm
 2132              		.fpu vfp
 2134              	armwave_test_init:
 2135              	.LVL137:
 2136              	.LFB69:
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Initialise some test functionry.
 442:armwave.c     ****  */
 443:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 444:armwave.c     **** {
 2137              		.loc 1 444 1 is_stmt 1 view -0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 0
 2140              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     test_create_gamma();
 2141              		.loc 1 445 5 view .LVU559
 2142              	.LBB22:
 2143              	.LBI22:
  34:armwave.c     **** {
 2144              		.loc 1 34 6 view .LVU560
  34:armwave.c     **** {
 2145              		.loc 1 34 6 is_stmt 0 view .LVU561
 2146              	.LBE22:
 2147              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2148              		.loc 1 444 1 view .LVU562
 2149 0a08 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2150              		.cfi_def_cfa_offset 32
 2151              		.cfi_offset 4, -32
 2152              		.cfi_offset 5, -28
 2153              		.cfi_offset 6, -24
 2154              		.cfi_offset 7, -20
 2155              		.cfi_offset 8, -16
 2156              		.cfi_offset 9, -12
 2157              		.cfi_offset 10, -8
 2158              		.cfi_offset 14, -4
 2159 0a0c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2160              		.cfi_def_cfa_offset 56
 2161              		.cfi_offset 80, -56
 2162              		.cfi_offset 81, -52
 2163              		.cfi_offset 82, -48
 2164              		.cfi_offset 83, -44
 2165              		.cfi_offset 84, -40
 2166              		.cfi_offset 85, -36
 2167 0a10 BC409FE5 		ldr	r4, .L133+20	@ ivtmp.95,
 2168              	.LBB25:
 2169              	.LBB23:
 2170              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2171              		.loc 1 40 32 view .LVU563
 2172 0a14 2DAA9FED 		vldr.32	s20, .L133+16	@ tmp136,
 2173              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2174              		.loc 1 40 26 view .LVU564
 2175 0a18 289B9FED 		vldr.64	d9, .L133	@ tmp151,
 2176              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2177              		.loc 1 40 49 view .LVU565
 2178 0a1c 298B9FED 		vldr.64	d8, .L133+8	@ tmp139,
 2179 0a20 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.95,
 2180              	.LBE23:
 2181              	.LBE25:
 2182              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2183              		.loc 1 444 1 view .LVU566
 2184 0a24 10D04DE2 		sub	sp, sp, #16	@,,
 2185              		.cfi_def_cfa_offset 72
 2186              	@ armwave.c:444: {
 444:armwave.c     ****     test_create_gamma();
 2187              		.loc 1 444 1 view .LVU567
 2188 0a28 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2189 0a2c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2190 0a30 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2191 0a34 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2192 0a38 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.95,
 2193 0a3c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2194              	.LVL138:
 2195              	.L130:
 2196              	.LBB26:
 2197              	.LBB24:
  40:armwave.c     ****     }
 2198              		.loc 1 40 9 is_stmt 1 view .LVU568
 2199              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2200              		.loc 1 40 32 is_stmt 0 view .LVU569
 2201 0a40 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.95
 2202              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2203              		.loc 1 40 26 view .LVU570
 2204 0a44 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2205              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2206              		.loc 1 40 32 view .LVU571
 2207 0a48 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2208 0a4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2209 0a50 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2210              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2211              		.loc 1 40 26 view .LVU572
 2212 0a54 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2213 0a58 FEFFFFEB 		bl	pow		@
 2214              	.LVL139:
 2215              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2216              		.loc 1 40 49 view .LVU573
 2217 0a5c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2218              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2219              		.loc 1 40 24 view .LVU574
 2220 0a60 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2221 0a64 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2222 0a68 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2223              	.LVL140:
 2224              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2225              		.loc 1 39 5 view .LVU575
 2226 0a6c 0A0054E1 		cmp	r4, r10	@ ivtmp.95, _39
 2227 0a70 F2FFFF1A 		bne	.L130		@,
 2228              	.LVL141:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2229              		.loc 1 39 5 view .LVU576
 2230              	.LBE24:
 2231              	.LBE26:
 446:armwave.c     **** 
 447:armwave.c     ****     // make ch1 yellowish by default
 448:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2232              		.loc 1 448 5 is_stmt 1 view .LVU577
 2233              	.LBB27:
 2234              	.LBI27:
 401:armwave.c     **** {
 2235              		.loc 1 401 6 view .LVU578
 2236              	.LBB28:
 404:armwave.c     ****         case 1:
 2237              		.loc 1 404 5 view .LVU579
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2238              		.loc 1 406 13 view .LVU580
 407:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2239              		.loc 1 407 13 view .LVU581
 2240              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2241              		.loc 1 406 41 is_stmt 0 view .LVU582
 2242 0a74 5CC09FE5 		ldr	ip, .L133+24	@ tmp142,
 2243 0a78 5C409FE5 		ldr	r4, .L133+28	@ tmp143,
 2244              	.LBE28:
 2245              	.LBE27:
 2246              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 449:armwave.c     **** 
 450:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2247              		.loc 1 450 5 view .LVU583
 2248 0a7c 0000A0E3 		mov	r0, #0	@ tmp147,
 2249              	.LBB32:
 2250              	.LBB29:
 2251              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 408:armwave.c     ****             break;
 2252              		.loc 1 408 41 view .LVU584
 2253 0a80 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2254              	.LBE29:
 2255              	.LBE32:
 2256              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2257              		.loc 1 450 5 view .LVU585
 2258 0a84 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2259 0a88 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2260 0a8c 00808DE5 		str	r8, [sp]	@ render_width,
 2261 0a90 0610A0E1 		mov	r1, r6	@, tmp3
 2262 0a94 0720A0E1 		mov	r2, r7	@, nwaves
 2263              	.LBB33:
 2264              	.LBB30:
 2265              	@ armwave.c:406:             g_armwave_state.ch1_color.r = r;
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2266              		.loc 1 406 41 view .LVU586
 2267 0a98 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 408:armwave.c     ****             break;
 2268              		.loc 1 408 13 is_stmt 1 view .LVU587
 2269              	.LBE30:
 2270              	.LBE33:
 2271              	@ armwave.c:450:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2272              		.loc 1 450 5 is_stmt 0 view .LVU588
 2273 0a9c 0630A0E1 		mov	r3, r6	@, wave_size
 2274              	.LBB34:
 2275              	.LBB31:
 2276              	@ armwave.c:408:             g_armwave_state.ch1_color.b = b;
 408:armwave.c     ****             break;
 2277              		.loc 1 408 41 view .LVU589
 2278 0aa0 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 409:armwave.c     ****     }
 2279              		.loc 1 409 13 is_stmt 1 view .LVU590
 2280              	.LVL142:
 409:armwave.c     ****     }
 2281              		.loc 1 409 13 is_stmt 0 view .LVU591
 2282              	.LBE31:
 2283              	.LBE34:
 2284              		.loc 1 450 5 is_stmt 1 view .LVU592
 2285 0aa4 FEFFFFEB 		bl	armwave_setup_render		@
 2286              	.LVL143:
 451:armwave.c     **** 
 452:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2287              		.loc 1 452 5 view .LVU593
 2288 0aa8 30109FE5 		ldr	r1, .L133+32	@,
 2289 0aac 30009FE5 		ldr	r0, .L133+36	@,
 2290              	@ armwave.c:453: }
 453:armwave.c     **** }
 2291              		.loc 1 453 1 is_stmt 0 view .LVU594
 2292 0ab0 10D08DE2 		add	sp, sp, #16	@,,
 2293              		.cfi_def_cfa_offset 56
 2294              		@ sp needed	@
 2295 0ab4 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2296              		.cfi_restore 84
 2297              		.cfi_restore 85
 2298              		.cfi_restore 82
 2299              		.cfi_restore 83
 2300              		.cfi_restore 80
 2301              		.cfi_restore 81
 2302              		.cfi_def_cfa_offset 32
 2303 0ab8 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2304              		.cfi_restore 14
 2305              		.cfi_restore 10
 2306              		.cfi_restore 9
 2307              		.cfi_restore 8
 2308              		.cfi_restore 7
 2309              		.cfi_restore 6
 2310              		.cfi_restore 5
 2311              		.cfi_restore 4
 2312              		.cfi_def_cfa_offset 0
 2313              	.LVL144:
 2314              	@ armwave.c:452:     printf("armwave version: %s\n", ARMWAVE_VER);
 452:armwave.c     **** }
 2315              		.loc 1 452 5 view .LVU595
 2316 0abc FEFFFFEA 		b	printf		@
 2317              	.LVL145:
 2318              	.L134:
 2319              		.align	3
 2320              	.L133:
 2321 0ac0 000000C0 		.word	-1073741824
 2322 0ac4 CCCCEC3F 		.word	1072483532
 2323 0ac8 00000000 		.word	0
 2324 0acc 00E06F40 		.word	1081073664
 2325 0ad0 00007F43 		.word	1132396544
 2326 0ad4 FFFFFFFF 		.word	gamma_table-1
 2327 0ad8 00000000 		.word	g_armwave_state
 2328 0adc F609F406 		.word	116656630
 2329 0ae0 00000000 		.word	.LC0
 2330 0ae4 08000000 		.word	.LC1
 2331              		.cfi_endproc
 2332              	.LFE69:
 2334              		.align	2
 2335              		.global	armwave_test_fill_outbuf
 2336              		.syntax unified
 2337              		.arm
 2338              		.fpu vfp
 2340              	armwave_test_fill_outbuf:
 2341              	.LFB70:
 454:armwave.c     **** 
 455:armwave.c     **** /*
 456:armwave.c     ****  * Render image to the local allocated buffer.
 457:armwave.c     ****  */
 458:armwave.c     **** void armwave_test_fill_outbuf()
 459:armwave.c     **** {
 2342              		.loc 1 459 1 is_stmt 1 view -0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 0
 2345              		@ frame_needed = 0, uses_anonymous_args = 0
 2346              		@ link register save eliminated.
 460:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2347              		.loc 1 460 5 view .LVU597
 2348 0ae8 04309FE5 		ldr	r3, .L136	@ tmp111,
 2349 0aec 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2350 0af0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2351              	.LVL146:
 2352              	.L137:
 2353              		.align	2
 2354              	.L136:
 2355 0af4 00000000 		.word	g_armwave_state
 2356              		.cfi_endproc
 2357              	.LFE70:
 2359              		.align	2
 2360              		.global	armwave_test_dump_buffer_to_ppm
 2361              		.syntax unified
 2362              		.arm
 2363              		.fpu vfp
 2365              	armwave_test_dump_buffer_to_ppm:
 2366              	.LVL147:
 2367              	.LFB71:
 461:armwave.c     **** }
 462:armwave.c     **** 
 463:armwave.c     **** /*
 464:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 465:armwave.c     ****  */
 466:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 467:armwave.c     **** {
 2368              		.loc 1 467 1 view -0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 2372              		@ link register save eliminated.
 468:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2373              		.loc 1 468 5 view .LVU599
 2374 0af8 08309FE5 		ldr	r3, .L139	@ tmp112,
 2375 0afc 0010A0E1 		mov	r1, r0	@, fn
 2376 0b00 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2377              	.LVL148:
 2378              		.loc 1 468 5 is_stmt 0 view .LVU600
 2379 0b04 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2380              	.LVL149:
 2381              	.L140:
 2382              		.loc 1 468 5 view .LVU601
 2383              		.align	2
 2384              	.L139:
 2385 0b08 00000000 		.word	g_armwave_state
 2386              		.cfi_endproc
 2387              	.LFE71:
 2389              		.align	2
 2390              		.global	armwave_test_fill_gdkbuf
 2391              		.syntax unified
 2392              		.arm
 2393              		.fpu vfp
 2395              	armwave_test_fill_gdkbuf:
 2396              	.LVL150:
 2397              	.LFB72:
 469:armwave.c     **** }
 470:armwave.c     **** 
 471:armwave.c     **** /*
 472:armwave.c     ****  * Render GDK buffer with test funtionry.
 473:armwave.c     ****  */
 474:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 475:armwave.c     **** {
 2398              		.loc 1 475 1 is_stmt 1 view -0
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 0
 2401              		@ frame_needed = 0, uses_anonymous_args = 0
 2402              		@ link register save eliminated.
 476:armwave.c     ****     //PyObject *mv;
 477:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 478:armwave.c     **** 
 479:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 480:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2403              		.loc 1 480 5 view .LVU603
 481:armwave.c     ****     
 482:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 483:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2404              		.loc 1 483 5 view .LVU604
 2405              	@ armwave.c:480:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 480:armwave.c     ****     
 2406              		.loc 1 480 11 is_stmt 0 view .LVU605
 2407 0b0c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2408              	@ armwave.c:483:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2409              		.loc 1 483 5 view .LVU606
 2410 0b10 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2411              	.LVL151:
 2412              		.loc 1 483 5 view .LVU607
 2413 0b14 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2414              	.LVL152:
 2415              		.loc 1 483 5 view .LVU608
 2416              		.cfi_endproc
 2417              	.LFE72:
 2419              		.align	2
 2420              		.global	armwave_test_buffer_alloc
 2421              		.syntax unified
 2422              		.arm
 2423              		.fpu vfp
 2425              	armwave_test_buffer_alloc:
 2426              	.LVL153:
 2427              	.LFB73:
 484:armwave.c     **** }
 485:armwave.c     **** 
 486:armwave.c     **** /*
 487:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 488:armwave.c     ****  */
 489:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 490:armwave.c     **** {
 2428              		.loc 1 490 1 is_stmt 1 view -0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 491:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2432              		.loc 1 491 5 view .LVU610
 2433              	@ armwave.c:490: {
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2434              		.loc 1 490 1 is_stmt 0 view .LVU611
 2435 0b18 70402DE9 		push	{r4, r5, r6, lr}	@
 2436              		.cfi_def_cfa_offset 16
 2437              		.cfi_offset 4, -16
 2438              		.cfi_offset 5, -12
 2439              		.cfi_offset 6, -8
 2440              		.cfi_offset 14, -4
 2441              	@ armwave.c:490: {
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2442              		.loc 1 490 1 view .LVU612
 2443 0b1c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2444              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 2445              		.loc 1 491 23 view .LVU613
 2446 0b20 44409FE5 		ldr	r4, .L149	@ tmp128,
 2447 0b24 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2448              	.LVL154:
 2449              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 2450              		.loc 1 491 7 view .LVU614
 2451 0b28 000050E3 		cmp	r0, #0	@ _1,
 2452 0b2c 0000000A 		beq	.L143		@,
 492:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2453              		.loc 1 492 9 is_stmt 1 view .LVU615
 2454 0b30 FEFFFFEB 		bl	free		@
 2455              	.LVL155:
 2456              	.L143:
 493:armwave.c     ****     }
 494:armwave.c     **** 
 495:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 496:armwave.c     **** 
 497:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2457              		.loc 1 497 5 view .LVU616
 2458              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2459              		.loc 1 497 75 is_stmt 0 view .LVU617
 2460 0b34 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2461 0b38 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2462              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2463              		.loc 1 497 40 view .LVU618
 2464 0b3c 0610A0E1 		mov	r1, r6	@, nsets
 2465              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2466              		.loc 1 497 75 view .LVU619
 2467 0b40 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2468              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2469              		.loc 1 497 40 view .LVU620
 2470 0b44 0500A0E1 		mov	r0, r5	@, _4
 2471 0b48 FEFFFFEB 		bl	calloc		@
 2472              	.LVL156:
 2473              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 498:armwave.c     **** 
 499:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2474              		.loc 1 499 7 view .LVU621
 2475 0b4c 000050E3 		cmp	r0, #0	@ tmp124,
 2476              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2477              		.loc 1 497 38 view .LVU622
 2478 0b50 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2479              		.loc 1 499 5 is_stmt 1 view .LVU623
 2480              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 2481              		.loc 1 499 7 is_stmt 0 view .LVU624
 2482 0b54 7080BD18 		popne	{r4, r5, r6, pc}	@
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2483              		.loc 1 500 9 is_stmt 1 view .LVU625
 2484 0b58 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2485 0b5c 0620A0E1 		mov	r2, r6	@, nsets
 2486 0b60 08009FE5 		ldr	r0, .L149+4	@,
 2487              	@ armwave.c:504: }
 501:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 502:armwave.c     ****         return;
 503:armwave.c     ****     }
 504:armwave.c     **** }
 2488              		.loc 1 504 1 is_stmt 0 view .LVU626
 2489 0b64 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2490              		.cfi_restore 14
 2491              		.cfi_restore 6
 2492              		.cfi_restore 5
 2493              		.cfi_restore 4
 2494              		.cfi_def_cfa_offset 0
 2495              	.LVL157:
 2496              	@ armwave.c:500:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2497              		.loc 1 500 9 view .LVU627
 2498 0b68 FEFFFFEA 		b	printf		@
 2499              	.LVL158:
 2500              	.L150:
 500:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2501              		.loc 1 500 9 view .LVU628
 2502              		.align	2
 2503              	.L149:
 2504 0b6c 00000000 		.word	g_armwave_state
 2505 0b70 30020000 		.word	.LC19
 2506              		.cfi_endproc
 2507              	.LFE73:
 2509              		.align	2
 2510              		.global	armwave_fill_pixbuf_into_pybuffer
 2511              		.syntax unified
 2512              		.arm
 2513              		.fpu vfp
 2515              	armwave_fill_pixbuf_into_pybuffer:
 2516              	.LVL159:
 2517              	.LFB74:
 505:armwave.c     **** 
 506:armwave.c     **** /*
 507:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 508:armwave.c     ****  */
 509:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 510:armwave.c     **** {
 2518              		.loc 1 510 1 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 48
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 511:armwave.c     ****     Py_buffer buffer;
 2522              		.loc 1 511 5 view .LVU630
 512:armwave.c     ****     int ret;
 2523              		.loc 1 512 5 view .LVU631
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 515:armwave.c     **** 
 516:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2524              		.loc 1 516 5 view .LVU632
 2525              	@ armwave.c:510: {
 510:armwave.c     ****     Py_buffer buffer;
 2526              		.loc 1 510 1 is_stmt 0 view .LVU633
 2527 0b74 04E02DE5 		str	lr, [sp, #-4]!	@,
 2528              		.cfi_def_cfa_offset 4
 2529              		.cfi_offset 14, -4
 2530 0b78 34D04DE2 		sub	sp, sp, #52	@,,
 2531              		.cfi_def_cfa_offset 56
 2532              	@ armwave.c:516:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2533              		.loc 1 516 11 view .LVU634
 2534 0b7c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2535 0b80 0120A0E3 		mov	r2, #1	@,
 2536 0b84 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2537              	.LVL160:
 517:armwave.c     **** 
 518:armwave.c     ****     if(ret != 0) {
 2538              		.loc 1 518 5 is_stmt 1 view .LVU635
 2539              	@ armwave.c:518:     if(ret != 0) {
 2540              		.loc 1 518 7 is_stmt 0 view .LVU636
 2541 0b88 000050E3 		cmp	r0, #0	@,
 2542 0b8c 0A00001A 		bne	.L155		@,
 519:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 520:armwave.c     ****         Py_RETURN_FALSE;
 521:armwave.c     ****     }
 522:armwave.c     **** 
 523:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 524:armwave.c     **** 
 525:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2543              		.loc 1 525 5 is_stmt 1 view .LVU637
 2544 0b90 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2545              	.LVL161:
 2546              		.loc 1 525 5 is_stmt 0 view .LVU638
 2547 0b94 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2548              	.LVL162:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     PyBuffer_Release(&buffer);
 2549              		.loc 1 528 5 is_stmt 1 view .LVU639
 2550 0b98 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2551 0b9c FEFFFFEB 		bl	PyBuffer_Release		@
 2552              	.LVL163:
 529:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 530:armwave.c     **** 
 531:armwave.c     ****     Py_RETURN_TRUE;
 2553              		.loc 1 531 5 view .LVU640
 2554              	.LBB35:
 2555              	.LBI35:
 2556              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2557              		.loc 2 456 20 view .LVU641
 2558              	.LBB36:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2559              		.loc 2 458 21 view .LVU642
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2560              		.loc 2 459 5 view .LVU643
 2561              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2562              		.loc 2 459 18 is_stmt 0 view .LVU644
 2563 0ba0 38309FE5 		ldr	r3, .L156	@ tmp126,
 2564              	.LBE36:
 2565              	.LBE35:
 2566              	@ armwave.c:531:     Py_RETURN_TRUE;
 2567              		.loc 1 531 5 view .LVU645
 2568 0ba4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2569              	.LBB38:
 2570              	.LBB37:
 2571              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2572              		.loc 2 459 18 view .LVU646
 2573 0ba8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2574 0bac 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2575 0bb0 002083E5 		str	r2, [r3]	@ tmp128,
 2576              	.LBE37:
 2577              	.LBE38:
 2578              	@ armwave.c:532: }
 532:armwave.c     **** }
 2579              		.loc 1 532 1 view .LVU647
 2580 0bb4 34D08DE2 		add	sp, sp, #52	@,,
 2581              		.cfi_remember_state
 2582              		.cfi_def_cfa_offset 4
 2583              		@ sp needed	@
 2584 0bb8 04F09DE4 		ldr	pc, [sp], #4	@
 2585              	.LVL164:
 2586              	.L155:
 2587              		.cfi_restore_state
 519:armwave.c     ****         Py_RETURN_FALSE;
 2588              		.loc 1 519 9 is_stmt 1 view .LVU648
 2589 0bbc 20009FE5 		ldr	r0, .L156+4	@,
 2590              	.LVL165:
 519:armwave.c     ****         Py_RETURN_FALSE;
 2591              		.loc 1 519 9 is_stmt 0 view .LVU649
 2592 0bc0 FEFFFFEB 		bl	puts		@
 2593              	.LVL166:
 520:armwave.c     ****     }
 2594              		.loc 1 520 9 is_stmt 1 view .LVU650
 2595              	.LBB39:
 2596              	.LBI39:
 456:/usr/local/include/python3.8/object.h **** {
 2597              		.loc 2 456 20 view .LVU651
 2598              	.LBB40:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2599              		.loc 2 458 21 view .LVU652
 2600              		.loc 2 459 5 view .LVU653
 2601              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2602              		.loc 2 459 18 is_stmt 0 view .LVU654
 2603 0bc4 1C309FE5 		ldr	r3, .L156+8	@ tmp120,
 2604              	.LBE40:
 2605              	.LBE39:
 2606              	@ armwave.c:520:         Py_RETURN_FALSE;
 520:armwave.c     ****     }
 2607              		.loc 1 520 9 view .LVU655
 2608 0bc8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2609              	.LBB42:
 2610              	.LBB41:
 2611              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2612              		.loc 2 459 18 view .LVU656
 2613 0bcc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2614 0bd0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2615 0bd4 002083E5 		str	r2, [r3]	@ tmp122,
 2616              	.LBE41:
 2617              	.LBE42:
 2618              	@ armwave.c:532: }
 2619              		.loc 1 532 1 view .LVU657
 2620 0bd8 34D08DE2 		add	sp, sp, #52	@,,
 2621              		.cfi_def_cfa_offset 4
 2622              		@ sp needed	@
 2623 0bdc 04F09DE4 		ldr	pc, [sp], #4	@
 2624              	.L157:
 2625              		.align	2
 2626              	.L156:
 2627 0be0 00000000 		.word	_Py_TrueStruct
 2628 0be4 84020000 		.word	.LC20
 2629 0be8 00000000 		.word	_Py_FalseStruct
 2630              		.cfi_endproc
 2631              	.LFE74:
 2633              		.align	2
 2634              		.global	armwave_test_create_am_sine
 2635              		.syntax unified
 2636              		.arm
 2637              		.fpu vfp
 2639              	armwave_test_create_am_sine:
 2640              	.LVL167:
 2641              	.LFB75:
 533:armwave.c     **** 
 534:armwave.c     **** /*
 535:armwave.c     ****  * Make a test AM waveform for render tests.
 536:armwave.c     ****  *
 537:armwave.c     ****  * @param   mod                     modulation depth
 538:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 539:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 540:armwave.c     ****  */
 541:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 542:armwave.c     **** {
 2642              		.loc 1 542 1 is_stmt 1 view -0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 8
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 543:armwave.c     ****     float v, noise, xnoise, mod_val;
 2646              		.loc 1 543 5 view .LVU659
 544:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2647              		.loc 1 544 5 view .LVU660
 2648              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2649              		.loc 1 542 1 is_stmt 0 view .LVU661
 2650 0bec F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2651              		.cfi_def_cfa_offset 32
 2652              		.cfi_offset 4, -32
 2653              		.cfi_offset 5, -28
 2654              		.cfi_offset 6, -24
 2655              		.cfi_offset 7, -20
 2656              		.cfi_offset 8, -16
 2657              		.cfi_offset 9, -12
 2658              		.cfi_offset 10, -8
 2659              		.cfi_offset 14, -4
 2660              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2661              		.loc 1 544 38 view .LVU662
 2662 0bf0 7A7A9FED 		vldr.32	s14, .L189	@ tmp180,
 2663              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2664              		.loc 1 544 55 view .LVU663
 2665 0bf4 00529FE5 		ldr	r5, .L189+28	@ tmp250,
 2666              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2667              		.loc 1 542 1 view .LVU664
 2668 0bf8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2669              		.cfi_def_cfa_offset 80
 2670              		.cfi_offset 80, -80
 2671              		.cfi_offset 81, -76
 2672              		.cfi_offset 82, -72
 2673              		.cfi_offset 83, -68
 2674              		.cfi_offset 84, -64
 2675              		.cfi_offset 85, -60
 2676              		.cfi_offset 86, -56
 2677              		.cfi_offset 87, -52
 2678              		.cfi_offset 88, -48
 2679              		.cfi_offset 89, -44
 2680              		.cfi_offset 90, -40
 2681              		.cfi_offset 91, -36
 2682 0bfc 0090A0E1 		mov	r9, r0	@ sets, sets
 2683              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2684              		.loc 1 544 38 view .LVU665
 2685 0c00 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2686              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     int s, set_offset = 0;
 546:armwave.c     ****     int w, x;
 547:armwave.c     **** 
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2687              		.loc 1 548 70 view .LVU666
 2688 0c04 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2689 0c08 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2690              	.LBB45:
 2691              	.LBB46:
 2692              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2693              		.loc 1 491 23 view .LVU667
 2694 0c0c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2695              	.LVL168:
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2696              		.loc 1 491 23 view .LVU668
 2697              	.LBE46:
 2698              	.LBE45:
 2699              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 2700              		.loc 1 544 38 view .LVU669
 2701 0c10 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2702              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2703              		.loc 1 548 70 view .LVU670
 2704 0c14 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2705              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2706              		.loc 1 542 1 view .LVU671
 2707 0c18 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2708              	.LBB50:
 2709              	.LBB47:
 2710              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2711              		.loc 1 491 7 view .LVU672
 2712 0c1c 000050E3 		cmp	r0, #0	@ _82,
 2713              	.LBE47:
 2714              	.LBE50:
 2715              	@ armwave.c:542: {
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2716              		.loc 1 542 1 view .LVU673
 2717 0c20 08D04DE2 		sub	sp, sp, #8	@,,
 2718              		.cfi_def_cfa_offset 88
 2719              	@ armwave.c:549:     g_armwave_state.test_wave_buffer_nsets = sets;
 549:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2720              		.loc 1 549 44 view .LVU674
 2721 0c24 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2722              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2723              		.loc 1 548 45 view .LVU675
 2724 0c28 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2725              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 2726              		.loc 1 544 38 view .LVU676
 2727 0c2c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2728              	@ armwave.c:544:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 544:armwave.c     ****     int s, set_offset = 0;
 2729              		.loc 1 544 11 view .LVU677
 2730 0c30 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2731              	.LVL169:
 545:armwave.c     ****     int w, x;
 2732              		.loc 1 545 5 is_stmt 1 view .LVU678
 546:armwave.c     **** 
 2733              		.loc 1 546 5 view .LVU679
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2734              		.loc 1 548 5 view .LVU680
 2735              		.loc 1 549 5 view .LVU681
 550:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2736              		.loc 1 550 5 view .LVU682
 2737              	.LBB51:
 2738              	.LBI45:
 489:armwave.c     **** {
 2739              		.loc 1 489 6 view .LVU683
 2740              	.LBB48:
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2741              		.loc 1 491 5 view .LVU684
 2742              	@ armwave.c:491:     if(g_armwave_state.test_wave_buffer != NULL) {
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2743              		.loc 1 491 7 is_stmt 0 view .LVU685
 2744 0c34 0000000A 		beq	.L159		@,
 492:armwave.c     ****     }
 2745              		.loc 1 492 9 is_stmt 1 view .LVU686
 2746 0c38 FEFFFFEB 		bl	free		@
 2747              	.LVL170:
 2748              	.L159:
 497:armwave.c     **** 
 2749              		.loc 1 497 5 view .LVU687
 2750              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2751              		.loc 1 497 75 is_stmt 0 view .LVU688
 2752 0c3c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2753 0c40 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2754              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2755              		.loc 1 497 40 view .LVU689
 2756 0c44 0910A0E1 		mov	r1, r9	@, sets
 2757              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2758              		.loc 1 497 75 view .LVU690
 2759 0c48 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2760              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2761              		.loc 1 497 40 view .LVU691
 2762 0c4c 0400A0E1 		mov	r0, r4	@, _85
 2763 0c50 FEFFFFEB 		bl	calloc		@
 2764              	.LVL171:
 2765              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2766              		.loc 1 499 7 view .LVU692
 2767 0c54 000050E3 		cmp	r0, #0	@ tmp191,
 2768              	@ armwave.c:497:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 497:armwave.c     **** 
 2769              		.loc 1 497 38 view .LVU693
 2770 0c58 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2771              		.loc 1 499 5 is_stmt 1 view .LVU694
 2772              	@ armwave.c:499:     if(g_armwave_state.test_wave_buffer == NULL) {
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2773              		.loc 1 499 7 is_stmt 0 view .LVU695
 2774 0c5c 5A00000A 		beq	.L188		@,
 2775              	.L160:
 2776              	.LVL172:
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2777              		.loc 1 499 7 view .LVU696
 2778              	.LBE48:
 2779              	.LBE51:
 2780              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 551:armwave.c     **** 
 552:armwave.c     ****     for(s = 0; s < sets; s++) {
 2781              		.loc 1 552 5 discriminator 1 view .LVU697
 2782 0c60 000059E3 		cmp	r9, #0	@ sets,
 2783 0c64 550000DA 		ble	.L158		@,
 2784              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 554:armwave.c     ****     
 555:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 556:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 557:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 558:armwave.c     **** 
 559:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 560:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 561:armwave.c     ****                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 563:armwave.c     ****                 noise *= noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 566:armwave.c     ****                     noise = -noise;
 567:armwave.c     **** 
 568:armwave.c     ****                 noise += 1.0f;
 569:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 570:armwave.c     **** 
 571:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2785              		.loc 1 571 45 view .LVU698
 2786 0c68 5C8A9FED 		vldr.32	s16, .L189	@ tmp258,
 2787              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 572:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 573:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 574:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2788              		.loc 1 574 104 view .LVU699
 2789 0c6c 5CCA9FED 		vldr.32	s24, .L189+4	@ tmp259,
 2790              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 2791              		.loc 1 552 5 view .LVU700
 2792 0c70 0070A0E3 		mov	r7, #0	@ set_offset,
 2793              	@ armwave.c:553:         printf("Calculating test set %d\n", s);
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 2794              		.loc 1 553 9 view .LVU701
 2795 0c74 84A19FE5 		ldr	r10, .L189+32	@ tmp257,
 2796              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 2797              		.loc 1 552 5 view .LVU702
 2798 0c78 0780A0E1 		mov	r8, r7	@ s, set_offset
 2799              	.LVL173:
 2800              	.L161:
 553:armwave.c     ****         printf("Calculating test set %d\n", s);
 2801              		.loc 1 553 9 is_stmt 1 view .LVU703
 2802 0c7c 0810A0E1 		mov	r1, r8	@, s
 2803 0c80 0A00A0E1 		mov	r0, r10	@, tmp257
 2804 0c84 FEFFFFEB 		bl	printf		@
 2805              	.LVL174:
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2806              		.loc 1 555 9 view .LVU704
 2807              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2808              		.loc 1 555 39 is_stmt 0 view .LVU705
 2809 0c88 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2810              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2811              		.loc 1 555 9 view .LVU706
 2812 0c8c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2813 0c90 450000DA 		ble	.L162		@,
 2814              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 2815              		.loc 1 557 21 view .LVU707
 2816 0c94 53CADFED 		vldr.32	s25, .L189+8	@ tmp200,
 2817              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2818              		.loc 1 571 33 view .LVU708
 2819 0c98 53BA9FED 		vldr.32	s22, .L189+12	@ tmp253,
 2820              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2821              		.loc 1 569 24 view .LVU709
 2822 0c9c 53AADFED 		vldr.32	s21, .L189+16	@ tmp254,
 2823 0ca0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2824              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2825              		.loc 1 555 15 view .LVU710
 2826 0ca4 0060A0E3 		mov	r6, #0	@ w,
 2827              	.LVL175:
 2828              	.L169:
 557:armwave.c     **** 
 2829              		.loc 1 557 13 is_stmt 1 view .LVU711
 2830              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 2831              		.loc 1 557 21 is_stmt 0 view .LVU712
 2832 0ca8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2833 0cac 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2834              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2835              		.loc 1 559 13 view .LVU713
 2836 0cb0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2837              	@ armwave.c:557:             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 2838              		.loc 1 557 21 view .LVU714
 2839 0cb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2840 0cb8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2841              	.LVL176:
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2842              		.loc 1 559 13 is_stmt 1 view .LVU715
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2843              		.loc 1 559 13 is_stmt 0 view .LVU716
 2844 0cbc 370000DA 		ble	.L163		@,
 2845 0cc0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2846              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2847              		.loc 1 574 113 view .LVU717
 2848 0cc4 4AAA9FED 		vldr.32	s20, .L189+20	@ tmp229,
 2849 0cc8 4A8ADFED 		vldr.32	s17, .L189+24	@ tmp230,
 2850              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2851              		.loc 1 559 19 view .LVU718
 2852 0ccc 0040A0E3 		mov	r4, #0	@ x,
 2853              	.LVL177:
 2854              	.L168:
 560:armwave.c     ****                 noise *= noise;
 2855              		.loc 1 560 17 is_stmt 1 view .LVU719
 2856              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2857              		.loc 1 560 28 is_stmt 0 view .LVU720
 2858 0cd0 FEFFFFEB 		bl	rand		@
 2859              	.LVL178:
 2860              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2861              		.loc 1 560 35 view .LVU721
 2862 0cd4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2863              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2864              		.loc 1 560 45 view .LVU722
 2865 0cd8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2866 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2867              	@ armwave.c:560:                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 2868              		.loc 1 560 24 view .LVU723
 2869 0ce0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2870              	.LVL179:
 561:armwave.c     ****                 noise *= noise;
 2871              		.loc 1 561 17 is_stmt 1 view .LVU724
 2872              	@ armwave.c:561:                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 2873              		.loc 1 561 23 is_stmt 0 view .LVU725
 2874 0ce4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2875              	.LVL180:
 562:armwave.c     ****                 noise *= noise;
 2876              		.loc 1 562 17 is_stmt 1 view .LVU726
 2877              	@ armwave.c:562:                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 2878              		.loc 1 562 23 is_stmt 0 view .LVU727
 2879 0ce8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2880              	.LVL181:
 563:armwave.c     **** 
 2881              		.loc 1 563 17 is_stmt 1 view .LVU728
 2882              	@ armwave.c:563:                 noise *= noise;
 563:armwave.c     **** 
 2883              		.loc 1 563 23 is_stmt 0 view .LVU729
 2884 0cec A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2885              	.LVL182:
 565:armwave.c     ****                     noise = -noise;
 2886              		.loc 1 565 17 is_stmt 1 view .LVU730
 2887              	@ armwave.c:565:                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 2888              		.loc 1 565 21 is_stmt 0 view .LVU731
 2889 0cf0 FEFFFFEB 		bl	rand		@
 2890              	.LVL183:
 566:armwave.c     **** 
 2891              		.loc 1 566 21 is_stmt 1 view .LVU732
 2892              	@ armwave.c:565:                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 2893              		.loc 1 565 19 is_stmt 0 view .LVU733
 2894 0cf4 020910E3 		tst	r0, #32768	@,
 2895              	@ armwave.c:566:                     noise = -noise;
 566:armwave.c     **** 
 2896              		.loc 1 566 27 view .LVU734
 2897 0cf8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2898              	.LVL184:
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2899              		.loc 1 568 17 is_stmt 1 view .LVU735
 569:armwave.c     **** 
 2900              		.loc 1 569 17 view .LVU736
 2901              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2902              		.loc 1 569 27 is_stmt 0 view .LVU737
 2903 0cfc FEFFFFEB 		bl	rand		@
 2904              	.LVL185:
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2905              		.loc 1 571 17 is_stmt 1 view .LVU738
 2906              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2907              		.loc 1 571 45 is_stmt 0 view .LVU739
 2908 0d00 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2909              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2910              		.loc 1 571 33 view .LVU740
 2911 0d04 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2912              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2913              		.loc 1 571 45 view .LVU741
 2914 0d08 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2915              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2916              		.loc 1 571 33 view .LVU742
 2917 0d0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2918              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2919              		.loc 1 571 45 view .LVU743
 2920 0d10 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2921              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2922              		.loc 1 571 33 view .LVU744
 2923 0d14 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2924              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2925              		.loc 1 569 34 view .LVU745
 2926 0d18 7000FFE6 		uxth	r0, r0	@ tmp214,
 2927              	.LVL186:
 2928              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2929              		.loc 1 569 44 view .LVU746
 2930 0d1c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2931 0d20 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2932              	@ armwave.c:569:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 2933              		.loc 1 569 24 view .LVU747
 2934 0d24 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2935              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2936              		.loc 1 571 77 view .LVU748
 2937 0d28 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2938              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2939              		.loc 1 571 22 view .LVU749
 2940 0d2c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2941 0d30 FEFFFFEB 		bl	sin		@
 2942              	.LVL187:
 2943              		.loc 1 574 17 is_stmt 1 view .LVU750
 2944              	@ armwave.c:568:                 noise += 1.0f;
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2945              		.loc 1 568 23 is_stmt 0 view .LVU751
 2946 0d34 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2947              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2948              		.loc 1 574 104 view .LVU752
 2949 0d38 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2950              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2951              		.loc 1 571 98 view .LVU753
 2952 0d3c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2953              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2954              		.loc 1 571 87 view .LVU754
 2955 0d40 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2956              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2957              		.loc 1 571 98 view .LVU755
 2958 0d44 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2959              	@ armwave.c:571:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2960              		.loc 1 571 19 view .LVU756
 2961 0d48 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2962              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2963              		.loc 1 574 113 view .LVU757
 2964 0d4c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2965 0d50 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2966 0d54 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2967 0d58 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2968 0d5c 050000DA 		ble	.L165		@,
 2969              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2970              		.loc 1 574 104 discriminator 1 view .LVU758
 2971 0d60 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2972 0d64 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2973 0d68 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2974 0d6c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2975 0d70 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2976 0d74 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2977              	.L165:
 2978              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2979              		.loc 1 574 57 discriminator 12 view .LVU759
 2980 0d78 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2981              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2982              		.loc 1 574 102 discriminator 12 view .LVU760
 2983 0d7c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2984 0d80 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2985 0d84 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2986              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2987              		.loc 1 559 58 discriminator 12 view .LVU761
 2988 0d88 014084E2 		add	r4, r4, #1	@ x, x,
 2989              	.LVL188:
 2990              	@ armwave.c:574:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2991              		.loc 1 574 102 discriminator 12 view .LVU762
 2992 0d8c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2993              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2994              		.loc 1 559 43 discriminator 12 view .LVU763
 2995 0d90 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2996              	@ armwave.c:559:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2997              		.loc 1 559 13 discriminator 12 view .LVU764
 2998 0d94 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2999 0d98 CCFFFFCA 		bgt	.L168		@,
 3000 0d9c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3001              	.LVL189:
 3002              	.L163:
 3003              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3004              		.loc 1 555 48 discriminator 2 view .LVU765
 3005 0da0 016086E2 		add	r6, r6, #1	@ w, w,
 3006              	.LVL190:
 3007              	@ armwave.c:555:         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3008              		.loc 1 555 9 discriminator 2 view .LVU766
 3009 0da4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3010 0da8 BEFFFFBA 		blt	.L169		@,
 3011              	.LVL191:
 3012              	.L162:
 575:armwave.c     ****             }
 576:armwave.c     ****         }
 577:armwave.c     **** 
 578:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3013              		.loc 1 578 9 is_stmt 1 discriminator 2 view .LVU767
 3014              	@ armwave.c:578:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3015              		.loc 1 578 46 is_stmt 0 discriminator 2 view .LVU768
 3016 0dac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3017              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3018              		.loc 1 552 27 discriminator 2 view .LVU769
 3019 0db0 018088E2 		add	r8, r8, #1	@ s, s,
 3020              	.LVL192:
 3021              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3022              		.loc 1 552 5 discriminator 2 view .LVU770
 3023 0db4 080059E1 		cmp	r9, r8	@ sets, s
 3024              	@ armwave.c:578:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3025              		.loc 1 578 20 discriminator 2 view .LVU771
 3026 0db8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3027              	.LVL193:
 3028              	@ armwave.c:552:     for(s = 0; s < sets; s++) {
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 3029              		.loc 1 552 5 discriminator 2 view .LVU772
 3030 0dbc AEFFFF1A 		bne	.L161		@,
 3031              	.LVL194:
 3032              	.L158:
 3033              	@ armwave.c:580: }
 579:armwave.c     ****     }
 580:armwave.c     **** }
 3034              		.loc 1 580 1 view .LVU773
 3035 0dc0 08D08DE2 		add	sp, sp, #8	@,,
 3036              		.cfi_remember_state
 3037              		.cfi_def_cfa_offset 80
 3038              		@ sp needed	@
 3039 0dc4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3040              		.cfi_restore 90
 3041              		.cfi_restore 91
 3042              		.cfi_restore 88
 3043              		.cfi_restore 89
 3044              		.cfi_restore 86
 3045              		.cfi_restore 87
 3046              		.cfi_restore 84
 3047              		.cfi_restore 85
 3048              		.cfi_restore 82
 3049              		.cfi_restore 83
 3050              		.cfi_restore 80
 3051              		.cfi_restore 81
 3052              		.cfi_def_cfa_offset 32
 3053              	.LVL195:
 3054              		.loc 1 580 1 view .LVU774
 3055 0dc8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3056              	.LVL196:
 3057              	.L188:
 3058              		.cfi_restore_state
 3059              	.LBB52:
 3060              	.LBB49:
 500:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3061              		.loc 1 500 9 is_stmt 1 view .LVU775
 3062 0dcc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3063 0dd0 0920A0E1 		mov	r2, r9	@, sets
 3064 0dd4 28009FE5 		ldr	r0, .L189+36	@,
 3065 0dd8 FEFFFFEB 		bl	printf		@
 3066              	.LVL197:
 502:armwave.c     ****     }
 3067              		.loc 1 502 9 view .LVU776
 3068 0ddc 9FFFFFEA 		b	.L160		@
 3069              	.L190:
 3070              		.align	2
 3071              	.L189:
 3072 0de0 0000803F 		.word	1065353216
 3073 0de4 00007F43 		.word	1132396544
 3074 0de8 0000003F 		.word	1056964608
 3075 0dec C3F5C840 		.word	1086911939
 3076 0df0 38FFC74A 		.word	1254620984
 3077 0df4 0000FE42 		.word	1123942400
 3078 0df8 00000043 		.word	1124073472
 3079 0dfc 00000000 		.word	g_armwave_state
 3080 0e00 D8020000 		.word	.LC21
 3081 0e04 30020000 		.word	.LC19
 3082              	.LBE49:
 3083              	.LBE52:
 3084              		.cfi_endproc
 3085              	.LFE75:
 3087              		.align	2
 3088              		.global	armwave_cleanup
 3089              		.syntax unified
 3090              		.arm
 3091              		.fpu vfp
 3093              	armwave_cleanup:
 3094              	.LFB76:
 581:armwave.c     **** 
 582:armwave.c     **** /*
 583:armwave.c     ****  * Make a test square waveform.
 584:armwave.c     ****  *
 585:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 586:armwave.c     ****  */
 587:armwave.c     **** #if 0
 588:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 589:armwave.c     **** {
 590:armwave.c     ****     uint8_t v;
 591:armwave.c     ****     float noise, xnoise;
 592:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 593:armwave.c     ****     int w, x;
 594:armwave.c     **** 
 595:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 596:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 597:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 598:armwave.c     ****             noise *= noise;
 599:armwave.c     ****             noise *= noise;
 600:armwave.c     ****             noise *= noise;
 601:armwave.c     **** 
 602:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 603:armwave.c     ****                 noise = -noise;
 604:armwave.c     **** 
 605:armwave.c     ****             //noise += 1.0f;
 606:armwave.c     **** 
 607:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 608:armwave.c     ****                 new_level = 0.2f;
 609:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 610:armwave.c     ****                 new_level = 0.8f;
 611:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 612:armwave.c     ****                 new_level = 0.2f;
 613:armwave.c     ****             } else {
 614:armwave.c     ****                 new_level = 0.8f;
 615:armwave.c     ****             }
 616:armwave.c     **** 
 617:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 618:armwave.c     **** 
 619:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 620:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 621:armwave.c     ****         }
 622:armwave.c     ****     }
 623:armwave.c     **** }
 624:armwave.c     **** #endif
 625:armwave.c     **** 
 626:armwave.c     **** /*
 627:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 628:armwave.c     ****  */
 629:armwave.c     **** void armwave_cleanup()
 630:armwave.c     **** {
 3095              		.loc 1 630 1 view -0
 3096              		.cfi_startproc
 3097              		@ args = 0, pretend = 0, frame = 0
 3098              		@ frame_needed = 0, uses_anonymous_args = 0
 631:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3099              		.loc 1 631 5 view .LVU778
 3100              	@ armwave.c:630: {
 630:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3101              		.loc 1 630 1 is_stmt 0 view .LVU779
 3102 0e08 10402DE9 		push	{r4, lr}	@
 3103              		.cfi_def_cfa_offset 8
 3104              		.cfi_offset 4, -8
 3105              		.cfi_offset 14, -4
 3106              	@ armwave.c:631:     free(g_armwave_state.out_pixbuf);
 3107              		.loc 1 631 25 view .LVU780
 3108 0e0c 34409FE5 		ldr	r4, .L193	@ tmp114,
 3109              	@ armwave.c:631:     free(g_armwave_state.out_pixbuf);
 3110              		.loc 1 631 5 view .LVU781
 3111 0e10 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3112 0e14 FEFFFFEB 		bl	free		@
 3113              	.LVL198:
 632:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3114              		.loc 1 632 5 is_stmt 1 view .LVU782
 3115 0e18 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3116 0e1c FEFFFFEB 		bl	free		@
 3117              	.LVL199:
 633:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3118              		.loc 1 633 5 view .LVU783
 3119 0e20 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3120 0e24 FEFFFFEB 		bl	free		@
 3121              	.LVL200:
 634:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3122              		.loc 1 634 5 view .LVU784
 3123 0e28 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3124 0e2c FEFFFFEB 		bl	free		@
 3125              	.LVL201:
 635:armwave.c     **** 
 636:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3126              		.loc 1 636 5 view .LVU785
 3127              	@ armwave.c:636:     g_armwave_state.out_pixbuf = NULL;
 3128              		.loc 1 636 32 is_stmt 0 view .LVU786
 3129 0e30 0030A0E3 		mov	r3, #0	@ tmp123,
 3130 0e34 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 637:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3131              		.loc 1 637 5 is_stmt 1 view .LVU787
 3132              	@ armwave.c:637:     g_armwave_state.ch1_buffer = NULL;
 3133              		.loc 1 637 32 is_stmt 0 view .LVU788
 3134 0e38 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 638:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3135              		.loc 1 638 5 is_stmt 1 view .LVU789
 3136              	@ armwave.c:638:     g_armwave_state.xcoord_to_xpixel = NULL;
 3137              		.loc 1 638 38 is_stmt 0 view .LVU790
 3138 0e3c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 639:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3139              		.loc 1 639 5 is_stmt 1 view .LVU791
 3140              	@ armwave.c:639:     g_armwave_state.test_wave_buffer = NULL;
 3141              		.loc 1 639 38 is_stmt 0 view .LVU792
 3142 0e40 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3143              	@ armwave.c:640: }
 640:armwave.c     **** }
 3144              		.loc 1 640 1 view .LVU793
 3145 0e44 1080BDE8 		pop	{r4, pc}	@
 3146              	.L194:
 3147              		.align	2
 3148              	.L193:
 3149 0e48 00000000 		.word	g_armwave_state
 3150              		.cfi_endproc
 3151              	.LFE76:
 3153              		.comm	gamma_table,256,4
 3154              		.comm	g_armwave_state,136,4
 3155              		.section	.rodata
 3156              		.align	2
 3157              		.set	.LANCHOR0,. + 0
 3160              	__PRETTY_FUNCTION__.17095:
 3161 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3161      6176655F 
 3161      66696C6C 
 3161      5F706978 
 3161      6275665F 
 3162 001b 00       		.space	1
 3165              	__PRETTY_FUNCTION__.17125:
 3166 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3166      6176655F 
 3166      73657475 
 3166      705F7265 
 3166      6E646572 
 3167 0031 000000   		.space	3
 3170              	__PRETTY_FUNCTION__.17132:
 3171 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3171      6176655F 
 3171      7365745F 
 3171      77617665 
 3171      5F706F69 
 3172 004d 000000   		.space	3
 3175              	__PRETTY_FUNCTION__.17139:
 3176 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3176      6176655F 
 3176      7365745F 
 3176      77617665 
 3176      5F706F69 
 3177              		.section	.rodata.str1.4,"aMS",%progbits,1
 3178              		.align	2
 3179              	.LC0:
 3180 0000 76302E30 		.ascii	"v0.0.1\000"
 3180      2E3100
 3181 0007 00       		.space	1
 3182              	.LC1:
 3183 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3183      61766520 
 3183      76657273 
 3183      696F6E3A 
 3183      2025730A 
 3184 001d 000000   		.space	3
 3185              	.LC2:
 3186 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3186      78253038 
 3186      7820623D 
 3186      30782530 
 3186      38782063 
 3187 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 3187      25642073 
 3187      63616C65 
 3187      3D256420 
 3187      62697464 
 3188 0077 00       		.space	1
 3189              	.LC3:
 3190 0078 61726D77 		.ascii	"armwave.c\000"
 3190      6176652E 
 3190      6300
 3191 0082 0000     		.space	2
 3192              	.LC4:
 3193 0084 6F75745F 		.ascii	"out_buffer != NULL\000"
 3193      62756666 
 3193      65722021 
 3193      3D204E55 
 3193      4C4C00
 3194 0097 00       		.space	1
 3195              	.LC5:
 3196 0098 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3196      20653D25 
 3196      6420773D 
 3196      25642077 
 3196      733D2564 
 3197              	.LC6:
 3198 00c4 73746172 		.ascii	"start_point < end_point\000"
 3198      745F706F 
 3198      696E7420 
 3198      3C20656E 
 3198      645F706F 
 3199              	.LC7:
 3200 00dc 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3200      7566665F 
 3200      73697A65 
 3200      3D25642C 
 3200      20636D70 
 3201 010f 77657665 		.ascii	"weve_length=%d, scaler=%d\012\000"
 3201      5F6C656E 
 3201      6774683D 
 3201      25642C20 
 3201      7363616C 
 3202 012a 0000     		.space	2
 3203              	.LC8:
 3204 012c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3204      6D776176 
 3204      655F7374 
 3204      6174652E 
 3204      6368315F 
 3205 014f 00       		.space	1
 3206              	.LC9:
 3207 0150 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3207      6D776176 
 3207      655F7374 
 3207      6174652E 
 3207      78636F6F 
 3208 0179 000000   		.space	3
 3209              	.LC10:
 3210 017c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3210      3A203078 
 3210      25303878 
 3210      20307825 
 3210      30387820 
 3211              	.LC11:
 3212 01a0 77617665 		.ascii	"wave_buffer != NULL\000"
 3212      5F627566 
 3212      66657220 
 3212      213D204E 
 3212      554C4C00 
 3213              	.LC12:
 3214 01b4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3214      6176655F 
 3214      7365745F 
 3214      77617665 
 3214      5F706F69 
 3215 01e7 78636565 		.ascii	"xceeded\000"
 3215      64656400 
 3216 01ef 00       		.space	1
 3217              	.LC13:
 3218 01f0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3218      5F627566 
 3218      6665725F 
 3218      70747220 
 3218      213D2030 
 3219 0205 000000   		.space	3
 3220              	.LC14:
 3221 0208 776200   		.ascii	"wb\000"
 3222 020b 00       		.space	1
 3223              	.LC15:
 3224 020c 50330A00 		.ascii	"P3\012\000"
 3225              	.LC16:
 3226 0210 25642025 		.ascii	"%d %d\012\000"
 3226      640A00
 3227 0217 00       		.space	1
 3228              	.LC17:
 3229 0218 3235350A 		.ascii	"255\012\000"
 3229      00
 3230 021d 000000   		.space	3
 3231              	.LC18:
 3232 0220 25336420 		.ascii	"%3d %3d %3d\012\000"
 3232      25336420 
 3232      2533640A 
 3232      00
 3233 022d 000000   		.space	3
 3234              	.LC19:
 3235 0230 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3235      6176655F 
 3235      74657374 
 3235      5F627566 
 3235      6665725F 
 3236 0263 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3236      20627566 
 3236      66657220 
 3236      28256420 
 3236      62797465 
 3237              	.LC20:
 3238 0284 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3238      6176655F 
 3238      66696C6C 
 3238      5F706978 
 3238      6275665F 
 3239 02b7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3239      20666169 
 3239      6C65642C 
 3239      20726574 
 3239      75726E69 
 3240 02d6 0000     		.space	2
 3241              	.LC21:
 3242 02d8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3242      756C6174 
 3242      696E6720 
 3242      74657374 
 3242      20736574 
 3243              		.text
 3244              	.Letext0:
 3245              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3246              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3247              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3248              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3249              		.file 7 "/usr/include/stdio.h"
 3250              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3251              		.file 9 "/usr/include/errno.h"
 3252              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3253              		.file 11 "/usr/include/unistd.h"
 3254              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3255              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3256              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3257              		.file 15 "/usr/include/math.h"
 3258              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3259              		.file 17 "/usr/include/time.h"
 3260              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3261              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3262              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3263              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3264              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3265              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3266              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3267              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3268              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3269              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3270              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3271              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3272              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3273              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3274              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3275              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3276              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3277              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3278              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3279              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3280              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3281              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3282              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3283              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3284              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3285              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3286              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3287              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3288              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3289              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3290              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3291              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3292              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3293              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3294              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3295              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3296              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3297              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3298              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3299              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3300              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3301              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3302              		.file 60 "/usr/local/include/python3.8/context.h"
 3303              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3304              		.file 62 "/usr/local/include/python3.8/code.h"
 3305              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3306              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3307              		.file 65 "/usr/local/include/python3.8/import.h"
 3308              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3309              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3310              		.file 68 "/usr/include/malloc.h"
 3311              		.file 69 "armwave.h"
 3312              		.file 70 "/usr/include/stdlib.h"
 3313              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3314              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3315              		.file 73 "<built-in>"
 3316              		.file 74 "/usr/include/assert.h"
 3317              		.file 75 "/usr/include/string.h"
