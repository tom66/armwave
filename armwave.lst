   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB72:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define CLAMP_NEON(x,mi,mx)    	vmin_s32(vmax_s32(x, mx), mi)
  35:armwave.c     **** 
  36:armwave.c     **** 
  37:armwave.c     **** 
  38:armwave.c     **** struct armwave_state_t g_armwave_state;
  39:armwave.c     **** 
  40:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  41:armwave.c     **** uint8_t gamma_table[256];
  42:armwave.c     **** 
  43:armwave.c     **** float overall_scale = 20.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 143:armwave.c     ****             	word >>= 8;
 144:armwave.c     ****     		}
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 156 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 167:armwave.c     ****     assert((target_height % 256) == 0);
 168:armwave.c     **** 
 169:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 170:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 170 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 FC409FE5 		ldr	r4, .L12	@ tmp172,
 107 000c FC309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 171:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 172:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 172 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 173:armwave.c     ****     g_armwave_state.waves = waves;
 174:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 175:armwave.c     ****     g_armwave_state.target_width = target_width;
 176:armwave.c     ****     g_armwave_state.target_height = target_height;
 177:armwave.c     **** 
 178:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 179:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 180:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 181:armwave.c     ****     g_armwave_state.slice_height = 64;  
 182:armwave.c     **** 
 183:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 183 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 171 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 118              		.loc 1 164 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 120              		.loc 1 167 5 is_stmt 1 view .LVU12
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 170 5 view .LVU13
 122              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 174 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 173 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 183 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 171 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 170 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 171 5 is_stmt 1 view .LVU19
 172:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 172 5 view .LVU20
 139              	@ armwave.c:176:     g_armwave_state.target_height = target_height;
 176:armwave.c     **** 
 140              		.loc 1 176 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 172:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 172 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 173 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:175:     g_armwave_state.target_width = target_width;
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 175 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 173 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 174 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 154              		.loc 1 181 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 174 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 175 5 is_stmt 1 view .LVU29
 176:armwave.c     **** 
 160              		.loc 1 176 5 view .LVU30
 181:armwave.c     **** 
 161              		.loc 1 181 5 view .LVU31
 162              		.loc 1 183 5 view .LVU32
 163              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 183 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 184:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 184 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 185:armwave.c     **** 
 186:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 186 5 view .LVU35
 172              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 186 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:188:     g_armwave_state.ch1_color.g = 0.7f;
 187:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 188:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 179              		.loc 1 188 33 view .LVU37
 180 0064 A8209FE5 		ldr	r2, .L12+8	@ tmp151,
 181              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 0.1f;
 189:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 182              		.loc 1 189 33 view .LVU38
 183 0068 A8309FE5 		ldr	r3, .L12+12	@ tmp153,
 184              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 1.0f;
 187:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 185              		.loc 1 187 33 view .LVU39
 186 006c FE15A0E3 		mov	r1, #1065353216	@ tmp149,
 187 0070 401084E5 		str	r1, [r4, #64]	@ float	@ tmp149, g_armwave_state.ch1_color.r
 188              	@ armwave.c:188:     g_armwave_state.ch1_color.g = 0.7f;
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 189              		.loc 1 188 33 view .LVU40
 190 0074 442084E5 		str	r2, [r4, #68]	@ float	@ tmp151, g_armwave_state.ch1_color.g
 191              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 0.1f;
 192              		.loc 1 189 33 view .LVU41
 193 0078 483084E5 		str	r3, [r4, #72]	@ float	@ tmp153, g_armwave_state.ch1_color.b
 194              	@ armwave.c:191:     assert(g_armwave_state.ch1_buffer != NULL);
 190:armwave.c     **** 
 191:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 195              		.loc 1 191 5 view .LVU42
 196 007c 000050E3 		cmp	r0, #0	@ tmp146,
 197              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 198              		.loc 1 186 32 view .LVU43
 199 0080 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 200              		.loc 1 187 5 is_stmt 1 view .LVU44
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 201              		.loc 1 188 5 view .LVU45
 189:armwave.c     **** 
 202              		.loc 1 189 5 view .LVU46
 203              		.loc 1 191 5 view .LVU47
 204 0084 1600000A 		beq	.L10		@,
 192:armwave.c     **** 
 193:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 194:armwave.c     ****     length = end_point - start_point;
 205              		.loc 1 194 5 view .LVU48
 206              	.LVL3:
 195:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 207              		.loc 1 195 5 view .LVU49
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 208              		.loc 1 196 5 view .LVU50
 209              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210              		.loc 1 196 60 is_stmt 0 view .LVU51
 211 0088 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp174, g_armwave_state.slice_height
 212              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 213              		.loc 1 197 40 view .LVU52
 214 008c 010AA0E3 		mov	r0, #4096	@,
 215              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 216              		.loc 1 196 60 view .LVU53
 217 0090 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp159, tmp174
 218              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 219              		.loc 1 196 41 view .LVU54
 220 0094 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp161, tmp159
 221 0098 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp161, g_armwave_state.slice_record_height
 222              		.loc 1 197 5 is_stmt 1 view .LVU55
 223              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 224              		.loc 1 197 40 is_stmt 0 view .LVU56
 225 009c FEFFFFEB 		bl	malloc		@
 226              	.LVL4:
 227              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 198:armwave.c     **** 
 199:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 228              		.loc 1 199 5 view .LVU57
 229 00a0 000050E3 		cmp	r0, #0	@ tmp162,
 230              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 231              		.loc 1 197 38 view .LVU58
 232 00a4 700084E5 		str	r0, [r4, #112]	@ tmp162, g_armwave_state.xcoord_to_xpixel
 233              		.loc 1 199 5 is_stmt 1 view .LVU59
 234              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 200:armwave.c     **** 
 201:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 235              		.loc 1 201 12 is_stmt 0 view .LVU60
 236 00a8 0030A013 		movne	r3, #0	@ xx,
 237 00ac 02004012 		subne	r0, r0, #2	@ ivtmp.46, tmp162,
 238              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 199:armwave.c     **** 
 239              		.loc 1 199 5 view .LVU61
 240 00b0 1000000A 		beq	.L11		@,
 241              	.L5:
 242              	.LVL5:
 202:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 243              		.loc 1 202 9 is_stmt 1 view .LVU62
 244              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 245              		.loc 1 202 74 is_stmt 0 view .LVU63
 246 00b4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 247              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 201 32 view .LVU64
 249 00b8 013083E2 		add	r3, r3, #1	@ xx, xx,
 250              	.LVL6:
 251              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 252              		.loc 1 201 5 view .LVU65
 253 00bc 020B53E3 		cmp	r3, #2048	@ xx,
 254              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 255              		.loc 1 202 74 view .LVU66
 256 00c0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp167, xx
 257              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 258              		.loc 1 202 46 view .LVU67
 259 00c4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp168, tmp167
 260 00c8 902A17EE 		vmov	r2, s15	@ int	@ tmp168, tmp168
 261 00cc B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp168, MEM[base: _20, offset: 0B]
 262              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 263              		.loc 1 201 5 view .LVU68
 264 00d0 F7FFFF1A 		bne	.L5		@,
 203:armwave.c     **** 
 204:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 205:armwave.c     ****     }
 206:armwave.c     **** 
 207:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 265              		.loc 1 207 5 is_stmt 1 view .LVU69
 266              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 267              		.loc 1 207 34 is_stmt 0 view .LVU70
 268 00d4 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 269 00d8 FEFFFFEB 		bl	malloc		@
 270              	.LVL7:
 271              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 272              		.loc 1 207 32 view .LVU71
 273 00dc 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 274              	@ armwave.c:208: }
 208:armwave.c     **** }
 275              		.loc 1 208 1 view .LVU72
 276 00e0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 277              	.LVL8:
 278              	.L10:
 191:armwave.c     **** 
 279              		.loc 1 191 5 is_stmt 1 view .LVU73
 280 00e4 30309FE5 		ldr	r3, .L12+16	@,
 281 00e8 BF20A0E3 		mov	r2, #191	@,
 282 00ec 2C109FE5 		ldr	r1, .L12+20	@,
 283 00f0 2C009FE5 		ldr	r0, .L12+24	@,
 284 00f4 FEFFFFEB 		bl	__assert_fail		@
 285              	.LVL9:
 286              	.L11:
 199:armwave.c     **** 
 287              		.loc 1 199 5 view .LVU74
 288 00f8 1C309FE5 		ldr	r3, .L12+16	@,
 289 00fc C720A0E3 		mov	r2, #199	@,
 290 0100 18109FE5 		ldr	r1, .L12+20	@,
 291 0104 1C009FE5 		ldr	r0, .L12+28	@,
 292 0108 FEFFFFEB 		bl	__assert_fail		@
 293              	.LVL10:
 294              	.L13:
 295              		.align	2
 296              	.L12:
 297 010c 00000000 		.word	g_armwave_state
 298 0110 00000000 		.word	test_wave_buffer
 299 0114 3333333F 		.word	1060320051
 300 0118 CDCCCC3D 		.word	1036831949
 301 011c 00000000 		.word	.LANCHOR0
 302 0120 00000000 		.word	.LC0
 303 0124 0C000000 		.word	.LC1
 304 0128 30000000 		.word	.LC2
 305              		.cfi_endproc
 306              	.LFE72:
 308              		.align	2
 309              		.global	test_create_waveform
 310              		.syntax unified
 311              		.arm
 312              		.fpu vfp
 314              	test_create_waveform:
 315              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 316              		.loc 1 51 1 view -0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 8
 319              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 320              		.loc 1 52 5 view .LVU76
  53:armwave.c     **** 
 321              		.loc 1 53 5 view .LVU77
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 322              		.loc 1 55 5 view .LVU78
 323              	.LVL11:
 324              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 325              		.loc 1 51 1 is_stmt 0 view .LVU79
 326 012c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 327              		.cfi_def_cfa_offset 36
 328              		.cfi_offset 4, -36
 329              		.cfi_offset 5, -32
 330              		.cfi_offset 6, -28
 331              		.cfi_offset 7, -24
 332              		.cfi_offset 8, -20
 333              		.cfi_offset 9, -16
 334              		.cfi_offset 10, -12
 335              		.cfi_offset 11, -8
 336              		.cfi_offset 14, -4
 337 0130 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 338              		.cfi_def_cfa_offset 84
 339              		.cfi_offset 80, -84
 340              		.cfi_offset 81, -80
 341              		.cfi_offset 82, -76
 342              		.cfi_offset 83, -72
 343              		.cfi_offset 84, -68
 344              		.cfi_offset 85, -64
 345              		.cfi_offset 86, -60
 346              		.cfi_offset 87, -56
 347              		.cfi_offset 88, -52
 348              		.cfi_offset 89, -48
 349              		.cfi_offset 90, -44
 350              		.cfi_offset 91, -40
 351 0134 5C819FE5 		ldr	r8, .L33+40	@ _75,
 352              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 353              		.loc 1 56 33 view .LVU80
 354 0138 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 355 013c 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.62, _75,
 356              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 357              		.loc 1 56 13 view .LVU81
 358 0140 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 359              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 360              		.loc 1 60 20 view .LVU82
 361 0144 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 362              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 363              		.loc 1 71 29 view .LVU83
 364 0148 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 365              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 366              		.loc 1 71 33 view .LVU84
 367 014c 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 368              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 369              		.loc 1 69 20 view .LVU85
 370 0150 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 371 0154 02B886E2 		add	fp, r6, #131072	@ _81,,
 372 0158 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 373              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 374              		.loc 1 51 1 view .LVU86
 375 015c 0CD04DE2 		sub	sp, sp, #12	@,,
 376              		.cfi_def_cfa_offset 96
 377 0160 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 378 0164 0F6086E2 		add	r6, r6, #15	@ ivtmp.62, ivtmp.62,
 379 0168 008068E2 		rsb	r8, r8, #0	@ ivtmp.65, _75
 380              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 381              		.loc 1 55 11 view .LVU87
 382 016c 0090A0E3 		mov	r9, #0	@ w,
 383              	.LVL12:
 384              	.L20:
  56:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 56 9 is_stmt 1 view .LVU88
 386              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 387              		.loc 1 56 24 is_stmt 0 view .LVU89
 388 0170 909A07EE 		vmov	s15, r9	@ int	@ w, w
 389              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 390              		.loc 1 56 48 view .LVU90
 391 0174 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 392              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 393              		.loc 1 56 13 view .LVU91
 394 0178 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 395              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 396              		.loc 1 68 19 view .LVU92
 397 017c 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 398              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 399              		.loc 1 56 24 view .LVU93
 400 0180 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 401              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 402              		.loc 1 73 58 view .LVU94
 403 0184 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 404 0188 025B46E2 		sub	r5, r6, #2048	@ ivtmp.55, ivtmp.62,
 405 018c 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.65,
 406              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 407              		.loc 1 56 33 view .LVU95
 408 0190 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 409              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 410              		.loc 1 56 13 view .LVU96
 411 0194 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 412              	.LVL13:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 413              		.loc 1 59 9 is_stmt 1 view .LVU97
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 414              		.loc 1 59 9 is_stmt 0 view .LVU98
 415 0198 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 416              	.LVL14:
 417              	.L19:
 418              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 419              		.loc 1 60 24 view .LVU99
 420 019c FEFFFFEB 		bl	rand		@
 421              	.LVL15:
 422 01a0 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.55
 423              	.LVL16:
  60:armwave.c     ****             noise *= noise;
 424              		.loc 1 60 13 is_stmt 1 view .LVU100
 425              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 426              		.loc 1 60 31 is_stmt 0 view .LVU101
 427 01a4 7000FFE6 		uxth	r0, r0	@ tmp163,
 428              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 429              		.loc 1 60 41 view .LVU102
 430 01a8 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 431 01ac E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 432              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 433              		.loc 1 60 20 view .LVU103
 434 01b0 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 435              	.LVL17:
  61:armwave.c     ****             noise *= noise;
 436              		.loc 1 61 13 is_stmt 1 view .LVU104
 437              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 438              		.loc 1 61 19 is_stmt 0 view .LVU105
 439 01b4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL18:
  62:armwave.c     ****             noise *= noise;
 441              		.loc 1 62 13 is_stmt 1 view .LVU106
 442              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 443              		.loc 1 62 19 is_stmt 0 view .LVU107
 444 01b8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 445              	.LVL19:
  63:armwave.c     **** 
 446              		.loc 1 63 13 is_stmt 1 view .LVU108
 447              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 448              		.loc 1 63 19 is_stmt 0 view .LVU109
 449 01bc A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 450              	.LVL20:
  65:armwave.c     ****                 noise = -noise;
 451              		.loc 1 65 13 is_stmt 1 view .LVU110
 452              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 453              		.loc 1 65 17 is_stmt 0 view .LVU111
 454 01c0 FEFFFFEB 		bl	rand		@
 455              	.LVL21:
  66:armwave.c     **** 
 456              		.loc 1 66 17 is_stmt 1 view .LVU112
 457              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 458              		.loc 1 65 15 is_stmt 0 view .LVU113
 459 01c4 020910E3 		tst	r0, #32768	@,
 460              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 461              		.loc 1 66 23 view .LVU114
 462 01c8 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 463              	.LVL22:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 464              		.loc 1 68 13 is_stmt 1 view .LVU115
  69:armwave.c     **** 
 465              		.loc 1 69 13 view .LVU116
 466              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 467              		.loc 1 69 23 is_stmt 0 view .LVU117
 468 01cc FEFFFFEB 		bl	rand		@
 469              	.LVL23:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 470              		.loc 1 71 13 is_stmt 1 view .LVU118
 471              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 472              		.loc 1 71 29 is_stmt 0 view .LVU119
 473 01d0 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 474 01d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 475 01d8 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 476              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 477              		.loc 1 69 30 view .LVU120
 478 01dc 7000FFE6 		uxth	r0, r0	@ tmp173,
 479              	.LVL24:
 480              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 481              		.loc 1 69 40 view .LVU121
 482 01e0 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 483 01e4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 484              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 485              		.loc 1 69 20 view .LVU122
 486 01e8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 487              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 488              		.loc 1 71 60 view .LVU123
 489 01ec 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 490              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 491              		.loc 1 71 18 view .LVU124
 492 01f0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 493 01f4 FEFFFFEB 		bl	sin		@
 494              	.LVL25:
  73:armwave.c     ****         }
 495              		.loc 1 73 13 is_stmt 1 view .LVU125
 496              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 497              		.loc 1 68 19 is_stmt 0 view .LVU126
 498 01f8 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 499              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 500              		.loc 1 73 58 view .LVU127
 501 01fc 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 502              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 503              		.loc 1 73 56 view .LVU128
 504 0200 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 505 0204 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 506              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 507              		.loc 1 71 77 view .LVU129
 508 0208 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 509              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 510              		.loc 1 71 70 view .LVU130
 511 020c 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 512              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 513              		.loc 1 71 77 view .LVU131
 514 0210 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 515              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 516              		.loc 1 71 15 view .LVU132
 517 0214 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 518              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 519              		.loc 1 73 58 view .LVU133
 520 0218 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 521 021c 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 522 0220 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 523 0224 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 524 0228 050000DA 		ble	.L16		@,
 525              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 526              		.loc 1 73 56 discriminator 1 view .LVU134
 527 022c C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 528 0230 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 529 0234 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 530 0238 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 531 023c 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 532 0240 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 533              	.L16:
 534              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 535              		.loc 1 73 56 discriminator 12 view .LVU135
 536 0244 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 537              	.LVL26:
 538              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 539              		.loc 1 59 9 discriminator 12 view .LVU136
 540 0248 060055E1 		cmp	r5, r6	@ ivtmp.55, ivtmp.62
 541 024c D2FFFF1A 		bne	.L19		@,
 542 0250 026B85E2 		add	r6, r5, #2048	@ ivtmp.62, ivtmp.55,
 543              	.LVL27:
 544              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 545              		.loc 1 55 5 discriminator 2 view .LVU137
 546 0254 0B0056E1 		cmp	r6, fp	@ ivtmp.62, _81
 547              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 548              		.loc 1 55 34 discriminator 2 view .LVU138
 549 0258 019089E2 		add	r9, r9, #1	@ w, w,
 550              	.LVL28:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 551              		.loc 1 55 34 discriminator 2 view .LVU139
 552 025c 028B48E2 		sub	r8, r8, #2048	@ ivtmp.65, ivtmp.65,
 553              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 554              		.loc 1 55 5 discriminator 2 view .LVU140
 555 0260 C2FFFF1A 		bne	.L20		@,
 556              	@ armwave.c:76: }
  76:armwave.c     **** 
 557              		.loc 1 76 1 view .LVU141
 558 0264 0CD08DE2 		add	sp, sp, #12	@,,
 559              		.cfi_def_cfa_offset 84
 560              		@ sp needed	@
 561 0268 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 562              		.cfi_restore 90
 563              		.cfi_restore 91
 564              		.cfi_restore 88
 565              		.cfi_restore 89
 566              		.cfi_restore 86
 567              		.cfi_restore 87
 568              		.cfi_restore 84
 569              		.cfi_restore 85
 570              		.cfi_restore 82
 571              		.cfi_restore 83
 572              		.cfi_restore 80
 573              		.cfi_restore 81
 574              		.cfi_def_cfa_offset 36
 575              	.LVL29:
  76:armwave.c     **** 
 576              		.loc 1 76 1 view .LVU142
 577 026c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 578              	.LVL30:
 579              	.L34:
  76:armwave.c     **** 
 580              		.loc 1 76 1 view .LVU143
 581              		.align	2
 582              	.L33:
 583 0270 0000803C 		.word	1015021568
 584 0274 0000003F 		.word	1056964608
 585 0278 0050C347 		.word	1203982336
 586 027c C3F5C840 		.word	1086911939
 587 0280 0000003A 		.word	973078528
 588 0284 38FFC74A 		.word	1254620984
 589 0288 0000803F 		.word	1065353216
 590 028c 0000FE42 		.word	1123942400
 591 0290 00000043 		.word	1124073472
 592 0294 00007F43 		.word	1132396544
 593 0298 00000000 		.word	test_wave_buffer
 594 029c 00000000 		.word	.LANCHOR1
 595              		.cfi_endproc
 596              	.LFE57:
 598              		.align	2
 599              		.global	test_create_gamma
 600              		.syntax unified
 601              		.arm
 602              		.fpu vfp
 604              	test_create_gamma:
 605              	.LFB58:
  82:armwave.c     ****     int i;
 606              		.loc 1 82 1 is_stmt 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 610              		.loc 1 83 5 view .LVU145
  84:armwave.c     **** 
 611              		.loc 1 84 5 view .LVU146
 612              	.LVL31:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 613              		.loc 1 86 5 view .LVU147
 614              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 615              		.loc 1 82 1 is_stmt 0 view .LVU148
 616 02a0 70402DE9 		push	{r4, r5, r6, lr}	@
 617              		.cfi_def_cfa_offset 16
 618              		.cfi_offset 4, -16
 619              		.cfi_offset 5, -12
 620              		.cfi_offset 6, -8
 621              		.cfi_offset 14, -4
 622 02a4 068B2DED 		vpush.64	{d8, d9, d10}	@
 623              		.cfi_def_cfa_offset 40
 624              		.cfi_offset 80, -40
 625              		.cfi_offset 81, -36
 626              		.cfi_offset 82, -32
 627              		.cfi_offset 83, -28
 628              		.cfi_offset 84, -24
 629              		.cfi_offset 85, -20
 630 02a8 64409FE5 		ldr	r4, .L39+20	@ ivtmp.73,
 631              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 632              		.loc 1 87 32 view .LVU149
 633 02ac 17AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 634              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 635              		.loc 1 87 26 view .LVU150
 636 02b0 129B9FED 		vldr.64	d9, .L39	@ tmp135,
 637              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 638              		.loc 1 87 49 view .LVU151
 639 02b4 138B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 640 02b8 015084E2 		add	r5, r4, #1	@ _25, ivtmp.73,
 641 02bc 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.73,
 642 02c0 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 643              	.LVL32:
 644              	.L36:
  87:armwave.c     ****     }
 645              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU152
 646              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 647              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU153
 648 02c4 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.73
 649              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 650              		.loc 1 87 26 discriminator 3 view .LVU154
 651 02c8 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 652              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 653              		.loc 1 87 32 discriminator 3 view .LVU155
 654 02cc 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 655 02d0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 656 02d4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 657              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 658              		.loc 1 87 26 discriminator 3 view .LVU156
 659 02d8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 660 02dc FEFFFFEB 		bl	pow		@
 661              	.LVL33:
 662              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 663              		.loc 1 87 49 discriminator 3 view .LVU157
 664 02e0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 665              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 666              		.loc 1 87 24 discriminator 3 view .LVU158
 667 02e4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 668 02e8 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 669 02ec 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 670              	.LVL34:
 671              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 672              		.loc 1 86 5 discriminator 3 view .LVU159
 673 02f0 060054E1 		cmp	r4, r6	@ ivtmp.73, _26
 674 02f4 F2FFFF1A 		bne	.L36		@,
 675              	@ armwave.c:89: }
  89:armwave.c     **** 
 676              		.loc 1 89 1 view .LVU160
 677 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 678              		.cfi_restore 84
 679              		.cfi_restore 85
 680              		.cfi_restore 82
 681              		.cfi_restore 83
 682              		.cfi_restore 80
 683              		.cfi_restore 81
 684              		.cfi_def_cfa_offset 16
 685 02fc 7080BDE8 		pop	{r4, r5, r6, pc}	@
 686              	.LVL35:
 687              	.L40:
  89:armwave.c     **** 
 688              		.loc 1 89 1 view .LVU161
 689              		.align	3
 690              	.L39:
 691 0300 000000C0 		.word	-1073741824
 692 0304 CCCCEC3F 		.word	1072483532
 693 0308 00000000 		.word	0
 694 030c 00E06F40 		.word	1081073664
 695 0310 00007F43 		.word	1132396544
 696 0314 FFFFFFFF 		.word	gamma_table-1
 697              		.cfi_endproc
 698              	.LFE58:
 700              		.align	2
 701              		.global	render_nonaa_to_buffer_1ch_slice
 702              		.syntax unified
 703              		.arm
 704              		.fpu vfp
 706              	render_nonaa_to_buffer_1ch_slice:
 707              	.LVL36:
 708              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 709              		.loc 1 99 1 is_stmt 1 view -0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 713              		.loc 1 100 5 view .LVU163
 101:armwave.c     ****     uint8_t *wave_base;
 714              		.loc 1 101 5 view .LVU164
 102:armwave.c     ****     uint8_t *write_buffer_base;
 715              		.loc 1 102 5 view .LVU165
 103:armwave.c     ****     uint8_t *write_buffer;
 716              		.loc 1 103 5 view .LVU166
 104:armwave.c     ****     
 717              		.loc 1 104 5 view .LVU167
 106:armwave.c     **** 
 718              		.loc 1 106 5 view .LVU168
 719              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 720              		.loc 1 106 40 is_stmt 0 view .LVU169
 721 0318 F4209FE5 		ldr	r2, .L53	@ tmp257,
 722              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 723              		.loc 1 99 1 view .LVU170
 724 031c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 725              		.cfi_def_cfa_offset 36
 726              		.cfi_offset 4, -36
 727              		.cfi_offset 5, -32
 728              		.cfi_offset 6, -28
 729              		.cfi_offset 7, -24
 730              		.cfi_offset 8, -20
 731              		.cfi_offset 9, -16
 732              		.cfi_offset 10, -12
 733              		.cfi_offset 11, -8
 734              		.cfi_offset 14, -4
 735              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 736              		.loc 1 109 5 view .LVU171
 737 0320 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 738              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 739              		.loc 1 106 63 view .LVU172
 740 0324 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 741              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 742              		.loc 1 109 5 view .LVU173
 743 0328 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 744              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 745              		.loc 1 106 40 view .LVU174
 746 032c 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 747              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 748              		.loc 1 106 63 view .LVU175
 749 0330 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 750              	.LVL37:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 751              		.loc 1 109 5 is_stmt 1 view .LVU176
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 752              		.loc 1 109 5 is_stmt 0 view .LVU177
 753 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 754 0338 000051E3 		cmp	r1, #0	@ height,
 755 033c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 756 0340 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 757              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 758              		.loc 1 109 11 view .LVU178
 759 0344 0080A0E3 		mov	r8, #0	@ w,
 760              	.LVL38:
 761              	.L45:
 110:armwave.c     **** 
 762              		.loc 1 110 9 is_stmt 1 view .LVU179
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 763              		.loc 1 120 9 view .LVU180
 764              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 765              		.loc 1 110 64 is_stmt 0 view .LVU181
 766 0348 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 767 034c 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 768              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 769              		.loc 1 120 16 view .LVU182
 770 0350 0000A0E3 		mov	r0, #0	@ yy,
 771 0354 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 772 0358 037087E0 		add	r7, r7, r3	@ ivtmp.79, g_armwave_state.wave_buffer, tmp195
 773              	.LVL39:
 774              	.L44:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 775              		.loc 1 135 13 is_stmt 1 view .LVU183
 776              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 777              		.loc 1 135 18 is_stmt 0 view .LVU184
 778 035c 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 779              	.LVL40:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 780              		.loc 1 139 13 is_stmt 1 view .LVU185
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 781              		.loc 1 140 14 view .LVU186
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 782              		.loc 1 141 14 view .LVU187
 142:armwave.c     ****             	word >>= 8;
 783              		.loc 1 142 14 view .LVU188
 784              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 785              		.loc 1 140 42 is_stmt 0 view .LVU189
 786 0360 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 787              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 788              		.loc 1 141 60 view .LVU190
 789 0364 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 790              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 791              		.loc 1 140 34 view .LVU191
 792 0368 73E0EFE6 		uxtb	lr, r3	@ word, word
 793              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 794              		.loc 1 143 19 view .LVU192
 795 036c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 796              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 797              		.loc 1 142 44 view .LVU193
 798 0370 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 799              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 800              		.loc 1 140 34 view .LVU194
 801 0374 7440EFE6 		uxtb	r4, r4	@ word, word
 802              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 803              		.loc 1 142 44 view .LVU195
 804 0378 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 805              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 806              		.loc 1 141 60 view .LVU196
 807 037c 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 808              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 809              		.loc 1 143 19 view .LVU197
 810 0380 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 811              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 812              		.loc 1 142 44 view .LVU198
 813 0384 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 814              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 815              		.loc 1 140 34 view .LVU199
 816 0388 7EE0EFE6 		uxtb	lr, lr	@ word, word
 817              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 818              		.loc 1 143 19 view .LVU200
 819 038c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 820              	.LVL41:
 821              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 822              		.loc 1 142 44 view .LVU201
 823 0390 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 824 0394 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 825              	.LVL42:
 143:armwave.c     ****     		}
 826              		.loc 1 143 14 is_stmt 1 view .LVU202
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 827              		.loc 1 140 14 view .LVU203
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 828              		.loc 1 141 14 view .LVU204
 142:armwave.c     ****             	word >>= 8;
 829              		.loc 1 142 14 view .LVU205
 830              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 831              		.loc 1 140 42 is_stmt 0 view .LVU206
 832 0398 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 833              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 834              		.loc 1 141 60 view .LVU207
 835 039c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 836              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 837              		.loc 1 142 44 view .LVU208
 838 03a0 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 839              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 840              		.loc 1 141 60 view .LVU209
 841 03a4 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 842              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 843              		.loc 1 142 44 view .LVU210
 844 03a8 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 845              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 846              		.loc 1 141 60 view .LVU211
 847 03ac 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 848              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 849              		.loc 1 120 37 view .LVU212
 850 03b0 040080E2 		add	r0, r0, #4	@ yy, yy,
 851              	.LVL43:
 852              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 853              		.loc 1 142 44 view .LVU213
 854 03b4 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 855              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 856              		.loc 1 120 9 view .LVU214
 857 03b8 000051E1 		cmp	r1, r0	@ height, yy
 858              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 859              		.loc 1 142 44 view .LVU215
 860 03bc 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 861 03c0 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 862              	.LVL44:
 143:armwave.c     ****     		}
 863              		.loc 1 143 14 is_stmt 1 view .LVU216
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 864              		.loc 1 140 14 view .LVU217
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 865              		.loc 1 141 14 view .LVU218
 142:armwave.c     ****             	word >>= 8;
 866              		.loc 1 142 14 view .LVU219
 867              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 868              		.loc 1 140 42 is_stmt 0 view .LVU220
 869 03c4 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 870              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 871              		.loc 1 141 60 view .LVU221
 872 03c8 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 873              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 874              		.loc 1 142 44 view .LVU222
 875 03cc 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 876 03d0 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 877 03d4 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 878 03d8 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 879 03dc 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****     		}
 880              		.loc 1 143 14 is_stmt 1 view .LVU223
 881              	.LVL45:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 882              		.loc 1 140 14 view .LVU224
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 883              		.loc 1 141 14 view .LVU225
 142:armwave.c     ****             	word >>= 8;
 884              		.loc 1 142 14 view .LVU226
 885              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 886              		.loc 1 140 42 is_stmt 0 view .LVU227
 887 03e0 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 888              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 889              		.loc 1 141 60 view .LVU228
 890 03e4 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 891              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 892              		.loc 1 142 44 view .LVU229
 893 03e8 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 894 03ec 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 895 03f0 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 896 03f4 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 897 03f8 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****     		}
 898              		.loc 1 143 14 is_stmt 1 view .LVU230
 899              	.LVL46:
 900              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 901              		.loc 1 120 9 is_stmt 0 view .LVU231
 902 03fc D6FFFF8A 		bhi	.L44		@,
 903              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 904              		.loc 1 109 5 view .LVU232
 905 0400 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 906              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 907              		.loc 1 109 44 view .LVU233
 908 0404 018088E2 		add	r8, r8, #1	@ w, w,
 909              	.LVL47:
 910              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 911              		.loc 1 109 5 view .LVU234
 912 0408 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 913 040c CDFFFF3A 		bcc	.L45		@,
 914 0410 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 915              	.L54:
 916              		.align	2
 917              	.L53:
 918 0414 00000000 		.word	g_armwave_state
 919              		.cfi_endproc
 920              	.LFE59:
 922              		.align	2
 923              		.global	armwave_init
 924              		.syntax unified
 925              		.arm
 926              		.fpu vfp
 928              	armwave_init:
 929              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 930              		.loc 1 152 1 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 153:armwave.c     **** }
 935              		.loc 1 153 5 view .LVU236
 936              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 937              		.loc 1 153 27 is_stmt 0 view .LVU237
 938 0418 08309FE5 		ldr	r3, .L56	@ tmp110,
 939 041c 0020A0E3 		mov	r2, #0	@ tmp111,
 940 0420 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 941              	@ armwave.c:154: }
 154:armwave.c     **** 
 942              		.loc 1 154 1 view .LVU238
 943 0424 1EFF2FE1 		bx	lr	@
 944              	.L57:
 945              		.align	2
 946              	.L56:
 947 0428 00000000 		.word	g_armwave_state
 948              		.cfi_endproc
 949              	.LFE60:
 951              		.align	2
 952              		.global	armwave_setup_render
 953              		.syntax unified
 954              		.arm
 955              		.fpu vfp
 957              	armwave_setup_render:
 958              	.LVL48:
 959              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 960              		.loc 1 157 1 is_stmt 1 view -0
 961              		.cfi_startproc
 962              		@ args = 16, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 964              		.loc 1 158 5 view .LVU240
 159:armwave.c     **** 
 965              		.loc 1 159 5 view .LVU241
 161:armwave.c     **** 
 966              		.loc 1 161 5 view .LVU242
 967              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 968              		.loc 1 157 1 is_stmt 0 view .LVU243
 969 042c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 970              		.cfi_def_cfa_offset 32
 971              		.cfi_offset 4, -32
 972              		.cfi_offset 5, -28
 973              		.cfi_offset 6, -24
 974              		.cfi_offset 7, -20
 975              		.cfi_offset 8, -16
 976              		.cfi_offset 9, -12
 977              		.cfi_offset 10, -8
 978              		.cfi_offset 14, -4
 979              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 980              		.loc 1 161 5 view .LVU244
 981 0430 020051E1 		cmp	r1, r2	@ start_point, end_point
 982              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 983              		.loc 1 157 1 view .LVU245
 984 0434 028B2DED 		vpush.64	{d8}	@
 985              		.cfi_def_cfa_offset 40
 986              		.cfi_offset 80, -40
 987              		.cfi_offset 81, -36
 988              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 157 1 view .LVU246
 990 0438 0190A0E1 		mov	r9, r1	@ start_point, start_point
 991 043c 0260A0E1 		mov	r6, r2	@ end_point, end_point
 992 0440 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 993              	.LVL49:
 157:armwave.c     ****     uint32_t length, xx;
 994              		.loc 1 157 1 view .LVU247
 995 0444 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 996 0448 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 997              	.LVL50:
 998              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 999              		.loc 1 161 5 view .LVU248
 1000 044c 3F00002A 		bcs	.L70		@,
 164:armwave.c     **** 
 1001              		.loc 1 164 5 is_stmt 1 view .LVU249
 1002              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1003              		.loc 1 164 33 is_stmt 0 view .LVU250
 1004 0450 4C519FE5 		ldr	r5, .L74+4	@ tmp194,
 1005              	@ armwave.c:167:     assert((target_height % 256) == 0);
 167:armwave.c     **** 
 1006              		.loc 1 167 5 view .LVU251
 1007 0454 FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1008              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1009              		.loc 1 164 33 view .LVU252
 1010 0458 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1011              		.loc 1 167 5 is_stmt 1 view .LVU253
 1012 045c 4A00001A 		bne	.L71		@,
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1013              		.loc 1 170 5 view .LVU254
 1014              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1015              		.loc 1 174 42 is_stmt 0 view .LVU255
 1016 0460 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1017              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1018              		.loc 1 183 23 view .LVU256
 1019 0464 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1020              	.LVL51:
 1021              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 172:armwave.c     ****     g_armwave_state.waves = waves;
 1022              		.loc 1 172 33 view .LVU257
 1023 0468 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1024              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1025              		.loc 1 173 27 view .LVU258
 1026 046c 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1027              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1028              		.loc 1 171 44 view .LVU259
 1029 0470 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1030              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 1031              		.loc 1 181 34 view .LVU260
 1032 0474 4030A0E3 		mov	r3, #64	@ tmp159,
 1033              	.LVL52:
 1034              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1035              		.loc 1 183 7 view .LVU261
 1036 0478 000050E3 		cmp	r0, #0	@ _4,
 1037              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1038              		.loc 1 170 29 view .LVU262
 1039 047c 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1040              		.loc 1 171 5 is_stmt 1 view .LVU263
 1041              	@ armwave.c:175:     g_armwave_state.target_width = target_width;
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 1042              		.loc 1 175 34 is_stmt 0 view .LVU264
 1043 0480 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1044              	@ armwave.c:176:     g_armwave_state.target_height = target_height;
 176:armwave.c     **** 
 1045              		.loc 1 176 35 view .LVU265
 1046 0484 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1047              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1048              		.loc 1 174 26 view .LVU266
 1049 0488 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1050              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1051              		.loc 1 171 28 view .LVU267
 1052 048c 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 172:armwave.c     ****     g_armwave_state.waves = waves;
 1053              		.loc 1 172 5 is_stmt 1 view .LVU268
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1054              		.loc 1 173 5 view .LVU269
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1055              		.loc 1 174 5 view .LVU270
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 1056              		.loc 1 175 5 view .LVU271
 176:armwave.c     **** 
 1057              		.loc 1 176 5 view .LVU272
 181:armwave.c     **** 
 1058              		.loc 1 181 5 view .LVU273
 1059              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 1060              		.loc 1 181 34 is_stmt 0 view .LVU274
 1061 0490 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1062              		.loc 1 183 5 is_stmt 1 view .LVU275
 1063              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1064              		.loc 1 183 7 is_stmt 0 view .LVU276
 1065 0494 0100000A 		beq	.L61		@,
 184:armwave.c     **** 
 1066              		.loc 1 184 9 is_stmt 1 view .LVU277
 1067 0498 FEFFFFEB 		bl	free		@
 1068              	.LVL53:
 184:armwave.c     **** 
 1069              		.loc 1 184 9 is_stmt 0 view .LVU278
 1070 049c 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1071              	.L61:
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 1072              		.loc 1 186 5 is_stmt 1 view .LVU279
 1073              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 1074              		.loc 1 186 34 is_stmt 0 view .LVU280
 1075 04a0 0110A0E3 		mov	r1, #1	@,
 1076 04a4 0700A0E1 		mov	r0, r7	@, _3
 1077 04a8 FEFFFFEB 		bl	calloc		@
 1078              	.LVL54:
 1079              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 1.0f;
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 1080              		.loc 1 187 33 view .LVU281
 1081 04ac 3B8ADFED 		vldr.32	s17, .L74	@ tmp165,
 1082              	@ armwave.c:188:     g_armwave_state.ch1_color.g = 0.7f;
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 1083              		.loc 1 188 33 view .LVU282
 1084 04b0 F0209FE5 		ldr	r2, .L74+8	@ tmp167,
 1085              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 0.1f;
 189:armwave.c     **** 
 1086              		.loc 1 189 33 view .LVU283
 1087 04b4 F0309FE5 		ldr	r3, .L74+12	@ tmp169,
 1088              	@ armwave.c:188:     g_armwave_state.ch1_color.g = 0.7f;
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 1089              		.loc 1 188 33 view .LVU284
 1090 04b8 442085E5 		str	r2, [r5, #68]	@ float	@ tmp167, g_armwave_state.ch1_color.g
 1091              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 1.0f;
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 1092              		.loc 1 187 33 view .LVU285
 1093 04bc 108AC5ED 		vstr.32	s17, [r5, #64]	@ tmp165, g_armwave_state.ch1_color.r
 1094              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 0.1f;
 189:armwave.c     **** 
 1095              		.loc 1 189 33 view .LVU286
 1096 04c0 483085E5 		str	r3, [r5, #72]	@ float	@ tmp169, g_armwave_state.ch1_color.b
 1097              	@ armwave.c:191:     assert(g_armwave_state.ch1_buffer != NULL);
 191:armwave.c     **** 
 1098              		.loc 1 191 5 view .LVU287
 1099 04c4 000050E3 		cmp	r0, #0	@ tmp162,
 1100              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 1.0f;
 1101              		.loc 1 186 32 view .LVU288
 1102 04c8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 0.7f;
 1103              		.loc 1 187 5 is_stmt 1 view .LVU289
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 0.1f;
 1104              		.loc 1 188 5 view .LVU290
 189:armwave.c     **** 
 1105              		.loc 1 189 5 view .LVU291
 191:armwave.c     **** 
 1106              		.loc 1 191 5 view .LVU292
 1107 04cc 2900000A 		beq	.L72		@,
 194:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1108              		.loc 1 194 5 view .LVU293
 1109              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 195 34 is_stmt 0 view .LVU294
 1111 04d0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1112              	@ armwave.c:194:     length = end_point - start_point;
 194:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1113              		.loc 1 194 12 view .LVU295
 1114 04d4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1115              	.LVL55:
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1116              		.loc 1 195 5 is_stmt 1 view .LVU296
 1117              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1118              		.loc 1 197 40 is_stmt 0 view .LVU297
 1119 04d8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1120              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 195 34 view .LVU298
 1122 04dc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp174, target_width
 1123              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1124              		.loc 1 195 31 view .LVU299
 1125 04e0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1126 04e4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp173, length
 1127              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1128              		.loc 1 196 60 view .LVU300
 1129 04e8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp198, g_armwave_state.slice_height
 1130 04ec 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp177, tmp198
 1131              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1132              		.loc 1 195 22 view .LVU301
 1133 04f0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp173, tmp174
 1134              	.LVL56:
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1135              		.loc 1 196 5 is_stmt 1 view .LVU302
 1136              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1137              		.loc 1 196 60 is_stmt 0 view .LVU303
 1138 04f4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp179, tmp177, points_per_pixel
 1139              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1140              		.loc 1 196 41 view .LVU304
 1141 04f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp180, tmp179
 1142 04fc 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp180, g_armwave_state.slice_record_height
 197:armwave.c     **** 
 1143              		.loc 1 197 5 is_stmt 1 view .LVU305
 1144              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1145              		.loc 1 197 40 is_stmt 0 view .LVU306
 1146 0500 FEFFFFEB 		bl	malloc		@
 1147              	.LVL57:
 1148              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 199:armwave.c     **** 
 1149              		.loc 1 199 5 view .LVU307
 1150 0504 000050E3 		cmp	r0, #0	@ tmp182,
 1151              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1152              		.loc 1 197 38 view .LVU308
 1153 0508 700085E5 		str	r0, [r5, #112]	@ tmp182, g_armwave_state.xcoord_to_xpixel
 199:armwave.c     **** 
 1154              		.loc 1 199 5 is_stmt 1 view .LVU309
 1155 050c 1400000A 		beq	.L73		@,
 1156              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1157              		.loc 1 202 54 is_stmt 0 view .LVU310
 1158 0510 887A88EE 		vdiv.f32	s14, s17, s16	@ _15, tmp165, points_per_pixel
 1159 0514 020040E2 		sub	r0, r0, #2	@ ivtmp.89, tmp182,
 1160              	.L64:
 1161              	.LVL58:
 202:armwave.c     **** 
 1162              		.loc 1 202 9 is_stmt 1 discriminator 3 view .LVU311
 1163              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1164              		.loc 1 202 74 is_stmt 0 discriminator 3 view .LVU312
 1165 0518 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1166              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1167              		.loc 1 201 32 discriminator 3 view .LVU313
 1168 051c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1169              	.LVL59:
 1170              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1171              		.loc 1 201 5 discriminator 3 view .LVU314
 1172 0520 040056E1 		cmp	r6, r4	@ length, xx
 1173              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1174              		.loc 1 202 74 discriminator 3 view .LVU315
 1175 0524 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp188, xx
 1176 0528 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp188, _15
 1177              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1178              		.loc 1 202 46 discriminator 3 view .LVU316
 1179 052c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp190, tmp189
 1180 0530 903A17EE 		vmov	r3, s15	@ int	@ tmp190, tmp190
 1181 0534 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp190, MEM[base: _64, offset: 0B]
 1182              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1183              		.loc 1 201 5 discriminator 3 view .LVU317
 1184 0538 F6FFFF1A 		bne	.L64		@,
 207:armwave.c     **** }
 1185              		.loc 1 207 5 is_stmt 1 view .LVU318
 1186              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 207:armwave.c     **** }
 1187              		.loc 1 207 34 is_stmt 0 view .LVU319
 1188 053c 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1189 0540 FEFFFFEB 		bl	malloc		@
 1190              	.LVL60:
 1191              	@ armwave.c:208: }
 1192              		.loc 1 208 1 view .LVU320
 1193 0544 028BBDEC 		vldm	sp!, {d8}	@
 1194              		.cfi_remember_state
 1195              		.cfi_restore 80
 1196              		.cfi_restore 81
 1197              		.cfi_def_cfa_offset 32
 1198              	.LVL61:
 1199              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 207:armwave.c     **** }
 1200              		.loc 1 207 32 view .LVU321
 1201 0548 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1202              	@ armwave.c:208: }
 1203              		.loc 1 208 1 view .LVU322
 1204 054c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1205              	.LVL62:
 1206              	.L70:
 1207              		.cfi_restore_state
 161:armwave.c     **** 
 1208              		.loc 1 161 5 is_stmt 1 discriminator 1 view .LVU323
 1209 0550 58309FE5 		ldr	r3, .L74+16	@,
 1210              	.LVL63:
 161:armwave.c     **** 
 1211              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU324
 1212 0554 A120A0E3 		mov	r2, #161	@,
 1213 0558 54109FE5 		ldr	r1, .L74+20	@,
 1214 055c 54009FE5 		ldr	r0, .L74+24	@,
 1215              	.LVL64:
 161:armwave.c     **** 
 1216              		.loc 1 161 5 discriminator 1 view .LVU325
 1217 0560 FEFFFFEB 		bl	__assert_fail		@
 1218              	.LVL65:
 1219              	.L73:
 199:armwave.c     **** 
 1220              		.loc 1 199 5 is_stmt 1 discriminator 1 view .LVU326
 1221 0564 44309FE5 		ldr	r3, .L74+16	@,
 1222 0568 C720A0E3 		mov	r2, #199	@,
 1223 056c 40109FE5 		ldr	r1, .L74+20	@,
 1224 0570 44009FE5 		ldr	r0, .L74+28	@,
 1225 0574 FEFFFFEB 		bl	__assert_fail		@
 1226              	.LVL66:
 1227              	.L72:
 191:armwave.c     **** 
 1228              		.loc 1 191 5 discriminator 1 view .LVU327
 1229 0578 30309FE5 		ldr	r3, .L74+16	@,
 1230 057c BF20A0E3 		mov	r2, #191	@,
 1231 0580 2C109FE5 		ldr	r1, .L74+20	@,
 1232 0584 34009FE5 		ldr	r0, .L74+32	@,
 1233 0588 FEFFFFEB 		bl	__assert_fail		@
 1234              	.LVL67:
 1235              	.L71:
 167:armwave.c     **** 
 1236              		.loc 1 167 5 discriminator 1 view .LVU328
 1237 058c 1C309FE5 		ldr	r3, .L74+16	@,
 1238              	.LVL68:
 167:armwave.c     **** 
 1239              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU329
 1240 0590 A720A0E3 		mov	r2, #167	@,
 1241 0594 18109FE5 		ldr	r1, .L74+20	@,
 1242 0598 24009FE5 		ldr	r0, .L74+36	@,
 1243              	.LVL69:
 167:armwave.c     **** 
 1244              		.loc 1 167 5 discriminator 1 view .LVU330
 1245 059c FEFFFFEB 		bl	__assert_fail		@
 1246              	.LVL70:
 1247              	.L75:
 167:armwave.c     **** 
 1248              		.loc 1 167 5 discriminator 1 view .LVU331
 1249              		.align	2
 1250              	.L74:
 1251 05a0 0000803F 		.word	1065353216
 1252 05a4 00000000 		.word	g_armwave_state
 1253 05a8 3333333F 		.word	1060320051
 1254 05ac CDCCCC3D 		.word	1036831949
 1255 05b0 00000000 		.word	.LANCHOR0
 1256 05b4 00000000 		.word	.LC0
 1257 05b8 5C000000 		.word	.LC3
 1258 05bc 30000000 		.word	.LC2
 1259 05c0 0C000000 		.word	.LC1
 1260 05c4 74000000 		.word	.LC4
 1261              		.cfi_endproc
 1262              	.LFE61:
 1264              		.align	2
 1265              		.global	armwave_clear_buffer
 1266              		.syntax unified
 1267              		.arm
 1268              		.fpu vfp
 1270              	armwave_clear_buffer:
 1271              	.LVL71:
 1272              	.LFB62:
 209:armwave.c     **** 
 210:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 211:armwave.c     **** {
 1273              		.loc 1 211 1 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277              		@ link register save eliminated.
 212:armwave.c     ****     // Flags ignored, only one buffer cleared
 213:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1278              		.loc 1 213 5 view .LVU333
 1279 05c8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1280 05cc 0010A0E3 		mov	r1, #0	@,
 1281 05d0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1282 05d4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1283              	.LVL72:
 1284              		.loc 1 213 5 is_stmt 0 view .LVU334
 1285 05d8 FEFFFFEA 		b	memset		@
 1286              	.LVL73:
 1287              	.L78:
 1288              		.align	2
 1289              	.L77:
 1290 05dc 00000000 		.word	g_armwave_state
 1291              		.cfi_endproc
 1292              	.LFE62:
 1294              		.align	2
 1295              		.global	armwave_fill_pixbuf
 1296              		.syntax unified
 1297              		.arm
 1298              		.fpu vfp
 1300              	armwave_fill_pixbuf:
 1301              	.LVL74:
 1302              	.LFB63:
 214:armwave.c     **** }
 215:armwave.c     **** 
 216:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 217:armwave.c     **** {
 1303              		.loc 1 217 1 is_stmt 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 8
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 218:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1307              		.loc 1 218 5 view .LVU336
 219:armwave.c     ****     int rr, gg, bb;
 1308              		.loc 1 219 5 view .LVU337
 220:armwave.c     ****     uint8_t r, g, b;
 1309              		.loc 1 220 5 view .LVU338
 221:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1310              		.loc 1 221 5 view .LVU339
 1311              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1312              		.loc 1 217 1 is_stmt 0 view .LVU340
 1313 05e0 30402DE9 		push	{r4, r5, lr}	@
 1314              		.cfi_def_cfa_offset 12
 1315              		.cfi_offset 4, -12
 1316              		.cfi_offset 5, -8
 1317              		.cfi_offset 14, -4
 1318              	@ armwave.c:224:     assert(out_buffer != NULL);
 222:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 223:armwave.c     **** 
 224:armwave.c     ****     assert(out_buffer != NULL);
 1319              		.loc 1 224 5 view .LVU341
 1320 05e4 000050E3 		cmp	r0, #0	@ out_buffer
 1321              	@ armwave.c:221:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 221:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1322              		.loc 1 221 14 view .LVU342
 1323 05e8 48419FE5 		ldr	r4, .L113+4	@ tmp190,
 1324              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1325              		.loc 1 217 1 view .LVU343
 1326 05ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1327              		.cfi_def_cfa_offset 24
 1328              	@ armwave.c:221:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 221:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1329              		.loc 1 221 14 view .LVU344
 1330 05f0 045094E5 		ldr	r5, [r4, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1331              	.LVL75:
 222:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1332              		.loc 1 222 5 is_stmt 1 view .LVU345
 1333              		.loc 1 224 5 view .LVU346
 1334 05f4 4900000A 		beq	.L80		@,
 1335              	.LVL76:
 1336              	@ armwave.c:240:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 225:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 226:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 227:armwave.c     **** 
 228:armwave.c     **** #if 0
 229:armwave.c     ****     // Pixbuf tests
 230:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 231:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 232:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 233:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 234:armwave.c     ****         }
 235:armwave.c     ****     }
 236:armwave.c     **** #endif
 237:armwave.c     **** 
 238:armwave.c     **** #if 1
 239:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 240:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1337              		.loc 1 240 37 is_stmt 0 view .LVU347
 1338 05f8 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_99, g_armwave_state.target_height
 1339              	@ armwave.c:240:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1340              		.loc 1 240 5 view .LVU348
 1341 05fc 000052E3 		cmp	r2, #0	@ prephitmp_99,
 1342 0600 4400000A 		beq	.L79		@,
 1343              	@ armwave.c:261:             r = CLAMP(rr * overall_scale, 0, 255);
 241:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 242:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 243:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 244:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 245:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 246:armwave.c     **** 
 247:armwave.c     **** #if 0
 248:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 249:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 250:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 251:armwave.c     **** 
 252:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 253:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 254:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 255:armwave.c     **** #endif
 256:armwave.c     **** 
 257:armwave.c     ****             rr = g_armwave_state.ch1_color.r * value;
 258:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 259:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 260:armwave.c     **** 
 261:armwave.c     ****             r = CLAMP(rr * overall_scale, 0, 255);
 1344              		.loc 1 261 17 view .LVU349
 1345 0604 30319FE5 		ldr	r3, .L113+8	@ tmp154,
 1346              	@ armwave.c:257:             rr = g_armwave_state.ch1_color.r * value;
 257:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1347              		.loc 1 257 43 view .LVU350
 1348 0608 104A94ED 		vldr.32	s8, [r4, #64]	@ _6, g_armwave_state.ch1_color.r
 1349              	@ armwave.c:258:             gg = g_armwave_state.ch1_color.g * value;
 258:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1350              		.loc 1 258 43 view .LVU351
 1351 060c 114AD4ED 		vldr.32	s9, [r4, #68]	@ _9, g_armwave_state.ch1_color.g
 1352              	@ armwave.c:259:             bb = g_armwave_state.ch1_color.b * value;
 259:armwave.c     **** 
 1353              		.loc 1 259 43 view .LVU352
 1354 0610 125A94ED 		vldr.32	s10, [r4, #72]	@ _11, g_armwave_state.ch1_color.b
 1355              	@ armwave.c:261:             r = CLAMP(rr * overall_scale, 0, 255);
 1356              		.loc 1 261 15 view .LVU353
 1357 0614 465ADFED 		vldr.32	s11, .L113	@ tmp194,
 1358              	@ armwave.c:261:             r = CLAMP(rr * overall_scale, 0, 255);
 1359              		.loc 1 261 17 view .LVU354
 1360 0618 006A93ED 		vldr.32	s12, [r3]	@ overall_scale.12_14, overall_scale
 1361 061c 343094E5 		ldr	r3, [r4, #52]	@ _96, g_armwave_state.target_width
 1362              	@ armwave.c:240:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 240:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1363              		.loc 1 240 12 view .LVU355
 1364 0620 00E0A0E3 		mov	lr, #0	@ yy,
 1365              	.LVL77:
 1366              	.L82:
 1367              	@ armwave.c:241:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 241:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1368              		.loc 1 241 9 view .LVU356
 1369 0624 000053E3 		cmp	r3, #0	@ _96,
 1370              	@ armwave.c:241:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 241:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1371              		.loc 1 241 16 view .LVU357
 1372 0628 0020A013 		movne	r2, #0	@ xx,
 1373              	@ armwave.c:241:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 241:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1374              		.loc 1 241 9 view .LVU358
 1375 062c 3600000A 		beq	.L93		@,
 1376              	.LVL78:
 1377              	.L92:
 243:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 1378              		.loc 1 243 13 is_stmt 1 view .LVU359
 257:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1379              		.loc 1 257 13 view .LVU360
 1380              	@ armwave.c:243:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 243:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 1381              		.loc 1 243 21 is_stmt 0 view .LVU361
 1382 0630 935E23E0 		mla	r3, r3, lr, r5	@ tmp161, _96, yy, base_ptr
 1383              	.LVL79:
 1384              	@ armwave.c:257:             rr = g_armwave_state.ch1_color.r * value;
 257:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1385              		.loc 1 257 46 view .LVU362
 1386 0634 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2	@ *_90, *_90
 1387 0638 903A07EE 		vmov	s15, r3	@ int	@ *_90, *_90
 1388 063c 677AF8EE 		vcvt.f32.u32	s15, s15	@ _88, *_90
 1389              	.LVL80:
 258:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1390              		.loc 1 258 13 is_stmt 1 view .LVU363
 1391              	@ armwave.c:257:             rr = g_armwave_state.ch1_color.r * value;
 257:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1392              		.loc 1 257 46 is_stmt 0 view .LVU364
 1393 0640 276A64EE 		vmul.f32	s13, s8, s15	@ tmp166, _6, _88
 1394              	@ armwave.c:258:             gg = g_armwave_state.ch1_color.g * value;
 258:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1395              		.loc 1 258 46 view .LVU365
 1396 0644 A77A24EE 		vmul.f32	s14, s9, s15	@ tmp164, _9, _88
 1397              	@ armwave.c:259:             bb = g_armwave_state.ch1_color.b * value;
 259:armwave.c     **** 
 1398              		.loc 1 259 46 view .LVU366
 1399 0648 277A65EE 		vmul.f32	s15, s10, s15	@ tmp165, _11, _88
 1400              	.LVL81:
 1401              	@ armwave.c:257:             rr = g_armwave_state.ch1_color.r * value;
 257:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1402              		.loc 1 257 16 view .LVU367
 1403 064c E66AFDEE 		vcvt.s32.f32	s13, s13	@ rr, tmp166
 1404              	@ armwave.c:258:             gg = g_armwave_state.ch1_color.g * value;
 258:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1405              		.loc 1 258 16 view .LVU368
 1406 0650 C77ABDEE 		vcvt.s32.f32	s14, s14	@ gg, tmp164
 1407              	.LVL82:
 259:armwave.c     **** 
 1408              		.loc 1 259 13 is_stmt 1 view .LVU369
 1409              	@ armwave.c:259:             bb = g_armwave_state.ch1_color.b * value;
 259:armwave.c     **** 
 1410              		.loc 1 259 16 is_stmt 0 view .LVU370
 1411 0654 E77AFDEE 		vcvt.s32.f32	s15, s15	@ bb, tmp165
 1412              	.LVL83:
 1413              		.loc 1 261 13 is_stmt 1 view .LVU371
 1414              	@ armwave.c:261:             r = CLAMP(rr * overall_scale, 0, 255);
 1415              		.loc 1 261 17 is_stmt 0 view .LVU372
 1416 0658 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp168, rr
 1417 065c 866A66EE 		vmul.f32	s13, s13, s12	@ _80, tmp168, overall_scale.12_14
 1418 0660 C06AF5EE 		vcmpe.f32	s13, #0	@ _80
 1419 0664 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1420 0668 0030A0D3 		movle	r3, #0	@ prephitmp_26,
 1421              	.LVL84:
 1422              		.loc 1 261 17 view .LVU373
 1423 066c 050000DA 		ble	.L83		@,
 1424              	@ armwave.c:261:             r = CLAMP(rr * overall_scale, 0, 255);
 1425              		.loc 1 261 15 view .LVU374
 1426 0670 E56AF4EE 		vcmpe.f32	s13, s11	@ _80, tmp194
 1427 0674 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1428 0678 E66AFC4E 		vcvtmi.u32.f32	s13, s13	@ tmp172, _80
 1429 067c FF30A053 		movpl	r3, #255	@ prephitmp_26,
 1430 0680 016ACD4D 		vstrmi.32	s13, [sp, #4]	@ int	@ tmp172, %sfp
 1431 0684 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ prephitmp_26, %sfp
 1432              	.L83:
 262:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1433              		.loc 1 262 13 is_stmt 1 view .LVU375
 1434              	@ armwave.c:262:             g = CLAMP(gg * overall_scale, 0, 255);
 1435              		.loc 1 262 17 is_stmt 0 view .LVU376
 1436 0688 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp173, gg
 1437              	.LVL85:
 1438              		.loc 1 262 17 view .LVU377
 1439 068c 067A27EE 		vmul.f32	s14, s14, s12	@ _75, tmp173, overall_scale.12_14
 1440 0690 C07AB5EE 		vcmpe.f32	s14, #0	@ _75
 1441 0694 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1442 0698 0010A0D3 		movle	r1, #0	@ prephitmp_59,
 1443 069c 060000DA 		ble	.L86		@,
 1444              	@ armwave.c:262:             g = CLAMP(gg * overall_scale, 0, 255);
 1445              		.loc 1 262 15 view .LVU378
 1446 06a0 E57AB4EE 		vcmpe.f32	s14, s11	@ _75, tmp194
 1447 06a4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1448 06a8 C77ABC4E 		vcvtmi.u32.f32	s14, s14	@ tmp177, _75
 1449 06ac FF1CA053 		movpl	r1, #65280	@ prephitmp_59,
 1450 06b0 017A8D4D 		vstrmi.32	s14, [sp, #4]	@ int	@ tmp177, %sfp
 1451 06b4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ tmp178, %sfp
 1452 06b8 0114A041 		lslmi	r1, r1, #8	@ prephitmp_59, tmp178,
 1453              	.L86:
 263:armwave.c     ****             b = CLAMP(bb * overall_scale, 0, 255);
 1454              		.loc 1 263 13 is_stmt 1 view .LVU379
 1455              	@ armwave.c:263:             b = CLAMP(bb * overall_scale, 0, 255);
 1456              		.loc 1 263 17 is_stmt 0 view .LVU380
 1457 06bc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp179, bb
 1458              	.LVL86:
 1459              		.loc 1 263 17 view .LVU381
 1460 06c0 867A67EE 		vmul.f32	s15, s15, s12	@ _47, tmp179, overall_scale.12_14
 1461 06c4 C07AF5EE 		vcmpe.f32	s15, #0	@ _47
 1462 06c8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1463 06cc 060000DA 		ble	.L89		@,
 1464              	@ armwave.c:263:             b = CLAMP(bb * overall_scale, 0, 255);
 1465              		.loc 1 263 15 view .LVU382
 1466 06d0 E57AF4EE 		vcmpe.f32	s15, s11	@ _47, tmp194
 1467 06d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 1468 06d8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp183, _47
 1469 06dc FF388353 		orrpl	r3, r3, #16711680	@ prephitmp_26, prephitmp_26,
 1470 06e0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp183, %sfp
 1471 06e4 04C0DD45 		ldrbmi	ip, [sp, #4]	@ zero_extendqisi2	@ tmp184, %sfp
 1472 06e8 0C388341 		orrmi	r3, r3, ip, lsl #16	@ prephitmp_26, prephitmp_26, tmp184,
 1473              	.L89:
 264:armwave.c     **** 
 265:armwave.c     ****             // ensure 100% alpha channel, if it is used
 266:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1474              		.loc 1 266 13 is_stmt 1 view .LVU383
 1475              	.LVL87:
 267:armwave.c     **** 
 268:armwave.c     ****             //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, val
 269:armwave.c     **** 
 270:armwave.c     ****             *out_buffer++ = word;
 1476              		.loc 1 270 13 view .LVU384
 1477              	@ armwave.c:266:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 266:armwave.c     **** 
 1478              		.loc 1 266 54 is_stmt 0 view .LVU385
 1479 06ec 013083E1 		orr	r3, r3, r1	@ tmp186, prephitmp_26, prephitmp_59
 1480              	.LVL88:
 1481              	@ armwave.c:266:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 266:armwave.c     **** 
 1482              		.loc 1 266 18 view .LVU386
 1483 06f0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp186,
 1484              	.LVL89:
 1485              	@ armwave.c:270:             *out_buffer++ = word;
 1486              		.loc 1 270 27 view .LVU387
 1487 06f4 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_131, offset: 4294967292B]
 1488              	.LVL90:
 1489              	@ armwave.c:241:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 241:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1490              		.loc 1 241 41 view .LVU388
 1491 06f8 343094E5 		ldr	r3, [r4, #52]	@ _96, g_armwave_state.target_width
 1492              	.LVL91:
 1493              	@ armwave.c:241:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 241:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1494              		.loc 1 241 58 view .LVU389
 1495 06fc 012082E2 		add	r2, r2, #1	@ xx, xx,
 1496              	.LVL92:
 1497              	@ armwave.c:241:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 241:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1498              		.loc 1 241 9 view .LVU390
 1499 0700 020053E1 		cmp	r3, r2	@ _96, xx
 1500 0704 C9FFFF8A 		bhi	.L92		@,
 1501 0708 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_99, g_armwave_state.target_height
 1502              	.LVL93:
 1503              	.L93:
 1504              	@ armwave.c:240:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 240:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1505              		.loc 1 240 55 discriminator 2 view .LVU391
 1506 070c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1507              	.LVL94:
 1508              	@ armwave.c:240:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 240:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1509              		.loc 1 240 5 discriminator 2 view .LVU392
 1510 0710 02005EE1 		cmp	lr, r2	@ yy, prephitmp_99
 1511 0714 C2FFFF3A 		bcc	.L82		@,
 1512              	.LVL95:
 1513              	.L79:
 1514              	@ armwave.c:274: }
 271:armwave.c     ****         }
 272:armwave.c     ****     }
 273:armwave.c     **** #endif
 274:armwave.c     **** }
 1515              		.loc 1 274 1 view .LVU393
 1516 0718 0CD08DE2 		add	sp, sp, #12	@,,
 1517              		.cfi_remember_state
 1518              		.cfi_def_cfa_offset 12
 1519              		@ sp needed	@
 1520 071c 3080BDE8 		pop	{r4, r5, pc}	@
 1521              	.LVL96:
 1522              	.L80:
 1523              		.cfi_restore_state
 224:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1524              		.loc 1 224 5 is_stmt 1 discriminator 1 view .LVU394
 1525 0720 18309FE5 		ldr	r3, .L113+12	@,
 1526 0724 E020A0E3 		mov	r2, #224	@,
 1527 0728 14109FE5 		ldr	r1, .L113+16	@,
 1528 072c 14009FE5 		ldr	r0, .L113+20	@,
 1529              	.LVL97:
 224:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1530              		.loc 1 224 5 is_stmt 0 discriminator 1 view .LVU395
 1531 0730 FEFFFFEB 		bl	__assert_fail		@
 1532              	.LVL98:
 1533              	.L114:
 1534              		.align	2
 1535              	.L113:
 1536 0734 00007F43 		.word	1132396544
 1537 0738 00000000 		.word	g_armwave_state
 1538 073c 00000000 		.word	.LANCHOR2
 1539 0740 18000000 		.word	.LANCHOR0+24
 1540 0744 00000000 		.word	.LC0
 1541 0748 90000000 		.word	.LC5
 1542              		.cfi_endproc
 1543              	.LFE63:
 1545              		.align	2
 1546              		.global	armwave_fill_pixbuf2
 1547              		.syntax unified
 1548              		.arm
 1549              		.fpu vfp
 1551              	armwave_fill_pixbuf2:
 1552              	.LVL99:
 1553              	.LFB64:
 275:armwave.c     **** 
 276:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 277:armwave.c     **** {
 1554              		.loc 1 277 1 is_stmt 1 view -0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 0
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 278:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1558              		.loc 1 278 5 view .LVU397
 279:armwave.c     ****     int rr, gg, bb;
 1559              		.loc 1 279 5 view .LVU398
 280:armwave.c     ****     uint8_t r, g, b;
 1560              		.loc 1 280 5 view .LVU399
 281:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1561              		.loc 1 281 5 view .LVU400
 1562              	@ armwave.c:277: {
 277:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1563              		.loc 1 277 1 is_stmt 0 view .LVU401
 1564 074c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1565              		.cfi_def_cfa_offset 40
 1566              		.cfi_offset 3, -40
 1567              		.cfi_offset 4, -36
 1568              		.cfi_offset 5, -32
 1569              		.cfi_offset 6, -28
 1570              		.cfi_offset 7, -24
 1571              		.cfi_offset 8, -20
 1572              		.cfi_offset 9, -16
 1573              		.cfi_offset 10, -12
 1574              		.cfi_offset 11, -8
 1575              		.cfi_offset 14, -4
 1576              	@ armwave.c:284:     assert(out_buffer != NULL);
 282:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 283:armwave.c     **** 
 284:armwave.c     ****     assert(out_buffer != NULL);
 1577              		.loc 1 284 5 view .LVU402
 1578 0750 009050E2 		subs	r9, r0, #0	@ out_buffer, out_buffer
 1579              	@ armwave.c:281:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 281:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1580              		.loc 1 281 14 view .LVU403
 1581 0754 28419FE5 		ldr	r4, .L127	@ tmp207,
 1582              	@ armwave.c:277: {
 277:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1583              		.loc 1 277 1 view .LVU404
 1584 0758 028B2DED 		vpush.64	{d8}	@
 1585              		.cfi_def_cfa_offset 48
 1586              		.cfi_offset 80, -48
 1587              		.cfi_offset 81, -44
 1588              	@ armwave.c:281:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 281:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1589              		.loc 1 281 14 view .LVU405
 1590 075c 047094E5 		ldr	r7, [r4, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1591              	.LVL100:
 282:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1592              		.loc 1 282 5 is_stmt 1 view .LVU406
 1593              		.loc 1 284 5 view .LVU407
 1594 0760 4200000A 		beq	.L116		@,
 1595              	.LVL101:
 1596              	@ armwave.c:287:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 285:armwave.c     **** 
 286:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 287:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1597              		.loc 1 287 37 is_stmt 0 view .LVU408
 1598 0764 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_103, g_armwave_state.target_height
 1599              	@ armwave.c:287:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1600              		.loc 1 287 5 view .LVU409
 1601 0768 000052E3 		cmp	r2, #0	@ prephitmp_103,
 1602 076c 3D00000A 		beq	.L115		@,
 1603 0770 343094E5 		ldr	r3, [r4, #52]	@ _38, g_armwave_state.target_width
 1604 0774 0C819FE5 		ldr	r8, .L127+4	@ tmp210,
 1605              	@ armwave.c:287:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1606              		.loc 1 287 12 view .LVU410
 1607 0778 0060A0E3 		mov	r6, #0	@ yy,
 1608              	.LVL102:
 1609              	.L118:
 1610              	@ armwave.c:288:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 288:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1611              		.loc 1 288 9 view .LVU411
 1612 077c 000053E3 		cmp	r3, #0	@ _38,
 1613              	@ armwave.c:288:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1614              		.loc 1 288 16 view .LVU412
 1615 0780 0050A013 		movne	r5, #0	@ xx,
 1616              	@ armwave.c:288:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1617              		.loc 1 288 9 view .LVU413
 1618 0784 3400000A 		beq	.L120		@,
 1619              	.LVL103:
 1620              	.L119:
 1621              	.LBB4:
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 290:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1622              		.loc 1 290 13 is_stmt 1 discriminator 3 view .LVU414
 291:armwave.c     **** 
 292:armwave.c     ****             rr = g_armwave_state.ch1_color.r * value;
 1623              		.loc 1 292 13 discriminator 3 view .LVU415
 1624              	@ armwave.c:290:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 290:armwave.c     **** 
 1625              		.loc 1 290 21 is_stmt 0 discriminator 3 view .LVU416
 1626 0788 967323E0 		mla	r3, r6, r3, r7	@ tmp167, yy, _38, base_ptr
 1627              	.LVL104:
 1628              	@ armwave.c:292:             rr = g_armwave_state.ch1_color.r * value;
 1629              		.loc 1 292 46 discriminator 3 view .LVU417
 1630 078c 100A94ED 		vldr.32	s0, [r4, #64]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1631              	@ armwave.c:296:             r = CLAMP_NEON(rr * overall_scale, 0, 255);
 293:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 294:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 295:armwave.c     **** 
 296:armwave.c     ****             r = CLAMP_NEON(rr * overall_scale, 0, 255);
 1632              		.loc 1 296 17 discriminator 3 view .LVU418
 1633 0790 007A98ED 		vldr.32	s14, [r8]	@ overall_scale, overall_scale
 1634              	@ armwave.c:294:             bb = g_armwave_state.ch1_color.b * value;
 294:armwave.c     **** 
 1635              		.loc 1 294 46 discriminator 3 view .LVU419
 1636 0794 128A94ED 		vldr.32	s16, [r4, #72]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1637              	@ armwave.c:292:             rr = g_armwave_state.ch1_color.r * value;
 292:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1638              		.loc 1 292 46 discriminator 3 view .LVU420
 1639 0798 0530D3E7 		ldrb	r3, [r3, r5]	@ zero_extendqisi2	@ *_4, *_4
 1640              	@ armwave.c:293:             gg = g_armwave_state.ch1_color.g * value;
 293:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1641              		.loc 1 293 46 discriminator 3 view .LVU421
 1642 079c 118AD4ED 		vldr.32	s17, [r4, #68]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1643              	@ armwave.c:296:             r = CLAMP_NEON(rr * overall_scale, 0, 255);
 1644              		.loc 1 296 17 discriminator 3 view .LVU422
 1645 07a0 FF00A0E3 		mov	r0, #255	@,
 1646              	.LBE4:
 1647              	@ armwave.c:288:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 288:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1648              		.loc 1 288 58 discriminator 3 view .LVU423
 1649 07a4 015085E2 		add	r5, r5, #1	@ xx, xx,
 1650              	.LVL105:
 1651              	.LBB5:
 1652              	@ armwave.c:292:             rr = g_armwave_state.ch1_color.r * value;
 292:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1653              		.loc 1 292 46 discriminator 3 view .LVU424
 1654 07a8 903A07EE 		vmov	s15, r3	@ int	@ *_4, *_4
 1655 07ac 677AF8EE 		vcvt.f32.u32	s15, s15	@ _7, *_4
 1656              	.LVL106:
 293:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1657              		.loc 1 293 13 is_stmt 1 discriminator 3 view .LVU425
 1658              	@ armwave.c:292:             rr = g_armwave_state.ch1_color.r * value;
 292:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1659              		.loc 1 292 46 is_stmt 0 discriminator 3 view .LVU426
 1660 07b0 800A27EE 		vmul.f32	s0, s15, s0	@ tmp177, _7, g_armwave_state.ch1_color.r
 1661              	.LVL107:
 1662              	@ armwave.c:293:             gg = g_armwave_state.ch1_color.g * value;
 293:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1663              		.loc 1 293 46 discriminator 3 view .LVU427
 1664 07b4 A88A67EE 		vmul.f32	s17, s15, s17	@ tmp171, _7, g_armwave_state.ch1_color.g
 1665              	@ armwave.c:294:             bb = g_armwave_state.ch1_color.b * value;
 294:armwave.c     **** 
 1666              		.loc 1 294 46 discriminator 3 view .LVU428
 1667 07b8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp174, _7, g_armwave_state.ch1_color.b
 1668              	.LVL108:
 1669              	@ armwave.c:292:             rr = g_armwave_state.ch1_color.r * value;
 292:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1670              		.loc 1 292 16 discriminator 3 view .LVU429
 1671 07bc C00ABDEE 		vcvt.s32.f32	s0, s0	@ rr, tmp177
 1672              	@ armwave.c:293:             gg = g_armwave_state.ch1_color.g * value;
 293:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1673              		.loc 1 293 16 discriminator 3 view .LVU430
 1674 07c0 E88AFDEE 		vcvt.s32.f32	s17, s17	@ gg, tmp171
 1675              	.LVL109:
 294:armwave.c     **** 
 1676              		.loc 1 294 13 is_stmt 1 discriminator 3 view .LVU431
 1677              	@ armwave.c:294:             bb = g_armwave_state.ch1_color.b * value;
 294:armwave.c     **** 
 1678              		.loc 1 294 16 is_stmt 0 discriminator 3 view .LVU432
 1679 07c4 E78ABDEE 		vcvt.s32.f32	s16, s15	@ bb, tmp174
 1680              	.LVL110:
 1681              		.loc 1 296 13 is_stmt 1 discriminator 3 view .LVU433
 1682              	@ armwave.c:296:             r = CLAMP_NEON(rr * overall_scale, 0, 255);
 1683              		.loc 1 296 17 is_stmt 0 discriminator 3 view .LVU434
 1684 07c8 C00AB8EE 		vcvt.f32.s32	s0, s0	@ tmp180, rr
 1685 07cc 070A20EE 		vmul.f32	s0, s0, s14	@ tmp182, tmp180, overall_scale
 1686 07d0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp182
 1687 07d4 FEFFFFEB 		bl	vmax_s32		@
 1688              	.LVL111:
 1689              		.loc 1 296 17 discriminator 3 view .LVU435
 1690 07d8 0010A0E3 		mov	r1, #0	@,
 1691 07dc FEFFFFEB 		bl	vmin_s32		@
 1692              	.LVL112:
 1693              	@ armwave.c:297:             g = CLAMP_NEON(gg * overall_scale, 0, 255);
 297:armwave.c     ****             g = CLAMP_NEON(gg * overall_scale, 0, 255);
 1694              		.loc 1 297 17 discriminator 3 view .LVU436
 1695 07e0 E88AF8EE 		vcvt.f32.s32	s17, s17	@ tmp185, gg
 1696              	.LVL113:
 1697              		.loc 1 297 17 discriminator 3 view .LVU437
 1698 07e4 000A98ED 		vldr.32	s0, [r8]	@ overall_scale, overall_scale
 1699 07e8 800A28EE 		vmul.f32	s0, s17, s0	@ tmp187, tmp185, overall_scale
 1700 07ec C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp187
 1701              	@ armwave.c:296:             r = CLAMP_NEON(rr * overall_scale, 0, 255);
 296:armwave.c     ****             g = CLAMP_NEON(gg * overall_scale, 0, 255);
 1702              		.loc 1 296 17 discriminator 3 view .LVU438
 1703 07f0 00B0A0E1 		mov	fp, r0	@ _18,
 1704              	.LVL114:
 1705              		.loc 1 297 13 is_stmt 1 discriminator 3 view .LVU439
 1706              	@ armwave.c:297:             g = CLAMP_NEON(gg * overall_scale, 0, 255);
 1707              		.loc 1 297 17 is_stmt 0 discriminator 3 view .LVU440
 1708 07f4 FF00A0E3 		mov	r0, #255	@,
 1709 07f8 FEFFFFEB 		bl	vmax_s32		@
 1710              	.LVL115:
 1711 07fc 0010A0E3 		mov	r1, #0	@,
 1712 0800 FEFFFFEB 		bl	vmin_s32		@
 1713              	.LVL116:
 1714              	@ armwave.c:298:             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 298:armwave.c     ****             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 1715              		.loc 1 298 17 discriminator 3 view .LVU441
 1716 0804 C88AB8EE 		vcvt.f32.s32	s16, s16	@ tmp190, bb
 1717              	.LVL117:
 1718              		.loc 1 298 17 discriminator 3 view .LVU442
 1719 0808 000A98ED 		vldr.32	s0, [r8]	@ overall_scale, overall_scale
 1720              	@ armwave.c:301:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 299:armwave.c     **** 
 300:armwave.c     ****             // ensure 100% alpha channel, if it is used
 301:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1721              		.loc 1 301 54 discriminator 3 view .LVU443
 1722 080c 7BB0EFE6 		uxtb	fp, fp	@ _18, _18
 1723              	@ armwave.c:298:             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 298:armwave.c     ****             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 1724              		.loc 1 298 17 discriminator 3 view .LVU444
 1725 0810 000A28EE 		vmul.f32	s0, s16, s0	@ tmp192, tmp190, overall_scale
 1726 0814 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp192
 1727              	@ armwave.c:297:             g = CLAMP_NEON(gg * overall_scale, 0, 255);
 297:armwave.c     ****             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 1728              		.loc 1 297 17 discriminator 3 view .LVU445
 1729 0818 00A0A0E1 		mov	r10, r0	@ _24,
 1730              	.LVL118:
 298:armwave.c     ****             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 1731              		.loc 1 298 13 is_stmt 1 discriminator 3 view .LVU446
 1732              	@ armwave.c:298:             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 298:armwave.c     ****             b = CLAMP_NEON(bb * overall_scale, 0, 255);
 1733              		.loc 1 298 17 is_stmt 0 discriminator 3 view .LVU447
 1734 081c FF00A0E3 		mov	r0, #255	@,
 1735 0820 FEFFFFEB 		bl	vmax_s32		@
 1736              	.LVL119:
 1737 0824 0010A0E3 		mov	r1, #0	@,
 1738 0828 FEFFFFEB 		bl	vmin_s32		@
 1739              	.LVL120:
 1740              		.loc 1 301 13 is_stmt 1 discriminator 3 view .LVU448
 302:armwave.c     **** 
 303:armwave.c     ****             *out_buffer++ = word;
 1741              		.loc 1 303 13 discriminator 3 view .LVU449
 1742              	@ armwave.c:301:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 301:armwave.c     **** 
 1743              		.loc 1 301 48 is_stmt 0 discriminator 3 view .LVU450
 1744 082c 0AA4A0E1 		lsl	r10, r10, #8	@ tmp197, _24,
 1745              	.LVL121:
 301:armwave.c     **** 
 1746              		.loc 1 301 48 discriminator 3 view .LVU451
 1747 0830 7AA0FFE6 		uxth	r10, r10	@ tmp198, tmp197
 1748              	@ armwave.c:301:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 301:armwave.c     **** 
 1749              		.loc 1 301 36 discriminator 3 view .LVU452
 1750 0834 0038A0E1 		lsl	r3, r0, #16	@ tmp195,,
 1751 0838 FF3803E2 		and	r3, r3, #16711680	@ tmp196, tmp195,
 1752              	@ armwave.c:301:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 301:armwave.c     **** 
 1753              		.loc 1 301 43 discriminator 3 view .LVU453
 1754 083c 0A3083E1 		orr	r3, r3, r10	@ tmp200, tmp196, tmp198
 1755              	@ armwave.c:301:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 301:armwave.c     **** 
 1756              		.loc 1 301 54 discriminator 3 view .LVU454
 1757 0840 0B3083E1 		orr	r3, r3, fp	@ tmp202, tmp200, _18
 1758              	@ armwave.c:301:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 301:armwave.c     **** 
 1759              		.loc 1 301 18 discriminator 3 view .LVU455
 1760 0844 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp202,
 1761              	@ armwave.c:303:             *out_buffer++ = word;
 1762              		.loc 1 303 27 discriminator 3 view .LVU456
 1763 0848 043089E4 		str	r3, [r9], #4	@ word, MEM[base: out_buffer_61, offset: 4294967292B]
 1764              	.LVL122:
 1765              		.loc 1 303 27 discriminator 3 view .LVU457
 1766              	.LBE5:
 1767              	@ armwave.c:288:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 288:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1768              		.loc 1 288 41 discriminator 3 view .LVU458
 1769 084c 343094E5 		ldr	r3, [r4, #52]	@ _38, g_armwave_state.target_width
 1770              	@ armwave.c:288:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 288:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1771              		.loc 1 288 9 discriminator 3 view .LVU459
 1772 0850 050053E1 		cmp	r3, r5	@ _38, xx
 1773 0854 CBFFFF8A 		bhi	.L119		@,
 1774 0858 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_103, g_armwave_state.target_height
 1775              	.LVL123:
 1776              	.L120:
 1777              	@ armwave.c:287:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 287:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1778              		.loc 1 287 55 discriminator 2 view .LVU460
 1779 085c 016086E2 		add	r6, r6, #1	@ yy, yy,
 1780              	.LVL124:
 1781              	@ armwave.c:287:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 287:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1782              		.loc 1 287 5 discriminator 2 view .LVU461
 1783 0860 020056E1 		cmp	r6, r2	@ yy, prephitmp_103
 1784 0864 C4FFFF3A 		bcc	.L118		@,
 1785              	.LVL125:
 1786              	.L115:
 1787              	@ armwave.c:306: }
 304:armwave.c     ****         }
 305:armwave.c     ****     }
 306:armwave.c     **** }
 1788              		.loc 1 306 1 view .LVU462
 1789 0868 028BBDEC 		vldm	sp!, {d8}	@
 1790              		.cfi_remember_state
 1791              		.cfi_restore 80
 1792              		.cfi_restore 81
 1793              		.cfi_def_cfa_offset 40
 1794 086c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1795              	.LVL126:
 1796              	.L116:
 1797              		.cfi_restore_state
 284:armwave.c     **** 
 1798              		.loc 1 284 5 is_stmt 1 discriminator 1 view .LVU463
 1799 0870 14309FE5 		ldr	r3, .L127+8	@,
 1800 0874 472FA0E3 		mov	r2, #284	@,
 1801 0878 10109FE5 		ldr	r1, .L127+12	@,
 1802 087c 10009FE5 		ldr	r0, .L127+16	@,
 1803              	.LVL127:
 284:armwave.c     **** 
 1804              		.loc 1 284 5 is_stmt 0 discriminator 1 view .LVU464
 1805 0880 FEFFFFEB 		bl	__assert_fail		@
 1806              	.LVL128:
 1807              	.L128:
 1808              		.align	2
 1809              	.L127:
 1810 0884 00000000 		.word	g_armwave_state
 1811 0888 00000000 		.word	.LANCHOR2
 1812 088c 2C000000 		.word	.LANCHOR0+44
 1813 0890 00000000 		.word	.LC0
 1814 0894 90000000 		.word	.LC5
 1815              		.cfi_endproc
 1816              	.LFE64:
 1818              		.align	2
 1819              		.global	armwave_dump_ppm_debug
 1820              		.syntax unified
 1821              		.arm
 1822              		.fpu vfp
 1824              	armwave_dump_ppm_debug:
 1825              	.LVL129:
 1826              	.LFB65:
 307:armwave.c     **** 
 308:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 309:armwave.c     **** {
 1827              		.loc 1 309 1 is_stmt 1 view -0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 310:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1831              		.loc 1 310 5 view .LVU466
 1832              	@ armwave.c:309: {
 309:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1833              		.loc 1 309 1 is_stmt 0 view .LVU467
 1834 0898 0130A0E1 		mov	r3, r1	@ fn, fn
 1835 089c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1836              		.cfi_def_cfa_offset 28
 1837              		.cfi_offset 4, -28
 1838              		.cfi_offset 5, -24
 1839              		.cfi_offset 6, -20
 1840              		.cfi_offset 7, -16
 1841              		.cfi_offset 8, -12
 1842              		.cfi_offset 9, -8
 1843              		.cfi_offset 14, -4
 1844 08a0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1845 08a4 0CD04DE2 		sub	sp, sp, #12	@,,
 1846              		.cfi_def_cfa_offset 40
 1847              	@ armwave.c:310:     FILE *fp = fopen(fn, "wb");
 1848              		.loc 1 310 16 view .LVU468
 1849 08a8 D8109FE5 		ldr	r1, .L141	@,
 1850              	.LVL130:
 1851              		.loc 1 310 16 view .LVU469
 1852 08ac 0300A0E1 		mov	r0, r3	@, fn
 1853              	.LVL131:
 1854              		.loc 1 310 16 view .LVU470
 1855 08b0 FEFFFFEB 		bl	fopen64		@
 1856              	.LVL132:
 1857              	@ armwave.c:317:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 311:armwave.c     ****     uint32_t data;
 312:armwave.c     ****     int xx, yy;
 313:armwave.c     **** 
 314:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 315:armwave.c     **** 
 316:armwave.c     ****     fputs("P3\n", fp);
 317:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1858              		.loc 1 317 5 view .LVU471
 1859 08b4 D0609FE5 		ldr	r6, .L141+4	@ tmp154,
 1860              	@ armwave.c:316:     fputs("P3\n", fp);
 316:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1861              		.loc 1 316 5 view .LVU472
 1862 08b8 0320A0E3 		mov	r2, #3	@,
 1863 08bc 0110A0E3 		mov	r1, #1	@,
 1864              	@ armwave.c:310:     FILE *fp = fopen(fn, "wb");
 310:armwave.c     ****     uint32_t data;
 1865              		.loc 1 310 16 view .LVU473
 1866 08c0 0070A0E1 		mov	r7, r0	@ fp,
 1867              	.LVL133:
 311:armwave.c     ****     uint32_t data;
 1868              		.loc 1 311 5 is_stmt 1 view .LVU474
 312:armwave.c     **** 
 1869              		.loc 1 312 5 view .LVU475
 316:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1870              		.loc 1 316 5 view .LVU476
 1871 08c4 0030A0E1 		mov	r3, r0	@, fp
 1872 08c8 C0009FE5 		ldr	r0, .L141+8	@,
 1873              	.LVL134:
 316:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1874              		.loc 1 316 5 is_stmt 0 view .LVU477
 1875 08cc FEFFFFEB 		bl	fwrite		@
 1876              	.LVL135:
 1877              		.loc 1 317 5 is_stmt 1 view .LVU478
 1878 08d0 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1879 08d4 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1880 08d8 B4109FE5 		ldr	r1, .L141+12	@,
 1881 08dc 0700A0E1 		mov	r0, r7	@, fp
 1882 08e0 FEFFFFEB 		bl	fprintf		@
 1883              	.LVL136:
 318:armwave.c     ****     fputs("255\n", fp);
 1884              		.loc 1 318 5 view .LVU479
 1885 08e4 0420A0E3 		mov	r2, #4	@,
 1886 08e8 0730A0E1 		mov	r3, r7	@, fp
 1887 08ec 0110A0E3 		mov	r1, #1	@,
 1888 08f0 A0009FE5 		ldr	r0, .L141+16	@,
 1889 08f4 FEFFFFEB 		bl	fwrite		@
 1890              	.LVL137:
 319:armwave.c     **** 
 320:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1891              		.loc 1 320 5 view .LVU480
 1892              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1893              		.loc 1 320 37 is_stmt 0 view .LVU481
 1894 08f8 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1895              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1896              		.loc 1 320 5 view .LVU482
 1897 08fc 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1898 0900 1800000A 		beq	.L130		@,
 1899 0904 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1900              	@ armwave.c:325:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 322:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 323:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 324:armwave.c     **** 
 325:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1901              		.loc 1 325 13 view .LVU483
 1902 0908 8C909FE5 		ldr	r9, .L141+20	@ tmp156,
 1903              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 320:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1904              		.loc 1 320 12 view .LVU484
 1905 090c 0050A0E3 		mov	r5, #0	@ yy,
 1906              	.LVL138:
 1907              	.L131:
 1908              	@ armwave.c:321:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1909              		.loc 1 321 9 view .LVU485
 1910 0910 000053E3 		cmp	r3, #0	@ _12,
 1911              	@ armwave.c:321:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1912              		.loc 1 321 16 view .LVU486
 1913 0914 0040A013 		movne	r4, #0	@ xx,
 1914              	@ armwave.c:321:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1915              		.loc 1 321 9 view .LVU487
 1916 0918 1600000A 		beq	.L140		@,
 1917              	.LVL139:
 1918              	.L132:
 322:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1919              		.loc 1 322 13 is_stmt 1 discriminator 3 view .LVU488
 1920              	@ armwave.c:322:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 322:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1921              		.loc 1 322 29 is_stmt 0 discriminator 3 view .LVU489
 1922 091c 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1923              	@ armwave.c:325:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1924              		.loc 1 325 13 discriminator 3 view .LVU490
 1925 0920 0910A0E1 		mov	r1, r9	@, tmp156
 1926 0924 0700A0E1 		mov	r0, r7	@, fp
 1927              	@ armwave.c:322:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 322:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1928              		.loc 1 322 18 discriminator 3 view .LVU491
 1929 0928 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1930              	.LVL140:
 1931              		.loc 1 325 13 is_stmt 1 discriminator 3 view .LVU492
 1932              	@ armwave.c:321:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1933              		.loc 1 321 58 is_stmt 0 discriminator 3 view .LVU493
 1934 092c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1935              	.LVL141:
 1936              	@ armwave.c:325:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1937              		.loc 1 325 81 discriminator 3 view .LVU494
 1938 0930 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1939              	@ armwave.c:325:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1940              		.loc 1 325 61 discriminator 3 view .LVU495
 1941 0934 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1942              	@ armwave.c:325:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1943              		.loc 1 325 13 discriminator 3 view .LVU496
 1944 0938 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1945 093c 7330EFE6 		uxtb	r3, r3	@, tmp146
 1946 0940 00C08DE5 		str	ip, [sp]	@ tmp151,
 1947 0944 7220EFE6 		uxtb	r2, r2	@, data
 1948              	.LVL142:
 1949              		.loc 1 325 13 discriminator 3 view .LVU497
 1950 0948 FEFFFFEB 		bl	fprintf		@
 1951              	.LVL143:
 1952              	@ armwave.c:321:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1953              		.loc 1 321 41 discriminator 3 view .LVU498
 1954 094c 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1955              	@ armwave.c:321:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 321:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1956              		.loc 1 321 9 discriminator 3 view .LVU499
 1957 0950 040053E1 		cmp	r3, r4	@ _12, xx
 1958 0954 F0FFFF8A 		bhi	.L132		@,
 1959 0958 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1960              	.LVL144:
 1961              	.L133:
 1962              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 320:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1963              		.loc 1 320 55 discriminator 2 view .LVU500
 1964 095c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1965              	.LVL145:
 1966              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 320:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1967              		.loc 1 320 5 discriminator 2 view .LVU501
 1968 0960 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1969 0964 E9FFFF3A 		bcc	.L131		@,
 1970              	.LVL146:
 1971              	.L130:
 326:armwave.c     ****         }
 327:armwave.c     ****     }
 328:armwave.c     **** 
 329:armwave.c     ****     fclose(fp);
 1972              		.loc 1 329 5 is_stmt 1 view .LVU502
 1973 0968 0700A0E1 		mov	r0, r7	@, fp
 1974              	@ armwave.c:330: }
 330:armwave.c     **** }
 1975              		.loc 1 330 1 is_stmt 0 view .LVU503
 1976 096c 0CD08DE2 		add	sp, sp, #12	@,,
 1977              		.cfi_remember_state
 1978              		.cfi_def_cfa_offset 28
 1979              		@ sp needed	@
 1980 0970 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1981              		.cfi_restore 14
 1982              		.cfi_restore 9
 1983              		.cfi_restore 8
 1984              		.cfi_restore 7
 1985              		.cfi_restore 6
 1986              		.cfi_restore 5
 1987              		.cfi_restore 4
 1988              		.cfi_def_cfa_offset 0
 1989              	.LVL147:
 1990              	@ armwave.c:329:     fclose(fp);
 329:armwave.c     **** }
 1991              		.loc 1 329 5 view .LVU504
 1992 0974 FEFFFFEA 		b	fclose		@
 1993              	.LVL148:
 1994              	.L140:
 1995              		.cfi_restore_state
 1996              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 320:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1997              		.loc 1 320 55 view .LVU505
 1998 0978 015085E2 		add	r5, r5, #1	@ yy, yy,
 1999              	.LVL149:
 2000              	@ armwave.c:320:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 320:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2001              		.loc 1 320 5 view .LVU506
 2002 097c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2003 0980 F5FFFF8A 		bhi	.L133		@,
 2004 0984 F7FFFFEA 		b	.L130		@
 2005              	.L142:
 2006              		.align	2
 2007              	.L141:
 2008 0988 A4000000 		.word	.LC6
 2009 098c 00000000 		.word	g_armwave_state
 2010 0990 A8000000 		.word	.LC7
 2011 0994 AC000000 		.word	.LC8
 2012 0998 B4000000 		.word	.LC9
 2013 099c BC000000 		.word	.LC10
 2014              		.cfi_endproc
 2015              	.LFE65:
 2017              		.align	2
 2018              		.global	armwave_test_init
 2019              		.syntax unified
 2020              		.arm
 2021              		.fpu vfp
 2023              	armwave_test_init:
 2024              	.LVL150:
 2025              	.LFB66:
 331:armwave.c     **** 
 332:armwave.c     **** void armwave_test_init(float mod)
 333:armwave.c     **** {
 2026              		.loc 1 333 1 is_stmt 1 view -0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 334:armwave.c     **** 	mod_depth = mod;
 2030              		.loc 1 334 2 view .LVU508
 2031              	@ armwave.c:334: 	mod_depth = mod;
 2032              		.loc 1 334 12 is_stmt 0 view .LVU509
 2033 09a0 8C309FE5 		ldr	r3, .L147+20	@ tmp124,
 2034              	@ armwave.c:333: {
 333:armwave.c     **** 	mod_depth = mod;
 2035              		.loc 1 333 1 view .LVU510
 2036 09a4 70402DE9 		push	{r4, r5, r6, lr}	@
 2037              		.cfi_def_cfa_offset 16
 2038              		.cfi_offset 4, -16
 2039              		.cfi_offset 5, -12
 2040              		.cfi_offset 6, -8
 2041              		.cfi_offset 14, -4
 2042 09a8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2043              		.cfi_def_cfa_offset 40
 2044              		.cfi_offset 80, -40
 2045              		.cfi_offset 81, -36
 2046              		.cfi_offset 82, -32
 2047              		.cfi_offset 83, -28
 2048              		.cfi_offset 84, -24
 2049              		.cfi_offset 85, -20
 2050 09ac 84409FE5 		ldr	r4, .L147+24	@ ivtmp.119,
 2051              	.LBB8:
 2052              	.LBB9:
 2053              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2054              		.loc 1 87 32 view .LVU511
 2055 09b0 1EAA9FED 		vldr.32	s20, .L147+16	@ tmp130,
 2056              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2057              		.loc 1 87 26 view .LVU512
 2058 09b4 199B9FED 		vldr.64	d9, .L147	@ tmp139,
 2059              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2060              		.loc 1 87 49 view .LVU513
 2061 09b8 1A8B9FED 		vldr.64	d8, .L147+8	@ tmp133,
 2062              	.LBE9:
 2063              	.LBE8:
 2064              	@ armwave.c:334: 	mod_depth = mod;
 2065              		.loc 1 334 12 view .LVU514
 2066 09bc 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 335:armwave.c     **** 
 336:armwave.c     ****     test_create_waveform();
 2067              		.loc 1 336 5 is_stmt 1 view .LVU515
 2068 09c0 FEFFFFEB 		bl	test_create_waveform		@
 2069              	.LVL151:
 337:armwave.c     ****     test_create_gamma();
 2070              		.loc 1 337 5 view .LVU516
 2071              	.LBB11:
 2072              	.LBI8:
  81:armwave.c     **** {
 2073              		.loc 1 81 6 view .LVU517
  81:armwave.c     **** {
 2074              		.loc 1 81 6 is_stmt 0 view .LVU518
 2075 09c4 013084E2 		add	r3, r4, #1	@ _30, ivtmp.119,
 2076 09c8 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.119,
 2077 09cc 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 2078              	.LVL152:
 2079              	.L144:
 2080              	.LBB10:
  87:armwave.c     ****     }
 2081              		.loc 1 87 9 is_stmt 1 view .LVU519
 2082              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2083              		.loc 1 87 32 is_stmt 0 view .LVU520
 2084 09d0 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.119
 2085              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2086              		.loc 1 87 26 view .LVU521
 2087 09d4 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 2088              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2089              		.loc 1 87 32 view .LVU522
 2090 09d8 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 2091 09dc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 2092 09e0 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 2093              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2094              		.loc 1 87 26 view .LVU523
 2095 09e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 2096 09e8 FEFFFFEB 		bl	pow		@
 2097              	.LVL153:
 2098              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2099              		.loc 1 87 49 view .LVU524
 2100 09ec 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 2101              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2102              		.loc 1 87 24 view .LVU525
 2103 09f0 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 2104 09f4 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 2105 09f8 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 2106              	.LVL154:
 2107              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2108              		.loc 1 86 5 view .LVU526
 2109 09fc 060054E1 		cmp	r4, r6	@ ivtmp.119, _31
 2110 0a00 F2FFFF1A 		bne	.L144		@,
 2111              	.LVL155:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2112              		.loc 1 86 5 view .LVU527
 2113              	.LBE10:
 2114              	.LBE11:
 338:armwave.c     **** 
 339:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2115              		.loc 1 339 5 is_stmt 1 view .LVU528
 2116 0a04 7DFDFFEB 		bl	armwave_setup_render.constprop.0		@
 2117              	.LVL156:
 340:armwave.c     **** 
 341:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2118              		.loc 1 341 5 view .LVU529
 2119              	@ armwave.c:342: }
 342:armwave.c     **** }
 2120              		.loc 1 342 1 is_stmt 0 view .LVU530
 2121 0a08 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2122              		.cfi_restore 84
 2123              		.cfi_restore 85
 2124              		.cfi_restore 82
 2125              		.cfi_restore 83
 2126              		.cfi_restore 80
 2127              		.cfi_restore 81
 2128              		.cfi_def_cfa_offset 16
 2129              	@ armwave.c:341:     printf("armwave version: %s\n", ARMWAVE_VER);
 341:armwave.c     **** }
 2130              		.loc 1 341 5 view .LVU531
 2131 0a0c 28109FE5 		ldr	r1, .L147+28	@,
 2132 0a10 28009FE5 		ldr	r0, .L147+32	@,
 2133              	@ armwave.c:342: }
 2134              		.loc 1 342 1 view .LVU532
 2135 0a14 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2136              		.cfi_restore 14
 2137              		.cfi_restore 6
 2138              		.cfi_restore 5
 2139              		.cfi_restore 4
 2140              		.cfi_def_cfa_offset 0
 2141              	@ armwave.c:341:     printf("armwave version: %s\n", ARMWAVE_VER);
 341:armwave.c     **** }
 2142              		.loc 1 341 5 view .LVU533
 2143 0a18 FEFFFFEA 		b	printf		@
 2144              	.LVL157:
 2145              	.L148:
 2146 0a1c 0000A0E1 		.align	3
 2147              	.L147:
 2148 0a20 000000C0 		.word	-1073741824
 2149 0a24 CCCCEC3F 		.word	1072483532
 2150 0a28 00000000 		.word	0
 2151 0a2c 00E06F40 		.word	1081073664
 2152 0a30 00007F43 		.word	1132396544
 2153 0a34 00000000 		.word	.LANCHOR1
 2154 0a38 FFFFFFFF 		.word	gamma_table-1
 2155 0a3c CC000000 		.word	.LC11
 2156 0a40 D4000000 		.word	.LC12
 2157              		.cfi_endproc
 2158              	.LFE66:
 2160              		.global	__aeabi_uidiv
 2161              		.align	2
 2162              		.global	armwave_test_generate
 2163              		.syntax unified
 2164              		.arm
 2165              		.fpu vfp
 2167              	armwave_test_generate:
 2168              	.LFB67:
 343:armwave.c     **** 
 344:armwave.c     **** void armwave_test_generate()
 345:armwave.c     **** {
 2169              		.loc 1 345 1 is_stmt 1 view -0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 8
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 346:armwave.c     **** 	uint32_t yy;
 2173              		.loc 1 346 2 view .LVU535
 347:armwave.c     **** 
 348:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2174              		.loc 1 348 5 view .LVU536
 2175              	@ armwave.c:345: {
 345:armwave.c     **** 	uint32_t yy;
 2176              		.loc 1 345 1 is_stmt 0 view .LVU537
 2177 0a44 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2178              		.cfi_def_cfa_offset 36
 2179              		.cfi_offset 4, -36
 2180              		.cfi_offset 5, -32
 2181              		.cfi_offset 6, -28
 2182              		.cfi_offset 7, -24
 2183              		.cfi_offset 8, -20
 2184              		.cfi_offset 9, -16
 2185              		.cfi_offset 10, -12
 2186              		.cfi_offset 11, -8
 2187              		.cfi_offset 14, -4
 2188              	@ armwave.c:348:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2189              		.loc 1 348 5 view .LVU538
 2190 0a48 0010A0E3 		mov	r1, #0	@,
 2191 0a4c 44419FE5 		ldr	r4, .L167	@ tmp269,
 2192              	@ armwave.c:345: {
 345:armwave.c     **** 	uint32_t yy;
 2193              		.loc 1 345 1 view .LVU539
 2194 0a50 0CD04DE2 		sub	sp, sp, #12	@,,
 2195              		.cfi_def_cfa_offset 48
 2196              	@ armwave.c:348:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2197              		.loc 1 348 5 view .LVU540
 2198 0a54 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 2199 0a58 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2200 0a5c FEFFFFEB 		bl	memset		@
 2201              	.LVL158:
 349:armwave.c     **** 
 350:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2202              		.loc 1 350 5 is_stmt 1 view .LVU541
 2203              	@ armwave.c:350:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2204              		.loc 1 350 45 is_stmt 0 view .LVU542
 2205 0a60 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2206              	@ armwave.c:350:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2207              		.loc 1 350 5 view .LVU543
 2208 0a64 020B55E3 		cmp	r5, #2048	@ _72,
 2209 0a68 4800008A 		bhi	.L149		@,
 2210 0a6c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2211              	@ armwave.c:350:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2212              		.loc 1 350 12 view .LVU544
 2213 0a70 00A0A0E3 		mov	r10, #0	@ yy,
 2214              	.LVL159:
 2215              	.L155:
 351:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2216              		.loc 1 351 9 is_stmt 1 discriminator 3 view .LVU545
 2217 0a74 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 2218              	.LBB14:
 2219              	.LBB15:
 2220              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2221              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU546
 2222 0a78 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2223              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2224              		.loc 1 109 5 discriminator 3 view .LVU547
 2225 0a7c 000056E3 		cmp	r6, #0	@ prephitmp_171,
 2226              	.LBE15:
 2227              	.LBE14:
 2228              	@ armwave.c:351:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2229              		.loc 1 351 9 discriminator 3 view .LVU548
 2230 0a80 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 2231              	.LVL160:
 2232              	.LBB17:
 2233              	.LBI14:
  98:armwave.c     **** {
 2234              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU549
 2235              	.LBB16:
 100:armwave.c     ****     uint32_t value, word;
 2236              		.loc 1 100 5 discriminator 3 view .LVU550
 101:armwave.c     ****     uint8_t *wave_base;
 2237              		.loc 1 101 5 discriminator 3 view .LVU551
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2238              		.loc 1 102 5 discriminator 3 view .LVU552
 103:armwave.c     ****     uint8_t *write_buffer;
 2239              		.loc 1 103 5 discriminator 3 view .LVU553
 104:armwave.c     ****     
 2240              		.loc 1 104 5 discriminator 3 view .LVU554
 106:armwave.c     **** 
 2241              		.loc 1 106 5 discriminator 3 view .LVU555
 2242              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2243              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU556
 2244 0a84 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 2245              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2246              		.loc 1 106 40 discriminator 3 view .LVU557
 2247 0a88 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2248              	.LVL161:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2249              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU558
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2250              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU559
 2251 0a8c 3900000A 		beq	.L151		@,
 2252              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2253              		.loc 1 109 11 view .LVU560
 2254 0a90 0080A0E3 		mov	r8, #0	@ w,
 2255 0a94 043043E2 		sub	r3, r3, #4	@ _77, _3,
 2256              	.LVL162:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2257              		.loc 1 109 11 view .LVU561
 2258 0a98 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 2259              	.LVL163:
 2260              	.L154:
 110:armwave.c     **** 
 2261              		.loc 1 110 9 is_stmt 1 view .LVU562
 2262              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2263              		.loc 1 110 64 is_stmt 0 view .LVU563
 2264 0a9c 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2265              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2266              		.loc 1 120 9 view .LVU564
 2267 0aa0 000059E3 		cmp	r9, #0	@ _4,
 2268              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2269              		.loc 1 110 36 view .LVU565
 2270 0aa4 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2271              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2272              		.loc 1 110 64 view .LVU566
 2273 0aa8 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 2274              	.LVL164:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2275              		.loc 1 120 9 is_stmt 1 view .LVU567
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2276              		.loc 1 120 9 is_stmt 0 view .LVU568
 2277 0aac 2D00000A 		beq	.L152		@,
 2278 0ab0 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 2279 0ab4 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 2280              	.LVL165:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2281              		.loc 1 120 9 view .LVU569
 2282 0ab8 03E08EE0 		add	lr, lr, r3	@ ivtmp.125, _16, tmp205
 2283              	.LVL166:
 2284              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2285              		.loc 1 120 16 view .LVU570
 2286 0abc 0010A0E3 		mov	r1, #0	@ yy,
 2287              	.LVL167:
 2288              	.L153:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2289              		.loc 1 135 13 is_stmt 1 view .LVU571
 2290              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2291              		.loc 1 135 18 is_stmt 0 view .LVU572
 2292 0ac0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 2293              	.LVL168:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2294              		.loc 1 139 13 is_stmt 1 view .LVU573
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2295              		.loc 1 140 14 view .LVU574
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2296              		.loc 1 141 14 view .LVU575
 142:armwave.c     ****             	word >>= 8;
 2297              		.loc 1 142 14 view .LVU576
 2298              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2299              		.loc 1 140 42 is_stmt 0 view .LVU577
 2300 0ac4 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2301              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2302              		.loc 1 141 60 view .LVU578
 2303 0ac8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2304              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2305              		.loc 1 140 34 view .LVU579
 2306 0acc 73C0EFE6 		uxtb	ip, r3	@ word, word
 2307              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2308              		.loc 1 143 19 view .LVU580
 2309 0ad0 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 2310              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2311              		.loc 1 142 44 view .LVU581
 2312 0ad4 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 2313              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2314              		.loc 1 140 34 view .LVU582
 2315 0ad8 7550EFE6 		uxtb	r5, r5	@ word, word
 2316              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2317              		.loc 1 142 44 view .LVU583
 2318 0adc 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2319              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2320              		.loc 1 141 60 view .LVU584
 2321 0ae0 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2322              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2323              		.loc 1 143 19 view .LVU585
 2324 0ae4 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2325              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2326              		.loc 1 142 44 view .LVU586
 2327 0ae8 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2328              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2329              		.loc 1 140 34 view .LVU587
 2330 0aec 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2331              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2332              		.loc 1 143 19 view .LVU588
 2333 0af0 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2334              	.LVL169:
 2335              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2336              		.loc 1 142 44 view .LVU589
 2337 0af4 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2338 0af8 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2339              	.LVL170:
 143:armwave.c     ****     		}
 2340              		.loc 1 143 14 is_stmt 1 view .LVU590
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2341              		.loc 1 140 14 view .LVU591
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2342              		.loc 1 141 14 view .LVU592
 142:armwave.c     ****             	word >>= 8;
 2343              		.loc 1 142 14 view .LVU593
 2344              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2345              		.loc 1 140 42 is_stmt 0 view .LVU594
 2346 0afc 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2347              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2348              		.loc 1 141 60 view .LVU595
 2349 0b00 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2350              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2351              		.loc 1 142 44 view .LVU596
 2352 0b04 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2353              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2354              		.loc 1 141 60 view .LVU597
 2355 0b08 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2356              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2357              		.loc 1 142 44 view .LVU598
 2358 0b0c 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2359              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2360              		.loc 1 141 60 view .LVU599
 2361 0b10 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2362              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2363              		.loc 1 120 37 view .LVU600
 2364 0b14 041081E2 		add	r1, r1, #4	@ yy, yy,
 2365              	.LVL171:
 2366              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2367              		.loc 1 142 44 view .LVU601
 2368 0b18 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2369              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2370              		.loc 1 120 9 view .LVU602
 2371 0b1c 010059E1 		cmp	r9, r1	@ _4, yy
 2372              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2373              		.loc 1 142 44 view .LVU603
 2374 0b20 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2375 0b24 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2376              	.LVL172:
 143:armwave.c     ****     		}
 2377              		.loc 1 143 14 is_stmt 1 view .LVU604
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2378              		.loc 1 140 14 view .LVU605
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2379              		.loc 1 141 14 view .LVU606
 142:armwave.c     ****             	word >>= 8;
 2380              		.loc 1 142 14 view .LVU607
 2381              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2382              		.loc 1 140 42 is_stmt 0 view .LVU608
 2383 0b28 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2384              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2385              		.loc 1 141 60 view .LVU609
 2386 0b2c 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2387              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2388              		.loc 1 142 44 view .LVU610
 2389 0b30 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2390 0b34 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2391 0b38 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2392 0b3c 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2393 0b40 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****     		}
 2394              		.loc 1 143 14 is_stmt 1 view .LVU611
 2395              	.LVL173:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2396              		.loc 1 140 14 view .LVU612
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2397              		.loc 1 141 14 view .LVU613
 142:armwave.c     ****             	word >>= 8;
 2398              		.loc 1 142 14 view .LVU614
 2399              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2400              		.loc 1 140 42 is_stmt 0 view .LVU615
 2401 0b44 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2402              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2403              		.loc 1 141 60 view .LVU616
 2404 0b48 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2405              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2406              		.loc 1 142 44 view .LVU617
 2407 0b4c 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2408 0b50 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2409 0b54 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2410 0b58 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2411 0b5c 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****     		}
 2412              		.loc 1 143 14 is_stmt 1 view .LVU618
 2413              	.LVL174:
 2414              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2415              		.loc 1 120 9 is_stmt 0 view .LVU619
 2416 0b60 D6FFFF8A 		bhi	.L153		@,
 2417 0b64 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2418              	.LVL175:
 2419              	.L152:
 2420              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2421              		.loc 1 109 44 view .LVU620
 2422 0b68 018088E2 		add	r8, r8, #1	@ w, w,
 2423              	.LVL176:
 2424              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2425              		.loc 1 109 5 view .LVU621
 2426 0b6c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2427 0b70 C9FFFF3A 		bcc	.L154		@,
 2428 0b74 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2429              	.LVL177:
 2430              	.L151:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2431              		.loc 1 109 5 view .LVU622
 2432              	.LBE16:
 2433              	.LBE17:
 2434              	@ armwave.c:350:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 350:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2435              		.loc 1 350 28 discriminator 3 view .LVU623
 2436 0b78 0510A0E1 		mov	r1, r5	@, _72
 2437 0b7c 020BA0E3 		mov	r0, #2048	@,
 2438              	.LVL178:
 350:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2439              		.loc 1 350 28 discriminator 3 view .LVU624
 2440 0b80 FEFFFFEB 		bl	__aeabi_uidiv		@
 2441              	.LVL179:
 2442              	@ armwave.c:350:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 350:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2443              		.loc 1 350 63 discriminator 3 view .LVU625
 2444 0b84 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2445              	.LVL180:
 2446              	@ armwave.c:350:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 350:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2447              		.loc 1 350 5 discriminator 3 view .LVU626
 2448 0b88 0A0050E1 		cmp	r0, r10	@, yy
 2449 0b8c B8FFFF8A 		bhi	.L155		@,
 2450              	.LVL181:
 2451              	.L149:
 2452              	@ armwave.c:353: }
 352:armwave.c     ****     }
 353:armwave.c     **** }
 2453              		.loc 1 353 1 view .LVU627
 2454 0b90 0CD08DE2 		add	sp, sp, #12	@,,
 2455              		.cfi_def_cfa_offset 36
 2456              		@ sp needed	@
 2457 0b94 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2458              	.L168:
 2459              		.align	2
 2460              	.L167:
 2461 0b98 00000000 		.word	g_armwave_state
 2462              		.cfi_endproc
 2463              	.LFE67:
 2465              		.align	2
 2466              		.global	armwave_test_get_buffer
 2467              		.syntax unified
 2468              		.arm
 2469              		.fpu vfp
 2471              	armwave_test_get_buffer:
 2472              	.LFB68:
 354:armwave.c     **** 
 355:armwave.c     **** PyObject *armwave_test_get_buffer()
 356:armwave.c     **** {
 2473              		.loc 1 356 1 is_stmt 1 view -0
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 0
 2476              		@ frame_needed = 0, uses_anonymous_args = 0
 357:armwave.c     ****     PyObject *mv;
 2477              		.loc 1 357 5 view .LVU629
 358:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2478              		.loc 1 358 5 view .LVU630
 2479              	@ armwave.c:356: {
 356:armwave.c     ****     PyObject *mv;
 2480              		.loc 1 356 1 is_stmt 0 view .LVU631
 2481 0b9c 30402DE9 		push	{r4, r5, lr}	@
 2482              		.cfi_def_cfa_offset 12
 2483              		.cfi_offset 4, -12
 2484              		.cfi_offset 5, -8
 2485              		.cfi_offset 14, -4
 2486              	@ armwave.c:358:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2487              		.loc 1 358 22 view .LVU632
 2488 0ba0 2C00A0E3 		mov	r0, #44	@,
 2489              	@ armwave.c:356: {
 356:armwave.c     ****     PyObject *mv;
 2490              		.loc 1 356 1 view .LVU633
 2491 0ba4 0CD04DE2 		sub	sp, sp, #12	@,,
 2492              		.cfi_def_cfa_offset 24
 2493              	@ armwave.c:358:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2494              		.loc 1 358 22 view .LVU634
 2495 0ba8 FEFFFFEB 		bl	malloc		@
 2496              	.LVL182:
 2497              	@ armwave.c:360:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 359:armwave.c     ****     
 360:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2498              		.loc 1 360 5 view .LVU635
 2499 0bac 3C409FE5 		ldr	r4, .L171	@ tmp118,
 2500              	@ armwave.c:358:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 358:armwave.c     ****     
 2501              		.loc 1 358 22 view .LVU636
 2502 0bb0 0050A0E1 		mov	r5, r0	@ tmp117,
 2503              	.LVL183:
 2504              		.loc 1 360 5 is_stmt 1 view .LVU637
 2505 0bb4 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2506              	.LVL184:
 2507              		.loc 1 360 5 is_stmt 0 view .LVU638
 2508 0bb8 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2509              	.LVL185:
 361:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2510              		.loc 1 361 5 is_stmt 1 view .LVU639
 2511              	@ armwave.c:361:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2512              		.loc 1 361 79 is_stmt 0 view .LVU640
 2513 0bbc 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2514              	@ armwave.c:361:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2515              		.loc 1 361 5 view .LVU641
 2516 0bc0 08C0A0E3 		mov	ip, #8	@ tmp125,
 2517 0bc4 0110A0E3 		mov	r1, #1	@ tmp126,
 2518 0bc8 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2519 0bcc 02108DE8 		stm	sp, {r1, ip}	@,,
 2520 0bd0 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2521 0bd4 0500A0E1 		mov	r0, r5	@, tmp117
 2522 0bd8 0010A0E3 		mov	r1, #0	@,
 2523 0bdc FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2524              	.LVL186:
 362:armwave.c     **** 
 363:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2525              		.loc 1 363 2 is_stmt 1 view .LVU642
 2526              	@ armwave.c:363: 	mv = PyMemoryView_FromBuffer(buf);
 2527              		.loc 1 363 7 is_stmt 0 view .LVU643
 2528 0be0 0500A0E1 		mov	r0, r5	@, tmp117
 2529              	@ armwave.c:364: }
 364:armwave.c     **** }
 2530              		.loc 1 364 1 view .LVU644
 2531 0be4 0CD08DE2 		add	sp, sp, #12	@,,
 2532              		.cfi_def_cfa_offset 12
 2533              		@ sp needed	@
 2534 0be8 3040BDE8 		pop	{r4, r5, lr}	@
 2535              		.cfi_restore 14
 2536              		.cfi_restore 5
 2537              		.cfi_restore 4
 2538              		.cfi_def_cfa_offset 0
 2539              	.LVL187:
 2540              	@ armwave.c:363: 	mv = PyMemoryView_FromBuffer(buf);
 363:armwave.c     **** }
 2541              		.loc 1 363 7 view .LVU645
 2542 0bec FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2543              	.LVL188:
 2544              	.L172:
 363:armwave.c     **** }
 2545              		.loc 1 363 7 view .LVU646
 2546              		.align	2
 2547              	.L171:
 2548 0bf0 00000000 		.word	g_armwave_state
 2549              		.cfi_endproc
 2550              	.LFE68:
 2552              		.align	2
 2553              		.global	armwave_test_dump_buffer_to_ppm
 2554              		.syntax unified
 2555              		.arm
 2556              		.fpu vfp
 2558              	armwave_test_dump_buffer_to_ppm:
 2559              	.LVL189:
 2560              	.LFB69:
 365:armwave.c     **** 
 366:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 367:armwave.c     **** {
 2561              		.loc 1 367 1 is_stmt 1 view -0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 0
 2564              		@ frame_needed = 0, uses_anonymous_args = 0
 2565              		@ link register save eliminated.
 368:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2566              		.loc 1 368 2 view .LVU648
 2567 0bf4 08309FE5 		ldr	r3, .L174	@ tmp112,
 2568 0bf8 0010A0E1 		mov	r1, r0	@, fn
 2569 0bfc 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2570              	.LVL190:
 2571              		.loc 1 368 2 is_stmt 0 view .LVU649
 2572 0c00 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2573              	.LVL191:
 2574              	.L175:
 2575              		.loc 1 368 2 view .LVU650
 2576              		.align	2
 2577              	.L174:
 2578 0c04 00000000 		.word	g_armwave_state
 2579              		.cfi_endproc
 2580              	.LFE69:
 2582              		.align	2
 2583              		.global	armwave_cleanup
 2584              		.syntax unified
 2585              		.arm
 2586              		.fpu vfp
 2588              	armwave_cleanup:
 2589              	.LFB70:
 369:armwave.c     **** }
 370:armwave.c     **** 
 371:armwave.c     **** void armwave_cleanup()
 372:armwave.c     **** {
 2590              		.loc 1 372 1 is_stmt 1 view -0
 2591              		.cfi_startproc
 2592              		@ args = 0, pretend = 0, frame = 0
 2593              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2594              		.loc 1 373 2 view .LVU652
 2595              	@ armwave.c:372: {
 372:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2596              		.loc 1 372 1 is_stmt 0 view .LVU653
 2597 0c08 10402DE9 		push	{r4, lr}	@
 2598              		.cfi_def_cfa_offset 8
 2599              		.cfi_offset 4, -8
 2600              		.cfi_offset 14, -4
 2601              	@ armwave.c:373: 	free(g_armwave_state.out_pixbuf);
 2602              		.loc 1 373 22 view .LVU654
 2603 0c0c 28409FE5 		ldr	r4, .L178	@ tmp113,
 2604              	@ armwave.c:373: 	free(g_armwave_state.out_pixbuf);
 2605              		.loc 1 373 2 view .LVU655
 2606 0c10 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2607 0c14 FEFFFFEB 		bl	free		@
 2608              	.LVL192:
 374:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2609              		.loc 1 374 2 is_stmt 1 view .LVU656
 2610 0c18 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2611 0c1c FEFFFFEB 		bl	free		@
 2612              	.LVL193:
 375:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2613              		.loc 1 375 2 view .LVU657
 2614 0c20 700094E5 		ldr	r0, [r4, #112]	@, g_armwave_state.xcoord_to_xpixel
 2615 0c24 FEFFFFEB 		bl	free		@
 2616              	.LVL194:
 376:armwave.c     **** 
 377:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2617              		.loc 1 377 2 view .LVU658
 2618              	@ armwave.c:377: 	g_armwave_state.out_pixbuf = NULL;
 2619              		.loc 1 377 29 is_stmt 0 view .LVU659
 2620 0c28 0030A0E3 		mov	r3, #0	@ tmp120,
 2621 0c2c 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 378:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2622              		.loc 1 378 2 is_stmt 1 view .LVU660
 2623              	@ armwave.c:378: 	g_armwave_state.ch1_buffer = NULL;
 2624              		.loc 1 378 29 is_stmt 0 view .LVU661
 2625 0c30 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 379:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2626              		.loc 1 379 2 is_stmt 1 view .LVU662
 2627              	@ armwave.c:379: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2628              		.loc 1 379 35 is_stmt 0 view .LVU663
 2629 0c34 703084E5 		str	r3, [r4, #112]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2630              	@ armwave.c:380: }
 380:armwave.c     **** }
 2631              		.loc 1 380 1 view .LVU664
 2632 0c38 1080BDE8 		pop	{r4, pc}	@
 2633              	.L179:
 2634              		.align	2
 2635              	.L178:
 2636 0c3c 00000000 		.word	g_armwave_state
 2637              		.cfi_endproc
 2638              	.LFE70:
 2640              		.section	.text.startup,"ax",%progbits
 2641              		.align	2
 2642              		.global	main
 2643              		.syntax unified
 2644              		.arm
 2645              		.fpu vfp
 2647              	main:
 2648              	.LVL195:
 2649              	.LFB71:
 381:armwave.c     **** 
 382:armwave.c     **** int main(int argc, char *argv[])
 383:armwave.c     **** {
 2650              		.loc 1 383 1 is_stmt 1 view -0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 8
 2653              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     uint32_t *out_buffer;
 2654              		.loc 1 384 5 view .LVU666
 385:armwave.c     ****     uint32_t xx, yy, n;
 2655              		.loc 1 385 5 view .LVU667
 386:armwave.c     **** 
 387:armwave.c     ****     //printf("Starting armwave...\n");
 388:armwave.c     ****     armwave_init();
 2656              		.loc 1 388 5 view .LVU668
 2657              	.LBB22:
 2658              	.LBI22:
 151:armwave.c     **** {
 2659              		.loc 1 151 6 view .LVU669
 2660              	.LBB23:
 153:armwave.c     **** }
 2661              		.loc 1 153 5 view .LVU670
 2662              	.LBE23:
 2663              	.LBE22:
 2664              	@ armwave.c:383: {
 383:armwave.c     ****     uint32_t *out_buffer;
 2665              		.loc 1 383 1 is_stmt 0 view .LVU671
 2666 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2667              		.cfi_def_cfa_offset 36
 2668              		.cfi_offset 4, -36
 2669              		.cfi_offset 5, -32
 2670              		.cfi_offset 6, -28
 2671              		.cfi_offset 7, -24
 2672              		.cfi_offset 8, -20
 2673              		.cfi_offset 9, -16
 2674              		.cfi_offset 10, -12
 2675              		.cfi_offset 11, -8
 2676              		.cfi_offset 14, -4
 2677 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2678              		.cfi_def_cfa_offset 48
 2679              	.LBB27:
 2680              	.LBB24:
 2681              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2682              		.loc 1 153 27 view .LVU672
 2683 0008 68919FE5 		ldr	r9, .L200	@ tmp267,
 2684              	.LBE24:
 2685              	.LBE27:
 2686              	@ armwave.c:397:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 389:armwave.c     **** 
 390:armwave.c     ****     //printf("Creating test waveform...\n");
 391:armwave.c     ****     test_create_waveform();
 392:armwave.c     **** 
 393:armwave.c     ****     //printf("Creating gamma LUT...\n");
 394:armwave.c     ****     test_create_gamma();
 395:armwave.c     **** 
 396:armwave.c     ****     //printf("Setting up render...\n");
 397:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2687              		.loc 1 397 5 view .LVU673
 2688 000c 68219FE5 		ldr	r2, .L200+4	@ ivtmp_191,
 2689              	.LBB28:
 2690              	.LBB25:
 2691              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2692              		.loc 1 153 27 view .LVU674
 2693 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2694              	.LBE25:
 2695              	.LBE28:
 2696              	@ armwave.c:397:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2697              		.loc 1 397 5 view .LVU675
 2698 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2699              	.LBB29:
 2700              	.LBB26:
 2701              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2702              		.loc 1 153 27 view .LVU676
 2703 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2704              	.LBE26:
 2705              	.LBE29:
 391:armwave.c     **** 
 2706              		.loc 1 391 5 is_stmt 1 view .LVU677
 2707 001c FEFFFFEB 		bl	test_create_waveform		@
 2708              	.LVL196:
 394:armwave.c     **** 
 2709              		.loc 1 394 5 view .LVU678
 2710 0020 FEFFFFEB 		bl	test_create_gamma		@
 2711              	.LVL197:
 2712              		.loc 1 397 5 view .LVU679
 2713 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2714              	.LVL198:
 398:armwave.c     **** 
 399:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 400:armwave.c     **** 
 401:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2715              		.loc 1 401 5 view .LVU680
 2716              		.loc 1 401 5 is_stmt 0 view .LVU681
 2717 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2718              	.LVL199:
 2719              	.L181:
 2720              	@ armwave.c:402:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 402:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2721              		.loc 1 402 9 view .LVU682
 2722 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2723 0030 4900008A 		bhi	.L189		@,
 2724 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2725              	@ armwave.c:402:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2726              		.loc 1 402 16 view .LVU683
 2727 0038 0080A0E3 		mov	r8, #0	@ yy,
 2728 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2729              	.LVL200:
 2730              	.L186:
 403:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 404:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2731              		.loc 1 404 13 is_stmt 1 discriminator 3 view .LVU684
 2732 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2733              	.LBB30:
 2734              	.LBB31:
 2735              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2736              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU685
 2737 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2738              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2739              		.loc 1 109 5 discriminator 3 view .LVU686
 2740 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2741              	.LBE31:
 2742              	.LBE30:
 2743              	@ armwave.c:404:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2744              		.loc 1 404 13 discriminator 3 view .LVU687
 2745 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2746              	.LVL201:
 2747              	.LBB33:
 2748              	.LBI30:
  98:armwave.c     **** {
 2749              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU688
 2750              	.LBB32:
 100:armwave.c     ****     uint32_t value, word;
 2751              		.loc 1 100 5 discriminator 3 view .LVU689
 101:armwave.c     ****     uint8_t *wave_base;
 2752              		.loc 1 101 5 discriminator 3 view .LVU690
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2753              		.loc 1 102 5 discriminator 3 view .LVU691
 103:armwave.c     ****     uint8_t *write_buffer;
 2754              		.loc 1 103 5 discriminator 3 view .LVU692
 104:armwave.c     ****     
 2755              		.loc 1 104 5 discriminator 3 view .LVU693
 106:armwave.c     **** 
 2756              		.loc 1 106 5 discriminator 3 view .LVU694
 2757              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2758              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU695
 2759 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2760              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2761              		.loc 1 106 40 discriminator 3 view .LVU696
 2762 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2763              	.LVL202:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2764              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU697
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2765              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU698
 2766 0058 3900000A 		beq	.L182		@,
 2767              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2768              		.loc 1 109 11 view .LVU699
 2769 005c 0070A0E3 		mov	r7, #0	@ w,
 2770 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2771              	.LVL203:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2772              		.loc 1 109 11 view .LVU700
 2773 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2774              	.LVL204:
 2775              	.L185:
 110:armwave.c     **** 
 2776              		.loc 1 110 9 is_stmt 1 view .LVU701
 2777              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2778              		.loc 1 110 64 is_stmt 0 view .LVU702
 2779 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2780              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2781              		.loc 1 120 9 view .LVU703
 2782 006c 00005AE3 		cmp	r10, #0	@ _2,
 2783              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2784              		.loc 1 110 36 view .LVU704
 2785 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2786              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2787              		.loc 1 110 64 view .LVU705
 2788 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2789              	.LVL205:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2790              		.loc 1 120 9 is_stmt 1 view .LVU706
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2791              		.loc 1 120 9 is_stmt 0 view .LVU707
 2792 0078 2D00000A 		beq	.L183		@,
 2793 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2794 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2795              	.LVL206:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2796              		.loc 1 120 9 view .LVU708
 2797 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.138, _20, tmp202
 2798              	.LVL207:
 2799              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2800              		.loc 1 120 16 view .LVU709
 2801 0088 0010A0E3 		mov	r1, #0	@ yy,
 2802              	.LVL208:
 2803              	.L184:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2804              		.loc 1 135 13 is_stmt 1 view .LVU710
 2805              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2806              		.loc 1 135 18 is_stmt 0 view .LVU711
 2807 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2808              	.LVL209:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2809              		.loc 1 139 13 is_stmt 1 view .LVU712
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2810              		.loc 1 140 14 view .LVU713
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2811              		.loc 1 141 14 view .LVU714
 142:armwave.c     ****             	word >>= 8;
 2812              		.loc 1 142 14 view .LVU715
 2813              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2814              		.loc 1 140 42 is_stmt 0 view .LVU716
 2815 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2816              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2817              		.loc 1 141 60 view .LVU717
 2818 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2819              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2820              		.loc 1 140 34 view .LVU718
 2821 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2822              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2823              		.loc 1 143 19 view .LVU719
 2824 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2825              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2826              		.loc 1 142 44 view .LVU720
 2827 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2828              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2829              		.loc 1 140 34 view .LVU721
 2830 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2831              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2832              		.loc 1 142 44 view .LVU722
 2833 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2834              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2835              		.loc 1 141 60 view .LVU723
 2836 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2837              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2838              		.loc 1 143 19 view .LVU724
 2839 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2840              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2841              		.loc 1 142 44 view .LVU725
 2842 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2843              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2844              		.loc 1 140 34 view .LVU726
 2845 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2846              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2847              		.loc 1 143 19 view .LVU727
 2848 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2849              	.LVL210:
 2850              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2851              		.loc 1 142 44 view .LVU728
 2852 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2853 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2854              	.LVL211:
 143:armwave.c     ****     		}
 2855              		.loc 1 143 14 is_stmt 1 view .LVU729
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2856              		.loc 1 140 14 view .LVU730
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2857              		.loc 1 141 14 view .LVU731
 142:armwave.c     ****             	word >>= 8;
 2858              		.loc 1 142 14 view .LVU732
 2859              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2860              		.loc 1 140 42 is_stmt 0 view .LVU733
 2861 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2862              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2863              		.loc 1 141 60 view .LVU734
 2864 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2865              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2866              		.loc 1 142 44 view .LVU735
 2867 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2868              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2869              		.loc 1 141 60 view .LVU736
 2870 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2871              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2872              		.loc 1 142 44 view .LVU737
 2873 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2874              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2875              		.loc 1 141 60 view .LVU738
 2876 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2877              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2878              		.loc 1 120 37 view .LVU739
 2879 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2880              	.LVL212:
 2881              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2882              		.loc 1 142 44 view .LVU740
 2883 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2884              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2885              		.loc 1 120 9 view .LVU741
 2886 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2887              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2888              		.loc 1 142 44 view .LVU742
 2889 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2890 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2891              	.LVL213:
 143:armwave.c     ****     		}
 2892              		.loc 1 143 14 is_stmt 1 view .LVU743
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2893              		.loc 1 140 14 view .LVU744
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2894              		.loc 1 141 14 view .LVU745
 142:armwave.c     ****             	word >>= 8;
 2895              		.loc 1 142 14 view .LVU746
 2896              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2897              		.loc 1 140 42 is_stmt 0 view .LVU747
 2898 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2899              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2900              		.loc 1 141 60 view .LVU748
 2901 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2902              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2903              		.loc 1 142 44 view .LVU749
 2904 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2905 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2906 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2907 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2908 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****     		}
 2909              		.loc 1 143 14 is_stmt 1 view .LVU750
 2910              	.LVL214:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2911              		.loc 1 140 14 view .LVU751
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2912              		.loc 1 141 14 view .LVU752
 142:armwave.c     ****             	word >>= 8;
 2913              		.loc 1 142 14 view .LVU753
 2914              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2915              		.loc 1 140 42 is_stmt 0 view .LVU754
 2916 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2917              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2918              		.loc 1 141 60 view .LVU755
 2919 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2920              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2921              		.loc 1 142 44 view .LVU756
 2922 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2923 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2924 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2925 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2926 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****     		}
 2927              		.loc 1 143 14 is_stmt 1 view .LVU757
 2928              	.LVL215:
 2929              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2930              		.loc 1 120 9 is_stmt 0 view .LVU758
 2931 012c D6FFFF8A 		bhi	.L184		@,
 2932 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2933              	.LVL216:
 2934              	.L183:
 2935              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2936              		.loc 1 109 44 view .LVU759
 2937 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2938              	.LVL217:
 2939              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2940              		.loc 1 109 5 view .LVU760
 2941 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2942 013c C9FFFF3A 		bcc	.L185		@,
 2943 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2944              	.LVL218:
 2945              	.L182:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2946              		.loc 1 109 5 view .LVU761
 2947              	.LBE32:
 2948              	.LBE33:
 2949              	@ armwave.c:402:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 402:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2950              		.loc 1 402 32 discriminator 3 view .LVU762
 2951 0144 0510A0E1 		mov	r1, r5	@, _61
 2952 0148 020BA0E3 		mov	r0, #2048	@,
 2953              	.LVL219:
 402:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2954              		.loc 1 402 32 discriminator 3 view .LVU763
 2955 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2956              	.LVL220:
 2957              	@ armwave.c:402:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 402:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2958              		.loc 1 402 67 discriminator 3 view .LVU764
 2959 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2960              	.LVL221:
 2961              	@ armwave.c:402:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 402:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2962              		.loc 1 402 9 discriminator 3 view .LVU765
 2963 0154 080050E1 		cmp	r0, r8	@, yy
 2964 0158 B8FFFF8A 		bhi	.L186		@,
 2965              	.LVL222:
 2966              	.L189:
 2967              	@ armwave.c:401:     for(n = 0; n < 5000; n++) {
 401:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2968              		.loc 1 401 5 discriminator 2 view .LVU766
 2969 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2970 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2971 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2972 0168 AFFFFF1A 		bne	.L181		@,
 2973 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 405:armwave.c     ****         }
 406:armwave.c     ****     }
 407:armwave.c     **** 
 408:armwave.c     ****     /*
 409:armwave.c     ****     printf("Creating pixbuf\n");
 410:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 411:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 412:armwave.c     **** 
 413:armwave.c     ****     printf("Dumping pixbuf\n");
 414:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 415:armwave.c     ****     */
 416:armwave.c     **** 
 417:armwave.c     ****     return 0;
 2974              		.loc 1 417 5 is_stmt 1 view .LVU767
 2975              	@ armwave.c:418: }
 418:armwave.c     **** }...
 2976              		.loc 1 418 1 is_stmt 0 view .LVU768
 2977 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2978              		.cfi_def_cfa_offset 36
 2979              		@ sp needed	@
 2980 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2981              	.L201:
 2982              		.align	2
 2983              	.L200:
 2984 0178 00000000 		.word	g_armwave_state
 2985 017c 88130000 		.word	5000
 2986              		.cfi_endproc
 2987              	.LFE71:
 2989              		.global	mod_depth
 2990              		.global	overall_scale
 2991              		.comm	gamma_table,256,4
 2992              		.comm	test_wave_buffer,131072,4
 2993              		.comm	g_armwave_state,116,4
 2994              		.section	.rodata
 2995              		.align	2
 2996              		.set	.LANCHOR0,. + 0
 2999              	__PRETTY_FUNCTION__.16995:
 3000 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3000      6176655F 
 3000      73657475 
 3000      705F7265 
 3000      6E646572 
 3001 0015 000000   		.space	3
 3004              	__PRETTY_FUNCTION__.17018:
 3005 0018 61726D77 		.ascii	"armwave_fill_pixbuf\000"
 3005      6176655F 
 3005      66696C6C 
 3005      5F706978 
 3005      62756600 
 3008              	__PRETTY_FUNCTION__.17041:
 3009 002c 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 3009      6176655F 
 3009      66696C6C 
 3009      5F706978 
 3009      62756632 
 3010              		.data
 3011              		.align	2
 3012              		.set	.LANCHOR2,. + 0
 3015              	overall_scale:
 3016 0000 0000A041 		.word	1101004800
 3017              		.bss
 3018              		.align	2
 3019              		.set	.LANCHOR1,. + 0
 3022              	mod_depth:
 3023 0000 00000000 		.space	4
 3024              		.section	.rodata.str1.4,"aMS",%progbits,1
 3025              		.align	2
 3026              	.LC0:
 3027 0000 61726D77 		.ascii	"armwave.c\000"
 3027      6176652E 
 3027      6300
 3028 000a 0000     		.space	2
 3029              	.LC1:
 3030 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3030      6D776176 
 3030      655F7374 
 3030      6174652E 
 3030      6368315F 
 3031 002f 00       		.space	1
 3032              	.LC2:
 3033 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3033      6D776176 
 3033      655F7374 
 3033      6174652E 
 3033      78636F6F 
 3034 0059 000000   		.space	3
 3035              	.LC3:
 3036 005c 73746172 		.ascii	"start_point < end_point\000"
 3036      745F706F 
 3036      696E7420 
 3036      3C20656E 
 3036      645F706F 
 3037              	.LC4:
 3038 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 3038      6765745F 
 3038      68656967 
 3038      68742025 
 3038      20323536 
 3039 008f 00       		.space	1
 3040              	.LC5:
 3041 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 3041      62756666 
 3041      65722021 
 3041      3D204E55 
 3041      4C4C00
 3042 00a3 00       		.space	1
 3043              	.LC6:
 3044 00a4 776200   		.ascii	"wb\000"
 3045 00a7 00       		.space	1
 3046              	.LC7:
 3047 00a8 50330A00 		.ascii	"P3\012\000"
 3048              	.LC8:
 3049 00ac 25642025 		.ascii	"%d %d\012\000"
 3049      640A00
 3050 00b3 00       		.space	1
 3051              	.LC9:
 3052 00b4 3235350A 		.ascii	"255\012\000"
 3052      00
 3053 00b9 000000   		.space	3
 3054              	.LC10:
 3055 00bc 25336420 		.ascii	"%3d %3d %3d\012\000"
 3055      25336420 
 3055      2533640A 
 3055      00
 3056 00c9 000000   		.space	3
 3057              	.LC11:
 3058 00cc 76302E30 		.ascii	"v0.0.1\000"
 3058      2E3100
 3059 00d3 00       		.space	1
 3060              	.LC12:
 3061 00d4 61726D77 		.ascii	"armwave version: %s\012\000"
 3061      61766520 
 3061      76657273 
 3061      696F6E3A 
 3061      2025730A 
 3062              		.text
 3063              	.Letext0:
 3064              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3065              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3066              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3067              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3068              		.file 6 "/usr/include/stdio.h"
 3069              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3070              		.file 8 "/usr/include/errno.h"
 3071              		.file 9 "/usr/include/unistd.h"
 3072              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3073              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3074              		.file 12 "/usr/local/include/python3.8/pyport.h"
 3075              		.file 13 "/usr/include/math.h"
 3076              		.file 14 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3077              		.file 15 "/usr/include/time.h"
 3078              		.file 16 "/usr/local/include/python3.8/pymem.h"
 3079              		.file 17 "/usr/local/include/python3.8/object.h"
 3080              		.file 18 "/usr/local/include/python3.8/cpython/object.h"
 3081              		.file 19 "/usr/local/include/python3.8/methodobject.h"
 3082              		.file 20 "/usr/local/include/python3.8/descrobject.h"
 3083              		.file 21 "/usr/local/include/python3.8/pyhash.h"
 3084              		.file 22 "/usr/local/include/python3.8/pydebug.h"
 3085              		.file 23 "/usr/local/include/python3.8/bytearrayobject.h"
 3086              		.file 24 "/usr/local/include/python3.8/bytesobject.h"
 3087              		.file 25 "/usr/local/include/python3.8/unicodeobject.h"
 3088              		.file 26 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3089              		.file 27 "/usr/local/include/python3.8/longintrepr.h"
 3090              		.file 28 "/usr/local/include/python3.8/longobject.h"
 3091              		.file 29 "/usr/local/include/python3.8/boolobject.h"
 3092              		.file 30 "/usr/local/include/python3.8/floatobject.h"
 3093              		.file 31 "/usr/local/include/python3.8/complexobject.h"
 3094              		.file 32 "/usr/local/include/python3.8/rangeobject.h"
 3095              		.file 33 "/usr/local/include/python3.8/memoryobject.h"
 3096              		.file 34 "/usr/local/include/python3.8/tupleobject.h"
 3097              		.file 35 "/usr/local/include/python3.8/listobject.h"
 3098              		.file 36 "/usr/local/include/python3.8/dictobject.h"
 3099              		.file 37 "/usr/local/include/python3.8/odictobject.h"
 3100              		.file 38 "/usr/local/include/python3.8/enumobject.h"
 3101              		.file 39 "/usr/local/include/python3.8/setobject.h"
 3102              		.file 40 "/usr/local/include/python3.8/moduleobject.h"
 3103              		.file 41 "/usr/local/include/python3.8/funcobject.h"
 3104              		.file 42 "/usr/local/include/python3.8/classobject.h"
 3105              		.file 43 "/usr/local/include/python3.8/fileobject.h"
 3106              		.file 44 "/usr/local/include/python3.8/cpython/fileobject.h"
 3107              		.file 45 "/usr/local/include/python3.8/pycapsule.h"
 3108              		.file 46 "/usr/local/include/python3.8/traceback.h"
 3109              		.file 47 "/usr/local/include/python3.8/sliceobject.h"
 3110              		.file 48 "/usr/local/include/python3.8/cellobject.h"
 3111              		.file 49 "/usr/local/include/python3.8/iterobject.h"
 3112              		.file 50 "/usr/local/include/python3.8/pystate.h"
 3113              		.file 51 "/usr/local/include/python3.8/cpython/pystate.h"
 3114              		.file 52 "/usr/local/include/python3.8/genobject.h"
 3115              		.file 53 "/usr/local/include/python3.8/weakrefobject.h"
 3116              		.file 54 "/usr/local/include/python3.8/structseq.h"
 3117              		.file 55 "/usr/local/include/python3.8/namespaceobject.h"
 3118              		.file 56 "/usr/local/include/python3.8/picklebufobject.h"
 3119              		.file 57 "/usr/local/include/python3.8/codecs.h"
 3120              		.file 58 "/usr/local/include/python3.8/pyerrors.h"
 3121              		.file 59 "/usr/local/include/python3.8/context.h"
 3122              		.file 60 "/usr/local/include/python3.8/modsupport.h"
 3123              		.file 61 "/usr/local/include/python3.8/code.h"
 3124              		.file 62 "/usr/local/include/python3.8/pythonrun.h"
 3125              		.file 63 "/usr/local/include/python3.8/ceval.h"
 3126              		.file 64 "/usr/local/include/python3.8/import.h"
 3127              		.file 65 "/usr/local/include/python3.8/bltinmodule.h"
 3128              		.file 66 "/usr/local/include/python3.8/pyctype.h"
 3129              		.file 67 "armwave.h"
 3130              		.file 68 "/usr/include/stdlib.h"
 3131              		.file 69 "/usr/local/include/python3.8/cpython/abstract.h"
 3132              		.file 70 "<built-in>"
 3133              		.file 71 "/usr/include/assert.h"
 3134              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
