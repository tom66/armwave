   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t *test_wave_buffer; //[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.47,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.47,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.47,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.47
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.47, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     **** 
  81:armwave.c     ****     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 40
 239              		.cfi_offset 3, -40
 240              		.cfi_offset 4, -36
 241              		.cfi_offset 5, -32
 242              		.cfi_offset 6, -28
 243              		.cfi_offset 7, -24
 244              		.cfi_offset 8, -20
 245              		.cfi_offset 9, -16
 246              		.cfi_offset 10, -12
 247              		.cfi_offset 11, -8
 248              		.cfi_offset 14, -4
 249              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 250              		.loc 1 74 1 view .LVU32
 251 00a0 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 252              	@ armwave.c:81:     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 253              		.loc 1 81 5 view .LVU33
 254 00a4 F4509FE5 		ldr	r5, .L25	@ tmp247,
 255              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 256              		.loc 1 74 1 view .LVU34
 257 00a8 0190A0E1 		mov	r9, r1	@ height, height
 258              	@ armwave.c:81:     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 259              		.loc 1 81 5 view .LVU35
 260 00ac F0009FE5 		ldr	r0, .L25+4	@,
 261              	.LVL7:
 262              		.loc 1 81 5 view .LVU36
 263 00b0 041095E5 		ldr	r1, [r5, #4]	@, g_armwave_state.ch1_buffer
 264              	.LVL8:
 265              		.loc 1 81 5 view .LVU37
 266 00b4 FEFFFFEB 		bl	printf		@
 267              	.LVL9:
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 268              		.loc 1 82 5 is_stmt 1 view .LVU38
 269              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  83:armwave.c     **** 
  84:armwave.c     ****     // roll through each waveform
  85:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 270              		.loc 1 85 5 is_stmt 0 view .LVU39
 271 00b8 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 272              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 273              		.loc 1 82 63 view .LVU40
 274 00bc 2C6095E5 		ldr	r6, [r5, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 275              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 276              		.loc 1 85 5 view .LVU41
 277 00c0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 278              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 279              		.loc 1 82 40 view .LVU42
 280 00c4 044095E5 		ldr	r4, [r5, #4]	@ _2, g_armwave_state.ch1_buffer
 281              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 282              		.loc 1 82 63 view .LVU43
 283 00c8 960706E0 		mul	r6, r6, r7	@ _4, g_armwave_state.bitdepth_height, slice_y
 284              	.LVL10:
 285              		.loc 1 85 5 is_stmt 1 view .LVU44
 286              		.loc 1 85 5 is_stmt 0 view .LVU45
 287 00cc F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 288              	@ armwave.c:86:         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  86:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 289              		.loc 1 86 9 view .LVU46
 290 00d0 D0809FE5 		ldr	r8, .L25+8	@ tmp249,
 291 00d4 047047E2 		sub	r7, r7, #4	@ _36, slice_y,
 292              	.LVL11:
 293              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 294              		.loc 1 85 11 view .LVU47
 295 00d8 00A0A0E3 		mov	r10, #0	@ w,
 296              	.LVL12:
 297              	.L15:
 298              		.loc 1 86 9 is_stmt 1 view .LVU48
 299 00dc 141095E5 		ldr	r1, [r5, #20]	@, g_armwave_state.wave_buffer
 300 00e0 0800A0E1 		mov	r0, r8	@, tmp249
 301 00e4 FEFFFFEB 		bl	printf		@
 302              	.LVL13:
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 87 9 view .LVU49
 304              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 305              		.loc 1 87 64 is_stmt 0 view .LVU50
 306 00e8 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 307              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  88:armwave.c     **** 
  89:armwave.c     ****         // roll through y and render the slice into the out buffer
  90:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  91:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 308              		.loc 1 91 9 view .LVU51
 309 00ec 000059E3 		cmp	r9, #0	@ height,
 310              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 311              		.loc 1 87 36 view .LVU52
 312 00f0 14C095E5 		ldr	ip, [r5, #20]	@ _6, g_armwave_state.wave_buffer
 313              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 314              		.loc 1 87 64 view .LVU53
 315 00f4 930A03E0 		mul	r3, r3, r10	@ _9, g_armwave_state.wave_stride, w
 316              	.LVL14:
 317              		.loc 1 91 9 is_stmt 1 view .LVU54
 318              		.loc 1 91 9 is_stmt 0 view .LVU55
 319 00f8 2300000A 		beq	.L13		@,
 320 00fc 073083E0 		add	r3, r3, r7	@ tmp199, _9, _36
 321              	.LVL15:
 322              		.loc 1 91 9 view .LVU56
 323 0100 03C08CE0 		add	ip, ip, r3	@ ivtmp.54, _6, tmp199
 324              	.LVL16:
 325              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
 326              		.loc 1 91 16 view .LVU57
 327 0104 0030A0E3 		mov	r3, #0	@ yy,
 328              	.LVL17:
 329              	.L14:
  92:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 330              		.loc 1 92 13 is_stmt 1 view .LVU58
 331              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
 332              		.loc 1 92 18 is_stmt 0 view .LVU59
 333 0108 0420BCE5 		ldr	r2, [ip, #4]!	@ word, MEM[base: _149, offset: 0B]
 334              	.LVL18:
  93:armwave.c     **** 
  94:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 335              		.loc 1 94 13 is_stmt 1 view .LVU60
  95:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  96:armwave.c     ****                 scale_value = (word & 0xff);
 336              		.loc 1 96 17 view .LVU61
  97:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 337              		.loc 1 97 17 view .LVU62
  98:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 338              		.loc 1 98 17 view .LVU63
 339              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 340              		.loc 1 97 63 is_stmt 0 view .LVU64
 341 010c 2C0095E5 		ldr	r0, [r5, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 342 0110 01B083E2 		add	fp, r3, #1	@ tmp211, yy,
 343              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
 344              		.loc 1 98 47 view .LVU65
 345 0114 7210E6E6 		uxtab	r1, r6, r2	@ tmp204, _4, word
 346 0118 901320E0 		mla	r0, r0, r3, r1	@ tmp205, g_armwave_state.bitdepth_height, yy, tmp204
 347              	@ armwave.c:99:                 word >>= 8;
  99:armwave.c     ****                 word >>= 8;
 348              		.loc 1 99 22 view .LVU66
 349 011c 22E4A0E1 		lsr	lr, r2, #8	@ word, word,
 350              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 98 47 view .LVU67
 352 0120 0010D4E7 		ldrb	r1, [r4, r0]	@ zero_extendqisi2	@ *_59, *_59
 353 0124 7EE0E6E6 		uxtab	lr, r6, lr	@ tmp216, _4, word
 354 0128 011081E2 		add	r1, r1, #1	@ tmp208, *_59,
 355 012c 0010C4E7 		strb	r1, [r4, r0]	@ tmp208, *_59
 356              	.LVL19:
 357              		.loc 1 99 17 is_stmt 1 view .LVU68
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 358              		.loc 1 96 17 view .LVU69
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 97 17 view .LVU70
  98:armwave.c     ****                 word >>= 8;
 360              		.loc 1 98 17 view .LVU71
 361              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 362              		.loc 1 97 63 is_stmt 0 view .LVU72
 363 0130 2C1095E5 		ldr	r1, [r5, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 364              	@ armwave.c:99:                 word >>= 8;
 365              		.loc 1 99 22 view .LVU73
 366 0134 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 367              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 368              		.loc 1 98 47 view .LVU74
 369 0138 222C86E0 		add	r2, r6, r2, lsr #24	@ tmp239, _4, word,
 370              	.LVL20:
  98:armwave.c     ****                 word >>= 8;
 371              		.loc 1 98 47 view .LVU75
 372 013c 91EB21E0 		mla	r1, r1, fp, lr	@ tmp217, g_armwave_state.bitdepth_height, tmp211, tmp216
 373 0140 70E0E6E6 		uxtab	lr, r6, r0	@ tmp228, _4, word
 374 0144 01B0D4E7 		ldrb	fp, [r4, r1]	@ zero_extendqisi2	@ *_79, *_79
 375              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 376              		.loc 1 97 63 view .LVU76
 377 0148 020083E2 		add	r0, r3, #2	@ tmp223, yy,
 378              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 379              		.loc 1 98 47 view .LVU77
 380 014c 01B08BE2 		add	fp, fp, #1	@ tmp220, *_79,
 381 0150 01B0C4E7 		strb	fp, [r4, r1]	@ tmp220, *_79
 382              	.LVL21:
 383              		.loc 1 99 17 is_stmt 1 view .LVU78
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 384              		.loc 1 96 17 view .LVU79
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 385              		.loc 1 97 17 view .LVU80
  98:armwave.c     ****                 word >>= 8;
 386              		.loc 1 98 17 view .LVU81
 387              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 388              		.loc 1 97 63 is_stmt 0 view .LVU82
 389 0154 2CB095E5 		ldr	fp, [r5, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 390 0158 031083E2 		add	r1, r3, #3	@ tmp235, yy,
 391              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 392              		.loc 1 91 37 view .LVU83
 393 015c 043083E2 		add	r3, r3, #4	@ yy, yy,
 394              	.LVL22:
 395              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 396              		.loc 1 98 47 view .LVU84
 397 0160 9BE020E0 		mla	r0, fp, r0, lr	@ tmp229, g_armwave_state.bitdepth_height, tmp223, tmp228
 398              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 399              		.loc 1 91 9 view .LVU85
 400 0164 030059E1 		cmp	r9, r3	@ height, yy
 401              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 402              		.loc 1 98 47 view .LVU86
 403 0168 00E0D4E7 		ldrb	lr, [r4, r0]	@ zero_extendqisi2	@ *_99, *_99
 404 016c 01E08EE2 		add	lr, lr, #1	@ tmp232, *_99,
 405 0170 00E0C4E7 		strb	lr, [r4, r0]	@ tmp232, *_99
 406              	.LVL23:
 407              		.loc 1 99 17 is_stmt 1 view .LVU87
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 408              		.loc 1 96 17 view .LVU88
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 409              		.loc 1 97 17 view .LVU89
  98:armwave.c     ****                 word >>= 8;
 410              		.loc 1 98 17 view .LVU90
 411              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 97 63 is_stmt 0 view .LVU91
 413 0174 2C0095E5 		ldr	r0, [r5, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 414              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 415              		.loc 1 98 47 view .LVU92
 416 0178 902122E0 		mla	r2, r0, r1, r2	@ tmp240, g_armwave_state.bitdepth_height, tmp235, tmp239
 417 017c 0210D4E7 		ldrb	r1, [r4, r2]	@ zero_extendqisi2	@ *_119, *_119
 418 0180 011081E2 		add	r1, r1, #1	@ tmp243, *_119,
 419 0184 0210C4E7 		strb	r1, [r4, r2]	@ tmp243, *_119
 420              		.loc 1 99 17 is_stmt 1 view .LVU93
 421              	.LVL24:
 422              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 423              		.loc 1 91 9 is_stmt 0 view .LVU94
 424 0188 DEFFFF8A 		bhi	.L14		@,
 425              	.LVL25:
 426              	.L13:
 427              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 428              		.loc 1 85 5 view .LVU95
 429 018c 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 430              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 431              		.loc 1 85 44 view .LVU96
 432 0190 01A08AE2 		add	r10, r10, #1	@ w, w,
 433              	.LVL26:
 434              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 435              		.loc 1 85 5 view .LVU97
 436 0194 0A0053E1 		cmp	r3, r10	@ g_armwave_state.waves, w
 437 0198 CFFFFF8A 		bhi	.L15		@,
 438 019c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 439              	.L26:
 440              		.align	2
 441              	.L25:
 442 01a0 00000000 		.word	g_armwave_state
 443 01a4 20000000 		.word	.LC2
 444 01a8 34000000 		.word	.LC3
 445              		.cfi_endproc
 446              	.LFE59:
 448              		.align	2
 449              		.global	armwave_fill_pixbuf_256
 450              		.syntax unified
 451              		.arm
 452              		.fpu vfp
 454              	armwave_fill_pixbuf_256:
 455              	.LVL27:
 456              	.LFB60:
 100:armwave.c     ****             }
 101:armwave.c     ****         }
 102:armwave.c     ****     }
 103:armwave.c     **** }
 104:armwave.c     **** 
 105:armwave.c     **** /*
 106:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 107:armwave.c     ****  */
 108:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 109:armwave.c     **** {
 457              		.loc 1 109 1 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 110:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 461              		.loc 1 110 5 view .LVU99
 111:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 462              		.loc 1 111 5 view .LVU100
 112:armwave.c     ****     uint8_t r, g, b, value;
 463              		.loc 1 112 5 view .LVU101
 113:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 464              		.loc 1 113 5 view .LVU102
 465              	@ armwave.c:109: {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 466              		.loc 1 109 1 is_stmt 0 view .LVU103
 467 01ac F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 468              		.cfi_def_cfa_offset 36
 469              		.cfi_offset 4, -36
 470              		.cfi_offset 5, -32
 471              		.cfi_offset 6, -28
 472              		.cfi_offset 7, -24
 473              		.cfi_offset 8, -20
 474              		.cfi_offset 9, -16
 475              		.cfi_offset 10, -12
 476              		.cfi_offset 11, -8
 477              		.cfi_offset 14, -4
 478              	@ armwave.c:117:     assert(out_buffer != NULL);
 114:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 115:armwave.c     ****     uint32_t offset;
 116:armwave.c     **** 
 117:armwave.c     ****     assert(out_buffer != NULL);
 479              		.loc 1 117 5 view .LVU104
 480 01b0 000050E3 		cmp	r0, #0	@ out_buffer
 481              	@ armwave.c:113:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 482              		.loc 1 113 15 view .LVU105
 483 01b4 44529FE5 		ldr	r5, .L54	@ tmp360,
 484              	@ armwave.c:109: {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 485              		.loc 1 109 1 view .LVU106
 486 01b8 0CD04DE2 		sub	sp, sp, #12	@,,
 487              		.cfi_def_cfa_offset 48
 488              	@ armwave.c:113:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 489              		.loc 1 113 15 view .LVU107
 490 01bc 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 491              	.LVL28:
 114:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 492              		.loc 1 114 5 is_stmt 1 view .LVU108
 115:armwave.c     **** 
 493              		.loc 1 115 5 view .LVU109
 494              		.loc 1 117 5 view .LVU110
 495 01c0 8900000A 		beq	.L52		@,
 118:armwave.c     **** 
 119:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 120:armwave.c     **** 
 121:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 496              		.loc 1 121 5 view .LVU111
 497              	@ armwave.c:121:     npix = g_armwave_state.target_width * 256;
 498              		.loc 1 121 41 is_stmt 0 view .LVU112
 499 01c4 44C095E5 		ldr	ip, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 500 01c8 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 501              	.LVL29:
 122:armwave.c     **** 
 123:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 502              		.loc 1 123 5 is_stmt 1 view .LVU113
 503              		.loc 1 123 5 is_stmt 0 view .LVU114
 504 01cc 00005CE3 		cmp	ip, #0	@ npix,
 505 01d0 0A0000DA 		ble	.L27		@,
 506              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 124:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 125:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 126:armwave.c     ****         // most normal waveforms.
 127:armwave.c     ****         wave_word = *base_32ptr++;
 128:armwave.c     **** 
 129:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 130:armwave.c     ****             for(i = 0; i < 4; i++) {
 131:armwave.c     ****                 value = wave_word & 0xff;
 132:armwave.c     ****                 wave_word >>= 8;
 133:armwave.c     **** 
 134:armwave.c     ****                 if(value != 0) {
 135:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 507              		.loc 1 135 52 view .LVU115
 508 01d4 F8A5D5E1 		ldrsh	r10, [r5, #88]	@ _70, g_armwave_state.ch1_color.r
 509              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 510              		.loc 1 136 52 view .LVU116
 511 01d8 FA95D5E1 		ldrsh	r9, [r5, #90]	@ _76, g_armwave_state.ch1_color.g
 512              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 513              		.loc 1 137 52 view .LVU117
 514 01dc FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _80, g_armwave_state.ch1_color.b
 515              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 516              		.loc 1 123 11 view .LVU118
 517 01e0 0030A0E3 		mov	r3, #0	@ n,
 518 01e4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 519              	.LVL30:
 520              	.L36:
 127:armwave.c     **** 
 521              		.loc 1 127 9 is_stmt 1 view .LVU119
 522              	@ armwave.c:127:         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 523              		.loc 1 127 19 is_stmt 0 view .LVU120
 524 01e8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 525              	.LVL31:
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 526              		.loc 1 129 9 is_stmt 1 view .LVU121
 527              	@ armwave.c:129:         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 528              		.loc 1 129 11 is_stmt 0 view .LVU122
 529 01ec 000052E3 		cmp	r2, #0	@ wave_word,
 530 01f0 0400001A 		bne	.L53		@,
 531              	.LVL32:
 532              	.L31:
 533              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 534              		.loc 1 123 28 discriminator 2 view .LVU123
 535 01f4 043083E2 		add	r3, r3, #4	@ n, n,
 536              	.LVL33:
 537              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 538              		.loc 1 123 5 discriminator 2 view .LVU124
 539 01f8 03005CE1 		cmp	ip, r3	@ npix, n
 540 01fc F9FFFFCA 		bgt	.L36		@,
 541              	.LVL34:
 542              	.L27:
 543              	@ armwave.c:156: }
 138:armwave.c     **** 
 139:armwave.c     ****                     r = MIN(rr, 255);
 140:armwave.c     ****                     g = MIN(gg, 255);
 141:armwave.c     ****                     b = MIN(bb, 255);
 142:armwave.c     **** 
 143:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 144:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 145:armwave.c     **** 
 146:armwave.c     ****                     // Is there a better way?
 147:armwave.c     ****                     nsub = n + i;
 148:armwave.c     ****                     xx = nsub & 0xff;
 149:armwave.c     ****                     yy = nsub >> 8;
 150:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 151:armwave.c     ****                     *(out_buffer_base + offset) = word;
 152:armwave.c     ****                 }
 153:armwave.c     ****             }
 154:armwave.c     ****         } 
 155:armwave.c     ****     }
 156:armwave.c     **** }
 544              		.loc 1 156 1 view .LVU125
 545 0200 0CD08DE2 		add	sp, sp, #12	@,,
 546              		.cfi_remember_state
 547              		.cfi_def_cfa_offset 36
 548              		@ sp needed	@
 549 0204 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 550              	.LVL35:
 551              	.L53:
 552              		.cfi_restore_state
 131:armwave.c     ****                 wave_word >>= 8;
 553              		.loc 1 131 17 is_stmt 1 view .LVU126
 132:armwave.c     **** 
 554              		.loc 1 132 17 view .LVU127
 555              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 556              		.loc 1 134 19 is_stmt 0 view .LVU128
 557 0208 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 558              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 559              		.loc 1 132 27 view .LVU129
 560 020c 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 561              	.LVL36:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 562              		.loc 1 134 17 is_stmt 1 view .LVU130
 563              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 564              		.loc 1 134 19 is_stmt 0 view .LVU131
 565 0210 1900000A 		beq	.L32		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 135 21 is_stmt 1 view .LVU132
 567              	.LVL37:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 568              		.loc 1 136 21 view .LVU133
 137:armwave.c     **** 
 569              		.loc 1 137 21 view .LVU134
 139:armwave.c     ****                     g = MIN(gg, 255);
 570              		.loc 1 139 21 view .LVU135
 140:armwave.c     ****                     b = MIN(bb, 255);
 571              		.loc 1 140 21 view .LVU136
 141:armwave.c     **** 
 572              		.loc 1 141 21 view .LVU137
 144:armwave.c     **** 
 573              		.loc 1 144 21 view .LVU138
 147:armwave.c     ****                     xx = nsub & 0xff;
 574              		.loc 1 147 21 view .LVU139
 148:armwave.c     ****                     yy = nsub >> 8;
 575              		.loc 1 148 21 view .LVU140
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 576              		.loc 1 149 21 view .LVU141
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 577              		.loc 1 150 21 view .LVU142
 151:armwave.c     ****                 }
 578              		.loc 1 151 21 view .LVU143
 579              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 580              		.loc 1 137 55 is_stmt 0 view .LVU144
 581 0214 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 582              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 583              		.loc 1 136 55 view .LVU145
 584 0218 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 585              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 586              		.loc 1 137 24 view .LVU146
 587 021c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 588              	.LVL38:
 589              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 590              		.loc 1 141 25 view .LVU147
 591 0220 FF0054E3 		cmp	r4, #255	@ bb,
 592              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 593              		.loc 1 136 24 view .LVU148
 594 0224 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 595              	.LVL39:
 596              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 597              		.loc 1 141 25 view .LVU149
 598 0228 FF40A0A3 		movge	r4, #255	@ bb,
 599              	.LVL40:
 600              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 601              		.loc 1 135 55 view .LVU150
 602 022c 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 603              	.LVL41:
 604              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 605              		.loc 1 140 25 view .LVU151
 606 0230 FF0058E3 		cmp	r8, #255	@ gg,
 607 0234 FF80A0A3 		movge	r8, #255	@ gg,
 608              	.LVL42:
 609              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 610              		.loc 1 135 24 view .LVU152
 611 0238 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 612              	.LVL43:
 613              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 614              		.loc 1 144 56 view .LVU153
 615 023c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 616              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 617              		.loc 1 151 39 view .LVU154
 618 0240 440095E5 		ldr	r0, [r5, #68]	@ tmp372, g_armwave_state.target_width
 619              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 620              		.loc 1 144 44 view .LVU155
 621 0244 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 622              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 623              		.loc 1 139 25 view .LVU156
 624 0248 FF0056E3 		cmp	r6, #255	@ rr,
 625              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 626              		.loc 1 144 56 view .LVU157
 627 024c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 628              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 629              		.loc 1 148 24 view .LVU158
 630 0250 7370EFE6 		uxtb	r7, r3	@ xx, n
 631              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 632              		.loc 1 144 44 view .LVU159
 633 0254 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 634              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 635              		.loc 1 144 51 view .LVU160
 636 0258 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 637              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 139 25 view .LVU161
 639 025c FF60A0A3 		movge	r6, #255	@ rr,
 640              	.LVL44:
 641              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 642              		.loc 1 149 31 view .LVU162
 643 0260 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 644              	.LVL45:
 645              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 646              		.loc 1 151 39 view .LVU163
 647 0264 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 648              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 649              		.loc 1 144 62 view .LVU164
 650 0268 7660EFE6 		uxtb	r6, r6	@ rr, rr
 651              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 652              		.loc 1 151 49 view .LVU165
 653 026c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 654              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 655              		.loc 1 144 62 view .LVU166
 656 0270 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 657              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 658              		.loc 1 144 26 view .LVU167
 659 0274 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 660              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 661              		.loc 1 151 49 view .LVU168
 662 0278 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 663              	.LVL46:
 664              	.L32:
 131:armwave.c     ****                 wave_word >>= 8;
 665              		.loc 1 131 17 is_stmt 1 view .LVU169
 132:armwave.c     **** 
 666              		.loc 1 132 17 view .LVU170
 667              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 668              		.loc 1 134 19 is_stmt 0 view .LVU171
 669 027c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 670              	.LVL47:
 671              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 672              		.loc 1 132 27 view .LVU172
 673 0280 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 674              	.LVL48:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 134 17 is_stmt 1 view .LVU173
 676              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 134 19 is_stmt 0 view .LVU174
 678 0284 1C00000A 		beq	.L33		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 679              		.loc 1 135 21 is_stmt 1 view .LVU175
 680              	.LVL49:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 681              		.loc 1 136 21 view .LVU176
 137:armwave.c     **** 
 682              		.loc 1 137 21 view .LVU177
 139:armwave.c     ****                     g = MIN(gg, 255);
 683              		.loc 1 139 21 view .LVU178
 140:armwave.c     ****                     b = MIN(bb, 255);
 684              		.loc 1 140 21 view .LVU179
 141:armwave.c     **** 
 685              		.loc 1 141 21 view .LVU180
 144:armwave.c     **** 
 686              		.loc 1 144 21 view .LVU181
 147:armwave.c     ****                     xx = nsub & 0xff;
 687              		.loc 1 147 21 view .LVU182
 688              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 689              		.loc 1 137 55 is_stmt 0 view .LVU183
 690 0288 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 691              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 692              		.loc 1 136 55 view .LVU184
 693 028c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 694              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 695              		.loc 1 137 24 view .LVU185
 696 0290 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 697              	.LVL50:
 698              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 699              		.loc 1 141 25 view .LVU186
 700 0294 FF0054E3 		cmp	r4, #255	@ bb,
 701 0298 FF40A0A3 		movge	r4, #255	@ bb,
 702              	.LVL51:
 703              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 704              		.loc 1 135 55 view .LVU187
 705 029c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 706              	.LVL52:
 707              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 708              		.loc 1 136 24 view .LVU188
 709 02a0 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 710              	.LVL53:
 711              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 712              		.loc 1 144 44 view .LVU189
 713 02a4 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 714              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 715              		.loc 1 140 25 view .LVU190
 716 02a8 FF0057E3 		cmp	r7, #255	@ gg,
 717 02ac 016083E2 		add	r6, r3, #1	@ _158, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 718              		.loc 1 148 21 is_stmt 1 view .LVU191
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 719              		.loc 1 149 21 view .LVU192
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 720              		.loc 1 150 21 view .LVU193
 151:armwave.c     ****                 }
 721              		.loc 1 151 21 view .LVU194
 722              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 723              		.loc 1 144 44 is_stmt 0 view .LVU195
 724 02b0 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 725              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 726              		.loc 1 140 25 view .LVU196
 727 02b4 FF70A0A3 		movge	r7, #255	@ gg,
 728              	.LVL54:
 729              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 730              		.loc 1 144 44 view .LVU197
 731 02b8 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 732              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 733              		.loc 1 151 39 view .LVU198
 734 02bc 444095E5 		ldr	r4, [r5, #68]	@ tmp375, g_armwave_state.target_width
 735              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 736              		.loc 1 135 24 view .LVU199
 737 02c0 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 738              	.LVL55:
 739              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 740              		.loc 1 148 24 view .LVU200
 741 02c4 7600EFE6 		uxtb	r0, r6	@ xx, _158
 742              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 743              		.loc 1 139 25 view .LVU201
 744 02c8 FF005EE3 		cmp	lr, #255	@ rr,
 745              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 746              		.loc 1 144 56 view .LVU202
 747 02cc 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 748              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 749              		.loc 1 149 31 view .LVU203
 750 02d0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 751              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 752              		.loc 1 151 39 view .LVU204
 753 02d4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 754              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 755              		.loc 1 139 25 view .LVU205
 756 02d8 FFE0A0A3 		movge	lr, #255	@ rr,
 757              	.LVL56:
 758              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 759              		.loc 1 144 51 view .LVU206
 760 02dc 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 761              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 762              		.loc 1 144 56 view .LVU207
 763 02e0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 764              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 765              		.loc 1 144 51 view .LVU208
 766 02e4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 767              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 768              		.loc 1 144 62 view .LVU209
 769 02e8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 770              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 771              		.loc 1 151 49 view .LVU210
 772 02ec 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 773              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 774              		.loc 1 144 62 view .LVU211
 775 02f0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 776              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 777              		.loc 1 144 26 view .LVU212
 778 02f4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 779              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 780              		.loc 1 151 49 view .LVU213
 781 02f8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 782              	.LVL57:
 783              	.L33:
 131:armwave.c     ****                 wave_word >>= 8;
 784              		.loc 1 131 17 is_stmt 1 view .LVU214
 132:armwave.c     **** 
 785              		.loc 1 132 17 view .LVU215
 786              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 787              		.loc 1 134 19 is_stmt 0 view .LVU216
 788 02fc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 789              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 790              		.loc 1 132 27 view .LVU217
 791 0300 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 792              	.LVL58:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 793              		.loc 1 134 17 is_stmt 1 view .LVU218
 794              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 795              		.loc 1 134 19 is_stmt 0 view .LVU219
 796 0304 1A00000A 		beq	.L34		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 797              		.loc 1 135 21 is_stmt 1 view .LVU220
 798              	.LVL59:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 799              		.loc 1 136 21 view .LVU221
 137:armwave.c     **** 
 800              		.loc 1 137 21 view .LVU222
 139:armwave.c     ****                     g = MIN(gg, 255);
 801              		.loc 1 139 21 view .LVU223
 140:armwave.c     ****                     b = MIN(bb, 255);
 802              		.loc 1 140 21 view .LVU224
 141:armwave.c     **** 
 803              		.loc 1 141 21 view .LVU225
 144:armwave.c     **** 
 804              		.loc 1 144 21 view .LVU226
 147:armwave.c     ****                     xx = nsub & 0xff;
 805              		.loc 1 147 21 view .LVU227
 806              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 807              		.loc 1 137 55 is_stmt 0 view .LVU228
 808 0308 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 809              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 810              		.loc 1 136 55 view .LVU229
 811 030c 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 812              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 813              		.loc 1 137 24 view .LVU230
 814 0310 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 815              	.LVL60:
 816              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 817              		.loc 1 135 55 view .LVU231
 818 0314 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 819              	.LVL61:
 820              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 821              		.loc 1 141 25 view .LVU232
 822 0318 FF0054E3 		cmp	r4, #255	@ bb,
 823              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 824              		.loc 1 136 24 view .LVU233
 825 031c 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 826              	.LVL62:
 827              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 828              		.loc 1 141 25 view .LVU234
 829 0320 FF40A0A3 		movge	r4, #255	@ bb,
 830              	.LVL63:
 831              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 832              		.loc 1 140 25 view .LVU235
 833 0324 FF0056E3 		cmp	r6, #255	@ gg,
 834 0328 FF60A0A3 		movge	r6, #255	@ gg,
 835              	.LVL64:
 140:armwave.c     ****                     b = MIN(bb, 255);
 836              		.loc 1 140 25 view .LVU236
 837 032c 027083E2 		add	r7, r3, #2	@ _66, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 838              		.loc 1 148 21 is_stmt 1 view .LVU237
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 839              		.loc 1 149 21 view .LVU238
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 840              		.loc 1 150 21 view .LVU239
 151:armwave.c     ****                 }
 841              		.loc 1 151 21 view .LVU240
 842              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 843              		.loc 1 135 24 is_stmt 0 view .LVU241
 844 0330 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 845              	.LVL65:
 846              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 847              		.loc 1 151 39 view .LVU242
 848 0334 440095E5 		ldr	r0, [r5, #68]	@ tmp376, g_armwave_state.target_width
 849              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 850              		.loc 1 139 25 view .LVU243
 851 0338 FF005EE3 		cmp	lr, #255	@ rr,
 852              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 853              		.loc 1 148 24 view .LVU244
 854 033c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 855              	.LVL66:
 856              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 857              		.loc 1 144 56 view .LVU245
 858 0340 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 859              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 860              		.loc 1 144 44 view .LVU246
 861 0344 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 862              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 863              		.loc 1 139 25 view .LVU247
 864 0348 FFE0A0A3 		movge	lr, #255	@ rr,
 865              	.LVL67:
 866              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 867              		.loc 1 149 31 view .LVU248
 868 034c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 869              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 870              		.loc 1 151 39 view .LVU249
 871 0350 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 872              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 873              		.loc 1 144 44 view .LVU250
 874 0354 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 875              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 876              		.loc 1 144 56 view .LVU251
 877 0358 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 878              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 879              		.loc 1 144 51 view .LVU252
 880 035c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 881              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 882              		.loc 1 144 62 view .LVU253
 883 0360 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 884              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 885              		.loc 1 151 49 view .LVU254
 886 0364 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 887              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 888              		.loc 1 144 62 view .LVU255
 889 0368 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 890              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 891              		.loc 1 144 26 view .LVU256
 892 036c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 893              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 894              		.loc 1 151 49 view .LVU257
 895 0370 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 896              	.L34:
 897              	.LVL68:
 131:armwave.c     ****                 wave_word >>= 8;
 898              		.loc 1 131 17 is_stmt 1 view .LVU258
 132:armwave.c     **** 
 899              		.loc 1 132 17 view .LVU259
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 900              		.loc 1 134 17 view .LVU260
 901              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 902              		.loc 1 134 19 is_stmt 0 view .LVU261
 903 0374 000052E3 		cmp	r2, #0	@ wave_word,
 904 0378 9DFFFF0A 		beq	.L31		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 905              		.loc 1 135 21 is_stmt 1 view .LVU262
 906              	.LVL69:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 907              		.loc 1 136 21 view .LVU263
 137:armwave.c     **** 
 908              		.loc 1 137 21 view .LVU264
 139:armwave.c     ****                     g = MIN(gg, 255);
 909              		.loc 1 139 21 view .LVU265
 140:armwave.c     ****                     b = MIN(bb, 255);
 910              		.loc 1 140 21 view .LVU266
 141:armwave.c     **** 
 911              		.loc 1 141 21 view .LVU267
 144:armwave.c     **** 
 912              		.loc 1 144 21 view .LVU268
 147:armwave.c     ****                     xx = nsub & 0xff;
 913              		.loc 1 147 21 view .LVU269
 914              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 915              		.loc 1 137 55 is_stmt 0 view .LVU270
 916 037c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 917              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 918              		.loc 1 136 55 view .LVU271
 919 0380 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 920              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 921              		.loc 1 137 24 view .LVU272
 922 0384 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 923              	.LVL70:
 924              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 925              		.loc 1 135 55 view .LVU273
 926 0388 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 927              	.LVL71:
 928              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 929              		.loc 1 141 25 view .LVU274
 930 038c FF005EE3 		cmp	lr, #255	@ bb,
 931              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 932              		.loc 1 136 24 view .LVU275
 933 0390 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 934              	.LVL72:
 935              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 936              		.loc 1 141 25 view .LVU276
 937 0394 FFE0A0A3 		movge	lr, #255	@ bb,
 938              	.LVL73:
 939              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 940              		.loc 1 140 25 view .LVU277
 941 0398 FF0054E3 		cmp	r4, #255	@ gg,
 942 039c FF40A0A3 		movge	r4, #255	@ gg,
 943              	.LVL74:
 140:armwave.c     ****                     b = MIN(bb, 255);
 944              		.loc 1 140 25 view .LVU278
 945 03a0 036083E2 		add	r6, r3, #3	@ _59, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 946              		.loc 1 148 21 is_stmt 1 view .LVU279
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 947              		.loc 1 149 21 view .LVU280
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 948              		.loc 1 150 21 view .LVU281
 151:armwave.c     ****                 }
 949              		.loc 1 151 21 view .LVU282
 950              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 951              		.loc 1 135 24 is_stmt 0 view .LVU283
 952 03a4 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 953              	.LVL75:
 954              	@ armwave.c:150:                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 955              		.loc 1 150 39 view .LVU284
 956 03a8 447095E5 		ldr	r7, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 957              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 958              		.loc 1 139 25 view .LVU285
 959 03ac FF0052E3 		cmp	r2, #255	@ rr,
 960              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 961              		.loc 1 148 24 view .LVU286
 962 03b0 7680EFE6 		uxtb	r8, r6	@ xx, _59
 963              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 964              		.loc 1 144 56 view .LVU287
 965 03b4 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 966              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 967              		.loc 1 144 44 view .LVU288
 968 03b8 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 969              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 970              		.loc 1 139 25 view .LVU289
 971 03bc FF20A0A3 		movge	r2, #255	@ rr,
 972              	.LVL76:
 973              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 974              		.loc 1 149 31 view .LVU290
 975 03c0 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 976              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 977              		.loc 1 144 44 view .LVU291
 978 03c4 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 979              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 980              		.loc 1 144 56 view .LVU292
 981 03c8 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 982              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 983              		.loc 1 151 39 view .LVU293
 984 03cc 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 985              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 986              		.loc 1 144 51 view .LVU294
 987 03d0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 988              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 989              		.loc 1 144 62 view .LVU295
 990 03d4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 991              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 992              		.loc 1 151 49 view .LVU296
 993 03d8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 994              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 995              		.loc 1 144 62 view .LVU297
 996 03dc 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 997              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 998              		.loc 1 144 26 view .LVU298
 999 03e0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 1000              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 1001              		.loc 1 151 49 view .LVU299
 1002 03e4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 1003 03e8 81FFFFEA 		b	.L31		@
 1004              	.LVL77:
 1005              	.L52:
 117:armwave.c     **** 
 1006              		.loc 1 117 5 is_stmt 1 discriminator 1 view .LVU300
 1007 03ec 10309FE5 		ldr	r3, .L54+4	@,
 1008 03f0 7520A0E3 		mov	r2, #117	@,
 1009 03f4 0C109FE5 		ldr	r1, .L54+8	@,
 1010              	.LVL78:
 117:armwave.c     **** 
 1011              		.loc 1 117 5 is_stmt 0 discriminator 1 view .LVU301
 1012 03f8 0C009FE5 		ldr	r0, .L54+12	@,
 1013              	.LVL79:
 117:armwave.c     **** 
 1014              		.loc 1 117 5 discriminator 1 view .LVU302
 1015 03fc FEFFFFEB 		bl	__assert_fail		@
 1016              	.LVL80:
 1017              	.L55:
 117:armwave.c     **** 
 1018              		.loc 1 117 5 discriminator 1 view .LVU303
 1019              		.align	2
 1020              	.L54:
 1021 0400 00000000 		.word	g_armwave_state
 1022 0404 00000000 		.word	.LANCHOR0
 1023 0408 48000000 		.word	.LC4
 1024 040c 54000000 		.word	.LC5
 1025              		.cfi_endproc
 1026              	.LFE60:
 1028              		.align	2
 1029              		.global	armwave_fill_pixbuf_scaled
 1030              		.syntax unified
 1031              		.arm
 1032              		.fpu vfp
 1034              	armwave_fill_pixbuf_scaled:
 1035              	.LVL81:
 1036              	.LFB61:
 157:armwave.c     **** 
 158:armwave.c     **** /*
 159:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 160:armwave.c     ****  * Rows are repeated as necessary.
 161:armwave.c     ****  */
 162:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 163:armwave.c     **** {
 1037              		.loc 1 163 1 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 8
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 164:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1041              		.loc 1 164 5 view .LVU305
 165:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 1042              		.loc 1 165 5 view .LVU306
 166:armwave.c     ****     uint8_t r, g, b, value, row;
 1043              		.loc 1 166 5 view .LVU307
 167:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1044              		.loc 1 167 5 view .LVU308
 1045              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1046              		.loc 1 163 1 is_stmt 0 view .LVU309
 1047 0410 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1048              		.cfi_def_cfa_offset 36
 1049              		.cfi_offset 4, -36
 1050              		.cfi_offset 5, -32
 1051              		.cfi_offset 6, -28
 1052              		.cfi_offset 7, -24
 1053              		.cfi_offset 8, -20
 1054              		.cfi_offset 9, -16
 1055              		.cfi_offset 10, -12
 1056              		.cfi_offset 11, -8
 1057              		.cfi_offset 14, -4
 1058              	@ armwave.c:171:     assert(out_buffer != NULL);
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 169:armwave.c     ****     uint32_t offset;
 170:armwave.c     **** 
 171:armwave.c     ****     assert(out_buffer != NULL);
 1059              		.loc 1 171 5 view .LVU310
 1060 0414 000050E3 		cmp	r0, #0	@ out_buffer
 1061              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1062              		.loc 1 167 15 view .LVU311
 1063 0418 34519FE5 		ldr	r5, .L81	@ tmp202,
 1064              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1065              		.loc 1 163 1 view .LVU312
 1066 041c 0CD04DE2 		sub	sp, sp, #12	@,,
 1067              		.cfi_def_cfa_offset 48
 1068              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1069              		.loc 1 167 15 view .LVU313
 1070 0420 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1071              	.LVL82:
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1072              		.loc 1 168 5 is_stmt 1 view .LVU314
 169:armwave.c     **** 
 1073              		.loc 1 169 5 view .LVU315
 1074              		.loc 1 171 5 view .LVU316
 1075 0424 4500000A 		beq	.L78		@,
 172:armwave.c     **** 
 173:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1076              		.loc 1 173 5 view .LVU317
 1077              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 1078              		.loc 1 173 41 is_stmt 0 view .LVU318
 1079 0428 448095E5 		ldr	r8, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1080 042c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1081              	.LVL83:
 174:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1082              		.loc 1 174 5 is_stmt 1 view .LVU319
 175:armwave.c     **** 
 176:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1083              		.loc 1 176 5 view .LVU320
 1084              		.loc 1 176 5 is_stmt 0 view .LVU321
 1085 0430 000058E3 		cmp	r8, #0	@ npix,
 1086 0434 0B0000DA 		ble	.L56		@,
 1087              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 177:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 178:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 179:armwave.c     ****         // most normal waveforms.
 180:armwave.c     ****         wave_word = *base_32ptr++;
 181:armwave.c     **** 
 182:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 183:armwave.c     ****             for(w = 0; w < 4; w++) {
 184:armwave.c     ****                 value = wave_word & 0xff;
 185:armwave.c     ****                 wave_word >>= 8;
 186:armwave.c     **** 
 187:armwave.c     ****                 if(value != 0) {
 188:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 189:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1088              		.loc 1 189 52 view .LVU322
 1089 0438 FA35D5E1 		ldrsh	r3, [r5, #90]	@ _11, g_armwave_state.ch1_color.g
 1090              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1091              		.loc 1 188 52 view .LVU323
 1092 043c F8B5D5E1 		ldrsh	fp, [r5, #88]	@ _7, g_armwave_state.ch1_color.r
 1093              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1094              		.loc 1 176 11 view .LVU324
 1095 0440 00E0A0E3 		mov	lr, #0	@ n,
 1096              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1097              		.loc 1 189 52 view .LVU325
 1098 0444 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1099              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1100              		.loc 1 190 52 view .LVU326
 1101 0448 FC35D5E1 		ldrsh	r3, [r5, #92]	@ _14, g_armwave_state.ch1_color.b
 1102 044c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1103              	.LVL84:
 1104              	.L63:
 180:armwave.c     **** 
 1105              		.loc 1 180 9 is_stmt 1 view .LVU327
 1106              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 1107              		.loc 1 180 19 is_stmt 0 view .LVU328
 1108 0450 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1109              	.LVL85:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 1110              		.loc 1 182 9 is_stmt 1 view .LVU329
 1111              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 1112              		.loc 1 182 11 is_stmt 0 view .LVU330
 1113 0454 00005CE3 		cmp	ip, #0	@ wave_word,
 1114 0458 0400001A 		bne	.L79		@,
 1115              	.L59:
 1116              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1117              		.loc 1 176 28 view .LVU331
 1118 045c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1119              	.LVL86:
 1120              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1121              		.loc 1 176 5 view .LVU332
 1122 0460 0E0058E1 		cmp	r8, lr	@ npix, n
 1123 0464 F9FFFFCA 		bgt	.L63		@,
 1124              	.LVL87:
 1125              	.L56:
 1126              	@ armwave.c:212: }
 191:armwave.c     **** 
 192:armwave.c     ****                     r = MIN(rr, 255);
 193:armwave.c     ****                     g = MIN(gg, 255);
 194:armwave.c     ****                     b = MIN(bb, 255);
 195:armwave.c     **** 
 196:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 197:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 198:armwave.c     **** 
 199:armwave.c     ****                     // Do line scaling as necessary.
 200:armwave.c     ****                     nsub = n + w;
 201:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 202:armwave.c     ****                     xx = (nsub >> 8);
 203:armwave.c     **** 
 204:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 205:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 206:armwave.c     ****                         *(out_buffer_base + offset) = word;
 207:armwave.c     ****                     }
 208:armwave.c     ****                 }
 209:armwave.c     ****             }
 210:armwave.c     ****         }
 211:armwave.c     ****     }
 212:armwave.c     **** }
 1127              		.loc 1 212 1 view .LVU333
 1128 0468 0CD08DE2 		add	sp, sp, #12	@,,
 1129              		.cfi_remember_state
 1130              		.cfi_def_cfa_offset 36
 1131              		@ sp needed	@
 1132 046c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1133              	.LVL88:
 1134              	.L79:
 1135              		.cfi_restore_state
 1136              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1137              		.loc 1 187 19 view .LVU334
 1138 0470 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1139              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1140              		.loc 1 183 19 view .LVU335
 1141 0474 0090A0E3 		mov	r9, #0	@ w,
 1142              	.LVL89:
 184:armwave.c     ****                 wave_word >>= 8;
 1143              		.loc 1 184 17 is_stmt 1 view .LVU336
 185:armwave.c     **** 
 1144              		.loc 1 185 17 view .LVU337
 1145              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 1146              		.loc 1 185 27 is_stmt 0 view .LVU338
 1147 0478 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1148              	.LVL90:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1149              		.loc 1 187 17 is_stmt 1 view .LVU339
 1150              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1151              		.loc 1 187 19 is_stmt 0 view .LVU340
 1152 047c 0500001A 		bne	.L80		@,
 1153              	.L60:
 1154              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1155              		.loc 1 183 32 view .LVU341
 1156 0480 019089E2 		add	r9, r9, #1	@ w, w,
 1157              	.LVL91:
 1158              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1159              		.loc 1 183 13 view .LVU342
 1160 0484 040059E3 		cmp	r9, #4	@ w,
 1161 0488 F3FFFF0A 		beq	.L59		@,
 184:armwave.c     ****                 wave_word >>= 8;
 1162              		.loc 1 184 17 is_stmt 1 view .LVU343
 1163              	.LVL92:
 185:armwave.c     **** 
 1164              		.loc 1 185 17 view .LVU344
 1165              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1166              		.loc 1 187 19 is_stmt 0 view .LVU345
 1167 048c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1168              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 1169              		.loc 1 185 27 view .LVU346
 1170 0490 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1171              	.LVL93:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1172              		.loc 1 187 17 is_stmt 1 view .LVU347
 1173              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1174              		.loc 1 187 19 is_stmt 0 view .LVU348
 1175 0494 F9FFFF0A 		beq	.L60		@,
 1176              	.L80:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1177              		.loc 1 188 21 is_stmt 1 view .LVU349
 1178              	.LVL94:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1179              		.loc 1 189 21 view .LVU350
 190:armwave.c     **** 
 1180              		.loc 1 190 21 view .LVU351
 192:armwave.c     ****                     g = MIN(gg, 255);
 1181              		.loc 1 192 21 view .LVU352
 193:armwave.c     ****                     b = MIN(bb, 255);
 1182              		.loc 1 193 21 view .LVU353
 194:armwave.c     **** 
 1183              		.loc 1 194 21 view .LVU354
 197:armwave.c     **** 
 1184              		.loc 1 197 21 view .LVU355
 1185              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1186              		.loc 1 190 55 is_stmt 0 view .LVU356
 1187 0498 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1188              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1189              		.loc 1 189 55 view .LVU357
 1190 049c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1191 04a0 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1192              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1193              		.loc 1 190 55 view .LVU358
 1194 04a4 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1195              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1196              		.loc 1 189 55 view .LVU359
 1197 04a8 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1198              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1199              		.loc 1 190 24 view .LVU360
 1200 04ac 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1201              	.LVL95:
 1202              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1203              		.loc 1 188 55 view .LVU361
 1204 04b0 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1205              	.LVL96:
 1206              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1207              		.loc 1 189 24 view .LVU362
 1208 04b4 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1209              	.LVL97:
 1210              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 1211              		.loc 1 194 25 view .LVU363
 1212 04b8 FF0052E3 		cmp	r2, #255	@ bb,
 1213 04bc FF20A0A3 		movge	r2, #255	@ bb,
 1214              	.LVL98:
 1215              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 1216              		.loc 1 193 25 view .LVU364
 1217 04c0 FF0051E3 		cmp	r1, #255	@ gg,
 1218 04c4 FF10A0A3 		movge	r1, #255	@ gg,
 1219              	.LVL99:
 1220              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1221              		.loc 1 188 24 view .LVU365
 1222 04c8 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1223              	.LVL100:
 1224              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 1225              		.loc 1 192 25 view .LVU366
 1226 04cc FF0053E3 		cmp	r3, #255	@ rr,
 1227              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1228              		.loc 1 197 56 view .LVU367
 1229 04d0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1230              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 1231              		.loc 1 192 25 view .LVU368
 1232 04d4 FF30A0A3 		movge	r3, #255	@ rr,
 1233              	.LVL101:
 1234              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1235              		.loc 1 197 44 view .LVU369
 1236 04d8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1237              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1238              		.loc 1 197 56 view .LVU370
 1239 04dc 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1240              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1241              		.loc 1 201 57 view .LVU371
 1242 04e0 1CA095E5 		ldr	r10, [r5, #28]	@ _28, g_armwave_state.vscale
 1243              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1244              		.loc 1 197 44 view .LVU372
 1245 04e4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1246              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1247              		.loc 1 197 51 view .LVU373
 1248 04e8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1249              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1250              		.loc 1 197 62 view .LVU374
 1251 04ec 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1252              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1253              		.loc 1 201 32 view .LVU375
 1254 04f0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1255              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1256              		.loc 1 197 62 view .LVU376
 1257 04f4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1258              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1259              		.loc 1 204 21 view .LVU377
 1260 04f8 00005AE3 		cmp	r10, #0	@ _28,
 1261              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1262              		.loc 1 197 26 view .LVU378
 1263 04fc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1264              	.LVL102:
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1265              		.loc 1 200 21 is_stmt 1 view .LVU379
 201:armwave.c     ****                     xx = (nsub >> 8);
 1266              		.loc 1 201 21 view .LVU380
 1267              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 1268              		.loc 1 202 32 is_stmt 0 view .LVU381
 1269 0500 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1270              	.LVL103:
 1271              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1272              		.loc 1 201 24 view .LVU382
 1273 0504 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1274              	.LVL104:
 202:armwave.c     **** 
 1275              		.loc 1 202 21 is_stmt 1 view .LVU383
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 204 21 view .LVU384
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1277              		.loc 1 204 21 is_stmt 0 view .LVU385
 1278 0508 DCFFFF0A 		beq	.L60		@,
 1279              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1280              		.loc 1 204 29 view .LVU386
 1281 050c 0030A0E3 		mov	r3, #0	@ row,
 1282              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1283              		.loc 1 204 38 view .LVU387
 1284 0510 0320A0E1 		mov	r2, r3	@ _35, row
 1285              	.LVL105:
 1286              	.L61:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1287              		.loc 1 205 25 is_stmt 1 discriminator 3 view .LVU388
 206:armwave.c     ****                     }
 1288              		.loc 1 206 25 discriminator 3 view .LVU389
 1289              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1290              		.loc 1 205 52 is_stmt 0 discriminator 3 view .LVU390
 1291 0514 441095E5 		ldr	r1, [r5, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1292              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1293              		.loc 1 205 45 discriminator 3 view .LVU391
 1294 0518 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1295              	.LVL106:
 1296              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1297              		.loc 1 204 67 discriminator 3 view .LVU392
 1298 051c 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1299              	.LVL107:
 1300              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 1301              		.loc 1 206 43 discriminator 3 view .LVU393
 1302 0520 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1303              	.LVL108:
 1304              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1305              		.loc 1 204 67 discriminator 3 view .LVU394
 1306 0524 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1307              	.LVL109:
 1308              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1309              		.loc 1 204 38 discriminator 3 view .LVU395
 1310 0528 0320A0E1 		mov	r2, r3	@ _35, row
 1311              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 1312              		.loc 1 206 53 discriminator 3 view .LVU396
 1313 052c 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1314              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1315              		.loc 1 204 21 discriminator 3 view .LVU397
 1316 0530 1C1095E5 		ldr	r1, [r5, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1317              	.LVL110:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1318              		.loc 1 204 21 discriminator 3 view .LVU398
 1319 0534 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1320 0538 F5FFFF3A 		bcc	.L61		@,
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1321              		.loc 1 204 21 discriminator 3 view .LVU399
 1322 053c CFFFFFEA 		b	.L60		@
 1323              	.LVL111:
 1324              	.L78:
 171:armwave.c     **** 
 1325              		.loc 1 171 5 is_stmt 1 discriminator 1 view .LVU400
 1326 0540 10309FE5 		ldr	r3, .L81+4	@,
 1327 0544 AB20A0E3 		mov	r2, #171	@,
 1328 0548 0C109FE5 		ldr	r1, .L81+8	@,
 1329 054c 0C009FE5 		ldr	r0, .L81+12	@,
 1330              	.LVL112:
 171:armwave.c     **** 
 1331              		.loc 1 171 5 is_stmt 0 discriminator 1 view .LVU401
 1332 0550 FEFFFFEB 		bl	__assert_fail		@
 1333              	.LVL113:
 1334              	.L82:
 1335              		.align	2
 1336              	.L81:
 1337 0554 00000000 		.word	g_armwave_state
 1338 0558 18000000 		.word	.LANCHOR0+24
 1339 055c 48000000 		.word	.LC4
 1340 0560 54000000 		.word	.LC5
 1341              		.cfi_endproc
 1342              	.LFE61:
 1344              		.align	2
 1345              		.global	armwave_setup_render
 1346              		.syntax unified
 1347              		.arm
 1348              		.fpu vfp
 1350              	armwave_setup_render:
 1351              	.LVL114:
 1352              	.LFB62:
 213:armwave.c     **** 
 214:armwave.c     **** /*
 215:armwave.c     ****  * Setup the renderer with passed parameters.
 216:armwave.c     ****  */
 217:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 218:armwave.c     **** {
 1353              		.loc 1 218 1 is_stmt 1 view -0
 1354              		.cfi_startproc
 1355              		@ args = 12, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 219:armwave.c     ****     uint32_t length, xx;
 1357              		.loc 1 219 5 view .LVU403
 220:armwave.c     ****     float points_per_pixel;
 1358              		.loc 1 220 5 view .LVU404
 221:armwave.c     **** 
 222:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1359              		.loc 1 222 5 view .LVU405
 1360              	@ armwave.c:218: {
 218:armwave.c     ****     uint32_t length, xx;
 1361              		.loc 1 218 1 is_stmt 0 view .LVU406
 1362 0564 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1363              		.cfi_def_cfa_offset 32
 1364              		.cfi_offset 4, -32
 1365              		.cfi_offset 5, -28
 1366              		.cfi_offset 6, -24
 1367              		.cfi_offset 7, -20
 1368              		.cfi_offset 8, -16
 1369              		.cfi_offset 9, -12
 1370              		.cfi_offset 10, -8
 1371              		.cfi_offset 14, -4
 1372 0568 028B2DED 		vpush.64	{d8}	@
 1373              		.cfi_def_cfa_offset 40
 1374              		.cfi_offset 80, -40
 1375              		.cfi_offset 81, -36
 1376 056c 0080A0E1 		mov	r8, r0	@ start_point, start_point
 1377 0570 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1378 0574 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 1379 0578 10D04DE2 		sub	sp, sp, #16	@,,
 1380              		.cfi_def_cfa_offset 56
 1381              	@ armwave.c:218: {
 218:armwave.c     ****     uint32_t length, xx;
 1382              		.loc 1 218 1 view .LVU407
 1383 057c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1384 0580 38709DE5 		ldr	r7, [sp, #56]	@ target_width, target_width
 1385 0584 3C609DE5 		ldr	r6, [sp, #60]	@ target_height, target_height
 1386 0588 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1387              	@ armwave.c:222:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1388              		.loc 1 222 5 view .LVU408
 1389 058c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1390 0590 04708DE5 		str	r7, [sp, #4]	@ target_width,
 1391 0594 0230A0E1 		mov	r3, r2	@, waves_max
 1392              	.LVL115:
 1393              		.loc 1 222 5 view .LVU409
 1394 0598 08608DE5 		str	r6, [sp, #8]	@ target_height,
 1395 059c 0120A0E1 		mov	r2, r1	@, end_point
 1396              	.LVL116:
 1397              		.loc 1 222 5 view .LVU410
 1398 05a0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1399 05a4 0010A0E1 		mov	r1, r0	@, start_point
 1400              	.LVL117:
 1401              		.loc 1 222 5 view .LVU411
 1402 05a8 CC019FE5 		ldr	r0, .L106+4	@,
 1403              	.LVL118:
 1404              		.loc 1 222 5 view .LVU412
 1405 05ac FEFFFFEB 		bl	printf		@
 1406              	.LVL119:
 223:armwave.c     **** 
 224:armwave.c     ****     // TODO these asserts should instead raise PyExc
 225:armwave.c     ****     assert(start_point < end_point);
 1407              		.loc 1 225 5 is_stmt 1 view .LVU413
 1408 05b0 050058E1 		cmp	r8, r5	@ start_point, end_point
 1409 05b4 6A00002A 		bcs	.L101		@,
 226:armwave.c     **** 
 227:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 228:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1410              		.loc 1 228 5 view .LVU414
 1411 05b8 013C46E2 		sub	r3, r6, #256	@ tmp155, target_height,
 1412 05bc 013CD3E3 		bics	r3, r3, #256	@ tmp234, tmp155,
 1413 05c0 4C00000A 		beq	.L85		@,
 1414              	@ armwave.c:228:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1415              		.loc 1 228 5 is_stmt 0 discriminator 1 view .LVU415
 1416 05c4 013B46E2 		sub	r3, r6, #1024	@ tmp157, target_height,
 1417 05c8 013BD3E3 		bics	r3, r3, #1024	@ tmp235, tmp157,
 1418 05cc 5500001A 		bne	.L102		@,
 229:armwave.c     **** 
 230:armwave.c     ****     if(target_height == 256) {
 231:armwave.c     ****         g_armwave_state.row_shift = 8;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 233:armwave.c     ****     } else if(target_height == 512) {
 1419              		.loc 1 233 12 is_stmt 1 view .LVU416
 234:armwave.c     ****         g_armwave_state.row_shift = 9;
 235:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 236:armwave.c     ****     } else if(target_height == 1024) {
 1420              		.loc 1 236 12 view .LVU417
 1421              	@ armwave.c:236:     } else if(target_height == 1024) {
 1422              		.loc 1 236 14 is_stmt 0 view .LVU418
 1423 05d0 010B56E3 		cmp	r6, #1024	@ target_height,
 1424              	@ armwave.c:237:         g_armwave_state.row_shift = 10;
 237:armwave.c     ****         g_armwave_state.row_shift = 10;
 1425              		.loc 1 237 35 view .LVU419
 1426 05d4 A4419FE5 		ldr	r4, .L106+8	@ tmp232,
 1427              	@ armwave.c:236:     } else if(target_height == 1024) {
 236:armwave.c     ****         g_armwave_state.row_shift = 10;
 1428              		.loc 1 236 14 view .LVU420
 1429 05d8 4E00000A 		beq	.L103		@,
 238:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 239:armwave.c     ****     } else if(target_height == 2048) {
 1430              		.loc 1 239 12 is_stmt 1 view .LVU421
 1431              	@ armwave.c:239:     } else if(target_height == 2048) {
 1432              		.loc 1 239 14 is_stmt 0 view .LVU422
 1433 05dc 020B56E3 		cmp	r6, #2048	@ target_height,
 240:armwave.c     ****         g_armwave_state.row_shift = 11;
 1434              		.loc 1 240 9 is_stmt 1 view .LVU423
 1435              	@ armwave.c:240:         g_armwave_state.row_shift = 11;
 1436              		.loc 1 240 35 is_stmt 0 view .LVU424
 1437 05e0 0B20A003 		moveq	r2, #11	@ tmp176,
 1438              	@ armwave.c:241:         g_armwave_state.row_mask = 0x7ff;
 241:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1439              		.loc 1 241 34 view .LVU425
 1440 05e4 98319F05 		ldreq	r3, .L106+12	@ tmp178,
 1441 05e8 FC24C401 		strdeq	r2, [r4, #76]	@, tmp232,
 1442              	.L88:
 242:armwave.c     ****     } 
 243:armwave.c     **** 
 244:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 245:armwave.c     ****     g_armwave_state.xstride = target_height;
 1443              		.loc 1 245 5 is_stmt 1 view .LVU426
 1444              	@ armwave.c:250:     g_armwave_state.size = target_height * target_width;
 246:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 247:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 248:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 249:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 250:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1445              		.loc 1 250 42 is_stmt 0 view .LVU427
 1446 05ec 960700E0 		mul	r0, r6, r7	@ tmp186, target_height, target_width
 1447              	@ armwave.c:252:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 252:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1448              		.loc 1 252 68 view .LVU428
 1449 05f0 0734A0E1 		lsl	r3, r7, #8	@ _9, target_width,
 1450              	@ armwave.c:246:     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1451              		.loc 1 246 44 view .LVU429
 1452 05f4 2624A0E1 		lsr	r2, r6, #8	@ tmp181, target_height,
 1453              	@ armwave.c:257:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 254:armwave.c     ****     g_armwave_state.target_height = target_height;
 255:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 256:armwave.c     **** 
 257:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1454              		.loc 1 257 5 view .LVU430
 1455 05f8 0310A0E1 		mov	r1, r3	@, _9
 1456              	@ armwave.c:250:     g_armwave_state.size = target_height * target_width;
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1457              		.loc 1 250 26 view .LVU431
 1458 05fc 400084E5 		str	r0, [r4, #64]	@ tmp186, g_armwave_state.size
 1459              	@ armwave.c:251:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1460              		.loc 1 251 37 view .LVU432
 1461 0600 01CCA0E3 		mov	ip, #256	@ tmp188,
 1462              	@ armwave.c:246:     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1463              		.loc 1 246 28 view .LVU433
 1464 0604 1C2084E5 		str	r2, [r4, #28]	@ tmp181, g_armwave_state.vscale
 1465              	@ armwave.c:257:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1466              		.loc 1 257 5 view .LVU434
 1467 0608 78019FE5 		ldr	r0, .L106+16	@,
 1468              	@ armwave.c:255:     g_armwave_state.wave_length = start_point - end_point;
 255:armwave.c     **** 
 1469              		.loc 1 255 47 view .LVU435
 1470 060c 052048E0 		sub	r2, r8, r5	@ tmp193, start_point, end_point
 1471              	@ armwave.c:252:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 1472              		.loc 1 252 34 view .LVU436
 1473 0610 3C3084E5 		str	r3, [r4, #60]	@ _9, g_armwave_state.ch_buff_size
 1474              	@ armwave.c:245:     g_armwave_state.xstride = target_height;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1475              		.loc 1 245 29 view .LVU437
 1476 0614 186084E5 		str	r6, [r4, #24]	@ target_height, g_armwave_state.xstride
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1477              		.loc 1 246 5 is_stmt 1 view .LVU438
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1478              		.loc 1 247 5 view .LVU439
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1479              		.loc 1 248 5 view .LVU440
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1480              		.loc 1 249 5 view .LVU441
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1481              		.loc 1 250 5 view .LVU442
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1482              		.loc 1 251 5 view .LVU443
 1483              	@ armwave.c:247:     g_armwave_state.wave_stride = wave_stride;
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1484              		.loc 1 247 33 is_stmt 0 view .LVU444
 1485 0618 20A084E5 		str	r10, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1486              	@ armwave.c:248:     g_armwave_state.waves_max = waves_max;
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1487              		.loc 1 248 31 view .LVU445
 1488 061c 289084E5 		str	r9, [r4, #40]	@ waves_max, g_armwave_state.waves_max
 1489              	@ armwave.c:249:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1490              		.loc 1 249 27 view .LVU446
 1491 0620 249084E5 		str	r9, [r4, #36]	@ waves_max, g_armwave_state.waves
 1492              	@ armwave.c:253:     g_armwave_state.target_width = target_width;
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 1493              		.loc 1 253 34 view .LVU447
 1494 0624 447084E5 		str	r7, [r4, #68]	@ target_width, g_armwave_state.target_width
 1495              	@ armwave.c:254:     g_armwave_state.target_height = target_height;
 254:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 1496              		.loc 1 254 35 view .LVU448
 1497 0628 486084E5 		str	r6, [r4, #72]	@ target_height, g_armwave_state.target_height
 1498              	@ armwave.c:251:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1499              		.loc 1 251 37 view .LVU449
 1500 062c 2CC084E5 		str	ip, [r4, #44]	@ tmp188, g_armwave_state.bitdepth_height
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 1501              		.loc 1 252 5 is_stmt 1 view .LVU450
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 1502              		.loc 1 253 5 view .LVU451
 254:armwave.c     ****     g_armwave_state.wave_length = start_point - end_point;
 1503              		.loc 1 254 5 view .LVU452
 255:armwave.c     **** 
 1504              		.loc 1 255 5 view .LVU453
 1505              	@ armwave.c:255:     g_armwave_state.wave_length = start_point - end_point;
 255:armwave.c     **** 
 1506              		.loc 1 255 33 is_stmt 0 view .LVU454
 1507 0630 382084E5 		str	r2, [r4, #56]	@ tmp193, g_armwave_state.wave_length
 1508              		.loc 1 257 5 is_stmt 1 view .LVU455
 1509 0634 FEFFFFEB 		bl	printf		@
 1510              	.LVL120:
 258:armwave.c     **** 
 259:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 260:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 261:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 262:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1511              		.loc 1 262 5 view .LVU456
 1512              	@ armwave.c:264:     if(g_armwave_state.ch1_buffer != NULL)
 263:armwave.c     **** 
 264:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1513              		.loc 1 264 23 is_stmt 0 view .LVU457
 1514 0638 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1515              	@ armwave.c:262:     g_armwave_state.slice_height = 64;  
 262:armwave.c     **** 
 1516              		.loc 1 262 34 view .LVU458
 1517 063c 4030A0E3 		mov	r3, #64	@ tmp196,
 1518              	@ armwave.c:264:     if(g_armwave_state.ch1_buffer != NULL)
 1519              		.loc 1 264 7 view .LVU459
 1520 0640 000050E3 		cmp	r0, #0	@ _11,
 1521              	@ armwave.c:262:     g_armwave_state.slice_height = 64;  
 262:armwave.c     **** 
 1522              		.loc 1 262 34 view .LVU460
 1523 0644 303084E5 		str	r3, [r4, #48]	@ tmp196, g_armwave_state.slice_height
 1524              		.loc 1 264 5 is_stmt 1 view .LVU461
 1525              	@ armwave.c:264:     if(g_armwave_state.ch1_buffer != NULL)
 1526              		.loc 1 264 7 is_stmt 0 view .LVU462
 1527 0648 0000000A 		beq	.L90		@,
 265:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1528              		.loc 1 265 9 is_stmt 1 view .LVU463
 1529 064c FEFFFFEB 		bl	free		@
 1530              	.LVL121:
 1531              	.L90:
 266:armwave.c     **** 
 267:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1532              		.loc 1 267 5 view .LVU464
 1533              	@ armwave.c:267:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1534              		.loc 1 267 34 is_stmt 0 view .LVU465
 1535 0650 0110A0E3 		mov	r1, #1	@,
 1536 0654 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.ch_buff_size
 1537 0658 FEFFFFEB 		bl	calloc		@
 1538              	.LVL122:
 1539              	@ armwave.c:269:     assert(g_armwave_state.ch1_buffer != NULL);
 268:armwave.c     **** 
 269:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1540              		.loc 1 269 5 view .LVU466
 1541 065c 000050E3 		cmp	r0, #0	@ tmp200,
 1542              	@ armwave.c:267:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 267:armwave.c     **** 
 1543              		.loc 1 267 32 view .LVU467
 1544 0660 040084E5 		str	r0, [r4, #4]	@ tmp200, g_armwave_state.ch1_buffer
 1545              		.loc 1 269 5 is_stmt 1 view .LVU468
 1546 0664 3400000A 		beq	.L104		@,
 270:armwave.c     **** 
 271:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 272:armwave.c     ****     length = end_point - start_point;
 1547              		.loc 1 272 5 view .LVU469
 1548              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1549              		.loc 1 273 34 is_stmt 0 view .LVU470
 1550 0668 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1551              	@ armwave.c:272:     length = end_point - start_point;
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1552              		.loc 1 272 12 view .LVU471
 1553 066c 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1554              	.LVL123:
 1555              		.loc 1 273 5 is_stmt 1 view .LVU472
 1556              	@ armwave.c:275:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 275:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1557              		.loc 1 275 40 is_stmt 0 view .LVU473
 1558 0670 8500A0E1 		lsl	r0, r5, #1	@, length,
 1559              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1560              		.loc 1 273 34 view .LVU474
 1561 0674 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp208, target_width
 1562              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1563              		.loc 1 273 31 view .LVU475
 1564 0678 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1565 067c 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp207, length
 1566              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1567              		.loc 1 274 60 view .LVU476
 1568 0680 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp238, g_armwave_state.slice_height
 1569 0684 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp211, tmp238
 1570              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1571              		.loc 1 273 22 view .LVU477
 1572 0688 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp207, tmp208
 1573              	.LVL124:
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1574              		.loc 1 274 5 is_stmt 1 view .LVU478
 1575              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1576              		.loc 1 274 60 is_stmt 0 view .LVU479
 1577 068c 887A67EE 		vmul.f32	s15, s15, s16	@ tmp213, tmp211, points_per_pixel
 1578              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1579              		.loc 1 274 41 view .LVU480
 1580 0690 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp213
 1581 0694 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp214, g_armwave_state.slice_record_height
 1582              		.loc 1 275 5 is_stmt 1 view .LVU481
 1583              	@ armwave.c:275:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1584              		.loc 1 275 40 is_stmt 0 view .LVU482
 1585 0698 FEFFFFEB 		bl	malloc		@
 1586              	.LVL125:
 1587              	@ armwave.c:277:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 276:armwave.c     **** 
 277:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1588              		.loc 1 277 5 view .LVU483
 1589 069c 000050E3 		cmp	r0, #0	@ tmp216,
 1590              	@ armwave.c:275:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 275:armwave.c     **** 
 1591              		.loc 1 275 38 view .LVU484
 1592 06a0 700084E5 		str	r0, [r4, #112]	@ tmp216, g_armwave_state.xcoord_to_xpixel
 1593              		.loc 1 277 5 is_stmt 1 view .LVU485
 1594 06a4 2900000A 		beq	.L105		@,
 1595              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 278:armwave.c     **** 
 279:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 280:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1596              		.loc 1 280 54 is_stmt 0 view .LVU486
 1597 06a8 327ADFED 		vldr.32	s15, .L106	@ tmp223,
 1598 06ac 020040E2 		sub	r0, r0, #2	@ ivtmp.90, tmp216,
 1599              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1600              		.loc 1 279 12 view .LVU487
 1601 06b0 0030A0E3 		mov	r3, #0	@ xx,
 1602              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1603              		.loc 1 280 54 view .LVU488
 1604 06b4 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp223, points_per_pixel
 1605              	.L93:
 1606              	.LVL126:
 1607              		.loc 1 280 9 is_stmt 1 discriminator 3 view .LVU489
 1608              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1609              		.loc 1 280 74 is_stmt 0 discriminator 3 view .LVU490
 1610 06b8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1611              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1612              		.loc 1 279 32 discriminator 3 view .LVU491
 1613 06bc 013083E2 		add	r3, r3, #1	@ xx, xx,
 1614              	.LVL127:
 1615              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1616              		.loc 1 279 5 discriminator 3 view .LVU492
 1617 06c0 030055E1 		cmp	r5, r3	@ length, xx
 1618              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1619              		.loc 1 280 74 discriminator 3 view .LVU493
 1620 06c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp224, xx
 1621 06c8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp225, tmp224, _22
 1622              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1623              		.loc 1 280 46 discriminator 3 view .LVU494
 1624 06cc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp226, tmp225
 1625 06d0 902A17EE 		vmov	r2, s15	@ int	@ tmp226, tmp226
 1626 06d4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp226, MEM[base: _81, offset: 0B]
 1627              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1628              		.loc 1 279 5 discriminator 3 view .LVU495
 1629 06d8 F6FFFF1A 		bne	.L93		@,
 281:armwave.c     **** 
 282:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 283:armwave.c     ****     }
 284:armwave.c     **** 
 285:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1630              		.loc 1 285 5 is_stmt 1 view .LVU496
 1631              	@ armwave.c:285:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1632              		.loc 1 285 34 is_stmt 0 view .LVU497
 1633 06dc 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.size, g_armwave_state.size
 1634 06e0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1635 06e4 FEFFFFEB 		bl	malloc		@
 1636              	.LVL128:
 1637              	@ armwave.c:285:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1638              		.loc 1 285 32 view .LVU498
 1639 06e8 540084E5 		str	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 1640              	@ armwave.c:286: }
 286:armwave.c     **** }
 1641              		.loc 1 286 1 view .LVU499
 1642 06ec 10D08DE2 		add	sp, sp, #16	@,,
 1643              		.cfi_remember_state
 1644              		.cfi_def_cfa_offset 40
 1645              		@ sp needed	@
 1646 06f0 028BBDEC 		vldm	sp!, {d8}	@
 1647              		.cfi_restore 80
 1648              		.cfi_restore 81
 1649              		.cfi_def_cfa_offset 32
 1650              	.LVL129:
 1651              		.loc 1 286 1 view .LVU500
 1652 06f4 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1653              	.LVL130:
 1654              	.L85:
 1655              		.cfi_restore_state
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 1656              		.loc 1 230 5 is_stmt 1 view .LVU501
 1657              	@ armwave.c:230:     if(target_height == 256) {
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 1658              		.loc 1 230 7 is_stmt 0 view .LVU502
 1659 06f8 010C56E3 		cmp	r6, #256	@ target_height,
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1660              		.loc 1 231 9 is_stmt 1 view .LVU503
 1661              	@ armwave.c:231:         g_armwave_state.row_shift = 8;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1662              		.loc 1 231 35 is_stmt 0 view .LVU504
 1663 06fc 7C409FE5 		ldr	r4, .L106+8	@ tmp232,
 1664              	@ armwave.c:235:         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1665              		.loc 1 235 34 view .LVU505
 1666 0700 84309F15 		ldrne	r3, .L106+20	@ tmp170,
 1667              	@ armwave.c:232:         g_armwave_state.row_mask = 0x0ff;
 232:armwave.c     ****     } else if(target_height == 512) {
 1668              		.loc 1 232 34 view .LVU506
 1669 0704 0820A003 		moveq	r2, #8	@ tmp164,
 1670 0708 FF30A003 		moveq	r3, #255	@ tmp166,
 233:armwave.c     ****         g_armwave_state.row_shift = 9;
 1671              		.loc 1 233 12 is_stmt 1 view .LVU507
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1672              		.loc 1 234 9 view .LVU508
 1673              	@ armwave.c:234:         g_armwave_state.row_shift = 9;
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1674              		.loc 1 234 35 is_stmt 0 view .LVU509
 1675 070c 0920A013 		movne	r2, #9	@ tmp168,
 1676              	@ armwave.c:235:         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1677              		.loc 1 235 34 view .LVU510
 1678 0710 FC24C4E1 		strd	r2, [r4, #76]	@, tmp232,
 1679 0714 B4FFFFEA 		b	.L88		@
 1680              	.L103:
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1681              		.loc 1 237 9 is_stmt 1 view .LVU511
 1682              	@ armwave.c:238:         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1683              		.loc 1 238 34 is_stmt 0 view .LVU512
 1684 0718 70309FE5 		ldr	r3, .L106+24	@ tmp174,
 1685              	@ armwave.c:237:         g_armwave_state.row_shift = 10;
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1686              		.loc 1 237 35 view .LVU513
 1687 071c 0A20A0E3 		mov	r2, #10	@ tmp172,
 1688              	@ armwave.c:238:         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1689              		.loc 1 238 34 view .LVU514
 1690 0720 FC24C4E1 		strd	r2, [r4, #76]	@, tmp232,
 1691 0724 B0FFFFEA 		b	.L88		@
 1692              	.L102:
 228:armwave.c     **** 
 1693              		.loc 1 228 5 is_stmt 1 discriminator 2 view .LVU515
 1694 0728 64309FE5 		ldr	r3, .L106+28	@,
 1695 072c E420A0E3 		mov	r2, #228	@,
 1696 0730 60109FE5 		ldr	r1, .L106+32	@,
 1697 0734 60009FE5 		ldr	r0, .L106+36	@,
 1698 0738 FEFFFFEB 		bl	__assert_fail		@
 1699              	.LVL131:
 1700              	.L104:
 269:armwave.c     **** 
 1701              		.loc 1 269 5 discriminator 1 view .LVU516
 1702 073c 50309FE5 		ldr	r3, .L106+28	@,
 1703 0740 58209FE5 		ldr	r2, .L106+40	@,
 1704 0744 4C109FE5 		ldr	r1, .L106+32	@,
 1705 0748 54009FE5 		ldr	r0, .L106+44	@,
 1706 074c FEFFFFEB 		bl	__assert_fail		@
 1707              	.LVL132:
 1708              	.L105:
 277:armwave.c     **** 
 1709              		.loc 1 277 5 discriminator 1 view .LVU517
 1710 0750 3C309FE5 		ldr	r3, .L106+28	@,
 1711 0754 4C209FE5 		ldr	r2, .L106+48	@,
 1712 0758 38109FE5 		ldr	r1, .L106+32	@,
 1713 075c 48009FE5 		ldr	r0, .L106+52	@,
 1714 0760 FEFFFFEB 		bl	__assert_fail		@
 1715              	.LVL133:
 1716              	.L101:
 225:armwave.c     **** 
 1717              		.loc 1 225 5 discriminator 1 view .LVU518
 1718 0764 28309FE5 		ldr	r3, .L106+28	@,
 1719 0768 E120A0E3 		mov	r2, #225	@,
 1720 076c 24109FE5 		ldr	r1, .L106+32	@,
 1721 0770 38009FE5 		ldr	r0, .L106+56	@,
 1722 0774 FEFFFFEB 		bl	__assert_fail		@
 1723              	.LVL134:
 1724              	.L107:
 1725              		.align	2
 1726              	.L106:
 1727 0778 0000803F 		.word	1065353216
 1728 077c 68000000 		.word	.LC6
 1729 0780 00000000 		.word	g_armwave_state
 1730 0784 FF070000 		.word	2047
 1731 0788 0C010000 		.word	.LC9
 1732 078c FF010000 		.word	511
 1733 0790 FF030000 		.word	1023
 1734 0794 34000000 		.word	.LANCHOR0+52
 1735 0798 48000000 		.word	.LC4
 1736 079c AC000000 		.word	.LC8
 1737 07a0 0D010000 		.word	269
 1738 07a4 20010000 		.word	.LC10
 1739 07a8 15010000 		.word	277
 1740 07ac 44010000 		.word	.LC11
 1741 07b0 94000000 		.word	.LC7
 1742              		.cfi_endproc
 1743              	.LFE62:
 1745              		.align	2
 1746              		.global	armwave_set_wave_pointer
 1747              		.syntax unified
 1748              		.arm
 1749              		.fpu vfp
 1751              	armwave_set_wave_pointer:
 1752              	.LVL135:
 1753              	.LFB63:
 287:armwave.c     **** 
 288:armwave.c     **** /*
 289:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 290:armwave.c     ****  * in the future.
 291:armwave.c     ****  */
 292:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 293:armwave.c     **** {
 1754              		.loc 1 293 1 view -0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1758              		.loc 1 294 5 view .LVU520
 1759 07b4 000050E3 		cmp	r0, #0	@ wave_buffer
 1760              		.loc 1 294 5 is_stmt 0 view .LVU521
 1761 07b8 0200000A 		beq	.L113		@,
 295:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1762              		.loc 1 295 5 is_stmt 1 view .LVU522
 1763              	@ armwave.c:295:     g_armwave_state.wave_buffer = wave_buffer;
 1764              		.loc 1 295 33 is_stmt 0 view .LVU523
 1765 07bc 1C309FE5 		ldr	r3, .L114	@ tmp116,
 1766 07c0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1767 07c4 1EFF2FE1 		bx	lr	@
 1768              	.L113:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1769              		.loc 1 294 5 is_stmt 1 discriminator 1 view .LVU524
 1770              	@ armwave.c:293: {
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1771              		.loc 1 293 1 is_stmt 0 discriminator 1 view .LVU525
 1772 07c8 10402DE9 		push	{r4, lr}	@
 1773              		.cfi_def_cfa_offset 8
 1774              		.cfi_offset 4, -8
 1775              		.cfi_offset 14, -4
 1776              	@ armwave.c:294:     assert(wave_buffer != NULL);
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1777              		.loc 1 294 5 discriminator 1 view .LVU526
 1778 07cc 10309FE5 		ldr	r3, .L114+4	@,
 1779 07d0 10209FE5 		ldr	r2, .L114+8	@,
 1780 07d4 10109FE5 		ldr	r1, .L114+12	@,
 1781 07d8 10009FE5 		ldr	r0, .L114+16	@,
 1782              	.LVL136:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1783              		.loc 1 294 5 discriminator 1 view .LVU527
 1784 07dc FEFFFFEB 		bl	__assert_fail		@
 1785              	.LVL137:
 1786              	.L115:
 1787              		.align	2
 1788              	.L114:
 1789 07e0 00000000 		.word	g_armwave_state
 1790 07e4 4C000000 		.word	.LANCHOR0+76
 1791 07e8 26010000 		.word	294
 1792 07ec 48000000 		.word	.LC4
 1793 07f0 70010000 		.word	.LC12
 1794              		.cfi_endproc
 1795              	.LFE63:
 1797              		.align	2
 1798              		.global	armwave_set_wave_pointer_as_testbuf
 1799              		.syntax unified
 1800              		.arm
 1801              		.fpu vfp
 1803              	armwave_set_wave_pointer_as_testbuf:
 1804              	.LFB64:
 296:armwave.c     **** }
 297:armwave.c     **** 
 298:armwave.c     **** /*
 299:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 300:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 301:armwave.c     ****  */
 302:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 303:armwave.c     **** {
 1805              		.loc 1 303 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
 304:armwave.c     ****     g_armwave_state.wave_buffer = test_wave_buffer;
 1810              		.loc 1 304 5 view .LVU529
 1811              	@ armwave.c:304:     g_armwave_state.wave_buffer = test_wave_buffer;
 1812              		.loc 1 304 33 is_stmt 0 view .LVU530
 1813 07f4 0C209FE5 		ldr	r2, .L117	@ tmp112,
 1814 07f8 0C309FE5 		ldr	r3, .L117+4	@ tmp111,
 1815 07fc 002092E5 		ldr	r2, [r2]	@ test_wave_buffer, test_wave_buffer
 1816 0800 142083E5 		str	r2, [r3, #20]	@ test_wave_buffer, g_armwave_state.wave_buffer
 1817              	@ armwave.c:305: }
 305:armwave.c     **** }
 1818              		.loc 1 305 1 view .LVU531
 1819 0804 1EFF2FE1 		bx	lr	@
 1820              	.L118:
 1821              		.align	2
 1822              	.L117:
 1823 0808 00000000 		.word	test_wave_buffer
 1824 080c 00000000 		.word	g_armwave_state
 1825              		.cfi_endproc
 1826              	.LFE64:
 1828              		.align	2
 1829              		.global	armwave_set_wave_pointer_u32
 1830              		.syntax unified
 1831              		.arm
 1832              		.fpu vfp
 1834              	armwave_set_wave_pointer_u32:
 1835              	.LVL138:
 1836              	.LFB65:
 306:armwave.c     **** 
 307:armwave.c     **** /*
 308:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 309:armwave.c     ****  * disjointed buffers in the future.
 310:armwave.c     ****  */
 311:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 312:armwave.c     **** {
 1837              		.loc 1 312 1 is_stmt 1 view -0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1841              		.loc 1 313 5 view .LVU533
 1842 0810 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1843              		.loc 1 313 5 is_stmt 0 view .LVU534
 1844 0814 0200000A 		beq	.L124		@,
 314:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1845              		.loc 1 314 5 is_stmt 1 view .LVU535
 1846              	@ armwave.c:314:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1847              		.loc 1 314 33 is_stmt 0 view .LVU536
 1848 0818 1C309FE5 		ldr	r3, .L125	@ tmp117,
 1849 081c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1850 0820 1EFF2FE1 		bx	lr	@
 1851              	.L124:
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1852              		.loc 1 313 5 is_stmt 1 discriminator 1 view .LVU537
 1853              	@ armwave.c:312: {
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1854              		.loc 1 312 1 is_stmt 0 discriminator 1 view .LVU538
 1855 0824 10402DE9 		push	{r4, lr}	@
 1856              		.cfi_def_cfa_offset 8
 1857              		.cfi_offset 4, -8
 1858              		.cfi_offset 14, -4
 1859              	@ armwave.c:313:     assert(wave_buffer_ptr != 0);
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1860              		.loc 1 313 5 discriminator 1 view .LVU539
 1861 0828 10309FE5 		ldr	r3, .L125+4	@,
 1862 082c 10209FE5 		ldr	r2, .L125+8	@,
 1863 0830 10109FE5 		ldr	r1, .L125+12	@,
 1864 0834 10009FE5 		ldr	r0, .L125+16	@,
 1865              	.LVL139:
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1866              		.loc 1 313 5 discriminator 1 view .LVU540
 1867 0838 FEFFFFEB 		bl	__assert_fail		@
 1868              	.LVL140:
 1869              	.L126:
 1870              		.align	2
 1871              	.L125:
 1872 083c 00000000 		.word	g_armwave_state
 1873 0840 68000000 		.word	.LANCHOR0+104
 1874 0844 39010000 		.word	313
 1875 0848 48000000 		.word	.LC4
 1876 084c 84010000 		.word	.LC13
 1877              		.cfi_endproc
 1878              	.LFE65:
 1880              		.align	2
 1881              		.global	armwave_clear_buffer
 1882              		.syntax unified
 1883              		.arm
 1884              		.fpu vfp
 1886              	armwave_clear_buffer:
 1887              	.LVL141:
 1888              	.LFB66:
 315:armwave.c     **** }
 316:armwave.c     **** 
 317:armwave.c     **** /*
 318:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 319:armwave.c     ****  */
 320:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 321:armwave.c     **** {
 1889              		.loc 1 321 1 is_stmt 1 view -0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 322:armwave.c     ****     // Flags ignored, only one buffer cleared
 323:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1894              		.loc 1 323 5 view .LVU542
 1895 0850 0C309FE5 		ldr	r3, .L128	@ tmp113,
 1896 0854 0010A0E3 		mov	r1, #0	@,
 1897 0858 3C2093E5 		ldr	r2, [r3, #60]	@, g_armwave_state.ch_buff_size
 1898 085c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1899              	.LVL142:
 1900              		.loc 1 323 5 is_stmt 0 view .LVU543
 1901 0860 FEFFFFEA 		b	memset		@
 1902              	.LVL143:
 1903              	.L129:
 1904              		.align	2
 1905              	.L128:
 1906 0864 00000000 		.word	g_armwave_state
 1907              		.cfi_endproc
 1908              	.LFE66:
 1910              		.align	2
 1911              		.global	armwave_set_channel_colour
 1912              		.syntax unified
 1913              		.arm
 1914              		.fpu vfp
 1916              	armwave_set_channel_colour:
 1917              	.LVL144:
 1918              	.LFB67:
 324:armwave.c     **** }
 325:armwave.c     **** 
 326:armwave.c     **** /*
 327:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 328:armwave.c     ****  */
 329:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 330:armwave.c     **** {
 1919              		.loc 1 330 1 is_stmt 1 view -0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 331:armwave.c     ****     // Only 1ch supported for now
 332:armwave.c     ****     switch(ch) {
 1924              		.loc 1 332 5 view .LVU545
 1925 0868 010050E3 		cmp	r0, #1	@ ch,
 333:armwave.c     ****         case 1:
 334:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1926              		.loc 1 334 13 view .LVU546
 1927              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 1928              		.loc 1 334 41 is_stmt 0 view .LVU547
 1929 086c 0C009F05 		ldreq	r0, .L132	@ tmp117,
 1930              	.LVL145:
 1931              		.loc 1 334 41 view .LVU548
 1932 0870 B815C001 		strheq	r1, [r0, #88]	@ movhi	@ r, g_armwave_state.ch1_color.r
 335:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1933              		.loc 1 335 13 is_stmt 1 view .LVU549
 1934              	@ armwave.c:335:             g_armwave_state.ch1_color.g = g;
 1935              		.loc 1 335 41 is_stmt 0 view .LVU550
 1936 0874 BA25C001 		strheq	r2, [r0, #90]	@ movhi	@ g, g_armwave_state.ch1_color.g
 336:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1937              		.loc 1 336 13 is_stmt 1 view .LVU551
 1938              	@ armwave.c:336:             g_armwave_state.ch1_color.b = b;
 1939              		.loc 1 336 41 is_stmt 0 view .LVU552
 1940 0878 BC35C001 		strheq	r3, [r0, #92]	@ movhi	@ b, g_armwave_state.ch1_color.b
 337:armwave.c     ****             break;
 1941              		.loc 1 337 13 is_stmt 1 view .LVU553
 1942              	@ armwave.c:339: }
 338:armwave.c     ****     }
 339:armwave.c     **** }
 1943              		.loc 1 339 1 is_stmt 0 view .LVU554
 1944 087c 1EFF2FE1 		bx	lr	@
 1945              	.L133:
 1946              		.align	2
 1947              	.L132:
 1948 0880 00000000 		.word	g_armwave_state
 1949              		.cfi_endproc
 1950              	.LFE67:
 1952              		.align	2
 1953              		.global	armwave_dump_ppm_debug
 1954              		.syntax unified
 1955              		.arm
 1956              		.fpu vfp
 1958              	armwave_dump_ppm_debug:
 1959              	.LVL146:
 1960              	.LFB68:
 340:armwave.c     **** 
 341:armwave.c     **** /*
 342:armwave.c     ****  * Dump a ppm of a buffer to a file.
 343:armwave.c     ****  */
 344:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 345:armwave.c     **** {
 1961              		.loc 1 345 1 is_stmt 1 view -0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 346:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1965              		.loc 1 346 5 view .LVU556
 1966              	@ armwave.c:345: {
 345:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1967              		.loc 1 345 1 is_stmt 0 view .LVU557
 1968 0884 0130A0E1 		mov	r3, r1	@ fn, fn
 1969 0888 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1970              		.cfi_def_cfa_offset 28
 1971              		.cfi_offset 4, -28
 1972              		.cfi_offset 5, -24
 1973              		.cfi_offset 6, -20
 1974              		.cfi_offset 7, -16
 1975              		.cfi_offset 8, -12
 1976              		.cfi_offset 9, -8
 1977              		.cfi_offset 14, -4
 1978 088c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1979 0890 0CD04DE2 		sub	sp, sp, #12	@,,
 1980              		.cfi_def_cfa_offset 40
 1981              	@ armwave.c:346:     FILE *fp = fopen(fn, "wb");
 1982              		.loc 1 346 16 view .LVU558
 1983 0894 D4109FE5 		ldr	r1, .L146	@,
 1984              	.LVL147:
 1985              		.loc 1 346 16 view .LVU559
 1986 0898 0300A0E1 		mov	r0, r3	@, fn
 1987              	.LVL148:
 1988              		.loc 1 346 16 view .LVU560
 1989 089c FEFFFFEB 		bl	fopen64		@
 1990              	.LVL149:
 1991              	@ armwave.c:353:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 347:armwave.c     ****     uint32_t data;
 348:armwave.c     ****     int xx, yy;
 349:armwave.c     **** 
 350:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 351:armwave.c     **** 
 352:armwave.c     ****     fputs("P3\n", fp);
 353:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1992              		.loc 1 353 5 view .LVU561
 1993 08a0 CC609FE5 		ldr	r6, .L146+4	@ tmp154,
 1994              	@ armwave.c:352:     fputs("P3\n", fp);
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1995              		.loc 1 352 5 view .LVU562
 1996 08a4 0320A0E3 		mov	r2, #3	@,
 1997 08a8 0110A0E3 		mov	r1, #1	@,
 1998              	@ armwave.c:346:     FILE *fp = fopen(fn, "wb");
 346:armwave.c     ****     uint32_t data;
 1999              		.loc 1 346 16 view .LVU563
 2000 08ac 0070A0E1 		mov	r7, r0	@ fp,
 2001              	.LVL150:
 347:armwave.c     ****     uint32_t data;
 2002              		.loc 1 347 5 is_stmt 1 view .LVU564
 348:armwave.c     **** 
 2003              		.loc 1 348 5 view .LVU565
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2004              		.loc 1 352 5 view .LVU566
 2005 08b0 0030A0E1 		mov	r3, r0	@, fp
 2006 08b4 BC009FE5 		ldr	r0, .L146+8	@,
 2007              	.LVL151:
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2008              		.loc 1 352 5 is_stmt 0 view .LVU567
 2009 08b8 FEFFFFEB 		bl	fwrite		@
 2010              	.LVL152:
 2011              		.loc 1 353 5 is_stmt 1 view .LVU568
 2012 08bc D424C6E1 		ldrd	r2, [r6, #68]	@, tmp154,
 2013 08c0 B4109FE5 		ldr	r1, .L146+12	@,
 2014 08c4 0700A0E1 		mov	r0, r7	@, fp
 2015 08c8 FEFFFFEB 		bl	fprintf		@
 2016              	.LVL153:
 354:armwave.c     ****     fputs("255\n", fp);
 2017              		.loc 1 354 5 view .LVU569
 2018 08cc 0420A0E3 		mov	r2, #4	@,
 2019 08d0 0730A0E1 		mov	r3, r7	@, fp
 2020 08d4 0110A0E3 		mov	r1, #1	@,
 2021 08d8 A0009FE5 		ldr	r0, .L146+16	@,
 2022 08dc FEFFFFEB 		bl	fwrite		@
 2023              	.LVL154:
 355:armwave.c     **** 
 356:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2024              		.loc 1 356 5 view .LVU570
 2025              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2026              		.loc 1 356 37 is_stmt 0 view .LVU571
 2027 08e0 482096E5 		ldr	r2, [r6, #72]	@ prephitmp_57, g_armwave_state.target_height
 2028              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2029              		.loc 1 356 5 view .LVU572
 2030 08e4 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2031 08e8 1800000A 		beq	.L135		@,
 2032 08ec 443096E5 		ldr	r3, [r6, #68]	@ _12, g_armwave_state.target_width
 2033              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 358:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 359:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 360:armwave.c     **** 
 361:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2034              		.loc 1 361 13 view .LVU573
 2035 08f0 8C909FE5 		ldr	r9, .L146+20	@ tmp156,
 2036              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2037              		.loc 1 356 12 view .LVU574
 2038 08f4 0050A0E3 		mov	r5, #0	@ yy,
 2039              	.LVL155:
 2040              	.L136:
 2041              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2042              		.loc 1 357 9 view .LVU575
 2043 08f8 000053E3 		cmp	r3, #0	@ _12,
 2044              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2045              		.loc 1 357 16 view .LVU576
 2046 08fc 0040A013 		movne	r4, #0	@ xx,
 2047              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2048              		.loc 1 357 9 view .LVU577
 2049 0900 1600000A 		beq	.L145		@,
 2050              	.LVL156:
 2051              	.L137:
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2052              		.loc 1 358 13 is_stmt 1 discriminator 3 view .LVU578
 2053              	@ armwave.c:358:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2054              		.loc 1 358 29 is_stmt 0 discriminator 3 view .LVU579
 2055 0904 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2056              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2057              		.loc 1 361 13 discriminator 3 view .LVU580
 2058 0908 0910A0E1 		mov	r1, r9	@, tmp156
 2059 090c 0700A0E1 		mov	r0, r7	@, fp
 2060              	@ armwave.c:358:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2061              		.loc 1 358 18 discriminator 3 view .LVU581
 2062 0910 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2063              	.LVL157:
 2064              		.loc 1 361 13 is_stmt 1 discriminator 3 view .LVU582
 2065              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2066              		.loc 1 357 58 is_stmt 0 discriminator 3 view .LVU583
 2067 0914 014084E2 		add	r4, r4, #1	@ xx, xx,
 2068              	.LVL158:
 2069              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2070              		.loc 1 361 81 discriminator 3 view .LVU584
 2071 0918 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2072              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2073              		.loc 1 361 61 discriminator 3 view .LVU585
 2074 091c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2075              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2076              		.loc 1 361 13 discriminator 3 view .LVU586
 2077 0920 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2078 0924 7330EFE6 		uxtb	r3, r3	@, tmp146
 2079 0928 00C08DE5 		str	ip, [sp]	@ tmp151,
 2080 092c 7220EFE6 		uxtb	r2, r2	@, data
 2081              	.LVL159:
 2082              		.loc 1 361 13 discriminator 3 view .LVU587
 2083 0930 FEFFFFEB 		bl	fprintf		@
 2084              	.LVL160:
 2085              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2086              		.loc 1 357 41 discriminator 3 view .LVU588
 2087 0934 443096E5 		ldr	r3, [r6, #68]	@ _12, g_armwave_state.target_width
 2088              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2089              		.loc 1 357 9 discriminator 3 view .LVU589
 2090 0938 040053E1 		cmp	r3, r4	@ _12, xx
 2091 093c F0FFFF8A 		bhi	.L137		@,
 2092 0940 482096E5 		ldr	r2, [r6, #72]	@ prephitmp_57, g_armwave_state.target_height
 2093              	.LVL161:
 2094              	.L138:
 2095              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2096              		.loc 1 356 55 discriminator 2 view .LVU590
 2097 0944 015085E2 		add	r5, r5, #1	@ yy, yy,
 2098              	.LVL162:
 2099              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2100              		.loc 1 356 5 discriminator 2 view .LVU591
 2101 0948 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2102 094c E9FFFF3A 		bcc	.L136		@,
 2103              	.LVL163:
 2104              	.L135:
 362:armwave.c     ****         }
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     fclose(fp);
 2105              		.loc 1 365 5 is_stmt 1 view .LVU592
 2106 0950 0700A0E1 		mov	r0, r7	@, fp
 2107              	@ armwave.c:366: }
 366:armwave.c     **** }
 2108              		.loc 1 366 1 is_stmt 0 view .LVU593
 2109 0954 0CD08DE2 		add	sp, sp, #12	@,,
 2110              		.cfi_remember_state
 2111              		.cfi_def_cfa_offset 28
 2112              		@ sp needed	@
 2113 0958 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2114              		.cfi_restore 14
 2115              		.cfi_restore 9
 2116              		.cfi_restore 8
 2117              		.cfi_restore 7
 2118              		.cfi_restore 6
 2119              		.cfi_restore 5
 2120              		.cfi_restore 4
 2121              		.cfi_def_cfa_offset 0
 2122              	.LVL164:
 2123              	@ armwave.c:365:     fclose(fp);
 365:armwave.c     **** }
 2124              		.loc 1 365 5 view .LVU594
 2125 095c FEFFFFEA 		b	fclose		@
 2126              	.LVL165:
 2127              	.L145:
 2128              		.cfi_restore_state
 2129              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2130              		.loc 1 356 55 view .LVU595
 2131 0960 015085E2 		add	r5, r5, #1	@ yy, yy,
 2132              	.LVL166:
 2133              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2134              		.loc 1 356 5 view .LVU596
 2135 0964 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2136 0968 F5FFFF8A 		bhi	.L138		@,
 2137 096c F7FFFFEA 		b	.L135		@
 2138              	.L147:
 2139              		.align	2
 2140              	.L146:
 2141 0970 9C010000 		.word	.LC14
 2142 0974 00000000 		.word	g_armwave_state
 2143 0978 A0010000 		.word	.LC15
 2144 097c A4010000 		.word	.LC16
 2145 0980 AC010000 		.word	.LC17
 2146 0984 B4010000 		.word	.LC18
 2147              		.cfi_endproc
 2148              	.LFE68:
 2150              		.align	2
 2151              		.global	armwave_test_init
 2152              		.syntax unified
 2153              		.arm
 2154              		.fpu vfp
 2156              	armwave_test_init:
 2157              	.LVL167:
 2158              	.LFB69:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Initialise some test functionry.
 370:armwave.c     ****  */
 371:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 372:armwave.c     **** {
 2159              		.loc 1 372 1 is_stmt 1 view -0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     ****     test_create_gamma();
 2163              		.loc 1 373 5 view .LVU598
 2164              	.LBB10:
 2165              	.LBI10:
  45:armwave.c     **** {
 2166              		.loc 1 45 6 view .LVU599
  45:armwave.c     **** {
 2167              		.loc 1 45 6 is_stmt 0 view .LVU600
 2168              	.LBE10:
 2169              	@ armwave.c:372: {
 372:armwave.c     ****     test_create_gamma();
 2170              		.loc 1 372 1 view .LVU601
 2171 0988 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2172              		.cfi_def_cfa_offset 32
 2173              		.cfi_offset 4, -32
 2174              		.cfi_offset 5, -28
 2175              		.cfi_offset 6, -24
 2176              		.cfi_offset 7, -20
 2177              		.cfi_offset 8, -16
 2178              		.cfi_offset 9, -12
 2179              		.cfi_offset 10, -8
 2180              		.cfi_offset 14, -4
 2181 098c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2182              		.cfi_def_cfa_offset 56
 2183              		.cfi_offset 80, -56
 2184              		.cfi_offset 81, -52
 2185              		.cfi_offset 82, -48
 2186              		.cfi_offset 83, -44
 2187              		.cfi_offset 84, -40
 2188              		.cfi_offset 85, -36
 2189 0990 F4409FE5 		ldr	r4, .L155+20	@ ivtmp.104,
 2190              	.LBB13:
 2191              	.LBB11:
 2192              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2193              		.loc 1 51 32 view .LVU602
 2194 0994 3BAA9FED 		vldr.32	s20, .L155+16	@ tmp139,
 2195              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2196              		.loc 1 51 26 view .LVU603
 2197 0998 369B9FED 		vldr.64	d9, .L155	@ tmp157,
 2198              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2199              		.loc 1 51 49 view .LVU604
 2200 099c 378B9FED 		vldr.64	d8, .L155+8	@ tmp142,
 2201 09a0 01C084E2 		add	ip, r4, #1	@ _45, ivtmp.104,
 2202              	.LBE11:
 2203              	.LBE13:
 2204              	@ armwave.c:372: {
 372:armwave.c     ****     test_create_gamma();
 2205              		.loc 1 372 1 view .LVU605
 2206 09a4 10D04DE2 		sub	sp, sp, #16	@,,
 2207              		.cfi_def_cfa_offset 72
 2208              	@ armwave.c:372: {
 372:armwave.c     ****     test_create_gamma();
 2209              		.loc 1 372 1 view .LVU606
 2210 09a8 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2211 09ac 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2212 09b0 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2213 09b4 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2214 09b8 01AC84E2 		add	r10, r4, #256	@ _46, ivtmp.104,
 2215 09bc 01506CE2 		rsb	r5, ip, #1	@ tmp156, _45,
 2216              	.LVL168:
 2217              	.L149:
 2218              	.LBB14:
 2219              	.LBB12:
  51:armwave.c     ****     }
 2220              		.loc 1 51 9 is_stmt 1 view .LVU607
 2221              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2222              		.loc 1 51 32 is_stmt 0 view .LVU608
 2223 09c0 043085E0 		add	r3, r5, r4	@ tmp136, tmp156, ivtmp.104
 2224              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2225              		.loc 1 51 26 view .LVU609
 2226 09c4 491BB0EE 		vmov.f64	d1, d9	@, tmp157
 2227              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2228              		.loc 1 51 32 view .LVU610
 2229 09c8 903A07EE 		vmov	s15, r3	@ int	@ tmp136, tmp136
 2230 09cc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp137, tmp136
 2231 09d0 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp138, tmp137, tmp139
 2232              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2233              		.loc 1 51 26 view .LVU611
 2234 09d4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp138
 2235 09d8 FEFFFFEB 		bl	pow		@
 2236              	.LVL169:
 2237              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2238              		.loc 1 51 49 view .LVU612
 2239 09dc 080B20EE 		vmul.f64	d0, d0, d8	@ tmp141,, tmp142
 2240              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2241              		.loc 1 51 24 view .LVU613
 2242 09e0 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp143, tmp141
 2243 09e4 903A17EE 		vmov	r3, s15	@ int	@ tmp143, tmp143
 2244 09e8 0130E4E5 		strb	r3, [r4, #1]!	@ tmp143, MEM[base: _44, offset: 0B]
 2245              	.LVL170:
 2246              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2247              		.loc 1 50 5 view .LVU614
 2248 09ec 0A0054E1 		cmp	r4, r10	@ ivtmp.104, _46
 2249 09f0 F2FFFF1A 		bne	.L149		@,
 2250              	.LVL171:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2251              		.loc 1 50 5 view .LVU615
 2252              	.LBE12:
 2253              	.LBE14:
 374:armwave.c     **** 
 375:armwave.c     ****     // make ch1 yellowish by default
 376:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2254              		.loc 1 376 5 is_stmt 1 view .LVU616
 2255              	.LBB15:
 2256              	.LBI15:
 329:armwave.c     **** {
 2257              		.loc 1 329 6 view .LVU617
 2258              	.LBB16:
 332:armwave.c     ****         case 1:
 2259              		.loc 1 332 5 view .LVU618
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2260              		.loc 1 334 13 view .LVU619
 335:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2261              		.loc 1 335 13 view .LVU620
 2262              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2263              		.loc 1 334 41 is_stmt 0 view .LVU621
 2264 09f4 94309FE5 		ldr	r3, .L155+24	@ tmp145,
 2265              	.LBE16:
 2266              	.LBE15:
 2267              	@ armwave.c:378:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 377:armwave.c     **** 
 378:armwave.c     ****     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2268              		.loc 1 378 41 view .LVU622
 2269 09f8 970604E0 		mul	r4, r7, r6	@ _1, nwaves, wave_size
 2270              	.LBB19:
 2271              	.LBB17:
 2272              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2273              		.loc 1 334 41 view .LVU623
 2274 09fc 90109FE5 		ldr	r1, .L155+28	@ tmp146,
 2275              	@ armwave.c:336:             g_armwave_state.ch1_color.b = b;
 336:armwave.c     ****             break;
 2276              		.loc 1 336 41 view .LVU624
 2277 0a00 FA20A0E3 		mov	r2, #250	@ tmp149,
 2278              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2279              		.loc 1 334 41 view .LVU625
 2280 0a04 581083E5 		str	r1, [r3, #88]	@ tmp146, MEM[(short int *)&g_armwave_state + 88B]
 336:armwave.c     ****             break;
 2281              		.loc 1 336 13 is_stmt 1 view .LVU626
 2282              	.LBE17:
 2283              	.LBE19:
 2284              	@ armwave.c:378:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2285              		.loc 1 378 24 is_stmt 0 view .LVU627
 2286 0a08 0400A0E1 		mov	r0, r4	@, _1
 2287 0a0c 0110A0E3 		mov	r1, #1	@,
 2288              	.LBB20:
 2289              	.LBB18:
 2290              	@ armwave.c:336:             g_armwave_state.ch1_color.b = b;
 336:armwave.c     ****             break;
 2291              		.loc 1 336 41 view .LVU628
 2292 0a10 BC25C3E1 		strh	r2, [r3, #92]	@ movhi	@ tmp149, g_armwave_state.ch1_color.b
 337:armwave.c     ****     }
 2293              		.loc 1 337 13 is_stmt 1 view .LVU629
 2294              	.LVL172:
 337:armwave.c     ****     }
 2295              		.loc 1 337 13 is_stmt 0 view .LVU630
 2296              	.LBE18:
 2297              	.LBE20:
 2298              		.loc 1 378 5 is_stmt 1 view .LVU631
 2299              	@ armwave.c:378:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2300              		.loc 1 378 24 is_stmt 0 view .LVU632
 2301 0a14 FEFFFFEB 		bl	calloc		@
 2302              	.LVL173:
 2303              	@ armwave.c:378:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 2304              		.loc 1 378 22 view .LVU633
 2305 0a18 78309FE5 		ldr	r3, .L155+32	@ tmp151,
 2306              	@ armwave.c:380:     if(test_wave_buffer == NULL) {
 379:armwave.c     **** 
 380:armwave.c     ****     if(test_wave_buffer == NULL) {
 2307              		.loc 1 380 7 view .LVU634
 2308 0a1c 000050E3 		cmp	r0, #0	@ tmp150,
 2309              	@ armwave.c:378:     test_wave_buffer = calloc(wave_size * nwaves, 1);
 378:armwave.c     **** 
 2310              		.loc 1 378 22 view .LVU635
 2311 0a20 000083E5 		str	r0, [r3]	@ tmp150, test_wave_buffer
 2312              		.loc 1 380 5 is_stmt 1 view .LVU636
 2313              	@ armwave.c:380:     if(test_wave_buffer == NULL) {
 2314              		.loc 1 380 7 is_stmt 0 view .LVU637
 2315 0a24 0C00000A 		beq	.L154		@,
 381:armwave.c     ****         printf("armwave_test_init: failed to allocate test wave buffer (%d bytes)\n", wave_size * n
 382:armwave.c     ****         return;
 383:armwave.c     ****     }
 384:armwave.c     **** 
 385:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2316              		.loc 1 385 5 is_stmt 1 view .LVU638
 2317 0a28 0000A0E3 		mov	r0, #0	@ tmp153,
 2318 0a2c 08008DE5 		str	r0, [sp, #8]	@ tmp153,
 2319 0a30 0610A0E1 		mov	r1, r6	@, tmp3
 2320 0a34 F080CDE1 		strd	r8, [sp]	@,
 2321 0a38 0720A0E1 		mov	r2, r7	@, nwaves
 2322 0a3c 0630A0E1 		mov	r3, r6	@, wave_size
 2323 0a40 FEFFFFEB 		bl	armwave_setup_render		@
 2324              	.LVL174:
 386:armwave.c     **** 
 387:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2325              		.loc 1 387 5 view .LVU639
 2326 0a44 50109FE5 		ldr	r1, .L155+36	@,
 2327 0a48 50009FE5 		ldr	r0, .L155+40	@,
 2328              	@ armwave.c:388: }
 388:armwave.c     **** }
 2329              		.loc 1 388 1 is_stmt 0 view .LVU640
 2330 0a4c 10D08DE2 		add	sp, sp, #16	@,,
 2331              		.cfi_remember_state
 2332              		.cfi_def_cfa_offset 56
 2333              		@ sp needed	@
 2334 0a50 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2335              		.cfi_restore 84
 2336              		.cfi_restore 85
 2337              		.cfi_restore 82
 2338              		.cfi_restore 83
 2339              		.cfi_restore 80
 2340              		.cfi_restore 81
 2341              		.cfi_def_cfa_offset 32
 2342 0a54 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2343              		.cfi_restore 14
 2344              		.cfi_restore 10
 2345              		.cfi_restore 9
 2346              		.cfi_restore 8
 2347              		.cfi_restore 7
 2348              		.cfi_restore 6
 2349              		.cfi_restore 5
 2350              		.cfi_restore 4
 2351              		.cfi_def_cfa_offset 0
 2352              	.LVL175:
 2353              	@ armwave.c:387:     printf("armwave version: %s\n", ARMWAVE_VER);
 387:armwave.c     **** }
 2354              		.loc 1 387 5 view .LVU641
 2355 0a58 FEFFFFEA 		b	printf		@
 2356              	.LVL176:
 2357              	.L154:
 2358              		.cfi_restore_state
 381:armwave.c     ****         return;
 2359              		.loc 1 381 9 is_stmt 1 view .LVU642
 2360 0a5c 0410A0E1 		mov	r1, r4	@, _1
 2361 0a60 3C009FE5 		ldr	r0, .L155+44	@,
 2362              	@ armwave.c:388: }
 2363              		.loc 1 388 1 is_stmt 0 view .LVU643
 2364 0a64 10D08DE2 		add	sp, sp, #16	@,,
 2365              		.cfi_def_cfa_offset 56
 2366              		@ sp needed	@
 2367 0a68 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2368              		.cfi_restore 84
 2369              		.cfi_restore 85
 2370              		.cfi_restore 82
 2371              		.cfi_restore 83
 2372              		.cfi_restore 80
 2373              		.cfi_restore 81
 2374              		.cfi_def_cfa_offset 32
 2375 0a6c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2376              		.cfi_restore 14
 2377              		.cfi_restore 10
 2378              		.cfi_restore 9
 2379              		.cfi_restore 8
 2380              		.cfi_restore 7
 2381              		.cfi_restore 6
 2382              		.cfi_restore 5
 2383              		.cfi_restore 4
 2384              		.cfi_def_cfa_offset 0
 2385              	.LVL177:
 2386              	@ armwave.c:387:     printf("armwave version: %s\n", ARMWAVE_VER);
 387:armwave.c     **** }
 2387              		.loc 1 387 5 view .LVU644
 2388 0a70 FEFFFFEA 		b	printf		@
 2389              	.LVL178:
 2390              	.L156:
 2391 0a74 0000A0E1 		.align	3
 2392              	.L155:
 2393 0a78 000000C0 		.word	-1073741824
 2394 0a7c CCCCEC3F 		.word	1072483532
 2395 0a80 00000000 		.word	0
 2396 0a84 00E06F40 		.word	1081073664
 2397 0a88 00007F43 		.word	1132396544
 2398 0a8c FFFFFFFF 		.word	gamma_table-1
 2399 0a90 00000000 		.word	g_armwave_state
 2400 0a94 F609F406 		.word	116656630
 2401 0a98 00000000 		.word	test_wave_buffer
 2402 0a9c 00000000 		.word	.LC0
 2403 0aa0 08000000 		.word	.LC1
 2404 0aa4 C4010000 		.word	.LC19
 2405              		.cfi_endproc
 2406              	.LFE69:
 2408              		.global	__aeabi_uidiv
 2409              		.align	2
 2410              		.global	armwave_test_generate
 2411              		.syntax unified
 2412              		.arm
 2413              		.fpu vfp
 2415              	armwave_test_generate:
 2416              	.LFB70:
 389:armwave.c     **** 
 390:armwave.c     **** /*
 391:armwave.c     ****  * Fill buffers with test funtionry.
 392:armwave.c     ****  */
 393:armwave.c     **** void armwave_test_generate()
 394:armwave.c     **** {
 2417              		.loc 1 394 1 is_stmt 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 0
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 395:armwave.c     ****     uint32_t yy;
 2421              		.loc 1 395 5 view .LVU646
 396:armwave.c     **** 
 397:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2422              		.loc 1 397 5 view .LVU647
 2423              	@ armwave.c:394: {
 394:armwave.c     ****     uint32_t yy;
 2424              		.loc 1 394 1 is_stmt 0 view .LVU648
 2425 0aa8 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2426              		.cfi_def_cfa_offset 24
 2427              		.cfi_offset 4, -24
 2428              		.cfi_offset 5, -20
 2429              		.cfi_offset 6, -16
 2430              		.cfi_offset 7, -12
 2431              		.cfi_offset 8, -8
 2432              		.cfi_offset 14, -4
 2433              	@ armwave.c:397:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2434              		.loc 1 397 5 view .LVU649
 2435 0aac 0010A0E3 		mov	r1, #0	@,
 2436 0ab0 5C509FE5 		ldr	r5, .L162	@ tmp142,
 2437 0ab4 3C2095E5 		ldr	r2, [r5, #60]	@, g_armwave_state.ch_buff_size
 2438 0ab8 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 2439 0abc FEFFFFEB 		bl	memset		@
 2440              	.LVL179:
 398:armwave.c     **** 
 399:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2441              		.loc 1 399 5 is_stmt 1 view .LVU650
 2442              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2443              		.loc 1 399 45 is_stmt 0 view .LVU651
 2444 0ac0 306095E5 		ldr	r6, [r5, #48]	@ _8, g_armwave_state.slice_height
 2445              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2446              		.loc 1 399 5 view .LVU652
 2447 0ac4 020B56E3 		cmp	r6, #2048	@ _8,
 2448 0ac8 F081BD88 		pophi	{r4, r5, r6, r7, r8, pc}	@
 2449              	@ armwave.c:400:         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwav
 400:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2450              		.loc 1 400 9 view .LVU653
 2451 0acc 44709FE5 		ldr	r7, .L162+4	@ tmp143,
 2452              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2453              		.loc 1 399 12 view .LVU654
 2454 0ad0 0040A0E3 		mov	r4, #0	@ yy,
 2455              	.LVL180:
 2456              	.L159:
 2457              		.loc 1 400 9 is_stmt 1 discriminator 3 view .LVU655
 2458 0ad4 940602E0 		mul	r2, r4, r6	@, yy, _8
 2459 0ad8 343095E5 		ldr	r3, [r5, #52]	@, g_armwave_state.slice_record_height
 2460 0adc 0410A0E1 		mov	r1, r4	@, yy
 2461 0ae0 0700A0E1 		mov	r0, r7	@, tmp143
 2462 0ae4 FEFFFFEB 		bl	printf		@
 2463              	.LVL181:
 401:armwave.c     **** 
 402:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2464              		.loc 1 402 9 discriminator 3 view .LVU656
 2465 0ae8 D003C5E1 		ldrd	r0, [r5, #48]	@, tmp142,
 2466 0aec 900400E0 		mul	r0, r0, r4	@, g_armwave_state.slice_height, yy
 2467 0af0 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2468              	.LVL182:
 2469              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2470              		.loc 1 399 45 is_stmt 0 discriminator 3 view .LVU657
 2471 0af4 306095E5 		ldr	r6, [r5, #48]	@ _8, g_armwave_state.slice_height
 2472              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2473              		.loc 1 399 28 discriminator 3 view .LVU658
 2474 0af8 020BA0E3 		mov	r0, #2048	@,
 2475 0afc 0610A0E1 		mov	r1, r6	@, _8
 2476 0b00 FEFFFFEB 		bl	__aeabi_uidiv		@
 2477              	.LVL183:
 2478              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2479              		.loc 1 399 63 discriminator 3 view .LVU659
 2480 0b04 014084E2 		add	r4, r4, #1	@ yy, yy,
 2481              	.LVL184:
 2482              	@ armwave.c:399:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2483              		.loc 1 399 5 discriminator 3 view .LVU660
 2484 0b08 040050E1 		cmp	r0, r4	@, yy
 2485 0b0c F0FFFF8A 		bhi	.L159		@,
 2486 0b10 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 2487              	.L163:
 2488              		.align	2
 2489              	.L162:
 2490 0b14 00000000 		.word	g_armwave_state
 2491 0b18 08020000 		.word	.LC20
 2492              		.cfi_endproc
 2493              	.LFE70:
 2495              		.align	2
 2496              		.global	armwave_test_fill_outbuf
 2497              		.syntax unified
 2498              		.arm
 2499              		.fpu vfp
 2501              	armwave_test_fill_outbuf:
 2502              	.LFB71:
 403:armwave.c     ****     }
 404:armwave.c     **** }
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Render image to the local allocated buffer.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_fill_outbuf()
 410:armwave.c     **** {
 2503              		.loc 1 410 1 is_stmt 1 view -0
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 8
 2506              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2507              		.loc 1 411 5 view .LVU662
 2508 0b1c 40219FE5 		ldr	r2, .L188	@ tmp203,
 2509              	@ armwave.c:410: {
 410:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2510              		.loc 1 410 1 is_stmt 0 view .LVU663
 2511 0b20 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2512              		.cfi_def_cfa_offset 36
 2513              		.cfi_offset 4, -36
 2514              		.cfi_offset 5, -32
 2515              		.cfi_offset 6, -28
 2516              		.cfi_offset 7, -24
 2517              		.cfi_offset 8, -20
 2518              		.cfi_offset 9, -16
 2519              		.cfi_offset 10, -12
 2520              		.cfi_offset 11, -8
 2521              		.cfi_offset 14, -4
 2522 0b24 0CD04DE2 		sub	sp, sp, #12	@,,
 2523              		.cfi_def_cfa_offset 48
 2524              	@ armwave.c:411:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2525              		.loc 1 411 5 view .LVU664
 2526 0b28 548092E5 		ldr	r8, [r2, #84]	@ _1, g_armwave_state.out_pixbuf
 2527              	.LVL185:
 2528              	.LBB23:
 2529              	.LBI23:
 162:armwave.c     **** {
 2530              		.loc 1 162 6 is_stmt 1 view .LVU665
 2531              	.LBB24:
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2532              		.loc 1 164 5 view .LVU666
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 2533              		.loc 1 165 5 view .LVU667
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2534              		.loc 1 166 5 view .LVU668
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2535              		.loc 1 167 5 view .LVU669
 2536              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2537              		.loc 1 167 15 is_stmt 0 view .LVU670
 2538 0b2c 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2539              	.LVL186:
 168:armwave.c     ****     uint32_t offset;
 2540              		.loc 1 168 5 is_stmt 1 view .LVU671
 169:armwave.c     **** 
 2541              		.loc 1 169 5 view .LVU672
 171:armwave.c     **** 
 2542              		.loc 1 171 5 view .LVU673
 2543 0b30 000058E3 		cmp	r8, #0	@ _1,
 2544 0b34 4500000A 		beq	.L186		@,
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2545              		.loc 1 173 5 view .LVU674
 2546              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2547              		.loc 1 173 41 is_stmt 0 view .LVU675
 2548 0b38 445092E5 		ldr	r5, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2549 0b3c 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2550              	.LVL187:
 174:armwave.c     **** 
 2551              		.loc 1 174 5 is_stmt 1 view .LVU676
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2552              		.loc 1 176 5 view .LVU677
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2553              		.loc 1 176 5 is_stmt 0 view .LVU678
 2554 0b40 000055E3 		cmp	r5, #0	@ npix,
 2555 0b44 0B0000DA 		ble	.L164		@,
 2556              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2557              		.loc 1 189 52 view .LVU679
 2558 0b48 FA35D2E1 		ldrsh	r3, [r2, #90]	@ _24, g_armwave_state.ch1_color.g
 2559              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2560              		.loc 1 188 52 view .LVU680
 2561 0b4c F8B5D2E1 		ldrsh	fp, [r2, #88]	@ _18, g_armwave_state.ch1_color.r
 2562              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2563              		.loc 1 176 11 view .LVU681
 2564 0b50 0010A0E3 		mov	r1, #0	@ n,
 2565              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2566              		.loc 1 189 52 view .LVU682
 2567 0b54 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2568              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2569              		.loc 1 190 52 view .LVU683
 2570 0b58 FC35D2E1 		ldrsh	r3, [r2, #92]	@ _28, g_armwave_state.ch1_color.b
 2571 0b5c 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2572              	.LVL188:
 2573              	.L171:
 180:armwave.c     **** 
 2574              		.loc 1 180 9 is_stmt 1 view .LVU684
 2575              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2576              		.loc 1 180 19 is_stmt 0 view .LVU685
 2577 0b60 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2578              	.LVL189:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2579              		.loc 1 182 9 is_stmt 1 view .LVU686
 2580              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2581              		.loc 1 182 11 is_stmt 0 view .LVU687
 2582 0b64 000050E3 		cmp	r0, #0	@ wave_word,
 2583 0b68 0400001A 		bne	.L183		@,
 2584 0b6c 041081E2 		add	r1, r1, #4	@ n, n,
 2585              	.L167:
 2586              	.LVL190:
 2587              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2588              		.loc 1 176 5 view .LVU688
 2589 0b70 010055E1 		cmp	r5, r1	@ npix, n
 2590 0b74 F9FFFFCA 		bgt	.L171		@,
 2591              	.LVL191:
 2592              	.L164:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2593              		.loc 1 176 5 view .LVU689
 2594              	.LBE24:
 2595              	.LBE23:
 2596              	@ armwave.c:412: }
 412:armwave.c     **** }
 2597              		.loc 1 412 1 view .LVU690
 2598 0b78 0CD08DE2 		add	sp, sp, #12	@,,
 2599              		.cfi_remember_state
 2600              		.cfi_def_cfa_offset 36
 2601              		@ sp needed	@
 2602 0b7c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2603              	.LVL192:
 2604              	.L183:
 2605              		.cfi_restore_state
 2606              	.LBB26:
 2607              	.LBB25:
 2608              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2609              		.loc 1 187 19 view .LVU691
 2610 0b80 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2611              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2612              		.loc 1 182 11 view .LVU692
 2613 0b84 0160A0E1 		mov	r6, r1	@ ivtmp.116, n
 2614              	.LVL193:
 184:armwave.c     ****                 wave_word >>= 8;
 2615              		.loc 1 184 17 is_stmt 1 view .LVU693
 185:armwave.c     **** 
 2616              		.loc 1 185 17 view .LVU694
 2617              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2618              		.loc 1 185 27 is_stmt 0 view .LVU695
 2619 0b88 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2620              	.LVL194:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2621              		.loc 1 187 17 is_stmt 1 view .LVU696
 2622 0b8c 041081E2 		add	r1, r1, #4	@ n, ivtmp.116,
 2623              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2624              		.loc 1 187 19 is_stmt 0 view .LVU697
 2625 0b90 0500001A 		bne	.L187		@,
 2626              	.L168:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2627              		.loc 1 187 19 view .LVU698
 2628 0b94 016086E2 		add	r6, r6, #1	@ ivtmp.116, ivtmp.116,
 2629              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2630              		.loc 1 183 13 view .LVU699
 2631 0b98 060051E1 		cmp	r1, r6	@ n, ivtmp.116
 2632 0b9c F3FFFF0A 		beq	.L167		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2633              		.loc 1 184 17 is_stmt 1 view .LVU700
 2634              	.LVL195:
 185:armwave.c     **** 
 2635              		.loc 1 185 17 view .LVU701
 2636              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2637              		.loc 1 187 19 is_stmt 0 view .LVU702
 2638 0ba0 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2639              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2640              		.loc 1 185 27 view .LVU703
 2641 0ba4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2642              	.LVL196:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2643              		.loc 1 187 17 is_stmt 1 view .LVU704
 2644              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2645              		.loc 1 187 19 is_stmt 0 view .LVU705
 2646 0ba8 F9FFFF0A 		beq	.L168		@,
 2647              	.L187:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2648              		.loc 1 188 21 is_stmt 1 view .LVU706
 2649              	.LVL197:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2650              		.loc 1 189 21 view .LVU707
 190:armwave.c     **** 
 2651              		.loc 1 190 21 view .LVU708
 192:armwave.c     ****                     g = MIN(gg, 255);
 2652              		.loc 1 192 21 view .LVU709
 193:armwave.c     ****                     b = MIN(bb, 255);
 2653              		.loc 1 193 21 view .LVU710
 194:armwave.c     **** 
 2654              		.loc 1 194 21 view .LVU711
 197:armwave.c     **** 
 2655              		.loc 1 197 21 view .LVU712
 2656              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2657              		.loc 1 190 55 is_stmt 0 view .LVU713
 2658 0bac 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 2659              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2660              		.loc 1 201 57 view .LVU714
 2661 0bb0 1CA092E5 		ldr	r10, [r2, #28]	@ _50, g_armwave_state.vscale
 2662              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2663              		.loc 1 201 32 view .LVU715
 2664 0bb4 7670EFE6 		uxtb	r7, r6	@ ivtmp.116, ivtmp.116
 2665              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2666              		.loc 1 190 55 view .LVU716
 2667 0bb8 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 2668              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2669              		.loc 1 189 55 view .LVU717
 2670 0bbc 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 2671              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2672              		.loc 1 201 24 view .LVU718
 2673 0bc0 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.116
 2674              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2675              		.loc 1 189 55 view .LVU719
 2676 0bc4 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 2677              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2678              		.loc 1 190 24 view .LVU720
 2679 0bc8 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 2680              	.LVL198:
 2681              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2682              		.loc 1 188 55 view .LVU721
 2683 0bcc 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 2684              	.LVL199:
 2685              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2686              		.loc 1 189 24 view .LVU722
 2687 0bd0 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 2688              	.LVL200:
 2689              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2690              		.loc 1 194 25 view .LVU723
 2691 0bd4 FF005CE3 		cmp	ip, #255	@ bb,
 2692 0bd8 FFC0A0A3 		movge	ip, #255	@ bb,
 2693              	.LVL201:
 2694              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 2695              		.loc 1 193 25 view .LVU724
 2696 0bdc FF0054E3 		cmp	r4, #255	@ gg,
 2697 0be0 FF40A0A3 		movge	r4, #255	@ gg,
 2698              	.LVL202:
 2699              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2700              		.loc 1 188 24 view .LVU725
 2701 0be4 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 2702              	.LVL203:
 2703              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2704              		.loc 1 192 25 view .LVU726
 2705 0be8 FF005EE3 		cmp	lr, #255	@ rr,
 2706              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2707              		.loc 1 197 56 view .LVU727
 2708 0bec 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 2709              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2710              		.loc 1 192 25 view .LVU728
 2711 0bf0 FFE0A0A3 		movge	lr, #255	@ rr,
 2712              	.LVL204:
 2713              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2714              		.loc 1 197 44 view .LVU729
 2715 0bf4 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 2716 0bf8 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 2717              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2718              		.loc 1 197 56 view .LVU730
 2719 0bfc 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 2720              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2721              		.loc 1 197 51 view .LVU731
 2722 0c00 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 2723              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2724              		.loc 1 197 62 view .LVU732
 2725 0c04 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2726 0c08 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 2727              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2728              		.loc 1 204 21 view .LVU733
 2729 0c0c 00005AE3 		cmp	r10, #0	@ _50,
 2730              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2731              		.loc 1 197 26 view .LVU734
 2732 0c10 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 2733              	.LVL205:
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2734              		.loc 1 200 21 is_stmt 1 view .LVU735
 201:armwave.c     ****                     xx = (nsub >> 8);
 2735              		.loc 1 201 21 view .LVU736
 202:armwave.c     **** 
 2736              		.loc 1 202 21 view .LVU737
 2737              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 2738              		.loc 1 202 32 is_stmt 0 view .LVU738
 2739 0c14 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.116,
 2740              	.LVL206:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2741              		.loc 1 204 21 is_stmt 1 view .LVU739
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2742              		.loc 1 204 21 is_stmt 0 view .LVU740
 2743 0c18 DDFFFF0A 		beq	.L168		@,
 2744              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2745              		.loc 1 204 29 view .LVU741
 2746 0c1c 00C0A0E3 		mov	ip, #0	@ row,
 2747              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2748              		.loc 1 204 38 view .LVU742
 2749 0c20 0CE0A0E1 		mov	lr, ip	@ _54, row
 2750              	.LVL207:
 2751              	.L169:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2752              		.loc 1 205 25 is_stmt 1 view .LVU743
 206:armwave.c     ****                     }
 2753              		.loc 1 206 25 view .LVU744
 2754              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2755              		.loc 1 205 52 is_stmt 0 view .LVU745
 2756 0c24 444092E5 		ldr	r4, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2757              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2758              		.loc 1 205 45 view .LVU746
 2759 0c28 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 2760              	.LVL208:
 2761              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2762              		.loc 1 204 67 view .LVU747
 2763 0c2c 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 2764              	.LVL209:
 2765              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 2766              		.loc 1 206 43 view .LVU748
 2767 0c30 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 2768              	.LVL210:
 2769              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2770              		.loc 1 204 67 view .LVU749
 2771 0c34 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 2772              	.LVL211:
 2773              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2774              		.loc 1 204 38 view .LVU750
 2775 0c38 0CE0A0E1 		mov	lr, ip	@ _54, row
 2776              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 2777              		.loc 1 206 53 view .LVU751
 2778 0c3c 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 2779              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2780              		.loc 1 204 21 view .LVU752
 2781 0c40 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2782              	.LVL212:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2783              		.loc 1 204 21 view .LVU753
 2784 0c44 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 2785 0c48 F5FFFF3A 		bcc	.L169		@,
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2786              		.loc 1 204 21 view .LVU754
 2787 0c4c D0FFFFEA 		b	.L168		@
 2788              	.LVL213:
 2789              	.L186:
 171:armwave.c     **** 
 2790              		.loc 1 171 5 is_stmt 1 view .LVU755
 2791 0c50 10309FE5 		ldr	r3, .L188+4	@,
 2792 0c54 AB20A0E3 		mov	r2, #171	@,
 2793 0c58 0C109FE5 		ldr	r1, .L188+8	@,
 2794 0c5c 0C009FE5 		ldr	r0, .L188+12	@,
 2795 0c60 FEFFFFEB 		bl	__assert_fail		@
 2796              	.LVL214:
 2797              	.L189:
 2798              		.align	2
 2799              	.L188:
 2800 0c64 00000000 		.word	g_armwave_state
 2801 0c68 18000000 		.word	.LANCHOR0+24
 2802 0c6c 48000000 		.word	.LC4
 2803 0c70 54000000 		.word	.LC5
 2804              	.LBE25:
 2805              	.LBE26:
 2806              		.cfi_endproc
 2807              	.LFE71:
 2809              		.align	2
 2810              		.global	armwave_test_dump_buffer_to_ppm
 2811              		.syntax unified
 2812              		.arm
 2813              		.fpu vfp
 2815              	armwave_test_dump_buffer_to_ppm:
 2816              	.LVL215:
 2817              	.LFB72:
 413:armwave.c     **** 
 414:armwave.c     **** /*
 415:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 416:armwave.c     ****  */
 417:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 418:armwave.c     **** {
 2818              		.loc 1 418 1 view -0
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 0
 2821              		@ frame_needed = 0, uses_anonymous_args = 0
 2822              		@ link register save eliminated.
 419:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2823              		.loc 1 419 5 view .LVU757
 2824 0c74 08309FE5 		ldr	r3, .L191	@ tmp112,
 2825 0c78 0010A0E1 		mov	r1, r0	@, fn
 2826 0c7c 540093E5 		ldr	r0, [r3, #84]	@, g_armwave_state.out_pixbuf
 2827              	.LVL216:
 2828              		.loc 1 419 5 is_stmt 0 view .LVU758
 2829 0c80 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2830              	.LVL217:
 2831              	.L192:
 2832              		.loc 1 419 5 view .LVU759
 2833              		.align	2
 2834              	.L191:
 2835 0c84 00000000 		.word	g_armwave_state
 2836              		.cfi_endproc
 2837              	.LFE72:
 2839              		.align	2
 2840              		.global	armwave_test_fill_gdkbuf
 2841              		.syntax unified
 2842              		.arm
 2843              		.fpu vfp
 2845              	armwave_test_fill_gdkbuf:
 2846              	.LVL218:
 2847              	.LFB73:
 420:armwave.c     **** }
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Render GDK buffer with test funtionry.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 426:armwave.c     **** {
 2848              		.loc 1 426 1 is_stmt 1 view -0
 2849              		.cfi_startproc
 2850              		@ args = 0, pretend = 0, frame = 8
 2851              		@ frame_needed = 0, uses_anonymous_args = 0
 427:armwave.c     ****     //PyObject *mv;
 428:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 429:armwave.c     **** 
 430:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 431:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2852              		.loc 1 431 5 view .LVU761
 2853              	@ armwave.c:431:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2854              		.loc 1 431 11 is_stmt 0 view .LVU762
 2855 0c88 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2856              	@ armwave.c:426: {
 426:armwave.c     ****     //PyObject *mv;
 2857              		.loc 1 426 1 view .LVU763
 2858 0c8c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2859              		.cfi_def_cfa_offset 36
 2860              		.cfi_offset 4, -36
 2861              		.cfi_offset 5, -32
 2862              		.cfi_offset 6, -28
 2863              		.cfi_offset 7, -24
 2864              		.cfi_offset 8, -20
 2865              		.cfi_offset 9, -16
 2866              		.cfi_offset 10, -12
 2867              		.cfi_offset 11, -8
 2868              		.cfi_offset 14, -4
 2869 0c90 0CD04DE2 		sub	sp, sp, #12	@,,
 2870              		.cfi_def_cfa_offset 48
 2871              	.LBB29:
 2872              	.LBB30:
 2873              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2874              		.loc 1 167 15 view .LVU764
 2875 0c94 38219FE5 		ldr	r2, .L217	@ tmp206,
 2876              	.LBE30:
 2877              	.LBE29:
 2878              	@ armwave.c:431:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2879              		.loc 1 431 11 view .LVU765
 2880 0c98 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2881              	.LVL219:
 432:armwave.c     ****     
 433:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 434:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2882              		.loc 1 434 5 is_stmt 1 view .LVU766
 2883              	.LBB33:
 2884              	.LBI29:
 162:armwave.c     **** {
 2885              		.loc 1 162 6 view .LVU767
 2886              	.LBB31:
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2887              		.loc 1 164 5 view .LVU768
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 2888              		.loc 1 165 5 view .LVU769
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2889              		.loc 1 166 5 view .LVU770
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2890              		.loc 1 167 5 view .LVU771
 2891              	@ armwave.c:171:     assert(out_buffer != NULL);
 171:armwave.c     **** 
 2892              		.loc 1 171 5 is_stmt 0 view .LVU772
 2893 0c9c 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2894              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2895              		.loc 1 167 15 view .LVU773
 2896 0ca0 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2897              	.LVL220:
 168:armwave.c     ****     uint32_t offset;
 2898              		.loc 1 168 5 is_stmt 1 view .LVU774
 169:armwave.c     **** 
 2899              		.loc 1 169 5 view .LVU775
 171:armwave.c     **** 
 2900              		.loc 1 171 5 view .LVU776
 2901 0ca4 4500000A 		beq	.L215		@,
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2902              		.loc 1 173 5 view .LVU777
 2903              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2904              		.loc 1 173 41 is_stmt 0 view .LVU778
 2905 0ca8 445092E5 		ldr	r5, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2906 0cac 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2907              	.LVL221:
 174:armwave.c     **** 
 2908              		.loc 1 174 5 is_stmt 1 view .LVU779
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2909              		.loc 1 176 5 view .LVU780
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2910              		.loc 1 176 5 is_stmt 0 view .LVU781
 2911 0cb0 000055E3 		cmp	r5, #0	@ npix,
 2912 0cb4 0B0000DA 		ble	.L193		@,
 2913              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2914              		.loc 1 189 52 view .LVU782
 2915 0cb8 FA35D2E1 		ldrsh	r3, [r2, #90]	@ _26, g_armwave_state.ch1_color.g
 2916              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2917              		.loc 1 188 52 view .LVU783
 2918 0cbc F8B5D2E1 		ldrsh	fp, [r2, #88]	@ _20, g_armwave_state.ch1_color.r
 2919              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2920              		.loc 1 176 11 view .LVU784
 2921 0cc0 0010A0E3 		mov	r1, #0	@ n,
 2922              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2923              		.loc 1 189 52 view .LVU785
 2924 0cc4 00308DE5 		str	r3, [sp]	@ _26, %sfp
 2925              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2926              		.loc 1 190 52 view .LVU786
 2927 0cc8 FC35D2E1 		ldrsh	r3, [r2, #92]	@ _30, g_armwave_state.ch1_color.b
 2928 0ccc 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 2929              	.LVL222:
 2930              	.L200:
 180:armwave.c     **** 
 2931              		.loc 1 180 9 is_stmt 1 view .LVU787
 2932              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2933              		.loc 1 180 19 is_stmt 0 view .LVU788
 2934 0cd0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 2935              	.LVL223:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2936              		.loc 1 182 9 is_stmt 1 view .LVU789
 2937              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2938              		.loc 1 182 11 is_stmt 0 view .LVU790
 2939 0cd4 000050E3 		cmp	r0, #0	@ wave_word,
 2940 0cd8 0400001A 		bne	.L212		@,
 2941 0cdc 041081E2 		add	r1, r1, #4	@ n, n,
 2942              	.L196:
 2943              	.LVL224:
 2944              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2945              		.loc 1 176 5 view .LVU791
 2946 0ce0 010055E1 		cmp	r5, r1	@ npix, n
 2947 0ce4 F9FFFFCA 		bgt	.L200		@,
 2948              	.LVL225:
 2949              	.L193:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2950              		.loc 1 176 5 view .LVU792
 2951              	.LBE31:
 2952              	.LBE33:
 2953              	@ armwave.c:435: }
 435:armwave.c     **** }
 2954              		.loc 1 435 1 view .LVU793
 2955 0ce8 0CD08DE2 		add	sp, sp, #12	@,,
 2956              		.cfi_remember_state
 2957              		.cfi_def_cfa_offset 36
 2958              		@ sp needed	@
 2959 0cec F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2960              	.LVL226:
 2961              	.L212:
 2962              		.cfi_restore_state
 2963              	.LBB34:
 2964              	.LBB32:
 2965              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2966              		.loc 1 187 19 view .LVU794
 2967 0cf0 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2968              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2969              		.loc 1 182 11 view .LVU795
 2970 0cf4 0160A0E1 		mov	r6, r1	@ ivtmp.132, n
 2971              	.LVL227:
 184:armwave.c     ****                 wave_word >>= 8;
 2972              		.loc 1 184 17 is_stmt 1 view .LVU796
 185:armwave.c     **** 
 2973              		.loc 1 185 17 view .LVU797
 2974              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2975              		.loc 1 185 27 is_stmt 0 view .LVU798
 2976 0cf8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2977              	.LVL228:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2978              		.loc 1 187 17 is_stmt 1 view .LVU799
 2979 0cfc 041081E2 		add	r1, r1, #4	@ n, ivtmp.132,
 2980              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2981              		.loc 1 187 19 is_stmt 0 view .LVU800
 2982 0d00 0500001A 		bne	.L216		@,
 2983              	.L197:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2984              		.loc 1 187 19 view .LVU801
 2985 0d04 016086E2 		add	r6, r6, #1	@ ivtmp.132, ivtmp.132,
 2986              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2987              		.loc 1 183 13 view .LVU802
 2988 0d08 060051E1 		cmp	r1, r6	@ n, ivtmp.132
 2989 0d0c F3FFFF0A 		beq	.L196		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2990              		.loc 1 184 17 is_stmt 1 view .LVU803
 2991              	.LVL229:
 185:armwave.c     **** 
 2992              		.loc 1 185 17 view .LVU804
 2993              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2994              		.loc 1 187 19 is_stmt 0 view .LVU805
 2995 0d10 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2996              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2997              		.loc 1 185 27 view .LVU806
 2998 0d14 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2999              	.LVL230:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3000              		.loc 1 187 17 is_stmt 1 view .LVU807
 3001              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3002              		.loc 1 187 19 is_stmt 0 view .LVU808
 3003 0d18 F9FFFF0A 		beq	.L197		@,
 3004              	.L216:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3005              		.loc 1 188 21 is_stmt 1 view .LVU809
 3006              	.LVL231:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3007              		.loc 1 189 21 view .LVU810
 190:armwave.c     **** 
 3008              		.loc 1 190 21 view .LVU811
 192:armwave.c     ****                     g = MIN(gg, 255);
 3009              		.loc 1 192 21 view .LVU812
 193:armwave.c     ****                     b = MIN(bb, 255);
 3010              		.loc 1 193 21 view .LVU813
 194:armwave.c     **** 
 3011              		.loc 1 194 21 view .LVU814
 197:armwave.c     **** 
 3012              		.loc 1 197 21 view .LVU815
 3013              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 3014              		.loc 1 190 55 is_stmt 0 view .LVU816
 3015 0d1c 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 3016              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3017              		.loc 1 201 57 view .LVU817
 3018 0d20 1CA092E5 		ldr	r10, [r2, #28]	@ _52, g_armwave_state.vscale
 3019              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3020              		.loc 1 201 32 view .LVU818
 3021 0d24 7670EFE6 		uxtb	r7, r6	@ ivtmp.132, ivtmp.132
 3022              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 3023              		.loc 1 190 55 view .LVU819
 3024 0d28 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 3025              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3026              		.loc 1 189 55 view .LVU820
 3027 0d2c 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 3028              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 3029              		.loc 1 201 24 view .LVU821
 3030 0d30 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.132
 3031              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3032              		.loc 1 189 55 view .LVU822
 3033 0d34 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 3034              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 3035              		.loc 1 190 24 view .LVU823
 3036 0d38 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 3037              	.LVL232:
 3038              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3039              		.loc 1 188 55 view .LVU824
 3040 0d3c 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3041              	.LVL233:
 3042              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3043              		.loc 1 189 24 view .LVU825
 3044 0d40 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3045              	.LVL234:
 3046              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 3047              		.loc 1 194 25 view .LVU826
 3048 0d44 FF005CE3 		cmp	ip, #255	@ bb,
 3049 0d48 FFC0A0A3 		movge	ip, #255	@ bb,
 3050              	.LVL235:
 3051              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 3052              		.loc 1 193 25 view .LVU827
 3053 0d4c FF0054E3 		cmp	r4, #255	@ gg,
 3054 0d50 FF40A0A3 		movge	r4, #255	@ gg,
 3055              	.LVL236:
 3056              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3057              		.loc 1 188 24 view .LVU828
 3058 0d54 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3059              	.LVL237:
 3060              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 3061              		.loc 1 192 25 view .LVU829
 3062 0d58 FF005EE3 		cmp	lr, #255	@ rr,
 3063              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3064              		.loc 1 197 56 view .LVU830
 3065 0d5c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3066              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 3067              		.loc 1 192 25 view .LVU831
 3068 0d60 FFE0A0A3 		movge	lr, #255	@ rr,
 3069              	.LVL238:
 3070              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3071              		.loc 1 197 44 view .LVU832
 3072 0d64 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3073 0d68 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3074              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3075              		.loc 1 197 56 view .LVU833
 3076 0d6c 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3077              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3078              		.loc 1 197 51 view .LVU834
 3079 0d70 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3080              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3081              		.loc 1 197 62 view .LVU835
 3082 0d74 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3083 0d78 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3084              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3085              		.loc 1 204 21 view .LVU836
 3086 0d7c 00005AE3 		cmp	r10, #0	@ _52,
 3087              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3088              		.loc 1 197 26 view .LVU837
 3089 0d80 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3090              	.LVL239:
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3091              		.loc 1 200 21 is_stmt 1 view .LVU838
 201:armwave.c     ****                     xx = (nsub >> 8);
 3092              		.loc 1 201 21 view .LVU839
 202:armwave.c     **** 
 3093              		.loc 1 202 21 view .LVU840
 3094              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 3095              		.loc 1 202 32 is_stmt 0 view .LVU841
 3096 0d84 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.132,
 3097              	.LVL240:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3098              		.loc 1 204 21 is_stmt 1 view .LVU842
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3099              		.loc 1 204 21 is_stmt 0 view .LVU843
 3100 0d88 DDFFFF0A 		beq	.L197		@,
 3101              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3102              		.loc 1 204 29 view .LVU844
 3103 0d8c 00C0A0E3 		mov	ip, #0	@ row,
 3104              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3105              		.loc 1 204 38 view .LVU845
 3106 0d90 0CE0A0E1 		mov	lr, ip	@ _56, row
 3107              	.LVL241:
 3108              	.L198:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3109              		.loc 1 205 25 is_stmt 1 view .LVU846
 206:armwave.c     ****                     }
 3110              		.loc 1 206 25 view .LVU847
 3111              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3112              		.loc 1 205 52 is_stmt 0 view .LVU848
 3113 0d94 444092E5 		ldr	r4, [r2, #68]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3114              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3115              		.loc 1 205 45 view .LVU849
 3116 0d98 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3117              	.LVL242:
 3118              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3119              		.loc 1 204 67 view .LVU850
 3120 0d9c 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3121              	.LVL243:
 3122              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 3123              		.loc 1 206 43 view .LVU851
 3124 0da0 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3125              	.LVL244:
 3126              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3127              		.loc 1 204 67 view .LVU852
 3128 0da4 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3129              	.LVL245:
 3130              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3131              		.loc 1 204 38 view .LVU853
 3132 0da8 0CE0A0E1 		mov	lr, ip	@ _56, row
 3133              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 3134              		.loc 1 206 53 view .LVU854
 3135 0dac 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3136              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3137              		.loc 1 204 21 view .LVU855
 3138 0db0 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3139              	.LVL246:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3140              		.loc 1 204 21 view .LVU856
 3141 0db4 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3142 0db8 F5FFFF3A 		bcc	.L198		@,
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3143              		.loc 1 204 21 view .LVU857
 3144 0dbc D0FFFFEA 		b	.L197		@
 3145              	.LVL247:
 3146              	.L215:
 171:armwave.c     **** 
 3147              		.loc 1 171 5 is_stmt 1 view .LVU858
 3148 0dc0 10309FE5 		ldr	r3, .L217+4	@,
 3149 0dc4 AB20A0E3 		mov	r2, #171	@,
 3150 0dc8 0C109FE5 		ldr	r1, .L217+8	@,
 3151 0dcc 0C009FE5 		ldr	r0, .L217+12	@,
 3152              	.LVL248:
 171:armwave.c     **** 
 3153              		.loc 1 171 5 is_stmt 0 view .LVU859
 3154 0dd0 FEFFFFEB 		bl	__assert_fail		@
 3155              	.LVL249:
 3156              	.L218:
 3157              		.align	2
 3158              	.L217:
 3159 0dd4 00000000 		.word	g_armwave_state
 3160 0dd8 18000000 		.word	.LANCHOR0+24
 3161 0ddc 48000000 		.word	.LC4
 3162 0de0 54000000 		.word	.LC5
 3163              	.LBE32:
 3164              	.LBE34:
 3165              		.cfi_endproc
 3166              	.LFE73:
 3168              		.align	2
 3169              		.global	armwave_fill_pixbuf_into_pybuffer
 3170              		.syntax unified
 3171              		.arm
 3172              		.fpu vfp
 3174              	armwave_fill_pixbuf_into_pybuffer:
 3175              	.LVL250:
 3176              	.LFB74:
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 439:armwave.c     ****  */
 440:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 441:armwave.c     **** {
 3177              		.loc 1 441 1 is_stmt 1 view -0
 3178              		.cfi_startproc
 3179              		@ args = 0, pretend = 0, frame = 48
 3180              		@ frame_needed = 0, uses_anonymous_args = 0
 442:armwave.c     ****     Py_buffer buffer;
 3181              		.loc 1 442 5 view .LVU861
 443:armwave.c     ****     int ret;
 3182              		.loc 1 443 5 view .LVU862
 444:armwave.c     **** 
 445:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3183              		.loc 1 445 5 view .LVU863
 3184              	@ armwave.c:441: {
 441:armwave.c     ****     Py_buffer buffer;
 3185              		.loc 1 441 1 is_stmt 0 view .LVU864
 3186 0de4 10402DE9 		push	{r4, lr}	@
 3187              		.cfi_def_cfa_offset 8
 3188              		.cfi_offset 4, -8
 3189              		.cfi_offset 14, -4
 3190 0de8 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3191 0dec 30D04DE2 		sub	sp, sp, #48	@,,
 3192              		.cfi_def_cfa_offset 56
 3193              	@ armwave.c:445:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3194              		.loc 1 445 5 view .LVU865
 3195 0df0 64009FE5 		ldr	r0, .L223	@,
 3196              	.LVL251:
 3197              		.loc 1 445 5 view .LVU866
 3198 0df4 FEFFFFEB 		bl	puts		@
 3199              	.LVL252:
 446:armwave.c     **** 
 447:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3200              		.loc 1 447 5 is_stmt 1 view .LVU867
 3201              	@ armwave.c:447:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3202              		.loc 1 447 11 is_stmt 0 view .LVU868
 3203 0df8 0400A0E1 		mov	r0, r4	@, buf_obj
 3204 0dfc 04108DE2 		add	r1, sp, #4	@ tmp128,,
 3205 0e00 0120A0E3 		mov	r2, #1	@,
 3206 0e04 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3207              	.LVL253:
 448:armwave.c     **** 
 449:armwave.c     ****     if(ret != 0) {
 3208              		.loc 1 449 5 is_stmt 1 view .LVU869
 3209              	@ armwave.c:449:     if(ret != 0) {
 3210              		.loc 1 449 7 is_stmt 0 view .LVU870
 3211 0e08 000050E3 		cmp	r0, #0	@,
 3212 0e0c 0900001A 		bne	.L222		@,
 450:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 451:armwave.c     ****         Py_RETURN_FALSE;
 452:armwave.c     ****     }
 453:armwave.c     **** 
 454:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 455:armwave.c     **** 
 456:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3213              		.loc 1 456 5 is_stmt 1 view .LVU871
 3214 0e10 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3215              	.LVL254:
 3216              		.loc 1 456 5 is_stmt 0 view .LVU872
 3217 0e14 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3218              	.LVL255:
 457:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3219              		.loc 1 457 5 is_stmt 1 view .LVU873
 3220 0e18 40009FE5 		ldr	r0, .L223+4	@,
 3221 0e1c FEFFFFEB 		bl	puts		@
 3222              	.LVL256:
 458:armwave.c     **** 
 459:armwave.c     ****     PyBuffer_Release(&buffer);
 3223              		.loc 1 459 5 view .LVU874
 3224 0e20 04008DE2 		add	r0, sp, #4	@ tmp129,,
 3225 0e24 FEFFFFEB 		bl	PyBuffer_Release		@
 3226              	.LVL257:
 460:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3227              		.loc 1 460 5 view .LVU875
 3228 0e28 34009FE5 		ldr	r0, .L223+8	@,
 3229 0e2c FEFFFFEB 		bl	puts		@
 3230              	.LVL258:
 3231              	@ armwave.c:461: }
 461:armwave.c     **** }
 3232              		.loc 1 461 1 is_stmt 0 view .LVU876
 3233 0e30 30D08DE2 		add	sp, sp, #48	@,,
 3234              		.cfi_remember_state
 3235              		.cfi_def_cfa_offset 8
 3236              		@ sp needed	@
 3237 0e34 1080BDE8 		pop	{r4, pc}	@
 3238              	.LVL259:
 3239              	.L222:
 3240              		.cfi_restore_state
 450:armwave.c     ****         Py_RETURN_FALSE;
 3241              		.loc 1 450 9 is_stmt 1 view .LVU877
 3242 0e38 28009FE5 		ldr	r0, .L223+12	@,
 3243              	.LVL260:
 450:armwave.c     ****         Py_RETURN_FALSE;
 3244              		.loc 1 450 9 is_stmt 0 view .LVU878
 3245 0e3c FEFFFFEB 		bl	puts		@
 3246              	.LVL261:
 451:armwave.c     ****     }
 3247              		.loc 1 451 9 is_stmt 1 view .LVU879
 3248              	.LBB35:
 3249              	.LBI35:
 3250              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3251              		.loc 2 456 20 view .LVU880
 3252              	.LBB36:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3253              		.loc 2 458 21 view .LVU881
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3254              		.loc 2 459 5 view .LVU882
 3255              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3256              		.loc 2 459 18 is_stmt 0 view .LVU883
 3257 0e40 24309FE5 		ldr	r3, .L223+16	@ tmp119,
 3258              	.LBE36:
 3259              	.LBE35:
 3260              	@ armwave.c:451:         Py_RETURN_FALSE;
 451:armwave.c     ****     }
 3261              		.loc 1 451 9 view .LVU884
 3262 0e44 0300A0E1 		mov	r0, r3	@ <retval>, tmp119
 3263              	.LBB38:
 3264              	.LBB37:
 3265              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3266              		.loc 2 459 18 view .LVU885
 3267 0e48 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct], MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3268 0e4c 012082E2 		add	r2, r2, #1	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3269 0e50 002083E5 		str	r2, [r3]	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3270              	.LBE37:
 3271              	.LBE38:
 3272              	@ armwave.c:461: }
 3273              		.loc 1 461 1 view .LVU886
 3274 0e54 30D08DE2 		add	sp, sp, #48	@,,
 3275              		.cfi_def_cfa_offset 8
 3276              		@ sp needed	@
 3277 0e58 1080BDE8 		pop	{r4, pc}	@
 3278              	.LVL262:
 3279              	.L224:
 3280              		.loc 1 461 1 view .LVU887
 3281              		.align	2
 3282              	.L223:
 3283 0e5c 38020000 		.word	.LC21
 3284 0e60 B8020000 		.word	.LC23
 3285 0e64 EC020000 		.word	.LC24
 3286 0e68 64020000 		.word	.LC22
 3287 0e6c 00000000 		.word	_Py_FalseStruct
 3288              		.cfi_endproc
 3289              	.LFE74:
 3291              		.align	2
 3292              		.global	armwave_test_create_am_sine
 3293              		.syntax unified
 3294              		.arm
 3295              		.fpu vfp
 3297              	armwave_test_create_am_sine:
 3298              	.LVL263:
 3299              	.LFB75:
 462:armwave.c     **** 
 463:armwave.c     **** /*
 464:armwave.c     ****  * Make a test AM waveform for render tests.
 465:armwave.c     ****  *
 466:armwave.c     ****  * @param   mod                 modulation depth
 467:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 468:armwave.c     ****  */
 469:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 470:armwave.c     **** {
 3300              		.loc 1 470 1 is_stmt 1 view -0
 3301              		.cfi_startproc
 3302              		@ args = 0, pretend = 0, frame = 8
 3303              		@ frame_needed = 0, uses_anonymous_args = 0
 471:armwave.c     ****     float v, noise, xnoise, mod_val;
 3304              		.loc 1 471 5 view .LVU889
 472:armwave.c     ****     int w, x;
 3305              		.loc 1 472 5 view .LVU890
 473:armwave.c     **** 
 474:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3306              		.loc 1 474 5 view .LVU891
 3307              	@ armwave.c:470: {
 470:armwave.c     ****     float v, noise, xnoise, mod_val;
 3308              		.loc 1 470 1 is_stmt 0 view .LVU892
 3309 0e70 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3310              		.cfi_def_cfa_offset 20
 3311              		.cfi_offset 4, -20
 3312              		.cfi_offset 5, -16
 3313              		.cfi_offset 6, -12
 3314              		.cfi_offset 7, -8
 3315              		.cfi_offset 14, -4
 3316 0e74 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3317              		.cfi_def_cfa_offset 76
 3318              		.cfi_offset 80, -76
 3319              		.cfi_offset 81, -72
 3320              		.cfi_offset 82, -68
 3321              		.cfi_offset 83, -64
 3322              		.cfi_offset 84, -60
 3323              		.cfi_offset 85, -56
 3324              		.cfi_offset 86, -52
 3325              		.cfi_offset 87, -48
 3326              		.cfi_offset 88, -44
 3327              		.cfi_offset 89, -40
 3328              		.cfi_offset 90, -36
 3329              		.cfi_offset 91, -32
 3330              		.cfi_offset 92, -28
 3331              		.cfi_offset 93, -24
 3332              	@ armwave.c:474:     for(w = 0; w < g_armwave_state.waves; w++) {
 3333              		.loc 1 474 35 view .LVU893
 3334 0e78 68519FE5 		ldr	r5, .L250+32	@ tmp211,
 3335 0e7c 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_77, g_armwave_state.waves
 3336              	@ armwave.c:470: {
 470:armwave.c     ****     float v, noise, xnoise, mod_val;
 3337              		.loc 1 470 1 view .LVU894
 3338 0e80 0CD04DE2 		sub	sp, sp, #12	@,,
 3339              		.cfi_def_cfa_offset 88
 3340              	@ armwave.c:474:     for(w = 0; w < g_armwave_state.waves; w++) {
 3341              		.loc 1 474 5 view .LVU895
 3342 0e84 000052E3 		cmp	r2, #0	@ prephitmp_77,
 3343 0e88 4B00000A 		beq	.L225		@,
 3344 0e8c 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3345 0e90 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3346              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 475:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3347              		.loc 1 475 37 view .LVU896
 3348 0e94 4BDADFED 		vldr.32	s27, .L250	@ tmp164,
 3349              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3350              		.loc 1 475 17 view .LVU897
 3351 0e98 4BDA9FED 		vldr.32	s26, .L250+4	@ tmp166,
 3352              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 476:armwave.c     ****         //mod = 1.0f;
 477:armwave.c     **** 
 478:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 479:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 480:armwave.c     ****             noise *= noise;
 481:armwave.c     ****             noise *= noise;
 482:armwave.c     ****             noise *= noise;
 483:armwave.c     **** 
 484:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 485:armwave.c     ****                 noise = -noise;
 486:armwave.c     **** 
 487:armwave.c     ****             noise += 1.0f;
 488:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 489:armwave.c     **** 
 490:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3353              		.loc 1 490 41 view .LVU898
 3354 0e9c 4B8A9FED 		vldr.32	s16, .L250+8	@ tmp216,
 3355              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 491:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 492:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 + (v * 127), 0), 
 3356              		.loc 1 492 69 view .LVU899
 3357 0ea0 4BCA9FED 		vldr.32	s24, .L250+12	@ tmp217,
 3358 0ea4 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_82, g_armwave_state.wave_length
 3359 0ea8 3C719FE5 		ldr	r7, .L250+36	@ tmp215,
 3360              	@ armwave.c:474:     for(w = 0; w < g_armwave_state.waves; w++) {
 474:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3361              		.loc 1 474 11 view .LVU900
 3362 0eac 0060A0E3 		mov	r6, #0	@ w,
 3363              	.LVL264:
 3364              	.L233:
 475:armwave.c     ****         //mod = 1.0f;
 3365              		.loc 1 475 9 is_stmt 1 view .LVU901
 3366              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 475:armwave.c     ****         //mod = 1.0f;
 3367              		.loc 1 475 28 is_stmt 0 view .LVU902
 3368 0eb0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3369              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 475:armwave.c     ****         //mod = 1.0f;
 3370              		.loc 1 475 17 view .LVU903
 3371 0eb4 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp166
 3372              	@ armwave.c:478:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3373              		.loc 1 478 9 view .LVU904
 3374 0eb8 000053E3 		cmp	r3, #0	@ prephitmp_82,
 3375              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 475:armwave.c     ****         //mod = 1.0f;
 3376              		.loc 1 475 28 view .LVU905
 3377 0ebc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp162, w
 3378              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 475:armwave.c     ****         //mod = 1.0f;
 3379              		.loc 1 475 37 view .LVU906
 3380 0ec0 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp163, tmp162, tmp164
 3381              	@ armwave.c:475:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 475:armwave.c     ****         //mod = 1.0f;
 3382              		.loc 1 475 17 view .LVU907
 3383 0ec4 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp163, mod
 3384              	.LVL265:
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3385              		.loc 1 478 9 is_stmt 1 view .LVU908
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3386              		.loc 1 478 9 is_stmt 0 view .LVU909
 3387 0ec8 3800000A 		beq	.L227		@,
 3388 0ecc C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp213, mod_val
 3389              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3390              		.loc 1 490 29 view .LVU910
 3391 0ed0 40BA9FED 		vldr.32	s22, .L250+16	@ tmp178,
 3392              	@ armwave.c:488:             xnoise = (rand() & 0xffff) / 6553500.0f;
 488:armwave.c     **** 
 3393              		.loc 1 488 20 view .LVU911
 3394 0ed4 40AADFED 		vldr.32	s21, .L250+20	@ tmp184,
 3395              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3396              		.loc 1 492 71 view .LVU912
 3397 0ed8 40AA9FED 		vldr.32	s20, .L250+24	@ tmp195,
 3398 0edc 408ADFED 		vldr.32	s17, .L250+28	@ tmp196,
 3399              	@ armwave.c:478:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3400              		.loc 1 478 15 view .LVU913
 3401 0ee0 0040A0E3 		mov	r4, #0	@ x,
 3402              	.LVL266:
 3403              	.L232:
 479:armwave.c     ****             noise *= noise;
 3404              		.loc 1 479 13 is_stmt 1 view .LVU914
 3405              	@ armwave.c:479:             noise  = ((rand() & 0xffff) * noise_fraction);
 479:armwave.c     ****             noise *= noise;
 3406              		.loc 1 479 24 is_stmt 0 view .LVU915
 3407 0ee4 FEFFFFEB 		bl	rand		@
 3408              	.LVL267:
 3409              	@ armwave.c:479:             noise  = ((rand() & 0xffff) * noise_fraction);
 479:armwave.c     ****             noise *= noise;
 3410              		.loc 1 479 31 view .LVU916
 3411 0ee8 7000FFE6 		uxth	r0, r0	@ tmp167,
 3412              	@ armwave.c:479:             noise  = ((rand() & 0xffff) * noise_fraction);
 479:armwave.c     ****             noise *= noise;
 3413              		.loc 1 479 41 view .LVU917
 3414 0eec 900A07EE 		vmov	s15, r0	@ int	@ tmp167, tmp167
 3415 0ef0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp169, tmp167
 3416              	@ armwave.c:479:             noise  = ((rand() & 0xffff) * noise_fraction);
 479:armwave.c     ****             noise *= noise;
 3417              		.loc 1 479 20 view .LVU918
 3418 0ef4 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp169, noise_fraction
 3419              	.LVL268:
 480:armwave.c     ****             noise *= noise;
 3420              		.loc 1 480 13 is_stmt 1 view .LVU919
 3421              	@ armwave.c:480:             noise *= noise;
 480:armwave.c     ****             noise *= noise;
 3422              		.loc 1 480 19 is_stmt 0 view .LVU920
 3423 0ef8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3424              	.LVL269:
 481:armwave.c     ****             noise *= noise;
 3425              		.loc 1 481 13 is_stmt 1 view .LVU921
 3426              	@ armwave.c:481:             noise *= noise;
 481:armwave.c     ****             noise *= noise;
 3427              		.loc 1 481 19 is_stmt 0 view .LVU922
 3428 0efc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3429              	.LVL270:
 482:armwave.c     **** 
 3430              		.loc 1 482 13 is_stmt 1 view .LVU923
 3431              	@ armwave.c:482:             noise *= noise;
 482:armwave.c     **** 
 3432              		.loc 1 482 19 is_stmt 0 view .LVU924
 3433 0f00 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3434              	.LVL271:
 484:armwave.c     ****                 noise = -noise;
 3435              		.loc 1 484 13 is_stmt 1 view .LVU925
 3436              	@ armwave.c:484:             if((rand() & 0xffff) > 0x7fff)
 484:armwave.c     ****                 noise = -noise;
 3437              		.loc 1 484 17 is_stmt 0 view .LVU926
 3438 0f04 FEFFFFEB 		bl	rand		@
 3439              	.LVL272:
 485:armwave.c     **** 
 3440              		.loc 1 485 17 is_stmt 1 view .LVU927
 3441              	@ armwave.c:484:             if((rand() & 0xffff) > 0x7fff)
 484:armwave.c     ****                 noise = -noise;
 3442              		.loc 1 484 15 is_stmt 0 view .LVU928
 3443 0f08 020910E3 		tst	r0, #32768	@,
 3444              	@ armwave.c:485:                 noise = -noise;
 485:armwave.c     **** 
 3445              		.loc 1 485 23 view .LVU929
 3446 0f0c 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3447              	.LVL273:
 487:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3448              		.loc 1 487 13 is_stmt 1 view .LVU930
 488:armwave.c     **** 
 3449              		.loc 1 488 13 view .LVU931
 3450              	@ armwave.c:488:             xnoise = (rand() & 0xffff) / 6553500.0f;
 488:armwave.c     **** 
 3451              		.loc 1 488 23 is_stmt 0 view .LVU932
 3452 0f10 FEFFFFEB 		bl	rand		@
 3453              	.LVL274:
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3454              		.loc 1 490 13 is_stmt 1 view .LVU933
 3455              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3456              		.loc 1 490 41 is_stmt 0 view .LVU934
 3457 0f14 0E7A95ED 		vldr.32	s14, [r5, #56]	@ int	@ tmp225, g_armwave_state.wave_length
 3458              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3459              		.loc 1 490 29 view .LVU935
 3460 0f18 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3461              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3462              		.loc 1 490 41 view .LVU936
 3463 0f1c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp172, tmp225
 3464              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3465              		.loc 1 490 29 view .LVU937
 3466 0f20 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp176, x
 3467              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3468              		.loc 1 490 41 view .LVU938
 3469 0f24 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp174, tmp216, tmp172
 3470              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3471              		.loc 1 490 29 view .LVU939
 3472 0f28 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp177, tmp176, tmp178
 3473              	@ armwave.c:488:             xnoise = (rand() & 0xffff) / 6553500.0f;
 488:armwave.c     **** 
 3474              		.loc 1 488 30 view .LVU940
 3475 0f2c 7000FFE6 		uxth	r0, r0	@ tmp180,
 3476              	.LVL275:
 3477              	@ armwave.c:488:             xnoise = (rand() & 0xffff) / 6553500.0f;
 488:armwave.c     **** 
 3478              		.loc 1 488 40 view .LVU941
 3479 0f30 100A07EE 		vmov	s14, r0	@ int	@ tmp180, tmp180
 3480 0f34 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp182, tmp180
 3481              	@ armwave.c:488:             xnoise = (rand() & 0xffff) / 6553500.0f;
 488:armwave.c     **** 
 3482              		.loc 1 488 20 view .LVU942
 3483 0f38 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp182, tmp184
 3484              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3485              		.loc 1 490 73 view .LVU943
 3486 0f3c A70A06EE 		vmla.f32	s0, s13, s15	@ tmp185, tmp174, tmp177
 3487              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3488              		.loc 1 490 18 view .LVU944
 3489 0f40 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp185
 3490 0f44 FEFFFFEB 		bl	sin		@
 3491              	.LVL276:
 3492              		.loc 1 492 13 is_stmt 1 view .LVU945
 3493              	@ armwave.c:487:             noise += 1.0f;
 487:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3494              		.loc 1 487 19 is_stmt 0 view .LVU946
 3495 0f48 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp216
 3496              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3497              		.loc 1 492 69 view .LVU947
 3498 0f4c 0020A0E3 		mov	r2, #0	@ iftmp.24_39,
 3499              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3500              		.loc 1 490 94 view .LVU948
 3501 0f50 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp191, noise
 3502              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3503              		.loc 1 490 83 view .LVU949
 3504 0f54 000B29EE 		vmul.f64	d0, d9, d0	@ tmp188, tmp213,
 3505              	.LVL277:
 3506              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3507              		.loc 1 490 94 view .LVU950
 3508 0f58 077B20EE 		vmul.f64	d7, d0, d7	@ tmp192, tmp188, tmp191
 3509              	@ armwave.c:490:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3510              		.loc 1 490 15 view .LVU951
 3511 0f5c C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp192
 3512              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3513              		.loc 1 492 71 view .LVU952
 3514 0f60 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp196
 3515 0f64 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp195
 3516 0f68 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3517 0f6c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3518 0f70 050000DA 		ble	.L229		@,
 3519              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3520              		.loc 1 492 69 discriminator 1 view .LVU953
 3521 0f74 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp217
 3522 0f78 FF20A0E3 		mov	r2, #255	@ iftmp.24_39,
 3523 0f7c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3524 0f80 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp200, _26
 3525 0f84 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp200, %sfp
 3526 0f88 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_39, %sfp
 3527              	.L229:
 3528              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3529              		.loc 1 492 37 discriminator 12 view .LVU954
 3530 0f8c 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3531              	@ armwave.c:492:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3532              		.loc 1 492 69 discriminator 12 view .LVU955
 3533 0f90 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3534 0f94 931623E0 		mla	r3, r3, r6, r1	@ tmp206, g_armwave_state.wave_stride, w, test_wave_buffer
 3535 0f98 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.24_39, *_31
 3536              	@ armwave.c:478:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3537              		.loc 1 478 39 discriminator 12 view .LVU956
 3538 0f9c 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_82, g_armwave_state.wave_length
 3539              	@ armwave.c:478:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3540              		.loc 1 478 54 discriminator 12 view .LVU957
 3541 0fa0 014084E2 		add	r4, r4, #1	@ x, x,
 3542              	.LVL278:
 3543              	@ armwave.c:478:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 478:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3544              		.loc 1 478 9 discriminator 12 view .LVU958
 3545 0fa4 040053E1 		cmp	r3, r4	@ prephitmp_82, x
 3546 0fa8 CDFFFF8A 		bhi	.L232		@,
 3547 0fac 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_77, g_armwave_state.waves
 3548              	.LVL279:
 3549              	.L227:
 3550              	@ armwave.c:474:     for(w = 0; w < g_armwave_state.waves; w++) {
 474:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3551              		.loc 1 474 44 discriminator 2 view .LVU959
 3552 0fb0 016086E2 		add	r6, r6, #1	@ w, w,
 3553              	.LVL280:
 3554              	@ armwave.c:474:     for(w = 0; w < g_armwave_state.waves; w++) {
 474:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3555              		.loc 1 474 5 discriminator 2 view .LVU960
 3556 0fb4 020056E1 		cmp	r6, r2	@ w, prephitmp_77
 3557 0fb8 BCFFFF3A 		bcc	.L233		@,
 3558              	.LVL281:
 3559              	.L225:
 3560              	@ armwave.c:495: }
 493:armwave.c     ****         }
 494:armwave.c     ****     }
 495:armwave.c     **** }
 3561              		.loc 1 495 1 view .LVU961
 3562 0fbc 0CD08DE2 		add	sp, sp, #12	@,,
 3563              		.cfi_def_cfa_offset 76
 3564              		@ sp needed	@
 3565 0fc0 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3566              		.cfi_restore 92
 3567              		.cfi_restore 93
 3568              		.cfi_restore 90
 3569              		.cfi_restore 91
 3570              		.cfi_restore 88
 3571              		.cfi_restore 89
 3572              		.cfi_restore 86
 3573              		.cfi_restore 87
 3574              		.cfi_restore 84
 3575              		.cfi_restore 85
 3576              		.cfi_restore 82
 3577              		.cfi_restore 83
 3578              		.cfi_restore 80
 3579              		.cfi_restore 81
 3580              		.cfi_def_cfa_offset 20
 3581 0fc4 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 3582              	.L251:
 3583              		.align	2
 3584              	.L250:
 3585 0fc8 0000803C 		.word	1015021568
 3586 0fcc 0000003F 		.word	1056964608
 3587 0fd0 0000803F 		.word	1065353216
 3588 0fd4 00007F43 		.word	1132396544
 3589 0fd8 C3F5C840 		.word	1086911939
 3590 0fdc 38FFC74A 		.word	1254620984
 3591 0fe0 0000FE42 		.word	1123942400
 3592 0fe4 00000043 		.word	1124073472
 3593 0fe8 00000000 		.word	g_armwave_state
 3594 0fec 00000000 		.word	test_wave_buffer
 3595              		.cfi_endproc
 3596              	.LFE75:
 3598              		.align	2
 3599              		.global	armwave_test_create_square
 3600              		.syntax unified
 3601              		.arm
 3602              		.fpu vfp
 3604              	armwave_test_create_square:
 3605              	.LVL282:
 3606              	.LFB76:
 496:armwave.c     **** 
 497:armwave.c     **** /*
 498:armwave.c     ****  * Make a test square waveform.
 499:armwave.c     ****  *
 500:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 501:armwave.c     ****  */
 502:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 503:armwave.c     **** {
 3607              		.loc 1 503 1 is_stmt 1 view -0
 3608              		.cfi_startproc
 3609              		@ args = 0, pretend = 0, frame = 8
 3610              		@ frame_needed = 0, uses_anonymous_args = 0
 504:armwave.c     ****     uint8_t v;
 3611              		.loc 1 504 5 view .LVU963
 505:armwave.c     ****     float noise, xnoise;
 3612              		.loc 1 505 5 view .LVU964
 506:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3613              		.loc 1 506 5 view .LVU965
 507:armwave.c     ****     int w, x;
 3614              		.loc 1 507 5 view .LVU966
 508:armwave.c     **** 
 509:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3615              		.loc 1 509 5 view .LVU967
 3616              	@ armwave.c:503: {
 503:armwave.c     ****     uint8_t v;
 3617              		.loc 1 503 1 is_stmt 0 view .LVU968
 3618 0ff0 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3619              		.cfi_def_cfa_offset 20
 3620              		.cfi_offset 4, -20
 3621              		.cfi_offset 5, -16
 3622              		.cfi_offset 6, -12
 3623              		.cfi_offset 7, -8
 3624              		.cfi_offset 14, -4
 3625 0ff4 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3626              		.cfi_def_cfa_offset 60
 3627              		.cfi_offset 80, -60
 3628              		.cfi_offset 81, -56
 3629              		.cfi_offset 82, -52
 3630              		.cfi_offset 83, -48
 3631              		.cfi_offset 84, -44
 3632              		.cfi_offset 85, -40
 3633              		.cfi_offset 86, -36
 3634              		.cfi_offset 87, -32
 3635              		.cfi_offset 88, -28
 3636              		.cfi_offset 89, -24
 3637              	@ armwave.c:509:     for(w = 0; w < g_armwave_state.waves; w++) {
 3638              		.loc 1 509 35 view .LVU969
 3639 0ff8 58519FE5 		ldr	r5, .L280+32	@ tmp179,
 3640 0ffc 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_33, g_armwave_state.waves
 3641              	@ armwave.c:503: {
 503:armwave.c     ****     uint8_t v;
 3642              		.loc 1 503 1 view .LVU970
 3643 1000 0CD04DE2 		sub	sp, sp, #12	@,,
 3644              		.cfi_def_cfa_offset 72
 3645              	@ armwave.c:509:     for(w = 0; w < g_armwave_state.waves; w++) {
 3646              		.loc 1 509 5 view .LVU971
 3647 1004 000052E3 		cmp	r2, #0	@ prephitmp_33,
 3648 1008 4700000A 		beq	.L252		@,
 3649 100c 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 3650              	@ armwave.c:506:     float level = 0.8f, new_level = 0.8f;
 506:armwave.c     ****     int w, x;
 3651              		.loc 1 506 11 view .LVU972
 3652 1010 48CA9FED 		vldr.32	s24, .L280	@ level,
 3653              	@ armwave.c:521:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 510:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 511:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 512:armwave.c     ****             noise *= noise;
 513:armwave.c     ****             noise *= noise;
 514:armwave.c     ****             noise *= noise;
 515:armwave.c     **** 
 516:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 517:armwave.c     ****                 noise = -noise;
 518:armwave.c     **** 
 519:armwave.c     ****             //noise += 1.0f;
 520:armwave.c     **** 
 521:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 3654              		.loc 1 521 49 view .LVU973
 3655 1014 48AA9FED 		vldr.32	s20, .L280+4	@ tmp188,
 3656              	@ armwave.c:526:                 new_level = 0.2f;
 522:armwave.c     ****                 new_level = 0.2f;
 523:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 524:armwave.c     ****                 new_level = 0.8f;
 525:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 526:armwave.c     ****                 new_level = 0.2f;
 3657              		.loc 1 526 27 view .LVU974
 3658 1018 48AADFED 		vldr.32	s21, .L280+8	@ new_level,
 3659              	@ armwave.c:525:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 525:armwave.c     ****                 new_level = 0.2f;
 3660              		.loc 1 525 56 view .LVU975
 3661 101c 488ADFED 		vldr.32	s17, .L280+12	@ tmp190,
 3662 1020 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_70, g_armwave_state.wave_length
 3663 1024 30719FE5 		ldr	r7, .L280+36	@ tmp187,
 3664              	@ armwave.c:509:     for(w = 0; w < g_armwave_state.waves; w++) {
 509:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3665              		.loc 1 509 11 view .LVU976
 3666 1028 0060A0E3 		mov	r6, #0	@ w,
 3667              	.LVL283:
 3668              	.L254:
 3669              	@ armwave.c:510:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 510:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3670              		.loc 1 510 9 view .LVU977
 3671 102c 000053E3 		cmp	r3, #0	@ prephitmp_70,
 3672 1030 3A00000A 		beq	.L261		@,
 3673              	@ armwave.c:523:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 523:armwave.c     ****                 new_level = 0.8f;
 3674              		.loc 1 523 56 view .LVU978
 3675 1034 43BA9FED 		vldr.32	s22, .L280+16	@ tmp184,
 3676              	@ armwave.c:524:                 new_level = 0.8f;
 524:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3677              		.loc 1 524 27 view .LVU979
 3678 1038 3EBADFED 		vldr.32	s23, .L280	@ new_level,
 3679              	@ armwave.c:531:             level = ((level * 3) + new_level) * 0.25f;
 527:armwave.c     ****             } else {
 528:armwave.c     ****                 new_level = 0.8f;
 529:armwave.c     ****             }
 530:armwave.c     **** 
 531:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3680              		.loc 1 531 29 view .LVU980
 3681 103c 429A9FED 		vldr.32	s18, .L280+20	@ tmp161,
 3682              	@ armwave.c:510:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 510:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3683              		.loc 1 510 15 view .LVU981
 3684 1040 0040A0E3 		mov	r4, #0	@ x,
 3685              	.LVL284:
 3686              	.L260:
 511:armwave.c     ****             noise *= noise;
 3687              		.loc 1 511 13 is_stmt 1 view .LVU982
 3688              	@ armwave.c:511:             noise  = ((rand() & 0xffff) * noise_fraction);
 511:armwave.c     ****             noise *= noise;
 3689              		.loc 1 511 24 is_stmt 0 view .LVU983
 3690 1044 FEFFFFEB 		bl	rand		@
 3691              	.LVL285:
 3692              	@ armwave.c:511:             noise  = ((rand() & 0xffff) * noise_fraction);
 511:armwave.c     ****             noise *= noise;
 3693              		.loc 1 511 31 view .LVU984
 3694 1048 7000FFE6 		uxth	r0, r0	@ tmp148,
 3695              	@ armwave.c:511:             noise  = ((rand() & 0xffff) * noise_fraction);
 511:armwave.c     ****             noise *= noise;
 3696              		.loc 1 511 41 view .LVU985
 3697 104c 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 3698 1050 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 3699              	@ armwave.c:511:             noise  = ((rand() & 0xffff) * noise_fraction);
 511:armwave.c     ****             noise *= noise;
 3700              		.loc 1 511 20 view .LVU986
 3701 1054 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 3702              	.LVL286:
 512:armwave.c     ****             noise *= noise;
 3703              		.loc 1 512 13 is_stmt 1 view .LVU987
 3704              	@ armwave.c:512:             noise *= noise;
 512:armwave.c     ****             noise *= noise;
 3705              		.loc 1 512 19 is_stmt 0 view .LVU988
 3706 1058 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3707              	.LVL287:
 513:armwave.c     ****             noise *= noise;
 3708              		.loc 1 513 13 is_stmt 1 view .LVU989
 3709              	@ armwave.c:513:             noise *= noise;
 513:armwave.c     ****             noise *= noise;
 3710              		.loc 1 513 19 is_stmt 0 view .LVU990
 3711 105c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3712              	.LVL288:
 514:armwave.c     **** 
 3713              		.loc 1 514 13 is_stmt 1 view .LVU991
 3714              	@ armwave.c:514:             noise *= noise;
 514:armwave.c     **** 
 3715              		.loc 1 514 19 is_stmt 0 view .LVU992
 3716 1060 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3717              	.LVL289:
 516:armwave.c     ****                 noise = -noise;
 3718              		.loc 1 516 13 is_stmt 1 view .LVU993
 3719              	@ armwave.c:516:             if((rand() & 0xff) > 0x7f)
 516:armwave.c     ****                 noise = -noise;
 3720              		.loc 1 516 17 is_stmt 0 view .LVU994
 3721 1064 FEFFFFEB 		bl	rand		@
 3722              	.LVL290:
 3723              	@ armwave.c:521:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 3724              		.loc 1 521 18 view .LVU995
 3725 1068 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3726 106c E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 3727              	@ armwave.c:521:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 3728              		.loc 1 521 49 view .LVU996
 3729 1070 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp196, g_armwave_state.wave_length
 3730 1074 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp196
 3731 1078 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp188
 3732              	@ armwave.c:521:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 3733              		.loc 1 521 15 view .LVU997
 3734 107c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 3735              	@ armwave.c:516:             if((rand() & 0xff) > 0x7f)
 516:armwave.c     ****                 noise = -noise;
 3736              		.loc 1 516 15 view .LVU998
 3737 1080 800010E3 		tst	r0, #128	@,
 517:armwave.c     **** 
 3738              		.loc 1 517 17 is_stmt 1 view .LVU999
 3739              	@ armwave.c:517:                 noise = -noise;
 517:armwave.c     **** 
 3740              		.loc 1 517 23 is_stmt 0 view .LVU1000
 3741 1084 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3742              	.LVL291:
 521:armwave.c     ****                 new_level = 0.2f;
 3743              		.loc 1 521 13 is_stmt 1 view .LVU1001
 3744              	@ armwave.c:521:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 3745              		.loc 1 521 15 is_stmt 0 view .LVU1002
 3746 1088 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3747              	@ armwave.c:526:                 new_level = 0.2f;
 526:armwave.c     ****             } else {
 3748              		.loc 1 526 27 view .LVU1003
 3749 108c 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3750              	@ armwave.c:521:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 521:armwave.c     ****                 new_level = 0.2f;
 3751              		.loc 1 521 15 view .LVU1004
 3752 1090 090000CA 		bgt	.L256		@,
 523:armwave.c     ****                 new_level = 0.8f;
 3753              		.loc 1 523 20 is_stmt 1 view .LVU1005
 3754              	@ armwave.c:523:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 523:armwave.c     ****                 new_level = 0.8f;
 3755              		.loc 1 523 56 is_stmt 0 view .LVU1006
 3756 1094 8B6A67EE 		vmul.f32	s13, s15, s22	@ tmp156, _8, tmp184
 3757              	@ armwave.c:523:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 523:armwave.c     ****                 new_level = 0.8f;
 3758              		.loc 1 523 22 view .LVU1007
 3759 1098 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 3760 109c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3761              	@ armwave.c:524:                 new_level = 0.8f;
 524:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3762              		.loc 1 524 27 view .LVU1008
 3763 10a0 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 3764              	@ armwave.c:523:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 523:armwave.c     ****                 new_level = 0.8f;
 3765              		.loc 1 523 22 view .LVU1009
 3766 10a4 040000CA 		bgt	.L256		@,
 525:armwave.c     ****                 new_level = 0.2f;
 3767              		.loc 1 525 20 is_stmt 1 view .LVU1010
 3768              	@ armwave.c:525:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 525:armwave.c     ****                 new_level = 0.2f;
 3769              		.loc 1 525 56 is_stmt 0 view .LVU1011
 3770 10a8 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp190
 3771              	@ armwave.c:524:                 new_level = 0.8f;
 524:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3772              		.loc 1 524 27 view .LVU1012
 3773 10ac E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 3774 10b0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3775 10b4 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 3776 10b8 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 3777              	.L256:
 3778              	.LVL292:
 3779              		.loc 1 531 13 is_stmt 1 view .LVU1013
 3780              	@ armwave.c:531:             level = ((level * 3) + new_level) * 0.25f;
 3781              		.loc 1 531 34 is_stmt 0 view .LVU1014
 3782 10bc 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 3783              	.LVL293:
 3784              	@ armwave.c:531:             level = ((level * 3) + new_level) * 0.25f;
 3785              		.loc 1 531 19 view .LVU1015
 3786 10c0 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp190
 3787              	.LVL294:
 532:armwave.c     **** 
 533:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3788              		.loc 1 533 13 is_stmt 1 view .LVU1016
 3789              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3790              		.loc 1 533 27 is_stmt 0 view .LVU1017
 3791 10c4 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 3792 10c8 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 3793 10cc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3794              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3795              		.loc 1 533 17 view .LVU1018
 3796 10d0 0020A0D3 		movle	r2, #0	@ iftmp.32_32,
 3797              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3798              		.loc 1 533 27 view .LVU1019
 3799 10d4 080000DA 		ble	.L257		@,
 3800              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3801              		.loc 1 533 17 discriminator 1 view .LVU1020
 3802 10d8 1C7A9FED 		vldr.32	s14, .L280+24	@ tmp164,
 3803 10dc C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 3804 10e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3805              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3806              		.loc 1 533 60 discriminator 1 view .LVU1021
 3807 10e4 1A7A9F4D 		vldrmi.32	s14, .L280+28	@ tmp166,
 3808              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3809              		.loc 1 533 17 discriminator 1 view .LVU1022
 3810 10e8 FF20A053 		movpl	r2, #255	@ iftmp.32_32,
 3811              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3812              		.loc 1 533 60 discriminator 1 view .LVU1023
 3813 10ec 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 3814              	@ armwave.c:533:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3815              		.loc 1 533 17 discriminator 1 view .LVU1024
 3816 10f0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 3817 10f4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 3818 10f8 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.32_32, %sfp
 3819              	.L257:
 3820              	.LVL295:
 534:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3821              		.loc 1 534 13 is_stmt 1 discriminator 12 view .LVU1025
 3822              	@ armwave.c:534:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3823              		.loc 1 534 37 is_stmt 0 discriminator 12 view .LVU1026
 3824 10fc 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3825              	@ armwave.c:534:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3826              		.loc 1 534 69 discriminator 12 view .LVU1027
 3827 1100 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3828 1104 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, test_wave_buffer
 3829 1108 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.32_32, *_21
 3830              	@ armwave.c:510:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 510:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3831              		.loc 1 510 39 discriminator 12 view .LVU1028
 3832 110c 383095E5 		ldr	r3, [r5, #56]	@ prephitmp_70, g_armwave_state.wave_length
 3833              	@ armwave.c:510:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 510:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3834              		.loc 1 510 54 discriminator 12 view .LVU1029
 3835 1110 014084E2 		add	r4, r4, #1	@ x, x,
 3836              	.LVL296:
 3837              	@ armwave.c:510:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 510:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3838              		.loc 1 510 9 discriminator 12 view .LVU1030
 3839 1114 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 3840 1118 C9FFFF8A 		bhi	.L260		@,
 3841 111c 242095E5 		ldr	r2, [r5, #36]	@ prephitmp_33, g_armwave_state.waves
 3842              	.LVL297:
 3843              	.L261:
 3844              	@ armwave.c:509:     for(w = 0; w < g_armwave_state.waves; w++) {
 509:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3845              		.loc 1 509 44 discriminator 2 view .LVU1031
 3846 1120 016086E2 		add	r6, r6, #1	@ w, w,
 3847              	.LVL298:
 3848              	@ armwave.c:509:     for(w = 0; w < g_armwave_state.waves; w++) {
 509:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3849              		.loc 1 509 5 discriminator 2 view .LVU1032
 3850 1124 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 3851 1128 BFFFFF3A 		bcc	.L254		@,
 3852              	.LVL299:
 3853              	.L252:
 3854              	@ armwave.c:537: }
 535:armwave.c     ****         }
 536:armwave.c     ****     }
 537:armwave.c     **** }
 3855              		.loc 1 537 1 view .LVU1033
 3856 112c 0CD08DE2 		add	sp, sp, #12	@,,
 3857              		.cfi_def_cfa_offset 60
 3858              		@ sp needed	@
 3859 1130 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 3860              		.cfi_restore 88
 3861              		.cfi_restore 89
 3862              		.cfi_restore 86
 3863              		.cfi_restore 87
 3864              		.cfi_restore 84
 3865              		.cfi_restore 85
 3866              		.cfi_restore 82
 3867              		.cfi_restore 83
 3868              		.cfi_restore 80
 3869              		.cfi_restore 81
 3870              		.cfi_def_cfa_offset 20
 3871 1134 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 3872              	.L281:
 3873              		.align	2
 3874              	.L280:
 3875 1138 CDCC4C3F 		.word	1061997773
 3876 113c 0000403F 		.word	1061158912
 3877 1140 CDCC4C3E 		.word	1045220557
 3878 1144 0000803E 		.word	1048576000
 3879 1148 0000003F 		.word	1056964608
 3880 114c 00004040 		.word	1077936128
 3881 1150 0000803F 		.word	1065353216
 3882 1154 00007F43 		.word	1132396544
 3883 1158 00000000 		.word	g_armwave_state
 3884 115c 00000000 		.word	test_wave_buffer
 3885              		.cfi_endproc
 3886              	.LFE76:
 3888              		.align	2
 3889              		.global	armwave_cleanup
 3890              		.syntax unified
 3891              		.arm
 3892              		.fpu vfp
 3894              	armwave_cleanup:
 3895              	.LFB77:
 538:armwave.c     **** 
 539:armwave.c     **** /*
 540:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 541:armwave.c     ****  */
 542:armwave.c     **** void armwave_cleanup()
 543:armwave.c     **** {
 3896              		.loc 1 543 1 is_stmt 1 view -0
 3897              		.cfi_startproc
 3898              		@ args = 0, pretend = 0, frame = 0
 3899              		@ frame_needed = 0, uses_anonymous_args = 0
 544:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3900              		.loc 1 544 5 view .LVU1035
 3901              	@ armwave.c:543: {
 543:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3902              		.loc 1 543 1 is_stmt 0 view .LVU1036
 3903 1160 10402DE9 		push	{r4, lr}	@
 3904              		.cfi_def_cfa_offset 8
 3905              		.cfi_offset 4, -8
 3906              		.cfi_offset 14, -4
 3907              	@ armwave.c:544:     free(g_armwave_state.out_pixbuf);
 3908              		.loc 1 544 25 view .LVU1037
 3909 1164 28409FE5 		ldr	r4, .L284	@ tmp113,
 3910              	@ armwave.c:544:     free(g_armwave_state.out_pixbuf);
 3911              		.loc 1 544 5 view .LVU1038
 3912 1168 540094E5 		ldr	r0, [r4, #84]	@, g_armwave_state.out_pixbuf
 3913 116c FEFFFFEB 		bl	free		@
 3914              	.LVL300:
 545:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3915              		.loc 1 545 5 is_stmt 1 view .LVU1039
 3916 1170 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3917 1174 FEFFFFEB 		bl	free		@
 3918              	.LVL301:
 546:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3919              		.loc 1 546 5 view .LVU1040
 3920 1178 700094E5 		ldr	r0, [r4, #112]	@, g_armwave_state.xcoord_to_xpixel
 3921 117c FEFFFFEB 		bl	free		@
 3922              	.LVL302:
 547:armwave.c     **** 
 548:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3923              		.loc 1 548 5 view .LVU1041
 3924              	@ armwave.c:548:     g_armwave_state.out_pixbuf = NULL;
 3925              		.loc 1 548 32 is_stmt 0 view .LVU1042
 3926 1180 0030A0E3 		mov	r3, #0	@ tmp120,
 3927 1184 543084E5 		str	r3, [r4, #84]	@ tmp120, g_armwave_state.out_pixbuf
 549:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3928              		.loc 1 549 5 is_stmt 1 view .LVU1043
 3929              	@ armwave.c:549:     g_armwave_state.ch1_buffer = NULL;
 3930              		.loc 1 549 32 is_stmt 0 view .LVU1044
 3931 1188 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 550:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3932              		.loc 1 550 5 is_stmt 1 view .LVU1045
 3933              	@ armwave.c:550:     g_armwave_state.xcoord_to_xpixel = NULL;
 3934              		.loc 1 550 38 is_stmt 0 view .LVU1046
 3935 118c 703084E5 		str	r3, [r4, #112]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3936              	@ armwave.c:551: }
 551:armwave.c     **** }
 3937              		.loc 1 551 1 view .LVU1047
 3938 1190 1080BDE8 		pop	{r4, pc}	@
 3939              	.L285:
 3940              		.align	2
 3941              	.L284:
 3942 1194 00000000 		.word	g_armwave_state
 3943              		.cfi_endproc
 3944              	.LFE77:
 3946              		.comm	gamma_table,256,4
 3947              		.comm	test_wave_buffer,4,4
 3948              		.comm	g_armwave_state,116,4
 3949              		.section	.rodata
 3950              		.align	2
 3951              		.set	.LANCHOR0,. + 0
 3954              	__PRETTY_FUNCTION__.17016:
 3955 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3955      6176655F 
 3955      66696C6C 
 3955      5F706978 
 3955      6275665F 
 3958              	__PRETTY_FUNCTION__.17047:
 3959 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3959      6176655F 
 3959      66696C6C 
 3959      5F706978 
 3959      6275665F 
 3960 0033 00       		.space	1
 3963              	__PRETTY_FUNCTION__.17069:
 3964 0034 61726D77 		.ascii	"armwave_setup_render\000"
 3964      6176655F 
 3964      73657475 
 3964      705F7265 
 3964      6E646572 
 3965 0049 000000   		.space	3
 3968              	__PRETTY_FUNCTION__.17076:
 3969 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3969      6176655F 
 3969      7365745F 
 3969      77617665 
 3969      5F706F69 
 3970 0065 000000   		.space	3
 3973              	__PRETTY_FUNCTION__.17082:
 3974 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3974      6176655F 
 3974      7365745F 
 3974      77617665 
 3974      5F706F69 
 3975              		.section	.rodata.str1.4,"aMS",%progbits,1
 3976              		.align	2
 3977              	.LC0:
 3978 0000 76302E30 		.ascii	"v0.0.1\000"
 3978      2E3100
 3979 0007 00       		.space	1
 3980              	.LC1:
 3981 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3981      61766520 
 3981      76657273 
 3981      696F6E3A 
 3981      2025730A 
 3982 001d 000000   		.space	3
 3983              	.LC2:
 3984 0020 6368315F 		.ascii	"ch1_buffer=0x%08x\012\000"
 3984      62756666 
 3984      65723D30 
 3984      78253038 
 3984      780A00
 3985 0033 00       		.space	1
 3986              	.LC3:
 3987 0034 77617665 		.ascii	"wave_buffer=0x%08x\012\000"
 3987      5F627566 
 3987      6665723D 
 3987      30782530 
 3987      38780A00 
 3988              	.LC4:
 3989 0048 61726D77 		.ascii	"armwave.c\000"
 3989      6176652E 
 3989      6300
 3990 0052 0000     		.space	2
 3991              	.LC5:
 3992 0054 6F75745F 		.ascii	"out_buffer != NULL\000"
 3992      62756666 
 3992      65722021 
 3992      3D204E55 
 3992      4C4C00
 3993 0067 00       		.space	1
 3994              	.LC6:
 3995 0068 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3995      20653D25 
 3995      6420773D 
 3995      25642077 
 3995      733D2564 
 3996              	.LC7:
 3997 0094 73746172 		.ascii	"start_point < end_point\000"
 3997      745F706F 
 3997      696E7420 
 3997      3C20656E 
 3997      645F706F 
 3998              	.LC8:
 3999 00ac 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3999      65745F68 
 3999      65696768 
 3999      74203D3D 
 3999      20323536 
 4000 00df 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4000      68656967 
 4000      6874203D 
 4000      3D203130 
 4000      3234207C 
 4001 010b 00       		.space	1
 4002              	.LC9:
 4003 010c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4003      7566665F 
 4003      73697A65 
 4003      3D25640A 
 4003      00
 4004 011d 000000   		.space	3
 4005              	.LC10:
 4006 0120 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4006      6D776176 
 4006      655F7374 
 4006      6174652E 
 4006      6368315F 
 4007 0143 00       		.space	1
 4008              	.LC11:
 4009 0144 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4009      6D776176 
 4009      655F7374 
 4009      6174652E 
 4009      78636F6F 
 4010 016d 000000   		.space	3
 4011              	.LC12:
 4012 0170 77617665 		.ascii	"wave_buffer != NULL\000"
 4012      5F627566 
 4012      66657220 
 4012      213D204E 
 4012      554C4C00 
 4013              	.LC13:
 4014 0184 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4014      5F627566 
 4014      6665725F 
 4014      70747220 
 4014      213D2030 
 4015 0199 000000   		.space	3
 4016              	.LC14:
 4017 019c 776200   		.ascii	"wb\000"
 4018 019f 00       		.space	1
 4019              	.LC15:
 4020 01a0 50330A00 		.ascii	"P3\012\000"
 4021              	.LC16:
 4022 01a4 25642025 		.ascii	"%d %d\012\000"
 4022      640A00
 4023 01ab 00       		.space	1
 4024              	.LC17:
 4025 01ac 3235350A 		.ascii	"255\012\000"
 4025      00
 4026 01b1 000000   		.space	3
 4027              	.LC18:
 4028 01b4 25336420 		.ascii	"%3d %3d %3d\012\000"
 4028      25336420 
 4028      2533640A 
 4028      00
 4029 01c1 000000   		.space	3
 4030              	.LC19:
 4031 01c4 61726D77 		.ascii	"armwave_test_init: failed to allocate test wave buf"
 4031      6176655F 
 4031      74657374 
 4031      5F696E69 
 4031      743A2066 
 4032 01f7 66657220 		.ascii	"fer (%d bytes)\012\000"
 4032      28256420 
 4032      62797465 
 4032      73290A00 
 4033 0207 00       		.space	1
 4034              	.LC20:
 4035 0208 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4035      6176655F 
 4035      74657374 
 4035      5F67656E 
 4035      65726174 
 4036 0236 0000     		.space	2
 4037              	.LC21:
 4038 0238 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4038      6176655F 
 4038      66696C6C 
 4038      5F706978 
 4038      6275665F 
 4039 0261 000000   		.space	3
 4040              	.LC22:
 4041 0264 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4041      6176655F 
 4041      66696C6C 
 4041      5F706978 
 4041      6275665F 
 4042 0297 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4042      20666169 
 4042      6C65642C 
 4042      20726574 
 4042      75726E69 
 4043 02b6 0000     		.space	2
 4044              	.LC23:
 4045 02b8 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4045      6176655F 
 4045      66696C6C 
 4045      5F706978 
 4045      6275665F 
 4046 02eb 00       		.ascii	"\000"
 4047              	.LC24:
 4048 02ec 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4048      6176655F 
 4048      66696C6C 
 4048      5F706978 
 4048      6275665F 
 4049              		.text
 4050              	.Letext0:
 4051              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4052              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4053              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4054              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4055              		.file 7 "/usr/include/stdio.h"
 4056              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4057              		.file 9 "/usr/include/errno.h"
 4058              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4059              		.file 11 "/usr/include/unistd.h"
 4060              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4061              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4062              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4063              		.file 15 "/usr/include/math.h"
 4064              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4065              		.file 17 "/usr/include/time.h"
 4066              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4067              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4068              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4069              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4070              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4071              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4072              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4073              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4074              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4075              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4076              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4077              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4078              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4079              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4080              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4081              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4082              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4083              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4084              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4085              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4086              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4087              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4088              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4089              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4090              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4091              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4092              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4093              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4094              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4095              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4096              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4097              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4098              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4099              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4100              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4101              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4102              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4103              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4104              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4105              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4106              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4107              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4108              		.file 60 "/usr/local/include/python3.8/context.h"
 4109              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4110              		.file 62 "/usr/local/include/python3.8/code.h"
 4111              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4112              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4113              		.file 65 "/usr/local/include/python3.8/import.h"
 4114              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4115              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4116              		.file 68 "armwave.h"
 4117              		.file 69 "/usr/include/stdlib.h"
 4118              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4119              		.file 71 "/usr/include/assert.h"
 4120              		.file 72 "<built-in>"
 4121              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
