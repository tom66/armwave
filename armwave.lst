   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB71:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)		__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)		__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 143:armwave.c     ****             	word >>= 8;
 144:armwave.c     ****     		}
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 156 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 167:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 168:armwave.c     **** 
 169:armwave.c     ****     if(target_height == 256) {
 170:armwave.c     ****     	g_armwave_state.row_shift = 8;
 102              		.loc 1 170 32 view .LVU6
 103 0004 0820A0E3 		mov	r2, #8	@ tmp129,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 04419FE5 		ldr	r4, .L12	@ tmp175,
 107 000c 04119FE5 		ldr	r1, .L12+4	@ tmp127,
 108              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 109              		.loc 1 171 31 view .LVU8
 110 0010 FF30A0E3 		mov	r3, #255	@ tmp131,
 111              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 172:armwave.c     ****     } else if(target_height == 512) {
 173:armwave.c     ****     	g_armwave_state.row_shift = 9;
 174:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 175:armwave.c     ****     } else if(target_height == 1024) {
 176:armwave.c     ****     	g_armwave_state.row_shift = 10;
 177:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 178:armwave.c     ****     } else if(target_height == 2048) {
 179:armwave.c     ****     	g_armwave_state.row_shift = 11;
 180:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 181:armwave.c     ****     } 
 182:armwave.c     **** 
 183:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 184:armwave.c     ****     g_armwave_state.xstride = target_height;
 185:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 186:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 187:armwave.c     ****     g_armwave_state.waves = waves;
 188:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 189:armwave.c     ****     g_armwave_state.target_width = target_width;
 190:armwave.c     ****     g_armwave_state.target_height = target_height;
 191:armwave.c     **** 
 192:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 193:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 194:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 195:armwave.c     ****     g_armwave_state.slice_height = 64;  
 196:armwave.c     **** 
 197:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 197 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 114              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 115              		.loc 1 185 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp135,
 117              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 118              		.loc 1 164 33 view .LVU11
 119 001c 141084E5 		str	r1, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 120              		.loc 1 167 5 is_stmt 1 view .LVU12
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 121              		.loc 1 169 5 view .LVU13
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 122              		.loc 1 170 6 view .LVU14
 123              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 124              		.loc 1 170 32 is_stmt 0 view .LVU15
 125 0020 3C2084E5 		str	r2, [r4, #60]	@ tmp129, g_armwave_state.row_shift
 171:armwave.c     ****     } else if(target_height == 512) {
 126              		.loc 1 171 6 is_stmt 1 view .LVU16
 127              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 128              		.loc 1 184 29 is_stmt 0 view .LVU17
 129 0024 011CA0E3 		mov	r1, #256	@ tmp133,
 130              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 131              		.loc 1 186 33 view .LVU18
 132 0028 022BA0E3 		mov	r2, #2048	@ tmp137,
 133              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 134              		.loc 1 171 31 view .LVU19
 135 002c 403084E5 		str	r3, [r4, #64]	@ tmp131, g_armwave_state.row_mask
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 136              		.loc 1 184 5 is_stmt 1 view .LVU20
 137              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 138              		.loc 1 188 26 is_stmt 0 view .LVU21
 139 0030 0257A0E3 		mov	r5, #524288	@ tmp141,
 140              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 141              		.loc 1 187 27 view .LVU22
 142 0034 4030A0E3 		mov	r3, #64	@ tmp139,
 143              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 144              		.loc 1 197 7 view .LVU23
 145 0038 000050E3 		cmp	r0, #0	@ _9,
 146              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 147              		.loc 1 185 28 view .LVU24
 148 003c 1CC084E5 		str	ip, [r4, #28]	@ tmp135, g_armwave_state.vscale
 149              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 150              		.loc 1 184 29 view .LVU25
 151 0040 181084E5 		str	r1, [r4, #24]	@ tmp133, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 152              		.loc 1 185 5 is_stmt 1 view .LVU26
 186:armwave.c     ****     g_armwave_state.waves = waves;
 153              		.loc 1 186 5 view .LVU27
 154              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 155              		.loc 1 190 35 is_stmt 0 view .LVU28
 156 0044 381084E5 		str	r1, [r4, #56]	@ tmp133, g_armwave_state.target_height
 157              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 158              		.loc 1 186 33 view .LVU29
 159 0048 202084E5 		str	r2, [r4, #32]	@ tmp137, g_armwave_state.wave_stride
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 160              		.loc 1 187 5 is_stmt 1 view .LVU30
 161              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 162              		.loc 1 189 34 is_stmt 0 view .LVU31
 163 004c 342084E5 		str	r2, [r4, #52]	@ tmp137, g_armwave_state.target_width
 164              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 165              		.loc 1 187 27 view .LVU32
 166 0050 243084E5 		str	r3, [r4, #36]	@ tmp139, g_armwave_state.waves
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 167              		.loc 1 188 5 is_stmt 1 view .LVU33
 168              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 169              		.loc 1 195 34 is_stmt 0 view .LVU34
 170 0054 283084E5 		str	r3, [r4, #40]	@ tmp139, g_armwave_state.slice_height
 171              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 172              		.loc 1 188 26 view .LVU35
 173 0058 305084E5 		str	r5, [r4, #48]	@ tmp141, g_armwave_state.size
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 174              		.loc 1 189 5 is_stmt 1 view .LVU36
 190:armwave.c     **** 
 175              		.loc 1 190 5 view .LVU37
 195:armwave.c     **** 
 176              		.loc 1 195 5 view .LVU38
 177              		.loc 1 197 5 view .LVU39
 178              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 179              		.loc 1 197 7 is_stmt 0 view .LVU40
 180 005c 0100000A 		beq	.L2		@,
 198:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 181              		.loc 1 198 9 is_stmt 1 view .LVU41
 182 0060 FEFFFFEB 		bl	free		@
 183              	.LVL1:
 184 0064 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_5, g_armwave_state.size
 185              	.L2:
 199:armwave.c     **** 
 200:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186              		.loc 1 200 5 view .LVU42
 187              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 188              		.loc 1 200 34 is_stmt 0 view .LVU43
 189 0068 0110A0E3 		mov	r1, #1	@,
 190 006c 0500A0E1 		mov	r0, r5	@, prephitmp_5
 191 0070 FEFFFFEB 		bl	calloc		@
 192              	.LVL2:
 193              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 201 33 view .LVU44
 195 0074 A0209FE5 		ldr	r2, .L12+8	@ tmp153,
 196              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 202:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 203:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 203 33 view .LVU45
 198 0078 FA30A0E3 		mov	r3, #250	@ tmp156,
 199              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 200              		.loc 1 201 33 view .LVU46
 201 007c 482084E5 		str	r2, [r4, #72]	@ tmp153, MEM[(short int *)&g_armwave_state + 72B]
 202              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203              		.loc 1 203 33 view .LVU47
 204 0080 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp156, g_armwave_state.ch1_color.b
 205              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 204:armwave.c     **** 
 205:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 206              		.loc 1 205 5 view .LVU48
 207 0084 000050E3 		cmp	r0, #0	@ tmp150,
 208              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 209              		.loc 1 200 32 view .LVU49
 210 0088 040084E5 		str	r0, [r4, #4]	@ tmp150, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 211              		.loc 1 201 5 is_stmt 1 view .LVU50
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 212              		.loc 1 202 5 view .LVU51
 203:armwave.c     **** 
 213              		.loc 1 203 5 view .LVU52
 214              		.loc 1 205 5 view .LVU53
 215 008c 1600000A 		beq	.L10		@,
 206:armwave.c     **** 
 207:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 208:armwave.c     ****     length = end_point - start_point;
 216              		.loc 1 208 5 view .LVU54
 217              	.LVL3:
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 218              		.loc 1 209 5 view .LVU55
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 219              		.loc 1 210 5 view .LVU56
 220              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 221              		.loc 1 210 60 is_stmt 0 view .LVU57
 222 0090 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp177, g_armwave_state.slice_height
 223              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 224              		.loc 1 211 40 view .LVU58
 225 0094 010AA0E3 		mov	r0, #4096	@,
 226              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 227              		.loc 1 210 60 view .LVU59
 228 0098 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp162, tmp177
 229              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 230              		.loc 1 210 41 view .LVU60
 231 009c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp164, tmp162
 232 00a0 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp164, g_armwave_state.slice_record_height
 233              		.loc 1 211 5 is_stmt 1 view .LVU61
 234              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 235              		.loc 1 211 40 is_stmt 0 view .LVU62
 236 00a4 FEFFFFEB 		bl	malloc		@
 237              	.LVL4:
 238              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 212:armwave.c     **** 
 213:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 239              		.loc 1 213 5 view .LVU63
 240 00a8 000050E3 		cmp	r0, #0	@ tmp165,
 241              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 242              		.loc 1 211 38 view .LVU64
 243 00ac 600084E5 		str	r0, [r4, #96]	@ tmp165, g_armwave_state.xcoord_to_xpixel
 244              		.loc 1 213 5 is_stmt 1 view .LVU65
 245              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 214:armwave.c     **** 
 215:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 246              		.loc 1 215 12 is_stmt 0 view .LVU66
 247 00b0 0030A013 		movne	r3, #0	@ xx,
 248 00b4 02004012 		subne	r0, r0, #2	@ ivtmp.23, tmp165,
 249              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 213:armwave.c     **** 
 250              		.loc 1 213 5 view .LVU67
 251 00b8 1000000A 		beq	.L11		@,
 252              	.L5:
 253              	.LVL5:
 216:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 216 9 is_stmt 1 view .LVU68
 255              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 256              		.loc 1 216 74 is_stmt 0 view .LVU69
 257 00bc 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 258              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 215 32 view .LVU70
 260 00c0 013083E2 		add	r3, r3, #1	@ xx, xx,
 261              	.LVL6:
 262              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 263              		.loc 1 215 5 view .LVU71
 264 00c4 020B53E3 		cmp	r3, #2048	@ xx,
 265              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 266              		.loc 1 216 74 view .LVU72
 267 00c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp170, xx
 268              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 269              		.loc 1 216 46 view .LVU73
 270 00cc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp171, tmp170
 271 00d0 902A17EE 		vmov	r2, s15	@ int	@ tmp171, tmp171
 272 00d4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp171, MEM[base: _25, offset: 0B]
 273              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274              		.loc 1 215 5 view .LVU74
 275 00d8 F7FFFF1A 		bne	.L5		@,
 217:armwave.c     **** 
 218:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 219:armwave.c     ****     }
 220:armwave.c     **** 
 221:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 276              		.loc 1 221 5 is_stmt 1 view .LVU75
 277              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 278              		.loc 1 221 34 is_stmt 0 view .LVU76
 279 00dc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_5,
 280 00e0 FEFFFFEB 		bl	malloc		@
 281              	.LVL7:
 282              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 283              		.loc 1 221 32 view .LVU77
 284 00e4 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 285              	@ armwave.c:222: }
 222:armwave.c     **** }
 286              		.loc 1 222 1 view .LVU78
 287 00e8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 288              	.LVL8:
 289              	.L10:
 205:armwave.c     **** 
 290              		.loc 1 205 5 is_stmt 1 view .LVU79
 291 00ec 2C309FE5 		ldr	r3, .L12+12	@,
 292 00f0 CD20A0E3 		mov	r2, #205	@,
 293 00f4 28109FE5 		ldr	r1, .L12+16	@,
 294 00f8 28009FE5 		ldr	r0, .L12+20	@,
 295 00fc FEFFFFEB 		bl	__assert_fail		@
 296              	.LVL9:
 297              	.L11:
 213:armwave.c     **** 
 298              		.loc 1 213 5 view .LVU80
 299 0100 18309FE5 		ldr	r3, .L12+12	@,
 300 0104 D520A0E3 		mov	r2, #213	@,
 301 0108 14109FE5 		ldr	r1, .L12+16	@,
 302 010c 18009FE5 		ldr	r0, .L12+24	@,
 303 0110 FEFFFFEB 		bl	__assert_fail		@
 304              	.LVL10:
 305              	.L13:
 306              		.align	2
 307              	.L12:
 308 0114 00000000 		.word	g_armwave_state
 309 0118 00000000 		.word	test_wave_buffer
 310 011c F609F406 		.word	116656630
 311 0120 00000000 		.word	.LANCHOR0
 312 0124 00000000 		.word	.LC0
 313 0128 0C000000 		.word	.LC1
 314 012c 30000000 		.word	.LC2
 315              		.cfi_endproc
 316              	.LFE71:
 318              		.align	2
 319              		.global	test_create_waveform
 320              		.syntax unified
 321              		.arm
 322              		.fpu vfp
 324              	test_create_waveform:
 325              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 326              		.loc 1 51 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 8
 329              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 330              		.loc 1 52 5 view .LVU82
  53:armwave.c     **** 
 331              		.loc 1 53 5 view .LVU83
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 332              		.loc 1 55 5 view .LVU84
 333              	.LVL11:
 334              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 335              		.loc 1 51 1 is_stmt 0 view .LVU85
 336 0130 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 337              		.cfi_def_cfa_offset 36
 338              		.cfi_offset 4, -36
 339              		.cfi_offset 5, -32
 340              		.cfi_offset 6, -28
 341              		.cfi_offset 7, -24
 342              		.cfi_offset 8, -20
 343              		.cfi_offset 9, -16
 344              		.cfi_offset 10, -12
 345              		.cfi_offset 11, -8
 346              		.cfi_offset 14, -4
 347 0134 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 348              		.cfi_def_cfa_offset 84
 349              		.cfi_offset 80, -84
 350              		.cfi_offset 81, -80
 351              		.cfi_offset 82, -76
 352              		.cfi_offset 83, -72
 353              		.cfi_offset 84, -68
 354              		.cfi_offset 85, -64
 355              		.cfi_offset 86, -60
 356              		.cfi_offset 87, -56
 357              		.cfi_offset 88, -52
 358              		.cfi_offset 89, -48
 359              		.cfi_offset 90, -44
 360              		.cfi_offset 91, -40
 361 0138 5C819FE5 		ldr	r8, .L33+40	@ _75,
 362              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 363              		.loc 1 56 33 view .LVU86
 364 013c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 365 0140 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.39, _75,
 366              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 367              		.loc 1 56 13 view .LVU87
 368 0144 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 369              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 370              		.loc 1 60 20 view .LVU88
 371 0148 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 372              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 373              		.loc 1 71 29 view .LVU89
 374 014c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 375              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 376              		.loc 1 71 33 view .LVU90
 377 0150 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 378              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 379              		.loc 1 69 20 view .LVU91
 380 0154 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 381 0158 02B886E2 		add	fp, r6, #131072	@ _81,,
 382 015c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 383              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 384              		.loc 1 51 1 view .LVU92
 385 0160 0CD04DE2 		sub	sp, sp, #12	@,,
 386              		.cfi_def_cfa_offset 96
 387 0164 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 388 0168 0F6086E2 		add	r6, r6, #15	@ ivtmp.39, ivtmp.39,
 389 016c 008068E2 		rsb	r8, r8, #0	@ ivtmp.42, _75
 390              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 391              		.loc 1 55 11 view .LVU93
 392 0170 0090A0E3 		mov	r9, #0	@ w,
 393              	.LVL12:
 394              	.L20:
  56:armwave.c     ****         //mod = 1.0f;
 395              		.loc 1 56 9 is_stmt 1 view .LVU94
 396              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 397              		.loc 1 56 24 is_stmt 0 view .LVU95
 398 0174 909A07EE 		vmov	s15, r9	@ int	@ w, w
 399              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 400              		.loc 1 56 48 view .LVU96
 401 0178 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 402              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 403              		.loc 1 56 13 view .LVU97
 404 017c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 405              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 406              		.loc 1 68 19 view .LVU98
 407 0180 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 408              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 409              		.loc 1 56 24 view .LVU99
 410 0184 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 411              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 412              		.loc 1 73 58 view .LVU100
 413 0188 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 414 018c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.32, ivtmp.39,
 415 0190 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.42,
 416              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 417              		.loc 1 56 33 view .LVU101
 418 0194 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 419              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 420              		.loc 1 56 13 view .LVU102
 421 0198 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 422              	.LVL13:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 423              		.loc 1 59 9 is_stmt 1 view .LVU103
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 424              		.loc 1 59 9 is_stmt 0 view .LVU104
 425 019c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 426              	.LVL14:
 427              	.L19:
 428              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 429              		.loc 1 60 24 view .LVU105
 430 01a0 FEFFFFEB 		bl	rand		@
 431              	.LVL15:
 432 01a4 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.32
 433              	.LVL16:
  60:armwave.c     ****             noise *= noise;
 434              		.loc 1 60 13 is_stmt 1 view .LVU106
 435              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 436              		.loc 1 60 31 is_stmt 0 view .LVU107
 437 01a8 7000FFE6 		uxth	r0, r0	@ tmp163,
 438              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 439              		.loc 1 60 41 view .LVU108
 440 01ac 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 441 01b0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 442              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 443              		.loc 1 60 20 view .LVU109
 444 01b4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 445              	.LVL17:
  61:armwave.c     ****             noise *= noise;
 446              		.loc 1 61 13 is_stmt 1 view .LVU110
 447              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 448              		.loc 1 61 19 is_stmt 0 view .LVU111
 449 01b8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 450              	.LVL18:
  62:armwave.c     ****             noise *= noise;
 451              		.loc 1 62 13 is_stmt 1 view .LVU112
 452              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 453              		.loc 1 62 19 is_stmt 0 view .LVU113
 454 01bc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 455              	.LVL19:
  63:armwave.c     **** 
 456              		.loc 1 63 13 is_stmt 1 view .LVU114
 457              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 458              		.loc 1 63 19 is_stmt 0 view .LVU115
 459 01c0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 460              	.LVL20:
  65:armwave.c     ****                 noise = -noise;
 461              		.loc 1 65 13 is_stmt 1 view .LVU116
 462              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 463              		.loc 1 65 17 is_stmt 0 view .LVU117
 464 01c4 FEFFFFEB 		bl	rand		@
 465              	.LVL21:
  66:armwave.c     **** 
 466              		.loc 1 66 17 is_stmt 1 view .LVU118
 467              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 468              		.loc 1 65 15 is_stmt 0 view .LVU119
 469 01c8 020910E3 		tst	r0, #32768	@,
 470              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 471              		.loc 1 66 23 view .LVU120
 472 01cc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 473              	.LVL22:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 474              		.loc 1 68 13 is_stmt 1 view .LVU121
  69:armwave.c     **** 
 475              		.loc 1 69 13 view .LVU122
 476              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 477              		.loc 1 69 23 is_stmt 0 view .LVU123
 478 01d0 FEFFFFEB 		bl	rand		@
 479              	.LVL23:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 480              		.loc 1 71 13 is_stmt 1 view .LVU124
 481              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 482              		.loc 1 71 29 is_stmt 0 view .LVU125
 483 01d4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 484 01d8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 485 01dc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 486              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 487              		.loc 1 69 30 view .LVU126
 488 01e0 7000FFE6 		uxth	r0, r0	@ tmp173,
 489              	.LVL24:
 490              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 491              		.loc 1 69 40 view .LVU127
 492 01e4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 493 01e8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 494              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 495              		.loc 1 69 20 view .LVU128
 496 01ec 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 497              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 498              		.loc 1 71 60 view .LVU129
 499 01f0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 500              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 501              		.loc 1 71 18 view .LVU130
 502 01f4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 503 01f8 FEFFFFEB 		bl	sin		@
 504              	.LVL25:
  73:armwave.c     ****         }
 505              		.loc 1 73 13 is_stmt 1 view .LVU131
 506              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 507              		.loc 1 68 19 is_stmt 0 view .LVU132
 508 01fc 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 509              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 510              		.loc 1 73 58 view .LVU133
 511 0200 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 512              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 513              		.loc 1 73 56 view .LVU134
 514 0204 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 515 0208 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 516              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 517              		.loc 1 71 77 view .LVU135
 518 020c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 519              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 520              		.loc 1 71 70 view .LVU136
 521 0210 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 522              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 523              		.loc 1 71 77 view .LVU137
 524 0214 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 525              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 526              		.loc 1 71 15 view .LVU138
 527 0218 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 528              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 529              		.loc 1 73 58 view .LVU139
 530 021c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 531 0220 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 532 0224 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 533 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 534 022c 050000DA 		ble	.L16		@,
 535              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 536              		.loc 1 73 56 discriminator 1 view .LVU140
 537 0230 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 538 0234 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 539 0238 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 540 023c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 541 0240 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 542 0244 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 543              	.L16:
 544              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 545              		.loc 1 73 56 discriminator 12 view .LVU141
 546 0248 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 547              	.LVL26:
 548              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 549              		.loc 1 59 9 discriminator 12 view .LVU142
 550 024c 060055E1 		cmp	r5, r6	@ ivtmp.32, ivtmp.39
 551 0250 D2FFFF1A 		bne	.L19		@,
 552 0254 026B85E2 		add	r6, r5, #2048	@ ivtmp.39, ivtmp.32,
 553              	.LVL27:
 554              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 555              		.loc 1 55 5 discriminator 2 view .LVU143
 556 0258 0B0056E1 		cmp	r6, fp	@ ivtmp.39, _81
 557              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 558              		.loc 1 55 34 discriminator 2 view .LVU144
 559 025c 019089E2 		add	r9, r9, #1	@ w, w,
 560              	.LVL28:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 561              		.loc 1 55 34 discriminator 2 view .LVU145
 562 0260 028B48E2 		sub	r8, r8, #2048	@ ivtmp.42, ivtmp.42,
 563              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 564              		.loc 1 55 5 discriminator 2 view .LVU146
 565 0264 C2FFFF1A 		bne	.L20		@,
 566              	@ armwave.c:76: }
  76:armwave.c     **** 
 567              		.loc 1 76 1 view .LVU147
 568 0268 0CD08DE2 		add	sp, sp, #12	@,,
 569              		.cfi_def_cfa_offset 84
 570              		@ sp needed	@
 571 026c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 572              		.cfi_restore 90
 573              		.cfi_restore 91
 574              		.cfi_restore 88
 575              		.cfi_restore 89
 576              		.cfi_restore 86
 577              		.cfi_restore 87
 578              		.cfi_restore 84
 579              		.cfi_restore 85
 580              		.cfi_restore 82
 581              		.cfi_restore 83
 582              		.cfi_restore 80
 583              		.cfi_restore 81
 584              		.cfi_def_cfa_offset 36
 585              	.LVL29:
  76:armwave.c     **** 
 586              		.loc 1 76 1 view .LVU148
 587 0270 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 588              	.LVL30:
 589              	.L34:
  76:armwave.c     **** 
 590              		.loc 1 76 1 view .LVU149
 591              		.align	2
 592              	.L33:
 593 0274 0000803C 		.word	1015021568
 594 0278 0000003F 		.word	1056964608
 595 027c 0050C347 		.word	1203982336
 596 0280 C3F5C840 		.word	1086911939
 597 0284 0000003A 		.word	973078528
 598 0288 38FFC74A 		.word	1254620984
 599 028c 0000803F 		.word	1065353216
 600 0290 0000FE42 		.word	1123942400
 601 0294 00000043 		.word	1124073472
 602 0298 00007F43 		.word	1132396544
 603 029c 00000000 		.word	test_wave_buffer
 604 02a0 00000000 		.word	.LANCHOR1
 605              		.cfi_endproc
 606              	.LFE57:
 608              		.align	2
 609              		.global	test_create_gamma
 610              		.syntax unified
 611              		.arm
 612              		.fpu vfp
 614              	test_create_gamma:
 615              	.LFB58:
  82:armwave.c     ****     int i;
 616              		.loc 1 82 1 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 620              		.loc 1 83 5 view .LVU151
  84:armwave.c     **** 
 621              		.loc 1 84 5 view .LVU152
 622              	.LVL31:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 623              		.loc 1 86 5 view .LVU153
 624              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 625              		.loc 1 82 1 is_stmt 0 view .LVU154
 626 02a4 70402DE9 		push	{r4, r5, r6, lr}	@
 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 4, -16
 629              		.cfi_offset 5, -12
 630              		.cfi_offset 6, -8
 631              		.cfi_offset 14, -4
 632 02a8 068B2DED 		vpush.64	{d8, d9, d10}	@
 633              		.cfi_def_cfa_offset 40
 634              		.cfi_offset 80, -40
 635              		.cfi_offset 81, -36
 636              		.cfi_offset 82, -32
 637              		.cfi_offset 83, -28
 638              		.cfi_offset 84, -24
 639              		.cfi_offset 85, -20
 640 02ac 68409FE5 		ldr	r4, .L39+20	@ ivtmp.50,
 641              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 642              		.loc 1 87 32 view .LVU155
 643 02b0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 644              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 645              		.loc 1 87 26 view .LVU156
 646 02b4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 647              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 648              		.loc 1 87 49 view .LVU157
 649 02b8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 650 02bc 015084E2 		add	r5, r4, #1	@ _25, ivtmp.50,
 651 02c0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.50,
 652 02c4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 653              	.LVL32:
 654              	.L36:
  87:armwave.c     ****     }
 655              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU158
 656              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 657              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU159
 658 02c8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.50
 659              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 660              		.loc 1 87 26 discriminator 3 view .LVU160
 661 02cc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 662              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 663              		.loc 1 87 32 discriminator 3 view .LVU161
 664 02d0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 665 02d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 666 02d8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 667              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 668              		.loc 1 87 26 discriminator 3 view .LVU162
 669 02dc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 670 02e0 FEFFFFEB 		bl	pow		@
 671              	.LVL33:
 672              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 673              		.loc 1 87 49 discriminator 3 view .LVU163
 674 02e4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 675              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 676              		.loc 1 87 24 discriminator 3 view .LVU164
 677 02e8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 678 02ec 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 679 02f0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 680              	.LVL34:
 681              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 682              		.loc 1 86 5 discriminator 3 view .LVU165
 683 02f4 060054E1 		cmp	r4, r6	@ ivtmp.50, _26
 684 02f8 F2FFFF1A 		bne	.L36		@,
 685              	@ armwave.c:89: }
  89:armwave.c     **** 
 686              		.loc 1 89 1 view .LVU166
 687 02fc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 688              		.cfi_restore 84
 689              		.cfi_restore 85
 690              		.cfi_restore 82
 691              		.cfi_restore 83
 692              		.cfi_restore 80
 693              		.cfi_restore 81
 694              		.cfi_def_cfa_offset 16
 695 0300 7080BDE8 		pop	{r4, r5, r6, pc}	@
 696              	.LVL35:
 697              	.L40:
  89:armwave.c     **** 
 698              		.loc 1 89 1 view .LVU167
 699 0304 0000A0E1 		.align	3
 700              	.L39:
 701 0308 000000C0 		.word	-1073741824
 702 030c CCCCEC3F 		.word	1072483532
 703 0310 00000000 		.word	0
 704 0314 00E06F40 		.word	1081073664
 705 0318 00007F43 		.word	1132396544
 706 031c FFFFFFFF 		.word	gamma_table-1
 707              		.cfi_endproc
 708              	.LFE58:
 710              		.align	2
 711              		.global	render_nonaa_to_buffer_1ch_slice
 712              		.syntax unified
 713              		.arm
 714              		.fpu vfp
 716              	render_nonaa_to_buffer_1ch_slice:
 717              	.LVL36:
 718              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 719              		.loc 1 99 1 is_stmt 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 723              		.loc 1 100 5 view .LVU169
 101:armwave.c     ****     uint8_t *wave_base;
 724              		.loc 1 101 5 view .LVU170
 102:armwave.c     ****     uint8_t *write_buffer_base;
 725              		.loc 1 102 5 view .LVU171
 103:armwave.c     ****     uint8_t *write_buffer;
 726              		.loc 1 103 5 view .LVU172
 104:armwave.c     ****     
 727              		.loc 1 104 5 view .LVU173
 106:armwave.c     **** 
 728              		.loc 1 106 5 view .LVU174
 729              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 730              		.loc 1 106 40 is_stmt 0 view .LVU175
 731 0320 F4209FE5 		ldr	r2, .L53	@ tmp257,
 732              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 733              		.loc 1 99 1 view .LVU176
 734 0324 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 735              		.cfi_def_cfa_offset 36
 736              		.cfi_offset 4, -36
 737              		.cfi_offset 5, -32
 738              		.cfi_offset 6, -28
 739              		.cfi_offset 7, -24
 740              		.cfi_offset 8, -20
 741              		.cfi_offset 9, -16
 742              		.cfi_offset 10, -12
 743              		.cfi_offset 11, -8
 744              		.cfi_offset 14, -4
 745              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 109 5 view .LVU177
 747 0328 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 748              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 749              		.loc 1 106 63 view .LVU178
 750 032c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 751              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 752              		.loc 1 109 5 view .LVU179
 753 0330 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 754              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 755              		.loc 1 106 40 view .LVU180
 756 0334 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 757              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 758              		.loc 1 106 63 view .LVU181
 759 0338 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 760              	.LVL37:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 761              		.loc 1 109 5 is_stmt 1 view .LVU182
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 762              		.loc 1 109 5 is_stmt 0 view .LVU183
 763 033c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 764 0340 000051E3 		cmp	r1, #0	@ height,
 765 0344 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 766 0348 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 767              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 768              		.loc 1 109 11 view .LVU184
 769 034c 0080A0E3 		mov	r8, #0	@ w,
 770              	.LVL38:
 771              	.L45:
 110:armwave.c     **** 
 772              		.loc 1 110 9 is_stmt 1 view .LVU185
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 773              		.loc 1 120 9 view .LVU186
 774              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 775              		.loc 1 110 64 is_stmt 0 view .LVU187
 776 0350 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 777 0354 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 778              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 779              		.loc 1 120 16 view .LVU188
 780 0358 0000A0E3 		mov	r0, #0	@ yy,
 781 035c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 782 0360 037087E0 		add	r7, r7, r3	@ ivtmp.56, g_armwave_state.wave_buffer, tmp195
 783              	.LVL39:
 784              	.L44:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 785              		.loc 1 135 13 is_stmt 1 view .LVU189
 786              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 787              		.loc 1 135 18 is_stmt 0 view .LVU190
 788 0364 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 789              	.LVL40:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 790              		.loc 1 139 13 is_stmt 1 view .LVU191
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 791              		.loc 1 140 14 view .LVU192
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 792              		.loc 1 141 14 view .LVU193
 142:armwave.c     ****             	word >>= 8;
 793              		.loc 1 142 14 view .LVU194
 794              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 140 42 is_stmt 0 view .LVU195
 796 0368 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 797              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 798              		.loc 1 141 60 view .LVU196
 799 036c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 800              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 801              		.loc 1 140 34 view .LVU197
 802 0370 73E0EFE6 		uxtb	lr, r3	@ word, word
 803              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 804              		.loc 1 143 19 view .LVU198
 805 0374 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 806              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 807              		.loc 1 142 44 view .LVU199
 808 0378 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 809              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 140 34 view .LVU200
 811 037c 7440EFE6 		uxtb	r4, r4	@ word, word
 812              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 813              		.loc 1 142 44 view .LVU201
 814 0380 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 815              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 816              		.loc 1 141 60 view .LVU202
 817 0384 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 818              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 819              		.loc 1 143 19 view .LVU203
 820 0388 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 821              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 822              		.loc 1 142 44 view .LVU204
 823 038c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 824              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 825              		.loc 1 140 34 view .LVU205
 826 0390 7EE0EFE6 		uxtb	lr, lr	@ word, word
 827              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 828              		.loc 1 143 19 view .LVU206
 829 0394 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 830              	.LVL41:
 831              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 832              		.loc 1 142 44 view .LVU207
 833 0398 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 834 039c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 835              	.LVL42:
 143:armwave.c     ****     		}
 836              		.loc 1 143 14 is_stmt 1 view .LVU208
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 837              		.loc 1 140 14 view .LVU209
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 838              		.loc 1 141 14 view .LVU210
 142:armwave.c     ****             	word >>= 8;
 839              		.loc 1 142 14 view .LVU211
 840              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 841              		.loc 1 140 42 is_stmt 0 view .LVU212
 842 03a0 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 843              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 844              		.loc 1 141 60 view .LVU213
 845 03a4 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 846              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 847              		.loc 1 142 44 view .LVU214
 848 03a8 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 849              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 850              		.loc 1 141 60 view .LVU215
 851 03ac 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 852              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 853              		.loc 1 142 44 view .LVU216
 854 03b0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 855              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 856              		.loc 1 141 60 view .LVU217
 857 03b4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 858              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 859              		.loc 1 120 37 view .LVU218
 860 03b8 040080E2 		add	r0, r0, #4	@ yy, yy,
 861              	.LVL43:
 862              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 863              		.loc 1 142 44 view .LVU219
 864 03bc 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 865              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 866              		.loc 1 120 9 view .LVU220
 867 03c0 000051E1 		cmp	r1, r0	@ height, yy
 868              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 869              		.loc 1 142 44 view .LVU221
 870 03c4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 871 03c8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 872              	.LVL44:
 143:armwave.c     ****     		}
 873              		.loc 1 143 14 is_stmt 1 view .LVU222
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 874              		.loc 1 140 14 view .LVU223
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 875              		.loc 1 141 14 view .LVU224
 142:armwave.c     ****             	word >>= 8;
 876              		.loc 1 142 14 view .LVU225
 877              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 878              		.loc 1 140 42 is_stmt 0 view .LVU226
 879 03cc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 880              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 881              		.loc 1 141 60 view .LVU227
 882 03d0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 883              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 884              		.loc 1 142 44 view .LVU228
 885 03d4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 886 03d8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 887 03dc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 888 03e0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 889 03e4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****     		}
 890              		.loc 1 143 14 is_stmt 1 view .LVU229
 891              	.LVL45:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 892              		.loc 1 140 14 view .LVU230
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 893              		.loc 1 141 14 view .LVU231
 142:armwave.c     ****             	word >>= 8;
 894              		.loc 1 142 14 view .LVU232
 895              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 896              		.loc 1 140 42 is_stmt 0 view .LVU233
 897 03e8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 898              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 899              		.loc 1 141 60 view .LVU234
 900 03ec 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 901              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 902              		.loc 1 142 44 view .LVU235
 903 03f0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 904 03f4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 905 03f8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 906 03fc 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 907 0400 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****     		}
 908              		.loc 1 143 14 is_stmt 1 view .LVU236
 909              	.LVL46:
 910              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 911              		.loc 1 120 9 is_stmt 0 view .LVU237
 912 0404 D6FFFF8A 		bhi	.L44		@,
 913              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 914              		.loc 1 109 5 view .LVU238
 915 0408 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 916              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 917              		.loc 1 109 44 view .LVU239
 918 040c 018088E2 		add	r8, r8, #1	@ w, w,
 919              	.LVL47:
 920              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 921              		.loc 1 109 5 view .LVU240
 922 0410 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 923 0414 CDFFFF3A 		bcc	.L45		@,
 924 0418 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 925              	.L54:
 926              		.align	2
 927              	.L53:
 928 041c 00000000 		.word	g_armwave_state
 929              		.cfi_endproc
 930              	.LFE59:
 932              		.align	2
 933              		.global	armwave_init
 934              		.syntax unified
 935              		.arm
 936              		.fpu vfp
 938              	armwave_init:
 939              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 940              		.loc 1 152 1 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 153:armwave.c     **** }
 945              		.loc 1 153 5 view .LVU242
 946              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 947              		.loc 1 153 27 is_stmt 0 view .LVU243
 948 0420 08309FE5 		ldr	r3, .L56	@ tmp110,
 949 0424 0020A0E3 		mov	r2, #0	@ tmp111,
 950 0428 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 951              	@ armwave.c:154: }
 154:armwave.c     **** 
 952              		.loc 1 154 1 view .LVU244
 953 042c 1EFF2FE1 		bx	lr	@
 954              	.L57:
 955              		.align	2
 956              	.L56:
 957 0430 00000000 		.word	g_armwave_state
 958              		.cfi_endproc
 959              	.LFE60:
 961              		.align	2
 962              		.global	armwave_setup_render
 963              		.syntax unified
 964              		.arm
 965              		.fpu vfp
 967              	armwave_setup_render:
 968              	.LVL48:
 969              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 970              		.loc 1 157 1 is_stmt 1 view -0
 971              		.cfi_startproc
 972              		@ args = 16, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 974              		.loc 1 158 5 view .LVU246
 159:armwave.c     **** 
 975              		.loc 1 159 5 view .LVU247
 161:armwave.c     **** 
 976              		.loc 1 161 5 view .LVU248
 977              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 157 1 is_stmt 0 view .LVU249
 979 0434 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 980              		.cfi_def_cfa_offset 24
 981              		.cfi_offset 4, -24
 982              		.cfi_offset 5, -20
 983              		.cfi_offset 6, -16
 984              		.cfi_offset 7, -12
 985              		.cfi_offset 8, -8
 986              		.cfi_offset 14, -4
 987              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 988              		.loc 1 161 5 view .LVU250
 989 0438 020051E1 		cmp	r1, r2	@ start_point, end_point
 990              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 991              		.loc 1 157 1 view .LVU251
 992 043c 028B2DED 		vpush.64	{d8}	@
 993              		.cfi_def_cfa_offset 32
 994              		.cfi_offset 80, -32
 995              		.cfi_offset 81, -28
 996              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 997              		.loc 1 157 1 view .LVU252
 998 0440 0180A0E1 		mov	r8, r1	@ start_point, start_point
 999 0444 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1000 0448 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1001              	.LVL49:
 157:armwave.c     ****     uint32_t length, xx;
 1002              		.loc 1 157 1 view .LVU253
 1003 044c 24709DE5 		ldr	r7, [sp, #36]	@ target_width, target_width
 1004 0450 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1005              	.LVL50:
 1006              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 1007              		.loc 1 161 5 view .LVU254
 1008 0454 6800002A 		bcs	.L74		@,
 164:armwave.c     **** 
 1009              		.loc 1 164 5 is_stmt 1 view .LVU255
 1010              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1011              		.loc 1 164 33 is_stmt 0 view .LVU256
 1012 0458 B4419FE5 		ldr	r4, .L79+4	@ tmp217,
 1013              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1014              		.loc 1 167 5 view .LVU257
 1015 045c 01CC42E2 		sub	ip, r2, #256	@ tmp151, target_height,
 1016 0460 01CCDCE3 		bics	ip, ip, #256	@ tmp219, tmp151,
 1017              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1018              		.loc 1 164 33 view .LVU258
 1019 0464 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1020              		.loc 1 167 5 is_stmt 1 view .LVU259
 1021 0468 4500000A 		beq	.L60		@,
 1022              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1023              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU260
 1024 046c 010B42E2 		sub	r0, r2, #1024	@ tmp153, target_height,
 1025              	.LVL51:
 167:armwave.c     **** 
 1026              		.loc 1 167 5 discriminator 1 view .LVU261
 1027 0470 010BD0E3 		bics	r0, r0, #1024	@ tmp220, tmp153,
 1028 0474 5100001A 		bne	.L75		@,
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 1029              		.loc 1 169 5 is_stmt 1 view .LVU262
 175:armwave.c     ****     	g_armwave_state.row_shift = 10;
 1030              		.loc 1 175 12 view .LVU263
 1031              	@ armwave.c:175:     } else if(target_height == 1024) {
 175:armwave.c     ****     	g_armwave_state.row_shift = 10;
 1032              		.loc 1 175 14 is_stmt 0 view .LVU264
 1033 0478 010B52E3 		cmp	r2, #1024	@ target_height,
 1034 047c 4A00000A 		beq	.L76		@,
 178:armwave.c     ****     	g_armwave_state.row_shift = 11;
 1035              		.loc 1 178 12 is_stmt 1 view .LVU265
 1036              	@ armwave.c:178:     } else if(target_height == 2048) {
 178:armwave.c     ****     	g_armwave_state.row_shift = 11;
 1037              		.loc 1 178 14 is_stmt 0 view .LVU266
 1038 0480 020B52E3 		cmp	r2, #2048	@ target_height,
 179:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 1039              		.loc 1 179 6 is_stmt 1 view .LVU267
 1040              	@ armwave.c:179:     	g_armwave_state.row_shift = 11;
 179:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 1041              		.loc 1 179 32 is_stmt 0 view .LVU268
 1042 0484 0B00A003 		moveq	r0, #11	@ tmp171,
 1043              	@ armwave.c:180:     	g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1044              		.loc 1 180 31 view .LVU269
 1045 0488 88C19F05 		ldreq	ip, .L79+8	@ tmp173,
 1046              	@ armwave.c:179:     	g_armwave_state.row_shift = 11;
 179:armwave.c     ****     	g_armwave_state.row_mask = 0x7ff;
 1047              		.loc 1 179 32 view .LVU270
 1048 048c 3C008405 		streq	r0, [r4, #60]	@ tmp171, g_armwave_state.row_shift
 180:armwave.c     ****     } 
 1049              		.loc 1 180 6 is_stmt 1 view .LVU271
 1050              	@ armwave.c:180:     	g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1051              		.loc 1 180 31 is_stmt 0 view .LVU272
 1052 0490 40C08405 		streq	ip, [r4, #64]	@ tmp173, g_armwave_state.row_mask
 1053              	.L63:
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1054              		.loc 1 184 5 is_stmt 1 view .LVU273
 1055              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1056              		.loc 1 188 42 is_stmt 0 view .LVU274
 1057 0494 970206E0 		mul	r6, r7, r2	@ _8, target_width, target_height
 1058              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 197 23 view .LVU275
 1060 0498 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 1061              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1062              		.loc 1 186 33 view .LVU276
 1063 049c 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1064              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1065              		.loc 1 187 27 view .LVU277
 1066 04a0 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1067              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1068              		.loc 1 185 44 view .LVU278
 1069 04a4 2214A0E1 		lsr	r1, r2, #8	@ tmp176, target_height,
 1070              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1071              		.loc 1 195 34 view .LVU279
 1072 04a8 4030A0E3 		mov	r3, #64	@ tmp183,
 1073              	.LVL52:
 1074              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1075              		.loc 1 197 7 view .LVU280
 1076 04ac 000050E3 		cmp	r0, #0	@ _9,
 1077              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1078              		.loc 1 184 29 view .LVU281
 1079 04b0 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1080              		.loc 1 185 5 is_stmt 1 view .LVU282
 1081              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1082              		.loc 1 189 34 is_stmt 0 view .LVU283
 1083 04b4 347084E5 		str	r7, [r4, #52]	@ target_width, g_armwave_state.target_width
 1084              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 1085              		.loc 1 190 35 view .LVU284
 1086 04b8 382084E5 		str	r2, [r4, #56]	@ target_height, g_armwave_state.target_height
 1087              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1088              		.loc 1 188 26 view .LVU285
 1089 04bc 306084E5 		str	r6, [r4, #48]	@ _8, g_armwave_state.size
 1090              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1091              		.loc 1 185 28 view .LVU286
 1092 04c0 1C1084E5 		str	r1, [r4, #28]	@ tmp176, g_armwave_state.vscale
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1093              		.loc 1 186 5 is_stmt 1 view .LVU287
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1094              		.loc 1 187 5 view .LVU288
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1095              		.loc 1 188 5 view .LVU289
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1096              		.loc 1 189 5 view .LVU290
 190:armwave.c     **** 
 1097              		.loc 1 190 5 view .LVU291
 195:armwave.c     **** 
 1098              		.loc 1 195 5 view .LVU292
 1099              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1100              		.loc 1 195 34 is_stmt 0 view .LVU293
 1101 04c4 283084E5 		str	r3, [r4, #40]	@ tmp183, g_armwave_state.slice_height
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1102              		.loc 1 197 5 is_stmt 1 view .LVU294
 1103              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1104              		.loc 1 197 7 is_stmt 0 view .LVU295
 1105 04c8 0100000A 		beq	.L65		@,
 198:armwave.c     **** 
 1106              		.loc 1 198 9 is_stmt 1 view .LVU296
 1107 04cc FEFFFFEB 		bl	free		@
 1108              	.LVL53:
 198:armwave.c     **** 
 1109              		.loc 1 198 9 is_stmt 0 view .LVU297
 1110 04d0 306094E5 		ldr	r6, [r4, #48]	@ _8, g_armwave_state.size
 1111              	.L65:
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1112              		.loc 1 200 5 is_stmt 1 view .LVU298
 1113              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1114              		.loc 1 200 34 is_stmt 0 view .LVU299
 1115 04d4 0110A0E3 		mov	r1, #1	@,
 1116 04d8 0600A0E1 		mov	r0, r6	@, _8
 1117 04dc FEFFFFEB 		bl	calloc		@
 1118              	.LVL54:
 1119              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1120              		.loc 1 201 33 view .LVU300
 1121 04e0 34219FE5 		ldr	r2, .L79+12	@ tmp189,
 1122              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1123              		.loc 1 203 33 view .LVU301
 1124 04e4 FA30A0E3 		mov	r3, #250	@ tmp192,
 1125              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1126              		.loc 1 201 33 view .LVU302
 1127 04e8 482084E5 		str	r2, [r4, #72]	@ tmp189, MEM[(short int *)&g_armwave_state + 72B]
 1128              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1129              		.loc 1 203 33 view .LVU303
 1130 04ec BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 1131              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 205:armwave.c     **** 
 1132              		.loc 1 205 5 view .LVU304
 1133 04f0 000050E3 		cmp	r0, #0	@ tmp186,
 1134              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1135              		.loc 1 200 32 view .LVU305
 1136 04f4 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1137              		.loc 1 201 5 is_stmt 1 view .LVU306
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1138              		.loc 1 202 5 view .LVU307
 203:armwave.c     **** 
 1139              		.loc 1 203 5 view .LVU308
 205:armwave.c     **** 
 1140              		.loc 1 205 5 view .LVU309
 1141 04f8 3500000A 		beq	.L77		@,
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1142              		.loc 1 208 5 view .LVU310
 1143              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1144              		.loc 1 209 34 is_stmt 0 view .LVU311
 1145 04fc 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1146              	@ armwave.c:208:     length = end_point - start_point;
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1147              		.loc 1 208 12 view .LVU312
 1148 0500 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1149              	.LVL55:
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1150              		.loc 1 209 5 is_stmt 1 view .LVU313
 1151              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1152              		.loc 1 211 40 is_stmt 0 view .LVU314
 1153 0504 8500A0E1 		lsl	r0, r5, #1	@, length,
 1154              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1155              		.loc 1 209 34 view .LVU315
 1156 0508 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp197, target_width
 1157              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1158              		.loc 1 209 31 view .LVU316
 1159 050c 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1160 0510 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp196, length
 1161              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1162              		.loc 1 210 60 view .LVU317
 1163 0514 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp223, g_armwave_state.slice_height
 1164 0518 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 1165              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1166              		.loc 1 209 22 view .LVU318
 1167 051c 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp196, tmp197
 1168              	.LVL56:
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1169              		.loc 1 210 5 is_stmt 1 view .LVU319
 1170              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1171              		.loc 1 210 60 is_stmt 0 view .LVU320
 1172 0520 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 1173              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1174              		.loc 1 210 41 view .LVU321
 1175 0524 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 1176 0528 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp203, g_armwave_state.slice_record_height
 211:armwave.c     **** 
 1177              		.loc 1 211 5 is_stmt 1 view .LVU322
 1178              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1179              		.loc 1 211 40 is_stmt 0 view .LVU323
 1180 052c FEFFFFEB 		bl	malloc		@
 1181              	.LVL57:
 1182              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 213:armwave.c     **** 
 1183              		.loc 1 213 5 view .LVU324
 1184 0530 000050E3 		cmp	r0, #0	@ tmp205,
 1185              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1186              		.loc 1 211 38 view .LVU325
 1187 0534 600084E5 		str	r0, [r4, #96]	@ tmp205, g_armwave_state.xcoord_to_xpixel
 213:armwave.c     **** 
 1188              		.loc 1 213 5 is_stmt 1 view .LVU326
 1189 0538 2A00000A 		beq	.L78		@,
 1190              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1191              		.loc 1 216 54 is_stmt 0 view .LVU327
 1192 053c 337ADFED 		vldr.32	s15, .L79	@ tmp210,
 1193 0540 020040E2 		sub	r0, r0, #2	@ ivtmp.68, tmp205,
 1194              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1195              		.loc 1 215 12 view .LVU328
 1196 0544 0030A0E3 		mov	r3, #0	@ xx,
 1197              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1198              		.loc 1 216 54 view .LVU329
 1199 0548 887A87EE 		vdiv.f32	s14, s15, s16	@ _20, tmp210, points_per_pixel
 1200              	.L68:
 1201              	.LVL58:
 216:armwave.c     **** 
 1202              		.loc 1 216 9 is_stmt 1 discriminator 3 view .LVU330
 1203              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1204              		.loc 1 216 74 is_stmt 0 discriminator 3 view .LVU331
 1205 054c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1206              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1207              		.loc 1 215 32 discriminator 3 view .LVU332
 1208 0550 013083E2 		add	r3, r3, #1	@ xx, xx,
 1209              	.LVL59:
 1210              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1211              		.loc 1 215 5 discriminator 3 view .LVU333
 1212 0554 030055E1 		cmp	r5, r3	@ length, xx
 1213              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1214              		.loc 1 216 74 discriminator 3 view .LVU334
 1215 0558 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, xx
 1216 055c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp212, tmp211, _20
 1217              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1218              		.loc 1 216 46 discriminator 3 view .LVU335
 1219 0560 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp213, tmp212
 1220 0564 902A17EE 		vmov	r2, s15	@ int	@ tmp213, tmp213
 1221 0568 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp213, MEM[base: _6, offset: 0B]
 1222              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1223              		.loc 1 215 5 discriminator 3 view .LVU336
 1224 056c F6FFFF1A 		bne	.L68		@,
 221:armwave.c     **** }
 1225              		.loc 1 221 5 is_stmt 1 view .LVU337
 1226              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1227              		.loc 1 221 34 is_stmt 0 view .LVU338
 1228 0570 0601A0E1 		lsl	r0, r6, #2	@, _8,
 1229 0574 FEFFFFEB 		bl	malloc		@
 1230              	.LVL60:
 1231              	@ armwave.c:222: }
 1232              		.loc 1 222 1 view .LVU339
 1233 0578 028BBDEC 		vldm	sp!, {d8}	@
 1234              		.cfi_remember_state
 1235              		.cfi_restore 80
 1236              		.cfi_restore 81
 1237              		.cfi_def_cfa_offset 24
 1238              	.LVL61:
 1239              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1240              		.loc 1 221 32 view .LVU340
 1241 057c 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 1242              	@ armwave.c:222: }
 1243              		.loc 1 222 1 view .LVU341
 1244 0580 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1245              	.LVL62:
 1246              	.L60:
 1247              		.cfi_restore_state
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 1248              		.loc 1 169 5 is_stmt 1 view .LVU342
 1249              	@ armwave.c:169:     if(target_height == 256) {
 169:armwave.c     ****     	g_armwave_state.row_shift = 8;
 1250              		.loc 1 169 7 is_stmt 0 view .LVU343
 1251 0584 010C52E3 		cmp	r2, #256	@ target_height,
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 1252              		.loc 1 170 6 is_stmt 1 view .LVU344
 1253              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 1254              		.loc 1 170 32 is_stmt 0 view .LVU345
 1255 0588 08C0A003 		moveq	ip, #8	@ tmp159,
 1256              	@ armwave.c:174:     	g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1257              		.loc 1 174 31 view .LVU346
 1258 058c 8CC09F15 		ldrne	ip, .L79+16	@ tmp165,
 1259              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1260              		.loc 1 171 31 view .LVU347
 1261 0590 FF00A003 		moveq	r0, #255	@ tmp161,
 1262              	.LVL63:
 1263              	@ armwave.c:173:     	g_armwave_state.row_shift = 9;
 173:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 1264              		.loc 1 173 32 view .LVU348
 1265 0594 0900A013 		movne	r0, #9	@ tmp163,
 1266              	@ armwave.c:170:     	g_armwave_state.row_shift = 8;
 170:armwave.c     ****     	g_armwave_state.row_mask = 0x0ff;
 1267              		.loc 1 170 32 view .LVU349
 1268 0598 3CC08405 		streq	ip, [r4, #60]	@ tmp159, g_armwave_state.row_shift
 171:armwave.c     ****     } else if(target_height == 512) {
 1269              		.loc 1 171 6 is_stmt 1 view .LVU350
 1270              	@ armwave.c:171:     	g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1271              		.loc 1 171 31 is_stmt 0 view .LVU351
 1272 059c 40008405 		streq	r0, [r4, #64]	@ tmp161, g_armwave_state.row_mask
 172:armwave.c     ****     	g_armwave_state.row_shift = 9;
 1273              		.loc 1 172 12 is_stmt 1 view .LVU352
 173:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 1274              		.loc 1 173 6 view .LVU353
 1275              	@ armwave.c:174:     	g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1276              		.loc 1 174 31 is_stmt 0 view .LVU354
 1277 05a0 40C08415 		strne	ip, [r4, #64]	@ tmp165, g_armwave_state.row_mask
 1278              	@ armwave.c:173:     	g_armwave_state.row_shift = 9;
 173:armwave.c     ****     	g_armwave_state.row_mask = 0x1ff;
 1279              		.loc 1 173 32 view .LVU355
 1280 05a4 3C008415 		strne	r0, [r4, #60]	@ tmp163, g_armwave_state.row_shift
 174:armwave.c     ****     } else if(target_height == 1024) {
 1281              		.loc 1 174 6 is_stmt 1 view .LVU356
 1282 05a8 B9FFFFEA 		b	.L63		@
 1283              	.L76:
 176:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 1284              		.loc 1 176 6 view .LVU357
 1285              	@ armwave.c:177:     	g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1286              		.loc 1 177 31 is_stmt 0 view .LVU358
 1287 05ac 70C09FE5 		ldr	ip, .L79+20	@ tmp169,
 1288              	@ armwave.c:176:     	g_armwave_state.row_shift = 10;
 176:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 1289              		.loc 1 176 32 view .LVU359
 1290 05b0 0A00A0E3 		mov	r0, #10	@ tmp167,
 1291              	@ armwave.c:177:     	g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1292              		.loc 1 177 31 view .LVU360
 1293 05b4 40C084E5 		str	ip, [r4, #64]	@ tmp169, g_armwave_state.row_mask
 1294              	@ armwave.c:176:     	g_armwave_state.row_shift = 10;
 176:armwave.c     ****     	g_armwave_state.row_mask = 0x3ff;
 1295              		.loc 1 176 32 view .LVU361
 1296 05b8 3C0084E5 		str	r0, [r4, #60]	@ tmp167, g_armwave_state.row_shift
 177:armwave.c     ****     } else if(target_height == 2048) {
 1297              		.loc 1 177 6 is_stmt 1 view .LVU362
 1298 05bc B4FFFFEA 		b	.L63		@
 1299              	.L75:
 167:armwave.c     **** 
 1300              		.loc 1 167 5 discriminator 2 view .LVU363
 1301 05c0 60309FE5 		ldr	r3, .L79+24	@,
 1302              	.LVL64:
 167:armwave.c     **** 
 1303              		.loc 1 167 5 is_stmt 0 discriminator 2 view .LVU364
 1304 05c4 A720A0E3 		mov	r2, #167	@,
 1305 05c8 5C109FE5 		ldr	r1, .L79+28	@,
 1306 05cc 5C009FE5 		ldr	r0, .L79+32	@,
 1307 05d0 FEFFFFEB 		bl	__assert_fail		@
 1308              	.LVL65:
 1309              	.L77:
 205:armwave.c     **** 
 1310              		.loc 1 205 5 is_stmt 1 discriminator 1 view .LVU365
 1311 05d4 4C309FE5 		ldr	r3, .L79+24	@,
 1312 05d8 CD20A0E3 		mov	r2, #205	@,
 1313 05dc 48109FE5 		ldr	r1, .L79+28	@,
 1314 05e0 4C009FE5 		ldr	r0, .L79+36	@,
 1315 05e4 FEFFFFEB 		bl	__assert_fail		@
 1316              	.LVL66:
 1317              	.L78:
 213:armwave.c     **** 
 1318              		.loc 1 213 5 discriminator 1 view .LVU366
 1319 05e8 38309FE5 		ldr	r3, .L79+24	@,
 1320 05ec D520A0E3 		mov	r2, #213	@,
 1321 05f0 34109FE5 		ldr	r1, .L79+28	@,
 1322 05f4 3C009FE5 		ldr	r0, .L79+40	@,
 1323 05f8 FEFFFFEB 		bl	__assert_fail		@
 1324              	.LVL67:
 1325              	.L74:
 161:armwave.c     **** 
 1326              		.loc 1 161 5 discriminator 1 view .LVU367
 1327 05fc 24309FE5 		ldr	r3, .L79+24	@,
 1328              	.LVL68:
 161:armwave.c     **** 
 1329              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU368
 1330 0600 A120A0E3 		mov	r2, #161	@,
 1331 0604 20109FE5 		ldr	r1, .L79+28	@,
 1332 0608 2C009FE5 		ldr	r0, .L79+44	@,
 1333              	.LVL69:
 161:armwave.c     **** 
 1334              		.loc 1 161 5 discriminator 1 view .LVU369
 1335 060c FEFFFFEB 		bl	__assert_fail		@
 1336              	.LVL70:
 1337              	.L80:
 1338              		.align	2
 1339              	.L79:
 1340 0610 0000803F 		.word	1065353216
 1341 0614 00000000 		.word	g_armwave_state
 1342 0618 FF070000 		.word	2047
 1343 061c F609F406 		.word	116656630
 1344 0620 FF010000 		.word	511
 1345 0624 FF030000 		.word	1023
 1346 0628 00000000 		.word	.LANCHOR0
 1347 062c 00000000 		.word	.LC0
 1348 0630 74000000 		.word	.LC4
 1349 0634 0C000000 		.word	.LC1
 1350 0638 30000000 		.word	.LC2
 1351 063c 5C000000 		.word	.LC3
 1352              		.cfi_endproc
 1353              	.LFE61:
 1355              		.align	2
 1356              		.global	armwave_clear_buffer
 1357              		.syntax unified
 1358              		.arm
 1359              		.fpu vfp
 1361              	armwave_clear_buffer:
 1362              	.LVL71:
 1363              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 225:armwave.c     **** {
 1364              		.loc 1 225 1 is_stmt 1 view -0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 0
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 226:armwave.c     ****     // Flags ignored, only one buffer cleared
 227:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1369              		.loc 1 227 5 view .LVU371
 1370 0640 0C309FE5 		ldr	r3, .L82	@ tmp113,
 1371 0644 0010A0E3 		mov	r1, #0	@,
 1372 0648 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1373 064c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1374              	.LVL72:
 1375              		.loc 1 227 5 is_stmt 0 view .LVU372
 1376 0650 FEFFFFEA 		b	memset		@
 1377              	.LVL73:
 1378              	.L83:
 1379              		.align	2
 1380              	.L82:
 1381 0654 00000000 		.word	g_armwave_state
 1382              		.cfi_endproc
 1383              	.LFE62:
 1385              		.align	2
 1386              		.global	armwave_fill_pixbuf2
 1387              		.syntax unified
 1388              		.arm
 1389              		.fpu vfp
 1391              	armwave_fill_pixbuf2:
 1392              	.LVL74:
 1393              	.LFB63:
 228:armwave.c     **** }
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 232:armwave.c     **** {
 233:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 234:armwave.c     ****     int rr, gg, bb;
 235:armwave.c     ****     uint8_t r, g, b;
 236:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 237:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 238:armwave.c     **** 
 239:armwave.c     ****     assert(out_buffer != NULL);
 240:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 241:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 242:armwave.c     **** 
 243:armwave.c     **** #if 0
 244:armwave.c     ****     // Pixbuf tests
 245:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 246:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 247:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 248:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 249:armwave.c     ****         }
 250:armwave.c     ****     }
 251:armwave.c     **** #endif
 252:armwave.c     **** 
 253:armwave.c     **** #if 1
 254:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 255:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 256:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 257:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 258:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 259:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 260:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 261:armwave.c     **** 
 262:armwave.c     **** #if 0
 263:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 264:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 265:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 266:armwave.c     **** 
 267:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 268:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 269:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 270:armwave.c     **** #endif
 271:armwave.c     **** 
 272:armwave.c     ****             if(value != 0) {
 273:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 274:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 275:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 276:armwave.c     **** 
 277:armwave.c     **** 	            r = MIN(rr, 255);
 278:armwave.c     **** 	            g = MIN(gg, 255);
 279:armwave.c     **** 	            b = MIN(bb, 255);
 280:armwave.c     **** 
 281:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 282:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 283:armwave.c     **** 
 284:armwave.c     **** 	            //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, va
 285:armwave.c     **** 
 286:armwave.c     **** 	            *out_buffer++ = word;
 287:armwave.c     **** 	        }
 288:armwave.c     ****         }
 289:armwave.c     ****     }
 290:armwave.c     **** #endif
 291:armwave.c     **** }
 292:armwave.c     **** */
 293:armwave.c     **** 
 294:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 295:armwave.c     **** {
 1394              		.loc 1 295 1 is_stmt 1 view -0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 296:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1398              		.loc 1 296 5 view .LVU374
 297:armwave.c     ****     int rr, gg, bb;
 1399              		.loc 1 297 5 view .LVU375
 298:armwave.c     ****     uint8_t r, g, b;
 1400              		.loc 1 298 5 view .LVU376
 299:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1401              		.loc 1 299 5 view .LVU377
 1402              	@ armwave.c:295: {
 295:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1403              		.loc 1 295 1 is_stmt 0 view .LVU378
 1404 0658 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1405              		.cfi_def_cfa_offset 40
 1406              		.cfi_offset 3, -40
 1407              		.cfi_offset 4, -36
 1408              		.cfi_offset 5, -32
 1409              		.cfi_offset 6, -28
 1410              		.cfi_offset 7, -24
 1411              		.cfi_offset 8, -20
 1412              		.cfi_offset 9, -16
 1413              		.cfi_offset 10, -12
 1414              		.cfi_offset 11, -8
 1415              		.cfi_offset 14, -4
 1416              	@ armwave.c:303:     assert(out_buffer != NULL);
 300:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 301:armwave.c     ****     uint32_t npix, n, offset;
 302:armwave.c     **** 
 303:armwave.c     ****     assert(out_buffer != NULL);
 1417              		.loc 1 303 5 view .LVU379
 1418 065c 000050E3 		cmp	r0, #0	@ out_buffer
 1419              	@ armwave.c:299:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 299:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1420              		.loc 1 299 14 view .LVU380
 1421 0660 BC409FE5 		ldr	r4, .L98	@ tmp188,
 1422 0664 043094E5 		ldr	r3, [r4, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1423              	.LVL75:
 300:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1424              		.loc 1 300 5 is_stmt 1 view .LVU381
 301:armwave.c     **** 
 1425              		.loc 1 301 5 view .LVU382
 1426              		.loc 1 303 5 view .LVU383
 1427 0668 2800000A 		beq	.L97		@,
 304:armwave.c     **** 
 305:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 306:armwave.c     **** 
 307:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1428              		.loc 1 307 5 view .LVU384
 1429              	@ armwave.c:307:     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1430              		.loc 1 307 10 is_stmt 0 view .LVU385
 1431 066c 342094E5 		ldr	r2, [r4, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1432 0670 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1433 0674 9C020CE0 		mul	ip, ip, r2	@ npix, g_armwave_state.target_height, g_armwave_state.target_width
 1434              	.LVL76:
 308:armwave.c     **** 
 309:armwave.c     ****     for(n = 0; n < npix; n++) {
 1435              		.loc 1 309 5 is_stmt 1 view .LVU386
 1436              		.loc 1 309 5 is_stmt 0 view .LVU387
 1437 0678 00005CE3 		cmp	ip, #0	@ npix,
 1438 067c F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1439              	@ armwave.c:315:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 310:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 311:armwave.c     ****         value = *base_ptr++;
 312:armwave.c     **** 
 313:armwave.c     ****         // yup, this is generally not going to happen, for most waveforms
 314:armwave.c     ****         if(COND_UNLIKELY(value != 0)) {
 315:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1440              		.loc 1 315 44 view .LVU388
 1441 0680 F8A4D4E1 		ldrsh	r10, [r4, #72]	@ _7, g_armwave_state.ch1_color.r
 1442              	@ armwave.c:316:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1443              		.loc 1 316 44 view .LVU389
 1444 0684 FA94D4E1 		ldrsh	r9, [r4, #74]	@ _11, g_armwave_state.ch1_color.g
 1445              	@ armwave.c:317:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1446              		.loc 1 317 44 view .LVU390
 1447 0688 FC84D4E1 		ldrsh	r8, [r4, #76]	@ _15, g_armwave_state.ch1_color.b
 1448 068c 0CC083E0 		add	ip, r3, ip	@ _58, base_ptr, npix
 1449              	.LVL77:
 1450              	@ armwave.c:309:     for(n = 0; n < npix; n++) {
 309:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1451              		.loc 1 309 11 view .LVU391
 1452 0690 0010A0E3 		mov	r1, #0	@ n,
 1453 0694 020000EA 		b	.L88		@
 1454              	.LVL78:
 1455              	.L87:
 1456              	@ armwave.c:309:     for(n = 0; n < npix; n++) {
 309:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1457              		.loc 1 309 5 discriminator 2 view .LVU392
 1458 0698 0C0053E1 		cmp	r3, ip	@ base_ptr, _58
 1459              	@ armwave.c:309:     for(n = 0; n < npix; n++) {
 309:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1460              		.loc 1 309 27 discriminator 2 view .LVU393
 1461 069c 011081E2 		add	r1, r1, #1	@ n, n,
 1462              	.LVL79:
 1463              	@ armwave.c:309:     for(n = 0; n < npix; n++) {
 309:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1464              		.loc 1 309 5 discriminator 2 view .LVU394
 1465 06a0 F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1466              	.LVL80:
 1467              	.L88:
 311:armwave.c     **** 
 1468              		.loc 1 311 9 is_stmt 1 view .LVU395
 1469              	@ armwave.c:311:         value = *base_ptr++;
 311:armwave.c     **** 
 1470              		.loc 1 311 17 is_stmt 0 view .LVU396
 1471 06a4 0120D3E4 		ldrb	r2, [r3], #1	@ zero_extendqisi2	@ _3, MEM[base: base_ptr_45, offset: 4294967295B]
 1472              	.LVL81:
 314:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1473              		.loc 1 314 9 is_stmt 1 view .LVU397
 1474              	@ armwave.c:314:         if(COND_UNLIKELY(value != 0)) {
 314:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1475              		.loc 1 314 11 is_stmt 0 view .LVU398
 1476 06a8 000052E3 		cmp	r2, #0	@ _3,
 1477 06ac F9FFFF0A 		beq	.L87		@,
 315:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1478              		.loc 1 315 13 is_stmt 1 view .LVU399
 1479              	.LVL82:
 316:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1480              		.loc 1 316 13 view .LVU400
 1481              		.loc 1 317 13 view .LVU401
 318:armwave.c     **** 
 319:armwave.c     ****             r = MIN(rr, 255);
 1482              		.loc 1 319 13 view .LVU402
 320:armwave.c     ****             g = MIN(gg, 255);
 1483              		.loc 1 320 13 view .LVU403
 321:armwave.c     ****             b = MIN(bb, 255);
 1484              		.loc 1 321 13 view .LVU404
 322:armwave.c     **** 
 323:armwave.c     ****             // ensure 100% alpha channel, if it is used
 324:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1485              		.loc 1 324 13 view .LVU405
 325:armwave.c     **** 
 326:armwave.c     ****             // Is there a better way?
 327:armwave.c     ****             /** works but wrong orientation **
 328:armwave.c     ****             xx = n % g_armwave_state.target_width;
 329:armwave.c     ****             yy = n / g_armwave_state.target_width;
 330:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 331:armwave.c     ****             *(out_buffer_base + offset) = word;
 332:armwave.c     ****             */
 333:armwave.c     **** 
 334:armwave.c     ****             // Since height is probably guaranteed to be one of 256 or 1024, we could probably simp
 335:armwave.c     ****             // this and strip out the division ops
 336:armwave.c     ****             //xx = n % g_armwave_state.target_height;
 337:armwave.c     ****             //yy = n / g_armwave_state.target_height;
 338:armwave.c     ****             xx = n & g_armwave_state.row_mask;
 1486              		.loc 1 338 13 view .LVU406
 339:armwave.c     ****             yy = n >> g_armwave_state.row_shift;
 1487              		.loc 1 339 13 view .LVU407
 340:armwave.c     ****             offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_heig
 1488              		.loc 1 340 13 view .LVU408
 341:armwave.c     ****             //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 342:armwave.c     **** 
 343:armwave.c     ****             *(out_buffer_base + offset) = word;
 1489              		.loc 1 343 13 view .LVU409
 1490              	@ armwave.c:317:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 1491              		.loc 1 317 47 is_stmt 0 view .LVU410
 1492 06b0 820865E1 		smulbb	r5, r2, r8	@ tmp178, _3, _15
 1493              	@ armwave.c:316:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1494              		.loc 1 316 47 view .LVU411
 1495 06b4 82096EE1 		smulbb	lr, r2, r9	@ tmp181, _3, _11
 1496              	@ armwave.c:339:             yy = n >> g_armwave_state.row_shift;
 339:armwave.c     ****             offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_heig
 1497              		.loc 1 339 16 view .LVU412
 1498 06b8 3C7094E5 		ldr	r7, [r4, #60]	@ g_armwave_state.row_shift, g_armwave_state.row_shift
 1499              	@ armwave.c:317:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 1500              		.loc 1 317 56 view .LVU413
 1501 06bc 2554A0E1 		lsr	r5, r5, #8	@ bb, tmp178,
 1502              	@ armwave.c:316:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1503              		.loc 1 316 56 view .LVU414
 1504 06c0 2EE4A0E1 		lsr	lr, lr, #8	@ gg, tmp181,
 1505              	@ armwave.c:321:             b = MIN(bb, 255);
 321:armwave.c     **** 
 1506              		.loc 1 321 17 view .LVU415
 1507 06c4 FF0055E3 		cmp	r5, #255	@ bb,
 1508              	@ armwave.c:338:             xx = n & g_armwave_state.row_mask;
 338:armwave.c     ****             yy = n >> g_armwave_state.row_shift;
 1509              		.loc 1 338 16 view .LVU416
 1510 06c8 406094E5 		ldr	r6, [r4, #64]	@ g_armwave_state.row_mask, g_armwave_state.row_mask
 1511              	@ armwave.c:321:             b = MIN(bb, 255);
 321:armwave.c     **** 
 1512              		.loc 1 321 17 view .LVU417
 1513 06cc FF50A0A3 		movge	r5, #255	@ bb,
 1514              	@ armwave.c:340:             offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_
 340:armwave.c     ****             //printf("%d %d,%d (%d)\n", n, xx, yy, offset);
 1515              		.loc 1 340 31 view .LVU418
 1516 06d0 34B094E5 		ldr	fp, [r4, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1517              	@ armwave.c:320:             g = MIN(gg, 255);
 320:armwave.c     ****             b = MIN(bb, 255);
 1518              		.loc 1 320 17 view .LVU419
 1519 06d4 FF005EE3 		cmp	lr, #255	@ gg,
 1520 06d8 FFE0A0A3 		movge	lr, #255	@ gg,
 1521              	@ armwave.c:315:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1522              		.loc 1 315 47 view .LVU420
 1523 06dc 820A62E1 		smulbb	r2, r2, r10	@ tmp185, _3, _7
 1524              	.LVL83:
 1525              	@ armwave.c:339:             yy = n >> g_armwave_state.row_shift;
 339:armwave.c     ****             offset = yy + (xx * g_armwave_state.target_width); //((xx * g_armwave_state.target_heig
 1526              		.loc 1 339 16 view .LVU421
 1527 06e0 3177A0E1 		lsr	r7, r1, r7	@ yy, n, g_armwave_state.row_shift
 1528              	.LVL84:
 1529              	@ armwave.c:338:             xx = n & g_armwave_state.row_mask;
 338:armwave.c     ****             yy = n >> g_armwave_state.row_shift;
 1530              		.loc 1 338 16 view .LVU422
 1531 06e4 016006E0 		and	r6, r6, r1	@ xx, g_armwave_state.row_mask, n
 1532              	.LVL85:
 1533              	@ armwave.c:324:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 1534              		.loc 1 324 43 view .LVU423
 1535 06e8 0EE4A0E1 		lsl	lr, lr, #8	@ tmp182, gg,
 1536              	@ armwave.c:343:             *(out_buffer_base + offset) = word;
 1537              		.loc 1 343 31 view .LVU424
 1538 06ec 9B7626E0 		mla	r6, fp, r6, r7	@ tmp176, g_armwave_state.target_width, xx, yy
 1539              	.LVL86:
 1540              	@ armwave.c:324:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 1541              		.loc 1 324 43 view .LVU425
 1542 06f0 05E88EE1 		orr	lr, lr, r5, lsl #16	@ tmp183, tmp182, bb,
 1543              	@ armwave.c:315:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1544              		.loc 1 315 56 view .LVU426
 1545 06f4 2224A0E1 		lsr	r2, r2, #8	@ rr, tmp185,
 1546              	@ armwave.c:324:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 1547              		.loc 1 324 54 view .LVU427
 1548 06f8 FF0052E3 		cmp	r2, #255	@ rr,
 1549 06fc 02208ED1 		orrle	r2, lr, r2	@,, tmp186, tmp183, rr
 1550 0700 FF208EC3 		orrgt	r2, lr, #255	@,, tmp186, tmp183,
 1551              	@ armwave.c:324:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 1552              		.loc 1 324 18 view .LVU428
 1553 0704 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp186,
 1554              	@ armwave.c:343:             *(out_buffer_base + offset) = word;
 1555              		.loc 1 343 41 view .LVU429
 1556 0708 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_34
 1557              	.LVL87:
 1558              		.loc 1 343 41 view .LVU430
 1559 070c E1FFFFEA 		b	.L87		@
 1560              	.LVL88:
 1561              	.L97:
 303:armwave.c     **** 
 1562              		.loc 1 303 5 is_stmt 1 discriminator 1 view .LVU431
 1563 0710 10309FE5 		ldr	r3, .L98+4	@,
 1564              	.LVL89:
 303:armwave.c     **** 
 1565              		.loc 1 303 5 is_stmt 0 discriminator 1 view .LVU432
 1566 0714 10209FE5 		ldr	r2, .L98+8	@,
 1567 0718 10109FE5 		ldr	r1, .L98+12	@,
 1568 071c 10009FE5 		ldr	r0, .L98+16	@,
 1569              	.LVL90:
 303:armwave.c     **** 
 1570              		.loc 1 303 5 discriminator 1 view .LVU433
 1571 0720 FEFFFFEB 		bl	__assert_fail		@
 1572              	.LVL91:
 1573              	.L99:
 303:armwave.c     **** 
 1574              		.loc 1 303 5 discriminator 1 view .LVU434
 1575              		.align	2
 1576              	.L98:
 1577 0724 00000000 		.word	g_armwave_state
 1578 0728 18000000 		.word	.LANCHOR0+24
 1579 072c 2F010000 		.word	303
 1580 0730 00000000 		.word	.LC0
 1581 0734 D4000000 		.word	.LC5
 1582              		.cfi_endproc
 1583              	.LFE63:
 1585              		.align	2
 1586              		.global	armwave_dump_ppm_debug
 1587              		.syntax unified
 1588              		.arm
 1589              		.fpu vfp
 1591              	armwave_dump_ppm_debug:
 1592              	.LVL92:
 1593              	.LFB64:
 344:armwave.c     ****         } 
 345:armwave.c     ****     }
 346:armwave.c     **** }
 347:armwave.c     **** 
 348:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 349:armwave.c     **** {
 1594              		.loc 1 349 1 is_stmt 1 view -0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
 350:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1598              		.loc 1 350 5 view .LVU436
 1599              	@ armwave.c:349: {
 349:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1600              		.loc 1 349 1 is_stmt 0 view .LVU437
 1601 0738 0130A0E1 		mov	r3, r1	@ fn, fn
 1602 073c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1603              		.cfi_def_cfa_offset 28
 1604              		.cfi_offset 4, -28
 1605              		.cfi_offset 5, -24
 1606              		.cfi_offset 6, -20
 1607              		.cfi_offset 7, -16
 1608              		.cfi_offset 8, -12
 1609              		.cfi_offset 9, -8
 1610              		.cfi_offset 14, -4
 1611 0740 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1612 0744 0CD04DE2 		sub	sp, sp, #12	@,,
 1613              		.cfi_def_cfa_offset 40
 1614              	@ armwave.c:350:     FILE *fp = fopen(fn, "wb");
 1615              		.loc 1 350 16 view .LVU438
 1616 0748 D8109FE5 		ldr	r1, .L112	@,
 1617              	.LVL93:
 1618              		.loc 1 350 16 view .LVU439
 1619 074c 0300A0E1 		mov	r0, r3	@, fn
 1620              	.LVL94:
 1621              		.loc 1 350 16 view .LVU440
 1622 0750 FEFFFFEB 		bl	fopen64		@
 1623              	.LVL95:
 1624              	@ armwave.c:357:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 351:armwave.c     ****     uint32_t data;
 352:armwave.c     ****     int xx, yy;
 353:armwave.c     **** 
 354:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 355:armwave.c     **** 
 356:armwave.c     ****     fputs("P3\n", fp);
 357:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1625              		.loc 1 357 5 view .LVU441
 1626 0754 D0609FE5 		ldr	r6, .L112+4	@ tmp154,
 1627              	@ armwave.c:356:     fputs("P3\n", fp);
 356:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1628              		.loc 1 356 5 view .LVU442
 1629 0758 0320A0E3 		mov	r2, #3	@,
 1630 075c 0110A0E3 		mov	r1, #1	@,
 1631              	@ armwave.c:350:     FILE *fp = fopen(fn, "wb");
 350:armwave.c     ****     uint32_t data;
 1632              		.loc 1 350 16 view .LVU443
 1633 0760 0070A0E1 		mov	r7, r0	@ fp,
 1634              	.LVL96:
 351:armwave.c     ****     uint32_t data;
 1635              		.loc 1 351 5 is_stmt 1 view .LVU444
 352:armwave.c     **** 
 1636              		.loc 1 352 5 view .LVU445
 356:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1637              		.loc 1 356 5 view .LVU446
 1638 0764 0030A0E1 		mov	r3, r0	@, fp
 1639 0768 C0009FE5 		ldr	r0, .L112+8	@,
 1640              	.LVL97:
 356:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1641              		.loc 1 356 5 is_stmt 0 view .LVU447
 1642 076c FEFFFFEB 		bl	fwrite		@
 1643              	.LVL98:
 1644              		.loc 1 357 5 is_stmt 1 view .LVU448
 1645 0770 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1646 0774 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1647 0778 B4109FE5 		ldr	r1, .L112+12	@,
 1648 077c 0700A0E1 		mov	r0, r7	@, fp
 1649 0780 FEFFFFEB 		bl	fprintf		@
 1650              	.LVL99:
 358:armwave.c     ****     fputs("255\n", fp);
 1651              		.loc 1 358 5 view .LVU449
 1652 0784 0420A0E3 		mov	r2, #4	@,
 1653 0788 0730A0E1 		mov	r3, r7	@, fp
 1654 078c 0110A0E3 		mov	r1, #1	@,
 1655 0790 A0009FE5 		ldr	r0, .L112+16	@,
 1656 0794 FEFFFFEB 		bl	fwrite		@
 1657              	.LVL100:
 359:armwave.c     **** 
 360:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1658              		.loc 1 360 5 view .LVU450
 1659              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1660              		.loc 1 360 37 is_stmt 0 view .LVU451
 1661 0798 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1662              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1663              		.loc 1 360 5 view .LVU452
 1664 079c 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1665 07a0 1800000A 		beq	.L101		@,
 1666 07a4 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1667              	@ armwave.c:365:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 362:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 363:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 364:armwave.c     **** 
 365:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1668              		.loc 1 365 13 view .LVU453
 1669 07a8 8C909FE5 		ldr	r9, .L112+20	@ tmp156,
 1670              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 360:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1671              		.loc 1 360 12 view .LVU454
 1672 07ac 0050A0E3 		mov	r5, #0	@ yy,
 1673              	.LVL101:
 1674              	.L102:
 1675              	@ armwave.c:361:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1676              		.loc 1 361 9 view .LVU455
 1677 07b0 000053E3 		cmp	r3, #0	@ _12,
 1678              	@ armwave.c:361:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1679              		.loc 1 361 16 view .LVU456
 1680 07b4 0040A013 		movne	r4, #0	@ xx,
 1681              	@ armwave.c:361:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1682              		.loc 1 361 9 view .LVU457
 1683 07b8 1600000A 		beq	.L111		@,
 1684              	.LVL102:
 1685              	.L103:
 362:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1686              		.loc 1 362 13 is_stmt 1 discriminator 3 view .LVU458
 1687              	@ armwave.c:362:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 362:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1688              		.loc 1 362 29 is_stmt 0 discriminator 3 view .LVU459
 1689 07bc 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1690              	@ armwave.c:365:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1691              		.loc 1 365 13 discriminator 3 view .LVU460
 1692 07c0 0910A0E1 		mov	r1, r9	@, tmp156
 1693 07c4 0700A0E1 		mov	r0, r7	@, fp
 1694              	@ armwave.c:362:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 362:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1695              		.loc 1 362 18 discriminator 3 view .LVU461
 1696 07c8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1697              	.LVL103:
 1698              		.loc 1 365 13 is_stmt 1 discriminator 3 view .LVU462
 1699              	@ armwave.c:361:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1700              		.loc 1 361 58 is_stmt 0 discriminator 3 view .LVU463
 1701 07cc 014084E2 		add	r4, r4, #1	@ xx, xx,
 1702              	.LVL104:
 1703              	@ armwave.c:365:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1704              		.loc 1 365 81 discriminator 3 view .LVU464
 1705 07d0 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1706              	@ armwave.c:365:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1707              		.loc 1 365 61 discriminator 3 view .LVU465
 1708 07d4 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1709              	@ armwave.c:365:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1710              		.loc 1 365 13 discriminator 3 view .LVU466
 1711 07d8 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1712 07dc 7330EFE6 		uxtb	r3, r3	@, tmp146
 1713 07e0 00C08DE5 		str	ip, [sp]	@ tmp151,
 1714 07e4 7220EFE6 		uxtb	r2, r2	@, data
 1715              	.LVL105:
 1716              		.loc 1 365 13 discriminator 3 view .LVU467
 1717 07e8 FEFFFFEB 		bl	fprintf		@
 1718              	.LVL106:
 1719              	@ armwave.c:361:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1720              		.loc 1 361 41 discriminator 3 view .LVU468
 1721 07ec 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1722              	@ armwave.c:361:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 361:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1723              		.loc 1 361 9 discriminator 3 view .LVU469
 1724 07f0 040053E1 		cmp	r3, r4	@ _12, xx
 1725 07f4 F0FFFF8A 		bhi	.L103		@,
 1726 07f8 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1727              	.LVL107:
 1728              	.L104:
 1729              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 360:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1730              		.loc 1 360 55 discriminator 2 view .LVU470
 1731 07fc 015085E2 		add	r5, r5, #1	@ yy, yy,
 1732              	.LVL108:
 1733              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 360:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1734              		.loc 1 360 5 discriminator 2 view .LVU471
 1735 0800 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1736 0804 E9FFFF3A 		bcc	.L102		@,
 1737              	.LVL109:
 1738              	.L101:
 366:armwave.c     ****         }
 367:armwave.c     ****     }
 368:armwave.c     **** 
 369:armwave.c     ****     fclose(fp);
 1739              		.loc 1 369 5 is_stmt 1 view .LVU472
 1740 0808 0700A0E1 		mov	r0, r7	@, fp
 1741              	@ armwave.c:370: }
 370:armwave.c     **** }
 1742              		.loc 1 370 1 is_stmt 0 view .LVU473
 1743 080c 0CD08DE2 		add	sp, sp, #12	@,,
 1744              		.cfi_remember_state
 1745              		.cfi_def_cfa_offset 28
 1746              		@ sp needed	@
 1747 0810 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1748              		.cfi_restore 14
 1749              		.cfi_restore 9
 1750              		.cfi_restore 8
 1751              		.cfi_restore 7
 1752              		.cfi_restore 6
 1753              		.cfi_restore 5
 1754              		.cfi_restore 4
 1755              		.cfi_def_cfa_offset 0
 1756              	.LVL110:
 1757              	@ armwave.c:369:     fclose(fp);
 369:armwave.c     **** }
 1758              		.loc 1 369 5 view .LVU474
 1759 0814 FEFFFFEA 		b	fclose		@
 1760              	.LVL111:
 1761              	.L111:
 1762              		.cfi_restore_state
 1763              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 360:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1764              		.loc 1 360 55 view .LVU475
 1765 0818 015085E2 		add	r5, r5, #1	@ yy, yy,
 1766              	.LVL112:
 1767              	@ armwave.c:360:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 360:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1768              		.loc 1 360 5 view .LVU476
 1769 081c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1770 0820 F5FFFF8A 		bhi	.L104		@,
 1771 0824 F7FFFFEA 		b	.L101		@
 1772              	.L113:
 1773              		.align	2
 1774              	.L112:
 1775 0828 E8000000 		.word	.LC6
 1776 082c 00000000 		.word	g_armwave_state
 1777 0830 EC000000 		.word	.LC7
 1778 0834 F0000000 		.word	.LC8
 1779 0838 F8000000 		.word	.LC9
 1780 083c 00010000 		.word	.LC10
 1781              		.cfi_endproc
 1782              	.LFE64:
 1784              		.align	2
 1785              		.global	armwave_test_init
 1786              		.syntax unified
 1787              		.arm
 1788              		.fpu vfp
 1790              	armwave_test_init:
 1791              	.LVL113:
 1792              	.LFB65:
 371:armwave.c     **** 
 372:armwave.c     **** void armwave_test_init(float mod)
 373:armwave.c     **** {
 1793              		.loc 1 373 1 is_stmt 1 view -0
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 0
 1796              		@ frame_needed = 0, uses_anonymous_args = 0
 374:armwave.c     **** 	mod_depth = mod;
 1797              		.loc 1 374 2 view .LVU478
 1798              	@ armwave.c:374: 	mod_depth = mod;
 1799              		.loc 1 374 12 is_stmt 0 view .LVU479
 1800 0840 8C309FE5 		ldr	r3, .L118+20	@ tmp124,
 1801              	@ armwave.c:373: {
 373:armwave.c     **** 	mod_depth = mod;
 1802              		.loc 1 373 1 view .LVU480
 1803 0844 70402DE9 		push	{r4, r5, r6, lr}	@
 1804              		.cfi_def_cfa_offset 16
 1805              		.cfi_offset 4, -16
 1806              		.cfi_offset 5, -12
 1807              		.cfi_offset 6, -8
 1808              		.cfi_offset 14, -4
 1809 0848 068B2DED 		vpush.64	{d8, d9, d10}	@
 1810              		.cfi_def_cfa_offset 40
 1811              		.cfi_offset 80, -40
 1812              		.cfi_offset 81, -36
 1813              		.cfi_offset 82, -32
 1814              		.cfi_offset 83, -28
 1815              		.cfi_offset 84, -24
 1816              		.cfi_offset 85, -20
 1817 084c 84409FE5 		ldr	r4, .L118+24	@ ivtmp.86,
 1818              	.LBB6:
 1819              	.LBB7:
 1820              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1821              		.loc 1 87 32 view .LVU481
 1822 0850 1EAA9FED 		vldr.32	s20, .L118+16	@ tmp130,
 1823              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1824              		.loc 1 87 26 view .LVU482
 1825 0854 199B9FED 		vldr.64	d9, .L118	@ tmp139,
 1826              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1827              		.loc 1 87 49 view .LVU483
 1828 0858 1A8B9FED 		vldr.64	d8, .L118+8	@ tmp133,
 1829              	.LBE7:
 1830              	.LBE6:
 1831              	@ armwave.c:374: 	mod_depth = mod;
 1832              		.loc 1 374 12 view .LVU484
 1833 085c 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 375:armwave.c     **** 
 376:armwave.c     ****     test_create_waveform();
 1834              		.loc 1 376 5 is_stmt 1 view .LVU485
 1835 0860 FEFFFFEB 		bl	test_create_waveform		@
 1836              	.LVL114:
 377:armwave.c     ****     test_create_gamma();
 1837              		.loc 1 377 5 view .LVU486
 1838              	.LBB9:
 1839              	.LBI6:
  81:armwave.c     **** {
 1840              		.loc 1 81 6 view .LVU487
  81:armwave.c     **** {
 1841              		.loc 1 81 6 is_stmt 0 view .LVU488
 1842 0864 013084E2 		add	r3, r4, #1	@ _30, ivtmp.86,
 1843 0868 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.86,
 1844 086c 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1845              	.LVL115:
 1846              	.L115:
 1847              	.LBB8:
  87:armwave.c     ****     }
 1848              		.loc 1 87 9 is_stmt 1 view .LVU489
 1849              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1850              		.loc 1 87 32 is_stmt 0 view .LVU490
 1851 0870 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.86
 1852              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1853              		.loc 1 87 26 view .LVU491
 1854 0874 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1855              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1856              		.loc 1 87 32 view .LVU492
 1857 0878 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1858 087c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1859 0880 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1860              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1861              		.loc 1 87 26 view .LVU493
 1862 0884 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1863 0888 FEFFFFEB 		bl	pow		@
 1864              	.LVL116:
 1865              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1866              		.loc 1 87 49 view .LVU494
 1867 088c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1868              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1869              		.loc 1 87 24 view .LVU495
 1870 0890 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1871 0894 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1872 0898 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1873              	.LVL117:
 1874              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1875              		.loc 1 86 5 view .LVU496
 1876 089c 060054E1 		cmp	r4, r6	@ ivtmp.86, _31
 1877 08a0 F2FFFF1A 		bne	.L115		@,
 1878              	.LVL118:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1879              		.loc 1 86 5 view .LVU497
 1880              	.LBE8:
 1881              	.LBE9:
 378:armwave.c     **** 
 379:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1882              		.loc 1 379 5 is_stmt 1 view .LVU498
 1883 08a4 D5FDFFEB 		bl	armwave_setup_render.constprop.0		@
 1884              	.LVL119:
 380:armwave.c     **** 
 381:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1885              		.loc 1 381 5 view .LVU499
 1886              	@ armwave.c:382: }
 382:armwave.c     **** }
 1887              		.loc 1 382 1 is_stmt 0 view .LVU500
 1888 08a8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1889              		.cfi_restore 84
 1890              		.cfi_restore 85
 1891              		.cfi_restore 82
 1892              		.cfi_restore 83
 1893              		.cfi_restore 80
 1894              		.cfi_restore 81
 1895              		.cfi_def_cfa_offset 16
 1896              	@ armwave.c:381:     printf("armwave version: %s\n", ARMWAVE_VER);
 381:armwave.c     **** }
 1897              		.loc 1 381 5 view .LVU501
 1898 08ac 28109FE5 		ldr	r1, .L118+28	@,
 1899 08b0 28009FE5 		ldr	r0, .L118+32	@,
 1900              	@ armwave.c:382: }
 1901              		.loc 1 382 1 view .LVU502
 1902 08b4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1903              		.cfi_restore 14
 1904              		.cfi_restore 6
 1905              		.cfi_restore 5
 1906              		.cfi_restore 4
 1907              		.cfi_def_cfa_offset 0
 1908              	@ armwave.c:381:     printf("armwave version: %s\n", ARMWAVE_VER);
 381:armwave.c     **** }
 1909              		.loc 1 381 5 view .LVU503
 1910 08b8 FEFFFFEA 		b	printf		@
 1911              	.LVL120:
 1912              	.L119:
 1913 08bc 0000A0E1 		.align	3
 1914              	.L118:
 1915 08c0 000000C0 		.word	-1073741824
 1916 08c4 CCCCEC3F 		.word	1072483532
 1917 08c8 00000000 		.word	0
 1918 08cc 00E06F40 		.word	1081073664
 1919 08d0 00007F43 		.word	1132396544
 1920 08d4 00000000 		.word	.LANCHOR1
 1921 08d8 FFFFFFFF 		.word	gamma_table-1
 1922 08dc 10010000 		.word	.LC11
 1923 08e0 18010000 		.word	.LC12
 1924              		.cfi_endproc
 1925              	.LFE65:
 1927              		.global	__aeabi_uidiv
 1928              		.align	2
 1929              		.global	armwave_test_generate
 1930              		.syntax unified
 1931              		.arm
 1932              		.fpu vfp
 1934              	armwave_test_generate:
 1935              	.LFB66:
 383:armwave.c     **** 
 384:armwave.c     **** void armwave_test_generate()
 385:armwave.c     **** {
 1936              		.loc 1 385 1 is_stmt 1 view -0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 8
 1939              		@ frame_needed = 0, uses_anonymous_args = 0
 386:armwave.c     **** 	uint32_t yy;
 1940              		.loc 1 386 2 view .LVU505
 387:armwave.c     **** 
 388:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1941              		.loc 1 388 5 view .LVU506
 1942              	@ armwave.c:385: {
 385:armwave.c     **** 	uint32_t yy;
 1943              		.loc 1 385 1 is_stmt 0 view .LVU507
 1944 08e4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1945              		.cfi_def_cfa_offset 36
 1946              		.cfi_offset 4, -36
 1947              		.cfi_offset 5, -32
 1948              		.cfi_offset 6, -28
 1949              		.cfi_offset 7, -24
 1950              		.cfi_offset 8, -20
 1951              		.cfi_offset 9, -16
 1952              		.cfi_offset 10, -12
 1953              		.cfi_offset 11, -8
 1954              		.cfi_offset 14, -4
 1955              	@ armwave.c:388:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1956              		.loc 1 388 5 view .LVU508
 1957 08e8 0010A0E3 		mov	r1, #0	@,
 1958 08ec 44419FE5 		ldr	r4, .L138	@ tmp269,
 1959              	@ armwave.c:385: {
 385:armwave.c     **** 	uint32_t yy;
 1960              		.loc 1 385 1 view .LVU509
 1961 08f0 0CD04DE2 		sub	sp, sp, #12	@,,
 1962              		.cfi_def_cfa_offset 48
 1963              	@ armwave.c:388:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1964              		.loc 1 388 5 view .LVU510
 1965 08f4 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 1966 08f8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 1967 08fc FEFFFFEB 		bl	memset		@
 1968              	.LVL121:
 389:armwave.c     **** 
 390:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1969              		.loc 1 390 5 is_stmt 1 view .LVU511
 1970              	@ armwave.c:390:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1971              		.loc 1 390 45 is_stmt 0 view .LVU512
 1972 0900 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 1973              	@ armwave.c:390:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1974              		.loc 1 390 5 view .LVU513
 1975 0904 020B55E3 		cmp	r5, #2048	@ _72,
 1976 0908 4800008A 		bhi	.L120		@,
 1977 090c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 1978              	@ armwave.c:390:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1979              		.loc 1 390 12 view .LVU514
 1980 0910 00A0A0E3 		mov	r10, #0	@ yy,
 1981              	.LVL122:
 1982              	.L126:
 391:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1983              		.loc 1 391 9 is_stmt 1 discriminator 3 view .LVU515
 1984 0914 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 1985              	.LBB12:
 1986              	.LBB13:
 1987              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1988              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU516
 1989 0918 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1990              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1991              		.loc 1 109 5 discriminator 3 view .LVU517
 1992 091c 000056E3 		cmp	r6, #0	@ prephitmp_171,
 1993              	.LBE13:
 1994              	.LBE12:
 1995              	@ armwave.c:391:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1996              		.loc 1 391 9 discriminator 3 view .LVU518
 1997 0920 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 1998              	.LVL123:
 1999              	.LBB15:
 2000              	.LBI12:
  98:armwave.c     **** {
 2001              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU519
 2002              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 2003              		.loc 1 100 5 discriminator 3 view .LVU520
 101:armwave.c     ****     uint8_t *wave_base;
 2004              		.loc 1 101 5 discriminator 3 view .LVU521
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2005              		.loc 1 102 5 discriminator 3 view .LVU522
 103:armwave.c     ****     uint8_t *write_buffer;
 2006              		.loc 1 103 5 discriminator 3 view .LVU523
 104:armwave.c     ****     
 2007              		.loc 1 104 5 discriminator 3 view .LVU524
 106:armwave.c     **** 
 2008              		.loc 1 106 5 discriminator 3 view .LVU525
 2009              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2010              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU526
 2011 0924 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 2012              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2013              		.loc 1 106 40 discriminator 3 view .LVU527
 2014 0928 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2015              	.LVL124:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2016              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU528
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2017              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU529
 2018 092c 3900000A 		beq	.L122		@,
 2019              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2020              		.loc 1 109 11 view .LVU530
 2021 0930 0080A0E3 		mov	r8, #0	@ w,
 2022 0934 043043E2 		sub	r3, r3, #4	@ _77, _3,
 2023              	.LVL125:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2024              		.loc 1 109 11 view .LVU531
 2025 0938 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 2026              	.LVL126:
 2027              	.L125:
 110:armwave.c     **** 
 2028              		.loc 1 110 9 is_stmt 1 view .LVU532
 2029              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2030              		.loc 1 110 64 is_stmt 0 view .LVU533
 2031 093c 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2032              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2033              		.loc 1 120 9 view .LVU534
 2034 0940 000059E3 		cmp	r9, #0	@ _4,
 2035              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2036              		.loc 1 110 36 view .LVU535
 2037 0944 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2038              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2039              		.loc 1 110 64 view .LVU536
 2040 0948 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 2041              	.LVL127:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2042              		.loc 1 120 9 is_stmt 1 view .LVU537
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2043              		.loc 1 120 9 is_stmt 0 view .LVU538
 2044 094c 2D00000A 		beq	.L123		@,
 2045 0950 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 2046 0954 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 2047              	.LVL128:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2048              		.loc 1 120 9 view .LVU539
 2049 0958 03E08EE0 		add	lr, lr, r3	@ ivtmp.92, _16, tmp205
 2050              	.LVL129:
 2051              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2052              		.loc 1 120 16 view .LVU540
 2053 095c 0010A0E3 		mov	r1, #0	@ yy,
 2054              	.LVL130:
 2055              	.L124:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2056              		.loc 1 135 13 is_stmt 1 view .LVU541
 2057              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2058              		.loc 1 135 18 is_stmt 0 view .LVU542
 2059 0960 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 2060              	.LVL131:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2061              		.loc 1 139 13 is_stmt 1 view .LVU543
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2062              		.loc 1 140 14 view .LVU544
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2063              		.loc 1 141 14 view .LVU545
 142:armwave.c     ****             	word >>= 8;
 2064              		.loc 1 142 14 view .LVU546
 2065              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2066              		.loc 1 140 42 is_stmt 0 view .LVU547
 2067 0964 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2068              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2069              		.loc 1 141 60 view .LVU548
 2070 0968 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2071              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2072              		.loc 1 140 34 view .LVU549
 2073 096c 73C0EFE6 		uxtb	ip, r3	@ word, word
 2074              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2075              		.loc 1 143 19 view .LVU550
 2076 0970 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 2077              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2078              		.loc 1 142 44 view .LVU551
 2079 0974 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 2080              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2081              		.loc 1 140 34 view .LVU552
 2082 0978 7550EFE6 		uxtb	r5, r5	@ word, word
 2083              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2084              		.loc 1 142 44 view .LVU553
 2085 097c 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2086              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2087              		.loc 1 141 60 view .LVU554
 2088 0980 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2089              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2090              		.loc 1 143 19 view .LVU555
 2091 0984 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2092              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2093              		.loc 1 142 44 view .LVU556
 2094 0988 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2095              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2096              		.loc 1 140 34 view .LVU557
 2097 098c 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2098              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2099              		.loc 1 143 19 view .LVU558
 2100 0990 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2101              	.LVL132:
 2102              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2103              		.loc 1 142 44 view .LVU559
 2104 0994 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2105 0998 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2106              	.LVL133:
 143:armwave.c     ****     		}
 2107              		.loc 1 143 14 is_stmt 1 view .LVU560
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2108              		.loc 1 140 14 view .LVU561
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2109              		.loc 1 141 14 view .LVU562
 142:armwave.c     ****             	word >>= 8;
 2110              		.loc 1 142 14 view .LVU563
 2111              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2112              		.loc 1 140 42 is_stmt 0 view .LVU564
 2113 099c 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2114              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2115              		.loc 1 141 60 view .LVU565
 2116 09a0 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2117              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2118              		.loc 1 142 44 view .LVU566
 2119 09a4 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2120              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2121              		.loc 1 141 60 view .LVU567
 2122 09a8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2123              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2124              		.loc 1 142 44 view .LVU568
 2125 09ac 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2126              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2127              		.loc 1 141 60 view .LVU569
 2128 09b0 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2129              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2130              		.loc 1 120 37 view .LVU570
 2131 09b4 041081E2 		add	r1, r1, #4	@ yy, yy,
 2132              	.LVL134:
 2133              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2134              		.loc 1 142 44 view .LVU571
 2135 09b8 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2136              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2137              		.loc 1 120 9 view .LVU572
 2138 09bc 010059E1 		cmp	r9, r1	@ _4, yy
 2139              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2140              		.loc 1 142 44 view .LVU573
 2141 09c0 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2142 09c4 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2143              	.LVL135:
 143:armwave.c     ****     		}
 2144              		.loc 1 143 14 is_stmt 1 view .LVU574
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2145              		.loc 1 140 14 view .LVU575
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2146              		.loc 1 141 14 view .LVU576
 142:armwave.c     ****             	word >>= 8;
 2147              		.loc 1 142 14 view .LVU577
 2148              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2149              		.loc 1 140 42 is_stmt 0 view .LVU578
 2150 09c8 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2151              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2152              		.loc 1 141 60 view .LVU579
 2153 09cc 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2154              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2155              		.loc 1 142 44 view .LVU580
 2156 09d0 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2157 09d4 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2158 09d8 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2159 09dc 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2160 09e0 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****     		}
 2161              		.loc 1 143 14 is_stmt 1 view .LVU581
 2162              	.LVL136:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2163              		.loc 1 140 14 view .LVU582
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2164              		.loc 1 141 14 view .LVU583
 142:armwave.c     ****             	word >>= 8;
 2165              		.loc 1 142 14 view .LVU584
 2166              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2167              		.loc 1 140 42 is_stmt 0 view .LVU585
 2168 09e4 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2169              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2170              		.loc 1 141 60 view .LVU586
 2171 09e8 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2172              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2173              		.loc 1 142 44 view .LVU587
 2174 09ec 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2175 09f0 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2176 09f4 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2177 09f8 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2178 09fc 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****     		}
 2179              		.loc 1 143 14 is_stmt 1 view .LVU588
 2180              	.LVL137:
 2181              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2182              		.loc 1 120 9 is_stmt 0 view .LVU589
 2183 0a00 D6FFFF8A 		bhi	.L124		@,
 2184 0a04 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2185              	.LVL138:
 2186              	.L123:
 2187              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2188              		.loc 1 109 44 view .LVU590
 2189 0a08 018088E2 		add	r8, r8, #1	@ w, w,
 2190              	.LVL139:
 2191              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2192              		.loc 1 109 5 view .LVU591
 2193 0a0c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2194 0a10 C9FFFF3A 		bcc	.L125		@,
 2195 0a14 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2196              	.LVL140:
 2197              	.L122:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2198              		.loc 1 109 5 view .LVU592
 2199              	.LBE14:
 2200              	.LBE15:
 2201              	@ armwave.c:390:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2202              		.loc 1 390 28 discriminator 3 view .LVU593
 2203 0a18 0510A0E1 		mov	r1, r5	@, _72
 2204 0a1c 020BA0E3 		mov	r0, #2048	@,
 2205              	.LVL141:
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2206              		.loc 1 390 28 discriminator 3 view .LVU594
 2207 0a20 FEFFFFEB 		bl	__aeabi_uidiv		@
 2208              	.LVL142:
 2209              	@ armwave.c:390:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2210              		.loc 1 390 63 discriminator 3 view .LVU595
 2211 0a24 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2212              	.LVL143:
 2213              	@ armwave.c:390:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2214              		.loc 1 390 5 discriminator 3 view .LVU596
 2215 0a28 0A0050E1 		cmp	r0, r10	@, yy
 2216 0a2c B8FFFF8A 		bhi	.L126		@,
 2217              	.LVL144:
 2218              	.L120:
 2219              	@ armwave.c:393: }
 392:armwave.c     ****     }
 393:armwave.c     **** }
 2220              		.loc 1 393 1 view .LVU597
 2221 0a30 0CD08DE2 		add	sp, sp, #12	@,,
 2222              		.cfi_def_cfa_offset 36
 2223              		@ sp needed	@
 2224 0a34 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2225              	.L139:
 2226              		.align	2
 2227              	.L138:
 2228 0a38 00000000 		.word	g_armwave_state
 2229              		.cfi_endproc
 2230              	.LFE66:
 2232              		.align	2
 2233              		.global	armwave_test_get_buffer
 2234              		.syntax unified
 2235              		.arm
 2236              		.fpu vfp
 2238              	armwave_test_get_buffer:
 2239              	.LFB67:
 394:armwave.c     **** 
 395:armwave.c     **** PyObject *armwave_test_get_buffer()
 396:armwave.c     **** {
 2240              		.loc 1 396 1 is_stmt 1 view -0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 397:armwave.c     ****     PyObject *mv;
 2244              		.loc 1 397 5 view .LVU599
 398:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2245              		.loc 1 398 5 view .LVU600
 2246              	@ armwave.c:396: {
 396:armwave.c     ****     PyObject *mv;
 2247              		.loc 1 396 1 is_stmt 0 view .LVU601
 2248 0a3c 30402DE9 		push	{r4, r5, lr}	@
 2249              		.cfi_def_cfa_offset 12
 2250              		.cfi_offset 4, -12
 2251              		.cfi_offset 5, -8
 2252              		.cfi_offset 14, -4
 2253              	@ armwave.c:398:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2254              		.loc 1 398 22 view .LVU602
 2255 0a40 2C00A0E3 		mov	r0, #44	@,
 2256              	@ armwave.c:396: {
 396:armwave.c     ****     PyObject *mv;
 2257              		.loc 1 396 1 view .LVU603
 2258 0a44 0CD04DE2 		sub	sp, sp, #12	@,,
 2259              		.cfi_def_cfa_offset 24
 2260              	@ armwave.c:398:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2261              		.loc 1 398 22 view .LVU604
 2262 0a48 FEFFFFEB 		bl	malloc		@
 2263              	.LVL145:
 2264              	@ armwave.c:400:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 399:armwave.c     ****     
 400:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2265              		.loc 1 400 5 view .LVU605
 2266 0a4c 3C409FE5 		ldr	r4, .L142	@ tmp118,
 2267              	@ armwave.c:398:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 398:armwave.c     ****     
 2268              		.loc 1 398 22 view .LVU606
 2269 0a50 0050A0E1 		mov	r5, r0	@ tmp117,
 2270              	.LVL146:
 2271              		.loc 1 400 5 is_stmt 1 view .LVU607
 2272 0a54 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 2273              	.LVL147:
 2274              		.loc 1 400 5 is_stmt 0 view .LVU608
 2275 0a58 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2276              	.LVL148:
 401:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2277              		.loc 1 401 5 is_stmt 1 view .LVU609
 2278              	@ armwave.c:401:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2279              		.loc 1 401 79 is_stmt 0 view .LVU610
 2280 0a5c 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2281              	@ armwave.c:401:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2282              		.loc 1 401 5 view .LVU611
 2283 0a60 08C0A0E3 		mov	ip, #8	@ tmp125,
 2284 0a64 0110A0E3 		mov	r1, #1	@ tmp126,
 2285 0a68 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2286 0a6c 02108DE8 		stm	sp, {r1, ip}	@,,
 2287 0a70 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.out_pixbuf
 2288 0a74 0500A0E1 		mov	r0, r5	@, tmp117
 2289 0a78 0010A0E3 		mov	r1, #0	@,
 2290 0a7c FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2291              	.LVL149:
 402:armwave.c     **** 
 403:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2292              		.loc 1 403 2 is_stmt 1 view .LVU612
 2293              	@ armwave.c:403: 	mv = PyMemoryView_FromBuffer(buf);
 2294              		.loc 1 403 7 is_stmt 0 view .LVU613
 2295 0a80 0500A0E1 		mov	r0, r5	@, tmp117
 2296              	@ armwave.c:404: }
 404:armwave.c     **** }
 2297              		.loc 1 404 1 view .LVU614
 2298 0a84 0CD08DE2 		add	sp, sp, #12	@,,
 2299              		.cfi_def_cfa_offset 12
 2300              		@ sp needed	@
 2301 0a88 3040BDE8 		pop	{r4, r5, lr}	@
 2302              		.cfi_restore 14
 2303              		.cfi_restore 5
 2304              		.cfi_restore 4
 2305              		.cfi_def_cfa_offset 0
 2306              	.LVL150:
 2307              	@ armwave.c:403: 	mv = PyMemoryView_FromBuffer(buf);
 403:armwave.c     **** }
 2308              		.loc 1 403 7 view .LVU615
 2309 0a8c FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2310              	.LVL151:
 2311              	.L143:
 403:armwave.c     **** }
 2312              		.loc 1 403 7 view .LVU616
 2313              		.align	2
 2314              	.L142:
 2315 0a90 00000000 		.word	g_armwave_state
 2316              		.cfi_endproc
 2317              	.LFE67:
 2319              		.align	2
 2320              		.global	armwave_test_dump_buffer_to_ppm
 2321              		.syntax unified
 2322              		.arm
 2323              		.fpu vfp
 2325              	armwave_test_dump_buffer_to_ppm:
 2326              	.LVL152:
 2327              	.LFB68:
 405:armwave.c     **** 
 406:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 407:armwave.c     **** {
 2328              		.loc 1 407 1 is_stmt 1 view -0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332              		@ link register save eliminated.
 408:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2333              		.loc 1 408 2 view .LVU618
 2334 0a94 08309FE5 		ldr	r3, .L145	@ tmp112,
 2335 0a98 0010A0E1 		mov	r1, r0	@, fn
 2336 0a9c 440093E5 		ldr	r0, [r3, #68]	@, g_armwave_state.out_pixbuf
 2337              	.LVL153:
 2338              		.loc 1 408 2 is_stmt 0 view .LVU619
 2339 0aa0 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2340              	.LVL154:
 2341              	.L146:
 2342              		.loc 1 408 2 view .LVU620
 2343              		.align	2
 2344              	.L145:
 2345 0aa4 00000000 		.word	g_armwave_state
 2346              		.cfi_endproc
 2347              	.LFE68:
 2349              		.align	2
 2350              		.global	armwave_cleanup
 2351              		.syntax unified
 2352              		.arm
 2353              		.fpu vfp
 2355              	armwave_cleanup:
 2356              	.LFB69:
 409:armwave.c     **** }
 410:armwave.c     **** 
 411:armwave.c     **** void armwave_cleanup()
 412:armwave.c     **** {
 2357              		.loc 1 412 1 is_stmt 1 view -0
 2358              		.cfi_startproc
 2359              		@ args = 0, pretend = 0, frame = 0
 2360              		@ frame_needed = 0, uses_anonymous_args = 0
 413:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2361              		.loc 1 413 2 view .LVU622
 2362              	@ armwave.c:412: {
 412:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2363              		.loc 1 412 1 is_stmt 0 view .LVU623
 2364 0aa8 10402DE9 		push	{r4, lr}	@
 2365              		.cfi_def_cfa_offset 8
 2366              		.cfi_offset 4, -8
 2367              		.cfi_offset 14, -4
 2368              	@ armwave.c:413: 	free(g_armwave_state.out_pixbuf);
 2369              		.loc 1 413 22 view .LVU624
 2370 0aac 28409FE5 		ldr	r4, .L149	@ tmp113,
 2371              	@ armwave.c:413: 	free(g_armwave_state.out_pixbuf);
 2372              		.loc 1 413 2 view .LVU625
 2373 0ab0 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 2374 0ab4 FEFFFFEB 		bl	free		@
 2375              	.LVL155:
 414:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2376              		.loc 1 414 2 is_stmt 1 view .LVU626
 2377 0ab8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2378 0abc FEFFFFEB 		bl	free		@
 2379              	.LVL156:
 415:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2380              		.loc 1 415 2 view .LVU627
 2381 0ac0 600094E5 		ldr	r0, [r4, #96]	@, g_armwave_state.xcoord_to_xpixel
 2382 0ac4 FEFFFFEB 		bl	free		@
 2383              	.LVL157:
 416:armwave.c     **** 
 417:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2384              		.loc 1 417 2 view .LVU628
 2385              	@ armwave.c:417: 	g_armwave_state.out_pixbuf = NULL;
 2386              		.loc 1 417 29 is_stmt 0 view .LVU629
 2387 0ac8 0030A0E3 		mov	r3, #0	@ tmp120,
 2388 0acc 443084E5 		str	r3, [r4, #68]	@ tmp120, g_armwave_state.out_pixbuf
 418:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2389              		.loc 1 418 2 is_stmt 1 view .LVU630
 2390              	@ armwave.c:418: 	g_armwave_state.ch1_buffer = NULL;
 2391              		.loc 1 418 29 is_stmt 0 view .LVU631
 2392 0ad0 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 419:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2393              		.loc 1 419 2 is_stmt 1 view .LVU632
 2394              	@ armwave.c:419: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2395              		.loc 1 419 35 is_stmt 0 view .LVU633
 2396 0ad4 603084E5 		str	r3, [r4, #96]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2397              	@ armwave.c:420: }
 420:armwave.c     **** }
 2398              		.loc 1 420 1 view .LVU634
 2399 0ad8 1080BDE8 		pop	{r4, pc}	@
 2400              	.L150:
 2401              		.align	2
 2402              	.L149:
 2403 0adc 00000000 		.word	g_armwave_state
 2404              		.cfi_endproc
 2405              	.LFE69:
 2407              		.section	.text.startup,"ax",%progbits
 2408              		.align	2
 2409              		.global	main
 2410              		.syntax unified
 2411              		.arm
 2412              		.fpu vfp
 2414              	main:
 2415              	.LVL158:
 2416              	.LFB70:
 421:armwave.c     **** 
 422:armwave.c     **** int main(int argc, char *argv[])
 423:armwave.c     **** {
 2417              		.loc 1 423 1 is_stmt 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 8
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 424:armwave.c     ****     uint32_t *out_buffer;
 2421              		.loc 1 424 5 view .LVU636
 425:armwave.c     ****     uint32_t xx, yy, n;
 2422              		.loc 1 425 5 view .LVU637
 426:armwave.c     **** 
 427:armwave.c     ****     //printf("Starting armwave...\n");
 428:armwave.c     ****     armwave_init();
 2423              		.loc 1 428 5 view .LVU638
 2424              	.LBB20:
 2425              	.LBI20:
 151:armwave.c     **** {
 2426              		.loc 1 151 6 view .LVU639
 2427              	.LBB21:
 153:armwave.c     **** }
 2428              		.loc 1 153 5 view .LVU640
 2429              	.LBE21:
 2430              	.LBE20:
 2431              	@ armwave.c:423: {
 423:armwave.c     ****     uint32_t *out_buffer;
 2432              		.loc 1 423 1 is_stmt 0 view .LVU641
 2433 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2434              		.cfi_def_cfa_offset 36
 2435              		.cfi_offset 4, -36
 2436              		.cfi_offset 5, -32
 2437              		.cfi_offset 6, -28
 2438              		.cfi_offset 7, -24
 2439              		.cfi_offset 8, -20
 2440              		.cfi_offset 9, -16
 2441              		.cfi_offset 10, -12
 2442              		.cfi_offset 11, -8
 2443              		.cfi_offset 14, -4
 2444 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2445              		.cfi_def_cfa_offset 48
 2446              	.LBB25:
 2447              	.LBB22:
 2448              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2449              		.loc 1 153 27 view .LVU642
 2450 0008 68919FE5 		ldr	r9, .L171	@ tmp267,
 2451              	.LBE22:
 2452              	.LBE25:
 2453              	@ armwave.c:437:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 429:armwave.c     **** 
 430:armwave.c     ****     //printf("Creating test waveform...\n");
 431:armwave.c     ****     test_create_waveform();
 432:armwave.c     **** 
 433:armwave.c     ****     //printf("Creating gamma LUT...\n");
 434:armwave.c     ****     test_create_gamma();
 435:armwave.c     **** 
 436:armwave.c     ****     //printf("Setting up render...\n");
 437:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2454              		.loc 1 437 5 view .LVU643
 2455 000c 68219FE5 		ldr	r2, .L171+4	@ ivtmp_191,
 2456              	.LBB26:
 2457              	.LBB23:
 2458              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2459              		.loc 1 153 27 view .LVU644
 2460 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2461              	.LBE23:
 2462              	.LBE26:
 2463              	@ armwave.c:437:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2464              		.loc 1 437 5 view .LVU645
 2465 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2466              	.LBB27:
 2467              	.LBB24:
 2468              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2469              		.loc 1 153 27 view .LVU646
 2470 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2471              	.LBE24:
 2472              	.LBE27:
 431:armwave.c     **** 
 2473              		.loc 1 431 5 is_stmt 1 view .LVU647
 2474 001c FEFFFFEB 		bl	test_create_waveform		@
 2475              	.LVL159:
 434:armwave.c     **** 
 2476              		.loc 1 434 5 view .LVU648
 2477 0020 FEFFFFEB 		bl	test_create_gamma		@
 2478              	.LVL160:
 2479              		.loc 1 437 5 view .LVU649
 2480 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2481              	.LVL161:
 438:armwave.c     **** 
 439:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 440:armwave.c     **** 
 441:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2482              		.loc 1 441 5 view .LVU650
 2483              		.loc 1 441 5 is_stmt 0 view .LVU651
 2484 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2485              	.LVL162:
 2486              	.L152:
 2487              	@ armwave.c:442:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 442:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2488              		.loc 1 442 9 view .LVU652
 2489 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2490 0030 4900008A 		bhi	.L160		@,
 2491 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2492              	@ armwave.c:442:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2493              		.loc 1 442 16 view .LVU653
 2494 0038 0080A0E3 		mov	r8, #0	@ yy,
 2495 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2496              	.LVL163:
 2497              	.L157:
 443:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 444:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2498              		.loc 1 444 13 is_stmt 1 discriminator 3 view .LVU654
 2499 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2500              	.LBB28:
 2501              	.LBB29:
 2502              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2503              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU655
 2504 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2505              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2506              		.loc 1 109 5 discriminator 3 view .LVU656
 2507 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2508              	.LBE29:
 2509              	.LBE28:
 2510              	@ armwave.c:444:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2511              		.loc 1 444 13 discriminator 3 view .LVU657
 2512 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2513              	.LVL164:
 2514              	.LBB31:
 2515              	.LBI28:
  98:armwave.c     **** {
 2516              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU658
 2517              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 2518              		.loc 1 100 5 discriminator 3 view .LVU659
 101:armwave.c     ****     uint8_t *wave_base;
 2519              		.loc 1 101 5 discriminator 3 view .LVU660
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2520              		.loc 1 102 5 discriminator 3 view .LVU661
 103:armwave.c     ****     uint8_t *write_buffer;
 2521              		.loc 1 103 5 discriminator 3 view .LVU662
 104:armwave.c     ****     
 2522              		.loc 1 104 5 discriminator 3 view .LVU663
 106:armwave.c     **** 
 2523              		.loc 1 106 5 discriminator 3 view .LVU664
 2524              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2525              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU665
 2526 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2527              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2528              		.loc 1 106 40 discriminator 3 view .LVU666
 2529 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2530              	.LVL165:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2531              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU667
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2532              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU668
 2533 0058 3900000A 		beq	.L153		@,
 2534              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2535              		.loc 1 109 11 view .LVU669
 2536 005c 0070A0E3 		mov	r7, #0	@ w,
 2537 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2538              	.LVL166:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2539              		.loc 1 109 11 view .LVU670
 2540 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2541              	.LVL167:
 2542              	.L156:
 110:armwave.c     **** 
 2543              		.loc 1 110 9 is_stmt 1 view .LVU671
 2544              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2545              		.loc 1 110 64 is_stmt 0 view .LVU672
 2546 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2547              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2548              		.loc 1 120 9 view .LVU673
 2549 006c 00005AE3 		cmp	r10, #0	@ _2,
 2550              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2551              		.loc 1 110 36 view .LVU674
 2552 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2553              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2554              		.loc 1 110 64 view .LVU675
 2555 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2556              	.LVL168:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2557              		.loc 1 120 9 is_stmt 1 view .LVU676
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2558              		.loc 1 120 9 is_stmt 0 view .LVU677
 2559 0078 2D00000A 		beq	.L154		@,
 2560 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2561 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2562              	.LVL169:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2563              		.loc 1 120 9 view .LVU678
 2564 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.105, _20, tmp202
 2565              	.LVL170:
 2566              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2567              		.loc 1 120 16 view .LVU679
 2568 0088 0010A0E3 		mov	r1, #0	@ yy,
 2569              	.LVL171:
 2570              	.L155:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2571              		.loc 1 135 13 is_stmt 1 view .LVU680
 2572              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2573              		.loc 1 135 18 is_stmt 0 view .LVU681
 2574 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2575              	.LVL172:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2576              		.loc 1 139 13 is_stmt 1 view .LVU682
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2577              		.loc 1 140 14 view .LVU683
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2578              		.loc 1 141 14 view .LVU684
 142:armwave.c     ****             	word >>= 8;
 2579              		.loc 1 142 14 view .LVU685
 2580              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2581              		.loc 1 140 42 is_stmt 0 view .LVU686
 2582 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2583              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2584              		.loc 1 141 60 view .LVU687
 2585 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2586              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2587              		.loc 1 140 34 view .LVU688
 2588 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2589              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2590              		.loc 1 143 19 view .LVU689
 2591 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2592              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2593              		.loc 1 142 44 view .LVU690
 2594 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2595              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2596              		.loc 1 140 34 view .LVU691
 2597 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2598              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2599              		.loc 1 142 44 view .LVU692
 2600 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2601              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2602              		.loc 1 141 60 view .LVU693
 2603 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2604              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2605              		.loc 1 143 19 view .LVU694
 2606 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2607              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2608              		.loc 1 142 44 view .LVU695
 2609 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2610              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2611              		.loc 1 140 34 view .LVU696
 2612 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2613              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2614              		.loc 1 143 19 view .LVU697
 2615 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2616              	.LVL173:
 2617              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2618              		.loc 1 142 44 view .LVU698
 2619 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2620 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2621              	.LVL174:
 143:armwave.c     ****     		}
 2622              		.loc 1 143 14 is_stmt 1 view .LVU699
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2623              		.loc 1 140 14 view .LVU700
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2624              		.loc 1 141 14 view .LVU701
 142:armwave.c     ****             	word >>= 8;
 2625              		.loc 1 142 14 view .LVU702
 2626              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2627              		.loc 1 140 42 is_stmt 0 view .LVU703
 2628 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2629              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2630              		.loc 1 141 60 view .LVU704
 2631 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2632              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2633              		.loc 1 142 44 view .LVU705
 2634 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2635              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2636              		.loc 1 141 60 view .LVU706
 2637 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2638              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2639              		.loc 1 142 44 view .LVU707
 2640 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2641              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2642              		.loc 1 141 60 view .LVU708
 2643 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2644              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2645              		.loc 1 120 37 view .LVU709
 2646 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2647              	.LVL175:
 2648              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2649              		.loc 1 142 44 view .LVU710
 2650 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2651              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2652              		.loc 1 120 9 view .LVU711
 2653 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2654              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2655              		.loc 1 142 44 view .LVU712
 2656 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2657 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2658              	.LVL176:
 143:armwave.c     ****     		}
 2659              		.loc 1 143 14 is_stmt 1 view .LVU713
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2660              		.loc 1 140 14 view .LVU714
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2661              		.loc 1 141 14 view .LVU715
 142:armwave.c     ****             	word >>= 8;
 2662              		.loc 1 142 14 view .LVU716
 2663              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2664              		.loc 1 140 42 is_stmt 0 view .LVU717
 2665 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2666              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2667              		.loc 1 141 60 view .LVU718
 2668 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2669              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2670              		.loc 1 142 44 view .LVU719
 2671 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2672 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2673 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2674 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2675 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****     		}
 2676              		.loc 1 143 14 is_stmt 1 view .LVU720
 2677              	.LVL177:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2678              		.loc 1 140 14 view .LVU721
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2679              		.loc 1 141 14 view .LVU722
 142:armwave.c     ****             	word >>= 8;
 2680              		.loc 1 142 14 view .LVU723
 2681              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2682              		.loc 1 140 42 is_stmt 0 view .LVU724
 2683 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2684              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2685              		.loc 1 141 60 view .LVU725
 2686 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2687              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2688              		.loc 1 142 44 view .LVU726
 2689 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2690 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2691 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2692 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2693 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****     		}
 2694              		.loc 1 143 14 is_stmt 1 view .LVU727
 2695              	.LVL178:
 2696              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2697              		.loc 1 120 9 is_stmt 0 view .LVU728
 2698 012c D6FFFF8A 		bhi	.L155		@,
 2699 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2700              	.LVL179:
 2701              	.L154:
 2702              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2703              		.loc 1 109 44 view .LVU729
 2704 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2705              	.LVL180:
 2706              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2707              		.loc 1 109 5 view .LVU730
 2708 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2709 013c C9FFFF3A 		bcc	.L156		@,
 2710 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2711              	.LVL181:
 2712              	.L153:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2713              		.loc 1 109 5 view .LVU731
 2714              	.LBE30:
 2715              	.LBE31:
 2716              	@ armwave.c:442:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 442:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2717              		.loc 1 442 32 discriminator 3 view .LVU732
 2718 0144 0510A0E1 		mov	r1, r5	@, _61
 2719 0148 020BA0E3 		mov	r0, #2048	@,
 2720              	.LVL182:
 442:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2721              		.loc 1 442 32 discriminator 3 view .LVU733
 2722 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2723              	.LVL183:
 2724              	@ armwave.c:442:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 442:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2725              		.loc 1 442 67 discriminator 3 view .LVU734
 2726 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2727              	.LVL184:
 2728              	@ armwave.c:442:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 442:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2729              		.loc 1 442 9 discriminator 3 view .LVU735
 2730 0154 080050E1 		cmp	r0, r8	@, yy
 2731 0158 B8FFFF8A 		bhi	.L157		@,
 2732              	.LVL185:
 2733              	.L160:
 2734              	@ armwave.c:441:     for(n = 0; n < 5000; n++) {
 441:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2735              		.loc 1 441 5 discriminator 2 view .LVU736
 2736 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2737 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2738 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2739 0168 AFFFFF1A 		bne	.L152		@,
 2740 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 445:armwave.c     ****         }
 446:armwave.c     ****     }
 447:armwave.c     **** 
 448:armwave.c     ****     /*
 449:armwave.c     ****     printf("Creating pixbuf\n");
 450:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 451:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 452:armwave.c     **** 
 453:armwave.c     ****     printf("Dumping pixbuf\n");
 454:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 455:armwave.c     ****     */
 456:armwave.c     **** 
 457:armwave.c     ****     return 0;
 2741              		.loc 1 457 5 is_stmt 1 view .LVU737
 2742              	@ armwave.c:458: }
 458:armwave.c     **** }...
 2743              		.loc 1 458 1 is_stmt 0 view .LVU738
 2744 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2745              		.cfi_def_cfa_offset 36
 2746              		@ sp needed	@
 2747 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2748              	.L172:
 2749              		.align	2
 2750              	.L171:
 2751 0178 00000000 		.word	g_armwave_state
 2752 017c 88130000 		.word	5000
 2753              		.cfi_endproc
 2754              	.LFE70:
 2756              		.global	mod_depth
 2757              		.global	overall_scale
 2758              		.comm	gamma_table,256,4
 2759              		.comm	test_wave_buffer,131072,4
 2760              		.comm	g_armwave_state,100,4
 2761              		.section	.rodata
 2762              		.align	2
 2763              		.set	.LANCHOR0,. + 0
 2766              	__PRETTY_FUNCTION__.16997:
 2767 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2767      6176655F 
 2767      73657475 
 2767      705F7265 
 2767      6E646572 
 2768 0015 000000   		.space	3
 2771              	__PRETTY_FUNCTION__.17023:
 2772 0018 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2772      6176655F 
 2772      66696C6C 
 2772      5F706978 
 2772      62756632 
 2773 002d 000000   		.space	3
 2776              	overall_scale:
 2777 0030 00002041 		.word	1092616192
 2778              		.bss
 2779              		.align	2
 2780              		.set	.LANCHOR1,. + 0
 2783              	mod_depth:
 2784 0000 00000000 		.space	4
 2785              		.section	.rodata.str1.4,"aMS",%progbits,1
 2786              		.align	2
 2787              	.LC0:
 2788 0000 61726D77 		.ascii	"armwave.c\000"
 2788      6176652E 
 2788      6300
 2789 000a 0000     		.space	2
 2790              	.LC1:
 2791 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2791      6D776176 
 2791      655F7374 
 2791      6174652E 
 2791      6368315F 
 2792 002f 00       		.space	1
 2793              	.LC2:
 2794 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2794      6D776176 
 2794      655F7374 
 2794      6174652E 
 2794      78636F6F 
 2795 0059 000000   		.space	3
 2796              	.LC3:
 2797 005c 73746172 		.ascii	"start_point < end_point\000"
 2797      745F706F 
 2797      696E7420 
 2797      3C20656E 
 2797      645F706F 
 2798              	.LC4:
 2799 0074 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 2799      65745F68 
 2799      65696768 
 2799      74203D3D 
 2799      20323536 
 2800 00a7 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 2800      68656967 
 2800      6874203D 
 2800      3D203130 
 2800      3234207C 
 2801 00d3 00       		.space	1
 2802              	.LC5:
 2803 00d4 6F75745F 		.ascii	"out_buffer != NULL\000"
 2803      62756666 
 2803      65722021 
 2803      3D204E55 
 2803      4C4C00
 2804 00e7 00       		.space	1
 2805              	.LC6:
 2806 00e8 776200   		.ascii	"wb\000"
 2807 00eb 00       		.space	1
 2808              	.LC7:
 2809 00ec 50330A00 		.ascii	"P3\012\000"
 2810              	.LC8:
 2811 00f0 25642025 		.ascii	"%d %d\012\000"
 2811      640A00
 2812 00f7 00       		.space	1
 2813              	.LC9:
 2814 00f8 3235350A 		.ascii	"255\012\000"
 2814      00
 2815 00fd 000000   		.space	3
 2816              	.LC10:
 2817 0100 25336420 		.ascii	"%3d %3d %3d\012\000"
 2817      25336420 
 2817      2533640A 
 2817      00
 2818 010d 000000   		.space	3
 2819              	.LC11:
 2820 0110 76302E30 		.ascii	"v0.0.1\000"
 2820      2E3100
 2821 0117 00       		.space	1
 2822              	.LC12:
 2823 0118 61726D77 		.ascii	"armwave version: %s\012\000"
 2823      61766520 
 2823      76657273 
 2823      696F6E3A 
 2823      2025730A 
 2824              		.text
 2825              	.Letext0:
 2826              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2827              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2828              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2829              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2830              		.file 6 "/usr/include/stdio.h"
 2831              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2832              		.file 8 "/usr/include/errno.h"
 2833              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2834              		.file 10 "/usr/include/unistd.h"
 2835              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2836              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2837              		.file 13 "/usr/local/include/python3.8/pyport.h"
 2838              		.file 14 "/usr/include/math.h"
 2839              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2840              		.file 16 "/usr/include/time.h"
 2841              		.file 17 "/usr/local/include/python3.8/pymem.h"
 2842              		.file 18 "/usr/local/include/python3.8/object.h"
 2843              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2844              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2845              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2846              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2847              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2848              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2849              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2850              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2851              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2852              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2853              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2854              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2855              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2856              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2857              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2858              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2859              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2860              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2861              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2862              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2863              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2864              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2865              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2866              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2867              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2868              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2869              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2870              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2871              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2872              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2873              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2874              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2875              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2876              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2877              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2878              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2879              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2880              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2881              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2882              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2883              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2884              		.file 60 "/usr/local/include/python3.8/context.h"
 2885              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2886              		.file 62 "/usr/local/include/python3.8/code.h"
 2887              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2888              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2889              		.file 65 "/usr/local/include/python3.8/import.h"
 2890              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2891              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2892              		.file 68 "armwave.h"
 2893              		.file 69 "/usr/include/stdlib.h"
 2894              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 2895              		.file 71 "<built-in>"
 2896              		.file 72 "/usr/include/assert.h"
 2897              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
