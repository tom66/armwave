   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.49, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.43, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.43, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.49, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.44, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.43, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.50, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 85 13 is_stmt 1 view .LVU52
  86:armwave.c     **** 
  87:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_sta
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 // BUG:  waves 3/4/5 seem to be all zeroes; this kinda ignores them but obviously n
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.43,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.44, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 351              		.loc 1 85 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 scale_value = word & 0xff;
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  90:armwave.c     ****                 
 355              		.loc 1 90 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.43, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.44,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.49, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.43, ivtmp.43, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.42, ivtmp.49
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  90:armwave.c     ****                 
 435              		.loc 1 90 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  90:armwave.c     ****                 
 470              		.loc 1 90 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  90:armwave.c     ****                 
 506              		.loc 1 90 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.44, ivtmp.44, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.49, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.49, ivtmp.49, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.49, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.50, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.50, ivtmp.50, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.50, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:113: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** 
 112:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 555              		.loc 1 113 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 113 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 114:armwave.c     **** 
 115:armwave.c     **** /*
 116:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 117:armwave.c     ****  * Rows are repeated as necessary.
 118:armwave.c     ****  */
 119:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 120:armwave.c     **** {
 578              		.loc 1 120 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 582              		.loc 1 121 5 view .LVU129
 122:armwave.c     ****     // uint32_t ysub;
 123:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 123 5 view .LVU130
 124:armwave.c     ****     uint8_t r, g, b;
 584              		.loc 1 124 5 view .LVU131
 125:armwave.c     ****     int value; 
 585              		.loc 1 125 5 view .LVU132
 126:armwave.c     ****     // uint8_t row;
 127:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 586              		.loc 1 127 5 view .LVU133
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 587              		.loc 1 128 5 view .LVU134
 129:armwave.c     ****     uint32_t offset;
 588              		.loc 1 129 5 view .LVU135
 130:armwave.c     **** 
 131:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 132:armwave.c     **** 
 133:armwave.c     ****     if(out_buffer == NULL)
 589              		.loc 1 133 5 view .LVU136
 590              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 591              		.loc 1 120 1 is_stmt 0 view .LVU137
 592 02a8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 593              		.cfi_def_cfa_offset 36
 594              		.cfi_offset 4, -36
 595              		.cfi_offset 5, -32
 596              		.cfi_offset 6, -28
 597              		.cfi_offset 7, -24
 598              		.cfi_offset 8, -20
 599              		.cfi_offset 9, -16
 600              		.cfi_offset 10, -12
 601              		.cfi_offset 11, -8
 602              		.cfi_offset 14, -4
 603              	@ armwave.c:133:     if(out_buffer == NULL)
 604              		.loc 1 133 7 view .LVU138
 605 02ac 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 606              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 607              		.loc 1 120 1 view .LVU139
 608 02b0 0CD04DE2 		sub	sp, sp, #12	@,,
 609              		.cfi_def_cfa_offset 48
 610              	@ armwave.c:133:     if(out_buffer == NULL)
 611              		.loc 1 133 7 view .LVU140
 612 02b4 1900000A 		beq	.L29		@,
 613              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 614              		.loc 1 127 15 view .LVU141
 615 02b8 58519FE5 		ldr	r5, .L50	@ tmp223,
 616              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 134:armwave.c     ****         return;
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 138:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 140:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 141:armwave.c     **** 
 142:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 143:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 617              		.loc 1 143 5 view .LVU142
 618 02bc 0010A0E3 		mov	r1, #0	@,
 619              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 620              		.loc 1 136 27 view .LVU143
 621 02c0 583095E5 		ldr	r3, [r5, #88]	@ _1, g_armwave_state.target_width
 622              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 623              		.loc 1 143 59 view .LVU144
 624 02c4 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 625              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 626              		.loc 1 136 10 view .LVU145
 627 02c8 406095E5 		ldr	r6, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 628              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 629              		.loc 1 127 15 view .LVU146
 630 02cc 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 136:armwave.c     ****     
 631              		.loc 1 136 5 is_stmt 1 view .LVU147
 632              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 633              		.loc 1 143 59 is_stmt 0 view .LVU148
 634 02d0 920302E0 		mul	r2, r2, r3	@ tmp181, g_armwave_state.target_height, _1
 635              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 636              		.loc 1 136 10 view .LVU149
 637 02d4 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.bitdepth_height, _1
 638              	.LVL24:
 639              		.loc 1 143 5 is_stmt 1 view .LVU150
 640 02d8 0221A0E1 		lsl	r2, r2, #2	@, tmp181,
 641 02dc FEFFFFEB 		bl	memset		@
 642              	.LVL25:
 144:armwave.c     **** 
 145:armwave.c     ****     //printf("iter...\n");
 146:armwave.c     **** 
 147:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 643              		.loc 1 147 5 view .LVU151
 644              		.loc 1 147 5 is_stmt 0 view .LVU152
 645 02e0 000056E3 		cmp	r6, #0	@ npix,
 646 02e4 0D0000DA 		ble	.L29		@,
 647              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 149:armwave.c     ****         //wave_word = 0x12345678;
 150:armwave.c     ****         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 152:armwave.c     ****         /*
 153:armwave.c     ****         if(n % 200 == 0) {
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     ****         */
 157:armwave.c     **** 
 158:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 162:armwave.c     **** 
 163:armwave.c     ****                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 165 52 view .LVU153
 649 02e8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 650              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 651              		.loc 1 164 52 view .LVU154
 652 02ec FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _12, g_armwave_state.ch1_color.r
 653              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 168:armwave.c     ****                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 171:armwave.c     **** 
 172:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 173:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 175:armwave.c     ****                     // Plot the pixels
 176:armwave.c     ****                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 654              		.loc 1 177 57 view .LVU155
 655 02f0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 656              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 657              		.loc 1 165 52 view .LVU156
 658 02f4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 659              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 660              		.loc 1 166 52 view .LVU157
 661 02f8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 662 02fc 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 663              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 664              		.loc 1 147 11 view .LVU158
 665 0300 0030A0E3 		mov	r3, #0	@ n,
 666              	.LVL26:
 667              	.L35:
 150:armwave.c     **** 
 668              		.loc 1 150 9 is_stmt 1 view .LVU159
 669              	@ armwave.c:150:         wave_word = *base_32ptr++;
 150:armwave.c     **** 
 670              		.loc 1 150 19 is_stmt 0 view .LVU160
 671 0304 041094E4 		ldr	r1, [r4], #4	@ wave_word, MEM[base: base_32ptr_64, offset: 4294967292B]
 672              	.LVL27:
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 673              		.loc 1 158 9 is_stmt 1 view .LVU161
 674              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 675              		.loc 1 158 11 is_stmt 0 view .LVU162
 676 0308 000051E3 		cmp	r1, #0	@ wave_word,
 677              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 678              		.loc 1 159 19 view .LVU163
 679 030c 0090A013 		movne	r9, #0	@ w,
 680              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 681              		.loc 1 158 11 view .LVU164
 682 0310 0400001A 		bne	.L34		@,
 683              	.L31:
 684              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 685              		.loc 1 147 28 view .LVU165
 686 0314 023083E2 		add	r3, r3, #2	@ n, n,
 687              	.LVL28:
 688              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 689              		.loc 1 147 5 view .LVU166
 690 0318 030056E1 		cmp	r6, r3	@ npix, n
 691 031c F8FFFFCA 		bgt	.L35		@,
 692              	.LVL29:
 693              	.L29:
 694              	@ armwave.c:193: }
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 181:armwave.c     ****                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 183:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 186:armwave.c     ****                     }
 187:armwave.c     ****                 }
 188:armwave.c     ****             }
 189:armwave.c     ****         }
 190:armwave.c     ****     }
 191:armwave.c     **** 
 192:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 193:armwave.c     **** }
 695              		.loc 1 193 1 view .LVU167
 696 0320 0CD08DE2 		add	sp, sp, #12	@,,
 697              		.cfi_remember_state
 698              		.cfi_def_cfa_offset 36
 699              		@ sp needed	@
 700 0324 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 701              	.LVL30:
 702              	.L34:
 703              		.cfi_restore_state
 160:armwave.c     ****                 wave_word >>= 16;
 704              		.loc 1 160 17 is_stmt 1 view .LVU168
 705              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 706              		.loc 1 160 23 is_stmt 0 view .LVU169
 707 0328 7120FFE6 		uxth	r2, r1	@ value, wave_word
 708              	.LVL31:
 161:armwave.c     **** 
 709              		.loc 1 161 17 is_stmt 1 view .LVU170
 710              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 711              		.loc 1 163 19 is_stmt 0 view .LVU171
 712 032c 000052E3 		cmp	r2, #0	@ value,
 713              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 714              		.loc 1 161 27 view .LVU172
 715 0330 2118A0E1 		lsr	r1, r1, #16	@ wave_word, wave_word,
 716              	.LVL32:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 717              		.loc 1 163 17 is_stmt 1 view .LVU173
 718              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 719              		.loc 1 163 19 is_stmt 0 view .LVU174
 720 0334 0600001A 		bne	.L49		@,
 721              	.LVL33:
 722              	.L32:
 723              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 724              		.loc 1 159 13 view .LVU175
 725 0338 010059E3 		cmp	r9, #1	@ w,
 726 033c F4FFFF0A 		beq	.L31		@,
 727              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 728              		.loc 1 160 23 view .LVU176
 729 0340 7120FFE6 		uxth	r2, r1	@ value, wave_word
 730              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 731              		.loc 1 163 19 view .LVU177
 732 0344 000052E3 		cmp	r2, #0	@ value,
 733 0348 0190A0E3 		mov	r9, #1	@ w,
 734              	.LVL34:
 160:armwave.c     ****                 wave_word >>= 16;
 735              		.loc 1 160 17 is_stmt 1 view .LVU178
 161:armwave.c     **** 
 736              		.loc 1 161 17 view .LVU179
 737              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 738              		.loc 1 161 27 is_stmt 0 view .LVU180
 739 034c 2118A0E1 		lsr	r1, r1, #16	@ wave_word, wave_word,
 740              	.LVL35:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 741              		.loc 1 163 17 is_stmt 1 view .LVU181
 742              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 743              		.loc 1 163 19 is_stmt 0 view .LVU182
 744 0350 F8FFFF0A 		beq	.L32		@,
 745              	.L49:
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 746              		.loc 1 164 21 is_stmt 1 view .LVU183
 747              	.LVL36:
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 748              		.loc 1 165 21 view .LVU184
 166:armwave.c     **** 
 749              		.loc 1 166 21 view .LVU185
 168:armwave.c     ****                     g = MIN(gg, 255);
 750              		.loc 1 168 21 view .LVU186
 169:armwave.c     ****                     b = MIN(bb, 255);
 751              		.loc 1 169 21 view .LVU187
 170:armwave.c     **** 
 752              		.loc 1 170 21 view .LVU188
 173:armwave.c     **** 
 753              		.loc 1 173 21 view .LVU189
 754              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 755              		.loc 1 166 55 is_stmt 0 view .LVU190
 756 0354 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 757 0358 09E083E0 		add	lr, r3, r9	@ _143, n, w
 758 035c 92000CE0 		mul	ip, r2, r0	@ tmp194, value, _18
 759              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 760              		.loc 1 177 32 view .LVU191
 761 0360 7E00EFE6 		uxtb	r0, lr	@ _30, _143
 762              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 763              		.loc 1 178 41 view .LVU192
 764 0364 018080E2 		add	r8, r0, #1	@ tmp209, _30,
 765              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 766              		.loc 1 177 40 view .LVU193
 767 0368 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 768              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 769              		.loc 1 178 41 view .LVU194
 770 036c 108A07EE 		vmov	s14, r8	@ int	@ tmp209, tmp209
 771              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 772              		.loc 1 165 55 view .LVU195
 773 0370 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 774              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 775              		.loc 1 166 24 view .LVU196
 776 0374 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp194,
 777              	.LVL37:
 778              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 779              		.loc 1 177 40 view .LVU197
 780 0378 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp207, _30
 781              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 782              		.loc 1 178 46 view .LVU198
 783 037c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp210, tmp209
 784              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 785              		.loc 1 165 55 view .LVU199
 786 0380 92000AE0 		mul	r10, r2, r0	@ tmp198, value, _15
 787              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 788              		.loc 1 164 55 view .LVU200
 789 0384 920B02E0 		mul	r2, r2, fp	@ tmp204, value, _12
 790              	.LVL38:
 791              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 792              		.loc 1 170 25 view .LVU201
 793 0388 FF005CE3 		cmp	ip, #255	@ bb,
 794              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 795              		.loc 1 165 24 view .LVU202
 796 038c 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp198,
 797              	.LVL39:
 798              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 177 40 view .LVU203
 800 0390 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp208, tmp207, _32
 801              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 802              		.loc 1 178 46 view .LVU204
 803 0394 267A27EE 		vmul.f32	s14, s14, s13	@ tmp211, tmp210, _32
 804              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 805              		.loc 1 170 25 view .LVU205
 806 0398 FFC0A0A3 		movge	ip, #255	@ bb,
 807              	.LVL40:
 808              	@ armwave.c:169:                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 809              		.loc 1 169 25 view .LVU206
 810 039c FF005AE3 		cmp	r10, #255	@ gg,
 811 03a0 FFA0A0A3 		movge	r10, #255	@ gg,
 812              	.LVL41:
 813              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 814              		.loc 1 164 24 view .LVU207
 815 03a4 4224A0E1 		asr	r2, r2, #8	@ rr, tmp204,
 816              	.LVL42:
 817              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 168 25 view .LVU208
 819 03a8 FF0052E3 		cmp	r2, #255	@ rr,
 820              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 821              		.loc 1 173 56 view .LVU209
 822 03ac 0AA4A0E1 		lsl	r10, r10, #8	@ tmp199, gg,
 823              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 177 24 view .LVU210
 825 03b0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp208
 826              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 827              		.loc 1 168 25 view .LVU211
 828 03b4 FF20A0A3 		movge	r2, #255	@ rr,
 829              	.LVL43:
 830              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 831              		.loc 1 173 44 view .LVU212
 832 03b8 0CC8A0E1 		lsl	ip, ip, #16	@ tmp195, bb,
 833              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 834              		.loc 1 179 32 view .LVU213
 835 03bc 4EE4A0E1 		asr	lr, lr, #8	@ tmp212, _143,
 836              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 837              		.loc 1 173 44 view .LVU214
 838 03c0 FFC80CE2 		and	ip, ip, #16711680	@ tmp196, tmp195,
 839              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 840              		.loc 1 173 56 view .LVU215
 841 03c4 7AA0FFE6 		uxth	r10, r10	@ tmp200, tmp199
 842              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 843              		.loc 1 173 51 view .LVU216
 844 03c8 0AC08CE1 		orr	ip, ip, r10	@ tmp202, tmp196, tmp200
 845              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 846              		.loc 1 173 62 view .LVU217
 847 03cc 7220EFE6 		uxtb	r2, r2	@ rr, rr
 848              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 849              		.loc 1 177 24 view .LVU218
 850 03d0 900A17EE 		vmov	r0, s15	@ int	@ yy, yy
 851              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 852              		.loc 1 178 24 view .LVU219
 853 03d4 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp211
 854              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 855              		.loc 1 179 38 view .LVU220
 856 03d8 AEEF8EE0 		add	lr, lr, lr, lsr #31	@ tmp214, tmp212, tmp212,
 857              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 858              		.loc 1 173 62 view .LVU221
 859 03dc 02C08CE1 		orr	ip, ip, r2	@ tmp206, tmp202, rr
 860              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 861              		.loc 1 173 26 view .LVU222
 862 03e0 FFC48CE3 		orr	ip, ip, #-16777216	@ word, tmp206,
 863              	.LVL44:
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 864              		.loc 1 176 21 is_stmt 1 view .LVU223
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 865              		.loc 1 177 21 view .LVU224
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 866              		.loc 1 178 21 view .LVU225
 867              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 868              		.loc 1 179 38 is_stmt 0 view .LVU226
 869 03e4 CEE0A0E1 		asr	lr, lr, #1	@ xx, tmp214,
 870              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 871              		.loc 1 178 24 view .LVU227
 872 03e8 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 873              	.LVL45:
 179:armwave.c     **** 
 874              		.loc 1 179 21 is_stmt 1 view .LVU228
 181:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 875              		.loc 1 181 21 view .LVU229
 181:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 876              		.loc 1 181 21 is_stmt 0 view .LVU230
 877 03ec 080050E1 		cmp	r0, r8	@ yy, ye
 878 03f0 D0FFFF2A 		bcs	.L32		@,
 879              	.LVL46:
 880              	.L33:
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 881              		.loc 1 182 25 is_stmt 1 discriminator 3 view .LVU231
 184:armwave.c     ****                         painted++;
 882              		.loc 1 184 25 discriminator 3 view .LVU232
 883              	@ armwave.c:182:                         offset = (xx + ((g_armwave_state.target_height - y) * g_ar
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 884              		.loc 1 182 72 is_stmt 0 discriminator 3 view .LVU233
 885 03f4 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 886              	@ armwave.c:182:                         offset = (xx + ((g_armwave_state.target_height - y) * g_ar
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 887              		.loc 1 182 77 discriminator 3 view .LVU234
 888 03f8 58A095E5 		ldr	r10, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 889              	@ armwave.c:182:                         offset = (xx + ((g_armwave_state.target_height - y) * g_ar
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 890              		.loc 1 182 72 discriminator 3 view .LVU235
 891 03fc 002042E0 		sub	r2, r2, r0	@ tmp217, g_armwave_state.target_height, yy
 892              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 893              		.loc 1 181 42 discriminator 3 view .LVU236
 894 0400 010080E2 		add	r0, r0, #1	@ yy, yy,
 895              	.LVL47:
 896              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 897              		.loc 1 184 43 discriminator 3 view .LVU237
 898 0404 9AE222E0 		mla	r2, r10, r2, lr	@ tmp222, g_armwave_state.target_width, tmp217, xx
 899              	.LVL48:
 900              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 901              		.loc 1 181 21 discriminator 3 view .LVU238
 902 0408 000058E1 		cmp	r8, r0	@ ye, yy
 903              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 904              		.loc 1 184 53 discriminator 3 view .LVU239
 905 040c 02C187E7 		str	ip, [r7, r2, lsl #2]	@ word, *_46
 185:armwave.c     ****                     }
 906              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU240
 907              	.LVL49:
 908              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 909              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU241
 910 0410 F7FFFF1A 		bne	.L33		@,
 181:armwave.c     ****                         offset = (xx + ((g_armwave_state.target_height - y) * g_armwave_state.targe
 911              		.loc 1 181 21 discriminator 3 view .LVU242
 912 0414 C7FFFFEA 		b	.L32		@
 913              	.L51:
 914              		.align	2
 915              	.L50:
 916 0418 00000000 		.word	g_armwave_state
 917              		.cfi_endproc
 918              	.LFE60:
 920              		.global	__aeabi_idiv
 921              		.align	2
 922              		.global	armwave_generate
 923              		.syntax unified
 924              		.arm
 925              		.fpu vfp
 927              	armwave_generate:
 928              	.LFB61:
 194:armwave.c     **** 
 195:armwave.c     **** /*
 196:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_generate()
 199:armwave.c     **** {
 929              		.loc 1 199 1 is_stmt 1 view -0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 72
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     uint32_t yy;
 933              		.loc 1 200 5 view .LVU244
 201:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 934              		.loc 1 201 5 view .LVU245
 935              	.LVL50:
 202:armwave.c     **** 
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 936              		.loc 1 203 5 view .LVU246
 937              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 938              		.loc 1 199 1 is_stmt 0 view .LVU247
 939 041c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 940              		.cfi_def_cfa_offset 36
 941              		.cfi_offset 4, -36
 942              		.cfi_offset 5, -32
 943              		.cfi_offset 6, -28
 944              		.cfi_offset 7, -24
 945              		.cfi_offset 8, -20
 946              		.cfi_offset 9, -16
 947              		.cfi_offset 10, -12
 948              		.cfi_offset 11, -8
 949              		.cfi_offset 14, -4
 950              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 951              		.loc 1 203 5 view .LVU248
 952 0420 0010A0E3 		mov	r1, #0	@,
 953              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 954              		.loc 1 203 58 view .LVU249
 955 0424 90429FE5 		ldr	r4, .L72	@ tmp212,
 956              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 957              		.loc 1 199 1 view .LVU250
 958 0428 4CD04DE2 		sub	sp, sp, #76	@,,
 959              		.cfi_def_cfa_offset 112
 960              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 961              		.loc 1 203 5 view .LVU251
 962 042c 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 963 0430 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 964 0434 FEFFFFEB 		bl	memset		@
 965              	.LVL51:
 204:armwave.c     **** 
 205:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 966              		.loc 1 205 5 is_stmt 1 view .LVU252
 967              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 968              		.loc 1 205 68 is_stmt 0 view .LVU253
 969 0438 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 970              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 971              		.loc 1 205 51 view .LVU254
 972 043c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 973 0440 0510A0E1 		mov	r1, r5	@, _133
 974              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 975              		.loc 1 205 68 view .LVU255
 976 0444 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 977              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 978              		.loc 1 205 51 view .LVU256
 979 0448 FEFFFFEB 		bl	__aeabi_idiv		@
 980              	.LVL52:
 981              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 982              		.loc 1 205 5 view .LVU257
 983 044c 003050E2 		subs	r3, r0, #0	@ _179,
 984 0450 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 985 0454 9600000A 		beq	.L52		@,
 986              	.LBB10:
 987              	.LBB11:
 988              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 989              		.loc 1 79 35 view .LVU258
 990 0458 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 991              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 992              		.loc 1 80 81 view .LVU259
 993 045c 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 994 0460 000053E3 		cmp	r3, #0	@ _38,
 995              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 996              		.loc 1 79 35 view .LVU260
 997 0464 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 998              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 999              		.loc 1 71 40 view .LVU261
 1000 0468 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 1001              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1002              		.loc 1 71 82 view .LVU262
 1003 046c 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1004              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1005              		.loc 1 71 147 view .LVU263
 1006 0470 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 1007              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1008              		.loc 1 80 36 view .LVU264
 1009 0474 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 1010              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1011              		.loc 1 80 81 view .LVU265
 1012 0478 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 1013 047c 8C0000DA 		ble	.L52		@,
 1014 0480 000055E3 		cmp	r5, #0	@ _133,
 1015 0484 8A00000A 		beq	.L52		@,
 1016 0488 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 1017 048c 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 1018 0490 10208DE5 		str	r2, [sp, #16]	@ ivtmp.86, %sfp
 1019 0494 002062E2 		rsb	r2, r2, #0	@ ivtmp.85, ivtmp.86
 1020 0498 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 1021 049c 14208DE5 		str	r2, [sp, #20]	@ ivtmp.85, %sfp
 1022 04a0 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 1023 04a4 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 1024 04a8 09B0A0E1 		mov	fp, r9	@ _21, _21
 1025 04ac 00C0A0E3 		mov	ip, #0	@ ivtmp.84,
 1026 04b0 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 1027 04b4 032080E0 		add	r2, r0, r3	@ ivtmp.74, tmp231, _17
 1028 04b8 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 1029 04bc 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 1030 04c0 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.84, %sfp
 1031 04c4 34208DE5 		str	r2, [sp, #52]	@ ivtmp.74, %sfp
 1032              	.LBE11:
 1033              	.LBE10:
 1034              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1035              		.loc 1 205 12 view .LVU266
 1036 04c8 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.84, %sfp
 1037 04cc 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 1038              	.LVL53:
 1039              	.L58:
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 207:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, \
 209:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 210:armwave.c     **** 
 211:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1040              		.loc 1 211 9 is_stmt 1 discriminator 3 view .LVU267
 1041              	.LBB13:
 1042              	.LBI10:
  62:armwave.c     **** {
 1043              		.loc 1 62 6 discriminator 3 view .LVU268
 1044              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1045              		.loc 1 64 5 discriminator 3 view .LVU269
  65:armwave.c     ****     uint8_t *wave_base;
 1046              		.loc 1 65 5 discriminator 3 view .LVU270
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 1047              		.loc 1 66 5 discriminator 3 view .LVU271
  67:armwave.c     ****     bufftyp_t *write_buffer;
 1048              		.loc 1 67 5 discriminator 3 view .LVU272
  68:armwave.c     **** 
 1049              		.loc 1 68 5 discriminator 3 view .LVU273
  71:armwave.c     **** 
 1050              		.loc 1 71 5 discriminator 3 view .LVU274
 1051              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1052              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU275
 1053 04d0 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.84, %sfp
 1054              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1055              		.loc 1 71 130 discriminator 3 view .LVU276
 1056 04d4 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.86, %sfp
 1057              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1058              		.loc 1 71 105 discriminator 3 view .LVU277
 1059 04d8 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.84,
 1060              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1061              		.loc 1 71 130 discriminator 3 view .LVU278
 1062 04dc 00208DE5 		str	r2, [sp]	@ ivtmp.86, %sfp
 1063 04e0 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 1064              	.LVL54:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1065              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU279
 1066              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1067              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU280
 1068 04e4 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.85, %sfp
 1069 04e8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.85, %sfp
 1070              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1071              		.loc 1 79 11 discriminator 3 view .LVU281
 1072 04ec 0030A0E3 		mov	r3, #0	@ w,
 1073 04f0 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1074              	.LVL55:
 1075              	.L55:
  80:armwave.c     **** 
 1076              		.loc 1 80 9 is_stmt 1 view .LVU282
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1077              		.loc 1 84 9 view .LVU283
 1078              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1079              		.loc 1 79 11 is_stmt 0 view .LVU284
 1080 04f4 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.75, %sfp
 1081 04f8 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.74, %sfp
 1082 04fc 00309DE5 		ldr	r3, [sp]	@ ivtmp.81, %sfp
 1083 0500 08308DE5 		str	r3, [sp, #8]	@ ivtmp.81, %sfp
 1084              	.LVL56:
 1085              	.L57:
  85:armwave.c     **** 
 1086              		.loc 1 85 13 is_stmt 1 view .LVU285
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1087              		.loc 1 101 17 view .LVU286
 106:armwave.c     ****                 word >>= 8;
 1088              		.loc 1 106 17 view .LVU287
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1089              		.loc 1 101 17 view .LVU288
 106:armwave.c     ****                 word >>= 8;
 1090              		.loc 1 106 17 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1091              		.loc 1 101 17 view .LVU290
 106:armwave.c     ****                 word >>= 8;
 1092              		.loc 1 106 17 view .LVU291
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1093              		.loc 1 101 17 view .LVU292
 106:armwave.c     ****                 word >>= 8;
 1094              		.loc 1 106 17 view .LVU293
 1095              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1096              		.loc 1 102 34 is_stmt 0 view .LVU294
 1097 0504 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 1098              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1099              		.loc 1 85 18 view .LVU295
 1100 0508 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.73, %sfp
 1101              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1102              		.loc 1 102 34 view .LVU296
 1103 050c 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.75
 1104 0510 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.74
 1105              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1106              		.loc 1 102 74 view .LVU297
 1107 0514 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 1108              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1109              		.loc 1 85 18 view .LVU298
 1110 0518 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 1111              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1112              		.loc 1 106 47 view .LVU299
 1113 051c 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1114              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1115              		.loc 1 94 20 view .LVU300
 1116 0520 FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1117              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1118              		.loc 1 107 22 view .LVU301
 1119 0524 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1120              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1121              		.loc 1 94 20 view .LVU302
 1122 0528 0160A003 		moveq	r6, #1	@ tmp239,
 1123 052c 0060A013 		movne	r6, #0	@ tmp239,
 1124              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1125              		.loc 1 106 47 view .LVU303
 1126 0530 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1127              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1128              		.loc 1 94 19 view .LVU304
 1129 0534 FF0059E3 		cmp	r9, #255	@ scale_value,
 1130 0538 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1131              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1132              		.loc 1 85 18 view .LVU305
 1133 053c 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.73, %sfp
 1134              	.LVL57:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1135              		.loc 1 89 13 is_stmt 1 view .LVU306
  90:armwave.c     ****                 
 1136              		.loc 1 90 17 view .LVU307
  94:armwave.c     ****                     continue;
 1137              		.loc 1 94 17 view .LVU308
 1138              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1139              		.loc 1 84 9 is_stmt 0 view .LVU309
 1140 0540 0E90A0E1 		mov	r9, lr	@ ivtmp.73, ivtmp.73
 1141 0544 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.80, %sfp
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1142              		.loc 1 84 9 view .LVU310
 1143 0548 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1144              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1145              		.loc 1 102 74 view .LVU311
 1146 054c 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.75,
 1147 0550 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1148              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1149              		.loc 1 84 9 view .LVU312
 1150 0554 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.73, ivtmp.80
 1151              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1152              		.loc 1 94 19 view .LVU313
 1153 0558 000056E3 		cmp	r6, #0	@ tmp244,
 1154              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1155              		.loc 1 102 74 view .LVU314
 1156 055c 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.74,
 1157              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 47 view .LVU315
 1159 0560 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1160 0564 04A08AE0 		add	r10, r10, r4	@ ivtmp.74, ivtmp.74, _208
 1161              	.LVL58:
 106:armwave.c     ****                 word >>= 8;
 1162              		.loc 1 106 47 view .LVU316
 1163 0568 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1164              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1165              		.loc 1 107 22 view .LVU317
 1166 056c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1167              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1168              		.loc 1 106 47 view .LVU318
 1169 0570 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1170              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1171              		.loc 1 84 9 view .LVU319
 1172 0574 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1173              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1174              		.loc 1 94 19 view .LVU320
 1175 0578 2A00001A 		bne	.L63		@,
 1176              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1177              		.loc 1 94 20 view .LVU321
 1178 057c FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1179              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1180              		.loc 1 106 47 view .LVU322
 1181 0580 B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1182              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1183              		.loc 1 94 20 view .LVU323
 1184 0584 0190A003 		moveq	r9, #1	@ tmp256,
 1185 0588 0090A013 		movne	r9, #0	@ tmp256,
 1186              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1187              		.loc 1 106 47 view .LVU324
 1188 058c 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1189              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1190              		.loc 1 94 19 view .LVU325
 1191 0590 FF0054E3 		cmp	r4, #255	@ scale_value,
 1192 0594 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1193 0598 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1194              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1195              		.loc 1 106 47 view .LVU326
 1196 059c 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1197              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1198              		.loc 1 94 19 view .LVU327
 1199 05a0 000054E3 		cmp	r4, #0	@ tmp261,
 1200              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1201              		.loc 1 106 47 view .LVU328
 1202 05a4 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1203 05a8 B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1204              		.loc 1 107 17 is_stmt 1 view .LVU329
 1205              	.LVL59:
  90:armwave.c     ****                 
 1206              		.loc 1 90 17 view .LVU330
  94:armwave.c     ****                     continue;
 1207              		.loc 1 94 17 view .LVU331
 1208              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1209              		.loc 1 94 19 is_stmt 0 view .LVU332
 1210 05ac 1D00001A 		bne	.L63		@,
 1211              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1212              		.loc 1 94 20 view .LVU333
 1213 05b0 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1214 05b4 FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1215              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1216              		.loc 1 106 47 view .LVU334
 1217 05b8 B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1218              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1219              		.loc 1 94 20 view .LVU335
 1220 05bc 0140A003 		moveq	r4, #1	@ tmp273,
 1221 05c0 0040A013 		movne	r4, #0	@ tmp273,
 1222              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1223              		.loc 1 106 47 view .LVU336
 1224 05c4 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1225              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1226              		.loc 1 94 19 view .LVU337
 1227 05c8 FF005EE3 		cmp	lr, #255	@ scale_value,
 1228 05cc 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1229 05d0 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1230              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1231              		.loc 1 106 47 view .LVU338
 1232 05d4 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1233              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1234              		.loc 1 94 19 view .LVU339
 1235 05d8 00005EE3 		cmp	lr, #0	@ tmp278,
 1236              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1237              		.loc 1 106 47 view .LVU340
 1238 05dc 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1239 05e0 B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1240              		.loc 1 107 17 is_stmt 1 view .LVU341
 1241              	.LVL60:
  90:armwave.c     ****                 
 1242              		.loc 1 90 17 view .LVU342
  94:armwave.c     ****                     continue;
 1243              		.loc 1 94 17 view .LVU343
 1244              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1245              		.loc 1 94 19 is_stmt 0 view .LVU344
 1246 05e4 0F00001A 		bne	.L63		@,
 1247              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1248              		.loc 1 94 20 view .LVU345
 1249 05e8 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1250              	.LVL61:
 1251              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1252              		.loc 1 106 47 view .LVU346
 1253 05ec 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1254 05f0 B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1255              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1256              		.loc 1 94 20 view .LVU347
 1257 05f4 0110A003 		moveq	r1, #1	@ tmp288,
 1258 05f8 0010A013 		movne	r1, #0	@ tmp288,
 1259              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1260              		.loc 1 106 47 view .LVU348
 1261 05fc 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1262              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1263              		.loc 1 94 19 view .LVU349
 1264 0600 FF0050E3 		cmp	r0, #255	@ word,
 1265 0604 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1266 0608 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1267 060c 000050E3 		cmp	r0, #0	@ tmp293,
 1268              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1269              		.loc 1 106 47 view .LVU350
 1270 0610 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1271 0614 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1272 0618 B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1273              		.loc 1 107 17 is_stmt 1 view .LVU351
 1274              	.LVL62:
  90:armwave.c     ****                 
 1275              		.loc 1 90 17 view .LVU352
  94:armwave.c     ****                     continue;
 1276              		.loc 1 94 17 view .LVU353
 1277              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1278              		.loc 1 106 47 is_stmt 0 view .LVU354
 1279 061c BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1280 0620 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1281 0624 BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1282              		.loc 1 107 17 is_stmt 1 view .LVU355
 1283              	.LVL63:
 1284              	.L63:
 1285              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1286              		.loc 1 84 9 is_stmt 0 view .LVU356
 1287 0628 D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1288 062c 020053E1 		cmp	r3, r2	@ _133, tmp302
 1289 0630 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1290 0634 035085E0 		add	r5, r5, r3	@ ivtmp.75, ivtmp.75, _208
 1291 0638 B1FFFF8A 		bhi	.L57		@,
 1292              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1293              		.loc 1 79 44 view .LVU357
 1294 063c 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1295              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1296              		.loc 1 79 5 view .LVU358
 1297 0640 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1298              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1299              		.loc 1 79 44 view .LVU359
 1300 0644 013083E2 		add	r3, r3, #1	@ w, w,
 1301              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1302              		.loc 1 79 5 view .LVU360
 1303 0648 030052E1 		cmp	r2, r3	@ _38, w
 1304              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1305              		.loc 1 79 44 view .LVU361
 1306 064c 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1307              	.LVL64:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1308              		.loc 1 79 44 view .LVU362
 1309 0650 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.80, %sfp
 1310 0654 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1311              	.LVL65:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1312              		.loc 1 79 44 view .LVU363
 1313 0658 032042E0 		sub	r2, r2, r3	@ ivtmp.80, ivtmp.80, _24
 1314 065c 04208DE5 		str	r2, [sp, #4]	@ ivtmp.80, %sfp
 1315 0660 00209DE5 		ldr	r2, [sp]	@ ivtmp.81, %sfp
 1316 0664 033082E0 		add	r3, r2, r3	@ ivtmp.81, ivtmp.81, _24
 1317 0668 00308DE5 		str	r3, [sp]	@ ivtmp.81, %sfp
 1318              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1319              		.loc 1 79 5 view .LVU364
 1320 066c A0FFFF1A 		bne	.L55		@,
 1321              	.LVL66:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1322              		.loc 1 79 5 view .LVU365
 1323              	.LBE12:
 1324              	.LBE13:
 212:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1325              		.loc 1 212 9 is_stmt 1 view .LVU366
 213:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1326              		.loc 1 213 9 view .LVU367
 1327              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1328              		.loc 1 205 86 is_stmt 0 view .LVU368
 1329 0670 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1330              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1331              		.loc 1 205 5 view .LVU369
 1332 0674 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1333              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1334              		.loc 1 205 86 view .LVU370
 1335 0678 013083E2 		add	r3, r3, #1	@ yy, yy,
 1336              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1337              		.loc 1 205 5 view .LVU371
 1338 067c 020053E1 		cmp	r3, r2	@ yy, _179
 1339              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1340              		.loc 1 205 86 view .LVU372
 1341 0680 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1342              	.LVL67:
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1343              		.loc 1 205 86 view .LVU373
 1344 0684 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1345 0688 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.84, %sfp
 1346              	.LVL68:
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1347              		.loc 1 205 86 view .LVU374
 1348 068c 023083E0 		add	r3, r3, r2	@ ivtmp.84, ivtmp.84, _185
 1349 0690 18308DE5 		str	r3, [sp, #24]	@ ivtmp.84, %sfp
 1350 0694 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.85, %sfp
 1351 0698 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1352 069c 032042E0 		sub	r2, r2, r3	@ ivtmp.85, ivtmp.85, _133
 1353 06a0 14208DE5 		str	r2, [sp, #20]	@ ivtmp.85, %sfp
 1354 06a4 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.86, %sfp
 1355 06a8 033082E0 		add	r3, r2, r3	@ ivtmp.86, ivtmp.86, _133
 1356 06ac 10308DE5 		str	r3, [sp, #16]	@ ivtmp.86, %sfp
 1357              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1358              		.loc 1 205 5 view .LVU375
 1359 06b0 86FFFF1A 		bne	.L58		@,
 1360              	.LVL69:
 1361              	.L52:
 1362              	@ armwave.c:222: }
 214:armwave.c     ****     }
 215:armwave.c     **** 
 216:armwave.c     ****     /*
 217:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 218:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 219:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 220:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 221:armwave.c     ****     */
 222:armwave.c     **** }
 1363              		.loc 1 222 1 view .LVU376
 1364 06b4 4CD08DE2 		add	sp, sp, #76	@,,
 1365              		.cfi_def_cfa_offset 36
 1366              		@ sp needed	@
 1367 06b8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1368              	.L73:
 1369              		.align	2
 1370              	.L72:
 1371 06bc 00000000 		.word	g_armwave_state
 1372              		.cfi_endproc
 1373              	.LFE61:
 1375              		.align	2
 1376              		.global	armwave_setup_render
 1377              		.syntax unified
 1378              		.arm
 1379              		.fpu vfp
 1381              	armwave_setup_render:
 1382              	.LVL70:
 1383              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** /*
 225:armwave.c     ****  * Setup the renderer with passed parameters.
 226:armwave.c     ****  */
 227:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 228:armwave.c     **** {
 1384              		.loc 1 228 1 is_stmt 1 view -0
 1385              		.cfi_startproc
 1386              		@ args = 12, pretend = 0, frame = 0
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 229:armwave.c     ****     uint32_t length, xx;
 1388              		.loc 1 229 5 view .LVU378
 230:armwave.c     ****     float points_per_pixel;
 1389              		.loc 1 230 5 view .LVU379
 231:armwave.c     **** 
 232:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1390              		.loc 1 232 5 view .LVU380
 1391              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1392              		.loc 1 228 1 is_stmt 0 view .LVU381
 1393 06c0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1394              		.cfi_def_cfa_offset 28
 1395              		.cfi_offset 4, -28
 1396              		.cfi_offset 5, -24
 1397              		.cfi_offset 6, -20
 1398              		.cfi_offset 7, -16
 1399              		.cfi_offset 8, -12
 1400              		.cfi_offset 9, -8
 1401              		.cfi_offset 14, -4
 1402 06c4 14D04DE2 		sub	sp, sp, #20	@,,
 1403              		.cfi_def_cfa_offset 48
 1404              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1405              		.loc 1 228 1 view .LVU382
 1406 06c8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1407 06cc D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1408 06d0 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1409 06d4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1410              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1411              		.loc 1 232 5 view .LVU383
 1412 06d8 00308DE5 		str	r3, [sp]	@ wave_stride,
 1413              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1414              		.loc 1 228 1 view .LVU384
 1415 06dc 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1416 06e0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1417              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1418              		.loc 1 232 5 view .LVU385
 1419 06e4 F460CDE1 		strd	r6, [sp, #4]	@,,
 1420 06e8 0230A0E1 		mov	r3, r2	@, waves_max
 1421              	.LVL71:
 1422              		.loc 1 232 5 view .LVU386
 1423 06ec 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1424 06f0 0120A0E1 		mov	r2, r1	@, end_point
 1425              	.LVL72:
 1426              		.loc 1 232 5 view .LVU387
 1427 06f4 0010A0E1 		mov	r1, r0	@, start_point
 1428              	.LVL73:
 1429              		.loc 1 232 5 view .LVU388
 1430 06f8 8C019FE5 		ldr	r0, .L84+12	@,
 1431              	.LVL74:
 1432              		.loc 1 232 5 view .LVU389
 1433 06fc FEFFFFEB 		bl	printf		@
 1434              	.LVL75:
 233:armwave.c     **** 
 234:armwave.c     ****     // TODO these asserts should instead raise PyExc
 235:armwave.c     ****     assert(start_point < end_point);
 1435              		.loc 1 235 5 is_stmt 1 view .LVU390
 1436 0700 050054E1 		cmp	r4, r5	@ start_point, end_point
 1437 0704 5100002A 		bcs	.L82		@,
 236:armwave.c     **** 
 237:armwave.c     ****     /*
 238:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 239:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 1438              		.loc 1 256 5 view .LVU391
 1439              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1440              		.loc 1 267 45 is_stmt 0 view .LVU392
 1441 0708 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1442              	.LVL76:
 1443              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1444              		.loc 1 271 48 view .LVU393
 1445 070c 5B5A9FED 		vldr.32	s10, .L84	@ tmp187,
 1446 0710 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1447              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1448              		.loc 1 257 49 view .LVU394
 1449 0714 5A7A9FED 		vldr.32	s14, .L84+4	@ tmp165,
 1450              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1451              		.loc 1 271 81 view .LVU395
 1452 0718 5A6A9FED 		vldr.32	s12, .L84+8	@ tmp191,
 1453              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1454              		.loc 1 264 90 view .LVU396
 1455 071c 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1456              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1457              		.loc 1 271 48 view .LVU397
 1458 0720 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1459              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1460              		.loc 1 257 49 view .LVU398
 1461 0724 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1462              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1463              		.loc 1 256 29 view .LVU399
 1464 0728 60419FE5 		ldr	r4, .L84+16	@ tmp222,
 1465              	.LVL77:
 1466              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1467              		.loc 1 262 42 view .LVU400
 1468 072c 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1469              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1470              		.loc 1 257 49 view .LVU401
 1471 0730 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1472              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1473              		.loc 1 264 95 view .LVU402
 1474 0734 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1475              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 272:armwave.c     **** 
 273:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1476              		.loc 1 273 5 view .LVU403
 1477 0738 0128A0E3 		mov	r2, #65536	@ tmp194,
 1478              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1479              		.loc 1 271 48 view .LVU404
 1480 073c 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1481              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1482              		.loc 1 273 5 view .LVU405
 1483 0740 04508DE5 		str	r5, [sp, #4]	@ _13,
 1484 0744 00608DE5 		str	r6, [sp]	@ target_width,
 1485              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1486              		.loc 1 264 95 view .LVU406
 1487 0748 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1488              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1489              		.loc 1 256 29 view .LVU407
 1490 074c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1491              		.loc 1 257 5 is_stmt 1 view .LVU408
 1492              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1493              		.loc 1 259 33 is_stmt 0 view .LVU409
 1494 0750 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1495              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1496              		.loc 1 260 31 view .LVU410
 1497 0754 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1498              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1499              		.loc 1 261 27 view .LVU411
 1500 0758 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1501              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1502              		.loc 1 266 35 view .LVU412
 1503 075c F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1504              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1505              		.loc 1 273 5 view .LVU413
 1506 0760 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1507              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1508              		.loc 1 263 37 view .LVU414
 1509 0764 022CA0E3 		mov	r2, #512	@ tmp175,
 1510              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1511              		.loc 1 262 26 view .LVU415
 1512 0768 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1513              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1514              		.loc 1 263 37 view .LVU416
 1515 076c 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1516              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1517              		.loc 1 273 5 view .LVU417
 1518 0770 0310A0E1 		mov	r1, r3	@, tmp180
 1519              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1520              		.loc 1 264 34 view .LVU418
 1521 0774 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1522              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1523              		.loc 1 257 49 view .LVU419
 1524 0778 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1525              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1526              		.loc 1 271 40 view .LVU420
 1527 077c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1528              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1529              		.loc 1 267 33 view .LVU421
 1530 0780 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1531              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1532              		.loc 1 273 5 view .LVU422
 1533 0784 08019FE5 		ldr	r0, .L84+20	@,
 1534              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1535              		.loc 1 271 40 view .LVU423
 1536 0788 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1537 078c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1538              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1539              		.loc 1 258 30 view .LVU424
 1540 0790 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1541              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1542              		.loc 1 257 33 view .LVU425
 1543 0794 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1544              		.loc 1 258 5 is_stmt 1 view .LVU426
 1545              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1546              		.loc 1 271 81 is_stmt 0 view .LVU427
 1547 0798 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1548              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1549              		.loc 1 258 30 view .LVU428
 1550 079c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1551              		.loc 1 259 5 is_stmt 1 view .LVU429
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1552              		.loc 1 260 5 view .LVU430
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1553              		.loc 1 261 5 view .LVU431
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1554              		.loc 1 262 5 view .LVU432
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1555              		.loc 1 263 5 view .LVU433
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1556              		.loc 1 264 5 view .LVU434
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1557              		.loc 1 265 5 view .LVU435
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1558              		.loc 1 266 5 view .LVU436
 267:armwave.c     **** 
 1559              		.loc 1 267 5 view .LVU437
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1560              		.loc 1 270 5 view .LVU438
 1561              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1562              		.loc 1 270 42 is_stmt 0 view .LVU439
 1563 07a0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1564 07a4 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1565              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1566              		.loc 1 273 5 view .LVU440
 1567 07a8 903A17EE 		vmov	r3, s15	@ int	@, _20
 1568              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1569              		.loc 1 270 42 view .LVU441
 1570 07ac 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1571              		.loc 1 273 5 is_stmt 1 view .LVU442
 1572 07b0 0C20A0E1 		mov	r2, ip	@, tmp3
 1573 07b4 FEFFFFEB 		bl	printf		@
 1574              	.LVL78:
 274:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 275:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 276:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 277:armwave.c     **** 
 278:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 279:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1575              		.loc 1 281 5 view .LVU443
 1576              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 282:armwave.c     **** 
 283:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1577              		.loc 1 283 23 is_stmt 0 view .LVU444
 1578 07b8 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1579              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1580              		.loc 1 281 34 view .LVU445
 1581 07bc 4030A0E3 		mov	r3, #64	@ tmp196,
 1582              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1583              		.loc 1 283 7 view .LVU446
 1584 07c0 000050E3 		cmp	r0, #0	@ _21,
 1585              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1586              		.loc 1 281 34 view .LVU447
 1587 07c4 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1588              		.loc 1 283 5 is_stmt 1 view .LVU448
 1589              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1590              		.loc 1 283 7 is_stmt 0 view .LVU449
 1591 07c8 0000000A 		beq	.L76		@,
 284:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1592              		.loc 1 284 9 is_stmt 1 view .LVU450
 1593 07cc FEFFFFEB 		bl	free		@
 1594              	.LVL79:
 1595              	.L76:
 285:armwave.c     **** 
 286:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1596              		.loc 1 286 5 view .LVU451
 1597              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1598              		.loc 1 286 56 is_stmt 0 view .LVU452
 1599 07d0 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1600              	.LVL80:
 1601              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1602              		.loc 1 286 34 view .LVU453
 1603 07d4 0110A0E3 		mov	r1, #1	@,
 1604 07d8 0800A0E1 		mov	r0, r8	@, _22
 1605 07dc FEFFFFEB 		bl	calloc		@
 1606              	.LVL81:
 1607              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1608              		.loc 1 288 7 view .LVU454
 1609 07e0 000050E3 		cmp	r0, #0	@ tmp199,
 1610              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1611              		.loc 1 286 34 view .LVU455
 1612 07e4 0070A0E1 		mov	r7, r0	@ tmp199,
 1613              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1614              		.loc 1 286 32 view .LVU456
 1615 07e8 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1616              		.loc 1 288 5 is_stmt 1 view .LVU457
 1617              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 1618              		.loc 1 288 7 is_stmt 0 view .LVU458
 1619 07ec 1C00000A 		beq	.L83		@,
 289:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 290:armwave.c     ****         exit(-1);
 291:armwave.c     ****     }
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1620              		.loc 1 294 5 is_stmt 1 view .LVU459
 1621              	.LVL82:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1622              		.loc 1 295 5 view .LVU460
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1623              		.loc 1 296 5 view .LVU461
 1624              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1625              		.loc 1 295 31 is_stmt 0 view .LVU462
 1626 07f0 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1627              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1628              		.loc 1 295 34 view .LVU463
 1629 07f4 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1630              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1631              		.loc 1 296 60 view .LVU464
 1632 07f8 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1633              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     ****     */
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1634              		.loc 1 310 34 view .LVU465
 1635 07fc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1636              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1637              		.loc 1 295 31 view .LVU466
 1638 0800 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1639              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1640              		.loc 1 295 34 view .LVU467
 1641 0804 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1642              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1643              		.loc 1 296 60 view .LVU468
 1644 0808 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1645              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1646              		.loc 1 310 34 view .LVU469
 1647 080c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1648              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1649              		.loc 1 295 22 view .LVU470
 1650 0810 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1651              	.LVL83:
 1652              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1653              		.loc 1 296 60 view .LVU471
 1654 0814 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1655              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1656              		.loc 1 296 41 view .LVU472
 1657 0818 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1658 081c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1659              		.loc 1 310 5 is_stmt 1 view .LVU473
 1660              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1661              		.loc 1 310 34 is_stmt 0 view .LVU474
 1662 0820 FEFFFFEB 		bl	malloc		@
 1663              	.LVL84:
 1664              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1665              		.loc 1 312 5 view .LVU475
 1666 0824 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1667 0828 0710A0E1 		mov	r1, r7	@, tmp199
 1668 082c 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1669 0830 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1670              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1671              		.loc 1 310 34 view .LVU476
 1672 0834 00C0A0E1 		mov	ip, r0	@ tmp215,
 1673              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1674              		.loc 1 312 5 view .LVU477
 1675 0838 0030A0E1 		mov	r3, r0	@, tmp215
 1676              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1677              		.loc 1 310 32 view .LVU478
 1678 083c 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1679              		.loc 1 312 5 is_stmt 1 view .LVU479
 1680 0840 50009FE5 		ldr	r0, .L84+24	@,
 1681              	@ armwave.c:319: }
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****      //malloc_stats();
 319:armwave.c     **** }
 1682              		.loc 1 319 1 is_stmt 0 view .LVU480
 1683 0844 14D08DE2 		add	sp, sp, #20	@,,
 1684              		.cfi_remember_state
 1685              		.cfi_def_cfa_offset 28
 1686              		@ sp needed	@
 1687 0848 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1688              		.cfi_restore 14
 1689              		.cfi_restore 9
 1690              		.cfi_restore 8
 1691              		.cfi_restore 7
 1692              		.cfi_restore 6
 1693              		.cfi_restore 5
 1694              		.cfi_restore 4
 1695              		.cfi_def_cfa_offset 0
 1696              	.LVL85:
 1697              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1698              		.loc 1 312 5 view .LVU481
 1699 084c FEFFFFEA 		b	printf		@
 1700              	.LVL86:
 1701              	.L82:
 1702              		.cfi_restore_state
 235:armwave.c     **** 
 1703              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU482
 1704 0850 44309FE5 		ldr	r3, .L84+28	@,
 1705 0854 EB20A0E3 		mov	r2, #235	@,
 1706 0858 40109FE5 		ldr	r1, .L84+32	@,
 1707 085c 40009FE5 		ldr	r0, .L84+36	@,
 1708 0860 FEFFFFEB 		bl	__assert_fail		@
 1709              	.LVL87:
 1710              	.L83:
 289:armwave.c     ****         exit(-1);
 1711              		.loc 1 289 9 view .LVU483
 1712 0864 3C309FE5 		ldr	r3, .L84+40	@ tmp202,
 1713 0868 0820A0E1 		mov	r2, r8	@, _22
 1714 086c 38109FE5 		ldr	r1, .L84+44	@,
 1715 0870 000093E5 		ldr	r0, [r3]	@, stderr
 1716 0874 FEFFFFEB 		bl	fprintf		@
 1717              	.LVL88:
 290:armwave.c     ****     }
 1718              		.loc 1 290 9 view .LVU484
 1719 0878 0000E0E3 		mvn	r0, #0	@,
 1720 087c FEFFFFEB 		bl	exit		@
 1721              	.LVL89:
 1722              	.L85:
 1723              		.align	2
 1724              	.L84:
 1725 0880 0000803F 		.word	1065353216
 1726 0884 00007F43 		.word	1132396544
 1727 0888 00008047 		.word	1199570944
 1728 088c 20000000 		.word	.LC2
 1729 0890 00000000 		.word	g_armwave_state
 1730 0894 70000000 		.word	.LC5
 1731 0898 14010000 		.word	.LC7
 1732 089c 00000000 		.word	.LANCHOR0
 1733 08a0 4C000000 		.word	.LC3
 1734 08a4 58000000 		.word	.LC4
 1735 08a8 00000000 		.word	stderr
 1736 08ac D0000000 		.word	.LC6
 1737              		.cfi_endproc
 1738              	.LFE62:
 1740              		.align	2
 1741              		.global	armwave_set_wave_pointer
 1742              		.syntax unified
 1743              		.arm
 1744              		.fpu vfp
 1746              	armwave_set_wave_pointer:
 1747              	.LVL90:
 1748              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1749              		.loc 1 326 1 view -0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1753              		.loc 1 327 5 view .LVU486
 1754 08b0 000050E3 		cmp	r0, #0	@ wave_buffer
 1755              		.loc 1 327 5 is_stmt 0 view .LVU487
 1756 08b4 0200000A 		beq	.L91		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1757              		.loc 1 328 5 is_stmt 1 view .LVU488
 1758              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1759              		.loc 1 328 33 is_stmt 0 view .LVU489
 1760 08b8 1C309FE5 		ldr	r3, .L92	@ tmp116,
 1761 08bc 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1762 08c0 1EFF2FE1 		bx	lr	@
 1763              	.L91:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1764              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU490
 1765              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1766              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU491
 1767 08c4 10402DE9 		push	{r4, lr}	@
 1768              		.cfi_def_cfa_offset 8
 1769              		.cfi_offset 4, -8
 1770              		.cfi_offset 14, -4
 1771              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1772              		.loc 1 327 5 discriminator 1 view .LVU492
 1773 08c8 10309FE5 		ldr	r3, .L92+4	@,
 1774 08cc 10209FE5 		ldr	r2, .L92+8	@,
 1775 08d0 10109FE5 		ldr	r1, .L92+12	@,
 1776 08d4 10009FE5 		ldr	r0, .L92+16	@,
 1777              	.LVL91:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1778              		.loc 1 327 5 discriminator 1 view .LVU493
 1779 08d8 FEFFFFEB 		bl	__assert_fail		@
 1780              	.LVL92:
 1781              	.L93:
 1782              		.align	2
 1783              	.L92:
 1784 08dc 00000000 		.word	g_armwave_state
 1785 08e0 18000000 		.word	.LANCHOR0+24
 1786 08e4 47010000 		.word	327
 1787 08e8 4C000000 		.word	.LC3
 1788 08ec 38010000 		.word	.LC8
 1789              		.cfi_endproc
 1790              	.LFE63:
 1792              		.align	2
 1793              		.global	armwave_set_wave_pointer_as_testbuf
 1794              		.syntax unified
 1795              		.arm
 1796              		.fpu vfp
 1798              	armwave_set_wave_pointer_as_testbuf:
 1799              	.LVL93:
 1800              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1801              		.loc 1 336 1 is_stmt 1 view -0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1806              		.loc 1 337 5 view .LVU495
 1807              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1808              		.loc 1 337 29 is_stmt 0 view .LVU496
 1809 08f0 24309FE5 		ldr	r3, .L97	@ tmp117,
 1810              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1811              		.loc 1 337 7 view .LVU497
 1812 08f4 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1813 08f8 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1814 08fc 0400003A 		bcc	.L96		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1815              		.loc 1 342 5 is_stmt 1 view .LVU498
 1816              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1817              		.loc 1 342 111 is_stmt 0 view .LVU499
 1818 0900 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1819              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1820              		.loc 1 342 68 view .LVU500
 1821 0904 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1822 0908 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1823              	.LVL94:
 1824              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1825              		.loc 1 342 33 view .LVU501
 1826 090c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1827              	@ armwave.c:343: }
 343:armwave.c     **** }
 1828              		.loc 1 343 1 view .LVU502
 1829 0910 1EFF2FE1 		bx	lr	@
 1830              	.LVL95:
 1831              	.L96:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1832              		.loc 1 338 9 is_stmt 1 view .LVU503
 1833 0914 04009FE5 		ldr	r0, .L97+4	@,
 1834              	.LVL96:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1835              		.loc 1 338 9 is_stmt 0 view .LVU504
 1836 0918 FEFFFFEA 		b	puts		@
 1837              	.LVL97:
 1838              	.L98:
 1839              		.align	2
 1840              	.L97:
 1841 091c 00000000 		.word	g_armwave_state
 1842 0920 4C010000 		.word	.LC9
 1843              		.cfi_endproc
 1844              	.LFE64:
 1846              		.align	2
 1847              		.global	armwave_set_wave_pointer_u32
 1848              		.syntax unified
 1849              		.arm
 1850              		.fpu vfp
 1852              	armwave_set_wave_pointer_u32:
 1853              	.LVL98:
 1854              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1855              		.loc 1 350 1 is_stmt 1 view -0
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 0
 1858              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1859              		.loc 1 351 5 view .LVU506
 1860 0924 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1861              		.loc 1 351 5 is_stmt 0 view .LVU507
 1862 0928 0200000A 		beq	.L104		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1863              		.loc 1 352 5 is_stmt 1 view .LVU508
 1864              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1865              		.loc 1 352 33 is_stmt 0 view .LVU509
 1866 092c 1C309FE5 		ldr	r3, .L105	@ tmp117,
 1867 0930 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1868 0934 1EFF2FE1 		bx	lr	@
 1869              	.L104:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1870              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU510
 1871              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1872              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU511
 1873 0938 10402DE9 		push	{r4, lr}	@
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 4, -8
 1876              		.cfi_offset 14, -4
 1877              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1878              		.loc 1 351 5 discriminator 1 view .LVU512
 1879 093c 10309FE5 		ldr	r3, .L105+4	@,
 1880 0940 10209FE5 		ldr	r2, .L105+8	@,
 1881 0944 10109FE5 		ldr	r1, .L105+12	@,
 1882 0948 10009FE5 		ldr	r0, .L105+16	@,
 1883              	.LVL99:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1884              		.loc 1 351 5 discriminator 1 view .LVU513
 1885 094c FEFFFFEB 		bl	__assert_fail		@
 1886              	.LVL100:
 1887              	.L106:
 1888              		.align	2
 1889              	.L105:
 1890 0950 00000000 		.word	g_armwave_state
 1891 0954 34000000 		.word	.LANCHOR0+52
 1892 0958 5F010000 		.word	351
 1893 095c 4C000000 		.word	.LC3
 1894 0960 88010000 		.word	.LC10
 1895              		.cfi_endproc
 1896              	.LFE65:
 1898              		.align	2
 1899              		.global	armwave_clear_buffer
 1900              		.syntax unified
 1901              		.arm
 1902              		.fpu vfp
 1904              	armwave_clear_buffer:
 1905              	.LVL101:
 1906              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1907              		.loc 1 359 1 is_stmt 1 view -0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 0
 1910              		@ frame_needed = 0, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1912              		.loc 1 361 5 view .LVU515
 1913              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1914              		.loc 1 361 58 is_stmt 0 view .LVU516
 1915 0964 0C309FE5 		ldr	r3, .L108	@ tmp114,
 1916              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1917              		.loc 1 361 5 view .LVU517
 1918 0968 0010A0E3 		mov	r1, #0	@,
 1919 096c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1920 0970 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1921              	.LVL102:
 1922              		.loc 1 361 5 view .LVU518
 1923 0974 FEFFFFEA 		b	memset		@
 1924              	.LVL103:
 1925              	.L109:
 1926              		.align	2
 1927              	.L108:
 1928 0978 00000000 		.word	g_armwave_state
 1929              		.cfi_endproc
 1930              	.LFE66:
 1932              		.align	2
 1933              		.global	armwave_set_channel_colour
 1934              		.syntax unified
 1935              		.arm
 1936              		.fpu vfp
 1938              	armwave_set_channel_colour:
 1939              	.LVL104:
 1940              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 1941              		.loc 1 368 1 is_stmt 1 view -0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 0
 1944              		@ frame_needed = 0, uses_anonymous_args = 0
 1945              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 1946              		.loc 1 370 5 view .LVU520
 1947 097c 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1948              		.loc 1 372 13 view .LVU521
 1949              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 1950              		.loc 1 372 41 is_stmt 0 view .LVU522
 1951 0980 0C009F05 		ldreq	r0, .L112	@ tmp117,
 1952              	.LVL105:
 1953              		.loc 1 372 41 view .LVU523
 1954 0984 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1955              		.loc 1 373 13 is_stmt 1 view .LVU524
 1956              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 1957              		.loc 1 373 41 is_stmt 0 view .LVU525
 1958 0988 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1959              		.loc 1 374 13 is_stmt 1 view .LVU526
 1960              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 1961              		.loc 1 374 41 is_stmt 0 view .LVU527
 1962 098c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 1963              		.loc 1 375 13 is_stmt 1 view .LVU528
 1964              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 1965              		.loc 1 377 1 is_stmt 0 view .LVU529
 1966 0990 1EFF2FE1 		bx	lr	@
 1967              	.L113:
 1968              		.align	2
 1969              	.L112:
 1970 0994 00000000 		.word	g_armwave_state
 1971              		.cfi_endproc
 1972              	.LFE67:
 1974              		.align	2
 1975              		.global	armwave_dump_ppm_debug
 1976              		.syntax unified
 1977              		.arm
 1978              		.fpu vfp
 1980              	armwave_dump_ppm_debug:
 1981              	.LVL106:
 1982              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 1983              		.loc 1 383 1 is_stmt 1 view -0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 0
 1986              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1987              		.loc 1 384 5 view .LVU531
 1988              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1989              		.loc 1 383 1 is_stmt 0 view .LVU532
 1990 0998 0130A0E1 		mov	r3, r1	@ fn, fn
 1991 099c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1992              		.cfi_def_cfa_offset 28
 1993              		.cfi_offset 4, -28
 1994              		.cfi_offset 5, -24
 1995              		.cfi_offset 6, -20
 1996              		.cfi_offset 7, -16
 1997              		.cfi_offset 8, -12
 1998              		.cfi_offset 9, -8
 1999              		.cfi_offset 14, -4
 2000 09a0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2001 09a4 0CD04DE2 		sub	sp, sp, #12	@,,
 2002              		.cfi_def_cfa_offset 40
 2003              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 2004              		.loc 1 384 16 view .LVU533
 2005 09a8 C4109FE5 		ldr	r1, .L122	@,
 2006              	.LVL107:
 2007              		.loc 1 384 16 view .LVU534
 2008 09ac 0300A0E1 		mov	r0, r3	@, fn
 2009              	.LVL108:
 2010              		.loc 1 384 16 view .LVU535
 2011 09b0 FEFFFFEB 		bl	fopen64		@
 2012              	.LVL109:
 2013              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2014              		.loc 1 391 5 view .LVU536
 2015 09b4 BC609FE5 		ldr	r6, .L122+4	@ tmp150,
 2016              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2017              		.loc 1 390 5 view .LVU537
 2018 09b8 0320A0E3 		mov	r2, #3	@,
 2019 09bc 0110A0E3 		mov	r1, #1	@,
 2020              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 2021              		.loc 1 384 16 view .LVU538
 2022 09c0 0070A0E1 		mov	r7, r0	@ fp,
 2023              	.LVL110:
 385:armwave.c     ****     uint32_t data;
 2024              		.loc 1 385 5 is_stmt 1 view .LVU539
 386:armwave.c     **** 
 2025              		.loc 1 386 5 view .LVU540
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2026              		.loc 1 390 5 view .LVU541
 2027 09c4 0030A0E1 		mov	r3, r0	@, fp
 2028 09c8 AC009FE5 		ldr	r0, .L122+8	@,
 2029              	.LVL111:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2030              		.loc 1 390 5 is_stmt 0 view .LVU542
 2031 09cc FEFFFFEB 		bl	fwrite		@
 2032              	.LVL112:
 2033              		.loc 1 391 5 is_stmt 1 view .LVU543
 2034 09d0 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2035 09d4 A4109FE5 		ldr	r1, .L122+12	@,
 2036 09d8 0700A0E1 		mov	r0, r7	@, fp
 2037 09dc FEFFFFEB 		bl	fprintf		@
 2038              	.LVL113:
 392:armwave.c     ****     fputs("255\n", fp);
 2039              		.loc 1 392 5 view .LVU544
 2040 09e0 0420A0E3 		mov	r2, #4	@,
 2041 09e4 0730A0E1 		mov	r3, r7	@, fp
 2042 09e8 0110A0E3 		mov	r1, #1	@,
 2043 09ec 90009FE5 		ldr	r0, .L122+16	@,
 2044 09f0 FEFFFFEB 		bl	fwrite		@
 2045              	.LVL114:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2046              		.loc 1 394 5 view .LVU545
 2047              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2048              		.loc 1 394 37 is_stmt 0 view .LVU546
 2049 09f4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2050              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2051              		.loc 1 394 5 view .LVU547
 2052 09f8 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2053 09fc 180000DA 		ble	.L115		@,
 2054 0a00 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2055              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2056              		.loc 1 399 13 view .LVU548
 2057 0a04 7C909FE5 		ldr	r9, .L122+20	@ tmp152,
 2058              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2059              		.loc 1 394 12 view .LVU549
 2060 0a08 0050A0E3 		mov	r5, #0	@ yy,
 2061              	.LVL115:
 2062              	.L116:
 2063              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2064              		.loc 1 395 9 view .LVU550
 2065 0a0c 000053E3 		cmp	r3, #0	@ _13,
 2066              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2067              		.loc 1 395 16 view .LVU551
 2068 0a10 0040A0C3 		movgt	r4, #0	@ xx,
 2069              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2070              		.loc 1 395 9 view .LVU552
 2071 0a14 0F0000DA 		ble	.L118		@,
 2072              	.LVL116:
 2073              	.L117:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2074              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU553
 2075              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2076              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU554
 2077 0a18 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2078              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2079              		.loc 1 399 13 discriminator 3 view .LVU555
 2080 0a1c 0910A0E1 		mov	r1, r9	@, tmp152
 2081 0a20 0700A0E1 		mov	r0, r7	@, fp
 2082              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2083              		.loc 1 396 18 discriminator 3 view .LVU556
 2084 0a24 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2085              	.LVL117:
 2086              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU557
 2087              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2088              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU558
 2089 0a28 014084E2 		add	r4, r4, #1	@ xx, xx,
 2090              	.LVL118:
 2091              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2092              		.loc 1 399 81 discriminator 3 view .LVU559
 2093 0a2c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2094              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2095              		.loc 1 399 61 discriminator 3 view .LVU560
 2096 0a30 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2097              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2098              		.loc 1 399 13 discriminator 3 view .LVU561
 2099 0a34 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2100 0a38 7330EFE6 		uxtb	r3, r3	@, tmp142
 2101 0a3c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2102 0a40 7220EFE6 		uxtb	r2, r2	@, data
 2103              	.LVL119:
 2104              		.loc 1 399 13 discriminator 3 view .LVU562
 2105 0a44 FEFFFFEB 		bl	fprintf		@
 2106              	.LVL120:
 2107              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2108              		.loc 1 395 41 discriminator 3 view .LVU563
 2109 0a48 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2110              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2111              		.loc 1 395 9 discriminator 3 view .LVU564
 2112 0a4c 040053E1 		cmp	r3, r4	@ _13, xx
 2113 0a50 F0FFFFCA 		bgt	.L117		@,
 2114 0a54 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2115              	.LVL121:
 2116              	.L118:
 2117              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2118              		.loc 1 394 55 discriminator 2 view .LVU565
 2119 0a58 015085E2 		add	r5, r5, #1	@ yy, yy,
 2120              	.LVL122:
 2121              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2122              		.loc 1 394 5 discriminator 2 view .LVU566
 2123 0a5c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2124 0a60 E9FFFFBA 		blt	.L116		@,
 2125              	.LVL123:
 2126              	.L115:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 2127              		.loc 1 403 5 is_stmt 1 view .LVU567
 2128 0a64 0700A0E1 		mov	r0, r7	@, fp
 2129              	@ armwave.c:404: }
 404:armwave.c     **** }
 2130              		.loc 1 404 1 is_stmt 0 view .LVU568
 2131 0a68 0CD08DE2 		add	sp, sp, #12	@,,
 2132              		.cfi_def_cfa_offset 28
 2133              		@ sp needed	@
 2134 0a6c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2135              		.cfi_restore 14
 2136              		.cfi_restore 9
 2137              		.cfi_restore 8
 2138              		.cfi_restore 7
 2139              		.cfi_restore 6
 2140              		.cfi_restore 5
 2141              		.cfi_restore 4
 2142              		.cfi_def_cfa_offset 0
 2143              	.LVL124:
 2144              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2145              		.loc 1 403 5 view .LVU569
 2146 0a70 FEFFFFEA 		b	fclose		@
 2147              	.LVL125:
 2148              	.L123:
 403:armwave.c     **** }
 2149              		.loc 1 403 5 view .LVU570
 2150              		.align	2
 2151              	.L122:
 2152 0a74 A0010000 		.word	.LC11
 2153 0a78 00000000 		.word	g_armwave_state
 2154 0a7c A4010000 		.word	.LC12
 2155 0a80 A8010000 		.word	.LC13
 2156 0a84 B0010000 		.word	.LC14
 2157 0a88 B8010000 		.word	.LC15
 2158              		.cfi_endproc
 2159              	.LFE68:
 2161              		.align	2
 2162              		.global	armwave_test_init
 2163              		.syntax unified
 2164              		.arm
 2165              		.fpu vfp
 2167              	armwave_test_init:
 2168              	.LVL126:
 2169              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2170              		.loc 1 410 1 is_stmt 1 view -0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2174              		.loc 1 411 5 view .LVU572
 2175              	.LBB18:
 2176              	.LBI18:
  34:armwave.c     **** {
 2177              		.loc 1 34 6 view .LVU573
  34:armwave.c     **** {
 2178              		.loc 1 34 6 is_stmt 0 view .LVU574
 2179              	.LBE18:
 2180              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2181              		.loc 1 410 1 view .LVU575
 2182 0a8c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2183              		.cfi_def_cfa_offset 32
 2184              		.cfi_offset 4, -32
 2185              		.cfi_offset 5, -28
 2186              		.cfi_offset 6, -24
 2187              		.cfi_offset 7, -20
 2188              		.cfi_offset 8, -16
 2189              		.cfi_offset 9, -12
 2190              		.cfi_offset 10, -8
 2191              		.cfi_offset 14, -4
 2192 0a90 068B2DED 		vpush.64	{d8, d9, d10}	@
 2193              		.cfi_def_cfa_offset 56
 2194              		.cfi_offset 80, -56
 2195              		.cfi_offset 81, -52
 2196              		.cfi_offset 82, -48
 2197              		.cfi_offset 83, -44
 2198              		.cfi_offset 84, -40
 2199              		.cfi_offset 85, -36
 2200 0a94 C0409FE5 		ldr	r4, .L128+20	@ ivtmp.99,
 2201              	.LBB21:
 2202              	.LBB19:
 2203              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2204              		.loc 1 40 32 view .LVU576
 2205 0a98 2EAA9FED 		vldr.32	s20, .L128+16	@ tmp136,
 2206              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2207              		.loc 1 40 26 view .LVU577
 2208 0a9c 299B9FED 		vldr.64	d9, .L128	@ tmp151,
 2209              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2210              		.loc 1 40 49 view .LVU578
 2211 0aa0 2A8B9FED 		vldr.64	d8, .L128+8	@ tmp139,
 2212 0aa4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.99,
 2213              	.LBE19:
 2214              	.LBE21:
 2215              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2216              		.loc 1 410 1 view .LVU579
 2217 0aa8 10D04DE2 		sub	sp, sp, #16	@,,
 2218              		.cfi_def_cfa_offset 72
 2219              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2220              		.loc 1 410 1 view .LVU580
 2221 0aac 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2222 0ab0 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2223 0ab4 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2224 0ab8 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2225 0abc 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.99,
 2226 0ac0 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2227              	.LVL127:
 2228              	.L125:
 2229              	.LBB22:
 2230              	.LBB20:
  40:armwave.c     ****     }
 2231              		.loc 1 40 9 is_stmt 1 view .LVU581
 2232              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2233              		.loc 1 40 32 is_stmt 0 view .LVU582
 2234 0ac4 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.99
 2235              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2236              		.loc 1 40 26 view .LVU583
 2237 0ac8 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2238              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2239              		.loc 1 40 32 view .LVU584
 2240 0acc 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2241 0ad0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2242 0ad4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2243              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2244              		.loc 1 40 26 view .LVU585
 2245 0ad8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2246 0adc FEFFFFEB 		bl	pow		@
 2247              	.LVL128:
 2248              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2249              		.loc 1 40 49 view .LVU586
 2250 0ae0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2251              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2252              		.loc 1 40 24 view .LVU587
 2253 0ae4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2254 0ae8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2255 0aec 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2256              	.LVL129:
 2257              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2258              		.loc 1 39 5 view .LVU588
 2259 0af0 0A0054E1 		cmp	r4, r10	@ ivtmp.99, _39
 2260 0af4 F2FFFF1A 		bne	.L125		@,
 2261              	.LVL130:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2262              		.loc 1 39 5 view .LVU589
 2263              	.LBE20:
 2264              	.LBE22:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2265              		.loc 1 414 5 is_stmt 1 view .LVU590
 2266              	.LBB23:
 2267              	.LBI23:
 367:armwave.c     **** {
 2268              		.loc 1 367 6 view .LVU591
 2269              	.LBB24:
 370:armwave.c     ****         case 1:
 2270              		.loc 1 370 5 view .LVU592
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2271              		.loc 1 372 13 view .LVU593
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2272              		.loc 1 373 13 view .LVU594
 2273              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2274              		.loc 1 372 41 is_stmt 0 view .LVU595
 2275 0af8 60C09FE5 		ldr	ip, .L128+24	@ tmp142,
 2276 0afc 60409FE5 		ldr	r4, .L128+28	@ tmp143,
 2277              	.LBE24:
 2278              	.LBE23:
 2279              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2280              		.loc 1 416 5 view .LVU596
 2281 0b00 0000A0E3 		mov	r0, #0	@ tmp147,
 2282              	.LBB28:
 2283              	.LBB25:
 2284              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2285              		.loc 1 374 41 view .LVU597
 2286 0b04 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2287              	.LBE25:
 2288              	.LBE28:
 2289              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2290              		.loc 1 416 5 view .LVU598
 2291 0b08 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2292 0b0c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2293 0b10 00808DE5 		str	r8, [sp]	@ render_width,
 2294 0b14 0610A0E1 		mov	r1, r6	@, tmp3
 2295 0b18 0720A0E1 		mov	r2, r7	@, nwaves
 2296              	.LBB29:
 2297              	.LBB26:
 2298              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2299              		.loc 1 372 41 view .LVU599
 2300 0b1c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2301              		.loc 1 374 13 is_stmt 1 view .LVU600
 2302              	.LBE26:
 2303              	.LBE29:
 2304              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2305              		.loc 1 416 5 is_stmt 0 view .LVU601
 2306 0b20 0630A0E1 		mov	r3, r6	@, wave_size
 2307              	.LBB30:
 2308              	.LBB27:
 2309              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2310              		.loc 1 374 41 view .LVU602
 2311 0b24 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2312              		.loc 1 375 13 is_stmt 1 view .LVU603
 2313              	.LVL131:
 375:armwave.c     ****     }
 2314              		.loc 1 375 13 is_stmt 0 view .LVU604
 2315              	.LBE27:
 2316              	.LBE30:
 2317              		.loc 1 416 5 is_stmt 1 view .LVU605
 2318 0b28 FEFFFFEB 		bl	armwave_setup_render		@
 2319              	.LVL132:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2320              		.loc 1 418 5 view .LVU606
 2321 0b2c 34109FE5 		ldr	r1, .L128+32	@,
 2322 0b30 34009FE5 		ldr	r0, .L128+36	@,
 2323              	@ armwave.c:419: }
 419:armwave.c     **** }
 2324              		.loc 1 419 1 is_stmt 0 view .LVU607
 2325 0b34 10D08DE2 		add	sp, sp, #16	@,,
 2326              		.cfi_def_cfa_offset 56
 2327              		@ sp needed	@
 2328 0b38 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2329              		.cfi_restore 84
 2330              		.cfi_restore 85
 2331              		.cfi_restore 82
 2332              		.cfi_restore 83
 2333              		.cfi_restore 80
 2334              		.cfi_restore 81
 2335              		.cfi_def_cfa_offset 32
 2336 0b3c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2337              		.cfi_restore 14
 2338              		.cfi_restore 10
 2339              		.cfi_restore 9
 2340              		.cfi_restore 8
 2341              		.cfi_restore 7
 2342              		.cfi_restore 6
 2343              		.cfi_restore 5
 2344              		.cfi_restore 4
 2345              		.cfi_def_cfa_offset 0
 2346              	.LVL133:
 2347              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2348              		.loc 1 418 5 view .LVU608
 2349 0b40 FEFFFFEA 		b	printf		@
 2350              	.LVL134:
 2351              	.L129:
 2352 0b44 0000A0E1 		.align	3
 2353              	.L128:
 2354 0b48 000000C0 		.word	-1073741824
 2355 0b4c CCCCEC3F 		.word	1072483532
 2356 0b50 00000000 		.word	0
 2357 0b54 00E06F40 		.word	1081073664
 2358 0b58 00007F43 		.word	1132396544
 2359 0b5c FFFFFFFF 		.word	gamma_table-1
 2360 0b60 00000000 		.word	g_armwave_state
 2361 0b64 F609F406 		.word	116656630
 2362 0b68 00000000 		.word	.LC0
 2363 0b6c 08000000 		.word	.LC1
 2364              		.cfi_endproc
 2365              	.LFE69:
 2367              		.align	2
 2368              		.global	armwave_test_fill_outbuf
 2369              		.syntax unified
 2370              		.arm
 2371              		.fpu vfp
 2373              	armwave_test_fill_outbuf:
 2374              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2375              		.loc 1 425 1 is_stmt 1 view -0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 2379              		@ link register save eliminated.
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2380              		.loc 1 426 5 view .LVU610
 2381 0b70 04309FE5 		ldr	r3, .L131	@ tmp111,
 2382 0b74 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2383 0b78 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2384              	.LVL135:
 2385              	.L132:
 2386              		.align	2
 2387              	.L131:
 2388 0b7c 00000000 		.word	g_armwave_state
 2389              		.cfi_endproc
 2390              	.LFE70:
 2392              		.align	2
 2393              		.global	armwave_test_dump_buffer_to_ppm
 2394              		.syntax unified
 2395              		.arm
 2396              		.fpu vfp
 2398              	armwave_test_dump_buffer_to_ppm:
 2399              	.LVL136:
 2400              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2401              		.loc 1 433 1 view -0
 2402              		.cfi_startproc
 2403              		@ args = 0, pretend = 0, frame = 0
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
 2405              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2406              		.loc 1 434 5 view .LVU612
 2407 0b80 08309FE5 		ldr	r3, .L134	@ tmp112,
 2408 0b84 0010A0E1 		mov	r1, r0	@, fn
 2409 0b88 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2410              	.LVL137:
 2411              		.loc 1 434 5 is_stmt 0 view .LVU613
 2412 0b8c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2413              	.LVL138:
 2414              	.L135:
 2415              		.loc 1 434 5 view .LVU614
 2416              		.align	2
 2417              	.L134:
 2418 0b90 00000000 		.word	g_armwave_state
 2419              		.cfi_endproc
 2420              	.LFE71:
 2422              		.align	2
 2423              		.global	armwave_test_fill_gdkbuf
 2424              		.syntax unified
 2425              		.arm
 2426              		.fpu vfp
 2428              	armwave_test_fill_gdkbuf:
 2429              	.LVL139:
 2430              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2431              		.loc 1 441 1 is_stmt 1 view -0
 2432              		.cfi_startproc
 2433              		@ args = 0, pretend = 0, frame = 0
 2434              		@ frame_needed = 0, uses_anonymous_args = 0
 2435              		@ link register save eliminated.
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2436              		.loc 1 446 5 view .LVU616
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2437              		.loc 1 449 5 view .LVU617
 2438              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 446:armwave.c     ****     
 2439              		.loc 1 446 11 is_stmt 0 view .LVU618
 2440 0b94 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2441              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2442              		.loc 1 449 5 view .LVU619
 2443 0b98 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2444              	.LVL140:
 2445              		.loc 1 449 5 view .LVU620
 2446 0b9c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2447              	.LVL141:
 2448              		.loc 1 449 5 view .LVU621
 2449              		.cfi_endproc
 2450              	.LFE72:
 2452              		.align	2
 2453              		.global	armwave_test_buffer_alloc
 2454              		.syntax unified
 2455              		.arm
 2456              		.fpu vfp
 2458              	armwave_test_buffer_alloc:
 2459              	.LVL142:
 2460              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2461              		.loc 1 456 1 is_stmt 1 view -0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2465              		.loc 1 457 5 view .LVU623
 2466              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2467              		.loc 1 456 1 is_stmt 0 view .LVU624
 2468 0ba0 70402DE9 		push	{r4, r5, r6, lr}	@
 2469              		.cfi_def_cfa_offset 16
 2470              		.cfi_offset 4, -16
 2471              		.cfi_offset 5, -12
 2472              		.cfi_offset 6, -8
 2473              		.cfi_offset 14, -4
 2474              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2475              		.loc 1 456 1 view .LVU625
 2476 0ba4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2477              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2478              		.loc 1 457 23 view .LVU626
 2479 0ba8 44409FE5 		ldr	r4, .L144	@ tmp128,
 2480 0bac 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2481              	.LVL143:
 2482              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2483              		.loc 1 457 7 view .LVU627
 2484 0bb0 000050E3 		cmp	r0, #0	@ _1,
 2485 0bb4 0000000A 		beq	.L138		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2486              		.loc 1 458 9 is_stmt 1 view .LVU628
 2487 0bb8 FEFFFFEB 		bl	free		@
 2488              	.LVL144:
 2489              	.L138:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2490              		.loc 1 463 5 view .LVU629
 2491              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2492              		.loc 1 463 75 is_stmt 0 view .LVU630
 2493 0bbc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2494 0bc0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2495              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2496              		.loc 1 463 40 view .LVU631
 2497 0bc4 0610A0E1 		mov	r1, r6	@, nsets
 2498              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2499              		.loc 1 463 75 view .LVU632
 2500 0bc8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2501              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2502              		.loc 1 463 40 view .LVU633
 2503 0bcc 0500A0E1 		mov	r0, r5	@, _4
 2504 0bd0 FEFFFFEB 		bl	calloc		@
 2505              	.LVL145:
 2506              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2507              		.loc 1 465 7 view .LVU634
 2508 0bd4 000050E3 		cmp	r0, #0	@ tmp124,
 2509              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2510              		.loc 1 463 38 view .LVU635
 2511 0bd8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2512              		.loc 1 465 5 is_stmt 1 view .LVU636
 2513              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2514              		.loc 1 465 7 is_stmt 0 view .LVU637
 2515 0bdc 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2516              		.loc 1 466 9 is_stmt 1 view .LVU638
 2517 0be0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2518 0be4 0620A0E1 		mov	r2, r6	@, nsets
 2519 0be8 08009FE5 		ldr	r0, .L144+4	@,
 2520              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2521              		.loc 1 470 1 is_stmt 0 view .LVU639
 2522 0bec 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2523              		.cfi_restore 14
 2524              		.cfi_restore 6
 2525              		.cfi_restore 5
 2526              		.cfi_restore 4
 2527              		.cfi_def_cfa_offset 0
 2528              	.LVL146:
 2529              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2530              		.loc 1 466 9 view .LVU640
 2531 0bf0 FEFFFFEA 		b	printf		@
 2532              	.LVL147:
 2533              	.L145:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2534              		.loc 1 466 9 view .LVU641
 2535              		.align	2
 2536              	.L144:
 2537 0bf4 00000000 		.word	g_armwave_state
 2538 0bf8 C8010000 		.word	.LC16
 2539              		.cfi_endproc
 2540              	.LFE73:
 2542              		.align	2
 2543              		.global	armwave_fill_pixbuf_into_pybuffer
 2544              		.syntax unified
 2545              		.arm
 2546              		.fpu vfp
 2548              	armwave_fill_pixbuf_into_pybuffer:
 2549              	.LVL148:
 2550              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2551              		.loc 1 476 1 is_stmt 1 view -0
 2552              		.cfi_startproc
 2553              		@ args = 0, pretend = 0, frame = 48
 2554              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2555              		.loc 1 477 5 view .LVU643
 478:armwave.c     ****     int ret;
 2556              		.loc 1 478 5 view .LVU644
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2557              		.loc 1 482 5 view .LVU645
 2558              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2559              		.loc 1 476 1 is_stmt 0 view .LVU646
 2560 0bfc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2561              		.cfi_def_cfa_offset 4
 2562              		.cfi_offset 14, -4
 2563 0c00 34D04DE2 		sub	sp, sp, #52	@,,
 2564              		.cfi_def_cfa_offset 56
 2565              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2566              		.loc 1 482 11 view .LVU647
 2567 0c04 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2568 0c08 0120A0E3 		mov	r2, #1	@,
 2569 0c0c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2570              	.LVL149:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2571              		.loc 1 484 5 is_stmt 1 view .LVU648
 2572              	@ armwave.c:484:     if(ret != 0) {
 2573              		.loc 1 484 7 is_stmt 0 view .LVU649
 2574 0c10 000050E3 		cmp	r0, #0	@,
 2575 0c14 0A00001A 		bne	.L150		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2576              		.loc 1 491 5 is_stmt 1 view .LVU650
 2577 0c18 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2578              	.LVL150:
 2579              		.loc 1 491 5 is_stmt 0 view .LVU651
 2580 0c1c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2581              	.LVL151:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2582              		.loc 1 494 5 is_stmt 1 view .LVU652
 2583 0c20 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2584 0c24 FEFFFFEB 		bl	PyBuffer_Release		@
 2585              	.LVL152:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2586              		.loc 1 497 5 view .LVU653
 2587              	.LBB31:
 2588              	.LBI31:
 2589              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2590              		.loc 2 456 20 view .LVU654
 2591              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2592              		.loc 2 458 21 view .LVU655
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2593              		.loc 2 459 5 view .LVU656
 2594              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2595              		.loc 2 459 18 is_stmt 0 view .LVU657
 2596 0c28 38309FE5 		ldr	r3, .L151	@ tmp126,
 2597              	.LBE32:
 2598              	.LBE31:
 2599              	@ armwave.c:497:     Py_RETURN_TRUE;
 2600              		.loc 1 497 5 view .LVU658
 2601 0c2c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2602              	.LBB34:
 2603              	.LBB33:
 2604              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2605              		.loc 2 459 18 view .LVU659
 2606 0c30 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2607 0c34 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2608 0c38 002083E5 		str	r2, [r3]	@ tmp128,
 2609              	.LBE33:
 2610              	.LBE34:
 2611              	@ armwave.c:498: }
 498:armwave.c     **** }
 2612              		.loc 1 498 1 view .LVU660
 2613 0c3c 34D08DE2 		add	sp, sp, #52	@,,
 2614              		.cfi_remember_state
 2615              		.cfi_def_cfa_offset 4
 2616              		@ sp needed	@
 2617 0c40 04F09DE4 		ldr	pc, [sp], #4	@
 2618              	.LVL153:
 2619              	.L150:
 2620              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 2621              		.loc 1 485 9 is_stmt 1 view .LVU661
 2622 0c44 20009FE5 		ldr	r0, .L151+4	@,
 2623              	.LVL154:
 485:armwave.c     ****         Py_RETURN_FALSE;
 2624              		.loc 1 485 9 is_stmt 0 view .LVU662
 2625 0c48 FEFFFFEB 		bl	puts		@
 2626              	.LVL155:
 486:armwave.c     ****     }
 2627              		.loc 1 486 9 is_stmt 1 view .LVU663
 2628              	.LBB35:
 2629              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2630              		.loc 2 456 20 view .LVU664
 2631              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2632              		.loc 2 458 21 view .LVU665
 2633              		.loc 2 459 5 view .LVU666
 2634              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2635              		.loc 2 459 18 is_stmt 0 view .LVU667
 2636 0c4c 1C309FE5 		ldr	r3, .L151+8	@ tmp120,
 2637              	.LBE36:
 2638              	.LBE35:
 2639              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 2640              		.loc 1 486 9 view .LVU668
 2641 0c50 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2642              	.LBB38:
 2643              	.LBB37:
 2644              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2645              		.loc 2 459 18 view .LVU669
 2646 0c54 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2647 0c58 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2648 0c5c 002083E5 		str	r2, [r3]	@ tmp122,
 2649              	.LBE37:
 2650              	.LBE38:
 2651              	@ armwave.c:498: }
 2652              		.loc 1 498 1 view .LVU670
 2653 0c60 34D08DE2 		add	sp, sp, #52	@,,
 2654              		.cfi_def_cfa_offset 4
 2655              		@ sp needed	@
 2656 0c64 04F09DE4 		ldr	pc, [sp], #4	@
 2657              	.L152:
 2658              		.align	2
 2659              	.L151:
 2660 0c68 00000000 		.word	_Py_TrueStruct
 2661 0c6c 1C020000 		.word	.LC17
 2662 0c70 00000000 		.word	_Py_FalseStruct
 2663              		.cfi_endproc
 2664              	.LFE74:
 2666              		.align	2
 2667              		.global	armwave_test_create_am_sine
 2668              		.syntax unified
 2669              		.arm
 2670              		.fpu vfp
 2672              	armwave_test_create_am_sine:
 2673              	.LVL156:
 2674              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 2675              		.loc 1 508 1 is_stmt 1 view -0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 8
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2679              		.loc 1 509 5 view .LVU672
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2680              		.loc 1 510 5 view .LVU673
 2681              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2682              		.loc 1 508 1 is_stmt 0 view .LVU674
 2683 0c74 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2684              		.cfi_def_cfa_offset 32
 2685              		.cfi_offset 4, -32
 2686              		.cfi_offset 5, -28
 2687              		.cfi_offset 6, -24
 2688              		.cfi_offset 7, -20
 2689              		.cfi_offset 8, -16
 2690              		.cfi_offset 9, -12
 2691              		.cfi_offset 10, -8
 2692              		.cfi_offset 14, -4
 2693              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2694              		.loc 1 510 38 view .LVU675
 2695 0c78 7A7A9FED 		vldr.32	s14, .L184	@ tmp180,
 2696              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2697              		.loc 1 510 55 view .LVU676
 2698 0c7c 00529FE5 		ldr	r5, .L184+28	@ tmp250,
 2699              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2700              		.loc 1 508 1 view .LVU677
 2701 0c80 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2702              		.cfi_def_cfa_offset 80
 2703              		.cfi_offset 80, -80
 2704              		.cfi_offset 81, -76
 2705              		.cfi_offset 82, -72
 2706              		.cfi_offset 83, -68
 2707              		.cfi_offset 84, -64
 2708              		.cfi_offset 85, -60
 2709              		.cfi_offset 86, -56
 2710              		.cfi_offset 87, -52
 2711              		.cfi_offset 88, -48
 2712              		.cfi_offset 89, -44
 2713              		.cfi_offset 90, -40
 2714              		.cfi_offset 91, -36
 2715 0c84 0090A0E1 		mov	r9, r0	@ sets, sets
 2716              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2717              		.loc 1 510 38 view .LVU678
 2718 0c88 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2719              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2720              		.loc 1 514 70 view .LVU679
 2721 0c8c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2722 0c90 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2723              	.LBB41:
 2724              	.LBB42:
 2725              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2726              		.loc 1 457 23 view .LVU680
 2727 0c94 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2728              	.LVL157:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2729              		.loc 1 457 23 view .LVU681
 2730              	.LBE42:
 2731              	.LBE41:
 2732              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2733              		.loc 1 510 38 view .LVU682
 2734 0c98 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2735              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2736              		.loc 1 514 70 view .LVU683
 2737 0c9c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2738              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2739              		.loc 1 508 1 view .LVU684
 2740 0ca0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2741              	.LBB46:
 2742              	.LBB43:
 2743              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2744              		.loc 1 457 7 view .LVU685
 2745 0ca4 000050E3 		cmp	r0, #0	@ _82,
 2746              	.LBE43:
 2747              	.LBE46:
 2748              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2749              		.loc 1 508 1 view .LVU686
 2750 0ca8 08D04DE2 		sub	sp, sp, #8	@,,
 2751              		.cfi_def_cfa_offset 88
 2752              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2753              		.loc 1 515 44 view .LVU687
 2754 0cac 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2755              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2756              		.loc 1 514 45 view .LVU688
 2757 0cb0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2758              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2759              		.loc 1 510 38 view .LVU689
 2760 0cb4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2761              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2762              		.loc 1 510 11 view .LVU690
 2763 0cb8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2764              	.LVL158:
 511:armwave.c     ****     int w, x;
 2765              		.loc 1 511 5 is_stmt 1 view .LVU691
 512:armwave.c     **** 
 2766              		.loc 1 512 5 view .LVU692
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2767              		.loc 1 514 5 view .LVU693
 2768              		.loc 1 515 5 view .LVU694
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2769              		.loc 1 516 5 view .LVU695
 2770              	.LBB47:
 2771              	.LBI41:
 455:armwave.c     **** {
 2772              		.loc 1 455 6 view .LVU696
 2773              	.LBB44:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2774              		.loc 1 457 5 view .LVU697
 2775              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2776              		.loc 1 457 7 is_stmt 0 view .LVU698
 2777 0cbc 0000000A 		beq	.L154		@,
 458:armwave.c     ****     }
 2778              		.loc 1 458 9 is_stmt 1 view .LVU699
 2779 0cc0 FEFFFFEB 		bl	free		@
 2780              	.LVL159:
 2781              	.L154:
 463:armwave.c     **** 
 2782              		.loc 1 463 5 view .LVU700
 2783              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2784              		.loc 1 463 75 is_stmt 0 view .LVU701
 2785 0cc4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2786 0cc8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2787              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2788              		.loc 1 463 40 view .LVU702
 2789 0ccc 0910A0E1 		mov	r1, r9	@, sets
 2790              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2791              		.loc 1 463 75 view .LVU703
 2792 0cd0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2793              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2794              		.loc 1 463 40 view .LVU704
 2795 0cd4 0400A0E1 		mov	r0, r4	@, _85
 2796 0cd8 FEFFFFEB 		bl	calloc		@
 2797              	.LVL160:
 2798              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2799              		.loc 1 465 7 view .LVU705
 2800 0cdc 000050E3 		cmp	r0, #0	@ tmp191,
 2801              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2802              		.loc 1 463 38 view .LVU706
 2803 0ce0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2804              		.loc 1 465 5 is_stmt 1 view .LVU707
 2805              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2806              		.loc 1 465 7 is_stmt 0 view .LVU708
 2807 0ce4 5A00000A 		beq	.L183		@,
 2808              	.L155:
 2809              	.LVL161:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2810              		.loc 1 465 7 view .LVU709
 2811              	.LBE44:
 2812              	.LBE47:
 2813              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 2814              		.loc 1 518 5 discriminator 1 view .LVU710
 2815 0ce8 000059E3 		cmp	r9, #0	@ sets,
 2816 0cec 550000DA 		ble	.L153		@,
 2817              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2818              		.loc 1 537 45 view .LVU711
 2819 0cf0 5C8A9FED 		vldr.32	s16, .L184	@ tmp258,
 2820              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2821              		.loc 1 540 104 view .LVU712
 2822 0cf4 5CCA9FED 		vldr.32	s24, .L184+4	@ tmp259,
 2823              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2824              		.loc 1 518 5 view .LVU713
 2825 0cf8 0070A0E3 		mov	r7, #0	@ set_offset,
 2826              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2827              		.loc 1 519 9 view .LVU714
 2828 0cfc 84A19FE5 		ldr	r10, .L184+32	@ tmp257,
 2829              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2830              		.loc 1 518 5 view .LVU715
 2831 0d00 0780A0E1 		mov	r8, r7	@ s, set_offset
 2832              	.LVL162:
 2833              	.L156:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2834              		.loc 1 519 9 is_stmt 1 view .LVU716
 2835 0d04 0810A0E1 		mov	r1, r8	@, s
 2836 0d08 0A00A0E1 		mov	r0, r10	@, tmp257
 2837 0d0c FEFFFFEB 		bl	printf		@
 2838              	.LVL163:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2839              		.loc 1 521 9 view .LVU717
 2840              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2841              		.loc 1 521 39 is_stmt 0 view .LVU718
 2842 0d10 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2843              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2844              		.loc 1 521 9 view .LVU719
 2845 0d14 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2846 0d18 450000DA 		ble	.L157		@,
 2847              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2848              		.loc 1 523 21 view .LVU720
 2849 0d1c 53CADFED 		vldr.32	s25, .L184+8	@ tmp200,
 2850              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2851              		.loc 1 537 33 view .LVU721
 2852 0d20 53BA9FED 		vldr.32	s22, .L184+12	@ tmp253,
 2853              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2854              		.loc 1 535 24 view .LVU722
 2855 0d24 53AADFED 		vldr.32	s21, .L184+16	@ tmp254,
 2856 0d28 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2857              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2858              		.loc 1 521 15 view .LVU723
 2859 0d2c 0060A0E3 		mov	r6, #0	@ w,
 2860              	.LVL164:
 2861              	.L164:
 523:armwave.c     **** 
 2862              		.loc 1 523 13 is_stmt 1 view .LVU724
 2863              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2864              		.loc 1 523 21 is_stmt 0 view .LVU725
 2865 0d30 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2866 0d34 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2867              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2868              		.loc 1 525 13 view .LVU726
 2869 0d38 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2870              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2871              		.loc 1 523 21 view .LVU727
 2872 0d3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2873 0d40 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2874              	.LVL165:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2875              		.loc 1 525 13 is_stmt 1 view .LVU728
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2876              		.loc 1 525 13 is_stmt 0 view .LVU729
 2877 0d44 370000DA 		ble	.L158		@,
 2878 0d48 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2879              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2880              		.loc 1 540 113 view .LVU730
 2881 0d4c 4AAA9FED 		vldr.32	s20, .L184+20	@ tmp229,
 2882 0d50 4A8ADFED 		vldr.32	s17, .L184+24	@ tmp230,
 2883              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2884              		.loc 1 525 19 view .LVU731
 2885 0d54 0040A0E3 		mov	r4, #0	@ x,
 2886              	.LVL166:
 2887              	.L163:
 526:armwave.c     ****                 noise *= noise;
 2888              		.loc 1 526 17 is_stmt 1 view .LVU732
 2889              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2890              		.loc 1 526 28 is_stmt 0 view .LVU733
 2891 0d58 FEFFFFEB 		bl	rand		@
 2892              	.LVL167:
 2893              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2894              		.loc 1 526 35 view .LVU734
 2895 0d5c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2896              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2897              		.loc 1 526 45 view .LVU735
 2898 0d60 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2899 0d64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2900              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2901              		.loc 1 526 24 view .LVU736
 2902 0d68 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2903              	.LVL168:
 527:armwave.c     ****                 noise *= noise;
 2904              		.loc 1 527 17 is_stmt 1 view .LVU737
 2905              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2906              		.loc 1 527 23 is_stmt 0 view .LVU738
 2907 0d6c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2908              	.LVL169:
 528:armwave.c     ****                 noise *= noise;
 2909              		.loc 1 528 17 is_stmt 1 view .LVU739
 2910              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2911              		.loc 1 528 23 is_stmt 0 view .LVU740
 2912 0d70 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2913              	.LVL170:
 529:armwave.c     **** 
 2914              		.loc 1 529 17 is_stmt 1 view .LVU741
 2915              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 2916              		.loc 1 529 23 is_stmt 0 view .LVU742
 2917 0d74 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2918              	.LVL171:
 531:armwave.c     ****                     noise = -noise;
 2919              		.loc 1 531 17 is_stmt 1 view .LVU743
 2920              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2921              		.loc 1 531 21 is_stmt 0 view .LVU744
 2922 0d78 FEFFFFEB 		bl	rand		@
 2923              	.LVL172:
 532:armwave.c     **** 
 2924              		.loc 1 532 21 is_stmt 1 view .LVU745
 2925              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2926              		.loc 1 531 19 is_stmt 0 view .LVU746
 2927 0d7c 020910E3 		tst	r0, #32768	@,
 2928              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 2929              		.loc 1 532 27 view .LVU747
 2930 0d80 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2931              	.LVL173:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2932              		.loc 1 534 17 is_stmt 1 view .LVU748
 535:armwave.c     **** 
 2933              		.loc 1 535 17 view .LVU749
 2934              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2935              		.loc 1 535 27 is_stmt 0 view .LVU750
 2936 0d84 FEFFFFEB 		bl	rand		@
 2937              	.LVL174:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2938              		.loc 1 537 17 is_stmt 1 view .LVU751
 2939              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2940              		.loc 1 537 45 is_stmt 0 view .LVU752
 2941 0d88 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2942              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2943              		.loc 1 537 33 view .LVU753
 2944 0d8c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2945              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2946              		.loc 1 537 45 view .LVU754
 2947 0d90 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2948              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2949              		.loc 1 537 33 view .LVU755
 2950 0d94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2951              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2952              		.loc 1 537 45 view .LVU756
 2953 0d98 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2954              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2955              		.loc 1 537 33 view .LVU757
 2956 0d9c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2957              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2958              		.loc 1 535 34 view .LVU758
 2959 0da0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2960              	.LVL175:
 2961              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2962              		.loc 1 535 44 view .LVU759
 2963 0da4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2964 0da8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2965              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2966              		.loc 1 535 24 view .LVU760
 2967 0dac 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2968              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2969              		.loc 1 537 77 view .LVU761
 2970 0db0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2971              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2972              		.loc 1 537 22 view .LVU762
 2973 0db4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2974 0db8 FEFFFFEB 		bl	sin		@
 2975              	.LVL176:
 2976              		.loc 1 540 17 is_stmt 1 view .LVU763
 2977              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2978              		.loc 1 534 23 is_stmt 0 view .LVU764
 2979 0dbc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2980              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2981              		.loc 1 540 104 view .LVU765
 2982 0dc0 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 2983              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2984              		.loc 1 537 98 view .LVU766
 2985 0dc4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2986              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2987              		.loc 1 537 87 view .LVU767
 2988 0dc8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2989              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2990              		.loc 1 537 98 view .LVU768
 2991 0dcc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2992              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2993              		.loc 1 537 19 view .LVU769
 2994 0dd0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2995              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2996              		.loc 1 540 113 view .LVU770
 2997 0dd4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2998 0dd8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2999 0ddc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3000 0de0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3001 0de4 050000DA 		ble	.L160		@,
 3002              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3003              		.loc 1 540 104 discriminator 1 view .LVU771
 3004 0de8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3005 0dec FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 3006 0df0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3007 0df4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3008 0df8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3009 0dfc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 3010              	.L160:
 3011              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3012              		.loc 1 540 57 discriminator 12 view .LVU772
 3013 0e00 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3014              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3015              		.loc 1 540 102 discriminator 12 view .LVU773
 3016 0e04 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3017 0e08 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3018 0e0c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3019              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3020              		.loc 1 525 58 discriminator 12 view .LVU774
 3021 0e10 014084E2 		add	r4, r4, #1	@ x, x,
 3022              	.LVL177:
 3023              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3024              		.loc 1 540 102 discriminator 12 view .LVU775
 3025 0e14 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 3026              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3027              		.loc 1 525 43 discriminator 12 view .LVU776
 3028 0e18 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3029              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3030              		.loc 1 525 13 discriminator 12 view .LVU777
 3031 0e1c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3032 0e20 CCFFFFCA 		bgt	.L163		@,
 3033 0e24 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3034              	.LVL178:
 3035              	.L158:
 3036              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3037              		.loc 1 521 48 discriminator 2 view .LVU778
 3038 0e28 016086E2 		add	r6, r6, #1	@ w, w,
 3039              	.LVL179:
 3040              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3041              		.loc 1 521 9 discriminator 2 view .LVU779
 3042 0e2c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3043 0e30 BEFFFFBA 		blt	.L164		@,
 3044              	.LVL180:
 3045              	.L157:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3046              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU780
 3047              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3048              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU781
 3049 0e34 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3050              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3051              		.loc 1 518 27 discriminator 2 view .LVU782
 3052 0e38 018088E2 		add	r8, r8, #1	@ s, s,
 3053              	.LVL181:
 3054              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3055              		.loc 1 518 5 discriminator 2 view .LVU783
 3056 0e3c 080059E1 		cmp	r9, r8	@ sets, s
 3057              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3058              		.loc 1 544 20 discriminator 2 view .LVU784
 3059 0e40 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3060              	.LVL182:
 3061              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3062              		.loc 1 518 5 discriminator 2 view .LVU785
 3063 0e44 AEFFFF1A 		bne	.L156		@,
 3064              	.LVL183:
 3065              	.L153:
 3066              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 3067              		.loc 1 546 1 view .LVU786
 3068 0e48 08D08DE2 		add	sp, sp, #8	@,,
 3069              		.cfi_remember_state
 3070              		.cfi_def_cfa_offset 80
 3071              		@ sp needed	@
 3072 0e4c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3073              		.cfi_restore 90
 3074              		.cfi_restore 91
 3075              		.cfi_restore 88
 3076              		.cfi_restore 89
 3077              		.cfi_restore 86
 3078              		.cfi_restore 87
 3079              		.cfi_restore 84
 3080              		.cfi_restore 85
 3081              		.cfi_restore 82
 3082              		.cfi_restore 83
 3083              		.cfi_restore 80
 3084              		.cfi_restore 81
 3085              		.cfi_def_cfa_offset 32
 3086              	.LVL184:
 3087              		.loc 1 546 1 view .LVU787
 3088 0e50 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3089              	.LVL185:
 3090              	.L183:
 3091              		.cfi_restore_state
 3092              	.LBB48:
 3093              	.LBB45:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3094              		.loc 1 466 9 is_stmt 1 view .LVU788
 3095 0e54 940901E0 		mul	r1, r4, r9	@, _85, sets
 3096 0e58 0920A0E1 		mov	r2, r9	@, sets
 3097 0e5c 28009FE5 		ldr	r0, .L184+36	@,
 3098 0e60 FEFFFFEB 		bl	printf		@
 3099              	.LVL186:
 468:armwave.c     ****     }
 3100              		.loc 1 468 9 view .LVU789
 3101 0e64 9FFFFFEA 		b	.L155		@
 3102              	.L185:
 3103              		.align	2
 3104              	.L184:
 3105 0e68 0000803F 		.word	1065353216
 3106 0e6c 00007F43 		.word	1132396544
 3107 0e70 0000003F 		.word	1056964608
 3108 0e74 C3F5C840 		.word	1086911939
 3109 0e78 38FFC74A 		.word	1254620984
 3110 0e7c 0000FE42 		.word	1123942400
 3111 0e80 00000043 		.word	1124073472
 3112 0e84 00000000 		.word	g_armwave_state
 3113 0e88 70020000 		.word	.LC18
 3114 0e8c C8010000 		.word	.LC16
 3115              	.LBE45:
 3116              	.LBE48:
 3117              		.cfi_endproc
 3118              	.LFE75:
 3120              		.align	2
 3121              		.global	armwave_cleanup
 3122              		.syntax unified
 3123              		.arm
 3124              		.fpu vfp
 3126              	armwave_cleanup:
 3127              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 3128              		.loc 1 596 1 view -0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 0
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3132              		.loc 1 597 5 view .LVU791
 3133              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3134              		.loc 1 596 1 is_stmt 0 view .LVU792
 3135 0e90 10402DE9 		push	{r4, lr}	@
 3136              		.cfi_def_cfa_offset 8
 3137              		.cfi_offset 4, -8
 3138              		.cfi_offset 14, -4
 3139              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3140              		.loc 1 597 25 view .LVU793
 3141 0e94 34409FE5 		ldr	r4, .L188	@ tmp114,
 3142              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3143              		.loc 1 597 5 view .LVU794
 3144 0e98 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3145 0e9c FEFFFFEB 		bl	free		@
 3146              	.LVL187:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3147              		.loc 1 598 5 is_stmt 1 view .LVU795
 3148 0ea0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3149 0ea4 FEFFFFEB 		bl	free		@
 3150              	.LVL188:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3151              		.loc 1 599 5 view .LVU796
 3152 0ea8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3153 0eac FEFFFFEB 		bl	free		@
 3154              	.LVL189:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3155              		.loc 1 600 5 view .LVU797
 3156 0eb0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3157 0eb4 FEFFFFEB 		bl	free		@
 3158              	.LVL190:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3159              		.loc 1 602 5 view .LVU798
 3160              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3161              		.loc 1 602 32 is_stmt 0 view .LVU799
 3162 0eb8 0030A0E3 		mov	r3, #0	@ tmp123,
 3163 0ebc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3164              		.loc 1 603 5 is_stmt 1 view .LVU800
 3165              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3166              		.loc 1 603 32 is_stmt 0 view .LVU801
 3167 0ec0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3168              		.loc 1 604 5 is_stmt 1 view .LVU802
 3169              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3170              		.loc 1 604 38 is_stmt 0 view .LVU803
 3171 0ec4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3172              		.loc 1 605 5 is_stmt 1 view .LVU804
 3173              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3174              		.loc 1 605 38 is_stmt 0 view .LVU805
 3175 0ec8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3176              	@ armwave.c:606: }
 606:armwave.c     **** }
 3177              		.loc 1 606 1 view .LVU806
 3178 0ecc 1080BDE8 		pop	{r4, pc}	@
 3179              	.L189:
 3180              		.align	2
 3181              	.L188:
 3182 0ed0 00000000 		.word	g_armwave_state
 3183              		.cfi_endproc
 3184              	.LFE76:
 3186              		.comm	gamma_table,256,4
 3187              		.comm	g_armwave_state,136,4
 3188              		.section	.rodata
 3189              		.align	2
 3190              		.set	.LANCHOR0,. + 0
 3193              	__PRETTY_FUNCTION__.17126:
 3194 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3194      6176655F 
 3194      73657475 
 3194      705F7265 
 3194      6E646572 
 3195 0015 000000   		.space	3
 3198              	__PRETTY_FUNCTION__.17130:
 3199 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3199      6176655F 
 3199      7365745F 
 3199      77617665 
 3199      5F706F69 
 3200 0031 000000   		.space	3
 3203              	__PRETTY_FUNCTION__.17137:
 3204 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3204      6176655F 
 3204      7365745F 
 3204      77617665 
 3204      5F706F69 
 3205              		.section	.rodata.str1.4,"aMS",%progbits,1
 3206              		.align	2
 3207              	.LC0:
 3208 0000 76302E30 		.ascii	"v0.0.1\000"
 3208      2E3100
 3209 0007 00       		.space	1
 3210              	.LC1:
 3211 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3211      61766520 
 3211      76657273 
 3211      696F6E3A 
 3211      2025730A 
 3212 001d 000000   		.space	3
 3213              	.LC2:
 3214 0020 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3214      20653D25 
 3214      6420773D 
 3214      25642077 
 3214      733D2564 
 3215              	.LC3:
 3216 004c 61726D77 		.ascii	"armwave.c\000"
 3216      6176652E 
 3216      6300
 3217 0056 0000     		.space	2
 3218              	.LC4:
 3219 0058 73746172 		.ascii	"start_point < end_point\000"
 3219      745F706F 
 3219      696E7420 
 3219      3C20656E 
 3219      645F706F 
 3220              	.LC5:
 3221 0070 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3221      7566665F 
 3221      73697A65 
 3221      3D25642C 
 3221      20636D70 
 3222 00a3 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3222      5F776964 
 3222      74683D25 
 3222      642C2077 
 3222      6176655F 
 3223 00cd 000000   		.space	3
 3224              	.LC6:
 3225 00d0 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3225      6F632066 
 3225      61696C75 
 3225      72652061 
 3225      6C6C6F63 
 3226 0103 2E636831 		.ascii	".ch1_buffer)\012\000"
 3226      5F627566 
 3226      66657229 
 3226      0A00
 3227 0111 000000   		.space	3
 3228              	.LC7:
 3229 0114 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3229      3A203078 
 3229      25303878 
 3229      20307825 
 3229      30387820 
 3230              	.LC8:
 3231 0138 77617665 		.ascii	"wave_buffer != NULL\000"
 3231      5F627566 
 3231      66657220 
 3231      213D204E 
 3231      554C4C00 
 3232              	.LC9:
 3233 014c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3233      6176655F 
 3233      7365745F 
 3233      77617665 
 3233      5F706F69 
 3234 017f 78636565 		.ascii	"xceeded\000"
 3234      64656400 
 3235 0187 00       		.space	1
 3236              	.LC10:
 3237 0188 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3237      5F627566 
 3237      6665725F 
 3237      70747220 
 3237      213D2030 
 3238 019d 000000   		.space	3
 3239              	.LC11:
 3240 01a0 776200   		.ascii	"wb\000"
 3241 01a3 00       		.space	1
 3242              	.LC12:
 3243 01a4 50330A00 		.ascii	"P3\012\000"
 3244              	.LC13:
 3245 01a8 25642025 		.ascii	"%d %d\012\000"
 3245      640A00
 3246 01af 00       		.space	1
 3247              	.LC14:
 3248 01b0 3235350A 		.ascii	"255\012\000"
 3248      00
 3249 01b5 000000   		.space	3
 3250              	.LC15:
 3251 01b8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3251      25336420 
 3251      2533640A 
 3251      00
 3252 01c5 000000   		.space	3
 3253              	.LC16:
 3254 01c8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3254      6176655F 
 3254      74657374 
 3254      5F627566 
 3254      6665725F 
 3255 01fb 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3255      20627566 
 3255      66657220 
 3255      28256420 
 3255      62797465 
 3256              	.LC17:
 3257 021c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3257      6176655F 
 3257      66696C6C 
 3257      5F706978 
 3257      6275665F 
 3258 024f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3258      20666169 
 3258      6C65642C 
 3258      20726574 
 3258      75726E69 
 3259 026e 0000     		.space	2
 3260              	.LC18:
 3261 0270 43616C63 		.ascii	"Calculating test set %d\012\000"
 3261      756C6174 
 3261      696E6720 
 3261      74657374 
 3261      20736574 
 3262              		.text
 3263              	.Letext0:
 3264              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3265              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3266              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3267              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3268              		.file 7 "/usr/include/stdio.h"
 3269              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3270              		.file 9 "/usr/include/errno.h"
 3271              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3272              		.file 11 "/usr/include/unistd.h"
 3273              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3274              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3275              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3276              		.file 15 "/usr/include/math.h"
 3277              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3278              		.file 17 "/usr/include/time.h"
 3279              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3280              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3281              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3282              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3283              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3284              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3285              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3286              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3287              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3288              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3289              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3290              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3291              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3292              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3293              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3294              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3295              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3296              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3297              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3298              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3299              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3300              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3301              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3302              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3303              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3304              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3305              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3306              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3307              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3308              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3309              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3310              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3311              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3312              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3313              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3314              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3315              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3316              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3317              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3318              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3319              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3320              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3321              		.file 60 "/usr/local/include/python3.8/context.h"
 3322              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3323              		.file 62 "/usr/local/include/python3.8/code.h"
 3324              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3325              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3326              		.file 65 "/usr/local/include/python3.8/import.h"
 3327              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3328              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3329              		.file 68 "/usr/include/malloc.h"
 3330              		.file 69 "armwave.h"
 3331              		.file 70 "/usr/include/stdlib.h"
 3332              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3333              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3334              		.file 73 "<built-in>"
 3335              		.file 74 "/usr/include/assert.h"
