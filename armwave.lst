   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 70 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0020A0E1 		mov	r2, r0	@ slice_y, slice_y
 249              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 250              		.loc 1 70 40 view .LVU32
 251 00a4 8C519FE5 		ldr	r5, .L27	@ tmp287,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 14D04DE2 		sub	sp, sp, #20	@,,
 255              		.cfi_def_cfa_offset 56
 256              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 257              		.loc 1 70 63 view .LVU34
 258 00ac 407095E5 		ldr	r7, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  71:armwave.c     **** 
  72:armwave.c     ****     // roll through each waveform
  73:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 73 5 view .LVU35
 261 00b0 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 263              		.loc 1 63 1 view .LVU36
 264 00b4 0C008DE5 		str	r0, [sp, #12]	@ slice_y, %sfp
 265              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 73 5 view .LVU37
 267 00b8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 271              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 272              		.loc 1 70 40 view .LVU39
 273 00c0 040095E5 		ldr	r0, [r5, #4]	@ _1, g_armwave_state.ch1_buffer
 274              	.LVL7:
 275              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 276              		.loc 1 70 63 view .LVU40
 277 00c4 970207E0 		mul	r7, r7, r2	@ _4, g_armwave_state.bitdepth_height, slice_y
 278              	.LVL8:
 279              		.loc 1 73 5 is_stmt 1 view .LVU41
 280              		.loc 1 73 5 is_stmt 0 view .LVU42
 281 00c8 580000DA 		ble	.L11		@,
 282 00cc 000051E3 		cmp	r1, #0	@ height,
 283 00d0 5600000A 		beq	.L11		@,
 284              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
 285              		.loc 1 73 11 view .LVU43
 286 00d4 0030A0E3 		mov	r3, #0	@ w,
 287 00d8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 288              	.LVL9:
 289              	.L18:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 290              		.loc 1 74 9 is_stmt 1 view .LVU44
 291              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 292              		.loc 1 74 78 is_stmt 0 view .LVU45
 293 00dc 243095E5 		ldr	r3, [r5, #36]	@ pretmp_38, g_armwave_state.cmp_x_bitdepth_scale
 294              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 295              		.loc 1 74 61 view .LVU46
 296 00e0 0C109DE5 		ldr	r1, [sp, #12]	@ slice_y, %sfp
 297              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 298              		.loc 1 74 131 view .LVU47
 299 00e4 08C09DE5 		ldr	ip, [sp, #8]	@ w, %sfp
 300 00e8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 301              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 302              		.loc 1 74 61 view .LVU48
 303 00ec 910301E0 		mul	r1, r1, r3	@ tmp206, slice_y, pretmp_38
 304              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 305              		.loc 1 74 131 view .LVU49
 306 00f0 920C02E0 		mul	r2, r2, ip	@ tmp209, g_armwave_state.wave_stride, w
 307              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 308              		.loc 1 74 36 view .LVU50
 309 00f4 14A095E5 		ldr	r10, [r5, #20]	@ _5, g_armwave_state.wave_buffer
 310              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
 311              		.loc 1 74 126 view .LVU51
 312 00f8 212482E0 		add	r2, r2, r1, lsr #8	@ _12, tmp209, tmp206,
 313              	.LVL10:
  75:armwave.c     **** 
  76:armwave.c     ****         // roll through y and render the slice into the out buffer
  77:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  78:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 314              		.loc 1 78 9 is_stmt 1 view .LVU52
 315              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
 316              		.loc 1 78 16 is_stmt 0 view .LVU53
 317 00fc 00C0A0E3 		mov	ip, #0	@ yy,
 318 0100 02A08AE0 		add	r10, r10, r2	@ tmp286, _5, _12
 319              	.LVL11:
 320              		.loc 1 78 16 view .LVU54
 321 0104 000000EA 		b	.L19		@
 322              	.LVL12:
 323              	.L17:
 324              		.loc 1 78 16 view .LVU55
 325 0108 243095E5 		ldr	r3, [r5, #36]	@ pretmp_38, g_armwave_state.cmp_x_bitdepth_scale
 326              	.LVL13:
 327              	.L19:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 328              		.loc 1 79 13 is_stmt 1 view .LVU56
  80:armwave.c     **** 
  81:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  82:armwave.c     ****                 scale_value = word & 0xff;
  83:armwave.c     ****                 
  84:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  85:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  86:armwave.c     ****                     continue;
  87:armwave.c     **** 
  88:armwave.c     ****                 // Keep math in integer where possible using the compound X multiplier and a shift 
  89:armwave.c     ****                 // of X to 1/256 but this should not be an ultimate issue.
  90:armwave.c     ****                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cmp_x_bitdepth_sca
 329              		.loc 1 90 17 view .LVU57
 330              		.loc 1 90 17 view .LVU58
  91:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 91 17 view .LVU59
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 332              		.loc 1 90 17 view .LVU60
 333              		.loc 1 91 17 view .LVU61
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 90 17 view .LVU62
 335              		.loc 1 91 17 view .LVU63
 336              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 337              		.loc 1 79 50 is_stmt 0 view .LVU64
 338 010c 930C03E0 		mul	r3, r3, ip	@ tmp211, pretmp_38, yy
 339              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 340              		.loc 1 90 64 view .LVU65
 341 0110 01908CE2 		add	r9, ip, #1	@ tmp236, yy,
 342 0114 02808CE2 		add	r8, ip, #2	@ tmp255, yy,
 343              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 344              		.loc 1 79 18 view .LVU66
 345 0118 23249AE7 		ldr	r2, [r10, r3, lsr #8]	@ word, MEM[(uint32_t *)_17]
 346              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 347              		.loc 1 79 90 view .LVU67
 348 011c 2334A0E1 		lsr	r3, r3, #8	@ _16, tmp211,
 349              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 350              		.loc 1 85 20 view .LVU68
 351 0120 FFB012E2 		ands	fp, r2, #255	@ scale_value, word,
 352 0124 0140A003 		moveq	r4, #1	@ tmp215,
 353 0128 0040A013 		movne	r4, #0	@ tmp215,
 354              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 355              		.loc 1 85 19 view .LVU69
 356 012c FF005BE3 		cmp	fp, #255	@ scale_value,
 357 0130 01408403 		orreq	r4, r4, #1	@,, tmp220, tmp215
 358              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 91 47 view .LVU70
 360 0134 033087E0 		add	r3, r7, r3	@ tmp221, _4, _16
 361              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 362              		.loc 1 85 19 view .LVU71
 363 0138 000054E3 		cmp	r4, #0	@ tmp220,
 364              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 90 64 view .LVU72
 366 013c 03608CE2 		add	r6, ip, #3	@ tmp272, yy,
 367              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****                 word >>= 8;
 368              		.loc 1 92 22 view .LVU73
 369 0140 22E4A0E1 		lsr	lr, r2, #8	@ word, word,
 370              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 371              		.loc 1 79 18 view .LVU74
 372 0144 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 373              	.LVL14:
  81:armwave.c     ****                 scale_value = word & 0xff;
 374              		.loc 1 81 13 is_stmt 1 view .LVU75
  82:armwave.c     ****                 
 375              		.loc 1 82 17 view .LVU76
  85:armwave.c     ****                     continue;
 376              		.loc 1 85 17 view .LVU77
  91:armwave.c     ****                 word >>= 8;
 377              		.loc 1 91 17 view .LVU78
 378              	@ armwave.c:92:                 word >>= 8;
 379              		.loc 1 92 22 is_stmt 0 view .LVU79
 380 0148 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 381              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 382              		.loc 1 91 47 view .LVU80
 383 014c 0B3083E0 		add	r3, r3, fp	@ tmp222, tmp221, scale_value
 384              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 385              		.loc 1 85 19 view .LVU81
 386 0150 2D00001A 		bne	.L21		@,
 387              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 388              		.loc 1 85 20 view .LVU82
 389 0154 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 390              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 391              		.loc 1 91 47 view .LVU83
 392 0158 0340D0E7 		ldrb	r4, [r0, r3]	@ zero_extendqisi2	@ *_76, *_76
 393              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 394              		.loc 1 85 20 view .LVU84
 395 015c 01B0A003 		moveq	fp, #1	@ tmp229,
 396 0160 00B0A013 		movne	fp, #0	@ tmp229,
 397              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 398              		.loc 1 85 19 view .LVU85
 399 0164 FF005EE3 		cmp	lr, #255	@ scale_value,
 400 0168 01B08B03 		orreq	fp, fp, #1	@,, tmp234, tmp229
 401              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 402              		.loc 1 91 47 view .LVU86
 403 016c 014084E2 		add	r4, r4, #1	@ tmp225, *_76,
 404              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 405              		.loc 1 85 19 view .LVU87
 406 0170 00005BE3 		cmp	fp, #0	@ tmp234,
 407              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 408              		.loc 1 91 47 view .LVU88
 409 0174 0340C0E7 		strb	r4, [r0, r3]	@ tmp225, *_76
 410              		.loc 1 92 17 is_stmt 1 view .LVU89
 411              	.LVL15:
  82:armwave.c     ****                 
 412              		.loc 1 82 17 view .LVU90
  85:armwave.c     ****                     continue;
 413              		.loc 1 85 17 view .LVU91
 414              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 415              		.loc 1 85 19 is_stmt 0 view .LVU92
 416 0178 2300001A 		bne	.L21		@,
 417              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 418              		.loc 1 90 64 view .LVU93
 419 017c 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 420              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 421              		.loc 1 85 20 view .LVU94
 422 0180 FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 423 0184 0140A003 		moveq	r4, #1	@ tmp248,
 424              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 425              		.loc 1 90 64 view .LVU95
 426 0188 930909E0 		mul	r9, r3, r9	@ tmp237, g_armwave_state.cmp_x_bitdepth_scale, tmp236
 427              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 428              		.loc 1 85 20 view .LVU96
 429 018c 0040A013 		movne	r4, #0	@ tmp248,
 430              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 431              		.loc 1 85 19 view .LVU97
 432 0190 FF0051E3 		cmp	r1, #255	@ scale_value,
 433 0194 01408403 		orreq	r4, r4, #1	@,, tmp253, tmp248
 434              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 435              		.loc 1 91 47 view .LVU98
 436 0198 299487E0 		add	r9, r7, r9, lsr #8	@ tmp240, _4, tmp237,
 437 019c 0EE089E0 		add	lr, r9, lr	@ tmp241, tmp240, scale_value
 438              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 439              		.loc 1 85 19 view .LVU99
 440 01a0 000054E3 		cmp	r4, #0	@ tmp253,
 441              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 442              		.loc 1 91 47 view .LVU100
 443 01a4 0E30D0E7 		ldrb	r3, [r0, lr]	@ zero_extendqisi2	@ *_104, *_104
 444 01a8 013083E2 		add	r3, r3, #1	@ tmp244, *_104,
 445 01ac 0E30C0E7 		strb	r3, [r0, lr]	@ tmp244, *_104
 446              		.loc 1 92 17 is_stmt 1 view .LVU101
 447              	.LVL16:
  82:armwave.c     ****                 
 448              		.loc 1 82 17 view .LVU102
  85:armwave.c     ****                     continue;
 449              		.loc 1 85 17 view .LVU103
 450              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 451              		.loc 1 85 19 is_stmt 0 view .LVU104
 452 01b0 1500001A 		bne	.L21		@,
 453              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 454              		.loc 1 90 64 view .LVU105
 455 01b4 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 457              		.loc 1 85 20 view .LVU106
 458 01b8 222CB0E1 		lsrs	r2, r2, #24	@ word, word,
 459              	.LVL17:
  85:armwave.c     ****                     continue;
 460              		.loc 1 85 20 view .LVU107
 461 01bc 01E0A003 		moveq	lr, #1	@ tmp266,
 462              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 463              		.loc 1 90 64 view .LVU108
 464 01c0 930808E0 		mul	r8, r3, r8	@ tmp256, g_armwave_state.cmp_x_bitdepth_scale, tmp255
 465              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 466              		.loc 1 85 20 view .LVU109
 467 01c4 00E0A013 		movne	lr, #0	@ tmp266,
 468              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 469              		.loc 1 85 19 view .LVU110
 470 01c8 FF0052E3 		cmp	r2, #255	@ word,
 471 01cc 0E30A011 		movne	r3, lr	@, tmp271, tmp266
 472 01d0 01308E03 		orreq	r3, lr, #1	@,, tmp271, tmp266
 473              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 474              		.loc 1 91 47 view .LVU111
 475 01d4 288487E0 		add	r8, r7, r8, lsr #8	@ tmp259, _4, tmp256,
 476 01d8 011088E0 		add	r1, r8, r1	@ tmp260, tmp259, scale_value
 477              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 478              		.loc 1 85 19 view .LVU112
 479 01dc 000053E3 		cmp	r3, #0	@ tmp271,
 480              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 481              		.loc 1 91 47 view .LVU113
 482 01e0 0130D0E7 		ldrb	r3, [r0, r1]	@ zero_extendqisi2	@ *_132, *_132
 483 01e4 013083E2 		add	r3, r3, #1	@ tmp263, *_132,
 484 01e8 0130C0E7 		strb	r3, [r0, r1]	@ tmp263, *_132
 485              		.loc 1 92 17 is_stmt 1 view .LVU114
 486              	.LVL18:
  82:armwave.c     ****                 
 487              		.loc 1 82 17 view .LVU115
  85:armwave.c     ****                     continue;
 488              		.loc 1 85 17 view .LVU116
 489              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 490              		.loc 1 85 19 is_stmt 0 view .LVU117
 491 01ec 0600001A 		bne	.L21		@,
 492              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 493              		.loc 1 90 64 view .LVU118
 494 01f0 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 495 01f4 930606E0 		mul	r6, r3, r6	@ tmp274, g_armwave_state.cmp_x_bitdepth_scale, tmp272
 496              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 497              		.loc 1 91 47 view .LVU119
 498 01f8 266487E0 		add	r6, r7, r6, lsr #8	@ tmp277, _4, tmp274,
 499 01fc 022086E0 		add	r2, r6, r2	@ tmp278, tmp277, word
 500 0200 0230D0E7 		ldrb	r3, [r0, r2]	@ zero_extendqisi2	@ *_160, *_160
 501 0204 013083E2 		add	r3, r3, #1	@ tmp281, *_160,
 502 0208 0230C0E7 		strb	r3, [r0, r2]	@ tmp281, *_160
 503              		.loc 1 92 17 is_stmt 1 view .LVU120
 504              	.LVL19:
 505              	.L21:
 506              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 507              		.loc 1 78 9 is_stmt 0 view .LVU121
 508 020c 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 509 0210 0C0053E1 		cmp	r3, ip	@ height, yy
 510 0214 BBFFFF8A 		bhi	.L17		@,
 511              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 512              		.loc 1 73 44 view .LVU122
 513 0218 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 514              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 515              		.loc 1 73 5 view .LVU123
 516 021c 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 517              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 518              		.loc 1 73 44 view .LVU124
 519 0220 012082E2 		add	r2, r2, #1	@ w, w,
 520              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 521              		.loc 1 73 5 view .LVU125
 522 0224 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 523              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 524              		.loc 1 73 44 view .LVU126
 525 0228 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 526              	.LVL20:
 527              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 528              		.loc 1 73 5 view .LVU127
 529 022c AAFFFFBA 		blt	.L18		@,
 530              	.LVL21:
 531              	.L11:
 532              	@ armwave.c:96: }
  93:armwave.c     ****             }
  94:armwave.c     ****         }
  95:armwave.c     ****     }
  96:armwave.c     **** }
 533              		.loc 1 96 1 view .LVU128
 534 0230 14D08DE2 		add	sp, sp, #20	@,,
 535              		.cfi_def_cfa_offset 36
 536              		@ sp needed	@
 537 0234 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 538              	.LVL22:
 539              	.L28:
 540              		.loc 1 96 1 view .LVU129
 541              		.align	2
 542              	.L27:
 543 0238 00000000 		.word	g_armwave_state
 544              		.cfi_endproc
 545              	.LFE59:
 547              		.align	2
 548              		.global	armwave_fill_pixbuf_scaled
 549              		.syntax unified
 550              		.arm
 551              		.fpu vfp
 553              	armwave_fill_pixbuf_scaled:
 554              	.LVL23:
 555              	.LFB60:
  97:armwave.c     **** 
  98:armwave.c     **** #if 0
  99:armwave.c     **** /*
 100:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 101:armwave.c     ****  */
 102:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 103:armwave.c     **** {
 104:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 105:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 106:armwave.c     ****     uint8_t r, g, b, value;
 107:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 108:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 109:armwave.c     ****     uint32_t offset;
 110:armwave.c     **** 
 111:armwave.c     ****     assert(out_buffer != NULL);
 112:armwave.c     **** 
 113:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 114:armwave.c     **** 
 115:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 116:armwave.c     **** 
 117:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 118:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 119:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 120:armwave.c     ****         // most normal waveforms.
 121:armwave.c     ****         wave_word = *base_32ptr++;
 122:armwave.c     **** 
 123:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 124:armwave.c     ****             for(i = 0; i < 4; i++) {
 125:armwave.c     ****                 value = wave_word & 0xff;
 126:armwave.c     ****                 wave_word >>= 8;
 127:armwave.c     **** 
 128:armwave.c     ****                 if(value != 0) {
 129:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 130:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 131:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 132:armwave.c     **** 
 133:armwave.c     ****                     r = MIN(rr, 255);
 134:armwave.c     ****                     g = MIN(gg, 255);
 135:armwave.c     ****                     b = MIN(bb, 255);
 136:armwave.c     **** 
 137:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 138:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 139:armwave.c     **** 
 140:armwave.c     ****                     // Is there a better way?
 141:armwave.c     ****                     nsub = n + i;
 142:armwave.c     ****                     xx = nsub & 0xff;
 143:armwave.c     ****                     yy = nsub >> 8;
 144:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 145:armwave.c     ****                     *(out_buffer_base + offset) = word;
 146:armwave.c     ****                 }
 147:armwave.c     ****             }
 148:armwave.c     ****         } 
 149:armwave.c     ****     }
 150:armwave.c     **** }
 151:armwave.c     **** #endif
 152:armwave.c     **** 
 153:armwave.c     **** /*
 154:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 155:armwave.c     ****  * Rows are repeated as necessary.
 156:armwave.c     ****  */
 157:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 158:armwave.c     **** {
 556              		.loc 1 158 1 is_stmt 1 view -0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 8
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 159:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 560              		.loc 1 159 5 view .LVU131
 160:armwave.c     ****     // uint32_t ysub;
 161:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 561              		.loc 1 161 5 view .LVU132
 162:armwave.c     ****     uint8_t r, g, b, value; 
 562              		.loc 1 162 5 view .LVU133
 163:armwave.c     ****     // uint8_t row;
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 563              		.loc 1 164 5 view .LVU134
 564              	@ armwave.c:158: {
 158:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 565              		.loc 1 158 1 is_stmt 0 view .LVU135
 566 023c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 567              		.cfi_def_cfa_offset 36
 568              		.cfi_offset 4, -36
 569              		.cfi_offset 5, -32
 570              		.cfi_offset 6, -28
 571              		.cfi_offset 7, -24
 572              		.cfi_offset 8, -20
 573              		.cfi_offset 9, -16
 574              		.cfi_offset 10, -12
 575              		.cfi_offset 11, -8
 576              		.cfi_offset 14, -4
 577              	@ armwave.c:168:     assert(out_buffer != NULL);
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 166:armwave.c     ****     uint32_t offset;
 167:armwave.c     **** 
 168:armwave.c     ****     assert(out_buffer != NULL);
 578              		.loc 1 168 5 view .LVU136
 579 0240 000050E3 		cmp	r0, #0	@ out_buffer
 580              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 581              		.loc 1 164 15 view .LVU137
 582 0244 44619FE5 		ldr	r6, .L51	@ tmp203,
 583              	@ armwave.c:158: {
 158:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 584              		.loc 1 158 1 view .LVU138
 585 0248 0CD04DE2 		sub	sp, sp, #12	@,,
 586              		.cfi_def_cfa_offset 48
 587              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 588              		.loc 1 164 15 view .LVU139
 589 024c 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 590              	.LVL24:
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 591              		.loc 1 165 5 is_stmt 1 view .LVU140
 166:armwave.c     **** 
 592              		.loc 1 166 5 view .LVU141
 593              		.loc 1 168 5 view .LVU142
 594 0250 4900000A 		beq	.L48		@,
 169:armwave.c     **** 
 170:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 595              		.loc 1 170 5 view .LVU143
 596              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 597              		.loc 1 170 10 is_stmt 0 view .LVU144
 598 0254 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 599 0258 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 600              	.LVL25:
 171:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 172:armwave.c     **** 
 173:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 601              		.loc 1 173 5 is_stmt 1 view .LVU145
 602              		.loc 1 173 5 is_stmt 0 view .LVU146
 603 025c 000058E3 		cmp	r8, #0	@ npix,
 604 0260 0C0000DA 		ble	.L29		@,
 605              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 175:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 176:armwave.c     ****         // most normal waveforms.
 177:armwave.c     ****         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 179:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 182:armwave.c     ****                 wave_word >>= 8;
 183:armwave.c     **** 
 184:armwave.c     ****                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 606              		.loc 1 186 52 view .LVU147
 607 0264 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 608              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 609              		.loc 1 185 52 view .LVU148
 610 0268 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 611              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 189:armwave.c     ****                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 192:armwave.c     **** 
 193:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 194:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 196:armwave.c     ****                     // Do line scaling as necessary.
 197:armwave.c     ****                     /*
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                     */
 207:armwave.c     **** 
 208:armwave.c     ****                     nsub = n + w;
 209:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 612              		.loc 1 209 57 view .LVU149
 613 026c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 614              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 615              		.loc 1 186 52 view .LVU150
 616 0270 00308DE5 		str	r3, [sp]	@ _10, %sfp
 617              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 618              		.loc 1 187 52 view .LVU151
 619 0274 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 620              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 621              		.loc 1 173 11 view .LVU152
 622 0278 0010A0E3 		mov	r1, #0	@ n,
 623              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 624              		.loc 1 187 52 view .LVU153
 625 027c 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 626              	.LVL26:
 627              	.L36:
 177:armwave.c     **** 
 628              		.loc 1 177 9 is_stmt 1 view .LVU154
 629              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 630              		.loc 1 177 19 is_stmt 0 view .LVU155
 631 0280 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 632              	.LVL27:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 633              		.loc 1 179 9 is_stmt 1 view .LVU156
 634              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 635              		.loc 1 179 11 is_stmt 0 view .LVU157
 636 0284 000053E3 		cmp	r3, #0	@ wave_word,
 637 0288 0400001A 		bne	.L49		@,
 638              	.L32:
 639              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 640              		.loc 1 173 28 view .LVU158
 641 028c 041081E2 		add	r1, r1, #4	@ n, n,
 642              	.LVL28:
 643              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 644              		.loc 1 173 5 view .LVU159
 645 0290 010058E1 		cmp	r8, r1	@ npix, n
 646 0294 F9FFFFCA 		bgt	.L36		@,
 647              	.LVL29:
 648              	.L29:
 649              	@ armwave.c:221: }
 210:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 211:armwave.c     ****                     xx = (nsub >> 8);
 212:armwave.c     **** 
 213:armwave.c     ****                     for(y = yy; y < ye; y++) {
 214:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 215:armwave.c     ****                         *(out_buffer_base + offset) = word;
 216:armwave.c     ****                     }
 217:armwave.c     ****                 }
 218:armwave.c     ****             }
 219:armwave.c     ****         }
 220:armwave.c     ****     }
 221:armwave.c     **** }
 650              		.loc 1 221 1 view .LVU160
 651 0298 0CD08DE2 		add	sp, sp, #12	@,,
 652              		.cfi_remember_state
 653              		.cfi_def_cfa_offset 36
 654              		@ sp needed	@
 655 029c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 656              	.LVL30:
 657              	.L49:
 658              		.cfi_restore_state
 659              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 660              		.loc 1 184 19 view .LVU161
 661 02a0 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 662              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 663              		.loc 1 180 19 view .LVU162
 664 02a4 0070A0E3 		mov	r7, #0	@ w,
 665              	.LVL31:
 181:armwave.c     ****                 wave_word >>= 8;
 666              		.loc 1 181 17 is_stmt 1 view .LVU163
 182:armwave.c     **** 
 667              		.loc 1 182 17 view .LVU164
 668              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 669              		.loc 1 182 27 is_stmt 0 view .LVU165
 670 02a8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 671              	.LVL32:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 672              		.loc 1 184 17 is_stmt 1 view .LVU166
 673              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 674              		.loc 1 184 19 is_stmt 0 view .LVU167
 675 02ac 0500001A 		bne	.L50		@,
 676              	.L33:
 677              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 678              		.loc 1 180 32 view .LVU168
 679 02b0 017087E2 		add	r7, r7, #1	@ w, w,
 680              	.LVL33:
 681              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 682              		.loc 1 180 13 view .LVU169
 683 02b4 040057E3 		cmp	r7, #4	@ w,
 684 02b8 F3FFFF0A 		beq	.L32		@,
 181:armwave.c     ****                 wave_word >>= 8;
 685              		.loc 1 181 17 is_stmt 1 view .LVU170
 686              	.LVL34:
 182:armwave.c     **** 
 687              		.loc 1 182 17 view .LVU171
 688              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 689              		.loc 1 184 19 is_stmt 0 view .LVU172
 690 02bc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 691              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 692              		.loc 1 182 27 view .LVU173
 693 02c0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 694              	.LVL35:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 695              		.loc 1 184 17 is_stmt 1 view .LVU174
 696              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 184 19 is_stmt 0 view .LVU175
 698 02c4 F9FFFF0A 		beq	.L33		@,
 699              	.L50:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 700              		.loc 1 185 21 is_stmt 1 view .LVU176
 701              	.LVL36:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 702              		.loc 1 186 21 view .LVU177
 187:armwave.c     **** 
 703              		.loc 1 187 21 view .LVU178
 189:armwave.c     ****                     g = MIN(gg, 255);
 704              		.loc 1 189 21 view .LVU179
 190:armwave.c     ****                     b = MIN(bb, 255);
 705              		.loc 1 190 21 view .LVU180
 191:armwave.c     **** 
 706              		.loc 1 191 21 view .LVU181
 194:armwave.c     **** 
 707              		.loc 1 194 21 view .LVU182
 708              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 709              		.loc 1 187 55 is_stmt 0 view .LVU183
 710 02c8 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 711 02cc 075081E0 		add	r5, r1, r7	@ _120, n, w
 712 02d0 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 713              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 209 32 view .LVU184
 715 02d4 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 716              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 717              		.loc 1 210 41 view .LVU185
 718 02d8 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 719              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 720              		.loc 1 209 40 view .LVU186
 721 02dc 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 722              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 723              		.loc 1 210 41 view .LVU187
 724 02e0 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 725              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 726              		.loc 1 186 55 view .LVU188
 727 02e4 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 728              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 729              		.loc 1 187 24 view .LVU189
 730 02e8 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 731              	.LVL37:
 732              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 733              		.loc 1 209 40 view .LVU190
 734 02ec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 735              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 736              		.loc 1 210 46 view .LVU191
 737 02f0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 738              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 739              		.loc 1 186 55 view .LVU192
 740 02f4 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 741              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 742              		.loc 1 185 55 view .LVU193
 743 02f8 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 744              	.LVL38:
 745              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 746              		.loc 1 191 25 view .LVU194
 747 02fc FF005AE3 		cmp	r10, #255	@ bb,
 748              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 749              		.loc 1 186 24 view .LVU195
 750 0300 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 751              	.LVL39:
 752              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 753              		.loc 1 209 40 view .LVU196
 754 0304 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 755              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 756              		.loc 1 210 46 view .LVU197
 757 0308 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 758              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 759              		.loc 1 185 24 view .LVU198
 760 030c 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 761              	.LVL40:
 762              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 763              		.loc 1 191 25 view .LVU199
 764 0310 FFA0A0A3 		movge	r10, #255	@ bb,
 765              	.LVL41:
 766              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 767              		.loc 1 190 25 view .LVU200
 768 0314 FF0054E3 		cmp	r4, #255	@ gg,
 769 0318 FF40A0A3 		movge	r4, #255	@ gg,
 770              	.LVL42:
 771              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 772              		.loc 1 189 25 view .LVU201
 773 031c FF005CE3 		cmp	ip, #255	@ rr,
 774              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 775              		.loc 1 194 56 view .LVU202
 776 0320 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 777              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 209 24 view .LVU203
 779 0324 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 780              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 781              		.loc 1 189 25 view .LVU204
 782 0328 FFC0A0A3 		movge	ip, #255	@ rr,
 783              	.LVL43:
 784              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 785              		.loc 1 194 44 view .LVU205
 786 032c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 787 0330 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 788              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 789              		.loc 1 194 56 view .LVU206
 790 0334 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 791              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 792              		.loc 1 194 51 view .LVU207
 793 0338 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 794              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 795              		.loc 1 194 62 view .LVU208
 796 033c 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 797 0340 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 798              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 209 24 view .LVU209
 800 0344 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 801              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 802              		.loc 1 210 24 view .LVU210
 803 0348 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 804              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 805              		.loc 1 194 26 view .LVU211
 806 034c FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 807              	.LVL44:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 808              		.loc 1 208 21 is_stmt 1 view .LVU212
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 809              		.loc 1 209 21 view .LVU213
 210:armwave.c     ****                     xx = (nsub >> 8);
 810              		.loc 1 210 21 view .LVU214
 811              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 812              		.loc 1 211 32 is_stmt 0 view .LVU215
 813 0350 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 814              	.LVL45:
 815              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 816              		.loc 1 210 24 view .LVU216
 817 0354 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 818              	.LVL46:
 211:armwave.c     **** 
 819              		.loc 1 211 21 is_stmt 1 view .LVU217
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 820              		.loc 1 213 21 view .LVU218
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 821              		.loc 1 213 21 is_stmt 0 view .LVU219
 822 0358 090052E1 		cmp	r2, r9	@ yy, ye
 823 035c D3FFFF2A 		bcs	.L33		@,
 824              	.LVL47:
 825              	.L34:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 826              		.loc 1 214 25 is_stmt 1 discriminator 3 view .LVU220
 215:armwave.c     ****                     }
 827              		.loc 1 215 25 discriminator 3 view .LVU221
 828              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 829              		.loc 1 214 43 is_stmt 0 discriminator 3 view .LVU222
 830 0360 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 831              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 832              		.loc 1 215 43 discriminator 3 view .LVU223
 833 0364 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 834              	.LVL48:
 835              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 836              		.loc 1 213 42 discriminator 3 view .LVU224
 837 0368 012082E2 		add	r2, r2, #1	@ yy, yy,
 838              	.LVL49:
 839              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 840              		.loc 1 213 21 discriminator 3 view .LVU225
 841 036c 020059E1 		cmp	r9, r2	@ ye, yy
 842              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 843              		.loc 1 215 53 discriminator 3 view .LVU226
 844 0370 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 845              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 213 21 discriminator 3 view .LVU227
 847 0374 F9FFFF1A 		bne	.L34		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 848              		.loc 1 213 21 discriminator 3 view .LVU228
 849 0378 CCFFFFEA 		b	.L33		@
 850              	.LVL50:
 851              	.L48:
 168:armwave.c     **** 
 852              		.loc 1 168 5 is_stmt 1 discriminator 1 view .LVU229
 853 037c 10309FE5 		ldr	r3, .L51+4	@,
 854 0380 A820A0E3 		mov	r2, #168	@,
 855 0384 0C109FE5 		ldr	r1, .L51+8	@,
 856 0388 0C009FE5 		ldr	r0, .L51+12	@,
 857              	.LVL51:
 168:armwave.c     **** 
 858              		.loc 1 168 5 is_stmt 0 discriminator 1 view .LVU230
 859 038c FEFFFFEB 		bl	__assert_fail		@
 860              	.LVL52:
 861              	.L52:
 168:armwave.c     **** 
 862              		.loc 1 168 5 discriminator 1 view .LVU231
 863              		.align	2
 864              	.L51:
 865 0390 00000000 		.word	g_armwave_state
 866 0394 00000000 		.word	.LANCHOR0
 867 0398 20000000 		.word	.LC2
 868 039c 2C000000 		.word	.LC3
 869              		.cfi_endproc
 870              	.LFE60:
 872              		.align	2
 873              		.global	armwave_setup_render
 874              		.syntax unified
 875              		.arm
 876              		.fpu vfp
 878              	armwave_setup_render:
 879              	.LVL53:
 880              	.LFB61:
 222:armwave.c     **** 
 223:armwave.c     **** /*
 224:armwave.c     ****  * Setup the renderer with passed parameters.
 225:armwave.c     ****  */
 226:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 227:armwave.c     **** {
 881              		.loc 1 227 1 is_stmt 1 view -0
 882              		.cfi_startproc
 883              		@ args = 12, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 228:armwave.c     ****     uint32_t length, xx;
 885              		.loc 1 228 5 view .LVU233
 229:armwave.c     ****     float points_per_pixel;
 886              		.loc 1 229 5 view .LVU234
 230:armwave.c     **** 
 231:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 887              		.loc 1 231 5 view .LVU235
 888              	@ armwave.c:227: {
 227:armwave.c     ****     uint32_t length, xx;
 889              		.loc 1 227 1 is_stmt 0 view .LVU236
 890 03a0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 891              		.cfi_def_cfa_offset 28
 892              		.cfi_offset 4, -28
 893              		.cfi_offset 5, -24
 894              		.cfi_offset 6, -20
 895              		.cfi_offset 7, -16
 896              		.cfi_offset 8, -12
 897              		.cfi_offset 9, -8
 898              		.cfi_offset 14, -4
 899 03a4 028B2DED 		vpush.64	{d8}	@
 900              		.cfi_def_cfa_offset 36
 901              		.cfi_offset 80, -36
 902              		.cfi_offset 81, -32
 903 03a8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 904 03ac 0150A0E1 		mov	r5, r1	@ end_point, end_point
 905 03b0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 906 03b4 14D04DE2 		sub	sp, sp, #20	@,,
 907              		.cfi_def_cfa_offset 56
 908              	@ armwave.c:227: {
 227:armwave.c     ****     uint32_t length, xx;
 909              		.loc 1 227 1 view .LVU237
 910 03b8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 911 03bc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 912 03c0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 913              	@ armwave.c:231:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 914              		.loc 1 231 5 view .LVU238
 915 03c4 00308DE5 		str	r3, [sp]	@ wave_stride,
 916 03c8 F460CDE1 		strd	r6, [sp, #4]	@,,
 917 03cc 0230A0E1 		mov	r3, r2	@, waves_max
 918              	.LVL54:
 919              		.loc 1 231 5 view .LVU239
 920 03d0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 921 03d4 0120A0E1 		mov	r2, r1	@, end_point
 922              	.LVL55:
 923              		.loc 1 231 5 view .LVU240
 924 03d8 0010A0E1 		mov	r1, r0	@, start_point
 925              	.LVL56:
 926              		.loc 1 231 5 view .LVU241
 927 03dc CC019FE5 		ldr	r0, .L67+12	@,
 928              	.LVL57:
 929              		.loc 1 231 5 view .LVU242
 930 03e0 FEFFFFEB 		bl	printf		@
 931              	.LVL58:
 232:armwave.c     **** 
 233:armwave.c     ****     // TODO these asserts should instead raise PyExc
 234:armwave.c     ****     assert(start_point < end_point);
 932              		.loc 1 234 5 is_stmt 1 view .LVU243
 933 03e4 050054E1 		cmp	r4, r5	@ start_point, end_point
 934 03e8 5E00002A 		bcs	.L64		@,
 235:armwave.c     **** 
 236:armwave.c     ****     /*
 237:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 238:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 239:armwave.c     **** 
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 935              		.loc 1 256 5 view .LVU244
 936              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 264:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 937              		.loc 1 267 45 is_stmt 0 view .LVU245
 938 03ec 045045E0 		sub	r5, r5, r4	@ _12, end_point, start_point
 939              	.LVL59:
 940              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     //g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 << AM_XCOORD_MULT
 271:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 272:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 941              		.loc 1 272 46 view .LVU246
 942 03f0 6B6ADFED 		vldr.32	s13, .L67	@ tmp193,
 943              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 944              		.loc 1 272 87 view .LVU247
 945 03f4 905A07EE 		vmov	s15, r5	@ int	@ _12, _12
 946              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 947              		.loc 1 257 49 view .LVU248
 948 03f8 6A6A9FED 		vldr.32	s12, .L67+4	@ tmp174,
 949              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 950              		.loc 1 256 29 view .LVU249
 951 03fc B0419FE5 		ldr	r4, .L67+16	@ tmp238,
 952              	.LVL60:
 953              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 954              		.loc 1 262 42 view .LVU250
 955 0400 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 956              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 957              		.loc 1 272 87 view .LVU251
 958 0404 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp190, _12
 959              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 960              		.loc 1 257 49 view .LVU252
 961 0408 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 962              	@ armwave.c:264:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 963              		.loc 1 264 68 view .LVU253
 964 040c 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 965              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 966              		.loc 1 263 37 view .LVU254
 967 0410 012CA0E3 		mov	r2, #256	@ tmp184,
 968              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 969              		.loc 1 262 26 view .LVU255
 970 0414 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 971              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 972              		.loc 1 257 49 view .LVU256
 973 0418 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 974              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 975              		.loc 1 272 87 view .LVU257
 976 041c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 977              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 273:armwave.c     **** 
 274:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 978              		.loc 1 274 5 view .LVU258
 979 0420 0310A0E1 		mov	r1, r3	@, _10
 980              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 981              		.loc 1 263 37 view .LVU259
 982 0424 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 983              	@ armwave.c:264:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 984              		.loc 1 264 34 view .LVU260
 985 0428 503084E5 		str	r3, [r4, #80]	@ _10, g_armwave_state.ch_buff_size
 986              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 987              		.loc 1 272 87 view .LVU261
 988 042c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp189, target_width
 989              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 990              		.loc 1 274 5 view .LVU262
 991 0430 80019FE5 		ldr	r0, .L67+20	@,
 992              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 993              		.loc 1 256 29 view .LVU263
 994 0434 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 995              		.loc 1 257 5 is_stmt 1 view .LVU264
 996              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 997              		.loc 1 259 33 is_stmt 0 view .LVU265
 998 0438 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 999              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1000              		.loc 1 260 31 view .LVU266
 1001 043c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1002              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1003              		.loc 1 261 27 view .LVU267
 1004 0440 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1005              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1006              		.loc 1 266 35 view .LVU268
 1007 0444 F865C4E1 		strd	r6, [r4, #88]	@, tmp238,
 1008              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1009              		.loc 1 267 33 view .LVU269
 1010 0448 4C5084E5 		str	r5, [r4, #76]	@ _12, g_armwave_state.wave_length
 1011              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 1012              		.loc 1 272 87 view .LVU270
 1013 044c 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp191, tmp189, tmp190
 1014              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1015              		.loc 1 257 49 view .LVU271
 1016 0450 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1017              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 1018              		.loc 1 272 46 view .LVU272
 1019 0454 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp192, tmp191, tmp193
 1020              	@ armwave.c:272:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 272:armwave.c     **** 
 1021              		.loc 1 272 118 view .LVU273
 1022 0458 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp194, tmp192, tmp193
 1023              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1024              		.loc 1 258 30 view .LVU274
 1025 045c C76AFDEE 		vcvt.s32.f32	s13, s14	@ tmp177, _3
 1026              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1027              		.loc 1 271 42 view .LVU275
 1028 0460 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp194
 1029              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1030              		.loc 1 257 33 view .LVU276
 1031 0464 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1032              		.loc 1 258 5 is_stmt 1 view .LVU277
 1033              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1034              		.loc 1 258 30 is_stmt 0 view .LVU278
 1035 0468 0C6AC4ED 		vstr.32	s13, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1036              		.loc 1 259 5 is_stmt 1 view .LVU279
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1037              		.loc 1 260 5 view .LVU280
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1038              		.loc 1 261 5 view .LVU281
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1039              		.loc 1 262 5 view .LVU282
 263:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1040              		.loc 1 263 5 view .LVU283
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1041              		.loc 1 264 5 view .LVU284
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1042              		.loc 1 265 5 view .LVU285
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1043              		.loc 1 266 5 view .LVU286
 267:armwave.c     **** 
 1044              		.loc 1 267 5 view .LVU287
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1045              		.loc 1 271 5 view .LVU288
 1046              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1047              		.loc 1 271 42 is_stmt 0 view .LVU289
 1048 046c 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1049              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1050              		.loc 1 274 5 view .LVU290
 1051 0470 903A17EE 		vmov	r3, s15	@ int	@, _19
 1052              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1053              		.loc 1 271 42 view .LVU291
 1054 0474 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1055              		.loc 1 274 5 is_stmt 1 view .LVU292
 1056 0478 0C20A0E1 		mov	r2, ip	@, tmp3
 1057 047c FEFFFFEB 		bl	printf		@
 1058              	.LVL61:
 275:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 276:armwave.c     **** 
 277:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 278:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 279:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1059              		.loc 1 280 5 view .LVU293
 1060              	@ armwave.c:282:     if(g_armwave_state.ch1_buffer != NULL)
 281:armwave.c     **** 
 282:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1061              		.loc 1 282 23 is_stmt 0 view .LVU294
 1062 0480 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1063              	@ armwave.c:280:     g_armwave_state.slice_height = 64;  
 280:armwave.c     **** 
 1064              		.loc 1 280 34 view .LVU295
 1065 0484 4030A0E3 		mov	r3, #64	@ tmp199,
 1066              	@ armwave.c:282:     if(g_armwave_state.ch1_buffer != NULL)
 1067              		.loc 1 282 7 view .LVU296
 1068 0488 000050E3 		cmp	r0, #0	@ _20,
 1069              	@ armwave.c:280:     g_armwave_state.slice_height = 64;  
 280:armwave.c     **** 
 1070              		.loc 1 280 34 view .LVU297
 1071 048c 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1072              		.loc 1 282 5 is_stmt 1 view .LVU298
 1073              	@ armwave.c:282:     if(g_armwave_state.ch1_buffer != NULL)
 1074              		.loc 1 282 7 is_stmt 0 view .LVU299
 1075 0490 0000000A 		beq	.L55		@,
 283:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1076              		.loc 1 283 9 is_stmt 1 view .LVU300
 1077 0494 FEFFFFEB 		bl	free		@
 1078              	.LVL62:
 1079              	.L55:
 284:armwave.c     **** 
 285:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1080              		.loc 1 285 5 view .LVU301
 1081              	@ armwave.c:285:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1082              		.loc 1 285 34 is_stmt 0 view .LVU302
 1083 0498 0110A0E3 		mov	r1, #1	@,
 1084 049c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1085 04a0 FEFFFFEB 		bl	calloc		@
 1086              	.LVL63:
 1087              	@ armwave.c:287:     assert(g_armwave_state.ch1_buffer != NULL);
 286:armwave.c     **** 
 287:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1088              		.loc 1 287 5 view .LVU303
 1089 04a4 000050E3 		cmp	r0, #0	@ _23,
 1090              	@ armwave.c:285:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 285:armwave.c     **** 
 1091              		.loc 1 285 34 view .LVU304
 1092 04a8 0070A0E1 		mov	r7, r0	@ _23,
 1093              	@ armwave.c:285:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 285:armwave.c     **** 
 1094              		.loc 1 285 32 view .LVU305
 1095 04ac 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1096              		.loc 1 287 5 is_stmt 1 view .LVU306
 1097 04b0 3600000A 		beq	.L65		@,
 288:armwave.c     **** 
 289:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 290:armwave.c     ****     length = end_point - start_point;
 1098              		.loc 1 290 5 view .LVU307
 1099              	.LVL64:
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1100              		.loc 1 291 5 view .LVU308
 1101              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 1102              		.loc 1 291 34 is_stmt 0 view .LVU309
 1103 04b4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1104              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 1105              		.loc 1 291 22 view .LVU310
 1106 04b8 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 1107              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1108              		.loc 1 292 60 view .LVU311
 1109 04bc 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp248, g_armwave_state.slice_height
 1110              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 293:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1111              		.loc 1 293 40 view .LVU312
 1112 04c0 8500A0E1 		lsl	r0, r5, #1	@, _12,
 1113              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1114              		.loc 1 291 34 view .LVU313
 1115 04c4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp211, target_width
 1116              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1117              		.loc 1 291 22 view .LVU314
 1118 04c8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp210, _12
 1119              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1120              		.loc 1 292 60 view .LVU315
 1121 04cc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp214, tmp248
 1122              	@ armwave.c:291:     points_per_pixel = length / ((float)(target_width));
 291:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1123              		.loc 1 291 22 view .LVU316
 1124 04d0 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp210, tmp211
 1125              	.LVL65:
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1126              		.loc 1 292 5 is_stmt 1 view .LVU317
 1127              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1128              		.loc 1 292 60 is_stmt 0 view .LVU318
 1129 04d4 087A67EE 		vmul.f32	s15, s14, s16	@ tmp216, tmp214, points_per_pixel
 1130              	@ armwave.c:292:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 292:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1131              		.loc 1 292 41 view .LVU319
 1132 04d8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp217, tmp216
 1133 04dc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp217, g_armwave_state.slice_record_height
 1134              		.loc 1 293 5 is_stmt 1 view .LVU320
 1135              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1136              		.loc 1 293 40 is_stmt 0 view .LVU321
 1137 04e0 FEFFFFEB 		bl	malloc		@
 1138              	.LVL66:
 1139              	@ armwave.c:295:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 294:armwave.c     **** 
 295:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1140              		.loc 1 295 5 view .LVU322
 1141 04e4 000050E3 		cmp	r0, #0	@ _31,
 1142              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 293:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1143              		.loc 1 293 40 view .LVU323
 1144 04e8 0060A0E1 		mov	r6, r0	@ _31,
 1145              	@ armwave.c:293:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 293:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1146              		.loc 1 293 38 view .LVU324
 1147 04ec 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1148              		.loc 1 295 5 is_stmt 1 view .LVU325
 1149 04f0 2100000A 		beq	.L66		@,
 1150              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 296:armwave.c     **** 
 297:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 298:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1151              		.loc 1 298 54 is_stmt 0 view .LVU326
 1152 04f4 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp226,
 1153 04f8 02C040E2 		sub	ip, r0, #2	@ ivtmp.68, _31,
 1154              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1155              		.loc 1 297 12 view .LVU327
 1156 04fc 0030A0E3 		mov	r3, #0	@ xx,
 1157              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1158              		.loc 1 298 54 view .LVU328
 1159 0500 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp226, points_per_pixel
 1160              	.L58:
 1161              	.LVL67:
 1162              		.loc 1 298 9 is_stmt 1 discriminator 3 view .LVU329
 1163              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1164              		.loc 1 298 74 is_stmt 0 discriminator 3 view .LVU330
 1165 0504 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1166              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1167              		.loc 1 297 32 discriminator 3 view .LVU331
 1168 0508 013083E2 		add	r3, r3, #1	@ xx, xx,
 1169              	.LVL68:
 1170              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1171              		.loc 1 297 5 discriminator 3 view .LVU332
 1172 050c 030055E1 		cmp	r5, r3	@ _12, xx
 1173              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1174              		.loc 1 298 74 discriminator 3 view .LVU333
 1175 0510 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp227, xx
 1176 0514 877A67EE 		vmul.f32	s15, s15, s14	@ tmp228, tmp227, _32
 1177              	@ armwave.c:298:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1178              		.loc 1 298 46 discriminator 3 view .LVU334
 1179 0518 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp229, tmp228
 1180 051c 902A17EE 		vmov	r2, s15	@ int	@ tmp229, tmp229
 1181 0520 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp229, MEM[base: _101, offset: 0B]
 1182              	@ armwave.c:297:     for(xx = 0; xx < length; xx++) {
 297:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1183              		.loc 1 297 5 discriminator 3 view .LVU335
 1184 0524 F6FFFF1A 		bne	.L58		@,
 299:armwave.c     **** 
 300:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 301:armwave.c     ****     }
 302:armwave.c     **** 
 303:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1185              		.loc 1 303 5 is_stmt 1 view .LVU336
 1186              	@ armwave.c:303:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1187              		.loc 1 303 34 is_stmt 0 view .LVU337
 1188 0528 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1189 052c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1190 0530 FEFFFFEB 		bl	malloc		@
 1191              	.LVL69:
 1192              	@ armwave.c:305:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 304:armwave.c     **** 
 305:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1193              		.loc 1 305 5 view .LVU338
 1194 0534 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1195 0538 0620A0E1 		mov	r2, r6	@, _31
 1196 053c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1197 0540 0710A0E1 		mov	r1, r7	@, _23
 1198              	@ armwave.c:303:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 303:armwave.c     **** 
 1199              		.loc 1 303 34 view .LVU339
 1200 0544 00C0A0E1 		mov	ip, r0	@ tmp233,
 1201              	@ armwave.c:305:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1202              		.loc 1 305 5 view .LVU340
 1203 0548 0030A0E1 		mov	r3, r0	@, tmp233
 1204              	@ armwave.c:303:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 303:armwave.c     **** 
 1205              		.loc 1 303 32 view .LVU341
 1206 054c 68C084E5 		str	ip, [r4, #104]	@ tmp233, g_armwave_state.out_pixbuf
 1207              		.loc 1 305 5 is_stmt 1 view .LVU342
 1208 0550 64009FE5 		ldr	r0, .L67+24	@,
 1209 0554 FEFFFFEB 		bl	printf		@
 1210              	.LVL70:
 306:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 307:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 308:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 309:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 310:armwave.c     **** 
 311:armwave.c     ****     malloc_stats();
 1211              		.loc 1 311 5 view .LVU343
 1212              	@ armwave.c:312: }
 312:armwave.c     **** }
 1213              		.loc 1 312 1 is_stmt 0 view .LVU344
 1214 0558 14D08DE2 		add	sp, sp, #20	@,,
 1215              		.cfi_remember_state
 1216              		.cfi_def_cfa_offset 36
 1217              		@ sp needed	@
 1218 055c 028BBDEC 		vldm	sp!, {d8}	@
 1219              		.cfi_restore 80
 1220              		.cfi_restore 81
 1221              		.cfi_def_cfa_offset 28
 1222              	.LVL71:
 1223              		.loc 1 312 1 view .LVU345
 1224 0560 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1225              		.cfi_restore 14
 1226              		.cfi_restore 9
 1227              		.cfi_restore 8
 1228              		.cfi_restore 7
 1229              		.cfi_restore 6
 1230              		.cfi_restore 5
 1231              		.cfi_restore 4
 1232              		.cfi_def_cfa_offset 0
 1233              	.LVL72:
 1234              	@ armwave.c:311:     malloc_stats();
 311:armwave.c     **** }
 1235              		.loc 1 311 5 view .LVU346
 1236 0564 FEFFFFEA 		b	malloc_stats		@
 1237              	.LVL73:
 1238              	.L64:
 1239              		.cfi_restore_state
 234:armwave.c     **** 
 1240              		.loc 1 234 5 is_stmt 1 discriminator 1 view .LVU347
 1241 0568 50309FE5 		ldr	r3, .L67+28	@,
 1242 056c EA20A0E3 		mov	r2, #234	@,
 1243 0570 4C109FE5 		ldr	r1, .L67+32	@,
 1244 0574 4C009FE5 		ldr	r0, .L67+36	@,
 1245 0578 FEFFFFEB 		bl	__assert_fail		@
 1246              	.LVL74:
 1247              	.L66:
 295:armwave.c     **** 
 1248              		.loc 1 295 5 discriminator 1 view .LVU348
 1249 057c 3C309FE5 		ldr	r3, .L67+28	@,
 1250 0580 44209FE5 		ldr	r2, .L67+40	@,
 1251 0584 38109FE5 		ldr	r1, .L67+32	@,
 1252 0588 40009FE5 		ldr	r0, .L67+44	@,
 1253 058c FEFFFFEB 		bl	__assert_fail		@
 1254              	.LVL75:
 1255              	.L65:
 287:armwave.c     **** 
 1256              		.loc 1 287 5 discriminator 1 view .LVU349
 1257 0590 28309FE5 		ldr	r3, .L67+28	@,
 1258 0594 38209FE5 		ldr	r2, .L67+48	@,
 1259 0598 24109FE5 		ldr	r1, .L67+32	@,
 1260 059c 34009FE5 		ldr	r0, .L67+52	@,
 1261 05a0 FEFFFFEB 		bl	__assert_fail		@
 1262              	.LVL76:
 1263              	.L68:
 1264              		.align	2
 1265              	.L67:
 1266 05a4 00008043 		.word	1132462080
 1267 05a8 00007F43 		.word	1132396544
 1268 05ac 0000803F 		.word	1065353216
 1269 05b0 40000000 		.word	.LC4
 1270 05b4 00000000 		.word	g_armwave_state
 1271 05b8 84000000 		.word	.LC6
 1272 05bc 08010000 		.word	.LC9
 1273 05c0 1C000000 		.word	.LANCHOR0+28
 1274 05c4 20000000 		.word	.LC2
 1275 05c8 6C000000 		.word	.LC5
 1276 05cc 27010000 		.word	295
 1277 05d0 DC000000 		.word	.LC8
 1278 05d4 1F010000 		.word	287
 1279 05d8 B8000000 		.word	.LC7
 1280              		.cfi_endproc
 1281              	.LFE61:
 1283              		.align	2
 1284              		.global	armwave_set_wave_pointer
 1285              		.syntax unified
 1286              		.arm
 1287              		.fpu vfp
 1289              	armwave_set_wave_pointer:
 1290              	.LVL77:
 1291              	.LFB62:
 313:armwave.c     **** 
 314:armwave.c     **** /*
 315:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 316:armwave.c     ****  * in the future.
 317:armwave.c     ****  */
 318:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 319:armwave.c     **** {
 1292              		.loc 1 319 1 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1296              		.loc 1 320 5 view .LVU351
 1297 05dc 000050E3 		cmp	r0, #0	@ wave_buffer
 1298              		.loc 1 320 5 is_stmt 0 view .LVU352
 1299 05e0 0200000A 		beq	.L74		@,
 321:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1300              		.loc 1 321 5 is_stmt 1 view .LVU353
 1301              	@ armwave.c:321:     g_armwave_state.wave_buffer = wave_buffer;
 1302              		.loc 1 321 33 is_stmt 0 view .LVU354
 1303 05e4 1C309FE5 		ldr	r3, .L75	@ tmp115,
 1304 05e8 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1305 05ec 1EFF2FE1 		bx	lr	@
 1306              	.L74:
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1307              		.loc 1 320 5 is_stmt 1 discriminator 1 view .LVU355
 1308              	@ armwave.c:319: {
 319:armwave.c     ****     assert(wave_buffer != NULL);
 1309              		.loc 1 319 1 is_stmt 0 discriminator 1 view .LVU356
 1310 05f0 10402DE9 		push	{r4, lr}	@
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 4, -8
 1313              		.cfi_offset 14, -4
 1314              	@ armwave.c:320:     assert(wave_buffer != NULL);
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1315              		.loc 1 320 5 discriminator 1 view .LVU357
 1316 05f4 052DA0E3 		mov	r2, #320	@,
 1317 05f8 0C309FE5 		ldr	r3, .L75+4	@,
 1318 05fc 0C109FE5 		ldr	r1, .L75+8	@,
 1319 0600 0C009FE5 		ldr	r0, .L75+12	@,
 1320              	.LVL78:
 320:armwave.c     ****     assert(wave_buffer != NULL);
 1321              		.loc 1 320 5 discriminator 1 view .LVU358
 1322 0604 FEFFFFEB 		bl	__assert_fail		@
 1323              	.LVL79:
 1324              	.L76:
 1325              		.align	2
 1326              	.L75:
 1327 0608 00000000 		.word	g_armwave_state
 1328 060c 34000000 		.word	.LANCHOR0+52
 1329 0610 20000000 		.word	.LC2
 1330 0614 2C010000 		.word	.LC10
 1331              		.cfi_endproc
 1332              	.LFE62:
 1334              		.align	2
 1335              		.global	armwave_set_wave_pointer_as_testbuf
 1336              		.syntax unified
 1337              		.arm
 1338              		.fpu vfp
 1340              	armwave_set_wave_pointer_as_testbuf:
 1341              	.LVL80:
 1342              	.LFB63:
 322:armwave.c     **** }
 323:armwave.c     **** 
 324:armwave.c     **** /*
 325:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 326:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 329:armwave.c     **** {
 1343              		.loc 1 329 1 is_stmt 1 view -0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 0
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              		@ link register save eliminated.
 330:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1348              		.loc 1 330 5 view .LVU360
 1349              	@ armwave.c:330:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1350              		.loc 1 330 29 is_stmt 0 view .LVU361
 1351 0618 24309FE5 		ldr	r3, .L80	@ tmp117,
 1352              	@ armwave.c:330:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1353              		.loc 1 330 7 view .LVU362
 1354 061c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1355 0620 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1356 0624 0400003A 		bcc	.L79		@,
 331:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 332:armwave.c     ****         return;
 333:armwave.c     ****     }
 334:armwave.c     **** 
 335:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1357              		.loc 1 335 5 is_stmt 1 view .LVU363
 1358              	@ armwave.c:335:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1359              		.loc 1 335 111 is_stmt 0 view .LVU364
 1360 0628 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1361              	@ armwave.c:335:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1362              		.loc 1 335 68 view .LVU365
 1363 062c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1364 0630 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1365              	.LVL81:
 1366              	@ armwave.c:335:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1367              		.loc 1 335 33 view .LVU366
 1368 0634 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1369              	@ armwave.c:336: }
 336:armwave.c     **** }
 1370              		.loc 1 336 1 view .LVU367
 1371 0638 1EFF2FE1 		bx	lr	@
 1372              	.LVL82:
 1373              	.L79:
 331:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1374              		.loc 1 331 9 is_stmt 1 view .LVU368
 1375 063c 04009FE5 		ldr	r0, .L80+4	@,
 1376              	.LVL83:
 331:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1377              		.loc 1 331 9 is_stmt 0 view .LVU369
 1378 0640 FEFFFFEA 		b	puts		@
 1379              	.LVL84:
 1380              	.L81:
 1381              		.align	2
 1382              	.L80:
 1383 0644 00000000 		.word	g_armwave_state
 1384 0648 40010000 		.word	.LC11
 1385              		.cfi_endproc
 1386              	.LFE63:
 1388              		.align	2
 1389              		.global	armwave_set_wave_pointer_u32
 1390              		.syntax unified
 1391              		.arm
 1392              		.fpu vfp
 1394              	armwave_set_wave_pointer_u32:
 1395              	.LVL85:
 1396              	.LFB64:
 337:armwave.c     **** 
 338:armwave.c     **** /*
 339:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 340:armwave.c     ****  * disjointed buffers in the future.
 341:armwave.c     ****  */
 342:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 343:armwave.c     **** {
 1397              		.loc 1 343 1 is_stmt 1 view -0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 0
 1400              		@ frame_needed = 0, uses_anonymous_args = 0
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1401              		.loc 1 344 5 view .LVU371
 1402 064c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1403              		.loc 1 344 5 is_stmt 0 view .LVU372
 1404 0650 0200000A 		beq	.L87		@,
 345:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1405              		.loc 1 345 5 is_stmt 1 view .LVU373
 1406              	@ armwave.c:345:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1407              		.loc 1 345 33 is_stmt 0 view .LVU374
 1408 0654 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1409 0658 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1410 065c 1EFF2FE1 		bx	lr	@
 1411              	.L87:
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1412              		.loc 1 344 5 is_stmt 1 discriminator 1 view .LVU375
 1413              	@ armwave.c:343: {
 343:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1414              		.loc 1 343 1 is_stmt 0 discriminator 1 view .LVU376
 1415 0660 10402DE9 		push	{r4, lr}	@
 1416              		.cfi_def_cfa_offset 8
 1417              		.cfi_offset 4, -8
 1418              		.cfi_offset 14, -4
 1419              	@ armwave.c:344:     assert(wave_buffer_ptr != 0);
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1420              		.loc 1 344 5 discriminator 1 view .LVU377
 1421 0664 562FA0E3 		mov	r2, #344	@,
 1422 0668 0C309FE5 		ldr	r3, .L88+4	@,
 1423 066c 0C109FE5 		ldr	r1, .L88+8	@,
 1424 0670 0C009FE5 		ldr	r0, .L88+12	@,
 1425              	.LVL86:
 344:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1426              		.loc 1 344 5 discriminator 1 view .LVU378
 1427 0674 FEFFFFEB 		bl	__assert_fail		@
 1428              	.LVL87:
 1429              	.L89:
 1430              		.align	2
 1431              	.L88:
 1432 0678 00000000 		.word	g_armwave_state
 1433 067c 50000000 		.word	.LANCHOR0+80
 1434 0680 20000000 		.word	.LC2
 1435 0684 7C010000 		.word	.LC12
 1436              		.cfi_endproc
 1437              	.LFE64:
 1439              		.align	2
 1440              		.global	armwave_clear_buffer
 1441              		.syntax unified
 1442              		.arm
 1443              		.fpu vfp
 1445              	armwave_clear_buffer:
 1446              	.LVL88:
 1447              	.LFB65:
 346:armwave.c     **** }
 347:armwave.c     **** 
 348:armwave.c     **** /*
 349:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 350:armwave.c     ****  */
 351:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 352:armwave.c     **** {
 1448              		.loc 1 352 1 is_stmt 1 view -0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 0
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452              		@ link register save eliminated.
 353:armwave.c     ****     // Flags ignored, only one buffer cleared
 354:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1453              		.loc 1 354 5 view .LVU380
 1454              	@ armwave.c:354:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1455              		.loc 1 354 58 is_stmt 0 view .LVU381
 1456 0688 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1457              	@ armwave.c:354:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1458              		.loc 1 354 5 view .LVU382
 1459 068c 0010A0E3 		mov	r1, #0	@,
 1460 0690 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1461 0694 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1462              	.LVL89:
 1463              		.loc 1 354 5 view .LVU383
 1464 0698 FEFFFFEA 		b	memset		@
 1465              	.LVL90:
 1466              	.L92:
 1467              		.align	2
 1468              	.L91:
 1469 069c 00000000 		.word	g_armwave_state
 1470              		.cfi_endproc
 1471              	.LFE65:
 1473              		.align	2
 1474              		.global	armwave_set_channel_colour
 1475              		.syntax unified
 1476              		.arm
 1477              		.fpu vfp
 1479              	armwave_set_channel_colour:
 1480              	.LVL91:
 1481              	.LFB66:
 355:armwave.c     **** }
 356:armwave.c     **** 
 357:armwave.c     **** /*
 358:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 359:armwave.c     ****  */
 360:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 361:armwave.c     **** {
 1482              		.loc 1 361 1 is_stmt 1 view -0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 362:armwave.c     ****     // Only 1ch supported for now
 363:armwave.c     ****     switch(ch) {
 1487              		.loc 1 363 5 view .LVU385
 1488 06a0 010050E3 		cmp	r0, #1	@ ch,
 364:armwave.c     ****         case 1:
 365:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1489              		.loc 1 365 13 view .LVU386
 1490              	@ armwave.c:365:             g_armwave_state.ch1_color.r = r;
 1491              		.loc 1 365 41 is_stmt 0 view .LVU387
 1492 06a4 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1493              	.LVL92:
 1494              		.loc 1 365 41 view .LVU388
 1495 06a8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 366:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1496              		.loc 1 366 13 is_stmt 1 view .LVU389
 1497              	@ armwave.c:366:             g_armwave_state.ch1_color.g = g;
 1498              		.loc 1 366 41 is_stmt 0 view .LVU390
 1499 06ac BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 367:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1500              		.loc 1 367 13 is_stmt 1 view .LVU391
 1501              	@ armwave.c:367:             g_armwave_state.ch1_color.b = b;
 1502              		.loc 1 367 41 is_stmt 0 view .LVU392
 1503 06b0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 368:armwave.c     ****             break;
 1504              		.loc 1 368 13 is_stmt 1 view .LVU393
 1505              	@ armwave.c:370: }
 369:armwave.c     ****     }
 370:armwave.c     **** }
 1506              		.loc 1 370 1 is_stmt 0 view .LVU394
 1507 06b4 1EFF2FE1 		bx	lr	@
 1508              	.L96:
 1509              		.align	2
 1510              	.L95:
 1511 06b8 00000000 		.word	g_armwave_state
 1512              		.cfi_endproc
 1513              	.LFE66:
 1515              		.align	2
 1516              		.global	armwave_dump_ppm_debug
 1517              		.syntax unified
 1518              		.arm
 1519              		.fpu vfp
 1521              	armwave_dump_ppm_debug:
 1522              	.LVL93:
 1523              	.LFB67:
 371:armwave.c     **** 
 372:armwave.c     **** /*
 373:armwave.c     ****  * Dump a ppm of a buffer to a file.
 374:armwave.c     ****  */
 375:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 376:armwave.c     **** {
 1524              		.loc 1 376 1 is_stmt 1 view -0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 377:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1528              		.loc 1 377 5 view .LVU396
 1529              	@ armwave.c:376: {
 376:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1530              		.loc 1 376 1 is_stmt 0 view .LVU397
 1531 06bc 0130A0E1 		mov	r3, r1	@ fn, fn
 1532 06c0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1533              		.cfi_def_cfa_offset 28
 1534              		.cfi_offset 4, -28
 1535              		.cfi_offset 5, -24
 1536              		.cfi_offset 6, -20
 1537              		.cfi_offset 7, -16
 1538              		.cfi_offset 8, -12
 1539              		.cfi_offset 9, -8
 1540              		.cfi_offset 14, -4
 1541 06c4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1542 06c8 0CD04DE2 		sub	sp, sp, #12	@,,
 1543              		.cfi_def_cfa_offset 40
 1544              	@ armwave.c:377:     FILE *fp = fopen(fn, "wb");
 1545              		.loc 1 377 16 view .LVU398
 1546 06cc C4109FE5 		ldr	r1, .L105	@,
 1547              	.LVL94:
 1548              		.loc 1 377 16 view .LVU399
 1549 06d0 0300A0E1 		mov	r0, r3	@, fn
 1550              	.LVL95:
 1551              		.loc 1 377 16 view .LVU400
 1552 06d4 FEFFFFEB 		bl	fopen64		@
 1553              	.LVL96:
 1554              	@ armwave.c:384:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 378:armwave.c     ****     uint32_t data;
 379:armwave.c     ****     int xx, yy;
 380:armwave.c     **** 
 381:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 382:armwave.c     **** 
 383:armwave.c     ****     fputs("P3\n", fp);
 384:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1555              		.loc 1 384 5 view .LVU401
 1556 06d8 BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1557              	@ armwave.c:383:     fputs("P3\n", fp);
 383:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1558              		.loc 1 383 5 view .LVU402
 1559 06dc 0320A0E3 		mov	r2, #3	@,
 1560 06e0 0110A0E3 		mov	r1, #1	@,
 1561              	@ armwave.c:377:     FILE *fp = fopen(fn, "wb");
 377:armwave.c     ****     uint32_t data;
 1562              		.loc 1 377 16 view .LVU403
 1563 06e4 0070A0E1 		mov	r7, r0	@ fp,
 1564              	.LVL97:
 378:armwave.c     ****     uint32_t data;
 1565              		.loc 1 378 5 is_stmt 1 view .LVU404
 379:armwave.c     **** 
 1566              		.loc 1 379 5 view .LVU405
 383:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1567              		.loc 1 383 5 view .LVU406
 1568 06e8 0030A0E1 		mov	r3, r0	@, fp
 1569 06ec AC009FE5 		ldr	r0, .L105+8	@,
 1570              	.LVL98:
 383:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1571              		.loc 1 383 5 is_stmt 0 view .LVU407
 1572 06f0 FEFFFFEB 		bl	fwrite		@
 1573              	.LVL99:
 1574              		.loc 1 384 5 is_stmt 1 view .LVU408
 1575 06f4 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1576 06f8 A4109FE5 		ldr	r1, .L105+12	@,
 1577 06fc 0700A0E1 		mov	r0, r7	@, fp
 1578 0700 FEFFFFEB 		bl	fprintf		@
 1579              	.LVL100:
 385:armwave.c     ****     fputs("255\n", fp);
 1580              		.loc 1 385 5 view .LVU409
 1581 0704 0420A0E3 		mov	r2, #4	@,
 1582 0708 0730A0E1 		mov	r3, r7	@, fp
 1583 070c 0110A0E3 		mov	r1, #1	@,
 1584 0710 90009FE5 		ldr	r0, .L105+16	@,
 1585 0714 FEFFFFEB 		bl	fwrite		@
 1586              	.LVL101:
 386:armwave.c     **** 
 387:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1587              		.loc 1 387 5 view .LVU410
 1588              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1589              		.loc 1 387 37 is_stmt 0 view .LVU411
 1590 0718 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1591              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1592              		.loc 1 387 5 view .LVU412
 1593 071c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1594 0720 180000DA 		ble	.L98		@,
 1595 0724 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1596              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 389:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 390:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 391:armwave.c     **** 
 392:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1597              		.loc 1 392 13 view .LVU413
 1598 0728 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1599              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 387:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1600              		.loc 1 387 12 view .LVU414
 1601 072c 0050A0E3 		mov	r5, #0	@ yy,
 1602              	.LVL102:
 1603              	.L99:
 1604              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1605              		.loc 1 388 9 view .LVU415
 1606 0730 000053E3 		cmp	r3, #0	@ _13,
 1607              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1608              		.loc 1 388 16 view .LVU416
 1609 0734 0040A0C3 		movgt	r4, #0	@ xx,
 1610              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1611              		.loc 1 388 9 view .LVU417
 1612 0738 0F0000DA 		ble	.L101		@,
 1613              	.LVL103:
 1614              	.L100:
 389:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1615              		.loc 1 389 13 is_stmt 1 discriminator 3 view .LVU418
 1616              	@ armwave.c:389:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 389:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1617              		.loc 1 389 29 is_stmt 0 discriminator 3 view .LVU419
 1618 073c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1619              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1620              		.loc 1 392 13 discriminator 3 view .LVU420
 1621 0740 0910A0E1 		mov	r1, r9	@, tmp152
 1622 0744 0700A0E1 		mov	r0, r7	@, fp
 1623              	@ armwave.c:389:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 389:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1624              		.loc 1 389 18 discriminator 3 view .LVU421
 1625 0748 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1626              	.LVL104:
 1627              		.loc 1 392 13 is_stmt 1 discriminator 3 view .LVU422
 1628              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1629              		.loc 1 388 58 is_stmt 0 discriminator 3 view .LVU423
 1630 074c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1631              	.LVL105:
 1632              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1633              		.loc 1 392 81 discriminator 3 view .LVU424
 1634 0750 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1635              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1636              		.loc 1 392 61 discriminator 3 view .LVU425
 1637 0754 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1638              	@ armwave.c:392:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1639              		.loc 1 392 13 discriminator 3 view .LVU426
 1640 0758 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1641 075c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1642 0760 00C08DE5 		str	ip, [sp]	@ tmp147,
 1643 0764 7220EFE6 		uxtb	r2, r2	@, data
 1644              	.LVL106:
 1645              		.loc 1 392 13 discriminator 3 view .LVU427
 1646 0768 FEFFFFEB 		bl	fprintf		@
 1647              	.LVL107:
 1648              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1649              		.loc 1 388 41 discriminator 3 view .LVU428
 1650 076c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1651              	@ armwave.c:388:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 388:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1652              		.loc 1 388 9 discriminator 3 view .LVU429
 1653 0770 040053E1 		cmp	r3, r4	@ _13, xx
 1654 0774 F0FFFFCA 		bgt	.L100		@,
 1655 0778 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1656              	.LVL108:
 1657              	.L101:
 1658              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 387:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1659              		.loc 1 387 55 discriminator 2 view .LVU430
 1660 077c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1661              	.LVL109:
 1662              	@ armwave.c:387:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 387:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1663              		.loc 1 387 5 discriminator 2 view .LVU431
 1664 0780 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1665 0784 E9FFFFBA 		blt	.L99		@,
 1666              	.LVL110:
 1667              	.L98:
 393:armwave.c     ****         }
 394:armwave.c     ****     }
 395:armwave.c     **** 
 396:armwave.c     ****     fclose(fp);
 1668              		.loc 1 396 5 is_stmt 1 view .LVU432
 1669 0788 0700A0E1 		mov	r0, r7	@, fp
 1670              	@ armwave.c:397: }
 397:armwave.c     **** }
 1671              		.loc 1 397 1 is_stmt 0 view .LVU433
 1672 078c 0CD08DE2 		add	sp, sp, #12	@,,
 1673              		.cfi_def_cfa_offset 28
 1674              		@ sp needed	@
 1675 0790 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1676              		.cfi_restore 14
 1677              		.cfi_restore 9
 1678              		.cfi_restore 8
 1679              		.cfi_restore 7
 1680              		.cfi_restore 6
 1681              		.cfi_restore 5
 1682              		.cfi_restore 4
 1683              		.cfi_def_cfa_offset 0
 1684              	.LVL111:
 1685              	@ armwave.c:396:     fclose(fp);
 396:armwave.c     **** }
 1686              		.loc 1 396 5 view .LVU434
 1687 0794 FEFFFFEA 		b	fclose		@
 1688              	.LVL112:
 1689              	.L106:
 396:armwave.c     **** }
 1690              		.loc 1 396 5 view .LVU435
 1691              		.align	2
 1692              	.L105:
 1693 0798 94010000 		.word	.LC13
 1694 079c 00000000 		.word	g_armwave_state
 1695 07a0 98010000 		.word	.LC14
 1696 07a4 9C010000 		.word	.LC15
 1697 07a8 A4010000 		.word	.LC16
 1698 07ac AC010000 		.word	.LC17
 1699              		.cfi_endproc
 1700              	.LFE67:
 1702              		.align	2
 1703              		.global	armwave_test_init
 1704              		.syntax unified
 1705              		.arm
 1706              		.fpu vfp
 1708              	armwave_test_init:
 1709              	.LVL113:
 1710              	.LFB68:
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Initialise some test functionry.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 403:armwave.c     **** {
 1711              		.loc 1 403 1 is_stmt 1 view -0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 404:armwave.c     ****     test_create_gamma();
 1715              		.loc 1 404 5 view .LVU437
 1716              	.LBB12:
 1717              	.LBI12:
  34:armwave.c     **** {
 1718              		.loc 1 34 6 view .LVU438
  34:armwave.c     **** {
 1719              		.loc 1 34 6 is_stmt 0 view .LVU439
 1720              	.LBE12:
 1721              	@ armwave.c:403: {
 403:armwave.c     ****     test_create_gamma();
 1722              		.loc 1 403 1 view .LVU440
 1723 07b0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1724              		.cfi_def_cfa_offset 32
 1725              		.cfi_offset 4, -32
 1726              		.cfi_offset 5, -28
 1727              		.cfi_offset 6, -24
 1728              		.cfi_offset 7, -20
 1729              		.cfi_offset 8, -16
 1730              		.cfi_offset 9, -12
 1731              		.cfi_offset 10, -8
 1732              		.cfi_offset 14, -4
 1733 07b4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1734              		.cfi_def_cfa_offset 56
 1735              		.cfi_offset 80, -56
 1736              		.cfi_offset 81, -52
 1737              		.cfi_offset 82, -48
 1738              		.cfi_offset 83, -44
 1739              		.cfi_offset 84, -40
 1740              		.cfi_offset 85, -36
 1741 07b8 BC409FE5 		ldr	r4, .L111+20	@ ivtmp.82,
 1742              	.LBB15:
 1743              	.LBB13:
 1744              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1745              		.loc 1 40 32 view .LVU441
 1746 07bc 2DAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1747              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1748              		.loc 1 40 26 view .LVU442
 1749 07c0 289B9FED 		vldr.64	d9, .L111	@ tmp151,
 1750              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1751              		.loc 1 40 49 view .LVU443
 1752 07c4 298B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1753 07c8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 1754              	.LBE13:
 1755              	.LBE15:
 1756              	@ armwave.c:403: {
 403:armwave.c     ****     test_create_gamma();
 1757              		.loc 1 403 1 view .LVU444
 1758 07cc 10D04DE2 		sub	sp, sp, #16	@,,
 1759              		.cfi_def_cfa_offset 72
 1760              	@ armwave.c:403: {
 403:armwave.c     ****     test_create_gamma();
 1761              		.loc 1 403 1 view .LVU445
 1762 07d0 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1763 07d4 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1764 07d8 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1765 07dc 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1766 07e0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 1767 07e4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1768              	.LVL114:
 1769              	.L108:
 1770              	.LBB16:
 1771              	.LBB14:
  40:armwave.c     ****     }
 1772              		.loc 1 40 9 is_stmt 1 view .LVU446
 1773              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1774              		.loc 1 40 32 is_stmt 0 view .LVU447
 1775 07e8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 1776              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1777              		.loc 1 40 26 view .LVU448
 1778 07ec 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1779              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1780              		.loc 1 40 32 view .LVU449
 1781 07f0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1782 07f4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1783 07f8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1784              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1785              		.loc 1 40 26 view .LVU450
 1786 07fc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1787 0800 FEFFFFEB 		bl	pow		@
 1788              	.LVL115:
 1789              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1790              		.loc 1 40 49 view .LVU451
 1791 0804 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1792              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1793              		.loc 1 40 24 view .LVU452
 1794 0808 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1795 080c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1796 0810 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1797              	.LVL116:
 1798              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1799              		.loc 1 39 5 view .LVU453
 1800 0814 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 1801 0818 F2FFFF1A 		bne	.L108		@,
 1802              	.LVL117:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1803              		.loc 1 39 5 view .LVU454
 1804              	.LBE14:
 1805              	.LBE16:
 405:armwave.c     **** 
 406:armwave.c     ****     // make ch1 yellowish by default
 407:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1806              		.loc 1 407 5 is_stmt 1 view .LVU455
 1807              	.LBB17:
 1808              	.LBI17:
 360:armwave.c     **** {
 1809              		.loc 1 360 6 view .LVU456
 1810              	.LBB18:
 363:armwave.c     ****         case 1:
 1811              		.loc 1 363 5 view .LVU457
 365:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1812              		.loc 1 365 13 view .LVU458
 366:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1813              		.loc 1 366 13 view .LVU459
 1814              	@ armwave.c:365:             g_armwave_state.ch1_color.r = r;
 365:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1815              		.loc 1 365 41 is_stmt 0 view .LVU460
 1816 081c 5CC09FE5 		ldr	ip, .L111+24	@ tmp142,
 1817 0820 5C409FE5 		ldr	r4, .L111+28	@ tmp143,
 1818              	.LBE18:
 1819              	.LBE17:
 1820              	@ armwave.c:409:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 408:armwave.c     **** 
 409:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1821              		.loc 1 409 5 view .LVU461
 1822 0824 0000A0E3 		mov	r0, #0	@ tmp147,
 1823              	.LBB22:
 1824              	.LBB19:
 1825              	@ armwave.c:367:             g_armwave_state.ch1_color.b = b;
 367:armwave.c     ****             break;
 1826              		.loc 1 367 41 view .LVU462
 1827 0828 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1828              	.LBE19:
 1829              	.LBE22:
 1830              	@ armwave.c:409:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1831              		.loc 1 409 5 view .LVU463
 1832 082c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1833 0830 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1834 0834 00808DE5 		str	r8, [sp]	@ render_width,
 1835 0838 0610A0E1 		mov	r1, r6	@, tmp3
 1836 083c 0720A0E1 		mov	r2, r7	@, nwaves
 1837              	.LBB23:
 1838              	.LBB20:
 1839              	@ armwave.c:365:             g_armwave_state.ch1_color.r = r;
 365:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1840              		.loc 1 365 41 view .LVU464
 1841 0840 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 367:armwave.c     ****             break;
 1842              		.loc 1 367 13 is_stmt 1 view .LVU465
 1843              	.LBE20:
 1844              	.LBE23:
 1845              	@ armwave.c:409:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1846              		.loc 1 409 5 is_stmt 0 view .LVU466
 1847 0844 0630A0E1 		mov	r3, r6	@, wave_size
 1848              	.LBB24:
 1849              	.LBB21:
 1850              	@ armwave.c:367:             g_armwave_state.ch1_color.b = b;
 367:armwave.c     ****             break;
 1851              		.loc 1 367 41 view .LVU467
 1852 0848 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 368:armwave.c     ****     }
 1853              		.loc 1 368 13 is_stmt 1 view .LVU468
 1854              	.LVL118:
 368:armwave.c     ****     }
 1855              		.loc 1 368 13 is_stmt 0 view .LVU469
 1856              	.LBE21:
 1857              	.LBE24:
 1858              		.loc 1 409 5 is_stmt 1 view .LVU470
 1859 084c FEFFFFEB 		bl	armwave_setup_render		@
 1860              	.LVL119:
 410:armwave.c     **** 
 411:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1861              		.loc 1 411 5 view .LVU471
 1862 0850 30109FE5 		ldr	r1, .L111+32	@,
 1863 0854 30009FE5 		ldr	r0, .L111+36	@,
 1864              	@ armwave.c:412: }
 412:armwave.c     **** }
 1865              		.loc 1 412 1 is_stmt 0 view .LVU472
 1866 0858 10D08DE2 		add	sp, sp, #16	@,,
 1867              		.cfi_def_cfa_offset 56
 1868              		@ sp needed	@
 1869 085c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1870              		.cfi_restore 84
 1871              		.cfi_restore 85
 1872              		.cfi_restore 82
 1873              		.cfi_restore 83
 1874              		.cfi_restore 80
 1875              		.cfi_restore 81
 1876              		.cfi_def_cfa_offset 32
 1877 0860 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1878              		.cfi_restore 14
 1879              		.cfi_restore 10
 1880              		.cfi_restore 9
 1881              		.cfi_restore 8
 1882              		.cfi_restore 7
 1883              		.cfi_restore 6
 1884              		.cfi_restore 5
 1885              		.cfi_restore 4
 1886              		.cfi_def_cfa_offset 0
 1887              	.LVL120:
 1888              	@ armwave.c:411:     printf("armwave version: %s\n", ARMWAVE_VER);
 411:armwave.c     **** }
 1889              		.loc 1 411 5 view .LVU473
 1890 0864 FEFFFFEA 		b	printf		@
 1891              	.LVL121:
 1892              	.L112:
 1893              		.align	3
 1894              	.L111:
 1895 0868 000000C0 		.word	-1073741824
 1896 086c CCCCEC3F 		.word	1072483532
 1897 0870 00000000 		.word	0
 1898 0874 00E06F40 		.word	1081073664
 1899 0878 00007F43 		.word	1132396544
 1900 087c FFFFFFFF 		.word	gamma_table-1
 1901 0880 00000000 		.word	g_armwave_state
 1902 0884 F609F406 		.word	116656630
 1903 0888 00000000 		.word	.LC0
 1904 088c 08000000 		.word	.LC1
 1905              		.cfi_endproc
 1906              	.LFE68:
 1908              		.global	__aeabi_idiv
 1909              		.align	2
 1910              		.global	armwave_test_generate
 1911              		.syntax unified
 1912              		.arm
 1913              		.fpu vfp
 1915              	armwave_test_generate:
 1916              	.LFB69:
 413:armwave.c     **** 
 414:armwave.c     **** /*
 415:armwave.c     ****  * Fill buffers with test funtionry.
 416:armwave.c     ****  */
 417:armwave.c     **** void armwave_test_generate()
 418:armwave.c     **** {
 1917              		.loc 1 418 1 is_stmt 1 view -0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 24
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 419:armwave.c     ****     uint32_t yy;
 1921              		.loc 1 419 5 view .LVU475
 420:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1922              		.loc 1 420 5 view .LVU476
 1923              	@ armwave.c:418: {
 418:armwave.c     ****     uint32_t yy;
 1924              		.loc 1 418 1 is_stmt 0 view .LVU477
 1925 0890 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1926              		.cfi_def_cfa_offset 36
 1927              		.cfi_offset 4, -36
 1928              		.cfi_offset 5, -32
 1929              		.cfi_offset 6, -28
 1930              		.cfi_offset 7, -24
 1931              		.cfi_offset 8, -20
 1932              		.cfi_offset 9, -16
 1933              		.cfi_offset 10, -12
 1934              		.cfi_offset 11, -8
 1935              		.cfi_offset 14, -4
 1936 0894 1CD04DE2 		sub	sp, sp, #28	@,,
 1937              		.cfi_def_cfa_offset 64
 1938              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1939              		.loc 1 420 38 view .LVU478
 1940 0898 30A29FE5 		ldr	r10, .L132	@ tmp320,
 1941              	@ armwave.c:422:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 421:armwave.c     **** 
 422:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1942              		.loc 1 422 5 view .LVU479
 1943 089c 0010A0E3 		mov	r1, #0	@,
 1944              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 1945              		.loc 1 420 14 view .LVU480
 1946 08a0 58309AE5 		ldr	r3, [r10, #88]	@ xx_rem, g_armwave_state.target_width
 1947              	@ armwave.c:422:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1948              		.loc 1 422 5 view .LVU481
 1949 08a4 50209AE5 		ldr	r2, [r10, #80]	@, g_armwave_state.ch_buff_size
 1950 08a8 04009AE5 		ldr	r0, [r10, #4]	@, g_armwave_state.ch1_buffer
 1951              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 1952              		.loc 1 420 14 view .LVU482
 1953 08ac 08308DE5 		str	r3, [sp, #8]	@ xx_rem, %sfp
 1954              	.LVL122:
 1955              		.loc 1 422 5 is_stmt 1 view .LVU483
 1956 08b0 FEFFFFEB 		bl	memset		@
 1957              	.LVL123:
 423:armwave.c     **** 
 424:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 1958              		.loc 1 424 5 view .LVU484
 1959              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1960              		.loc 1 424 38 is_stmt 0 view .LVU485
 1961 08b4 58609AE5 		ldr	r6, [r10, #88]	@ prephitmp_261, g_armwave_state.target_width
 1962              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1963              		.loc 1 424 69 view .LVU486
 1964 08b8 44709AE5 		ldr	r7, [r10, #68]	@ _111, g_armwave_state.slice_height
 1965              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1966              		.loc 1 424 52 view .LVU487
 1967 08bc 0600A0E1 		mov	r0, r6	@, prephitmp_261
 1968 08c0 0710A0E1 		mov	r1, r7	@, _111
 1969 08c4 FEFFFFEB 		bl	__aeabi_idiv		@
 1970              	.LVL124:
 1971              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1972              		.loc 1 424 5 view .LVU488
 1973 08c8 000050E3 		cmp	r0, #0	@ tmp226
 1974 08cc 7A00000A 		beq	.L125		@,
 1975 08d0 38509AE5 		ldr	r5, [r10, #56]	@ prephitmp_270, g_armwave_state.waves
 1976              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 1977              		.loc 1 420 53 view .LVU489
 1978 08d4 0030A0E3 		mov	r3, #0	@ ypos,
 1979 08d8 10308DE5 		str	r3, [sp, #16]	@ ypos, %sfp
 1980              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1981              		.loc 1 424 12 view .LVU490
 1982 08dc 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1983              	.LVL125:
 1984              	.L123:
 425:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 426:armwave.c     **** 
 427:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1985              		.loc 1 427 9 is_stmt 1 discriminator 3 view .LVU491
 1986 08e0 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1987              	.LBB27:
 1988              	.LBB28:
 1989              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 1990              		.loc 1 70 63 is_stmt 0 discriminator 3 view .LVU492
 1991 08e4 40409AE5 		ldr	r4, [r10, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1992              	.LBE28:
 1993              	.LBE27:
 1994              	@ armwave.c:427:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1995              		.loc 1 427 9 discriminator 3 view .LVU493
 1996 08e8 48209AE5 		ldr	r2, [r10, #72]	@ _9, g_armwave_state.slice_record_height
 1997 08ec 930703E0 		mul	r3, r3, r7	@ _7, yy, _111
 1998              	.LBB31:
 1999              	.LBB29:
 2000              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2001              		.loc 1 73 5 discriminator 3 view .LVU494
 2002 08f0 000055E3 		cmp	r5, #0	@ prephitmp_270,
 2003              	.LBE29:
 2004              	.LBE31:
 2005              	@ armwave.c:427:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2006              		.loc 1 427 9 discriminator 3 view .LVU495
 2007 08f4 14308DE5 		str	r3, [sp, #20]	@ _7, %sfp
 2008 08f8 00208DE5 		str	r2, [sp]	@ _9, %sfp
 2009              	.LVL126:
 2010              	.LBB32:
 2011              	.LBI27:
  62:armwave.c     **** {
 2012              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU496
 2013              	.LBB30:
  64:armwave.c     ****     uint32_t value, word;
 2014              		.loc 1 64 5 discriminator 3 view .LVU497
  65:armwave.c     ****     uint8_t *wave_base;
 2015              		.loc 1 65 5 discriminator 3 view .LVU498
  66:armwave.c     ****     uint8_t *write_buffer_base;
 2016              		.loc 1 66 5 discriminator 3 view .LVU499
  67:armwave.c     ****     uint8_t *write_buffer;
 2017              		.loc 1 67 5 discriminator 3 view .LVU500
  68:armwave.c     **** 
 2018              		.loc 1 68 5 discriminator 3 view .LVU501
  70:armwave.c     **** 
 2019              		.loc 1 70 5 discriminator 3 view .LVU502
 2020              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 2021              		.loc 1 70 63 is_stmt 0 discriminator 3 view .LVU503
 2022 08fc 940304E0 		mul	r4, r4, r3	@ _32, g_armwave_state.bitdepth_height, _7
 2023              	@ armwave.c:70:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  70:armwave.c     **** 
 2024              		.loc 1 70 40 discriminator 3 view .LVU504
 2025 0900 04C09AE5 		ldr	ip, [r10, #4]	@ _29, g_armwave_state.ch1_buffer
 2026              	.LVL127:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2027              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU505
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2028              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU506
 2029 0904 590000DA 		ble	.L115		@,
 2030              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2031              		.loc 1 73 11 view .LVU507
 2032 0908 0070A0E3 		mov	r7, #0	@ w,
 2033              	.LVL128:
 2034              	.L122:
  74:armwave.c     **** 
 2035              		.loc 1 74 9 is_stmt 1 view .LVU508
 2036              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2037              		.loc 1 78 9 is_stmt 0 view .LVU509
 2038 090c 00109DE5 		ldr	r1, [sp]	@ _9, %sfp
 2039              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2040              		.loc 1 74 78 view .LVU510
 2041 0910 24309AE5 		ldr	r3, [r10, #36]	@ _34, g_armwave_state.cmp_x_bitdepth_scale
 2042              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2043              		.loc 1 78 9 view .LVU511
 2044 0914 000051E3 		cmp	r1, #0	@ _9,
 2045              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2046              		.loc 1 74 61 view .LVU512
 2047 0918 14109DE5 		ldr	r1, [sp, #20]	@ _7, %sfp
 2048              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2049              		.loc 1 74 131 view .LVU513
 2050 091c 34209AE5 		ldr	r2, [r10, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2051              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2052              		.loc 1 74 61 view .LVU514
 2053 0920 930100E0 		mul	r0, r3, r1	@ tmp234, _34, _7
 2054              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2055              		.loc 1 74 131 view .LVU515
 2056 0924 920702E0 		mul	r2, r2, r7	@ tmp237, g_armwave_state.wave_stride, w
 2057              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2058              		.loc 1 74 36 view .LVU516
 2059 0928 14109AE5 		ldr	r1, [r10, #20]	@ _33, g_armwave_state.wave_buffer
 2060              	@ armwave.c:74:         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x
  74:armwave.c     **** 
 2061              		.loc 1 74 126 view .LVU517
 2062 092c 202482E0 		add	r2, r2, r0, lsr #8	@ _41, tmp237, tmp234,
 2063              	.LVL129:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2064              		.loc 1 78 9 is_stmt 1 view .LVU518
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2065              		.loc 1 78 9 is_stmt 0 view .LVU519
 2066 0930 4900000A 		beq	.L116		@,
 2067 0934 022081E0 		add	r2, r1, r2	@ tmp319, _33, _41
 2068              	.LVL130:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2069              		.loc 1 78 9 view .LVU520
 2070 0938 0C208DE5 		str	r2, [sp, #12]	@ tmp319, %sfp
 2071              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2072              		.loc 1 78 16 view .LVU521
 2073 093c 0000A0E3 		mov	r0, #0	@ yy,
 2074 0940 000000EA 		b	.L121		@
 2075              	.LVL131:
 2076              	.L120:
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2077              		.loc 1 78 16 view .LVU522
 2078 0944 24309AE5 		ldr	r3, [r10, #36]	@ _34, g_armwave_state.cmp_x_bitdepth_scale
 2079              	.LVL132:
 2080              	.L121:
  79:armwave.c     **** 
 2081              		.loc 1 79 13 is_stmt 1 view .LVU523
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2082              		.loc 1 90 17 view .LVU524
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2083              		.loc 1 90 17 view .LVU525
  91:armwave.c     ****                 word >>= 8;
 2084              		.loc 1 91 17 view .LVU526
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2085              		.loc 1 90 17 view .LVU527
  91:armwave.c     ****                 word >>= 8;
 2086              		.loc 1 91 17 view .LVU528
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2087              		.loc 1 90 17 view .LVU529
  91:armwave.c     ****                 word >>= 8;
 2088              		.loc 1 91 17 view .LVU530
 2089              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2090              		.loc 1 79 50 is_stmt 0 view .LVU531
 2091 0948 900303E0 		mul	r3, r0, r3	@ tmp239, yy, _34
 2092              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2093              		.loc 1 79 18 view .LVU532
 2094 094c 0C209DE5 		ldr	r2, [sp, #12]	@ tmp319, %sfp
 2095              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2096              		.loc 1 90 64 view .LVU533
 2097 0950 01B080E2 		add	fp, r0, #1	@ tmp264, yy,
 2098 0954 026080E2 		add	r6, r0, #2	@ tmp283, yy,
 2099              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2100              		.loc 1 79 18 view .LVU534
 2101 0958 238492E7 		ldr	r8, [r2, r3, lsr #8]	@ word, MEM[(uint32_t *)_47]
 2102              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2103              		.loc 1 79 90 view .LVU535
 2104 095c 2334A0E1 		lsr	r3, r3, #8	@ _45, tmp239,
 2105              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2106              		.loc 1 85 20 view .LVU536
 2107 0960 FF2018E2 		ands	r2, r8, #255	@ scale_value, word,
 2108 0964 0190A003 		moveq	r9, #1	@ tmp243,
 2109 0968 0090A013 		movne	r9, #0	@ tmp243,
 2110              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2111              		.loc 1 91 47 view .LVU537
 2112 096c 033084E0 		add	r3, r4, r3	@ tmp249, _32, _45
 2113 0970 023083E0 		add	r3, r3, r2	@ tmp250, tmp249, scale_value
 2114              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2115              		.loc 1 85 19 view .LVU538
 2116 0974 FF0052E3 		cmp	r2, #255	@ scale_value,
 2117 0978 0920A011 		movne	r2, r9	@, tmp248, tmp243
 2118 097c 01208903 		orreq	r2, r9, #1	@,, tmp248, tmp243
 2119 0980 000052E3 		cmp	r2, #0	@ tmp248,
 2120              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2121              		.loc 1 90 64 view .LVU539
 2122 0984 035080E2 		add	r5, r0, #3	@ tmp301, yy,
 2123              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****             }
 2124              		.loc 1 92 22 view .LVU540
 2125 0988 28E4A0E1 		lsr	lr, r8, #8	@ word, word,
 2126              	@ armwave.c:79:             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_s
  79:armwave.c     **** 
 2127              		.loc 1 79 18 view .LVU541
 2128 098c 040080E2 		add	r0, r0, #4	@ yy, yy,
 2129              	.LVL133:
  81:armwave.c     ****                 scale_value = word & 0xff;
 2130              		.loc 1 81 13 is_stmt 1 view .LVU542
  82:armwave.c     ****                 
 2131              		.loc 1 82 17 view .LVU543
  85:armwave.c     ****                     continue;
 2132              		.loc 1 85 17 view .LVU544
  91:armwave.c     ****                 word >>= 8;
 2133              		.loc 1 91 17 view .LVU545
 2134              	@ armwave.c:92:                 word >>= 8;
  92:armwave.c     ****             }
 2135              		.loc 1 92 22 is_stmt 0 view .LVU546
 2136 0990 2818A0E1 		lsr	r1, r8, #16	@ word, word,
 2137              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2138              		.loc 1 85 19 view .LVU547
 2139 0994 2C00001A 		bne	.L124		@,
 2140              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2141              		.loc 1 85 20 view .LVU548
 2142 0998 FF901EE2 		ands	r9, lr, #255	@ scale_value, word,
 2143              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2144              		.loc 1 91 47 view .LVU549
 2145 099c 0320DCE7 		ldrb	r2, [ip, r3]	@ zero_extendqisi2	@ *_100, *_100
 2146              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2147              		.loc 1 85 20 view .LVU550
 2148 09a0 01E0A003 		moveq	lr, #1	@ tmp257,
 2149 09a4 00E0A013 		movne	lr, #0	@ tmp257,
 2150              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2151              		.loc 1 85 19 view .LVU551
 2152 09a8 FF0059E3 		cmp	r9, #255	@ scale_value,
 2153 09ac 01E08E03 		orreq	lr, lr, #1	@,, tmp262, tmp257
 2154              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2155              		.loc 1 91 47 view .LVU552
 2156 09b0 012082E2 		add	r2, r2, #1	@ tmp253, *_100,
 2157              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2158              		.loc 1 85 19 view .LVU553
 2159 09b4 00005EE3 		cmp	lr, #0	@ tmp262,
 2160              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2161              		.loc 1 91 47 view .LVU554
 2162 09b8 0320CCE7 		strb	r2, [ip, r3]	@ tmp253, *_100
  92:armwave.c     ****             }
 2163              		.loc 1 92 17 is_stmt 1 view .LVU555
 2164              	.LVL134:
  82:armwave.c     ****                 
 2165              		.loc 1 82 17 view .LVU556
  85:armwave.c     ****                     continue;
 2166              		.loc 1 85 17 view .LVU557
 2167              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2168              		.loc 1 85 19 is_stmt 0 view .LVU558
 2169 09bc 2200001A 		bne	.L124		@,
 2170              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2171              		.loc 1 90 64 view .LVU559
 2172 09c0 24E09AE5 		ldr	lr, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2173              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2174              		.loc 1 85 20 view .LVU560
 2175 09c4 FF2011E2 		ands	r2, r1, #255	@ scale_value, word,
 2176 09c8 0130A003 		moveq	r3, #1	@ tmp276,
 2177              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2178              		.loc 1 90 64 view .LVU561
 2179 09cc 9E0B0EE0 		mul	lr, lr, fp	@ tmp265, g_armwave_state.cmp_x_bitdepth_scale, tmp264
 2180              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2181              		.loc 1 85 20 view .LVU562
 2182 09d0 0030A013 		movne	r3, #0	@ tmp276,
 2183              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2184              		.loc 1 85 19 view .LVU563
 2185 09d4 FF0052E3 		cmp	r2, #255	@ scale_value,
 2186 09d8 01308303 		orreq	r3, r3, #1	@,, tmp281, tmp276
 2187              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2188              		.loc 1 91 47 view .LVU564
 2189 09dc 2EE484E0 		add	lr, r4, lr, lsr #8	@ tmp268, _32, tmp265,
 2190 09e0 09E08EE0 		add	lr, lr, r9	@ tmp269, tmp268, scale_value
 2191              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2192              		.loc 1 85 19 view .LVU565
 2193 09e4 000053E3 		cmp	r3, #0	@ tmp281,
 2194              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2195              		.loc 1 91 47 view .LVU566
 2196 09e8 0E30DCE7 		ldrb	r3, [ip, lr]	@ zero_extendqisi2	@ *_128, *_128
 2197 09ec 013083E2 		add	r3, r3, #1	@ tmp272, *_128,
 2198 09f0 0E30CCE7 		strb	r3, [ip, lr]	@ tmp272, *_128
  92:armwave.c     ****             }
 2199              		.loc 1 92 17 is_stmt 1 view .LVU567
 2200              	.LVL135:
  82:armwave.c     ****                 
 2201              		.loc 1 82 17 view .LVU568
  85:armwave.c     ****                     continue;
 2202              		.loc 1 85 17 view .LVU569
 2203              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2204              		.loc 1 85 19 is_stmt 0 view .LVU570
 2205 09f4 1400001A 		bne	.L124		@,
 2206              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2207              		.loc 1 90 64 view .LVU571
 2208 09f8 24109AE5 		ldr	r1, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2209              	.LVL136:
 2210              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2211              		.loc 1 85 20 view .LVU572
 2212 09fc 283CB0E1 		lsrs	r3, r8, #24	@ word, word,
 2213 0a00 01E0A003 		moveq	lr, #1	@ tmp294,
 2214              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2215              		.loc 1 90 64 view .LVU573
 2216 0a04 910601E0 		mul	r1, r1, r6	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 2217              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2218              		.loc 1 85 20 view .LVU574
 2219 0a08 00E0A013 		movne	lr, #0	@ tmp294,
 2220              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2221              		.loc 1 85 19 view .LVU575
 2222 0a0c FF0053E3 		cmp	r3, #255	@ word,
 2223 0a10 01E08E03 		orreq	lr, lr, #1	@,, tmp299, tmp294
 2224              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2225              		.loc 1 91 47 view .LVU576
 2226 0a14 211484E0 		add	r1, r4, r1, lsr #8	@ tmp287, _32, tmp284,
 2227 0a18 021081E0 		add	r1, r1, r2	@ tmp288, tmp287, scale_value
 2228              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2229              		.loc 1 85 19 view .LVU577
 2230 0a1c 00005EE3 		cmp	lr, #0	@ tmp299,
 2231              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2232              		.loc 1 91 47 view .LVU578
 2233 0a20 0120DCE7 		ldrb	r2, [ip, r1]	@ zero_extendqisi2	@ *_156, *_156
 2234 0a24 012082E2 		add	r2, r2, #1	@ tmp291, *_156,
 2235 0a28 0120CCE7 		strb	r2, [ip, r1]	@ tmp291, *_156
  92:armwave.c     ****             }
 2236              		.loc 1 92 17 is_stmt 1 view .LVU579
 2237              	.LVL137:
  82:armwave.c     ****                 
 2238              		.loc 1 82 17 view .LVU580
  85:armwave.c     ****                     continue;
 2239              		.loc 1 85 17 view .LVU581
 2240              	@ armwave.c:85:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  85:armwave.c     ****                     continue;
 2241              		.loc 1 85 19 is_stmt 0 view .LVU582
 2242 0a2c 0600001A 		bne	.L124		@,
 2243              	@ armwave.c:90:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  90:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2244              		.loc 1 90 64 view .LVU583
 2245 0a30 24209AE5 		ldr	r2, [r10, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2246 0a34 920502E0 		mul	r2, r2, r5	@ tmp302, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 2247              	@ armwave.c:91:                 *(write_buffer + scale_value) += 1;
  91:armwave.c     ****                 word >>= 8;
 2248              		.loc 1 91 47 view .LVU584
 2249 0a38 222484E0 		add	r2, r4, r2, lsr #8	@ tmp305, _32, tmp302,
 2250 0a3c 033082E0 		add	r3, r2, r3	@ tmp306, tmp305, word
 2251 0a40 0320DCE7 		ldrb	r2, [ip, r3]	@ zero_extendqisi2	@ *_184, *_184
 2252 0a44 012082E2 		add	r2, r2, #1	@ tmp309, *_184,
 2253 0a48 0320CCE7 		strb	r2, [ip, r3]	@ tmp309, *_184
  92:armwave.c     ****             }
 2254              		.loc 1 92 17 is_stmt 1 view .LVU585
 2255              	.LVL138:
 2256              	.L124:
 2257              	@ armwave.c:78:         for(yy = 0; yy < height; yy += 4) {
  78:armwave.c     ****             word = *(uint32_t*)(wave_base + ((yy * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
 2258              		.loc 1 78 9 is_stmt 0 view .LVU586
 2259 0a4c 00309DE5 		ldr	r3, [sp]	@ _9, %sfp
 2260 0a50 000053E1 		cmp	r3, r0	@ _9, yy
 2261 0a54 BAFFFF8A 		bhi	.L120		@,
 2262 0a58 38509AE5 		ldr	r5, [r10, #56]	@ prephitmp_270, g_armwave_state.waves
 2263              	.LVL139:
 2264              	.L116:
 2265              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2266              		.loc 1 73 44 view .LVU587
 2267 0a5c 017087E2 		add	r7, r7, #1	@ w, w,
 2268              	.LVL140:
 2269              	@ armwave.c:73:     for(w = 0; w < g_armwave_state.waves; w++) {
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2270              		.loc 1 73 5 view .LVU588
 2271 0a60 050057E1 		cmp	r7, r5	@ w, prephitmp_270
 2272 0a64 A8FFFFBA 		blt	.L122		@,
 2273 0a68 44709AE5 		ldr	r7, [r10, #68]	@ _111, g_armwave_state.slice_height
 2274              	.LVL141:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2275              		.loc 1 73 5 view .LVU589
 2276 0a6c 58609AE5 		ldr	r6, [r10, #88]	@ prephitmp_261, g_armwave_state.target_width
 2277              	.L115:
 2278              	.LVL142:
  73:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_scale)
 2279              		.loc 1 73 5 view .LVU590
 2280              	.LBE30:
 2281              	.LBE32:
 428:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2282              		.loc 1 428 9 is_stmt 1 discriminator 3 view .LVU591
 2283              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2284              		.loc 1 424 52 is_stmt 0 discriminator 3 view .LVU592
 2285 0a70 0710A0E1 		mov	r1, r7	@, _111
 2286 0a74 0600A0E1 		mov	r0, r6	@, prephitmp_261
 2287 0a78 FEFFFFEB 		bl	__aeabi_idiv		@
 2288              	.LVL143:
 2289              	@ armwave.c:428:         xx_rem -= g_armwave_state.slice_height;
 2290              		.loc 1 428 16 discriminator 3 view .LVU593
 2291 0a7c 08209DE5 		ldr	r2, [sp, #8]	@ xx_rem, %sfp
 2292              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2293              		.loc 1 424 87 discriminator 3 view .LVU594
 2294 0a80 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 2295              	@ armwave.c:428:         xx_rem -= g_armwave_state.slice_height;
 2296              		.loc 1 428 16 discriminator 3 view .LVU595
 2297 0a84 072042E0 		sub	r2, r2, r7	@ xx_rem, xx_rem, _111
 2298 0a88 08208DE5 		str	r2, [sp, #8]	@ xx_rem, %sfp
 2299              	.LVL144:
 429:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2300              		.loc 1 429 9 is_stmt 1 discriminator 3 view .LVU596
 2301              	@ armwave.c:429:         ypos += g_armwave_state.slice_height;
 2302              		.loc 1 429 14 is_stmt 0 discriminator 3 view .LVU597
 2303 0a8c 10209DE5 		ldr	r2, [sp, #16]	@ ypos, %sfp
 2304              	.LVL145:
 2305              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2306              		.loc 1 424 87 discriminator 3 view .LVU598
 2307 0a90 013083E2 		add	r3, r3, #1	@ yy, yy,
 2308              	@ armwave.c:429:         ypos += g_armwave_state.slice_height;
 2309              		.loc 1 429 14 discriminator 3 view .LVU599
 2310 0a94 072082E0 		add	r2, r2, r7	@ ypos, ypos, _111
 2311              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2312              		.loc 1 424 87 discriminator 3 view .LVU600
 2313 0a98 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 2314              	.LVL146:
 2315              	@ armwave.c:429:         ypos += g_armwave_state.slice_height;
 2316              		.loc 1 429 14 discriminator 3 view .LVU601
 2317 0a9c 10208DE5 		str	r2, [sp, #16]	@ ypos, %sfp
 2318              	.LVL147:
 2319              	@ armwave.c:424:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 424:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2320              		.loc 1 424 5 discriminator 3 view .LVU602
 2321 0aa0 030050E1 		cmp	r0, r3	@, yy
 2322 0aa4 8DFFFF8A 		bhi	.L123		@,
 2323 0aa8 0200A0E1 		mov	r0, r2	@, ypos
 430:armwave.c     ****     }
 431:armwave.c     **** 
 432:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2324              		.loc 1 432 5 is_stmt 1 view .LVU603
 2325 0aac 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 2326              	@ armwave.c:433: }
 433:armwave.c     **** }
 2327              		.loc 1 433 1 is_stmt 0 view .LVU604
 2328 0ab0 1CD08DE2 		add	sp, sp, #28	@,,
 2329              		.cfi_remember_state
 2330              		.cfi_def_cfa_offset 36
 2331              		@ sp needed	@
 2332 0ab4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2333              		.cfi_restore 14
 2334              		.cfi_restore 11
 2335              		.cfi_restore 10
 2336              		.cfi_restore 9
 2337              		.cfi_restore 8
 2338              		.cfi_restore 7
 2339              		.cfi_restore 6
 2340              		.cfi_restore 5
 2341              		.cfi_restore 4
 2342              		.cfi_def_cfa_offset 0
 2343              	@ armwave.c:432:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 432:armwave.c     **** }
 2344              		.loc 1 432 5 view .LVU605
 2345 0ab8 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2346              	.LVL148:
 2347              	.L125:
 2348              		.cfi_restore_state
 2349              	@ armwave.c:420:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 420:armwave.c     **** 
 2350              		.loc 1 420 53 view .LVU606
 2351 0abc 10008DE5 		str	r0, [sp, #16]	@ tmp226, %sfp
 432:armwave.c     **** }
 2352              		.loc 1 432 5 is_stmt 1 view .LVU607
 2353 0ac0 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 2354              	@ armwave.c:433: }
 2355              		.loc 1 433 1 is_stmt 0 view .LVU608
 2356 0ac4 1CD08DE2 		add	sp, sp, #28	@,,
 2357              		.cfi_def_cfa_offset 36
 2358              		@ sp needed	@
 2359 0ac8 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2360              		.cfi_restore 14
 2361              		.cfi_restore 11
 2362              		.cfi_restore 10
 2363              		.cfi_restore 9
 2364              		.cfi_restore 8
 2365              		.cfi_restore 7
 2366              		.cfi_restore 6
 2367              		.cfi_restore 5
 2368              		.cfi_restore 4
 2369              		.cfi_def_cfa_offset 0
 2370              	@ armwave.c:432:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 432:armwave.c     **** }
 2371              		.loc 1 432 5 view .LVU609
 2372 0acc FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2373              	.LVL149:
 2374              	.L133:
 2375              		.align	2
 2376              	.L132:
 2377 0ad0 00000000 		.word	g_armwave_state
 2378              		.cfi_endproc
 2379              	.LFE69:
 2381              		.align	2
 2382              		.global	armwave_test_fill_outbuf
 2383              		.syntax unified
 2384              		.arm
 2385              		.fpu vfp
 2387              	armwave_test_fill_outbuf:
 2388              	.LFB70:
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Render image to the local allocated buffer.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_fill_outbuf()
 439:armwave.c     **** {
 2389              		.loc 1 439 1 is_stmt 1 view -0
 2390              		.cfi_startproc
 2391              		@ args = 0, pretend = 0, frame = 8
 2392              		@ frame_needed = 0, uses_anonymous_args = 0
 440:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2393              		.loc 1 440 5 view .LVU611
 2394 0ad4 50C19FE5 		ldr	ip, .L155	@ tmp204,
 2395              	@ armwave.c:439: {
 439:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2396              		.loc 1 439 1 is_stmt 0 view .LVU612
 2397 0ad8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2398              		.cfi_def_cfa_offset 36
 2399              		.cfi_offset 4, -36
 2400              		.cfi_offset 5, -32
 2401              		.cfi_offset 6, -28
 2402              		.cfi_offset 7, -24
 2403              		.cfi_offset 8, -20
 2404              		.cfi_offset 9, -16
 2405              		.cfi_offset 10, -12
 2406              		.cfi_offset 11, -8
 2407              		.cfi_offset 14, -4
 2408 0adc 0CD04DE2 		sub	sp, sp, #12	@,,
 2409              		.cfi_def_cfa_offset 48
 2410              	@ armwave.c:440:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2411              		.loc 1 440 5 view .LVU613
 2412 0ae0 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2413              	.LVL150:
 2414              	.LBB35:
 2415              	.LBI35:
 157:armwave.c     **** {
 2416              		.loc 1 157 6 is_stmt 1 view .LVU614
 2417              	.LBB36:
 159:armwave.c     ****     // uint32_t ysub;
 2418              		.loc 1 159 5 view .LVU615
 161:armwave.c     ****     uint8_t r, g, b, value; 
 2419              		.loc 1 161 5 view .LVU616
 162:armwave.c     ****     // uint8_t row;
 2420              		.loc 1 162 5 view .LVU617
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2421              		.loc 1 164 5 view .LVU618
 2422              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2423              		.loc 1 164 15 is_stmt 0 view .LVU619
 2424 0ae4 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2425              	.LVL151:
 165:armwave.c     ****     uint32_t offset;
 2426              		.loc 1 165 5 is_stmt 1 view .LVU620
 166:armwave.c     **** 
 2427              		.loc 1 166 5 view .LVU621
 168:armwave.c     **** 
 2428              		.loc 1 168 5 view .LVU622
 2429 0ae8 000058E3 		cmp	r8, #0	@ _1,
 2430 0aec 4900000A 		beq	.L153		@,
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2431              		.loc 1 170 5 view .LVU623
 2432              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2433              		.loc 1 170 10 is_stmt 0 view .LVU624
 2434 0af0 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2435 0af4 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2436              	.LVL152:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2437              		.loc 1 173 5 is_stmt 1 view .LVU625
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2438              		.loc 1 173 5 is_stmt 0 view .LVU626
 2439 0af8 000057E3 		cmp	r7, #0	@ npix,
 2440 0afc 0A0000DA 		ble	.L134		@,
 2441              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2442              		.loc 1 185 52 view .LVU627
 2443 0b00 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2444              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2445              		.loc 1 186 52 view .LVU628
 2446 0b04 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2447              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2448              		.loc 1 187 52 view .LVU629
 2449 0b08 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2450              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2451              		.loc 1 209 57 view .LVU630
 2452 0b0c 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2453              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2454              		.loc 1 173 11 view .LVU631
 2455 0b10 00E0A0E3 		mov	lr, #0	@ n,
 2456              	.LVL153:
 2457              	.L141:
 177:armwave.c     **** 
 2458              		.loc 1 177 9 is_stmt 1 view .LVU632
 2459              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 2460              		.loc 1 177 19 is_stmt 0 view .LVU633
 2461 0b14 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2462              	.LVL154:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2463              		.loc 1 179 9 is_stmt 1 view .LVU634
 2464              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2465              		.loc 1 179 11 is_stmt 0 view .LVU635
 2466 0b18 000050E3 		cmp	r0, #0	@ wave_word,
 2467 0b1c 0400001A 		bne	.L150		@,
 2468 0b20 04E08EE2 		add	lr, lr, #4	@ n, n,
 2469              	.L137:
 2470              	.LVL155:
 2471              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2472              		.loc 1 173 5 view .LVU636
 2473 0b24 0E0057E1 		cmp	r7, lr	@ npix, n
 2474 0b28 F9FFFFCA 		bgt	.L141		@,
 2475              	.LVL156:
 2476              	.L134:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2477              		.loc 1 173 5 view .LVU637
 2478              	.LBE36:
 2479              	.LBE35:
 2480              	@ armwave.c:441: }
 441:armwave.c     **** }
 2481              		.loc 1 441 1 view .LVU638
 2482 0b2c 0CD08DE2 		add	sp, sp, #12	@,,
 2483              		.cfi_remember_state
 2484              		.cfi_def_cfa_offset 36
 2485              		@ sp needed	@
 2486 0b30 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2487              	.LVL157:
 2488              	.L150:
 2489              		.cfi_restore_state
 2490              	.LBB38:
 2491              	.LBB37:
 2492              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2493              		.loc 1 184 19 view .LVU639
 2494 0b34 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2495              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2496              		.loc 1 179 11 view .LVU640
 2497 0b38 0E60A0E1 		mov	r6, lr	@ ivtmp.108, n
 2498              	.LVL158:
 181:armwave.c     ****                 wave_word >>= 8;
 2499              		.loc 1 181 17 is_stmt 1 view .LVU641
 182:armwave.c     **** 
 2500              		.loc 1 182 17 view .LVU642
 2501              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2502              		.loc 1 182 27 is_stmt 0 view .LVU643
 2503 0b3c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2504              	.LVL159:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2505              		.loc 1 184 17 is_stmt 1 view .LVU644
 2506 0b40 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.108,
 2507              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2508              		.loc 1 184 19 is_stmt 0 view .LVU645
 2509 0b44 0500001A 		bne	.L154		@,
 2510              	.LVL160:
 2511              	.L138:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2512              		.loc 1 184 19 view .LVU646
 2513 0b48 016086E2 		add	r6, r6, #1	@ ivtmp.108, ivtmp.108,
 2514              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 2515              		.loc 1 180 13 view .LVU647
 2516 0b4c 06005EE1 		cmp	lr, r6	@ n, ivtmp.108
 2517 0b50 F3FFFF0A 		beq	.L137		@,
 181:armwave.c     ****                 wave_word >>= 8;
 2518              		.loc 1 181 17 is_stmt 1 view .LVU648
 2519              	.LVL161:
 182:armwave.c     **** 
 2520              		.loc 1 182 17 view .LVU649
 2521              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2522              		.loc 1 184 19 is_stmt 0 view .LVU650
 2523 0b54 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2524              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2525              		.loc 1 182 27 view .LVU651
 2526 0b58 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2527              	.LVL162:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2528              		.loc 1 184 17 is_stmt 1 view .LVU652
 2529              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2530              		.loc 1 184 19 is_stmt 0 view .LVU653
 2531 0b5c F9FFFF0A 		beq	.L138		@,
 2532              	.L154:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2533              		.loc 1 185 21 is_stmt 1 view .LVU654
 2534              	.LVL163:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2535              		.loc 1 186 21 view .LVU655
 187:armwave.c     **** 
 2536              		.loc 1 187 21 view .LVU656
 189:armwave.c     ****                     g = MIN(gg, 255);
 2537              		.loc 1 189 21 view .LVU657
 190:armwave.c     ****                     b = MIN(bb, 255);
 2538              		.loc 1 190 21 view .LVU658
 191:armwave.c     **** 
 2539              		.loc 1 191 21 view .LVU659
 194:armwave.c     **** 
 2540              		.loc 1 194 21 view .LVU660
 2541              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2542              		.loc 1 209 32 is_stmt 0 view .LVU661
 2543 0b60 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.108
 2544              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2545              		.loc 1 210 41 view .LVU662
 2546 0b64 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2547              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2548              		.loc 1 209 40 view .LVU663
 2549 0b68 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2550              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2551              		.loc 1 210 41 view .LVU664
 2552 0b6c 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2553              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2554              		.loc 1 187 55 view .LVU665
 2555 0b70 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2556              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2557              		.loc 1 209 40 view .LVU666
 2558 0b74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2559              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2560              		.loc 1 210 46 view .LVU667
 2561 0b78 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2562              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2563              		.loc 1 186 55 view .LVU668
 2564 0b7c 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2565              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2566              		.loc 1 187 24 view .LVU669
 2567 0b80 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2568              	.LVL164:
 2569              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2570              		.loc 1 191 25 view .LVU670
 2571 0b84 FF0053E3 		cmp	r3, #255	@ bb,
 2572              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2573              		.loc 1 186 24 view .LVU671
 2574 0b88 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2575              	.LVL165:
 2576              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2577              		.loc 1 191 25 view .LVU672
 2578 0b8c FF30A0A3 		movge	r3, #255	@ bb,
 2579              	.LVL166:
 2580              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2581              		.loc 1 209 40 view .LVU673
 2582 0b90 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2583              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2584              		.loc 1 210 46 view .LVU674
 2585 0b94 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2586              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 2587              		.loc 1 190 25 view .LVU675
 2588 0b98 FF0052E3 		cmp	r2, #255	@ gg,
 2589 0b9c FF20A0A3 		movge	r2, #255	@ gg,
 2590              	.LVL167:
 2591              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2592              		.loc 1 185 55 view .LVU676
 2593 0ba0 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2594              	.LVL168:
 2595              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2596              		.loc 1 194 56 view .LVU677
 2597 0ba4 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2598              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2599              		.loc 1 194 44 view .LVU678
 2600 0ba8 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2601              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2602              		.loc 1 209 24 view .LVU679
 2603 0bac E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2604              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2605              		.loc 1 185 24 view .LVU680
 2606 0bb0 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2607              	.LVL169:
 2608              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2609              		.loc 1 194 56 view .LVU681
 2610 0bb4 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2611              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2612              		.loc 1 194 44 view .LVU682
 2613 0bb8 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2614              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2615              		.loc 1 189 25 view .LVU683
 2616 0bbc FF0051E3 		cmp	r1, #255	@ rr,
 2617              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2618              		.loc 1 194 51 view .LVU684
 2619 0bc0 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2620              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2621              		.loc 1 189 25 view .LVU685
 2622 0bc4 FF10A0A3 		movge	r1, #255	@ rr,
 2623              	.LVL170:
 2624              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2625              		.loc 1 209 24 view .LVU686
 2626 0bc8 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2627              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2628              		.loc 1 210 24 view .LVU687
 2629 0bcc C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2630              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2631              		.loc 1 194 62 view .LVU688
 2632 0bd0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2633 0bd4 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2634              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2635              		.loc 1 194 26 view .LVU689
 2636 0bd8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2637              	.LVL171:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2638              		.loc 1 208 21 is_stmt 1 view .LVU690
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2639              		.loc 1 209 21 view .LVU691
 210:armwave.c     ****                     xx = (nsub >> 8);
 2640              		.loc 1 210 21 view .LVU692
 211:armwave.c     **** 
 2641              		.loc 1 211 21 view .LVU693
 2642              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 2643              		.loc 1 211 32 is_stmt 0 view .LVU694
 2644 0bdc 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.108,
 2645              	.LVL172:
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2646              		.loc 1 213 21 is_stmt 1 view .LVU695
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2647              		.loc 1 213 21 is_stmt 0 view .LVU696
 2648 0be0 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2649              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2650              		.loc 1 210 24 view .LVU697
 2651 0be4 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2652              	.LVL173:
 2653              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2654              		.loc 1 213 21 view .LVU698
 2655 0be8 020054E1 		cmp	r4, r2	@ yy, ye
 2656 0bec D5FFFF2A 		bcs	.L138		@,
 2657 0bf0 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2658              	.LVL174:
 2659              	.L139:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2660              		.loc 1 214 25 is_stmt 1 view .LVU699
 215:armwave.c     ****                     }
 2661              		.loc 1 215 25 view .LVU700
 2662              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2663              		.loc 1 214 43 is_stmt 0 view .LVU701
 2664 0bf4 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2665              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2666              		.loc 1 213 21 view .LVU702
 2667 0bf8 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2668              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2669              		.loc 1 215 43 view .LVU703
 2670 0bfc 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2671              	.LVL175:
 2672              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2673              		.loc 1 213 42 view .LVU704
 2674 0c00 014084E2 		add	r4, r4, #1	@ yy, yy,
 2675              	.LVL176:
 2676              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2677              		.loc 1 213 21 view .LVU705
 2678 0c04 040050E1 		cmp	r0, r4	@ ye, yy
 2679              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 2680              		.loc 1 215 53 view .LVU706
 2681 0c08 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2682              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2683              		.loc 1 213 21 view .LVU707
 2684 0c0c F8FFFF1A 		bne	.L139		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2685              		.loc 1 213 21 view .LVU708
 2686 0c10 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2687 0c14 CBFFFFEA 		b	.L138		@
 2688              	.LVL177:
 2689              	.L153:
 168:armwave.c     **** 
 2690              		.loc 1 168 5 is_stmt 1 view .LVU709
 2691 0c18 10309FE5 		ldr	r3, .L155+4	@,
 2692 0c1c A820A0E3 		mov	r2, #168	@,
 2693 0c20 0C109FE5 		ldr	r1, .L155+8	@,
 2694 0c24 0C009FE5 		ldr	r0, .L155+12	@,
 2695 0c28 FEFFFFEB 		bl	__assert_fail		@
 2696              	.LVL178:
 2697              	.L156:
 2698              		.align	2
 2699              	.L155:
 2700 0c2c 00000000 		.word	g_armwave_state
 2701 0c30 00000000 		.word	.LANCHOR0
 2702 0c34 20000000 		.word	.LC2
 2703 0c38 2C000000 		.word	.LC3
 2704              	.LBE37:
 2705              	.LBE38:
 2706              		.cfi_endproc
 2707              	.LFE70:
 2709              		.align	2
 2710              		.global	armwave_test_dump_buffer_to_ppm
 2711              		.syntax unified
 2712              		.arm
 2713              		.fpu vfp
 2715              	armwave_test_dump_buffer_to_ppm:
 2716              	.LVL179:
 2717              	.LFB71:
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 445:armwave.c     ****  */
 446:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 447:armwave.c     **** {
 2718              		.loc 1 447 1 view -0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 0
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 2722              		@ link register save eliminated.
 448:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2723              		.loc 1 448 5 view .LVU711
 2724 0c3c 08309FE5 		ldr	r3, .L158	@ tmp112,
 2725 0c40 0010A0E1 		mov	r1, r0	@, fn
 2726 0c44 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2727              	.LVL180:
 2728              		.loc 1 448 5 is_stmt 0 view .LVU712
 2729 0c48 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2730              	.LVL181:
 2731              	.L159:
 2732              		.loc 1 448 5 view .LVU713
 2733              		.align	2
 2734              	.L158:
 2735 0c4c 00000000 		.word	g_armwave_state
 2736              		.cfi_endproc
 2737              	.LFE71:
 2739              		.align	2
 2740              		.global	armwave_test_fill_gdkbuf
 2741              		.syntax unified
 2742              		.arm
 2743              		.fpu vfp
 2745              	armwave_test_fill_gdkbuf:
 2746              	.LVL182:
 2747              	.LFB72:
 449:armwave.c     **** }
 450:armwave.c     **** 
 451:armwave.c     **** /*
 452:armwave.c     ****  * Render GDK buffer with test funtionry.
 453:armwave.c     ****  */
 454:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 455:armwave.c     **** {
 2748              		.loc 1 455 1 is_stmt 1 view -0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 8
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 456:armwave.c     ****     //PyObject *mv;
 457:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 458:armwave.c     **** 
 459:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 460:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2752              		.loc 1 460 5 view .LVU715
 2753              	@ armwave.c:460:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2754              		.loc 1 460 11 is_stmt 0 view .LVU716
 2755 0c50 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2756              	@ armwave.c:455: {
 455:armwave.c     ****     //PyObject *mv;
 2757              		.loc 1 455 1 view .LVU717
 2758 0c54 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2759              		.cfi_def_cfa_offset 36
 2760              		.cfi_offset 4, -36
 2761              		.cfi_offset 5, -32
 2762              		.cfi_offset 6, -28
 2763              		.cfi_offset 7, -24
 2764              		.cfi_offset 8, -20
 2765              		.cfi_offset 9, -16
 2766              		.cfi_offset 10, -12
 2767              		.cfi_offset 11, -8
 2768              		.cfi_offset 14, -4
 2769 0c58 0CD04DE2 		sub	sp, sp, #12	@,,
 2770              		.cfi_def_cfa_offset 48
 2771              	.LBB41:
 2772              	.LBB42:
 2773              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2774              		.loc 1 164 15 view .LVU718
 2775 0c5c 48519FE5 		ldr	r5, .L181	@ tmp206,
 2776              	.LBE42:
 2777              	.LBE41:
 2778              	@ armwave.c:460:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2779              		.loc 1 460 11 view .LVU719
 2780 0c60 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2781              	.LVL183:
 461:armwave.c     ****     
 462:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 463:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2782              		.loc 1 463 5 is_stmt 1 view .LVU720
 2783              	.LBB45:
 2784              	.LBI41:
 157:armwave.c     **** {
 2785              		.loc 1 157 6 view .LVU721
 2786              	.LBB43:
 159:armwave.c     ****     // uint32_t ysub;
 2787              		.loc 1 159 5 view .LVU722
 161:armwave.c     ****     uint8_t r, g, b, value; 
 2788              		.loc 1 161 5 view .LVU723
 162:armwave.c     ****     // uint8_t row;
 2789              		.loc 1 162 5 view .LVU724
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2790              		.loc 1 164 5 view .LVU725
 2791              	@ armwave.c:168:     assert(out_buffer != NULL);
 168:armwave.c     **** 
 2792              		.loc 1 168 5 is_stmt 0 view .LVU726
 2793 0c64 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2794              	@ armwave.c:164:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 164:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2795              		.loc 1 164 15 view .LVU727
 2796 0c68 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2797              	.LVL184:
 165:armwave.c     ****     uint32_t offset;
 2798              		.loc 1 165 5 is_stmt 1 view .LVU728
 166:armwave.c     **** 
 2799              		.loc 1 166 5 view .LVU729
 168:armwave.c     **** 
 2800              		.loc 1 168 5 view .LVU730
 2801 0c6c 4900000A 		beq	.L179		@,
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2802              		.loc 1 170 5 view .LVU731
 2803              	@ armwave.c:170:     npix = g_armwave_state.target_width * 256; 
 170:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2804              		.loc 1 170 10 is_stmt 0 view .LVU732
 2805 0c70 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2806 0c74 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2807              	.LVL185:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2808              		.loc 1 173 5 is_stmt 1 view .LVU733
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2809              		.loc 1 173 5 is_stmt 0 view .LVU734
 2810 0c78 000057E3 		cmp	r7, #0	@ npix,
 2811 0c7c 0A0000DA 		ble	.L160		@,
 2812              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2813              		.loc 1 185 52 view .LVU735
 2814 0c80 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2815              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2816              		.loc 1 186 52 view .LVU736
 2817 0c84 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2818              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2819              		.loc 1 187 52 view .LVU737
 2820 0c88 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2821              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2822              		.loc 1 209 57 view .LVU738
 2823 0c8c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2824              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2825              		.loc 1 173 11 view .LVU739
 2826 0c90 00C0A0E3 		mov	ip, #0	@ n,
 2827              	.LVL186:
 2828              	.L167:
 177:armwave.c     **** 
 2829              		.loc 1 177 9 is_stmt 1 view .LVU740
 2830              	@ armwave.c:177:         wave_word = *base_32ptr++;
 177:armwave.c     **** 
 2831              		.loc 1 177 19 is_stmt 0 view .LVU741
 2832 0c94 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2833              	.LVL187:
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2834              		.loc 1 179 9 is_stmt 1 view .LVU742
 2835              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2836              		.loc 1 179 11 is_stmt 0 view .LVU743
 2837 0c98 000050E3 		cmp	r0, #0	@ wave_word,
 2838 0c9c 0400001A 		bne	.L176		@,
 2839 0ca0 04C08CE2 		add	ip, ip, #4	@ n, n,
 2840              	.L163:
 2841              	.LVL188:
 2842              	@ armwave.c:173:     for(n = 0; n < npix; n += 4) {
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2843              		.loc 1 173 5 view .LVU744
 2844 0ca4 0C0057E1 		cmp	r7, ip	@ npix, n
 2845 0ca8 F9FFFFCA 		bgt	.L167		@,
 2846              	.LVL189:
 2847              	.L160:
 173:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2848              		.loc 1 173 5 view .LVU745
 2849              	.LBE43:
 2850              	.LBE45:
 2851              	@ armwave.c:464: }
 464:armwave.c     **** }
 2852              		.loc 1 464 1 view .LVU746
 2853 0cac 0CD08DE2 		add	sp, sp, #12	@,,
 2854              		.cfi_remember_state
 2855              		.cfi_def_cfa_offset 36
 2856              		@ sp needed	@
 2857 0cb0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2858              	.LVL190:
 2859              	.L176:
 2860              		.cfi_restore_state
 2861              	.LBB46:
 2862              	.LBB44:
 2863              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2864              		.loc 1 184 19 view .LVU747
 2865 0cb4 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2866              	@ armwave.c:179:         if(COND_UNLIKELY(wave_word != 0)) {
 179:armwave.c     ****             for(w = 0; w < 4; w++) {
 2867              		.loc 1 179 11 view .LVU748
 2868 0cb8 0C60A0E1 		mov	r6, ip	@ ivtmp.124, n
 2869              	.LVL191:
 181:armwave.c     ****                 wave_word >>= 8;
 2870              		.loc 1 181 17 is_stmt 1 view .LVU749
 182:armwave.c     **** 
 2871              		.loc 1 182 17 view .LVU750
 2872              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2873              		.loc 1 182 27 is_stmt 0 view .LVU751
 2874 0cbc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2875              	.LVL192:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2876              		.loc 1 184 17 is_stmt 1 view .LVU752
 2877 0cc0 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.124,
 2878              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2879              		.loc 1 184 19 is_stmt 0 view .LVU753
 2880 0cc4 0500001A 		bne	.L180		@,
 2881              	.LVL193:
 2882              	.L164:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2883              		.loc 1 184 19 view .LVU754
 2884 0cc8 016086E2 		add	r6, r6, #1	@ ivtmp.124, ivtmp.124,
 2885              	@ armwave.c:180:             for(w = 0; w < 4; w++) {
 180:armwave.c     ****                 value = wave_word & 0xff;
 2886              		.loc 1 180 13 view .LVU755
 2887 0ccc 06005CE1 		cmp	ip, r6	@ n, ivtmp.124
 2888 0cd0 F3FFFF0A 		beq	.L163		@,
 181:armwave.c     ****                 wave_word >>= 8;
 2889              		.loc 1 181 17 is_stmt 1 view .LVU756
 2890              	.LVL194:
 182:armwave.c     **** 
 2891              		.loc 1 182 17 view .LVU757
 2892              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2893              		.loc 1 184 19 is_stmt 0 view .LVU758
 2894 0cd4 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2895              	@ armwave.c:182:                 wave_word >>= 8;
 182:armwave.c     **** 
 2896              		.loc 1 182 27 view .LVU759
 2897 0cd8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2898              	.LVL195:
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2899              		.loc 1 184 17 is_stmt 1 view .LVU760
 2900              	@ armwave.c:184:                 if(value != 0) {
 184:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2901              		.loc 1 184 19 is_stmt 0 view .LVU761
 2902 0cdc F9FFFF0A 		beq	.L164		@,
 2903              	.L180:
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2904              		.loc 1 185 21 is_stmt 1 view .LVU762
 2905              	.LVL196:
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2906              		.loc 1 186 21 view .LVU763
 187:armwave.c     **** 
 2907              		.loc 1 187 21 view .LVU764
 189:armwave.c     ****                     g = MIN(gg, 255);
 2908              		.loc 1 189 21 view .LVU765
 190:armwave.c     ****                     b = MIN(bb, 255);
 2909              		.loc 1 190 21 view .LVU766
 191:armwave.c     **** 
 2910              		.loc 1 191 21 view .LVU767
 194:armwave.c     **** 
 2911              		.loc 1 194 21 view .LVU768
 2912              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2913              		.loc 1 209 32 is_stmt 0 view .LVU769
 2914 0ce0 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.124
 2915              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2916              		.loc 1 210 41 view .LVU770
 2917 0ce4 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2918              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2919              		.loc 1 209 40 view .LVU771
 2920 0ce8 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2921              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2922              		.loc 1 210 41 view .LVU772
 2923 0cec 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2924              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2925              		.loc 1 187 55 view .LVU773
 2926 0cf0 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2927              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2928              		.loc 1 209 40 view .LVU774
 2929 0cf4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2930              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2931              		.loc 1 210 46 view .LVU775
 2932 0cf8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2933              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2934              		.loc 1 186 55 view .LVU776
 2935 0cfc 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2936              	@ armwave.c:187:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 187:armwave.c     **** 
 2937              		.loc 1 187 24 view .LVU777
 2938 0d00 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2939              	.LVL197:
 2940              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2941              		.loc 1 191 25 view .LVU778
 2942 0d04 FF0053E3 		cmp	r3, #255	@ bb,
 2943              	@ armwave.c:186:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2944              		.loc 1 186 24 view .LVU779
 2945 0d08 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2946              	.LVL198:
 2947              	@ armwave.c:191:                     b = MIN(bb, 255);
 191:armwave.c     **** 
 2948              		.loc 1 191 25 view .LVU780
 2949 0d0c FF30A0A3 		movge	r3, #255	@ bb,
 2950              	.LVL199:
 2951              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2952              		.loc 1 209 40 view .LVU781
 2953 0d10 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2954              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2955              		.loc 1 210 46 view .LVU782
 2956 0d14 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2957              	@ armwave.c:190:                     g = MIN(gg, 255);
 190:armwave.c     ****                     b = MIN(bb, 255);
 2958              		.loc 1 190 25 view .LVU783
 2959 0d18 FF0052E3 		cmp	r2, #255	@ gg,
 2960 0d1c FF20A0A3 		movge	r2, #255	@ gg,
 2961              	.LVL200:
 2962              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2963              		.loc 1 185 55 view .LVU784
 2964 0d20 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2965              	.LVL201:
 2966              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2967              		.loc 1 194 56 view .LVU785
 2968 0d24 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2969              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2970              		.loc 1 194 44 view .LVU786
 2971 0d28 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2972              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2973              		.loc 1 209 24 view .LVU787
 2974 0d2c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2975              	@ armwave.c:185:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 185:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2976              		.loc 1 185 24 view .LVU788
 2977 0d30 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2978              	.LVL202:
 2979              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2980              		.loc 1 194 56 view .LVU789
 2981 0d34 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2982              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2983              		.loc 1 194 44 view .LVU790
 2984 0d38 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2985              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2986              		.loc 1 189 25 view .LVU791
 2987 0d3c FF0051E3 		cmp	r1, #255	@ rr,
 2988              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 2989              		.loc 1 194 51 view .LVU792
 2990 0d40 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2991              	@ armwave.c:189:                     r = MIN(rr, 255);
 189:armwave.c     ****                     g = MIN(gg, 255);
 2992              		.loc 1 189 25 view .LVU793
 2993 0d44 FF10A0A3 		movge	r1, #255	@ rr,
 2994              	.LVL203:
 2995              	@ armwave.c:209:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2996              		.loc 1 209 24 view .LVU794
 2997 0d48 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2998              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 2999              		.loc 1 210 24 view .LVU795
 3000 0d4c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 3001              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 3002              		.loc 1 194 62 view .LVU796
 3003 0d50 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3004 0d54 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 3005              	@ armwave.c:194:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 194:armwave.c     **** 
 3006              		.loc 1 194 26 view .LVU797
 3007 0d58 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 3008              	.LVL204:
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3009              		.loc 1 208 21 is_stmt 1 view .LVU798
 209:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3010              		.loc 1 209 21 view .LVU799
 210:armwave.c     ****                     xx = (nsub >> 8);
 3011              		.loc 1 210 21 view .LVU800
 211:armwave.c     **** 
 3012              		.loc 1 211 21 view .LVU801
 3013              	@ armwave.c:211:                     xx = (nsub >> 8);
 211:armwave.c     **** 
 3014              		.loc 1 211 32 is_stmt 0 view .LVU802
 3015 0d5c 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.124,
 3016              	.LVL205:
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3017              		.loc 1 213 21 is_stmt 1 view .LVU803
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3018              		.loc 1 213 21 is_stmt 0 view .LVU804
 3019 0d60 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3020              	@ armwave.c:210:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 210:armwave.c     ****                     xx = (nsub >> 8);
 3021              		.loc 1 210 24 view .LVU805
 3022 0d64 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3023              	.LVL206:
 3024              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3025              		.loc 1 213 21 view .LVU806
 3026 0d68 02005EE1 		cmp	lr, r2	@ yy, ye
 3027 0d6c D5FFFF2A 		bcs	.L164		@,
 3028 0d70 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3029              	.LVL207:
 3030              	.L165:
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3031              		.loc 1 214 25 is_stmt 1 view .LVU807
 215:armwave.c     ****                     }
 3032              		.loc 1 215 25 view .LVU808
 3033              	@ armwave.c:214:                         offset = (xx + (y * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3034              		.loc 1 214 43 is_stmt 0 view .LVU809
 3035 0d74 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3036              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3037              		.loc 1 213 21 view .LVU810
 3038 0d78 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3039              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 3040              		.loc 1 215 43 view .LVU811
 3041 0d7c 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 3042              	.LVL208:
 3043              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3044              		.loc 1 213 42 view .LVU812
 3045 0d80 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3046              	.LVL209:
 3047              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3048              		.loc 1 213 21 view .LVU813
 3049 0d84 0E0050E1 		cmp	r0, lr	@ ye, yy
 3050              	@ armwave.c:215:                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 3051              		.loc 1 215 53 view .LVU814
 3052 0d88 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3053              	@ armwave.c:213:                     for(y = yy; y < ye; y++) {
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3054              		.loc 1 213 21 view .LVU815
 3055 0d8c F8FFFF1A 		bne	.L165		@,
 213:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3056              		.loc 1 213 21 view .LVU816
 3057 0d90 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3058 0d94 CBFFFFEA 		b	.L164		@
 3059              	.LVL210:
 3060              	.L179:
 168:armwave.c     **** 
 3061              		.loc 1 168 5 is_stmt 1 view .LVU817
 3062 0d98 10309FE5 		ldr	r3, .L181+4	@,
 3063 0d9c A820A0E3 		mov	r2, #168	@,
 3064 0da0 0C109FE5 		ldr	r1, .L181+8	@,
 3065 0da4 0C009FE5 		ldr	r0, .L181+12	@,
 3066              	.LVL211:
 168:armwave.c     **** 
 3067              		.loc 1 168 5 is_stmt 0 view .LVU818
 3068 0da8 FEFFFFEB 		bl	__assert_fail		@
 3069              	.LVL212:
 3070              	.L182:
 3071              		.align	2
 3072              	.L181:
 3073 0dac 00000000 		.word	g_armwave_state
 3074 0db0 00000000 		.word	.LANCHOR0
 3075 0db4 20000000 		.word	.LC2
 3076 0db8 2C000000 		.word	.LC3
 3077              	.LBE44:
 3078              	.LBE46:
 3079              		.cfi_endproc
 3080              	.LFE72:
 3082              		.align	2
 3083              		.global	armwave_test_buffer_alloc
 3084              		.syntax unified
 3085              		.arm
 3086              		.fpu vfp
 3088              	armwave_test_buffer_alloc:
 3089              	.LVL213:
 3090              	.LFB73:
 465:armwave.c     **** 
 466:armwave.c     **** /*
 467:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 468:armwave.c     ****  */
 469:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 470:armwave.c     **** {
 3091              		.loc 1 470 1 is_stmt 1 view -0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 0
 3094              		@ frame_needed = 0, uses_anonymous_args = 0
 471:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3095              		.loc 1 471 5 view .LVU820
 3096              	@ armwave.c:470: {
 470:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3097              		.loc 1 470 1 is_stmt 0 view .LVU821
 3098 0dbc 70402DE9 		push	{r4, r5, r6, lr}	@
 3099              		.cfi_def_cfa_offset 16
 3100              		.cfi_offset 4, -16
 3101              		.cfi_offset 5, -12
 3102              		.cfi_offset 6, -8
 3103              		.cfi_offset 14, -4
 3104              	@ armwave.c:470: {
 470:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3105              		.loc 1 470 1 view .LVU822
 3106 0dc0 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3107              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 3108              		.loc 1 471 23 view .LVU823
 3109 0dc4 44409FE5 		ldr	r4, .L190	@ tmp128,
 3110 0dc8 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3111              	.LVL214:
 3112              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 3113              		.loc 1 471 7 view .LVU824
 3114 0dcc 000050E3 		cmp	r0, #0	@ _1,
 3115 0dd0 0000000A 		beq	.L184		@,
 472:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3116              		.loc 1 472 9 is_stmt 1 view .LVU825
 3117 0dd4 FEFFFFEB 		bl	free		@
 3118              	.LVL215:
 3119              	.L184:
 473:armwave.c     ****     }
 474:armwave.c     **** 
 475:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 476:armwave.c     **** 
 477:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3120              		.loc 1 477 5 view .LVU826
 3121              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3122              		.loc 1 477 75 is_stmt 0 view .LVU827
 3123 0dd8 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3124 0ddc 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3125              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3126              		.loc 1 477 40 view .LVU828
 3127 0de0 0610A0E1 		mov	r1, r6	@, nsets
 3128              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3129              		.loc 1 477 75 view .LVU829
 3130 0de4 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3131              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3132              		.loc 1 477 40 view .LVU830
 3133 0de8 0500A0E1 		mov	r0, r5	@, _4
 3134 0dec FEFFFFEB 		bl	calloc		@
 3135              	.LVL216:
 3136              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 478:armwave.c     **** 
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3137              		.loc 1 479 7 view .LVU831
 3138 0df0 000050E3 		cmp	r0, #0	@ tmp124,
 3139              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3140              		.loc 1 477 38 view .LVU832
 3141 0df4 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3142              		.loc 1 479 5 is_stmt 1 view .LVU833
 3143              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 3144              		.loc 1 479 7 is_stmt 0 view .LVU834
 3145 0df8 7080BD18 		popne	{r4, r5, r6, pc}	@
 480:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3146              		.loc 1 480 9 is_stmt 1 view .LVU835
 3147 0dfc 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3148 0e00 0620A0E1 		mov	r2, r6	@, nsets
 3149 0e04 08009FE5 		ldr	r0, .L190+4	@,
 3150              	@ armwave.c:484: }
 481:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 482:armwave.c     ****         return;
 483:armwave.c     ****     }
 484:armwave.c     **** }
 3151              		.loc 1 484 1 is_stmt 0 view .LVU836
 3152 0e08 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3153              		.cfi_restore 14
 3154              		.cfi_restore 6
 3155              		.cfi_restore 5
 3156              		.cfi_restore 4
 3157              		.cfi_def_cfa_offset 0
 3158              	.LVL217:
 3159              	@ armwave.c:480:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 480:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3160              		.loc 1 480 9 view .LVU837
 3161 0e0c FEFFFFEA 		b	printf		@
 3162              	.LVL218:
 3163              	.L191:
 480:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3164              		.loc 1 480 9 view .LVU838
 3165              		.align	2
 3166              	.L190:
 3167 0e10 00000000 		.word	g_armwave_state
 3168 0e14 BC010000 		.word	.LC18
 3169              		.cfi_endproc
 3170              	.LFE73:
 3172              		.align	2
 3173              		.global	armwave_fill_pixbuf_into_pybuffer
 3174              		.syntax unified
 3175              		.arm
 3176              		.fpu vfp
 3178              	armwave_fill_pixbuf_into_pybuffer:
 3179              	.LVL219:
 3180              	.LFB74:
 485:armwave.c     **** 
 486:armwave.c     **** /*
 487:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 488:armwave.c     ****  */
 489:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 490:armwave.c     **** {
 3181              		.loc 1 490 1 is_stmt 1 view -0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 48
 3184              		@ frame_needed = 0, uses_anonymous_args = 0
 491:armwave.c     ****     Py_buffer buffer;
 3185              		.loc 1 491 5 view .LVU840
 492:armwave.c     ****     int ret;
 3186              		.loc 1 492 5 view .LVU841
 493:armwave.c     **** 
 494:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 495:armwave.c     **** 
 496:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3187              		.loc 1 496 5 view .LVU842
 3188              	@ armwave.c:490: {
 490:armwave.c     ****     Py_buffer buffer;
 3189              		.loc 1 490 1 is_stmt 0 view .LVU843
 3190 0e18 04E02DE5 		str	lr, [sp, #-4]!	@,
 3191              		.cfi_def_cfa_offset 4
 3192              		.cfi_offset 14, -4
 3193 0e1c 34D04DE2 		sub	sp, sp, #52	@,,
 3194              		.cfi_def_cfa_offset 56
 3195              	@ armwave.c:496:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3196              		.loc 1 496 11 view .LVU844
 3197 0e20 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3198 0e24 0120A0E3 		mov	r2, #1	@,
 3199 0e28 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3200              	.LVL220:
 497:armwave.c     **** 
 498:armwave.c     ****     if(ret != 0) {
 3201              		.loc 1 498 5 is_stmt 1 view .LVU845
 3202              	@ armwave.c:498:     if(ret != 0) {
 3203              		.loc 1 498 7 is_stmt 0 view .LVU846
 3204 0e2c 000050E3 		cmp	r0, #0	@,
 3205 0e30 0A00001A 		bne	.L196		@,
 499:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 500:armwave.c     ****         Py_RETURN_FALSE;
 501:armwave.c     ****     }
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 504:armwave.c     **** 
 505:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3206              		.loc 1 505 5 is_stmt 1 view .LVU847
 3207 0e34 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3208              	.LVL221:
 3209              		.loc 1 505 5 is_stmt 0 view .LVU848
 3210 0e38 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3211              	.LVL222:
 506:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 507:armwave.c     **** 
 508:armwave.c     ****     PyBuffer_Release(&buffer);
 3212              		.loc 1 508 5 is_stmt 1 view .LVU849
 3213 0e3c 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3214 0e40 FEFFFFEB 		bl	PyBuffer_Release		@
 3215              	.LVL223:
 509:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 510:armwave.c     **** 
 511:armwave.c     ****     Py_RETURN_TRUE;
 3216              		.loc 1 511 5 view .LVU850
 3217              	.LBB47:
 3218              	.LBI47:
 3219              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3220              		.loc 2 456 20 view .LVU851
 3221              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3222              		.loc 2 458 21 view .LVU852
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3223              		.loc 2 459 5 view .LVU853
 3224              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3225              		.loc 2 459 18 is_stmt 0 view .LVU854
 3226 0e44 38309FE5 		ldr	r3, .L197	@ tmp126,
 3227              	.LBE48:
 3228              	.LBE47:
 3229              	@ armwave.c:511:     Py_RETURN_TRUE;
 3230              		.loc 1 511 5 view .LVU855
 3231 0e48 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3232              	.LBB50:
 3233              	.LBB49:
 3234              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3235              		.loc 2 459 18 view .LVU856
 3236 0e4c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3237 0e50 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3238 0e54 002083E5 		str	r2, [r3]	@ tmp128,
 3239              	.LBE49:
 3240              	.LBE50:
 3241              	@ armwave.c:512: }
 512:armwave.c     **** }
 3242              		.loc 1 512 1 view .LVU857
 3243 0e58 34D08DE2 		add	sp, sp, #52	@,,
 3244              		.cfi_remember_state
 3245              		.cfi_def_cfa_offset 4
 3246              		@ sp needed	@
 3247 0e5c 04F09DE4 		ldr	pc, [sp], #4	@
 3248              	.LVL224:
 3249              	.L196:
 3250              		.cfi_restore_state
 499:armwave.c     ****         Py_RETURN_FALSE;
 3251              		.loc 1 499 9 is_stmt 1 view .LVU858
 3252 0e60 20009FE5 		ldr	r0, .L197+4	@,
 3253              	.LVL225:
 499:armwave.c     ****         Py_RETURN_FALSE;
 3254              		.loc 1 499 9 is_stmt 0 view .LVU859
 3255 0e64 FEFFFFEB 		bl	puts		@
 3256              	.LVL226:
 500:armwave.c     ****     }
 3257              		.loc 1 500 9 is_stmt 1 view .LVU860
 3258              	.LBB51:
 3259              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3260              		.loc 2 456 20 view .LVU861
 3261              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3262              		.loc 2 458 21 view .LVU862
 3263              		.loc 2 459 5 view .LVU863
 3264              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3265              		.loc 2 459 18 is_stmt 0 view .LVU864
 3266 0e68 1C309FE5 		ldr	r3, .L197+8	@ tmp120,
 3267              	.LBE52:
 3268              	.LBE51:
 3269              	@ armwave.c:500:         Py_RETURN_FALSE;
 500:armwave.c     ****     }
 3270              		.loc 1 500 9 view .LVU865
 3271 0e6c 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3272              	.LBB54:
 3273              	.LBB53:
 3274              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3275              		.loc 2 459 18 view .LVU866
 3276 0e70 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3277 0e74 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3278 0e78 002083E5 		str	r2, [r3]	@ tmp122,
 3279              	.LBE53:
 3280              	.LBE54:
 3281              	@ armwave.c:512: }
 3282              		.loc 1 512 1 view .LVU867
 3283 0e7c 34D08DE2 		add	sp, sp, #52	@,,
 3284              		.cfi_def_cfa_offset 4
 3285              		@ sp needed	@
 3286 0e80 04F09DE4 		ldr	pc, [sp], #4	@
 3287              	.L198:
 3288              		.align	2
 3289              	.L197:
 3290 0e84 00000000 		.word	_Py_TrueStruct
 3291 0e88 10020000 		.word	.LC19
 3292 0e8c 00000000 		.word	_Py_FalseStruct
 3293              		.cfi_endproc
 3294              	.LFE74:
 3296              		.align	2
 3297              		.global	armwave_test_create_am_sine
 3298              		.syntax unified
 3299              		.arm
 3300              		.fpu vfp
 3302              	armwave_test_create_am_sine:
 3303              	.LVL227:
 3304              	.LFB75:
 513:armwave.c     **** 
 514:armwave.c     **** /*
 515:armwave.c     ****  * Make a test AM waveform for render tests.
 516:armwave.c     ****  *
 517:armwave.c     ****  * @param   mod                     modulation depth
 518:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 519:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 520:armwave.c     ****  */
 521:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 522:armwave.c     **** {
 3305              		.loc 1 522 1 is_stmt 1 view -0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 8
 3308              		@ frame_needed = 0, uses_anonymous_args = 0
 523:armwave.c     ****     float v, noise, xnoise, mod_val;
 3309              		.loc 1 523 5 view .LVU869
 524:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3310              		.loc 1 524 5 view .LVU870
 3311              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3312              		.loc 1 522 1 is_stmt 0 view .LVU871
 3313 0e90 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3314              		.cfi_def_cfa_offset 32
 3315              		.cfi_offset 4, -32
 3316              		.cfi_offset 5, -28
 3317              		.cfi_offset 6, -24
 3318              		.cfi_offset 7, -20
 3319              		.cfi_offset 8, -16
 3320              		.cfi_offset 9, -12
 3321              		.cfi_offset 10, -8
 3322              		.cfi_offset 14, -4
 3323              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3324              		.loc 1 524 38 view .LVU872
 3325 0e94 7A7A9FED 		vldr.32	s14, .L230	@ tmp180,
 3326              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3327              		.loc 1 524 55 view .LVU873
 3328 0e98 00529FE5 		ldr	r5, .L230+28	@ tmp250,
 3329              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3330              		.loc 1 522 1 view .LVU874
 3331 0e9c 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3332              		.cfi_def_cfa_offset 80
 3333              		.cfi_offset 80, -80
 3334              		.cfi_offset 81, -76
 3335              		.cfi_offset 82, -72
 3336              		.cfi_offset 83, -68
 3337              		.cfi_offset 84, -64
 3338              		.cfi_offset 85, -60
 3339              		.cfi_offset 86, -56
 3340              		.cfi_offset 87, -52
 3341              		.cfi_offset 88, -48
 3342              		.cfi_offset 89, -44
 3343              		.cfi_offset 90, -40
 3344              		.cfi_offset 91, -36
 3345 0ea0 0090A0E1 		mov	r9, r0	@ sets, sets
 3346              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3347              		.loc 1 524 38 view .LVU875
 3348 0ea4 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3349              	@ armwave.c:528:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 525:armwave.c     ****     int s, set_offset = 0;
 526:armwave.c     ****     int w, x;
 527:armwave.c     **** 
 528:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3350              		.loc 1 528 70 view .LVU876
 3351 0ea8 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3352 0eac 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3353              	.LBB57:
 3354              	.LBB58:
 3355              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3356              		.loc 1 471 23 view .LVU877
 3357 0eb0 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3358              	.LVL228:
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3359              		.loc 1 471 23 view .LVU878
 3360              	.LBE58:
 3361              	.LBE57:
 3362              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 524:armwave.c     ****     int s, set_offset = 0;
 3363              		.loc 1 524 38 view .LVU879
 3364 0eb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3365              	@ armwave.c:528:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3366              		.loc 1 528 70 view .LVU880
 3367 0eb8 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3368              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3369              		.loc 1 522 1 view .LVU881
 3370 0ebc 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3371              	.LBB62:
 3372              	.LBB59:
 3373              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3374              		.loc 1 471 7 view .LVU882
 3375 0ec0 000050E3 		cmp	r0, #0	@ _82,
 3376              	.LBE59:
 3377              	.LBE62:
 3378              	@ armwave.c:522: {
 522:armwave.c     ****     float v, noise, xnoise, mod_val;
 3379              		.loc 1 522 1 view .LVU883
 3380 0ec4 08D04DE2 		sub	sp, sp, #8	@,,
 3381              		.cfi_def_cfa_offset 88
 3382              	@ armwave.c:529:     g_armwave_state.test_wave_buffer_nsets = sets;
 529:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3383              		.loc 1 529 44 view .LVU884
 3384 0ec8 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3385              	@ armwave.c:528:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 528:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3386              		.loc 1 528 45 view .LVU885
 3387 0ecc 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3388              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 524:armwave.c     ****     int s, set_offset = 0;
 3389              		.loc 1 524 38 view .LVU886
 3390 0ed0 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3391              	@ armwave.c:524:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 524:armwave.c     ****     int s, set_offset = 0;
 3392              		.loc 1 524 11 view .LVU887
 3393 0ed4 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3394              	.LVL229:
 525:armwave.c     ****     int w, x;
 3395              		.loc 1 525 5 is_stmt 1 view .LVU888
 526:armwave.c     **** 
 3396              		.loc 1 526 5 view .LVU889
 528:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3397              		.loc 1 528 5 view .LVU890
 3398              		.loc 1 529 5 view .LVU891
 530:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3399              		.loc 1 530 5 view .LVU892
 3400              	.LBB63:
 3401              	.LBI57:
 469:armwave.c     **** {
 3402              		.loc 1 469 6 view .LVU893
 3403              	.LBB60:
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3404              		.loc 1 471 5 view .LVU894
 3405              	@ armwave.c:471:     if(g_armwave_state.test_wave_buffer != NULL) {
 471:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3406              		.loc 1 471 7 is_stmt 0 view .LVU895
 3407 0ed8 0000000A 		beq	.L200		@,
 472:armwave.c     ****     }
 3408              		.loc 1 472 9 is_stmt 1 view .LVU896
 3409 0edc FEFFFFEB 		bl	free		@
 3410              	.LVL230:
 3411              	.L200:
 477:armwave.c     **** 
 3412              		.loc 1 477 5 view .LVU897
 3413              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3414              		.loc 1 477 75 is_stmt 0 view .LVU898
 3415 0ee0 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3416 0ee4 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3417              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3418              		.loc 1 477 40 view .LVU899
 3419 0ee8 0910A0E1 		mov	r1, r9	@, sets
 3420              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3421              		.loc 1 477 75 view .LVU900
 3422 0eec 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3423              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3424              		.loc 1 477 40 view .LVU901
 3425 0ef0 0400A0E1 		mov	r0, r4	@, _85
 3426 0ef4 FEFFFFEB 		bl	calloc		@
 3427              	.LVL231:
 3428              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3429              		.loc 1 479 7 view .LVU902
 3430 0ef8 000050E3 		cmp	r0, #0	@ tmp191,
 3431              	@ armwave.c:477:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 477:armwave.c     **** 
 3432              		.loc 1 477 38 view .LVU903
 3433 0efc 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3434              		.loc 1 479 5 is_stmt 1 view .LVU904
 3435              	@ armwave.c:479:     if(g_armwave_state.test_wave_buffer == NULL) {
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3436              		.loc 1 479 7 is_stmt 0 view .LVU905
 3437 0f00 5A00000A 		beq	.L229		@,
 3438              	.L201:
 3439              	.LVL232:
 479:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3440              		.loc 1 479 7 view .LVU906
 3441              	.LBE60:
 3442              	.LBE63:
 3443              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 531:armwave.c     **** 
 532:armwave.c     ****     for(s = 0; s < sets; s++) {
 3444              		.loc 1 532 5 discriminator 1 view .LVU907
 3445 0f04 000059E3 		cmp	r9, #0	@ sets,
 3446 0f08 550000DA 		ble	.L199		@,
 3447              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 533:armwave.c     ****         printf("Calculating test set %d\n", s);
 534:armwave.c     ****     
 535:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 536:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 537:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 538:armwave.c     **** 
 539:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 540:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 541:armwave.c     ****                 noise *= noise;
 542:armwave.c     ****                 noise *= noise;
 543:armwave.c     ****                 noise *= noise;
 544:armwave.c     **** 
 545:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 546:armwave.c     ****                     noise = -noise;
 547:armwave.c     **** 
 548:armwave.c     ****                 noise += 1.0f;
 549:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 550:armwave.c     **** 
 551:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3448              		.loc 1 551 45 view .LVU908
 3449 0f0c 5C8A9FED 		vldr.32	s16, .L230	@ tmp258,
 3450              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 552:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 553:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 554:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3451              		.loc 1 554 104 view .LVU909
 3452 0f10 5CCA9FED 		vldr.32	s24, .L230+4	@ tmp259,
 3453              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3454              		.loc 1 532 5 view .LVU910
 3455 0f14 0070A0E3 		mov	r7, #0	@ set_offset,
 3456              	@ armwave.c:533:         printf("Calculating test set %d\n", s);
 533:armwave.c     ****         printf("Calculating test set %d\n", s);
 3457              		.loc 1 533 9 view .LVU911
 3458 0f18 84A19FE5 		ldr	r10, .L230+32	@ tmp257,
 3459              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3460              		.loc 1 532 5 view .LVU912
 3461 0f1c 0780A0E1 		mov	r8, r7	@ s, set_offset
 3462              	.LVL233:
 3463              	.L202:
 533:armwave.c     ****         printf("Calculating test set %d\n", s);
 3464              		.loc 1 533 9 is_stmt 1 view .LVU913
 3465 0f20 0810A0E1 		mov	r1, r8	@, s
 3466 0f24 0A00A0E1 		mov	r0, r10	@, tmp257
 3467 0f28 FEFFFFEB 		bl	printf		@
 3468              	.LVL234:
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3469              		.loc 1 535 9 view .LVU914
 3470              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3471              		.loc 1 535 39 is_stmt 0 view .LVU915
 3472 0f2c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3473              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3474              		.loc 1 535 9 view .LVU916
 3475 0f30 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3476 0f34 450000DA 		ble	.L203		@,
 3477              	@ armwave.c:537:             mod_val = 0.5f + (_1_waves_mod * w);
 537:armwave.c     **** 
 3478              		.loc 1 537 21 view .LVU917
 3479 0f38 53CADFED 		vldr.32	s25, .L230+8	@ tmp200,
 3480              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3481              		.loc 1 551 33 view .LVU918
 3482 0f3c 53BA9FED 		vldr.32	s22, .L230+12	@ tmp253,
 3483              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3484              		.loc 1 549 24 view .LVU919
 3485 0f40 53AADFED 		vldr.32	s21, .L230+16	@ tmp254,
 3486 0f44 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3487              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3488              		.loc 1 535 15 view .LVU920
 3489 0f48 0060A0E3 		mov	r6, #0	@ w,
 3490              	.LVL235:
 3491              	.L210:
 537:armwave.c     **** 
 3492              		.loc 1 537 13 is_stmt 1 view .LVU921
 3493              	@ armwave.c:537:             mod_val = 0.5f + (_1_waves_mod * w);
 537:armwave.c     **** 
 3494              		.loc 1 537 21 is_stmt 0 view .LVU922
 3495 0f4c 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3496 0f50 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3497              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3498              		.loc 1 539 13 view .LVU923
 3499 0f54 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3500              	@ armwave.c:537:             mod_val = 0.5f + (_1_waves_mod * w);
 537:armwave.c     **** 
 3501              		.loc 1 537 21 view .LVU924
 3502 0f58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3503 0f5c 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3504              	.LVL236:
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3505              		.loc 1 539 13 is_stmt 1 view .LVU925
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3506              		.loc 1 539 13 is_stmt 0 view .LVU926
 3507 0f60 370000DA 		ble	.L204		@,
 3508 0f64 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3509              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3510              		.loc 1 554 113 view .LVU927
 3511 0f68 4AAA9FED 		vldr.32	s20, .L230+20	@ tmp229,
 3512 0f6c 4A8ADFED 		vldr.32	s17, .L230+24	@ tmp230,
 3513              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3514              		.loc 1 539 19 view .LVU928
 3515 0f70 0040A0E3 		mov	r4, #0	@ x,
 3516              	.LVL237:
 3517              	.L209:
 540:armwave.c     ****                 noise *= noise;
 3518              		.loc 1 540 17 is_stmt 1 view .LVU929
 3519              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3520              		.loc 1 540 28 is_stmt 0 view .LVU930
 3521 0f74 FEFFFFEB 		bl	rand		@
 3522              	.LVL238:
 3523              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3524              		.loc 1 540 35 view .LVU931
 3525 0f78 7000FFE6 		uxth	r0, r0	@ tmp201,
 3526              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3527              		.loc 1 540 45 view .LVU932
 3528 0f7c 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3529 0f80 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3530              	@ armwave.c:540:                 noise  = ((rand() & 0xffff) * noise_fraction);
 540:armwave.c     ****                 noise *= noise;
 3531              		.loc 1 540 24 view .LVU933
 3532 0f84 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3533              	.LVL239:
 541:armwave.c     ****                 noise *= noise;
 3534              		.loc 1 541 17 is_stmt 1 view .LVU934
 3535              	@ armwave.c:541:                 noise *= noise;
 541:armwave.c     ****                 noise *= noise;
 3536              		.loc 1 541 23 is_stmt 0 view .LVU935
 3537 0f88 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3538              	.LVL240:
 542:armwave.c     ****                 noise *= noise;
 3539              		.loc 1 542 17 is_stmt 1 view .LVU936
 3540              	@ armwave.c:542:                 noise *= noise;
 542:armwave.c     ****                 noise *= noise;
 3541              		.loc 1 542 23 is_stmt 0 view .LVU937
 3542 0f8c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3543              	.LVL241:
 543:armwave.c     **** 
 3544              		.loc 1 543 17 is_stmt 1 view .LVU938
 3545              	@ armwave.c:543:                 noise *= noise;
 543:armwave.c     **** 
 3546              		.loc 1 543 23 is_stmt 0 view .LVU939
 3547 0f90 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3548              	.LVL242:
 545:armwave.c     ****                     noise = -noise;
 3549              		.loc 1 545 17 is_stmt 1 view .LVU940
 3550              	@ armwave.c:545:                 if((rand() & 0xffff) > 0x7fff)
 545:armwave.c     ****                     noise = -noise;
 3551              		.loc 1 545 21 is_stmt 0 view .LVU941
 3552 0f94 FEFFFFEB 		bl	rand		@
 3553              	.LVL243:
 546:armwave.c     **** 
 3554              		.loc 1 546 21 is_stmt 1 view .LVU942
 3555              	@ armwave.c:545:                 if((rand() & 0xffff) > 0x7fff)
 545:armwave.c     ****                     noise = -noise;
 3556              		.loc 1 545 19 is_stmt 0 view .LVU943
 3557 0f98 020910E3 		tst	r0, #32768	@,
 3558              	@ armwave.c:546:                     noise = -noise;
 546:armwave.c     **** 
 3559              		.loc 1 546 27 view .LVU944
 3560 0f9c 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3561              	.LVL244:
 548:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3562              		.loc 1 548 17 is_stmt 1 view .LVU945
 549:armwave.c     **** 
 3563              		.loc 1 549 17 view .LVU946
 3564              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3565              		.loc 1 549 27 is_stmt 0 view .LVU947
 3566 0fa0 FEFFFFEB 		bl	rand		@
 3567              	.LVL245:
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3568              		.loc 1 551 17 is_stmt 1 view .LVU948
 3569              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3570              		.loc 1 551 45 is_stmt 0 view .LVU949
 3571 0fa4 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3572              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3573              		.loc 1 551 33 view .LVU950
 3574 0fa8 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3575              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3576              		.loc 1 551 45 view .LVU951
 3577 0fac C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3578              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3579              		.loc 1 551 33 view .LVU952
 3580 0fb0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3581              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3582              		.loc 1 551 45 view .LVU953
 3583 0fb4 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3584              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3585              		.loc 1 551 33 view .LVU954
 3586 0fb8 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3587              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3588              		.loc 1 549 34 view .LVU955
 3589 0fbc 7000FFE6 		uxth	r0, r0	@ tmp214,
 3590              	.LVL246:
 3591              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3592              		.loc 1 549 44 view .LVU956
 3593 0fc0 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3594 0fc4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3595              	@ armwave.c:549:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 549:armwave.c     **** 
 3596              		.loc 1 549 24 view .LVU957
 3597 0fc8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3598              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3599              		.loc 1 551 77 view .LVU958
 3600 0fcc A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3601              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3602              		.loc 1 551 22 view .LVU959
 3603 0fd0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3604 0fd4 FEFFFFEB 		bl	sin		@
 3605              	.LVL247:
 3606              		.loc 1 554 17 is_stmt 1 view .LVU960
 3607              	@ armwave.c:548:                 noise += 1.0f;
 548:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3608              		.loc 1 548 23 is_stmt 0 view .LVU961
 3609 0fd8 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3610              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3611              		.loc 1 554 104 view .LVU962
 3612 0fdc 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3613              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3614              		.loc 1 551 98 view .LVU963
 3615 0fe0 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3616              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3617              		.loc 1 551 87 view .LVU964
 3618 0fe4 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3619              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3620              		.loc 1 551 98 view .LVU965
 3621 0fe8 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3622              	@ armwave.c:551:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3623              		.loc 1 551 19 view .LVU966
 3624 0fec C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3625              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3626              		.loc 1 554 113 view .LVU967
 3627 0ff0 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3628 0ff4 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3629 0ff8 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3630 0ffc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3631 1000 050000DA 		ble	.L206		@,
 3632              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3633              		.loc 1 554 104 discriminator 1 view .LVU968
 3634 1004 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3635 1008 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3636 100c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3637 1010 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3638 1014 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3639 1018 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3640              	.L206:
 3641              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3642              		.loc 1 554 57 discriminator 12 view .LVU969
 3643 101c 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3644              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3645              		.loc 1 554 102 discriminator 12 view .LVU970
 3646 1020 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3647 1024 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3648 1028 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3649              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3650              		.loc 1 539 58 discriminator 12 view .LVU971
 3651 102c 014084E2 		add	r4, r4, #1	@ x, x,
 3652              	.LVL248:
 3653              	@ armwave.c:554:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3654              		.loc 1 554 102 discriminator 12 view .LVU972
 3655 1030 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3656              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3657              		.loc 1 539 43 discriminator 12 view .LVU973
 3658 1034 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3659              	@ armwave.c:539:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 539:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3660              		.loc 1 539 13 discriminator 12 view .LVU974
 3661 1038 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3662 103c CCFFFFCA 		bgt	.L209		@,
 3663 1040 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3664              	.LVL249:
 3665              	.L204:
 3666              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3667              		.loc 1 535 48 discriminator 2 view .LVU975
 3668 1044 016086E2 		add	r6, r6, #1	@ w, w,
 3669              	.LVL250:
 3670              	@ armwave.c:535:         for(w = 0; w < g_armwave_state.waves; w++) {
 535:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3671              		.loc 1 535 9 discriminator 2 view .LVU976
 3672 1048 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3673 104c BEFFFFBA 		blt	.L210		@,
 3674              	.LVL251:
 3675              	.L203:
 555:armwave.c     ****             }
 556:armwave.c     ****         }
 557:armwave.c     **** 
 558:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3676              		.loc 1 558 9 is_stmt 1 discriminator 2 view .LVU977
 3677              	@ armwave.c:558:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3678              		.loc 1 558 46 is_stmt 0 discriminator 2 view .LVU978
 3679 1050 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3680              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3681              		.loc 1 532 27 discriminator 2 view .LVU979
 3682 1054 018088E2 		add	r8, r8, #1	@ s, s,
 3683              	.LVL252:
 3684              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3685              		.loc 1 532 5 discriminator 2 view .LVU980
 3686 1058 080059E1 		cmp	r9, r8	@ sets, s
 3687              	@ armwave.c:558:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3688              		.loc 1 558 20 discriminator 2 view .LVU981
 3689 105c 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3690              	.LVL253:
 3691              	@ armwave.c:532:     for(s = 0; s < sets; s++) {
 532:armwave.c     ****         printf("Calculating test set %d\n", s);
 3692              		.loc 1 532 5 discriminator 2 view .LVU982
 3693 1060 AEFFFF1A 		bne	.L202		@,
 3694              	.LVL254:
 3695              	.L199:
 3696              	@ armwave.c:560: }
 559:armwave.c     ****     }
 560:armwave.c     **** }
 3697              		.loc 1 560 1 view .LVU983
 3698 1064 08D08DE2 		add	sp, sp, #8	@,,
 3699              		.cfi_remember_state
 3700              		.cfi_def_cfa_offset 80
 3701              		@ sp needed	@
 3702 1068 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3703              		.cfi_restore 90
 3704              		.cfi_restore 91
 3705              		.cfi_restore 88
 3706              		.cfi_restore 89
 3707              		.cfi_restore 86
 3708              		.cfi_restore 87
 3709              		.cfi_restore 84
 3710              		.cfi_restore 85
 3711              		.cfi_restore 82
 3712              		.cfi_restore 83
 3713              		.cfi_restore 80
 3714              		.cfi_restore 81
 3715              		.cfi_def_cfa_offset 32
 3716              	.LVL255:
 3717              		.loc 1 560 1 view .LVU984
 3718 106c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3719              	.LVL256:
 3720              	.L229:
 3721              		.cfi_restore_state
 3722              	.LBB64:
 3723              	.LBB61:
 480:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3724              		.loc 1 480 9 is_stmt 1 view .LVU985
 3725 1070 940901E0 		mul	r1, r4, r9	@, _85, sets
 3726 1074 0920A0E1 		mov	r2, r9	@, sets
 3727 1078 28009FE5 		ldr	r0, .L230+36	@,
 3728 107c FEFFFFEB 		bl	printf		@
 3729              	.LVL257:
 482:armwave.c     ****     }
 3730              		.loc 1 482 9 view .LVU986
 3731 1080 9FFFFFEA 		b	.L201		@
 3732              	.L231:
 3733              		.align	2
 3734              	.L230:
 3735 1084 0000803F 		.word	1065353216
 3736 1088 00007F43 		.word	1132396544
 3737 108c 0000003F 		.word	1056964608
 3738 1090 C3F5C840 		.word	1086911939
 3739 1094 38FFC74A 		.word	1254620984
 3740 1098 0000FE42 		.word	1123942400
 3741 109c 00000043 		.word	1124073472
 3742 10a0 00000000 		.word	g_armwave_state
 3743 10a4 64020000 		.word	.LC20
 3744 10a8 BC010000 		.word	.LC18
 3745              	.LBE61:
 3746              	.LBE64:
 3747              		.cfi_endproc
 3748              	.LFE75:
 3750              		.align	2
 3751              		.global	armwave_cleanup
 3752              		.syntax unified
 3753              		.arm
 3754              		.fpu vfp
 3756              	armwave_cleanup:
 3757              	.LFB76:
 561:armwave.c     **** 
 562:armwave.c     **** /*
 563:armwave.c     ****  * Make a test square waveform.
 564:armwave.c     ****  *
 565:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 566:armwave.c     ****  */
 567:armwave.c     **** #if 0
 568:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 569:armwave.c     **** {
 570:armwave.c     ****     uint8_t v;
 571:armwave.c     ****     float noise, xnoise;
 572:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 573:armwave.c     ****     int w, x;
 574:armwave.c     **** 
 575:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 577:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 578:armwave.c     ****             noise *= noise;
 579:armwave.c     ****             noise *= noise;
 580:armwave.c     ****             noise *= noise;
 581:armwave.c     **** 
 582:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 583:armwave.c     ****                 noise = -noise;
 584:armwave.c     **** 
 585:armwave.c     ****             //noise += 1.0f;
 586:armwave.c     **** 
 587:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 588:armwave.c     ****                 new_level = 0.2f;
 589:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 590:armwave.c     ****                 new_level = 0.8f;
 591:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 592:armwave.c     ****                 new_level = 0.2f;
 593:armwave.c     ****             } else {
 594:armwave.c     ****                 new_level = 0.8f;
 595:armwave.c     ****             }
 596:armwave.c     **** 
 597:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 598:armwave.c     **** 
 599:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 600:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 601:armwave.c     ****         }
 602:armwave.c     ****     }
 603:armwave.c     **** }
 604:armwave.c     **** #endif
 605:armwave.c     **** 
 606:armwave.c     **** /*
 607:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 608:armwave.c     ****  */
 609:armwave.c     **** void armwave_cleanup()
 610:armwave.c     **** {
 3758              		.loc 1 610 1 view -0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
 611:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3762              		.loc 1 611 5 view .LVU988
 3763              	@ armwave.c:610: {
 610:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3764              		.loc 1 610 1 is_stmt 0 view .LVU989
 3765 10ac 10402DE9 		push	{r4, lr}	@
 3766              		.cfi_def_cfa_offset 8
 3767              		.cfi_offset 4, -8
 3768              		.cfi_offset 14, -4
 3769              	@ armwave.c:611:     free(g_armwave_state.out_pixbuf);
 3770              		.loc 1 611 25 view .LVU990
 3771 10b0 34409FE5 		ldr	r4, .L234	@ tmp114,
 3772              	@ armwave.c:611:     free(g_armwave_state.out_pixbuf);
 3773              		.loc 1 611 5 view .LVU991
 3774 10b4 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3775 10b8 FEFFFFEB 		bl	free		@
 3776              	.LVL258:
 612:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3777              		.loc 1 612 5 is_stmt 1 view .LVU992
 3778 10bc 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3779 10c0 FEFFFFEB 		bl	free		@
 3780              	.LVL259:
 613:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3781              		.loc 1 613 5 view .LVU993
 3782 10c4 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3783 10c8 FEFFFFEB 		bl	free		@
 3784              	.LVL260:
 614:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3785              		.loc 1 614 5 view .LVU994
 3786 10cc 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3787 10d0 FEFFFFEB 		bl	free		@
 3788              	.LVL261:
 615:armwave.c     **** 
 616:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3789              		.loc 1 616 5 view .LVU995
 3790              	@ armwave.c:616:     g_armwave_state.out_pixbuf = NULL;
 3791              		.loc 1 616 32 is_stmt 0 view .LVU996
 3792 10d4 0030A0E3 		mov	r3, #0	@ tmp123,
 3793 10d8 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 617:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3794              		.loc 1 617 5 is_stmt 1 view .LVU997
 3795              	@ armwave.c:617:     g_armwave_state.ch1_buffer = NULL;
 3796              		.loc 1 617 32 is_stmt 0 view .LVU998
 3797 10dc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 618:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3798              		.loc 1 618 5 is_stmt 1 view .LVU999
 3799              	@ armwave.c:618:     g_armwave_state.xcoord_to_xpixel = NULL;
 3800              		.loc 1 618 38 is_stmt 0 view .LVU1000
 3801 10e0 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 619:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3802              		.loc 1 619 5 is_stmt 1 view .LVU1001
 3803              	@ armwave.c:619:     g_armwave_state.test_wave_buffer = NULL;
 3804              		.loc 1 619 38 is_stmt 0 view .LVU1002
 3805 10e4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3806              	@ armwave.c:620: }
 620:armwave.c     **** }
 3807              		.loc 1 620 1 view .LVU1003
 3808 10e8 1080BDE8 		pop	{r4, pc}	@
 3809              	.L235:
 3810              		.align	2
 3811              	.L234:
 3812 10ec 00000000 		.word	g_armwave_state
 3813              		.cfi_endproc
 3814              	.LFE76:
 3816              		.comm	gamma_table,256,4
 3817              		.comm	g_armwave_state,136,4
 3818              		.section	.rodata
 3819              		.align	2
 3820              		.set	.LANCHOR0,. + 0
 3823              	__PRETTY_FUNCTION__.17095:
 3824 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3824      6176655F 
 3824      66696C6C 
 3824      5F706978 
 3824      6275665F 
 3825 001b 00       		.space	1
 3828              	__PRETTY_FUNCTION__.17117:
 3829 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3829      6176655F 
 3829      73657475 
 3829      705F7265 
 3829      6E646572 
 3830 0031 000000   		.space	3
 3833              	__PRETTY_FUNCTION__.17124:
 3834 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3834      6176655F 
 3834      7365745F 
 3834      77617665 
 3834      5F706F69 
 3835 004d 000000   		.space	3
 3838              	__PRETTY_FUNCTION__.17131:
 3839 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3839      6176655F 
 3839      7365745F 
 3839      77617665 
 3839      5F706F69 
 3840              		.section	.rodata.str1.4,"aMS",%progbits,1
 3841              		.align	2
 3842              	.LC0:
 3843 0000 76302E30 		.ascii	"v0.0.1\000"
 3843      2E3100
 3844 0007 00       		.space	1
 3845              	.LC1:
 3846 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3846      61766520 
 3846      76657273 
 3846      696F6E3A 
 3846      2025730A 
 3847 001d 000000   		.space	3
 3848              	.LC2:
 3849 0020 61726D77 		.ascii	"armwave.c\000"
 3849      6176652E 
 3849      6300
 3850 002a 0000     		.space	2
 3851              	.LC3:
 3852 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3852      62756666 
 3852      65722021 
 3852      3D204E55 
 3852      4C4C00
 3853 003f 00       		.space	1
 3854              	.LC4:
 3855 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3855      20653D25 
 3855      6420773D 
 3855      25642077 
 3855      733D2564 
 3856              	.LC5:
 3857 006c 73746172 		.ascii	"start_point < end_point\000"
 3857      745F706F 
 3857      696E7420 
 3857      3C20656E 
 3857      645F706F 
 3858              	.LC6:
 3859 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3859      7566665F 
 3859      73697A65 
 3859      3D25642C 
 3859      20636D70 
 3860 00b6 00       		.ascii	"\000"
 3861 00b7 00       		.space	1
 3862              	.LC7:
 3863 00b8 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3863      6D776176 
 3863      655F7374 
 3863      6174652E 
 3863      6368315F 
 3864 00db 00       		.space	1
 3865              	.LC8:
 3866 00dc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3866      6D776176 
 3866      655F7374 
 3866      6174652E 
 3866      78636F6F 
 3867 0105 000000   		.space	3
 3868              	.LC9:
 3869 0108 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3869      3A203078 
 3869      25303878 
 3869      20307825 
 3869      30387820 
 3870              	.LC10:
 3871 012c 77617665 		.ascii	"wave_buffer != NULL\000"
 3871      5F627566 
 3871      66657220 
 3871      213D204E 
 3871      554C4C00 
 3872              	.LC11:
 3873 0140 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3873      6176655F 
 3873      7365745F 
 3873      77617665 
 3873      5F706F69 
 3874 0173 78636565 		.ascii	"xceeded\000"
 3874      64656400 
 3875 017b 00       		.space	1
 3876              	.LC12:
 3877 017c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3877      5F627566 
 3877      6665725F 
 3877      70747220 
 3877      213D2030 
 3878 0191 000000   		.space	3
 3879              	.LC13:
 3880 0194 776200   		.ascii	"wb\000"
 3881 0197 00       		.space	1
 3882              	.LC14:
 3883 0198 50330A00 		.ascii	"P3\012\000"
 3884              	.LC15:
 3885 019c 25642025 		.ascii	"%d %d\012\000"
 3885      640A00
 3886 01a3 00       		.space	1
 3887              	.LC16:
 3888 01a4 3235350A 		.ascii	"255\012\000"
 3888      00
 3889 01a9 000000   		.space	3
 3890              	.LC17:
 3891 01ac 25336420 		.ascii	"%3d %3d %3d\012\000"
 3891      25336420 
 3891      2533640A 
 3891      00
 3892 01b9 000000   		.space	3
 3893              	.LC18:
 3894 01bc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3894      6176655F 
 3894      74657374 
 3894      5F627566 
 3894      6665725F 
 3895 01ef 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3895      20627566 
 3895      66657220 
 3895      28256420 
 3895      62797465 
 3896              	.LC19:
 3897 0210 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3897      6176655F 
 3897      66696C6C 
 3897      5F706978 
 3897      6275665F 
 3898 0243 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3898      20666169 
 3898      6C65642C 
 3898      20726574 
 3898      75726E69 
 3899 0262 0000     		.space	2
 3900              	.LC20:
 3901 0264 43616C63 		.ascii	"Calculating test set %d\012\000"
 3901      756C6174 
 3901      696E6720 
 3901      74657374 
 3901      20736574 
 3902              		.text
 3903              	.Letext0:
 3904              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3905              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3906              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3907              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3908              		.file 7 "/usr/include/stdio.h"
 3909              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3910              		.file 9 "/usr/include/errno.h"
 3911              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3912              		.file 11 "/usr/include/unistd.h"
 3913              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3914              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3915              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3916              		.file 15 "/usr/include/math.h"
 3917              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3918              		.file 17 "/usr/include/time.h"
 3919              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3920              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3921              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3922              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3923              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3924              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3925              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3926              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3927              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3928              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3929              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3930              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3931              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3932              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3933              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3934              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3935              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3936              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3937              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3938              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3939              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3940              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3941              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3942              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3943              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3944              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3945              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3946              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3947              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3948              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3949              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3950              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3951              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3952              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3953              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3954              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3955              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3956              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3957              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3958              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3959              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3960              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3961              		.file 60 "/usr/local/include/python3.8/context.h"
 3962              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3963              		.file 62 "/usr/local/include/python3.8/code.h"
 3964              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3965              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3966              		.file 65 "/usr/local/include/python3.8/import.h"
 3967              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3968              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3969              		.file 68 "/usr/include/malloc.h"
 3970              		.file 69 "armwave.h"
 3971              		.file 70 "/usr/include/stdlib.h"
 3972              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3973              		.file 72 "/usr/include/assert.h"
 3974              		.file 73 "<built-in>"
 3975              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
