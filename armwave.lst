   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.47, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.41, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.41, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.47, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.42, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.41, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.48, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.41,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.42, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 351              		.loc 1 87 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 355              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.41, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.42,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.47, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.41, ivtmp.41, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.40, ivtmp.47
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  91:armwave.c     ****                 
 435              		.loc 1 91 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  91:armwave.c     ****                 
 470              		.loc 1 91 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  91:armwave.c     ****                 
 506              		.loc 1 91 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.42, ivtmp.42, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.47, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.47, ivtmp.47, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.47, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.48, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.48, ivtmp.48, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.48, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 555              		.loc 1 111 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 111 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 115:armwave.c     ****  * Rows are repeated as necessary.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 118:armwave.c     **** {
 578              		.loc 1 118 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 119 5 view .LVU129
 120:armwave.c     ****     // uint32_t ysub;
 121:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 121 5 view .LVU130
 122:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 122 5 view .LVU131
 123:armwave.c     ****     // uint8_t row;
 124:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 124 5 view .LVU132
 125:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 125 5 view .LVU133
 126:armwave.c     ****     uint32_t offset;
 587              		.loc 1 126 5 view .LVU134
 127:armwave.c     **** 
 128:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 128 5 view .LVU135
 589              	@ armwave.c:118: {
 118:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 118 1 is_stmt 0 view .LVU136
 591 02a8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 592              		.cfi_def_cfa_offset 32
 593              		.cfi_offset 4, -32
 594              		.cfi_offset 5, -28
 595              		.cfi_offset 6, -24
 596              		.cfi_offset 7, -20
 597              		.cfi_offset 8, -16
 598              		.cfi_offset 9, -12
 599              		.cfi_offset 10, -8
 600              		.cfi_offset 14, -4
 601              	@ armwave.c:128:     assert(out_buffer != NULL);
 602              		.loc 1 128 5 view .LVU137
 603 02ac 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 604 02b0 3800000A 		beq	.L39		@,
 129:armwave.c     **** 
 130:armwave.c     ****     // we don't really want to be doing this if possible
 131:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 605              		.loc 1 131 5 is_stmt 1 view .LVU138
 606              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 607              		.loc 1 131 45 is_stmt 0 view .LVU139
 608 02b4 F0409FE5 		ldr	r4, .L40	@ tmp220,
 609              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 131 5 view .LVU140
 611 02b8 0010A0E3 		mov	r1, #0	@,
 612              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 131 59 view .LVU141
 614 02bc 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 615 02c0 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 616 02c4 920302E0 		mul	r2, r2, r3	@ tmp175, g_armwave_state.target_height, g_armwave_state.target_width
 617              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 131 5 view .LVU142
 619 02c8 0221A0E1 		lsl	r2, r2, #2	@, tmp175,
 620 02cc FEFFFFEB 		bl	memset		@
 621              	.LVL24:
 132:armwave.c     **** 
 133:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 622              		.loc 1 133 5 is_stmt 1 view .LVU143
 623              	@ armwave.c:133:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 133 10 is_stmt 0 view .LVU144
 625 02d0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 02d4 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 627 02d8 9C030CE0 		mul	ip, ip, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 628              	.LVL25:
 134:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 135:armwave.c     **** 
 136:armwave.c     **** #if 0
 137:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 138:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 139:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 140:armwave.c     ****         // most normal waveforms.
 141:armwave.c     ****         wave_word = *base_32ptr++;
 142:armwave.c     **** 
 143:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 144:armwave.c     ****             for(w = 0; w < 2; w++) {
 145:armwave.c     ****                 value = wave_word & 0xffff;
 146:armwave.c     ****                 wave_word >>= 16;
 147:armwave.c     **** 
 148:armwave.c     ****                 if(value != 0) {
 149:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 150:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 151:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 152:armwave.c     **** 
 153:armwave.c     ****                     r = MIN(rr, 255);
 154:armwave.c     ****                     g = MIN(gg, 255);
 155:armwave.c     ****                     b = MIN(bb, 255);
 156:armwave.c     **** 
 157:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 158:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 159:armwave.c     **** 
 160:armwave.c     ****                     // Plot the pixels
 161:armwave.c     ****                     nsub = n + (w * 2);
 162:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 164:armwave.c     ****                     xx = (nsub >> 8);
 165:armwave.c     **** 
 166:armwave.c     ****                     for(y = yy; y < ye; y++) {
 167:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 168:armwave.c     ****                         *(out_buffer_base + offset) = word;
 169:armwave.c     ****                     }
 170:armwave.c     ****                 }
 171:armwave.c     ****             }
 172:armwave.c     ****         }
 173:armwave.c     ****     }
 174:armwave.c     **** #endif
 175:armwave.c     **** 
 176:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 629              		.loc 1 176 5 is_stmt 1 view .LVU145
 630              		.loc 1 176 5 is_stmt 0 view .LVU146
 631 02dc 00005CE3 		cmp	ip, #0	@ npix,
 632 02e0 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 633              	@ armwave.c:177:         wave_word = g_armwave_state.ch1_buffer[n];
 177:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 634              		.loc 1 177 36 view .LVU147
 635 02e4 041094E5 		ldr	r1, [r4, #4]	@ _8, g_armwave_state.ch1_buffer
 636              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 178:armwave.c     ****         value = wave_word & 0xffff;
 179:armwave.c     **** 
 180:armwave.c     ****         if(value != 0) {
 181:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 637              		.loc 1 181 44 view .LVU148
 638 02e8 FC86D4E1 		ldrsh	r8, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 639              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 640              		.loc 1 182 44 view .LVU149
 641 02ec FE76D4E1 		ldrsh	r7, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 642              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 643              		.loc 1 183 44 view .LVU150
 644 02f0 F067D4E1 		ldrsh	r6, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 645              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 184:armwave.c     **** 
 185:armwave.c     ****             r = MIN(rr, 255);
 186:armwave.c     ****             g = MIN(gg, 255);
 187:armwave.c     ****             b = MIN(bb, 255);
 188:armwave.c     **** 
 189:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 190:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 192:armwave.c     ****             // Plot the pixels
 193:armwave.c     ****             nsub = n;
 194:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 646              		.loc 1 194 49 view .LVU151
 647 02f4 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 648 02f8 021041E2 		sub	r1, r1, #2	@ ivtmp.52, _8,
 649 02fc 8CC081E0 		add	ip, r1, ip, lsl #1	@ _96, ivtmp.52, npix,
 650              	.LVL26:
 651              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 652              		.loc 1 176 11 view .LVU152
 653 0300 0000A0E3 		mov	r0, #0	@ n,
 654              	.LVL27:
 655              	.L33:
 177:armwave.c     ****         value = wave_word & 0xffff;
 656              		.loc 1 177 9 is_stmt 1 view .LVU153
 178:armwave.c     **** 
 657              		.loc 1 178 9 view .LVU154
 658              	@ armwave.c:178:         value = wave_word & 0xffff;
 178:armwave.c     **** 
 659              		.loc 1 178 15 is_stmt 0 view .LVU155
 660 0304 B230F1E1 		ldrh	r3, [r1, #2]!	@ MEM[base: _101, offset: 0B], MEM[base: _101, offset: 0B]
 661              	.LVL28:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 662              		.loc 1 180 9 is_stmt 1 view .LVU156
 663              	@ armwave.c:180:         if(value != 0) {
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 664              		.loc 1 180 11 is_stmt 0 view .LVU157
 665 0308 FF3013E2 		ands	r3, r3, #255	@ value, MEM[base: _101, offset: 0B],
 666              	.LVL29:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 667              		.loc 1 180 11 view .LVU158
 668 030c 1D00000A 		beq	.L32		@,
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 669              		.loc 1 181 13 is_stmt 1 view .LVU159
 670              	.LVL30:
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 671              		.loc 1 182 13 view .LVU160
 183:armwave.c     **** 
 672              		.loc 1 183 13 view .LVU161
 185:armwave.c     ****             g = MIN(gg, 255);
 673              		.loc 1 185 13 view .LVU162
 186:armwave.c     ****             b = MIN(bb, 255);
 674              		.loc 1 186 13 view .LVU163
 187:armwave.c     **** 
 675              		.loc 1 187 13 view .LVU164
 190:armwave.c     **** 
 676              		.loc 1 190 13 view .LVU165
 193:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 677              		.loc 1 193 13 view .LVU166
 678              		.loc 1 194 13 view .LVU167
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 679              		.loc 1 195 13 view .LVU168
 196:armwave.c     ****             xx = (nsub >> 8) / 2;
 680              		.loc 1 196 13 view .LVU169
 197:armwave.c     **** 
 198:armwave.c     ****             //for(y = yy; y < ye; y++) {
 199:armwave.c     ****             y = yy;
 681              		.loc 1 199 13 view .LVU170
 200:armwave.c     ****             {
 201:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 682              		.loc 1 201 17 view .LVU171
 202:armwave.c     ****                 *(out_buffer_base + offset) = word;
 683              		.loc 1 202 17 view .LVU172
 684              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 685              		.loc 1 194 24 is_stmt 0 view .LVU173
 686 0310 70E0EFE6 		uxtb	lr, r0	@ n, n
 687              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 688              		.loc 1 183 47 view .LVU174
 689 0314 830662E1 		smulbb	r2, r3, r6	@ tmp206, value, _20
 690              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 691              		.loc 1 194 32 view .LVU175
 692 0318 90EA07EE 		vmov	s15, lr	@ int	@ n, n
 693              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 694              		.loc 1 182 47 view .LVU176
 695 031c 830769E1 		smulbb	r9, r3, r7	@ tmp210, value, _17
 696              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 697              		.loc 1 183 16 view .LVU177
 698 0320 4224A0E1 		asr	r2, r2, #8	@ bb, tmp206,
 699              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 700              		.loc 1 187 17 view .LVU178
 701 0324 FF0052E3 		cmp	r2, #255	@ bb,
 702              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 703              		.loc 1 194 32 view .LVU179
 704 0328 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp197, n
 705              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 706              		.loc 1 182 16 view .LVU180
 707 032c 4994A0E1 		asr	r9, r9, #8	@ gg, tmp210,
 708              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 709              		.loc 1 181 47 view .LVU181
 710 0330 830863E1 		smulbb	r3, r3, r8	@ tmp216, value, _13
 711              	.LVL31:
 712              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 713              		.loc 1 187 17 view .LVU182
 714 0334 FF20A0A3 		movge	r2, #255	@ bb,
 715              	@ armwave.c:186:             g = MIN(gg, 255);
 186:armwave.c     ****             b = MIN(bb, 255);
 716              		.loc 1 186 17 view .LVU183
 717 0338 FF0059E3 		cmp	r9, #255	@ gg,
 718 033c FF90A0A3 		movge	r9, #255	@ gg,
 719              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 720              		.loc 1 181 16 view .LVU184
 721 0340 4334A0E1 		asr	r3, r3, #8	@ rr, tmp216,
 722              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 723              		.loc 1 185 17 view .LVU185
 724 0344 FF0053E3 		cmp	r3, #255	@ rr,
 725              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 726              		.loc 1 194 32 view .LVU186
 727 0348 877A67EE 		vmul.f32	s15, s15, s14	@ tmp198, tmp197, _35
 728              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 729              		.loc 1 190 48 view .LVU187
 730 034c 0994A0E1 		lsl	r9, r9, #8	@ tmp211, gg,
 731              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 732              		.loc 1 190 36 view .LVU188
 733 0350 0228A0E1 		lsl	r2, r2, #16	@ tmp207, bb,
 734              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 735              		.loc 1 185 17 view .LVU189
 736 0354 FF30A0A3 		movge	r3, #255	@ rr,
 737              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 738              		.loc 1 190 48 view .LVU190
 739 0358 7990FFE6 		uxth	r9, r9	@ tmp212, tmp211
 740              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 741              		.loc 1 190 36 view .LVU191
 742 035c FF2802E2 		and	r2, r2, #16711680	@ tmp208, tmp207,
 743              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 744              		.loc 1 190 43 view .LVU192
 745 0360 092082E1 		orr	r2, r2, r9	@ tmp214, tmp208, tmp212
 746              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 747              		.loc 1 190 54 view .LVU193
 748 0364 7330EFE6 		uxtb	r3, r3	@ rr, rr
 749              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 750              		.loc 1 194 16 view .LVU194
 751 0368 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp198
 752              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 753              		.loc 1 190 54 view .LVU195
 754 036c 033082E1 		orr	r3, r2, r3	@ tmp218, tmp214, rr
 755              	@ armwave.c:201:                 offset = (xx + (y * g_armwave_state.target_width)); 
 201:armwave.c     ****                 *(out_buffer_base + offset) = word;
 756              		.loc 1 201 35 view .LVU196
 757 0370 58E094E5 		ldr	lr, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 758              	@ armwave.c:196:             xx = (nsub >> 8) / 2;
 196:armwave.c     **** 
 759              		.loc 1 196 30 view .LVU197
 760 0374 C094A0E1 		asr	r9, r0, #9	@ xx, n,
 761              	.LVL32:
 762              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 763              		.loc 1 190 18 view .LVU198
 764 0378 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp218,
 765              	@ armwave.c:202:                 *(out_buffer_base + offset) = word;
 766              		.loc 1 202 35 view .LVU199
 767 037c 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 768 0380 9E922EE0 		mla	lr, lr, r2, r9	@ tmp204, g_armwave_state.target_width, yy, xx
 769              	@ armwave.c:202:                 *(out_buffer_base + offset) = word;
 770              		.loc 1 202 45 view .LVU200
 771 0384 0E3185E7 		str	r3, [r5, lr, lsl #2]	@ word, *_43
 772              	.LVL33:
 773              	.L32:
 774              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 775              		.loc 1 176 5 discriminator 2 view .LVU201
 776 0388 01005CE1 		cmp	ip, r1	@ _96, ivtmp.52
 777              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 778              		.loc 1 176 28 discriminator 2 view .LVU202
 779 038c 010080E2 		add	r0, r0, #1	@ n, n,
 780              	.LVL34:
 781              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 782              		.loc 1 176 5 discriminator 2 view .LVU203
 783 0390 DBFFFF1A 		bne	.L33		@,
 784 0394 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 785              	.LVL35:
 786              	.L39:
 128:armwave.c     **** 
 787              		.loc 1 128 5 is_stmt 1 discriminator 1 view .LVU204
 788 0398 10309FE5 		ldr	r3, .L40+4	@,
 789 039c 8020A0E3 		mov	r2, #128	@,
 790 03a0 0C109FE5 		ldr	r1, .L40+8	@,
 791 03a4 0C009FE5 		ldr	r0, .L40+12	@,
 792              	.LVL36:
 128:armwave.c     **** 
 793              		.loc 1 128 5 is_stmt 0 discriminator 1 view .LVU205
 794 03a8 FEFFFFEB 		bl	__assert_fail		@
 795              	.LVL37:
 796              	.L41:
 128:armwave.c     **** 
 797              		.loc 1 128 5 discriminator 1 view .LVU206
 798              		.align	2
 799              	.L40:
 800 03ac 00000000 		.word	g_armwave_state
 801 03b0 00000000 		.word	.LANCHOR0
 802 03b4 20000000 		.word	.LC2
 803 03b8 2C000000 		.word	.LC3
 804              		.cfi_endproc
 805              	.LFE60:
 807              		.global	__aeabi_idiv
 808              		.align	2
 809              		.global	armwave_generate
 810              		.syntax unified
 811              		.arm
 812              		.fpu vfp
 814              	armwave_generate:
 815              	.LFB61:
 203:armwave.c     ****             }
 204:armwave.c     ****         }
 205:armwave.c     ****     }
 206:armwave.c     **** }
 207:armwave.c     **** 
 208:armwave.c     **** /*
 209:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 210:armwave.c     ****  */
 211:armwave.c     **** void armwave_generate()
 212:armwave.c     **** {
 816              		.loc 1 212 1 is_stmt 1 view -0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 72
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 213:armwave.c     ****     uint32_t yy;
 820              		.loc 1 213 5 view .LVU208
 214:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 821              		.loc 1 214 5 view .LVU209
 822              	.LVL38:
 215:armwave.c     **** 
 216:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 823              		.loc 1 216 5 view .LVU210
 824              	@ armwave.c:212: {
 212:armwave.c     ****     uint32_t yy;
 825              		.loc 1 212 1 is_stmt 0 view .LVU211
 826 03bc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 827              		.cfi_def_cfa_offset 36
 828              		.cfi_offset 4, -36
 829              		.cfi_offset 5, -32
 830              		.cfi_offset 6, -28
 831              		.cfi_offset 7, -24
 832              		.cfi_offset 8, -20
 833              		.cfi_offset 9, -16
 834              		.cfi_offset 10, -12
 835              		.cfi_offset 11, -8
 836              		.cfi_offset 14, -4
 837              	@ armwave.c:216:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 838              		.loc 1 216 5 view .LVU212
 839 03c0 0010A0E3 		mov	r1, #0	@,
 840              	@ armwave.c:216:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 841              		.loc 1 216 58 view .LVU213
 842 03c4 90429FE5 		ldr	r4, .L62	@ tmp212,
 843              	@ armwave.c:212: {
 212:armwave.c     ****     uint32_t yy;
 844              		.loc 1 212 1 view .LVU214
 845 03c8 4CD04DE2 		sub	sp, sp, #76	@,,
 846              		.cfi_def_cfa_offset 112
 847              	@ armwave.c:216:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 848              		.loc 1 216 5 view .LVU215
 849 03cc 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 850 03d0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 851 03d4 FEFFFFEB 		bl	memset		@
 852              	.LVL39:
 217:armwave.c     **** 
 218:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 853              		.loc 1 218 5 is_stmt 1 view .LVU216
 854              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 855              		.loc 1 218 68 is_stmt 0 view .LVU217
 856 03d8 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 857              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 858              		.loc 1 218 51 view .LVU218
 859 03dc 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 860 03e0 0510A0E1 		mov	r1, r5	@, _133
 861              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 862              		.loc 1 218 68 view .LVU219
 863 03e4 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 864              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 865              		.loc 1 218 51 view .LVU220
 866 03e8 FEFFFFEB 		bl	__aeabi_idiv		@
 867              	.LVL40:
 868              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 869              		.loc 1 218 5 view .LVU221
 870 03ec 003050E2 		subs	r3, r0, #0	@ _179,
 871 03f0 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 872 03f4 9600000A 		beq	.L42		@,
 873              	.LBB10:
 874              	.LBB11:
 875              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 876              		.loc 1 79 35 view .LVU222
 877 03f8 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 878              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 879              		.loc 1 80 81 view .LVU223
 880 03fc 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 881 0400 000053E3 		cmp	r3, #0	@ _38,
 882              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 883              		.loc 1 79 35 view .LVU224
 884 0404 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 885              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 886              		.loc 1 71 40 view .LVU225
 887 0408 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 888              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 889              		.loc 1 71 82 view .LVU226
 890 040c 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 891              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 892              		.loc 1 71 147 view .LVU227
 893 0410 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 894              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 895              		.loc 1 80 36 view .LVU228
 896 0414 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 897              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 898              		.loc 1 80 81 view .LVU229
 899 0418 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 900 041c 8C0000DA 		ble	.L42		@,
 901 0420 000055E3 		cmp	r5, #0	@ _133,
 902 0424 8A00000A 		beq	.L42		@,
 903 0428 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 904 042c 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 905 0430 10208DE5 		str	r2, [sp, #16]	@ ivtmp.72, %sfp
 906 0434 002062E2 		rsb	r2, r2, #0	@ ivtmp.71, ivtmp.72
 907 0438 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 908 043c 14208DE5 		str	r2, [sp, #20]	@ ivtmp.71, %sfp
 909 0440 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 910 0444 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 911 0448 09B0A0E1 		mov	fp, r9	@ _21, _21
 912 044c 00C0A0E3 		mov	ip, #0	@ ivtmp.70,
 913 0450 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 914 0454 032080E0 		add	r2, r0, r3	@ ivtmp.60, tmp231, _17
 915 0458 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 916 045c 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 917 0460 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.70, %sfp
 918 0464 34208DE5 		str	r2, [sp, #52]	@ ivtmp.60, %sfp
 919              	.LBE11:
 920              	.LBE10:
 921              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 922              		.loc 1 218 12 view .LVU230
 923 0468 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.70, %sfp
 924 046c 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 925              	.LVL41:
 926              	.L48:
 219:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 220:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 221:armwave.c     **** 
 222:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 927              		.loc 1 222 9 is_stmt 1 discriminator 3 view .LVU231
 928              	.LBB13:
 929              	.LBI10:
  62:armwave.c     **** {
 930              		.loc 1 62 6 discriminator 3 view .LVU232
 931              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 932              		.loc 1 64 5 discriminator 3 view .LVU233
  65:armwave.c     ****     uint8_t *wave_base;
 933              		.loc 1 65 5 discriminator 3 view .LVU234
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 934              		.loc 1 66 5 discriminator 3 view .LVU235
  67:armwave.c     ****     bufftyp_t *write_buffer;
 935              		.loc 1 67 5 discriminator 3 view .LVU236
  68:armwave.c     **** 
 936              		.loc 1 68 5 discriminator 3 view .LVU237
  71:armwave.c     **** 
 937              		.loc 1 71 5 discriminator 3 view .LVU238
 938              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 939              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU239
 940 0470 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.70, %sfp
 941              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 942              		.loc 1 71 130 discriminator 3 view .LVU240
 943 0474 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.72, %sfp
 944              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 945              		.loc 1 71 105 discriminator 3 view .LVU241
 946 0478 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.70,
 947              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 948              		.loc 1 71 130 discriminator 3 view .LVU242
 949 047c 00208DE5 		str	r2, [sp]	@ ivtmp.72, %sfp
 950 0480 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 951              	.LVL42:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 952              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU243
 953              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 954              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU244
 955 0484 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.71, %sfp
 956 0488 04308DE5 		str	r3, [sp, #4]	@ ivtmp.71, %sfp
 957              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 958              		.loc 1 79 11 discriminator 3 view .LVU245
 959 048c 0030A0E3 		mov	r3, #0	@ w,
 960 0490 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 961              	.LVL43:
 962              	.L45:
  80:armwave.c     **** 
 963              		.loc 1 80 9 is_stmt 1 view .LVU246
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 964              		.loc 1 84 9 view .LVU247
 965              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 966              		.loc 1 79 11 is_stmt 0 view .LVU248
 967 0494 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.61, %sfp
 968 0498 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.60, %sfp
 969 049c 00309DE5 		ldr	r3, [sp]	@ ivtmp.67, %sfp
 970 04a0 08308DE5 		str	r3, [sp, #8]	@ ivtmp.67, %sfp
 971              	.LVL44:
 972              	.L47:
  87:armwave.c     **** 
 973              		.loc 1 87 13 is_stmt 1 view .LVU249
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 974              		.loc 1 101 17 view .LVU250
 106:armwave.c     ****                 word >>= 8;
 975              		.loc 1 106 17 view .LVU251
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 976              		.loc 1 101 17 view .LVU252
 106:armwave.c     ****                 word >>= 8;
 977              		.loc 1 106 17 view .LVU253
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 978              		.loc 1 101 17 view .LVU254
 106:armwave.c     ****                 word >>= 8;
 979              		.loc 1 106 17 view .LVU255
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 980              		.loc 1 101 17 view .LVU256
 106:armwave.c     ****                 word >>= 8;
 981              		.loc 1 106 17 view .LVU257
 982              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 983              		.loc 1 102 34 is_stmt 0 view .LVU258
 984 04a4 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 985              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 986              		.loc 1 87 18 view .LVU259
 987 04a8 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.59, %sfp
 988              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 989              		.loc 1 102 34 view .LVU260
 990 04ac 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.61
 991 04b0 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.60
 992              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 993              		.loc 1 102 74 view .LVU261
 994 04b4 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 995              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 996              		.loc 1 87 18 view .LVU262
 997 04b8 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 998              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 999              		.loc 1 106 47 view .LVU263
 1000 04bc 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1001              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1002              		.loc 1 94 20 view .LVU264
 1003 04c0 FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1004              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1005              		.loc 1 107 22 view .LVU265
 1006 04c4 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1007              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1008              		.loc 1 94 20 view .LVU266
 1009 04c8 0160A003 		moveq	r6, #1	@ tmp239,
 1010 04cc 0060A013 		movne	r6, #0	@ tmp239,
 1011              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1012              		.loc 1 106 47 view .LVU267
 1013 04d0 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1014              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1015              		.loc 1 94 19 view .LVU268
 1016 04d4 FF0059E3 		cmp	r9, #255	@ scale_value,
 1017 04d8 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1018              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1019              		.loc 1 87 18 view .LVU269
 1020 04dc 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.59, %sfp
 1021              	.LVL45:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1022              		.loc 1 89 13 is_stmt 1 view .LVU270
  91:armwave.c     ****                 
 1023              		.loc 1 91 17 view .LVU271
  94:armwave.c     ****                     continue;
 1024              		.loc 1 94 17 view .LVU272
 1025              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1026              		.loc 1 84 9 is_stmt 0 view .LVU273
 1027 04e0 0E90A0E1 		mov	r9, lr	@ ivtmp.59, ivtmp.59
 1028 04e4 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.66, %sfp
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1029              		.loc 1 84 9 view .LVU274
 1030 04e8 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1031              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1032              		.loc 1 102 74 view .LVU275
 1033 04ec 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.61,
 1034 04f0 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1035              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1036              		.loc 1 84 9 view .LVU276
 1037 04f4 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.59, ivtmp.66
 1038              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1039              		.loc 1 94 19 view .LVU277
 1040 04f8 000056E3 		cmp	r6, #0	@ tmp244,
 1041              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1042              		.loc 1 102 74 view .LVU278
 1043 04fc 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.60,
 1044              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1045              		.loc 1 106 47 view .LVU279
 1046 0500 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1047 0504 04A08AE0 		add	r10, r10, r4	@ ivtmp.60, ivtmp.60, _208
 1048              	.LVL46:
 106:armwave.c     ****                 word >>= 8;
 1049              		.loc 1 106 47 view .LVU280
 1050 0508 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1051              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1052              		.loc 1 107 22 view .LVU281
 1053 050c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1054              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1055              		.loc 1 106 47 view .LVU282
 1056 0510 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1057              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1058              		.loc 1 84 9 view .LVU283
 1059 0514 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1060              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1061              		.loc 1 94 19 view .LVU284
 1062 0518 2A00001A 		bne	.L53		@,
 1063              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1064              		.loc 1 94 20 view .LVU285
 1065 051c FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1066              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1067              		.loc 1 106 47 view .LVU286
 1068 0520 B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1069              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1070              		.loc 1 94 20 view .LVU287
 1071 0524 0190A003 		moveq	r9, #1	@ tmp256,
 1072 0528 0090A013 		movne	r9, #0	@ tmp256,
 1073              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1074              		.loc 1 106 47 view .LVU288
 1075 052c 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1076              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1077              		.loc 1 94 19 view .LVU289
 1078 0530 FF0054E3 		cmp	r4, #255	@ scale_value,
 1079 0534 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1080 0538 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1081              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1082              		.loc 1 106 47 view .LVU290
 1083 053c 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1084              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1085              		.loc 1 94 19 view .LVU291
 1086 0540 000054E3 		cmp	r4, #0	@ tmp261,
 1087              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1088              		.loc 1 106 47 view .LVU292
 1089 0544 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1090 0548 B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1091              		.loc 1 107 17 is_stmt 1 view .LVU293
 1092              	.LVL47:
  91:armwave.c     ****                 
 1093              		.loc 1 91 17 view .LVU294
  94:armwave.c     ****                     continue;
 1094              		.loc 1 94 17 view .LVU295
 1095              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1096              		.loc 1 94 19 is_stmt 0 view .LVU296
 1097 054c 1D00001A 		bne	.L53		@,
 1098              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1099              		.loc 1 94 20 view .LVU297
 1100 0550 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1101 0554 FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1102              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1103              		.loc 1 106 47 view .LVU298
 1104 0558 B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1105              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1106              		.loc 1 94 20 view .LVU299
 1107 055c 0140A003 		moveq	r4, #1	@ tmp273,
 1108 0560 0040A013 		movne	r4, #0	@ tmp273,
 1109              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1110              		.loc 1 106 47 view .LVU300
 1111 0564 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1112              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1113              		.loc 1 94 19 view .LVU301
 1114 0568 FF005EE3 		cmp	lr, #255	@ scale_value,
 1115 056c 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1116 0570 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1117              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1118              		.loc 1 106 47 view .LVU302
 1119 0574 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1120              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1121              		.loc 1 94 19 view .LVU303
 1122 0578 00005EE3 		cmp	lr, #0	@ tmp278,
 1123              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1124              		.loc 1 106 47 view .LVU304
 1125 057c 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1126 0580 B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1127              		.loc 1 107 17 is_stmt 1 view .LVU305
 1128              	.LVL48:
  91:armwave.c     ****                 
 1129              		.loc 1 91 17 view .LVU306
  94:armwave.c     ****                     continue;
 1130              		.loc 1 94 17 view .LVU307
 1131              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 19 is_stmt 0 view .LVU308
 1133 0584 0F00001A 		bne	.L53		@,
 1134              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1135              		.loc 1 94 20 view .LVU309
 1136 0588 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1137              	.LVL49:
 1138              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1139              		.loc 1 106 47 view .LVU310
 1140 058c 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1141 0590 B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1142              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1143              		.loc 1 94 20 view .LVU311
 1144 0594 0110A003 		moveq	r1, #1	@ tmp288,
 1145 0598 0010A013 		movne	r1, #0	@ tmp288,
 1146              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1147              		.loc 1 106 47 view .LVU312
 1148 059c 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1149              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1150              		.loc 1 94 19 view .LVU313
 1151 05a0 FF0050E3 		cmp	r0, #255	@ word,
 1152 05a4 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1153 05a8 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1154 05ac 000050E3 		cmp	r0, #0	@ tmp293,
 1155              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1156              		.loc 1 106 47 view .LVU314
 1157 05b0 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1158 05b4 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1159 05b8 B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1160              		.loc 1 107 17 is_stmt 1 view .LVU315
 1161              	.LVL50:
  91:armwave.c     ****                 
 1162              		.loc 1 91 17 view .LVU316
  94:armwave.c     ****                     continue;
 1163              		.loc 1 94 17 view .LVU317
 1164              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1165              		.loc 1 106 47 is_stmt 0 view .LVU318
 1166 05bc BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1167 05c0 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1168 05c4 BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1169              		.loc 1 107 17 is_stmt 1 view .LVU319
 1170              	.LVL51:
 1171              	.L53:
 1172              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1173              		.loc 1 84 9 is_stmt 0 view .LVU320
 1174 05c8 D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1175 05cc 020053E1 		cmp	r3, r2	@ _133, tmp302
 1176 05d0 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1177 05d4 035085E0 		add	r5, r5, r3	@ ivtmp.61, ivtmp.61, _208
 1178 05d8 B1FFFF8A 		bhi	.L47		@,
 1179              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1180              		.loc 1 79 44 view .LVU321
 1181 05dc 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1182              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1183              		.loc 1 79 5 view .LVU322
 1184 05e0 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1185              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1186              		.loc 1 79 44 view .LVU323
 1187 05e4 013083E2 		add	r3, r3, #1	@ w, w,
 1188              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1189              		.loc 1 79 5 view .LVU324
 1190 05e8 030052E1 		cmp	r2, r3	@ _38, w
 1191              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1192              		.loc 1 79 44 view .LVU325
 1193 05ec 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1194              	.LVL52:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1195              		.loc 1 79 44 view .LVU326
 1196 05f0 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.66, %sfp
 1197 05f4 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1198              	.LVL53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1199              		.loc 1 79 44 view .LVU327
 1200 05f8 032042E0 		sub	r2, r2, r3	@ ivtmp.66, ivtmp.66, _24
 1201 05fc 04208DE5 		str	r2, [sp, #4]	@ ivtmp.66, %sfp
 1202 0600 00209DE5 		ldr	r2, [sp]	@ ivtmp.67, %sfp
 1203 0604 033082E0 		add	r3, r2, r3	@ ivtmp.67, ivtmp.67, _24
 1204 0608 00308DE5 		str	r3, [sp]	@ ivtmp.67, %sfp
 1205              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1206              		.loc 1 79 5 view .LVU328
 1207 060c A0FFFF1A 		bne	.L45		@,
 1208              	.LVL54:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1209              		.loc 1 79 5 view .LVU329
 1210              	.LBE12:
 1211              	.LBE13:
 223:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1212              		.loc 1 223 9 is_stmt 1 view .LVU330
 224:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1213              		.loc 1 224 9 view .LVU331
 1214              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1215              		.loc 1 218 86 is_stmt 0 view .LVU332
 1216 0610 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1217              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1218              		.loc 1 218 5 view .LVU333
 1219 0614 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1220              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1221              		.loc 1 218 86 view .LVU334
 1222 0618 013083E2 		add	r3, r3, #1	@ yy, yy,
 1223              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1224              		.loc 1 218 5 view .LVU335
 1225 061c 020053E1 		cmp	r3, r2	@ yy, _179
 1226              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1227              		.loc 1 218 86 view .LVU336
 1228 0620 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1229              	.LVL55:
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1230              		.loc 1 218 86 view .LVU337
 1231 0624 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1232 0628 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.70, %sfp
 1233              	.LVL56:
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1234              		.loc 1 218 86 view .LVU338
 1235 062c 023083E0 		add	r3, r3, r2	@ ivtmp.70, ivtmp.70, _185
 1236 0630 18308DE5 		str	r3, [sp, #24]	@ ivtmp.70, %sfp
 1237 0634 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.71, %sfp
 1238 0638 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1239 063c 032042E0 		sub	r2, r2, r3	@ ivtmp.71, ivtmp.71, _133
 1240 0640 14208DE5 		str	r2, [sp, #20]	@ ivtmp.71, %sfp
 1241 0644 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.72, %sfp
 1242 0648 033082E0 		add	r3, r2, r3	@ ivtmp.72, ivtmp.72, _133
 1243 064c 10308DE5 		str	r3, [sp, #16]	@ ivtmp.72, %sfp
 1244              	@ armwave.c:218:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 218:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1245              		.loc 1 218 5 view .LVU339
 1246 0650 86FFFF1A 		bne	.L48		@,
 1247              	.LVL57:
 1248              	.L42:
 1249              	@ armwave.c:228: }
 225:armwave.c     ****     }
 226:armwave.c     **** 
 227:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 228:armwave.c     **** }
 1250              		.loc 1 228 1 view .LVU340
 1251 0654 4CD08DE2 		add	sp, sp, #76	@,,
 1252              		.cfi_def_cfa_offset 36
 1253              		@ sp needed	@
 1254 0658 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1255              	.L63:
 1256              		.align	2
 1257              	.L62:
 1258 065c 00000000 		.word	g_armwave_state
 1259              		.cfi_endproc
 1260              	.LFE61:
 1262              		.align	2
 1263              		.global	armwave_setup_render
 1264              		.syntax unified
 1265              		.arm
 1266              		.fpu vfp
 1268              	armwave_setup_render:
 1269              	.LVL58:
 1270              	.LFB62:
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Setup the renderer with passed parameters.
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 234:armwave.c     **** {
 1271              		.loc 1 234 1 is_stmt 1 view -0
 1272              		.cfi_startproc
 1273              		@ args = 12, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t length, xx;
 1275              		.loc 1 235 5 view .LVU342
 236:armwave.c     ****     float points_per_pixel;
 1276              		.loc 1 236 5 view .LVU343
 237:armwave.c     **** 
 238:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1277              		.loc 1 238 5 view .LVU344
 1278              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t length, xx;
 1279              		.loc 1 234 1 is_stmt 0 view .LVU345
 1280 0660 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1281              		.cfi_def_cfa_offset 28
 1282              		.cfi_offset 4, -28
 1283              		.cfi_offset 5, -24
 1284              		.cfi_offset 6, -20
 1285              		.cfi_offset 7, -16
 1286              		.cfi_offset 8, -12
 1287              		.cfi_offset 9, -8
 1288              		.cfi_offset 14, -4
 1289 0664 028B2DED 		vpush.64	{d8}	@
 1290              		.cfi_def_cfa_offset 36
 1291              		.cfi_offset 80, -36
 1292              		.cfi_offset 81, -32
 1293 0668 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1294 066c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1295 0670 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1296 0674 14D04DE2 		sub	sp, sp, #20	@,,
 1297              		.cfi_def_cfa_offset 56
 1298              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t length, xx;
 1299              		.loc 1 234 1 view .LVU346
 1300 0678 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1301 067c D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1302 0680 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1303              	@ armwave.c:238:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1304              		.loc 1 238 5 view .LVU347
 1305 0684 00308DE5 		str	r3, [sp]	@ wave_stride,
 1306 0688 F460CDE1 		strd	r6, [sp, #4]	@,,
 1307 068c 0230A0E1 		mov	r3, r2	@, waves_max
 1308              	.LVL59:
 1309              		.loc 1 238 5 view .LVU348
 1310 0690 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1311 0694 0120A0E1 		mov	r2, r1	@, end_point
 1312              	.LVL60:
 1313              		.loc 1 238 5 view .LVU349
 1314 0698 0010A0E1 		mov	r1, r0	@, start_point
 1315              	.LVL61:
 1316              		.loc 1 238 5 view .LVU350
 1317 069c E0019FE5 		ldr	r0, .L78+12	@,
 1318              	.LVL62:
 1319              		.loc 1 238 5 view .LVU351
 1320 06a0 FEFFFFEB 		bl	printf		@
 1321              	.LVL63:
 239:armwave.c     **** 
 240:armwave.c     ****     // TODO these asserts should instead raise PyExc
 241:armwave.c     ****     assert(start_point < end_point);
 1322              		.loc 1 241 5 is_stmt 1 view .LVU352
 1323 06a4 050054E1 		cmp	r4, r5	@ start_point, end_point
 1324 06a8 6300002A 		bcs	.L75		@,
 242:armwave.c     **** 
 243:armwave.c     ****     /*
 244:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 245:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 246:armwave.c     ****     if(target_height == 256) {
 247:armwave.c     ****         g_armwave_state.row_shift = 8;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 249:armwave.c     ****     } else if(target_height == 512) {
 250:armwave.c     ****         g_armwave_state.row_shift = 9;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 252:armwave.c     ****     } else if(target_height == 1024) {
 253:armwave.c     ****         g_armwave_state.row_shift = 10;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 255:armwave.c     ****     } else if(target_height == 2048) {
 256:armwave.c     ****         g_armwave_state.row_shift = 11;
 257:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 258:armwave.c     ****     }
 259:armwave.c     ****     */
 260:armwave.c     **** 
 261:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 262:armwave.c     ****     g_armwave_state.xstride = target_height;
 1325              		.loc 1 262 5 view .LVU353
 1326              	@ armwave.c:273:     g_armwave_state.wave_length = end_point - start_point;
 263:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 264:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 265:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 266:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 267:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 268:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 269:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 270:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 271:armwave.c     ****     g_armwave_state.target_width = target_width;
 272:armwave.c     ****     g_armwave_state.target_height = target_height;
 273:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1327              		.loc 1 273 45 is_stmt 0 view .LVU354
 1328 06ac 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1329              	.LVL64:
 1330              	@ armwave.c:263:     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1331              		.loc 1 263 49 view .LVU355
 1332 06b0 706A9FED 		vldr.32	s12, .L78	@ tmp174,
 1333              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 274:armwave.c     **** 
 275:armwave.c     ****     // Calculate compound scaler
 276:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 277:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1334              		.loc 1 277 48 view .LVU356
 1335 06b4 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1336              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1337              		.loc 1 277 79 view .LVU357
 1338 06b8 6F6ADFED 		vldr.32	s13, .L78+4	@ tmp198,
 1339              	@ armwave.c:270:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 1340              		.loc 1 270 90 view .LVU358
 1341 06bc 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1342              	@ armwave.c:262:     g_armwave_state.xstride = target_height;
 262:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1343              		.loc 1 262 29 view .LVU359
 1344 06c0 C0419FE5 		ldr	r4, .L78+16	@ tmp242,
 1345              	.LVL65:
 1346              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1347              		.loc 1 277 48 view .LVU360
 1348 06c4 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1349              	@ armwave.c:263:     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1350              		.loc 1 263 49 view .LVU361
 1351 06c8 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1352              	@ armwave.c:268:     g_armwave_state.size = target_height * target_width;
 268:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1353              		.loc 1 268 42 view .LVU362
 1354 06cc 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1355              	@ armwave.c:270:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 1356              		.loc 1 270 95 view .LVU363
 1357 06d0 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1358              	@ armwave.c:263:     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1359              		.loc 1 263 49 view .LVU364
 1360 06d4 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1361              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1362              		.loc 1 277 48 view .LVU365
 1363 06d8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1364              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 278:armwave.c     **** 
 279:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1365              		.loc 1 279 5 view .LVU366
 1366 06dc 0128A0E3 		mov	r2, #65536	@ tmp201,
 1367 06e0 04508DE5 		str	r5, [sp, #4]	@ _13,
 1368 06e4 00608DE5 		str	r6, [sp]	@ target_width,
 1369              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 277:armwave.c     **** 
 1370              		.loc 1 277 48 view .LVU367
 1371 06e8 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1372              	@ armwave.c:270:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 1373              		.loc 1 270 95 view .LVU368
 1374 06ec 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1375              	@ armwave.c:262:     g_armwave_state.xstride = target_height;
 262:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1376              		.loc 1 262 29 view .LVU369
 1377 06f0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1378              		.loc 1 263 5 is_stmt 1 view .LVU370
 1379              	@ armwave.c:265:     g_armwave_state.wave_stride = wave_stride;
 265:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1380              		.loc 1 265 33 is_stmt 0 view .LVU371
 1381 06f4 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1382              	@ armwave.c:266:     g_armwave_state.waves_max = waves_max;
 266:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1383              		.loc 1 266 31 view .LVU372
 1384 06f8 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1385              	@ armwave.c:267:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 267:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1386              		.loc 1 267 27 view .LVU373
 1387 06fc 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1388              	@ armwave.c:272:     g_armwave_state.target_height = target_height;
 272:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1389              		.loc 1 272 35 view .LVU374
 1390 0700 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1391              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1392              		.loc 1 279 5 view .LVU375
 1393 0704 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1394              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 277:armwave.c     **** 
 1395              		.loc 1 277 48 view .LVU376
 1396 0708 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1397              	@ armwave.c:269:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 269:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1398              		.loc 1 269 37 view .LVU377
 1399 070c 022CA0E3 		mov	r2, #512	@ tmp184,
 1400              	@ armwave.c:268:     g_armwave_state.size = target_height * target_width;
 268:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1401              		.loc 1 268 26 view .LVU378
 1402 0710 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1403              	@ armwave.c:269:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 269:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1404              		.loc 1 269 37 view .LVU379
 1405 0714 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1406              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1407              		.loc 1 279 5 view .LVU380
 1408 0718 0310A0E1 		mov	r1, r3	@, tmp189
 1409              	@ armwave.c:270:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 1410              		.loc 1 270 34 view .LVU381
 1411 071c 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1412              	@ armwave.c:273:     g_armwave_state.wave_length = end_point - start_point;
 273:armwave.c     **** 
 1413              		.loc 1 273 33 view .LVU382
 1414 0720 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1415              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1416              		.loc 1 279 5 view .LVU383
 1417 0724 60019FE5 		ldr	r0, .L78+20	@,
 1418              	@ armwave.c:263:     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1419              		.loc 1 263 49 view .LVU384
 1420 0728 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1421              	@ armwave.c:277:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 277:armwave.c     **** 
 1422              		.loc 1 277 79 view .LVU385
 1423 072c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1424              	@ armwave.c:276:     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1425              		.loc 1 276 42 view .LVU386
 1426 0730 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1427              	@ armwave.c:263:     g_armwave_state.vscale_frac = target_height / 255.0f;
 263:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1428              		.loc 1 263 33 view .LVU387
 1429 0734 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 264:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1430              		.loc 1 264 5 is_stmt 1 view .LVU388
 1431              	@ armwave.c:276:     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1432              		.loc 1 276 42 is_stmt 0 view .LVU389
 1433 0738 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1434              	@ armwave.c:264:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 264:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1435              		.loc 1 264 30 view .LVU390
 1436 073c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1437              	@ armwave.c:279:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1438              		.loc 1 279 5 view .LVU391
 1439 0740 0C30A0E1 		mov	r3, ip	@, _19
 1440 0744 0C20A0E1 		mov	r2, ip	@, tmp3
 1441              	@ armwave.c:276:     g_armwave_state.cmp_x_bitdepth_scale = \
 276:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1442              		.loc 1 276 42 view .LVU392
 1443 0748 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1444              	@ armwave.c:264:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 264:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1445              		.loc 1 264 30 view .LVU393
 1446 074c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 265:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1447              		.loc 1 265 5 is_stmt 1 view .LVU394
 266:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1448              		.loc 1 266 5 view .LVU395
 267:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1449              		.loc 1 267 5 view .LVU396
 268:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1450              		.loc 1 268 5 view .LVU397
 269:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1451              		.loc 1 269 5 view .LVU398
 270:armwave.c     ****     g_armwave_state.target_width = target_width;
 1452              		.loc 1 270 5 view .LVU399
 271:armwave.c     ****     g_armwave_state.target_height = target_height;
 1453              		.loc 1 271 5 view .LVU400
 272:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1454              		.loc 1 272 5 view .LVU401
 273:armwave.c     **** 
 1455              		.loc 1 273 5 view .LVU402
 276:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1456              		.loc 1 276 5 view .LVU403
 1457              		.loc 1 279 5 view .LVU404
 1458 0750 FEFFFFEB 		bl	printf		@
 1459              	.LVL66:
 280:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 281:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 282:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 283:armwave.c     **** 
 284:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 285:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 286:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 287:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1460              		.loc 1 287 5 view .LVU405
 1461              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer != NULL)
 288:armwave.c     **** 
 289:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1462              		.loc 1 289 23 is_stmt 0 view .LVU406
 1463 0754 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1464              	@ armwave.c:287:     g_armwave_state.slice_height = 256; // 64;  
 287:armwave.c     **** 
 1465              		.loc 1 287 34 view .LVU407
 1466 0758 013CA0E3 		mov	r3, #256	@ tmp203,
 1467              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer != NULL)
 1468              		.loc 1 289 7 view .LVU408
 1469 075c 000050E3 		cmp	r0, #0	@ _20,
 1470              	@ armwave.c:287:     g_armwave_state.slice_height = 256; // 64;  
 287:armwave.c     **** 
 1471              		.loc 1 287 34 view .LVU409
 1472 0760 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1473              		.loc 1 289 5 is_stmt 1 view .LVU410
 1474              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer != NULL)
 1475              		.loc 1 289 7 is_stmt 0 view .LVU411
 1476 0764 0000000A 		beq	.L66		@,
 290:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1477              		.loc 1 290 9 is_stmt 1 view .LVU412
 1478 0768 FEFFFFEB 		bl	free		@
 1479              	.LVL67:
 1480              	.L66:
 291:armwave.c     **** 
 292:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1481              		.loc 1 292 5 view .LVU413
 1482              	@ armwave.c:292:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1483              		.loc 1 292 34 is_stmt 0 view .LVU414
 1484 076c 0110A0E3 		mov	r1, #1	@,
 1485 0770 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1486 0774 FEFFFFEB 		bl	calloc		@
 1487              	.LVL68:
 1488              	@ armwave.c:294:     assert(g_armwave_state.ch1_buffer != NULL);
 293:armwave.c     **** 
 294:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1489              		.loc 1 294 5 view .LVU415
 1490 0778 000050E3 		cmp	r0, #0	@ _23,
 1491              	@ armwave.c:292:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 292:armwave.c     **** 
 1492              		.loc 1 292 34 view .LVU416
 1493 077c 0070A0E1 		mov	r7, r0	@ _23,
 1494              	@ armwave.c:292:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 292:armwave.c     **** 
 1495              		.loc 1 292 32 view .LVU417
 1496 0780 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1497              		.loc 1 294 5 is_stmt 1 view .LVU418
 1498 0784 3600000A 		beq	.L76		@,
 295:armwave.c     **** 
 296:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 297:armwave.c     ****     length = end_point - start_point;
 1499              		.loc 1 297 5 view .LVU419
 1500              	.LVL69:
 298:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1501              		.loc 1 298 5 view .LVU420
 1502              	@ armwave.c:298:     points_per_pixel = length / ((float)(target_width));
 1503              		.loc 1 298 34 is_stmt 0 view .LVU421
 1504 0788 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1505              	@ armwave.c:298:     points_per_pixel = length / ((float)(target_width));
 1506              		.loc 1 298 22 view .LVU422
 1507 078c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1508              	@ armwave.c:299:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 299:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1509              		.loc 1 299 60 view .LVU423
 1510 0790 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp253, g_armwave_state.slice_height
 1511              	@ armwave.c:300:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1512              		.loc 1 300 40 view .LVU424
 1513 0794 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1514              	@ armwave.c:298:     points_per_pixel = length / ((float)(target_width));
 298:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1515              		.loc 1 298 34 view .LVU425
 1516 0798 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1517              	@ armwave.c:298:     points_per_pixel = length / ((float)(target_width));
 298:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1518              		.loc 1 298 22 view .LVU426
 1519 079c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1520              	@ armwave.c:299:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 299:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1521              		.loc 1 299 60 view .LVU427
 1522 07a0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp253
 1523              	@ armwave.c:298:     points_per_pixel = length / ((float)(target_width));
 298:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1524              		.loc 1 298 22 view .LVU428
 1525 07a4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1526              	.LVL70:
 299:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1527              		.loc 1 299 5 is_stmt 1 view .LVU429
 1528              	@ armwave.c:299:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 299:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1529              		.loc 1 299 60 is_stmt 0 view .LVU430
 1530 07a8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1531              	@ armwave.c:299:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 299:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1532              		.loc 1 299 41 view .LVU431
 1533 07ac E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1534 07b0 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1535              		.loc 1 300 5 is_stmt 1 view .LVU432
 1536              	@ armwave.c:300:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1537              		.loc 1 300 40 is_stmt 0 view .LVU433
 1538 07b4 FEFFFFEB 		bl	malloc		@
 1539              	.LVL71:
 1540              	@ armwave.c:302:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 301:armwave.c     **** 
 302:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1541              		.loc 1 302 5 view .LVU434
 1542 07b8 000050E3 		cmp	r0, #0	@ _31,
 1543              	@ armwave.c:300:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1544              		.loc 1 300 40 view .LVU435
 1545 07bc 0060A0E1 		mov	r6, r0	@ _31,
 1546              	@ armwave.c:300:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1547              		.loc 1 300 38 view .LVU436
 1548 07c0 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1549              		.loc 1 302 5 is_stmt 1 view .LVU437
 1550 07c4 2100000A 		beq	.L77		@,
 1551              	@ armwave.c:305:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 303:armwave.c     **** 
 304:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1552              		.loc 1 305 54 is_stmt 0 view .LVU438
 1553 07c8 2C7ADFED 		vldr.32	s15, .L78+8	@ tmp230,
 1554 07cc 020040E2 		sub	r0, r0, #2	@ ivtmp.76, _31,
 1555              	@ armwave.c:304:     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1556              		.loc 1 304 12 view .LVU439
 1557 07d0 0030A0E3 		mov	r3, #0	@ xx,
 1558              	@ armwave.c:305:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1559              		.loc 1 305 54 view .LVU440
 1560 07d4 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1561              	.L69:
 1562              	.LVL72:
 1563              		.loc 1 305 9 is_stmt 1 discriminator 3 view .LVU441
 1564              	@ armwave.c:305:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1565              		.loc 1 305 74 is_stmt 0 discriminator 3 view .LVU442
 1566 07d8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1567              	@ armwave.c:304:     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1568              		.loc 1 304 32 discriminator 3 view .LVU443
 1569 07dc 013083E2 		add	r3, r3, #1	@ xx, xx,
 1570              	.LVL73:
 1571              	@ armwave.c:304:     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1572              		.loc 1 304 5 discriminator 3 view .LVU444
 1573 07e0 030055E1 		cmp	r5, r3	@ _13, xx
 1574              	@ armwave.c:305:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1575              		.loc 1 305 74 discriminator 3 view .LVU445
 1576 07e4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1577 07e8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1578              	@ armwave.c:305:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1579              		.loc 1 305 46 discriminator 3 view .LVU446
 1580 07ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1581 07f0 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1582 07f4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1583              	@ armwave.c:304:     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1584              		.loc 1 304 5 discriminator 3 view .LVU447
 1585 07f8 F6FFFF1A 		bne	.L69		@,
 306:armwave.c     **** 
 307:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 308:armwave.c     ****     }
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1586              		.loc 1 310 5 is_stmt 1 view .LVU448
 1587              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1588              		.loc 1 310 34 is_stmt 0 view .LVU449
 1589 07fc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1590 0800 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1591 0804 FEFFFFEB 		bl	malloc		@
 1592              	.LVL74:
 1593              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1594              		.loc 1 312 5 view .LVU450
 1595 0808 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1596 080c 0620A0E1 		mov	r2, r6	@, _31
 1597 0810 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1598 0814 0710A0E1 		mov	r1, r7	@, _23
 1599              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1600              		.loc 1 310 34 view .LVU451
 1601 0818 00C0A0E1 		mov	ip, r0	@ tmp237,
 1602              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1603              		.loc 1 312 5 view .LVU452
 1604 081c 0030A0E1 		mov	r3, r0	@, tmp237
 1605              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1606              		.loc 1 310 32 view .LVU453
 1607 0820 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1608              		.loc 1 312 5 is_stmt 1 view .LVU454
 1609 0824 64009FE5 		ldr	r0, .L78+24	@,
 1610 0828 FEFFFFEB 		bl	printf		@
 1611              	.LVL75:
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****     malloc_stats();
 1612              		.loc 1 318 5 view .LVU455
 1613              	@ armwave.c:319: }
 319:armwave.c     **** }
 1614              		.loc 1 319 1 is_stmt 0 view .LVU456
 1615 082c 14D08DE2 		add	sp, sp, #20	@,,
 1616              		.cfi_remember_state
 1617              		.cfi_def_cfa_offset 36
 1618              		@ sp needed	@
 1619 0830 028BBDEC 		vldm	sp!, {d8}	@
 1620              		.cfi_restore 80
 1621              		.cfi_restore 81
 1622              		.cfi_def_cfa_offset 28
 1623              	.LVL76:
 1624              		.loc 1 319 1 view .LVU457
 1625 0834 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1626              		.cfi_restore 14
 1627              		.cfi_restore 9
 1628              		.cfi_restore 8
 1629              		.cfi_restore 7
 1630              		.cfi_restore 6
 1631              		.cfi_restore 5
 1632              		.cfi_restore 4
 1633              		.cfi_def_cfa_offset 0
 1634              	.LVL77:
 1635              	@ armwave.c:318:     malloc_stats();
 318:armwave.c     **** }
 1636              		.loc 1 318 5 view .LVU458
 1637 0838 FEFFFFEA 		b	malloc_stats		@
 1638              	.LVL78:
 1639              	.L75:
 1640              		.cfi_restore_state
 241:armwave.c     **** 
 1641              		.loc 1 241 5 is_stmt 1 discriminator 1 view .LVU459
 1642 083c 50309FE5 		ldr	r3, .L78+28	@,
 1643 0840 F120A0E3 		mov	r2, #241	@,
 1644 0844 4C109FE5 		ldr	r1, .L78+32	@,
 1645 0848 4C009FE5 		ldr	r0, .L78+36	@,
 1646 084c FEFFFFEB 		bl	__assert_fail		@
 1647              	.LVL79:
 1648              	.L77:
 302:armwave.c     **** 
 1649              		.loc 1 302 5 discriminator 1 view .LVU460
 1650 0850 3C309FE5 		ldr	r3, .L78+28	@,
 1651 0854 44209FE5 		ldr	r2, .L78+40	@,
 1652 0858 38109FE5 		ldr	r1, .L78+32	@,
 1653 085c 40009FE5 		ldr	r0, .L78+44	@,
 1654 0860 FEFFFFEB 		bl	__assert_fail		@
 1655              	.LVL80:
 1656              	.L76:
 294:armwave.c     **** 
 1657              		.loc 1 294 5 discriminator 1 view .LVU461
 1658 0864 28309FE5 		ldr	r3, .L78+28	@,
 1659 0868 38209FE5 		ldr	r2, .L78+48	@,
 1660 086c 24109FE5 		ldr	r1, .L78+32	@,
 1661 0870 34009FE5 		ldr	r0, .L78+52	@,
 1662 0874 FEFFFFEB 		bl	__assert_fail		@
 1663              	.LVL81:
 1664              	.L79:
 1665              		.align	2
 1666              	.L78:
 1667 0878 00007F43 		.word	1132396544
 1668 087c 00008047 		.word	1199570944
 1669 0880 0000803F 		.word	1065353216
 1670 0884 40000000 		.word	.LC4
 1671 0888 00000000 		.word	g_armwave_state
 1672 088c 84000000 		.word	.LC6
 1673 0890 34010000 		.word	.LC9
 1674 0894 1C000000 		.word	.LANCHOR0+28
 1675 0898 20000000 		.word	.LC2
 1676 089c 6C000000 		.word	.LC5
 1677 08a0 2E010000 		.word	302
 1678 08a4 08010000 		.word	.LC8
 1679 08a8 26010000 		.word	294
 1680 08ac E4000000 		.word	.LC7
 1681              		.cfi_endproc
 1682              	.LFE62:
 1684              		.align	2
 1685              		.global	armwave_set_wave_pointer
 1686              		.syntax unified
 1687              		.arm
 1688              		.fpu vfp
 1690              	armwave_set_wave_pointer:
 1691              	.LVL82:
 1692              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1693              		.loc 1 326 1 view -0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 0
 1696              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1697              		.loc 1 327 5 view .LVU463
 1698 08b0 000050E3 		cmp	r0, #0	@ wave_buffer
 1699              		.loc 1 327 5 is_stmt 0 view .LVU464
 1700 08b4 0200000A 		beq	.L85		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1701              		.loc 1 328 5 is_stmt 1 view .LVU465
 1702              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1703              		.loc 1 328 33 is_stmt 0 view .LVU466
 1704 08b8 1C309FE5 		ldr	r3, .L86	@ tmp116,
 1705 08bc 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1706 08c0 1EFF2FE1 		bx	lr	@
 1707              	.L85:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1708              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU467
 1709              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1710              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU468
 1711 08c4 10402DE9 		push	{r4, lr}	@
 1712              		.cfi_def_cfa_offset 8
 1713              		.cfi_offset 4, -8
 1714              		.cfi_offset 14, -4
 1715              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1716              		.loc 1 327 5 discriminator 1 view .LVU469
 1717 08c8 10309FE5 		ldr	r3, .L86+4	@,
 1718 08cc 10209FE5 		ldr	r2, .L86+8	@,
 1719 08d0 10109FE5 		ldr	r1, .L86+12	@,
 1720 08d4 10009FE5 		ldr	r0, .L86+16	@,
 1721              	.LVL83:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1722              		.loc 1 327 5 discriminator 1 view .LVU470
 1723 08d8 FEFFFFEB 		bl	__assert_fail		@
 1724              	.LVL84:
 1725              	.L87:
 1726              		.align	2
 1727              	.L86:
 1728 08dc 00000000 		.word	g_armwave_state
 1729 08e0 34000000 		.word	.LANCHOR0+52
 1730 08e4 47010000 		.word	327
 1731 08e8 20000000 		.word	.LC2
 1732 08ec 58010000 		.word	.LC10
 1733              		.cfi_endproc
 1734              	.LFE63:
 1736              		.align	2
 1737              		.global	armwave_set_wave_pointer_as_testbuf
 1738              		.syntax unified
 1739              		.arm
 1740              		.fpu vfp
 1742              	armwave_set_wave_pointer_as_testbuf:
 1743              	.LVL85:
 1744              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1745              		.loc 1 336 1 is_stmt 1 view -0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1750              		.loc 1 337 5 view .LVU472
 1751              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1752              		.loc 1 337 29 is_stmt 0 view .LVU473
 1753 08f0 24309FE5 		ldr	r3, .L91	@ tmp117,
 1754              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1755              		.loc 1 337 7 view .LVU474
 1756 08f4 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1757 08f8 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1758 08fc 0400003A 		bcc	.L90		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1759              		.loc 1 342 5 is_stmt 1 view .LVU475
 1760              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1761              		.loc 1 342 111 is_stmt 0 view .LVU476
 1762 0900 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1763              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1764              		.loc 1 342 68 view .LVU477
 1765 0904 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1766 0908 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1767              	.LVL86:
 1768              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1769              		.loc 1 342 33 view .LVU478
 1770 090c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1771              	@ armwave.c:343: }
 343:armwave.c     **** }
 1772              		.loc 1 343 1 view .LVU479
 1773 0910 1EFF2FE1 		bx	lr	@
 1774              	.LVL87:
 1775              	.L90:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1776              		.loc 1 338 9 is_stmt 1 view .LVU480
 1777 0914 04009FE5 		ldr	r0, .L91+4	@,
 1778              	.LVL88:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1779              		.loc 1 338 9 is_stmt 0 view .LVU481
 1780 0918 FEFFFFEA 		b	puts		@
 1781              	.LVL89:
 1782              	.L92:
 1783              		.align	2
 1784              	.L91:
 1785 091c 00000000 		.word	g_armwave_state
 1786 0920 6C010000 		.word	.LC11
 1787              		.cfi_endproc
 1788              	.LFE64:
 1790              		.align	2
 1791              		.global	armwave_set_wave_pointer_u32
 1792              		.syntax unified
 1793              		.arm
 1794              		.fpu vfp
 1796              	armwave_set_wave_pointer_u32:
 1797              	.LVL90:
 1798              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1799              		.loc 1 350 1 is_stmt 1 view -0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1803              		.loc 1 351 5 view .LVU483
 1804 0924 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1805              		.loc 1 351 5 is_stmt 0 view .LVU484
 1806 0928 0200000A 		beq	.L98		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1807              		.loc 1 352 5 is_stmt 1 view .LVU485
 1808              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1809              		.loc 1 352 33 is_stmt 0 view .LVU486
 1810 092c 1C309FE5 		ldr	r3, .L99	@ tmp117,
 1811 0930 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1812 0934 1EFF2FE1 		bx	lr	@
 1813              	.L98:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1814              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU487
 1815              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1816              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU488
 1817 0938 10402DE9 		push	{r4, lr}	@
 1818              		.cfi_def_cfa_offset 8
 1819              		.cfi_offset 4, -8
 1820              		.cfi_offset 14, -4
 1821              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1822              		.loc 1 351 5 discriminator 1 view .LVU489
 1823 093c 10309FE5 		ldr	r3, .L99+4	@,
 1824 0940 10209FE5 		ldr	r2, .L99+8	@,
 1825 0944 10109FE5 		ldr	r1, .L99+12	@,
 1826 0948 10009FE5 		ldr	r0, .L99+16	@,
 1827              	.LVL91:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1828              		.loc 1 351 5 discriminator 1 view .LVU490
 1829 094c FEFFFFEB 		bl	__assert_fail		@
 1830              	.LVL92:
 1831              	.L100:
 1832              		.align	2
 1833              	.L99:
 1834 0950 00000000 		.word	g_armwave_state
 1835 0954 50000000 		.word	.LANCHOR0+80
 1836 0958 5F010000 		.word	351
 1837 095c 20000000 		.word	.LC2
 1838 0960 A8010000 		.word	.LC12
 1839              		.cfi_endproc
 1840              	.LFE65:
 1842              		.align	2
 1843              		.global	armwave_clear_buffer
 1844              		.syntax unified
 1845              		.arm
 1846              		.fpu vfp
 1848              	armwave_clear_buffer:
 1849              	.LVL93:
 1850              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1851              		.loc 1 359 1 is_stmt 1 view -0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 0
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 1855              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1856              		.loc 1 361 5 view .LVU492
 1857              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1858              		.loc 1 361 58 is_stmt 0 view .LVU493
 1859 0964 0C309FE5 		ldr	r3, .L102	@ tmp114,
 1860              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1861              		.loc 1 361 5 view .LVU494
 1862 0968 0010A0E3 		mov	r1, #0	@,
 1863 096c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1864 0970 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1865              	.LVL94:
 1866              		.loc 1 361 5 view .LVU495
 1867 0974 FEFFFFEA 		b	memset		@
 1868              	.LVL95:
 1869              	.L103:
 1870              		.align	2
 1871              	.L102:
 1872 0978 00000000 		.word	g_armwave_state
 1873              		.cfi_endproc
 1874              	.LFE66:
 1876              		.align	2
 1877              		.global	armwave_set_channel_colour
 1878              		.syntax unified
 1879              		.arm
 1880              		.fpu vfp
 1882              	armwave_set_channel_colour:
 1883              	.LVL96:
 1884              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 1885              		.loc 1 368 1 is_stmt 1 view -0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 1890              		.loc 1 370 5 view .LVU497
 1891 097c 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1892              		.loc 1 372 13 view .LVU498
 1893              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 1894              		.loc 1 372 41 is_stmt 0 view .LVU499
 1895 0980 0C009F05 		ldreq	r0, .L106	@ tmp117,
 1896              	.LVL97:
 1897              		.loc 1 372 41 view .LVU500
 1898 0984 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1899              		.loc 1 373 13 is_stmt 1 view .LVU501
 1900              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 1901              		.loc 1 373 41 is_stmt 0 view .LVU502
 1902 0988 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1903              		.loc 1 374 13 is_stmt 1 view .LVU503
 1904              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 1905              		.loc 1 374 41 is_stmt 0 view .LVU504
 1906 098c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 1907              		.loc 1 375 13 is_stmt 1 view .LVU505
 1908              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 1909              		.loc 1 377 1 is_stmt 0 view .LVU506
 1910 0990 1EFF2FE1 		bx	lr	@
 1911              	.L107:
 1912              		.align	2
 1913              	.L106:
 1914 0994 00000000 		.word	g_armwave_state
 1915              		.cfi_endproc
 1916              	.LFE67:
 1918              		.align	2
 1919              		.global	armwave_dump_ppm_debug
 1920              		.syntax unified
 1921              		.arm
 1922              		.fpu vfp
 1924              	armwave_dump_ppm_debug:
 1925              	.LVL98:
 1926              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 1927              		.loc 1 383 1 is_stmt 1 view -0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1931              		.loc 1 384 5 view .LVU508
 1932              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1933              		.loc 1 383 1 is_stmt 0 view .LVU509
 1934 0998 0130A0E1 		mov	r3, r1	@ fn, fn
 1935 099c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1936              		.cfi_def_cfa_offset 28
 1937              		.cfi_offset 4, -28
 1938              		.cfi_offset 5, -24
 1939              		.cfi_offset 6, -20
 1940              		.cfi_offset 7, -16
 1941              		.cfi_offset 8, -12
 1942              		.cfi_offset 9, -8
 1943              		.cfi_offset 14, -4
 1944 09a0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1945 09a4 0CD04DE2 		sub	sp, sp, #12	@,,
 1946              		.cfi_def_cfa_offset 40
 1947              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 1948              		.loc 1 384 16 view .LVU510
 1949 09a8 C4109FE5 		ldr	r1, .L116	@,
 1950              	.LVL99:
 1951              		.loc 1 384 16 view .LVU511
 1952 09ac 0300A0E1 		mov	r0, r3	@, fn
 1953              	.LVL100:
 1954              		.loc 1 384 16 view .LVU512
 1955 09b0 FEFFFFEB 		bl	fopen64		@
 1956              	.LVL101:
 1957              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1958              		.loc 1 391 5 view .LVU513
 1959 09b4 BC609FE5 		ldr	r6, .L116+4	@ tmp150,
 1960              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1961              		.loc 1 390 5 view .LVU514
 1962 09b8 0320A0E3 		mov	r2, #3	@,
 1963 09bc 0110A0E3 		mov	r1, #1	@,
 1964              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 1965              		.loc 1 384 16 view .LVU515
 1966 09c0 0070A0E1 		mov	r7, r0	@ fp,
 1967              	.LVL102:
 385:armwave.c     ****     uint32_t data;
 1968              		.loc 1 385 5 is_stmt 1 view .LVU516
 386:armwave.c     **** 
 1969              		.loc 1 386 5 view .LVU517
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1970              		.loc 1 390 5 view .LVU518
 1971 09c4 0030A0E1 		mov	r3, r0	@, fp
 1972 09c8 AC009FE5 		ldr	r0, .L116+8	@,
 1973              	.LVL103:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1974              		.loc 1 390 5 is_stmt 0 view .LVU519
 1975 09cc FEFFFFEB 		bl	fwrite		@
 1976              	.LVL104:
 1977              		.loc 1 391 5 is_stmt 1 view .LVU520
 1978 09d0 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1979 09d4 A4109FE5 		ldr	r1, .L116+12	@,
 1980 09d8 0700A0E1 		mov	r0, r7	@, fp
 1981 09dc FEFFFFEB 		bl	fprintf		@
 1982              	.LVL105:
 392:armwave.c     ****     fputs("255\n", fp);
 1983              		.loc 1 392 5 view .LVU521
 1984 09e0 0420A0E3 		mov	r2, #4	@,
 1985 09e4 0730A0E1 		mov	r3, r7	@, fp
 1986 09e8 0110A0E3 		mov	r1, #1	@,
 1987 09ec 90009FE5 		ldr	r0, .L116+16	@,
 1988 09f0 FEFFFFEB 		bl	fwrite		@
 1989              	.LVL106:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1990              		.loc 1 394 5 view .LVU522
 1991              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1992              		.loc 1 394 37 is_stmt 0 view .LVU523
 1993 09f4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1994              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1995              		.loc 1 394 5 view .LVU524
 1996 09f8 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1997 09fc 180000DA 		ble	.L109		@,
 1998 0a00 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1999              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2000              		.loc 1 399 13 view .LVU525
 2001 0a04 7C909FE5 		ldr	r9, .L116+20	@ tmp152,
 2002              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2003              		.loc 1 394 12 view .LVU526
 2004 0a08 0050A0E3 		mov	r5, #0	@ yy,
 2005              	.LVL107:
 2006              	.L110:
 2007              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2008              		.loc 1 395 9 view .LVU527
 2009 0a0c 000053E3 		cmp	r3, #0	@ _13,
 2010              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2011              		.loc 1 395 16 view .LVU528
 2012 0a10 0040A0C3 		movgt	r4, #0	@ xx,
 2013              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2014              		.loc 1 395 9 view .LVU529
 2015 0a14 0F0000DA 		ble	.L112		@,
 2016              	.LVL108:
 2017              	.L111:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2018              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU530
 2019              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2020              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU531
 2021 0a18 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2022              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2023              		.loc 1 399 13 discriminator 3 view .LVU532
 2024 0a1c 0910A0E1 		mov	r1, r9	@, tmp152
 2025 0a20 0700A0E1 		mov	r0, r7	@, fp
 2026              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2027              		.loc 1 396 18 discriminator 3 view .LVU533
 2028 0a24 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2029              	.LVL109:
 2030              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU534
 2031              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2032              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU535
 2033 0a28 014084E2 		add	r4, r4, #1	@ xx, xx,
 2034              	.LVL110:
 2035              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2036              		.loc 1 399 81 discriminator 3 view .LVU536
 2037 0a2c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2038              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2039              		.loc 1 399 61 discriminator 3 view .LVU537
 2040 0a30 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2041              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2042              		.loc 1 399 13 discriminator 3 view .LVU538
 2043 0a34 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2044 0a38 7330EFE6 		uxtb	r3, r3	@, tmp142
 2045 0a3c 00C08DE5 		str	ip, [sp]	@ tmp147,
 2046 0a40 7220EFE6 		uxtb	r2, r2	@, data
 2047              	.LVL111:
 2048              		.loc 1 399 13 discriminator 3 view .LVU539
 2049 0a44 FEFFFFEB 		bl	fprintf		@
 2050              	.LVL112:
 2051              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2052              		.loc 1 395 41 discriminator 3 view .LVU540
 2053 0a48 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2054              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2055              		.loc 1 395 9 discriminator 3 view .LVU541
 2056 0a4c 040053E1 		cmp	r3, r4	@ _13, xx
 2057 0a50 F0FFFFCA 		bgt	.L111		@,
 2058 0a54 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2059              	.LVL113:
 2060              	.L112:
 2061              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2062              		.loc 1 394 55 discriminator 2 view .LVU542
 2063 0a58 015085E2 		add	r5, r5, #1	@ yy, yy,
 2064              	.LVL114:
 2065              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2066              		.loc 1 394 5 discriminator 2 view .LVU543
 2067 0a5c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2068 0a60 E9FFFFBA 		blt	.L110		@,
 2069              	.LVL115:
 2070              	.L109:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 2071              		.loc 1 403 5 is_stmt 1 view .LVU544
 2072 0a64 0700A0E1 		mov	r0, r7	@, fp
 2073              	@ armwave.c:404: }
 404:armwave.c     **** }
 2074              		.loc 1 404 1 is_stmt 0 view .LVU545
 2075 0a68 0CD08DE2 		add	sp, sp, #12	@,,
 2076              		.cfi_def_cfa_offset 28
 2077              		@ sp needed	@
 2078 0a6c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2079              		.cfi_restore 14
 2080              		.cfi_restore 9
 2081              		.cfi_restore 8
 2082              		.cfi_restore 7
 2083              		.cfi_restore 6
 2084              		.cfi_restore 5
 2085              		.cfi_restore 4
 2086              		.cfi_def_cfa_offset 0
 2087              	.LVL116:
 2088              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2089              		.loc 1 403 5 view .LVU546
 2090 0a70 FEFFFFEA 		b	fclose		@
 2091              	.LVL117:
 2092              	.L117:
 403:armwave.c     **** }
 2093              		.loc 1 403 5 view .LVU547
 2094              		.align	2
 2095              	.L116:
 2096 0a74 C0010000 		.word	.LC13
 2097 0a78 00000000 		.word	g_armwave_state
 2098 0a7c C4010000 		.word	.LC14
 2099 0a80 C8010000 		.word	.LC15
 2100 0a84 D0010000 		.word	.LC16
 2101 0a88 D8010000 		.word	.LC17
 2102              		.cfi_endproc
 2103              	.LFE68:
 2105              		.align	2
 2106              		.global	armwave_test_init
 2107              		.syntax unified
 2108              		.arm
 2109              		.fpu vfp
 2111              	armwave_test_init:
 2112              	.LVL118:
 2113              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2114              		.loc 1 410 1 is_stmt 1 view -0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2118              		.loc 1 411 5 view .LVU549
 2119              	.LBB18:
 2120              	.LBI18:
  34:armwave.c     **** {
 2121              		.loc 1 34 6 view .LVU550
  34:armwave.c     **** {
 2122              		.loc 1 34 6 is_stmt 0 view .LVU551
 2123              	.LBE18:
 2124              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2125              		.loc 1 410 1 view .LVU552
 2126 0a8c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2127              		.cfi_def_cfa_offset 32
 2128              		.cfi_offset 4, -32
 2129              		.cfi_offset 5, -28
 2130              		.cfi_offset 6, -24
 2131              		.cfi_offset 7, -20
 2132              		.cfi_offset 8, -16
 2133              		.cfi_offset 9, -12
 2134              		.cfi_offset 10, -8
 2135              		.cfi_offset 14, -4
 2136 0a90 068B2DED 		vpush.64	{d8, d9, d10}	@
 2137              		.cfi_def_cfa_offset 56
 2138              		.cfi_offset 80, -56
 2139              		.cfi_offset 81, -52
 2140              		.cfi_offset 82, -48
 2141              		.cfi_offset 83, -44
 2142              		.cfi_offset 84, -40
 2143              		.cfi_offset 85, -36
 2144 0a94 C0409FE5 		ldr	r4, .L122+20	@ ivtmp.90,
 2145              	.LBB21:
 2146              	.LBB19:
 2147              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2148              		.loc 1 40 32 view .LVU553
 2149 0a98 2EAA9FED 		vldr.32	s20, .L122+16	@ tmp136,
 2150              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2151              		.loc 1 40 26 view .LVU554
 2152 0a9c 299B9FED 		vldr.64	d9, .L122	@ tmp151,
 2153              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2154              		.loc 1 40 49 view .LVU555
 2155 0aa0 2A8B9FED 		vldr.64	d8, .L122+8	@ tmp139,
 2156 0aa4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.90,
 2157              	.LBE19:
 2158              	.LBE21:
 2159              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2160              		.loc 1 410 1 view .LVU556
 2161 0aa8 10D04DE2 		sub	sp, sp, #16	@,,
 2162              		.cfi_def_cfa_offset 72
 2163              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2164              		.loc 1 410 1 view .LVU557
 2165 0aac 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2166 0ab0 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2167 0ab4 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2168 0ab8 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2169 0abc 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.90,
 2170 0ac0 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2171              	.LVL119:
 2172              	.L119:
 2173              	.LBB22:
 2174              	.LBB20:
  40:armwave.c     ****     }
 2175              		.loc 1 40 9 is_stmt 1 view .LVU558
 2176              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2177              		.loc 1 40 32 is_stmt 0 view .LVU559
 2178 0ac4 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.90
 2179              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2180              		.loc 1 40 26 view .LVU560
 2181 0ac8 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2182              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2183              		.loc 1 40 32 view .LVU561
 2184 0acc 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2185 0ad0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2186 0ad4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2187              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2188              		.loc 1 40 26 view .LVU562
 2189 0ad8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2190 0adc FEFFFFEB 		bl	pow		@
 2191              	.LVL120:
 2192              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2193              		.loc 1 40 49 view .LVU563
 2194 0ae0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2195              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2196              		.loc 1 40 24 view .LVU564
 2197 0ae4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2198 0ae8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2199 0aec 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2200              	.LVL121:
 2201              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2202              		.loc 1 39 5 view .LVU565
 2203 0af0 0A0054E1 		cmp	r4, r10	@ ivtmp.90, _39
 2204 0af4 F2FFFF1A 		bne	.L119		@,
 2205              	.LVL122:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2206              		.loc 1 39 5 view .LVU566
 2207              	.LBE20:
 2208              	.LBE22:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2209              		.loc 1 414 5 is_stmt 1 view .LVU567
 2210              	.LBB23:
 2211              	.LBI23:
 367:armwave.c     **** {
 2212              		.loc 1 367 6 view .LVU568
 2213              	.LBB24:
 370:armwave.c     ****         case 1:
 2214              		.loc 1 370 5 view .LVU569
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2215              		.loc 1 372 13 view .LVU570
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2216              		.loc 1 373 13 view .LVU571
 2217              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2218              		.loc 1 372 41 is_stmt 0 view .LVU572
 2219 0af8 60C09FE5 		ldr	ip, .L122+24	@ tmp142,
 2220 0afc 60409FE5 		ldr	r4, .L122+28	@ tmp143,
 2221              	.LBE24:
 2222              	.LBE23:
 2223              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2224              		.loc 1 416 5 view .LVU573
 2225 0b00 0000A0E3 		mov	r0, #0	@ tmp147,
 2226              	.LBB28:
 2227              	.LBB25:
 2228              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2229              		.loc 1 374 41 view .LVU574
 2230 0b04 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2231              	.LBE25:
 2232              	.LBE28:
 2233              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2234              		.loc 1 416 5 view .LVU575
 2235 0b08 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2236 0b0c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2237 0b10 00808DE5 		str	r8, [sp]	@ render_width,
 2238 0b14 0610A0E1 		mov	r1, r6	@, tmp3
 2239 0b18 0720A0E1 		mov	r2, r7	@, nwaves
 2240              	.LBB29:
 2241              	.LBB26:
 2242              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2243              		.loc 1 372 41 view .LVU576
 2244 0b1c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2245              		.loc 1 374 13 is_stmt 1 view .LVU577
 2246              	.LBE26:
 2247              	.LBE29:
 2248              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2249              		.loc 1 416 5 is_stmt 0 view .LVU578
 2250 0b20 0630A0E1 		mov	r3, r6	@, wave_size
 2251              	.LBB30:
 2252              	.LBB27:
 2253              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2254              		.loc 1 374 41 view .LVU579
 2255 0b24 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2256              		.loc 1 375 13 is_stmt 1 view .LVU580
 2257              	.LVL123:
 375:armwave.c     ****     }
 2258              		.loc 1 375 13 is_stmt 0 view .LVU581
 2259              	.LBE27:
 2260              	.LBE30:
 2261              		.loc 1 416 5 is_stmt 1 view .LVU582
 2262 0b28 FEFFFFEB 		bl	armwave_setup_render		@
 2263              	.LVL124:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2264              		.loc 1 418 5 view .LVU583
 2265 0b2c 34109FE5 		ldr	r1, .L122+32	@,
 2266 0b30 34009FE5 		ldr	r0, .L122+36	@,
 2267              	@ armwave.c:419: }
 419:armwave.c     **** }
 2268              		.loc 1 419 1 is_stmt 0 view .LVU584
 2269 0b34 10D08DE2 		add	sp, sp, #16	@,,
 2270              		.cfi_def_cfa_offset 56
 2271              		@ sp needed	@
 2272 0b38 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2273              		.cfi_restore 84
 2274              		.cfi_restore 85
 2275              		.cfi_restore 82
 2276              		.cfi_restore 83
 2277              		.cfi_restore 80
 2278              		.cfi_restore 81
 2279              		.cfi_def_cfa_offset 32
 2280 0b3c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2281              		.cfi_restore 14
 2282              		.cfi_restore 10
 2283              		.cfi_restore 9
 2284              		.cfi_restore 8
 2285              		.cfi_restore 7
 2286              		.cfi_restore 6
 2287              		.cfi_restore 5
 2288              		.cfi_restore 4
 2289              		.cfi_def_cfa_offset 0
 2290              	.LVL125:
 2291              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2292              		.loc 1 418 5 view .LVU585
 2293 0b40 FEFFFFEA 		b	printf		@
 2294              	.LVL126:
 2295              	.L123:
 2296 0b44 0000A0E1 		.align	3
 2297              	.L122:
 2298 0b48 000000C0 		.word	-1073741824
 2299 0b4c CCCCEC3F 		.word	1072483532
 2300 0b50 00000000 		.word	0
 2301 0b54 00E06F40 		.word	1081073664
 2302 0b58 00007F43 		.word	1132396544
 2303 0b5c FFFFFFFF 		.word	gamma_table-1
 2304 0b60 00000000 		.word	g_armwave_state
 2305 0b64 F609F406 		.word	116656630
 2306 0b68 00000000 		.word	.LC0
 2307 0b6c 08000000 		.word	.LC1
 2308              		.cfi_endproc
 2309              	.LFE69:
 2311              		.align	2
 2312              		.global	armwave_test_fill_outbuf
 2313              		.syntax unified
 2314              		.arm
 2315              		.fpu vfp
 2317              	armwave_test_fill_outbuf:
 2318              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2319              		.loc 1 425 1 is_stmt 1 view -0
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 0
 2322              		@ frame_needed = 0, uses_anonymous_args = 0
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2323              		.loc 1 426 5 view .LVU587
 2324              	@ armwave.c:425: {
 425:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2325              		.loc 1 425 1 is_stmt 0 view .LVU588
 2326 0b70 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2327              		.cfi_def_cfa_offset 32
 2328              		.cfi_offset 4, -32
 2329              		.cfi_offset 5, -28
 2330              		.cfi_offset 6, -24
 2331              		.cfi_offset 7, -20
 2332              		.cfi_offset 8, -16
 2333              		.cfi_offset 9, -12
 2334              		.cfi_offset 10, -8
 2335              		.cfi_offset 14, -4
 2336              	@ armwave.c:426:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2337              		.loc 1 426 5 view .LVU589
 2338 0b74 00419FE5 		ldr	r4, .L135	@ tmp221,
 2339 0b78 685094E5 		ldr	r5, [r4, #104]	@ _1, g_armwave_state.out_pixbuf
 2340              	.LVL127:
 2341              	.LBB33:
 2342              	.LBI33:
 117:armwave.c     **** {
 2343              		.loc 1 117 6 is_stmt 1 view .LVU590
 2344              	.LBB34:
 119:armwave.c     ****     // uint32_t ysub;
 2345              		.loc 1 119 5 view .LVU591
 121:armwave.c     ****     uint8_t r, g, b, value; 
 2346              		.loc 1 121 5 view .LVU592
 122:armwave.c     ****     // uint8_t row;
 2347              		.loc 1 122 5 view .LVU593
 124:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2348              		.loc 1 124 5 view .LVU594
 125:armwave.c     ****     uint32_t offset;
 2349              		.loc 1 125 5 view .LVU595
 126:armwave.c     **** 
 2350              		.loc 1 126 5 view .LVU596
 128:armwave.c     **** 
 2351              		.loc 1 128 5 view .LVU597
 2352 0b7c 000055E3 		cmp	r5, #0	@ _1,
 2353 0b80 3800000A 		beq	.L134		@,
 131:armwave.c     **** 
 2354              		.loc 1 131 5 view .LVU598
 2355              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2356              		.loc 1 131 59 is_stmt 0 view .LVU599
 2357 0b84 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2358 0b88 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2359              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2360              		.loc 1 131 5 view .LVU600
 2361 0b8c 0010A0E3 		mov	r1, #0	@,
 2362 0b90 0500A0E1 		mov	r0, r5	@, _1
 2363              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2364              		.loc 1 131 59 view .LVU601
 2365 0b94 920302E0 		mul	r2, r2, r3	@ tmp176, g_armwave_state.target_height, g_armwave_state.target_width
 2366              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2367              		.loc 1 131 5 view .LVU602
 2368 0b98 0221A0E1 		lsl	r2, r2, #2	@, tmp176,
 2369 0b9c FEFFFFEB 		bl	memset		@
 2370              	.LVL128:
 133:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2371              		.loc 1 133 5 is_stmt 1 view .LVU603
 2372              	@ armwave.c:133:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 133:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2373              		.loc 1 133 10 is_stmt 0 view .LVU604
 2374 0ba0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2375 0ba4 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2376 0ba8 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2377              	.LVL129:
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2378              		.loc 1 176 5 is_stmt 1 view .LVU605
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2379              		.loc 1 176 5 is_stmt 0 view .LVU606
 2380 0bac 000052E3 		cmp	r2, #0	@ npix,
 2381 0bb0 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2382              	@ armwave.c:177:         wave_word = g_armwave_state.ch1_buffer[n];
 177:armwave.c     ****         value = wave_word & 0xffff;
 2383              		.loc 1 177 36 view .LVU607
 2384 0bb4 041094E5 		ldr	r1, [r4, #4]	@ _12, g_armwave_state.ch1_buffer
 2385              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2386              		.loc 1 181 44 view .LVU608
 2387 0bb8 FC76D4E1 		ldrsh	r7, [r4, #108]	@ _19, g_armwave_state.ch1_color.r
 2388              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2389              		.loc 1 182 44 view .LVU609
 2390 0bbc FE66D4E1 		ldrsh	r6, [r4, #110]	@ _24, g_armwave_state.ch1_color.g
 2391              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 2392              		.loc 1 183 44 view .LVU610
 2393 0bc0 F0E7D4E1 		ldrsh	lr, [r4, #112]	@ _28, g_armwave_state.ch1_color.b
 2394              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2395              		.loc 1 194 49 view .LVU611
 2396 0bc4 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _48, g_armwave_state.vscale_frac
 2397 0bc8 021041E2 		sub	r1, r1, #2	@ ivtmp.95, _12,
 2398 0bcc 822081E0 		add	r2, r1, r2, lsl #1	@ _96, ivtmp.95, npix,
 2399              	.LVL130:
 2400              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2401              		.loc 1 176 11 view .LVU612
 2402 0bd0 0000A0E3 		mov	r0, #0	@ n,
 2403              	.LVL131:
 2404              	.L128:
 177:armwave.c     ****         value = wave_word & 0xffff;
 2405              		.loc 1 177 9 is_stmt 1 view .LVU613
 178:armwave.c     **** 
 2406              		.loc 1 178 9 view .LVU614
 2407              	@ armwave.c:178:         value = wave_word & 0xffff;
 178:armwave.c     **** 
 2408              		.loc 1 178 15 is_stmt 0 view .LVU615
 2409 0bd4 B280F1E1 		ldrh	r8, [r1, #2]!	@ MEM[base: _101, offset: 0B], MEM[base: _101, offset: 0B]
 2410              	.LVL132:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2411              		.loc 1 180 9 is_stmt 1 view .LVU616
 2412              	@ armwave.c:180:         if(value != 0) {
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2413              		.loc 1 180 11 is_stmt 0 view .LVU617
 2414 0bd8 FF8018E2 		ands	r8, r8, #255	@ value, MEM[base: _101, offset: 0B],
 2415              	.LVL133:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2416              		.loc 1 180 11 view .LVU618
 2417 0bdc 1D00000A 		beq	.L127		@,
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2418              		.loc 1 181 13 is_stmt 1 view .LVU619
 2419              	.LVL134:
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2420              		.loc 1 182 13 view .LVU620
 183:armwave.c     **** 
 2421              		.loc 1 183 13 view .LVU621
 185:armwave.c     ****             g = MIN(gg, 255);
 2422              		.loc 1 185 13 view .LVU622
 186:armwave.c     ****             b = MIN(bb, 255);
 2423              		.loc 1 186 13 view .LVU623
 187:armwave.c     **** 
 2424              		.loc 1 187 13 view .LVU624
 190:armwave.c     **** 
 2425              		.loc 1 190 13 view .LVU625
 193:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2426              		.loc 1 193 13 view .LVU626
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2427              		.loc 1 194 13 view .LVU627
 195:armwave.c     ****             xx = (nsub >> 8) / 2;
 2428              		.loc 1 195 13 view .LVU628
 196:armwave.c     **** 
 2429              		.loc 1 196 13 view .LVU629
 199:armwave.c     ****             {
 2430              		.loc 1 199 13 view .LVU630
 201:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2431              		.loc 1 201 17 view .LVU631
 202:armwave.c     ****             }
 2432              		.loc 1 202 17 view .LVU632
 2433              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2434              		.loc 1 194 24 is_stmt 0 view .LVU633
 2435 0be0 70C0EFE6 		uxtb	ip, r0	@ n, n
 2436              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 2437              		.loc 1 183 47 view .LVU634
 2438 0be4 880E63E1 		smulbb	r3, r8, lr	@ tmp207, value, _28
 2439              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2440              		.loc 1 194 32 view .LVU635
 2441 0be8 90CA07EE 		vmov	s15, ip	@ int	@ n, n
 2442              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2443              		.loc 1 182 47 view .LVU636
 2444 0bec 880669E1 		smulbb	r9, r8, r6	@ tmp211, value, _24
 2445              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 2446              		.loc 1 183 16 view .LVU637
 2447 0bf0 4334A0E1 		asr	r3, r3, #8	@ bb, tmp207,
 2448              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 2449              		.loc 1 187 17 view .LVU638
 2450 0bf4 FF0053E3 		cmp	r3, #255	@ bb,
 2451              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2452              		.loc 1 194 32 view .LVU639
 2453 0bf8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, n
 2454              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2455              		.loc 1 182 16 view .LVU640
 2456 0bfc 4994A0E1 		asr	r9, r9, #8	@ gg, tmp211,
 2457              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2458              		.loc 1 181 47 view .LVU641
 2459 0c00 880768E1 		smulbb	r8, r8, r7	@ tmp217, value, _19
 2460              	.LVL135:
 2461              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 2462              		.loc 1 187 17 view .LVU642
 2463 0c04 FF30A0A3 		movge	r3, #255	@ bb,
 2464              	@ armwave.c:186:             g = MIN(gg, 255);
 186:armwave.c     ****             b = MIN(bb, 255);
 2465              		.loc 1 186 17 view .LVU643
 2466 0c08 FF0059E3 		cmp	r9, #255	@ gg,
 2467 0c0c FF90A0A3 		movge	r9, #255	@ gg,
 2468              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2469              		.loc 1 181 16 view .LVU644
 2470 0c10 4884A0E1 		asr	r8, r8, #8	@ rr, tmp217,
 2471              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 2472              		.loc 1 185 17 view .LVU645
 2473 0c14 FF0058E3 		cmp	r8, #255	@ rr,
 2474              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2475              		.loc 1 194 32 view .LVU646
 2476 0c18 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp198, _48
 2477              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2478              		.loc 1 190 48 view .LVU647
 2479 0c1c 0994A0E1 		lsl	r9, r9, #8	@ tmp212, gg,
 2480              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2481              		.loc 1 190 36 view .LVU648
 2482 0c20 0338A0E1 		lsl	r3, r3, #16	@ tmp208, bb,
 2483              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 2484              		.loc 1 185 17 view .LVU649
 2485 0c24 FF80A0A3 		movge	r8, #255	@ rr,
 2486              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2487              		.loc 1 190 48 view .LVU650
 2488 0c28 7990FFE6 		uxth	r9, r9	@ tmp213, tmp212
 2489              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2490              		.loc 1 190 36 view .LVU651
 2491 0c2c FF3803E2 		and	r3, r3, #16711680	@ tmp209, tmp208,
 2492              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2493              		.loc 1 190 43 view .LVU652
 2494 0c30 093083E1 		orr	r3, r3, r9	@ tmp215, tmp209, tmp213
 2495              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2496              		.loc 1 190 54 view .LVU653
 2497 0c34 7880EFE6 		uxtb	r8, r8	@ rr, rr
 2498              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2499              		.loc 1 194 16 view .LVU654
 2500 0c38 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp199
 2501              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2502              		.loc 1 190 54 view .LVU655
 2503 0c3c 083083E1 		orr	r3, r3, r8	@ tmp219, tmp215, rr
 2504              	@ armwave.c:201:                 offset = (xx + (y * g_armwave_state.target_width)); 
 201:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2505              		.loc 1 201 35 view .LVU656
 2506 0c40 58C094E5 		ldr	ip, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2507              	@ armwave.c:196:             xx = (nsub >> 8) / 2;
 196:armwave.c     **** 
 2508              		.loc 1 196 30 view .LVU657
 2509 0c44 C094A0E1 		asr	r9, r0, #9	@ xx, n,
 2510              	.LVL136:
 2511              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2512              		.loc 1 190 18 view .LVU658
 2513 0c48 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp219,
 2514              	@ armwave.c:202:                 *(out_buffer_base + offset) = word;
 202:armwave.c     ****             }
 2515              		.loc 1 202 35 view .LVU659
 2516 0c4c 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 2517 0c50 9C982CE0 		mla	ip, ip, r8, r9	@ tmp205, g_armwave_state.target_width, yy, xx
 2518              	@ armwave.c:202:                 *(out_buffer_base + offset) = word;
 202:armwave.c     ****             }
 2519              		.loc 1 202 45 view .LVU660
 2520 0c54 0C3185E7 		str	r3, [r5, ip, lsl #2]	@ word, *_59
 2521              	.LVL137:
 2522              	.L127:
 2523              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2524              		.loc 1 176 5 view .LVU661
 2525 0c58 010052E1 		cmp	r2, r1	@ _96, ivtmp.95
 2526              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2527              		.loc 1 176 28 view .LVU662
 2528 0c5c 010080E2 		add	r0, r0, #1	@ n, n,
 2529              	.LVL138:
 2530              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2531              		.loc 1 176 5 view .LVU663
 2532 0c60 DBFFFF1A 		bne	.L128		@,
 2533 0c64 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2534              	.LVL139:
 2535              	.L134:
 128:armwave.c     **** 
 2536              		.loc 1 128 5 is_stmt 1 view .LVU664
 2537 0c68 10309FE5 		ldr	r3, .L135+4	@,
 2538 0c6c 8020A0E3 		mov	r2, #128	@,
 2539 0c70 0C109FE5 		ldr	r1, .L135+8	@,
 2540 0c74 0C009FE5 		ldr	r0, .L135+12	@,
 2541 0c78 FEFFFFEB 		bl	__assert_fail		@
 2542              	.LVL140:
 2543              	.L136:
 128:armwave.c     **** 
 2544              		.loc 1 128 5 is_stmt 0 view .LVU665
 2545              		.align	2
 2546              	.L135:
 2547 0c7c 00000000 		.word	g_armwave_state
 2548 0c80 00000000 		.word	.LANCHOR0
 2549 0c84 20000000 		.word	.LC2
 2550 0c88 2C000000 		.word	.LC3
 2551              	.LBE34:
 2552              	.LBE33:
 2553              		.cfi_endproc
 2554              	.LFE70:
 2556              		.align	2
 2557              		.global	armwave_test_dump_buffer_to_ppm
 2558              		.syntax unified
 2559              		.arm
 2560              		.fpu vfp
 2562              	armwave_test_dump_buffer_to_ppm:
 2563              	.LVL141:
 2564              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2565              		.loc 1 433 1 is_stmt 1 view -0
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 0
 2568              		@ frame_needed = 0, uses_anonymous_args = 0
 2569              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2570              		.loc 1 434 5 view .LVU667
 2571 0c8c 08309FE5 		ldr	r3, .L138	@ tmp112,
 2572 0c90 0010A0E1 		mov	r1, r0	@, fn
 2573 0c94 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2574              	.LVL142:
 2575              		.loc 1 434 5 is_stmt 0 view .LVU668
 2576 0c98 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2577              	.LVL143:
 2578              	.L139:
 2579              		.loc 1 434 5 view .LVU669
 2580              		.align	2
 2581              	.L138:
 2582 0c9c 00000000 		.word	g_armwave_state
 2583              		.cfi_endproc
 2584              	.LFE71:
 2586              		.align	2
 2587              		.global	armwave_test_fill_gdkbuf
 2588              		.syntax unified
 2589              		.arm
 2590              		.fpu vfp
 2592              	armwave_test_fill_gdkbuf:
 2593              	.LVL144:
 2594              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2595              		.loc 1 441 1 is_stmt 1 view -0
 2596              		.cfi_startproc
 2597              		@ args = 0, pretend = 0, frame = 0
 2598              		@ frame_needed = 0, uses_anonymous_args = 0
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2599              		.loc 1 446 5 view .LVU671
 2600              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2601              		.loc 1 446 11 is_stmt 0 view .LVU672
 2602 0ca0 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2603              	@ armwave.c:441: {
 441:armwave.c     ****     //PyObject *mv;
 2604              		.loc 1 441 1 view .LVU673
 2605 0ca4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2606              		.cfi_def_cfa_offset 32
 2607              		.cfi_offset 4, -32
 2608              		.cfi_offset 5, -28
 2609              		.cfi_offset 6, -24
 2610              		.cfi_offset 7, -20
 2611              		.cfi_offset 8, -16
 2612              		.cfi_offset 9, -12
 2613              		.cfi_offset 10, -8
 2614              		.cfi_offset 14, -4
 2615              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2616              		.loc 1 446 11 view .LVU674
 2617 0ca8 285093E5 		ldr	r5, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2618              	.LVL145:
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2619              		.loc 1 449 5 is_stmt 1 view .LVU675
 2620              	.LBB37:
 2621              	.LBI37:
 117:armwave.c     **** {
 2622              		.loc 1 117 6 view .LVU676
 2623              	.LBB38:
 119:armwave.c     ****     // uint32_t ysub;
 2624              		.loc 1 119 5 view .LVU677
 121:armwave.c     ****     uint8_t r, g, b, value; 
 2625              		.loc 1 121 5 view .LVU678
 122:armwave.c     ****     // uint8_t row;
 2626              		.loc 1 122 5 view .LVU679
 124:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2627              		.loc 1 124 5 view .LVU680
 125:armwave.c     ****     uint32_t offset;
 2628              		.loc 1 125 5 view .LVU681
 126:armwave.c     **** 
 2629              		.loc 1 126 5 view .LVU682
 128:armwave.c     **** 
 2630              		.loc 1 128 5 view .LVU683
 2631 0cac 000055E3 		cmp	r5, #0	@ out_pixbuf,
 2632 0cb0 3900000A 		beq	.L150		@,
 131:armwave.c     **** 
 2633              		.loc 1 131 5 view .LVU684
 2634              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2635              		.loc 1 131 45 is_stmt 0 view .LVU685
 2636 0cb4 F4409FE5 		ldr	r4, .L151	@ tmp223,
 2637              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2638              		.loc 1 131 5 view .LVU686
 2639 0cb8 0010A0E3 		mov	r1, #0	@,
 2640 0cbc 0500A0E1 		mov	r0, r5	@, out_pixbuf
 2641              	.LVL146:
 2642              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2643              		.loc 1 131 59 view .LVU687
 2644 0cc0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2645 0cc4 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2646 0cc8 920302E0 		mul	r2, r2, r3	@ tmp178, g_armwave_state.target_height, g_armwave_state.target_width
 2647              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     **** 
 2648              		.loc 1 131 5 view .LVU688
 2649 0ccc 0221A0E1 		lsl	r2, r2, #2	@, tmp178,
 2650 0cd0 FEFFFFEB 		bl	memset		@
 2651              	.LVL147:
 133:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2652              		.loc 1 133 5 is_stmt 1 view .LVU689
 2653              	@ armwave.c:133:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 133:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2654              		.loc 1 133 10 is_stmt 0 view .LVU690
 2655 0cd4 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2656 0cd8 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2657 0cdc 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2658              	.LVL148:
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2659              		.loc 1 176 5 is_stmt 1 view .LVU691
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2660              		.loc 1 176 5 is_stmt 0 view .LVU692
 2661 0ce0 000052E3 		cmp	r2, #0	@ npix,
 2662 0ce4 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2663              	@ armwave.c:177:         wave_word = g_armwave_state.ch1_buffer[n];
 177:armwave.c     ****         value = wave_word & 0xffff;
 2664              		.loc 1 177 36 view .LVU693
 2665 0ce8 041094E5 		ldr	r1, [r4, #4]	@ _14, g_armwave_state.ch1_buffer
 2666              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2667              		.loc 1 181 44 view .LVU694
 2668 0cec FC76D4E1 		ldrsh	r7, [r4, #108]	@ _21, g_armwave_state.ch1_color.r
 2669              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2670              		.loc 1 182 44 view .LVU695
 2671 0cf0 FE66D4E1 		ldrsh	r6, [r4, #110]	@ _26, g_armwave_state.ch1_color.g
 2672              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 2673              		.loc 1 183 44 view .LVU696
 2674 0cf4 F0E7D4E1 		ldrsh	lr, [r4, #112]	@ _30, g_armwave_state.ch1_color.b
 2675              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2676              		.loc 1 194 49 view .LVU697
 2677 0cf8 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _50, g_armwave_state.vscale_frac
 2678 0cfc 021041E2 		sub	r1, r1, #2	@ ivtmp.100, _14,
 2679 0d00 822081E0 		add	r2, r1, r2, lsl #1	@ _98, ivtmp.100, npix,
 2680              	.LVL149:
 2681              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2682              		.loc 1 176 11 view .LVU698
 2683 0d04 0000A0E3 		mov	r0, #0	@ n,
 2684              	.LVL150:
 2685              	.L144:
 177:armwave.c     ****         value = wave_word & 0xffff;
 2686              		.loc 1 177 9 is_stmt 1 view .LVU699
 178:armwave.c     **** 
 2687              		.loc 1 178 9 view .LVU700
 2688              	@ armwave.c:178:         value = wave_word & 0xffff;
 178:armwave.c     **** 
 2689              		.loc 1 178 15 is_stmt 0 view .LVU701
 2690 0d08 B280F1E1 		ldrh	r8, [r1, #2]!	@ MEM[base: _103, offset: 0B], MEM[base: _103, offset: 0B]
 2691              	.LVL151:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2692              		.loc 1 180 9 is_stmt 1 view .LVU702
 2693              	@ armwave.c:180:         if(value != 0) {
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2694              		.loc 1 180 11 is_stmt 0 view .LVU703
 2695 0d0c FF8018E2 		ands	r8, r8, #255	@ value, MEM[base: _103, offset: 0B],
 2696              	.LVL152:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2697              		.loc 1 180 11 view .LVU704
 2698 0d10 1D00000A 		beq	.L143		@,
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2699              		.loc 1 181 13 is_stmt 1 view .LVU705
 2700              	.LVL153:
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2701              		.loc 1 182 13 view .LVU706
 183:armwave.c     **** 
 2702              		.loc 1 183 13 view .LVU707
 185:armwave.c     ****             g = MIN(gg, 255);
 2703              		.loc 1 185 13 view .LVU708
 186:armwave.c     ****             b = MIN(bb, 255);
 2704              		.loc 1 186 13 view .LVU709
 187:armwave.c     **** 
 2705              		.loc 1 187 13 view .LVU710
 190:armwave.c     **** 
 2706              		.loc 1 190 13 view .LVU711
 193:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2707              		.loc 1 193 13 view .LVU712
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2708              		.loc 1 194 13 view .LVU713
 195:armwave.c     ****             xx = (nsub >> 8) / 2;
 2709              		.loc 1 195 13 view .LVU714
 196:armwave.c     **** 
 2710              		.loc 1 196 13 view .LVU715
 199:armwave.c     ****             {
 2711              		.loc 1 199 13 view .LVU716
 201:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2712              		.loc 1 201 17 view .LVU717
 202:armwave.c     ****             }
 2713              		.loc 1 202 17 view .LVU718
 2714              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2715              		.loc 1 194 24 is_stmt 0 view .LVU719
 2716 0d14 70C0EFE6 		uxtb	ip, r0	@ n, n
 2717              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 2718              		.loc 1 183 47 view .LVU720
 2719 0d18 880E63E1 		smulbb	r3, r8, lr	@ tmp209, value, _30
 2720              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2721              		.loc 1 194 32 view .LVU721
 2722 0d1c 90CA07EE 		vmov	s15, ip	@ int	@ n, n
 2723              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2724              		.loc 1 182 47 view .LVU722
 2725 0d20 880669E1 		smulbb	r9, r8, r6	@ tmp213, value, _26
 2726              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 2727              		.loc 1 183 16 view .LVU723
 2728 0d24 4334A0E1 		asr	r3, r3, #8	@ bb, tmp209,
 2729              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 2730              		.loc 1 187 17 view .LVU724
 2731 0d28 FF0053E3 		cmp	r3, #255	@ bb,
 2732              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2733              		.loc 1 194 32 view .LVU725
 2734 0d2c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp200, n
 2735              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2736              		.loc 1 182 16 view .LVU726
 2737 0d30 4994A0E1 		asr	r9, r9, #8	@ gg, tmp213,
 2738              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2739              		.loc 1 181 47 view .LVU727
 2740 0d34 880768E1 		smulbb	r8, r8, r7	@ tmp219, value, _21
 2741              	.LVL154:
 2742              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 2743              		.loc 1 187 17 view .LVU728
 2744 0d38 FF30A0A3 		movge	r3, #255	@ bb,
 2745              	@ armwave.c:186:             g = MIN(gg, 255);
 186:armwave.c     ****             b = MIN(bb, 255);
 2746              		.loc 1 186 17 view .LVU729
 2747 0d3c FF0059E3 		cmp	r9, #255	@ gg,
 2748 0d40 FF90A0A3 		movge	r9, #255	@ gg,
 2749              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2750              		.loc 1 181 16 view .LVU730
 2751 0d44 4884A0E1 		asr	r8, r8, #8	@ rr, tmp219,
 2752              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 2753              		.loc 1 185 17 view .LVU731
 2754 0d48 FF0058E3 		cmp	r8, #255	@ rr,
 2755              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2756              		.loc 1 194 32 view .LVU732
 2757 0d4c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp201, tmp200, _50
 2758              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2759              		.loc 1 190 48 view .LVU733
 2760 0d50 0994A0E1 		lsl	r9, r9, #8	@ tmp214, gg,
 2761              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2762              		.loc 1 190 36 view .LVU734
 2763 0d54 0338A0E1 		lsl	r3, r3, #16	@ tmp210, bb,
 2764              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 2765              		.loc 1 185 17 view .LVU735
 2766 0d58 FF80A0A3 		movge	r8, #255	@ rr,
 2767              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2768              		.loc 1 190 48 view .LVU736
 2769 0d5c 7990FFE6 		uxth	r9, r9	@ tmp215, tmp214
 2770              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2771              		.loc 1 190 36 view .LVU737
 2772 0d60 FF3803E2 		and	r3, r3, #16711680	@ tmp211, tmp210,
 2773              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2774              		.loc 1 190 43 view .LVU738
 2775 0d64 093083E1 		orr	r3, r3, r9	@ tmp217, tmp211, tmp215
 2776              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2777              		.loc 1 190 54 view .LVU739
 2778 0d68 7880EFE6 		uxtb	r8, r8	@ rr, rr
 2779              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2780              		.loc 1 194 16 view .LVU740
 2781 0d6c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp201
 2782              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2783              		.loc 1 190 54 view .LVU741
 2784 0d70 083083E1 		orr	r3, r3, r8	@ tmp221, tmp217, rr
 2785              	@ armwave.c:201:                 offset = (xx + (y * g_armwave_state.target_width)); 
 201:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2786              		.loc 1 201 35 view .LVU742
 2787 0d74 58C094E5 		ldr	ip, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2788              	@ armwave.c:196:             xx = (nsub >> 8) / 2;
 196:armwave.c     **** 
 2789              		.loc 1 196 30 view .LVU743
 2790 0d78 C094A0E1 		asr	r9, r0, #9	@ xx, n,
 2791              	.LVL155:
 2792              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 2793              		.loc 1 190 18 view .LVU744
 2794 0d7c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp221,
 2795              	@ armwave.c:202:                 *(out_buffer_base + offset) = word;
 202:armwave.c     ****             }
 2796              		.loc 1 202 35 view .LVU745
 2797 0d80 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 2798 0d84 9C982CE0 		mla	ip, ip, r8, r9	@ tmp207, g_armwave_state.target_width, yy, xx
 2799              	@ armwave.c:202:                 *(out_buffer_base + offset) = word;
 202:armwave.c     ****             }
 2800              		.loc 1 202 45 view .LVU746
 2801 0d88 0C3185E7 		str	r3, [r5, ip, lsl #2]	@ word, *_61
 2802              	.LVL156:
 2803              	.L143:
 2804              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2805              		.loc 1 176 5 view .LVU747
 2806 0d8c 010052E1 		cmp	r2, r1	@ _98, ivtmp.100
 2807              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2808              		.loc 1 176 28 view .LVU748
 2809 0d90 010080E2 		add	r0, r0, #1	@ n, n,
 2810              	.LVL157:
 2811              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2812              		.loc 1 176 5 view .LVU749
 2813 0d94 DBFFFF1A 		bne	.L144		@,
 2814 0d98 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2815              	.LVL158:
 2816              	.L150:
 128:armwave.c     **** 
 2817              		.loc 1 128 5 is_stmt 1 view .LVU750
 2818 0d9c 10309FE5 		ldr	r3, .L151+4	@,
 2819 0da0 8020A0E3 		mov	r2, #128	@,
 2820 0da4 0C109FE5 		ldr	r1, .L151+8	@,
 2821 0da8 0C009FE5 		ldr	r0, .L151+12	@,
 2822              	.LVL159:
 128:armwave.c     **** 
 2823              		.loc 1 128 5 is_stmt 0 view .LVU751
 2824 0dac FEFFFFEB 		bl	__assert_fail		@
 2825              	.LVL160:
 2826              	.L152:
 128:armwave.c     **** 
 2827              		.loc 1 128 5 view .LVU752
 2828              		.align	2
 2829              	.L151:
 2830 0db0 00000000 		.word	g_armwave_state
 2831 0db4 00000000 		.word	.LANCHOR0
 2832 0db8 20000000 		.word	.LC2
 2833 0dbc 2C000000 		.word	.LC3
 2834              	.LBE38:
 2835              	.LBE37:
 2836              		.cfi_endproc
 2837              	.LFE72:
 2839              		.align	2
 2840              		.global	armwave_test_buffer_alloc
 2841              		.syntax unified
 2842              		.arm
 2843              		.fpu vfp
 2845              	armwave_test_buffer_alloc:
 2846              	.LVL161:
 2847              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2848              		.loc 1 456 1 is_stmt 1 view -0
 2849              		.cfi_startproc
 2850              		@ args = 0, pretend = 0, frame = 0
 2851              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2852              		.loc 1 457 5 view .LVU754
 2853              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2854              		.loc 1 456 1 is_stmt 0 view .LVU755
 2855 0dc0 70402DE9 		push	{r4, r5, r6, lr}	@
 2856              		.cfi_def_cfa_offset 16
 2857              		.cfi_offset 4, -16
 2858              		.cfi_offset 5, -12
 2859              		.cfi_offset 6, -8
 2860              		.cfi_offset 14, -4
 2861              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2862              		.loc 1 456 1 view .LVU756
 2863 0dc4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2864              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2865              		.loc 1 457 23 view .LVU757
 2866 0dc8 44409FE5 		ldr	r4, .L160	@ tmp128,
 2867 0dcc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2868              	.LVL162:
 2869              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2870              		.loc 1 457 7 view .LVU758
 2871 0dd0 000050E3 		cmp	r0, #0	@ _1,
 2872 0dd4 0000000A 		beq	.L154		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2873              		.loc 1 458 9 is_stmt 1 view .LVU759
 2874 0dd8 FEFFFFEB 		bl	free		@
 2875              	.LVL163:
 2876              	.L154:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2877              		.loc 1 463 5 view .LVU760
 2878              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2879              		.loc 1 463 75 is_stmt 0 view .LVU761
 2880 0ddc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2881 0de0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2882              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2883              		.loc 1 463 40 view .LVU762
 2884 0de4 0610A0E1 		mov	r1, r6	@, nsets
 2885              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2886              		.loc 1 463 75 view .LVU763
 2887 0de8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2888              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2889              		.loc 1 463 40 view .LVU764
 2890 0dec 0500A0E1 		mov	r0, r5	@, _4
 2891 0df0 FEFFFFEB 		bl	calloc		@
 2892              	.LVL164:
 2893              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2894              		.loc 1 465 7 view .LVU765
 2895 0df4 000050E3 		cmp	r0, #0	@ tmp124,
 2896              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2897              		.loc 1 463 38 view .LVU766
 2898 0df8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2899              		.loc 1 465 5 is_stmt 1 view .LVU767
 2900              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2901              		.loc 1 465 7 is_stmt 0 view .LVU768
 2902 0dfc 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2903              		.loc 1 466 9 is_stmt 1 view .LVU769
 2904 0e00 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2905 0e04 0620A0E1 		mov	r2, r6	@, nsets
 2906 0e08 08009FE5 		ldr	r0, .L160+4	@,
 2907              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2908              		.loc 1 470 1 is_stmt 0 view .LVU770
 2909 0e0c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2910              		.cfi_restore 14
 2911              		.cfi_restore 6
 2912              		.cfi_restore 5
 2913              		.cfi_restore 4
 2914              		.cfi_def_cfa_offset 0
 2915              	.LVL165:
 2916              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2917              		.loc 1 466 9 view .LVU771
 2918 0e10 FEFFFFEA 		b	printf		@
 2919              	.LVL166:
 2920              	.L161:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2921              		.loc 1 466 9 view .LVU772
 2922              		.align	2
 2923              	.L160:
 2924 0e14 00000000 		.word	g_armwave_state
 2925 0e18 E8010000 		.word	.LC18
 2926              		.cfi_endproc
 2927              	.LFE73:
 2929              		.align	2
 2930              		.global	armwave_fill_pixbuf_into_pybuffer
 2931              		.syntax unified
 2932              		.arm
 2933              		.fpu vfp
 2935              	armwave_fill_pixbuf_into_pybuffer:
 2936              	.LVL167:
 2937              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2938              		.loc 1 476 1 is_stmt 1 view -0
 2939              		.cfi_startproc
 2940              		@ args = 0, pretend = 0, frame = 48
 2941              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2942              		.loc 1 477 5 view .LVU774
 478:armwave.c     ****     int ret;
 2943              		.loc 1 478 5 view .LVU775
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2944              		.loc 1 482 5 view .LVU776
 2945              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2946              		.loc 1 476 1 is_stmt 0 view .LVU777
 2947 0e1c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2948              		.cfi_def_cfa_offset 4
 2949              		.cfi_offset 14, -4
 2950 0e20 34D04DE2 		sub	sp, sp, #52	@,,
 2951              		.cfi_def_cfa_offset 56
 2952              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2953              		.loc 1 482 11 view .LVU778
 2954 0e24 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2955 0e28 0120A0E3 		mov	r2, #1	@,
 2956 0e2c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2957              	.LVL168:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2958              		.loc 1 484 5 is_stmt 1 view .LVU779
 2959              	@ armwave.c:484:     if(ret != 0) {
 2960              		.loc 1 484 7 is_stmt 0 view .LVU780
 2961 0e30 000050E3 		cmp	r0, #0	@,
 2962 0e34 0A00001A 		bne	.L166		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2963              		.loc 1 491 5 is_stmt 1 view .LVU781
 2964 0e38 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2965              	.LVL169:
 2966              		.loc 1 491 5 is_stmt 0 view .LVU782
 2967 0e3c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2968              	.LVL170:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2969              		.loc 1 494 5 is_stmt 1 view .LVU783
 2970 0e40 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2971 0e44 FEFFFFEB 		bl	PyBuffer_Release		@
 2972              	.LVL171:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2973              		.loc 1 497 5 view .LVU784
 2974              	.LBB39:
 2975              	.LBI39:
 2976              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2977              		.loc 2 456 20 view .LVU785
 2978              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2979              		.loc 2 458 21 view .LVU786
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2980              		.loc 2 459 5 view .LVU787
 2981              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2982              		.loc 2 459 18 is_stmt 0 view .LVU788
 2983 0e48 38309FE5 		ldr	r3, .L167	@ tmp126,
 2984              	.LBE40:
 2985              	.LBE39:
 2986              	@ armwave.c:497:     Py_RETURN_TRUE;
 2987              		.loc 1 497 5 view .LVU789
 2988 0e4c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2989              	.LBB42:
 2990              	.LBB41:
 2991              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2992              		.loc 2 459 18 view .LVU790
 2993 0e50 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2994 0e54 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2995 0e58 002083E5 		str	r2, [r3]	@ tmp128,
 2996              	.LBE41:
 2997              	.LBE42:
 2998              	@ armwave.c:498: }
 498:armwave.c     **** }
 2999              		.loc 1 498 1 view .LVU791
 3000 0e5c 34D08DE2 		add	sp, sp, #52	@,,
 3001              		.cfi_remember_state
 3002              		.cfi_def_cfa_offset 4
 3003              		@ sp needed	@
 3004 0e60 04F09DE4 		ldr	pc, [sp], #4	@
 3005              	.LVL172:
 3006              	.L166:
 3007              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 3008              		.loc 1 485 9 is_stmt 1 view .LVU792
 3009 0e64 20009FE5 		ldr	r0, .L167+4	@,
 3010              	.LVL173:
 485:armwave.c     ****         Py_RETURN_FALSE;
 3011              		.loc 1 485 9 is_stmt 0 view .LVU793
 3012 0e68 FEFFFFEB 		bl	puts		@
 3013              	.LVL174:
 486:armwave.c     ****     }
 3014              		.loc 1 486 9 is_stmt 1 view .LVU794
 3015              	.LBB43:
 3016              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 3017              		.loc 2 456 20 view .LVU795
 3018              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3019              		.loc 2 458 21 view .LVU796
 3020              		.loc 2 459 5 view .LVU797
 3021              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3022              		.loc 2 459 18 is_stmt 0 view .LVU798
 3023 0e6c 1C309FE5 		ldr	r3, .L167+8	@ tmp120,
 3024              	.LBE44:
 3025              	.LBE43:
 3026              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 3027              		.loc 1 486 9 view .LVU799
 3028 0e70 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3029              	.LBB46:
 3030              	.LBB45:
 3031              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3032              		.loc 2 459 18 view .LVU800
 3033 0e74 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3034 0e78 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3035 0e7c 002083E5 		str	r2, [r3]	@ tmp122,
 3036              	.LBE45:
 3037              	.LBE46:
 3038              	@ armwave.c:498: }
 3039              		.loc 1 498 1 view .LVU801
 3040 0e80 34D08DE2 		add	sp, sp, #52	@,,
 3041              		.cfi_def_cfa_offset 4
 3042              		@ sp needed	@
 3043 0e84 04F09DE4 		ldr	pc, [sp], #4	@
 3044              	.L168:
 3045              		.align	2
 3046              	.L167:
 3047 0e88 00000000 		.word	_Py_TrueStruct
 3048 0e8c 3C020000 		.word	.LC19
 3049 0e90 00000000 		.word	_Py_FalseStruct
 3050              		.cfi_endproc
 3051              	.LFE74:
 3053              		.align	2
 3054              		.global	armwave_test_create_am_sine
 3055              		.syntax unified
 3056              		.arm
 3057              		.fpu vfp
 3059              	armwave_test_create_am_sine:
 3060              	.LVL175:
 3061              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 3062              		.loc 1 508 1 is_stmt 1 view -0
 3063              		.cfi_startproc
 3064              		@ args = 0, pretend = 0, frame = 8
 3065              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 3066              		.loc 1 509 5 view .LVU803
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3067              		.loc 1 510 5 view .LVU804
 3068              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 3069              		.loc 1 508 1 is_stmt 0 view .LVU805
 3070 0e94 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3071              		.cfi_def_cfa_offset 32
 3072              		.cfi_offset 4, -32
 3073              		.cfi_offset 5, -28
 3074              		.cfi_offset 6, -24
 3075              		.cfi_offset 7, -20
 3076              		.cfi_offset 8, -16
 3077              		.cfi_offset 9, -12
 3078              		.cfi_offset 10, -8
 3079              		.cfi_offset 14, -4
 3080              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3081              		.loc 1 510 38 view .LVU806
 3082 0e98 7A7A9FED 		vldr.32	s14, .L200	@ tmp180,
 3083              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3084              		.loc 1 510 55 view .LVU807
 3085 0e9c 00529FE5 		ldr	r5, .L200+28	@ tmp250,
 3086              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 3087              		.loc 1 508 1 view .LVU808
 3088 0ea0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3089              		.cfi_def_cfa_offset 80
 3090              		.cfi_offset 80, -80
 3091              		.cfi_offset 81, -76
 3092              		.cfi_offset 82, -72
 3093              		.cfi_offset 83, -68
 3094              		.cfi_offset 84, -64
 3095              		.cfi_offset 85, -60
 3096              		.cfi_offset 86, -56
 3097              		.cfi_offset 87, -52
 3098              		.cfi_offset 88, -48
 3099              		.cfi_offset 89, -44
 3100              		.cfi_offset 90, -40
 3101              		.cfi_offset 91, -36
 3102 0ea4 0090A0E1 		mov	r9, r0	@ sets, sets
 3103              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3104              		.loc 1 510 38 view .LVU809
 3105 0ea8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3106              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3107              		.loc 1 514 70 view .LVU810
 3108 0eac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3109 0eb0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3110              	.LBB49:
 3111              	.LBB50:
 3112              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3113              		.loc 1 457 23 view .LVU811
 3114 0eb4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3115              	.LVL176:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3116              		.loc 1 457 23 view .LVU812
 3117              	.LBE50:
 3118              	.LBE49:
 3119              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 3120              		.loc 1 510 38 view .LVU813
 3121 0eb8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3122              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3123              		.loc 1 514 70 view .LVU814
 3124 0ebc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3125              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 3126              		.loc 1 508 1 view .LVU815
 3127 0ec0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3128              	.LBB54:
 3129              	.LBB51:
 3130              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3131              		.loc 1 457 7 view .LVU816
 3132 0ec4 000050E3 		cmp	r0, #0	@ _82,
 3133              	.LBE51:
 3134              	.LBE54:
 3135              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 3136              		.loc 1 508 1 view .LVU817
 3137 0ec8 08D04DE2 		sub	sp, sp, #8	@,,
 3138              		.cfi_def_cfa_offset 88
 3139              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3140              		.loc 1 515 44 view .LVU818
 3141 0ecc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3142              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3143              		.loc 1 514 45 view .LVU819
 3144 0ed0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3145              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 3146              		.loc 1 510 38 view .LVU820
 3147 0ed4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3148              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 3149              		.loc 1 510 11 view .LVU821
 3150 0ed8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3151              	.LVL177:
 511:armwave.c     ****     int w, x;
 3152              		.loc 1 511 5 is_stmt 1 view .LVU822
 512:armwave.c     **** 
 3153              		.loc 1 512 5 view .LVU823
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3154              		.loc 1 514 5 view .LVU824
 3155              		.loc 1 515 5 view .LVU825
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3156              		.loc 1 516 5 view .LVU826
 3157              	.LBB55:
 3158              	.LBI49:
 455:armwave.c     **** {
 3159              		.loc 1 455 6 view .LVU827
 3160              	.LBB52:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3161              		.loc 1 457 5 view .LVU828
 3162              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3163              		.loc 1 457 7 is_stmt 0 view .LVU829
 3164 0edc 0000000A 		beq	.L170		@,
 458:armwave.c     ****     }
 3165              		.loc 1 458 9 is_stmt 1 view .LVU830
 3166 0ee0 FEFFFFEB 		bl	free		@
 3167              	.LVL178:
 3168              	.L170:
 463:armwave.c     **** 
 3169              		.loc 1 463 5 view .LVU831
 3170              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 3171              		.loc 1 463 75 is_stmt 0 view .LVU832
 3172 0ee4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3173 0ee8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3174              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 3175              		.loc 1 463 40 view .LVU833
 3176 0eec 0910A0E1 		mov	r1, r9	@, sets
 3177              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 3178              		.loc 1 463 75 view .LVU834
 3179 0ef0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3180              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 3181              		.loc 1 463 40 view .LVU835
 3182 0ef4 0400A0E1 		mov	r0, r4	@, _85
 3183 0ef8 FEFFFFEB 		bl	calloc		@
 3184              	.LVL179:
 3185              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3186              		.loc 1 465 7 view .LVU836
 3187 0efc 000050E3 		cmp	r0, #0	@ tmp191,
 3188              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 3189              		.loc 1 463 38 view .LVU837
 3190 0f00 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3191              		.loc 1 465 5 is_stmt 1 view .LVU838
 3192              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3193              		.loc 1 465 7 is_stmt 0 view .LVU839
 3194 0f04 5A00000A 		beq	.L199		@,
 3195              	.L171:
 3196              	.LVL180:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3197              		.loc 1 465 7 view .LVU840
 3198              	.LBE52:
 3199              	.LBE55:
 3200              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 3201              		.loc 1 518 5 discriminator 1 view .LVU841
 3202 0f08 000059E3 		cmp	r9, #0	@ sets,
 3203 0f0c 550000DA 		ble	.L169		@,
 3204              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3205              		.loc 1 537 45 view .LVU842
 3206 0f10 5C8A9FED 		vldr.32	s16, .L200	@ tmp258,
 3207              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3208              		.loc 1 540 104 view .LVU843
 3209 0f14 5CCA9FED 		vldr.32	s24, .L200+4	@ tmp259,
 3210              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3211              		.loc 1 518 5 view .LVU844
 3212 0f18 0070A0E3 		mov	r7, #0	@ set_offset,
 3213              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3214              		.loc 1 519 9 view .LVU845
 3215 0f1c 84A19FE5 		ldr	r10, .L200+32	@ tmp257,
 3216              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3217              		.loc 1 518 5 view .LVU846
 3218 0f20 0780A0E1 		mov	r8, r7	@ s, set_offset
 3219              	.LVL181:
 3220              	.L172:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3221              		.loc 1 519 9 is_stmt 1 view .LVU847
 3222 0f24 0810A0E1 		mov	r1, r8	@, s
 3223 0f28 0A00A0E1 		mov	r0, r10	@, tmp257
 3224 0f2c FEFFFFEB 		bl	printf		@
 3225              	.LVL182:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3226              		.loc 1 521 9 view .LVU848
 3227              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3228              		.loc 1 521 39 is_stmt 0 view .LVU849
 3229 0f30 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3230              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3231              		.loc 1 521 9 view .LVU850
 3232 0f34 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3233 0f38 450000DA 		ble	.L173		@,
 3234              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 3235              		.loc 1 523 21 view .LVU851
 3236 0f3c 53CADFED 		vldr.32	s25, .L200+8	@ tmp200,
 3237              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3238              		.loc 1 537 33 view .LVU852
 3239 0f40 53BA9FED 		vldr.32	s22, .L200+12	@ tmp253,
 3240              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3241              		.loc 1 535 24 view .LVU853
 3242 0f44 53AADFED 		vldr.32	s21, .L200+16	@ tmp254,
 3243 0f48 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3244              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3245              		.loc 1 521 15 view .LVU854
 3246 0f4c 0060A0E3 		mov	r6, #0	@ w,
 3247              	.LVL183:
 3248              	.L180:
 523:armwave.c     **** 
 3249              		.loc 1 523 13 is_stmt 1 view .LVU855
 3250              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 3251              		.loc 1 523 21 is_stmt 0 view .LVU856
 3252 0f50 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3253 0f54 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3254              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3255              		.loc 1 525 13 view .LVU857
 3256 0f58 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3257              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 3258              		.loc 1 523 21 view .LVU858
 3259 0f5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3260 0f60 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3261              	.LVL184:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3262              		.loc 1 525 13 is_stmt 1 view .LVU859
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3263              		.loc 1 525 13 is_stmt 0 view .LVU860
 3264 0f64 370000DA 		ble	.L174		@,
 3265 0f68 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3266              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3267              		.loc 1 540 113 view .LVU861
 3268 0f6c 4AAA9FED 		vldr.32	s20, .L200+20	@ tmp229,
 3269 0f70 4A8ADFED 		vldr.32	s17, .L200+24	@ tmp230,
 3270              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3271              		.loc 1 525 19 view .LVU862
 3272 0f74 0040A0E3 		mov	r4, #0	@ x,
 3273              	.LVL185:
 3274              	.L179:
 526:armwave.c     ****                 noise *= noise;
 3275              		.loc 1 526 17 is_stmt 1 view .LVU863
 3276              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 3277              		.loc 1 526 28 is_stmt 0 view .LVU864
 3278 0f78 FEFFFFEB 		bl	rand		@
 3279              	.LVL186:
 3280              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 3281              		.loc 1 526 35 view .LVU865
 3282 0f7c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3283              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 3284              		.loc 1 526 45 view .LVU866
 3285 0f80 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3286 0f84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3287              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 3288              		.loc 1 526 24 view .LVU867
 3289 0f88 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3290              	.LVL187:
 527:armwave.c     ****                 noise *= noise;
 3291              		.loc 1 527 17 is_stmt 1 view .LVU868
 3292              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 3293              		.loc 1 527 23 is_stmt 0 view .LVU869
 3294 0f8c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3295              	.LVL188:
 528:armwave.c     ****                 noise *= noise;
 3296              		.loc 1 528 17 is_stmt 1 view .LVU870
 3297              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 3298              		.loc 1 528 23 is_stmt 0 view .LVU871
 3299 0f90 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3300              	.LVL189:
 529:armwave.c     **** 
 3301              		.loc 1 529 17 is_stmt 1 view .LVU872
 3302              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 3303              		.loc 1 529 23 is_stmt 0 view .LVU873
 3304 0f94 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3305              	.LVL190:
 531:armwave.c     ****                     noise = -noise;
 3306              		.loc 1 531 17 is_stmt 1 view .LVU874
 3307              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 3308              		.loc 1 531 21 is_stmt 0 view .LVU875
 3309 0f98 FEFFFFEB 		bl	rand		@
 3310              	.LVL191:
 532:armwave.c     **** 
 3311              		.loc 1 532 21 is_stmt 1 view .LVU876
 3312              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 3313              		.loc 1 531 19 is_stmt 0 view .LVU877
 3314 0f9c 020910E3 		tst	r0, #32768	@,
 3315              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 3316              		.loc 1 532 27 view .LVU878
 3317 0fa0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3318              	.LVL192:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3319              		.loc 1 534 17 is_stmt 1 view .LVU879
 535:armwave.c     **** 
 3320              		.loc 1 535 17 view .LVU880
 3321              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3322              		.loc 1 535 27 is_stmt 0 view .LVU881
 3323 0fa4 FEFFFFEB 		bl	rand		@
 3324              	.LVL193:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3325              		.loc 1 537 17 is_stmt 1 view .LVU882
 3326              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3327              		.loc 1 537 45 is_stmt 0 view .LVU883
 3328 0fa8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3329              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3330              		.loc 1 537 33 view .LVU884
 3331 0fac 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3332              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3333              		.loc 1 537 45 view .LVU885
 3334 0fb0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3335              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3336              		.loc 1 537 33 view .LVU886
 3337 0fb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3338              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3339              		.loc 1 537 45 view .LVU887
 3340 0fb8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3341              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3342              		.loc 1 537 33 view .LVU888
 3343 0fbc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3344              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3345              		.loc 1 535 34 view .LVU889
 3346 0fc0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3347              	.LVL194:
 3348              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3349              		.loc 1 535 44 view .LVU890
 3350 0fc4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3351 0fc8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3352              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3353              		.loc 1 535 24 view .LVU891
 3354 0fcc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3355              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3356              		.loc 1 537 77 view .LVU892
 3357 0fd0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3358              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3359              		.loc 1 537 22 view .LVU893
 3360 0fd4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3361 0fd8 FEFFFFEB 		bl	sin		@
 3362              	.LVL195:
 3363              		.loc 1 540 17 is_stmt 1 view .LVU894
 3364              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3365              		.loc 1 534 23 is_stmt 0 view .LVU895
 3366 0fdc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3367              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3368              		.loc 1 540 104 view .LVU896
 3369 0fe0 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3370              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3371              		.loc 1 537 98 view .LVU897
 3372 0fe4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3373              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3374              		.loc 1 537 87 view .LVU898
 3375 0fe8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3376              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3377              		.loc 1 537 98 view .LVU899
 3378 0fec 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3379              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3380              		.loc 1 537 19 view .LVU900
 3381 0ff0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3382              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3383              		.loc 1 540 113 view .LVU901
 3384 0ff4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3385 0ff8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3386 0ffc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3387 1000 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3388 1004 050000DA 		ble	.L176		@,
 3389              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3390              		.loc 1 540 104 discriminator 1 view .LVU902
 3391 1008 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3392 100c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3393 1010 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3394 1014 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3395 1018 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3396 101c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3397              	.L176:
 3398              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3399              		.loc 1 540 57 discriminator 12 view .LVU903
 3400 1020 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3401              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3402              		.loc 1 540 102 discriminator 12 view .LVU904
 3403 1024 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3404 1028 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3405 102c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3406              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3407              		.loc 1 525 58 discriminator 12 view .LVU905
 3408 1030 014084E2 		add	r4, r4, #1	@ x, x,
 3409              	.LVL196:
 3410              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3411              		.loc 1 540 102 discriminator 12 view .LVU906
 3412 1034 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3413              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3414              		.loc 1 525 43 discriminator 12 view .LVU907
 3415 1038 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3416              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3417              		.loc 1 525 13 discriminator 12 view .LVU908
 3418 103c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3419 1040 CCFFFFCA 		bgt	.L179		@,
 3420 1044 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3421              	.LVL197:
 3422              	.L174:
 3423              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3424              		.loc 1 521 48 discriminator 2 view .LVU909
 3425 1048 016086E2 		add	r6, r6, #1	@ w, w,
 3426              	.LVL198:
 3427              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3428              		.loc 1 521 9 discriminator 2 view .LVU910
 3429 104c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3430 1050 BEFFFFBA 		blt	.L180		@,
 3431              	.LVL199:
 3432              	.L173:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3433              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU911
 3434              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3435              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU912
 3436 1054 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3437              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3438              		.loc 1 518 27 discriminator 2 view .LVU913
 3439 1058 018088E2 		add	r8, r8, #1	@ s, s,
 3440              	.LVL200:
 3441              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3442              		.loc 1 518 5 discriminator 2 view .LVU914
 3443 105c 080059E1 		cmp	r9, r8	@ sets, s
 3444              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3445              		.loc 1 544 20 discriminator 2 view .LVU915
 3446 1060 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3447              	.LVL201:
 3448              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3449              		.loc 1 518 5 discriminator 2 view .LVU916
 3450 1064 AEFFFF1A 		bne	.L172		@,
 3451              	.LVL202:
 3452              	.L169:
 3453              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 3454              		.loc 1 546 1 view .LVU917
 3455 1068 08D08DE2 		add	sp, sp, #8	@,,
 3456              		.cfi_remember_state
 3457              		.cfi_def_cfa_offset 80
 3458              		@ sp needed	@
 3459 106c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3460              		.cfi_restore 90
 3461              		.cfi_restore 91
 3462              		.cfi_restore 88
 3463              		.cfi_restore 89
 3464              		.cfi_restore 86
 3465              		.cfi_restore 87
 3466              		.cfi_restore 84
 3467              		.cfi_restore 85
 3468              		.cfi_restore 82
 3469              		.cfi_restore 83
 3470              		.cfi_restore 80
 3471              		.cfi_restore 81
 3472              		.cfi_def_cfa_offset 32
 3473              	.LVL203:
 3474              		.loc 1 546 1 view .LVU918
 3475 1070 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3476              	.LVL204:
 3477              	.L199:
 3478              		.cfi_restore_state
 3479              	.LBB56:
 3480              	.LBB53:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3481              		.loc 1 466 9 is_stmt 1 view .LVU919
 3482 1074 940901E0 		mul	r1, r4, r9	@, _85, sets
 3483 1078 0920A0E1 		mov	r2, r9	@, sets
 3484 107c 28009FE5 		ldr	r0, .L200+36	@,
 3485 1080 FEFFFFEB 		bl	printf		@
 3486              	.LVL205:
 468:armwave.c     ****     }
 3487              		.loc 1 468 9 view .LVU920
 3488 1084 9FFFFFEA 		b	.L171		@
 3489              	.L201:
 3490              		.align	2
 3491              	.L200:
 3492 1088 0000803F 		.word	1065353216
 3493 108c 00007F43 		.word	1132396544
 3494 1090 0000003F 		.word	1056964608
 3495 1094 C3F5C840 		.word	1086911939
 3496 1098 38FFC74A 		.word	1254620984
 3497 109c 0000FE42 		.word	1123942400
 3498 10a0 00000043 		.word	1124073472
 3499 10a4 00000000 		.word	g_armwave_state
 3500 10a8 90020000 		.word	.LC20
 3501 10ac E8010000 		.word	.LC18
 3502              	.LBE53:
 3503              	.LBE56:
 3504              		.cfi_endproc
 3505              	.LFE75:
 3507              		.align	2
 3508              		.global	armwave_cleanup
 3509              		.syntax unified
 3510              		.arm
 3511              		.fpu vfp
 3513              	armwave_cleanup:
 3514              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 3515              		.loc 1 596 1 view -0
 3516              		.cfi_startproc
 3517              		@ args = 0, pretend = 0, frame = 0
 3518              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3519              		.loc 1 597 5 view .LVU922
 3520              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3521              		.loc 1 596 1 is_stmt 0 view .LVU923
 3522 10b0 10402DE9 		push	{r4, lr}	@
 3523              		.cfi_def_cfa_offset 8
 3524              		.cfi_offset 4, -8
 3525              		.cfi_offset 14, -4
 3526              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3527              		.loc 1 597 25 view .LVU924
 3528 10b4 34409FE5 		ldr	r4, .L204	@ tmp114,
 3529              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3530              		.loc 1 597 5 view .LVU925
 3531 10b8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3532 10bc FEFFFFEB 		bl	free		@
 3533              	.LVL206:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3534              		.loc 1 598 5 is_stmt 1 view .LVU926
 3535 10c0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3536 10c4 FEFFFFEB 		bl	free		@
 3537              	.LVL207:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3538              		.loc 1 599 5 view .LVU927
 3539 10c8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3540 10cc FEFFFFEB 		bl	free		@
 3541              	.LVL208:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3542              		.loc 1 600 5 view .LVU928
 3543 10d0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3544 10d4 FEFFFFEB 		bl	free		@
 3545              	.LVL209:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3546              		.loc 1 602 5 view .LVU929
 3547              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3548              		.loc 1 602 32 is_stmt 0 view .LVU930
 3549 10d8 0030A0E3 		mov	r3, #0	@ tmp123,
 3550 10dc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3551              		.loc 1 603 5 is_stmt 1 view .LVU931
 3552              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3553              		.loc 1 603 32 is_stmt 0 view .LVU932
 3554 10e0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3555              		.loc 1 604 5 is_stmt 1 view .LVU933
 3556              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3557              		.loc 1 604 38 is_stmt 0 view .LVU934
 3558 10e4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3559              		.loc 1 605 5 is_stmt 1 view .LVU935
 3560              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3561              		.loc 1 605 38 is_stmt 0 view .LVU936
 3562 10e8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3563              	@ armwave.c:606: }
 606:armwave.c     **** }
 3564              		.loc 1 606 1 view .LVU937
 3565 10ec 1080BDE8 		pop	{r4, pc}	@
 3566              	.L205:
 3567              		.align	2
 3568              	.L204:
 3569 10f0 00000000 		.word	g_armwave_state
 3570              		.cfi_endproc
 3571              	.LFE76:
 3573              		.comm	gamma_table,256,4
 3574              		.comm	g_armwave_state,136,4
 3575              		.section	.rodata
 3576              		.align	2
 3577              		.set	.LANCHOR0,. + 0
 3580              	__PRETTY_FUNCTION__.17096:
 3581 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3581      6176655F 
 3581      66696C6C 
 3581      5F706978 
 3581      6275665F 
 3582 001b 00       		.space	1
 3585              	__PRETTY_FUNCTION__.17120:
 3586 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3586      6176655F 
 3586      73657475 
 3586      705F7265 
 3586      6E646572 
 3587 0031 000000   		.space	3
 3590              	__PRETTY_FUNCTION__.17127:
 3591 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3591      6176655F 
 3591      7365745F 
 3591      77617665 
 3591      5F706F69 
 3592 004d 000000   		.space	3
 3595              	__PRETTY_FUNCTION__.17134:
 3596 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3596      6176655F 
 3596      7365745F 
 3596      77617665 
 3596      5F706F69 
 3597              		.section	.rodata.str1.4,"aMS",%progbits,1
 3598              		.align	2
 3599              	.LC0:
 3600 0000 76302E30 		.ascii	"v0.0.1\000"
 3600      2E3100
 3601 0007 00       		.space	1
 3602              	.LC1:
 3603 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3603      61766520 
 3603      76657273 
 3603      696F6E3A 
 3603      2025730A 
 3604 001d 000000   		.space	3
 3605              	.LC2:
 3606 0020 61726D77 		.ascii	"armwave.c\000"
 3606      6176652E 
 3606      6300
 3607 002a 0000     		.space	2
 3608              	.LC3:
 3609 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3609      62756666 
 3609      65722021 
 3609      3D204E55 
 3609      4C4C00
 3610 003f 00       		.space	1
 3611              	.LC4:
 3612 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3612      20653D25 
 3612      6420773D 
 3612      25642077 
 3612      733D2564 
 3613              	.LC5:
 3614 006c 73746172 		.ascii	"start_point < end_point\000"
 3614      745F706F 
 3614      696E7420 
 3614      3C20656E 
 3614      645F706F 
 3615              	.LC6:
 3616 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3616      7566665F 
 3616      73697A65 
 3616      3D25642C 
 3616      20636D70 
 3617 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3617      5F776964 
 3617      74683D25 
 3617      642C2077 
 3617      6176655F 
 3618 00e1 000000   		.space	3
 3619              	.LC7:
 3620 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3620      6D776176 
 3620      655F7374 
 3620      6174652E 
 3620      6368315F 
 3621 0107 00       		.space	1
 3622              	.LC8:
 3623 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3623      6D776176 
 3623      655F7374 
 3623      6174652E 
 3623      78636F6F 
 3624 0131 000000   		.space	3
 3625              	.LC9:
 3626 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3626      3A203078 
 3626      25303878 
 3626      20307825 
 3626      30387820 
 3627              	.LC10:
 3628 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3628      5F627566 
 3628      66657220 
 3628      213D204E 
 3628      554C4C00 
 3629              	.LC11:
 3630 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3630      6176655F 
 3630      7365745F 
 3630      77617665 
 3630      5F706F69 
 3631 019f 78636565 		.ascii	"xceeded\000"
 3631      64656400 
 3632 01a7 00       		.space	1
 3633              	.LC12:
 3634 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3634      5F627566 
 3634      6665725F 
 3634      70747220 
 3634      213D2030 
 3635 01bd 000000   		.space	3
 3636              	.LC13:
 3637 01c0 776200   		.ascii	"wb\000"
 3638 01c3 00       		.space	1
 3639              	.LC14:
 3640 01c4 50330A00 		.ascii	"P3\012\000"
 3641              	.LC15:
 3642 01c8 25642025 		.ascii	"%d %d\012\000"
 3642      640A00
 3643 01cf 00       		.space	1
 3644              	.LC16:
 3645 01d0 3235350A 		.ascii	"255\012\000"
 3645      00
 3646 01d5 000000   		.space	3
 3647              	.LC17:
 3648 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3648      25336420 
 3648      2533640A 
 3648      00
 3649 01e5 000000   		.space	3
 3650              	.LC18:
 3651 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3651      6176655F 
 3651      74657374 
 3651      5F627566 
 3651      6665725F 
 3652 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3652      20627566 
 3652      66657220 
 3652      28256420 
 3652      62797465 
 3653              	.LC19:
 3654 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3654      6176655F 
 3654      66696C6C 
 3654      5F706978 
 3654      6275665F 
 3655 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3655      20666169 
 3655      6C65642C 
 3655      20726574 
 3655      75726E69 
 3656 028e 0000     		.space	2
 3657              	.LC20:
 3658 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3658      756C6174 
 3658      696E6720 
 3658      74657374 
 3658      20736574 
 3659              		.text
 3660              	.Letext0:
 3661              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3662              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3663              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3664              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3665              		.file 7 "/usr/include/stdio.h"
 3666              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3667              		.file 9 "/usr/include/errno.h"
 3668              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3669              		.file 11 "/usr/include/unistd.h"
 3670              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3671              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3672              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3673              		.file 15 "/usr/include/math.h"
 3674              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3675              		.file 17 "/usr/include/time.h"
 3676              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3677              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3678              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3679              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3680              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3681              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3682              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3683              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3684              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3685              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3686              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3687              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3688              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3689              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3690              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3691              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3692              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3693              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3694              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3695              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3696              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3697              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3698              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3699              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3700              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3701              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3702              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3703              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3704              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3705              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3706              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3707              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3708              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3709              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3710              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3711              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3712              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3713              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3714              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3715              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3716              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3717              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3718              		.file 60 "/usr/local/include/python3.8/context.h"
 3719              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3720              		.file 62 "/usr/local/include/python3.8/code.h"
 3721              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3722              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3723              		.file 65 "/usr/local/include/python3.8/import.h"
 3724              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3725              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3726              		.file 68 "/usr/include/malloc.h"
 3727              		.file 69 "armwave.h"
 3728              		.file 70 "/usr/include/stdlib.h"
 3729              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3730              		.file 72 "<built-in>"
 3731              		.file 73 "/usr/include/assert.h"
 3732              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
