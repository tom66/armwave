   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t *test_wave_buffer; //[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.46,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.46,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.46,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.46
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.46, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     **** 
  81:armwave.c     ****     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 40
 239              		.cfi_offset 3, -40
 240              		.cfi_offset 4, -36
 241              		.cfi_offset 5, -32
 242              		.cfi_offset 6, -28
 243              		.cfi_offset 7, -24
 244              		.cfi_offset 8, -20
 245              		.cfi_offset 9, -16
 246              		.cfi_offset 10, -12
 247              		.cfi_offset 11, -8
 248              		.cfi_offset 14, -4
 249              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 250              		.loc 1 74 1 view .LVU32
 251 00a0 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 252              	@ armwave.c:81:     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 253              		.loc 1 81 5 view .LVU33
 254 00a4 F4509FE5 		ldr	r5, .L25	@ tmp247,
 255              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 256              		.loc 1 74 1 view .LVU34
 257 00a8 0190A0E1 		mov	r9, r1	@ height, height
 258              	@ armwave.c:81:     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 259              		.loc 1 81 5 view .LVU35
 260 00ac F0009FE5 		ldr	r0, .L25+4	@,
 261              	.LVL7:
 262              		.loc 1 81 5 view .LVU36
 263 00b0 041095E5 		ldr	r1, [r5, #4]	@, g_armwave_state.ch1_buffer
 264              	.LVL8:
 265              		.loc 1 81 5 view .LVU37
 266 00b4 FEFFFFEB 		bl	printf		@
 267              	.LVL9:
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 268              		.loc 1 82 5 is_stmt 1 view .LVU38
 269              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  83:armwave.c     **** 
  84:armwave.c     ****     // roll through each waveform
  85:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 270              		.loc 1 85 5 is_stmt 0 view .LVU39
 271 00b8 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 272              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 273              		.loc 1 82 63 view .LVU40
 274 00bc 306095E5 		ldr	r6, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 275              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 276              		.loc 1 85 5 view .LVU41
 277 00c0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 278              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 279              		.loc 1 82 40 view .LVU42
 280 00c4 044095E5 		ldr	r4, [r5, #4]	@ _2, g_armwave_state.ch1_buffer
 281              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 282              		.loc 1 82 63 view .LVU43
 283 00c8 960706E0 		mul	r6, r6, r7	@ _4, g_armwave_state.bitdepth_height, slice_y
 284              	.LVL10:
 285              		.loc 1 85 5 is_stmt 1 view .LVU44
 286              		.loc 1 85 5 is_stmt 0 view .LVU45
 287 00cc F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 288              	@ armwave.c:86:         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  86:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 289              		.loc 1 86 9 view .LVU46
 290 00d0 D0809FE5 		ldr	r8, .L25+8	@ tmp249,
 291 00d4 047047E2 		sub	r7, r7, #4	@ _36, slice_y,
 292              	.LVL11:
 293              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 294              		.loc 1 85 11 view .LVU47
 295 00d8 00A0A0E3 		mov	r10, #0	@ w,
 296              	.LVL12:
 297              	.L15:
 298              		.loc 1 86 9 is_stmt 1 view .LVU48
 299 00dc 141095E5 		ldr	r1, [r5, #20]	@, g_armwave_state.wave_buffer
 300 00e0 0800A0E1 		mov	r0, r8	@, tmp249
 301 00e4 FEFFFFEB 		bl	printf		@
 302              	.LVL13:
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 87 9 view .LVU49
 304              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 305              		.loc 1 87 64 is_stmt 0 view .LVU50
 306 00e8 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 307              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  88:armwave.c     **** 
  89:armwave.c     ****         // roll through y and render the slice into the out buffer
  90:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  91:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 308              		.loc 1 91 9 view .LVU51
 309 00ec 000059E3 		cmp	r9, #0	@ height,
 310              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 311              		.loc 1 87 36 view .LVU52
 312 00f0 14C095E5 		ldr	ip, [r5, #20]	@ _6, g_armwave_state.wave_buffer
 313              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 314              		.loc 1 87 64 view .LVU53
 315 00f4 930A03E0 		mul	r3, r3, r10	@ _9, g_armwave_state.wave_stride, w
 316              	.LVL14:
 317              		.loc 1 91 9 is_stmt 1 view .LVU54
 318              		.loc 1 91 9 is_stmt 0 view .LVU55
 319 00f8 2300000A 		beq	.L13		@,
 320 00fc 073083E0 		add	r3, r3, r7	@ tmp199, _9, _36
 321              	.LVL15:
 322              		.loc 1 91 9 view .LVU56
 323 0100 03C08CE0 		add	ip, ip, r3	@ ivtmp.53, _6, tmp199
 324              	.LVL16:
 325              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
 326              		.loc 1 91 16 view .LVU57
 327 0104 0030A0E3 		mov	r3, #0	@ yy,
 328              	.LVL17:
 329              	.L14:
  92:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 330              		.loc 1 92 13 is_stmt 1 view .LVU58
 331              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
 332              		.loc 1 92 18 is_stmt 0 view .LVU59
 333 0108 0420BCE5 		ldr	r2, [ip, #4]!	@ word, MEM[base: _149, offset: 0B]
 334              	.LVL18:
  93:armwave.c     **** 
  94:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 335              		.loc 1 94 13 is_stmt 1 view .LVU60
  95:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  96:armwave.c     ****                 scale_value = (word & 0xff);
 336              		.loc 1 96 17 view .LVU61
  97:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 337              		.loc 1 97 17 view .LVU62
  98:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 338              		.loc 1 98 17 view .LVU63
 339              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 340              		.loc 1 97 63 is_stmt 0 view .LVU64
 341 010c 300095E5 		ldr	r0, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 342 0110 01B083E2 		add	fp, r3, #1	@ tmp211, yy,
 343              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
 344              		.loc 1 98 47 view .LVU65
 345 0114 7210E6E6 		uxtab	r1, r6, r2	@ tmp204, _4, word
 346 0118 901320E0 		mla	r0, r0, r3, r1	@ tmp205, g_armwave_state.bitdepth_height, yy, tmp204
 347              	@ armwave.c:99:                 word >>= 8;
  99:armwave.c     ****                 word >>= 8;
 348              		.loc 1 99 22 view .LVU66
 349 011c 22E4A0E1 		lsr	lr, r2, #8	@ word, word,
 350              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 98 47 view .LVU67
 352 0120 0010D4E7 		ldrb	r1, [r4, r0]	@ zero_extendqisi2	@ *_59, *_59
 353 0124 7EE0E6E6 		uxtab	lr, r6, lr	@ tmp216, _4, word
 354 0128 011081E2 		add	r1, r1, #1	@ tmp208, *_59,
 355 012c 0010C4E7 		strb	r1, [r4, r0]	@ tmp208, *_59
 356              	.LVL19:
 357              		.loc 1 99 17 is_stmt 1 view .LVU68
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 358              		.loc 1 96 17 view .LVU69
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 97 17 view .LVU70
  98:armwave.c     ****                 word >>= 8;
 360              		.loc 1 98 17 view .LVU71
 361              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 362              		.loc 1 97 63 is_stmt 0 view .LVU72
 363 0130 301095E5 		ldr	r1, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 364              	@ armwave.c:99:                 word >>= 8;
 365              		.loc 1 99 22 view .LVU73
 366 0134 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 367              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 368              		.loc 1 98 47 view .LVU74
 369 0138 222C86E0 		add	r2, r6, r2, lsr #24	@ tmp239, _4, word,
 370              	.LVL20:
  98:armwave.c     ****                 word >>= 8;
 371              		.loc 1 98 47 view .LVU75
 372 013c 91EB21E0 		mla	r1, r1, fp, lr	@ tmp217, g_armwave_state.bitdepth_height, tmp211, tmp216
 373 0140 70E0E6E6 		uxtab	lr, r6, r0	@ tmp228, _4, word
 374 0144 01B0D4E7 		ldrb	fp, [r4, r1]	@ zero_extendqisi2	@ *_79, *_79
 375              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 376              		.loc 1 97 63 view .LVU76
 377 0148 020083E2 		add	r0, r3, #2	@ tmp223, yy,
 378              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 379              		.loc 1 98 47 view .LVU77
 380 014c 01B08BE2 		add	fp, fp, #1	@ tmp220, *_79,
 381 0150 01B0C4E7 		strb	fp, [r4, r1]	@ tmp220, *_79
 382              	.LVL21:
 383              		.loc 1 99 17 is_stmt 1 view .LVU78
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 384              		.loc 1 96 17 view .LVU79
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 385              		.loc 1 97 17 view .LVU80
  98:armwave.c     ****                 word >>= 8;
 386              		.loc 1 98 17 view .LVU81
 387              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 388              		.loc 1 97 63 is_stmt 0 view .LVU82
 389 0154 30B095E5 		ldr	fp, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 390 0158 031083E2 		add	r1, r3, #3	@ tmp235, yy,
 391              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 392              		.loc 1 91 37 view .LVU83
 393 015c 043083E2 		add	r3, r3, #4	@ yy, yy,
 394              	.LVL22:
 395              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 396              		.loc 1 98 47 view .LVU84
 397 0160 9BE020E0 		mla	r0, fp, r0, lr	@ tmp229, g_armwave_state.bitdepth_height, tmp223, tmp228
 398              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 399              		.loc 1 91 9 view .LVU85
 400 0164 030059E1 		cmp	r9, r3	@ height, yy
 401              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 402              		.loc 1 98 47 view .LVU86
 403 0168 00E0D4E7 		ldrb	lr, [r4, r0]	@ zero_extendqisi2	@ *_99, *_99
 404 016c 01E08EE2 		add	lr, lr, #1	@ tmp232, *_99,
 405 0170 00E0C4E7 		strb	lr, [r4, r0]	@ tmp232, *_99
 406              	.LVL23:
 407              		.loc 1 99 17 is_stmt 1 view .LVU87
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 408              		.loc 1 96 17 view .LVU88
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 409              		.loc 1 97 17 view .LVU89
  98:armwave.c     ****                 word >>= 8;
 410              		.loc 1 98 17 view .LVU90
 411              	@ armwave.c:97:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 97 63 is_stmt 0 view .LVU91
 413 0174 300095E5 		ldr	r0, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 414              	@ armwave.c:98:                 *(write_buffer + scale_value) += 1;
  98:armwave.c     ****                 word >>= 8;
 415              		.loc 1 98 47 view .LVU92
 416 0178 902122E0 		mla	r2, r0, r1, r2	@ tmp240, g_armwave_state.bitdepth_height, tmp235, tmp239
 417 017c 0210D4E7 		ldrb	r1, [r4, r2]	@ zero_extendqisi2	@ *_119, *_119
 418 0180 011081E2 		add	r1, r1, #1	@ tmp243, *_119,
 419 0184 0210C4E7 		strb	r1, [r4, r2]	@ tmp243, *_119
 420              		.loc 1 99 17 is_stmt 1 view .LVU93
 421              	.LVL24:
 422              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 423              		.loc 1 91 9 is_stmt 0 view .LVU94
 424 0188 DEFFFF8A 		bhi	.L14		@,
 425              	.LVL25:
 426              	.L13:
 427              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 428              		.loc 1 85 5 view .LVU95
 429 018c 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 430              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 431              		.loc 1 85 44 view .LVU96
 432 0190 01A08AE2 		add	r10, r10, #1	@ w, w,
 433              	.LVL26:
 434              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 435              		.loc 1 85 5 view .LVU97
 436 0194 0A0053E1 		cmp	r3, r10	@ g_armwave_state.waves, w
 437 0198 CFFFFF8A 		bhi	.L15		@,
 438 019c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 439              	.L26:
 440              		.align	2
 441              	.L25:
 442 01a0 00000000 		.word	g_armwave_state
 443 01a4 20000000 		.word	.LC2
 444 01a8 34000000 		.word	.LC3
 445              		.cfi_endproc
 446              	.LFE59:
 448              		.align	2
 449              		.global	armwave_fill_pixbuf_256
 450              		.syntax unified
 451              		.arm
 452              		.fpu vfp
 454              	armwave_fill_pixbuf_256:
 455              	.LVL27:
 456              	.LFB60:
 100:armwave.c     ****             }
 101:armwave.c     ****         }
 102:armwave.c     ****     }
 103:armwave.c     **** }
 104:armwave.c     **** 
 105:armwave.c     **** /*
 106:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 107:armwave.c     ****  */
 108:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 109:armwave.c     **** {
 457              		.loc 1 109 1 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 110:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 461              		.loc 1 110 5 view .LVU99
 111:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 462              		.loc 1 111 5 view .LVU100
 112:armwave.c     ****     uint8_t r, g, b, value;
 463              		.loc 1 112 5 view .LVU101
 113:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 464              		.loc 1 113 5 view .LVU102
 465              	@ armwave.c:109: {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 466              		.loc 1 109 1 is_stmt 0 view .LVU103
 467 01ac F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 468              		.cfi_def_cfa_offset 36
 469              		.cfi_offset 4, -36
 470              		.cfi_offset 5, -32
 471              		.cfi_offset 6, -28
 472              		.cfi_offset 7, -24
 473              		.cfi_offset 8, -20
 474              		.cfi_offset 9, -16
 475              		.cfi_offset 10, -12
 476              		.cfi_offset 11, -8
 477              		.cfi_offset 14, -4
 478              	@ armwave.c:117:     assert(out_buffer != NULL);
 114:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 115:armwave.c     ****     uint32_t offset;
 116:armwave.c     **** 
 117:armwave.c     ****     assert(out_buffer != NULL);
 479              		.loc 1 117 5 view .LVU104
 480 01b0 000050E3 		cmp	r0, #0	@ out_buffer
 481              	@ armwave.c:113:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 482              		.loc 1 113 15 view .LVU105
 483 01b4 44529FE5 		ldr	r5, .L54	@ tmp360,
 484              	@ armwave.c:109: {
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 485              		.loc 1 109 1 view .LVU106
 486 01b8 0CD04DE2 		sub	sp, sp, #12	@,,
 487              		.cfi_def_cfa_offset 48
 488              	@ armwave.c:113:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 489              		.loc 1 113 15 view .LVU107
 490 01bc 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 491              	.LVL28:
 114:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 492              		.loc 1 114 5 is_stmt 1 view .LVU108
 115:armwave.c     **** 
 493              		.loc 1 115 5 view .LVU109
 494              		.loc 1 117 5 view .LVU110
 495 01c0 8900000A 		beq	.L52		@,
 118:armwave.c     **** 
 119:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 120:armwave.c     **** 
 121:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 496              		.loc 1 121 5 view .LVU111
 497              	@ armwave.c:121:     npix = g_armwave_state.target_width * 256;
 498              		.loc 1 121 41 is_stmt 0 view .LVU112
 499 01c4 48C095E5 		ldr	ip, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 500 01c8 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 501              	.LVL29:
 122:armwave.c     **** 
 123:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 502              		.loc 1 123 5 is_stmt 1 view .LVU113
 503              		.loc 1 123 5 is_stmt 0 view .LVU114
 504 01cc 00005CE3 		cmp	ip, #0	@ npix,
 505 01d0 0A0000DA 		ble	.L27		@,
 506              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 124:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 125:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 126:armwave.c     ****         // most normal waveforms.
 127:armwave.c     ****         wave_word = *base_32ptr++;
 128:armwave.c     **** 
 129:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 130:armwave.c     ****             for(i = 0; i < 4; i++) {
 131:armwave.c     ****                 value = wave_word & 0xff;
 132:armwave.c     ****                 wave_word >>= 8;
 133:armwave.c     **** 
 134:armwave.c     ****                 if(value != 0) {
 135:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 507              		.loc 1 135 52 view .LVU115
 508 01d4 FCA5D5E1 		ldrsh	r10, [r5, #92]	@ _70, g_armwave_state.ch1_color.r
 509              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 510              		.loc 1 136 52 view .LVU116
 511 01d8 FE95D5E1 		ldrsh	r9, [r5, #94]	@ _76, g_armwave_state.ch1_color.g
 512              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 513              		.loc 1 137 52 view .LVU117
 514 01dc F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _80, g_armwave_state.ch1_color.b
 515              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 516              		.loc 1 123 11 view .LVU118
 517 01e0 0030A0E3 		mov	r3, #0	@ n,
 518 01e4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 519              	.LVL30:
 520              	.L36:
 127:armwave.c     **** 
 521              		.loc 1 127 9 is_stmt 1 view .LVU119
 522              	@ armwave.c:127:         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 523              		.loc 1 127 19 is_stmt 0 view .LVU120
 524 01e8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 525              	.LVL31:
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 526              		.loc 1 129 9 is_stmt 1 view .LVU121
 527              	@ armwave.c:129:         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 528              		.loc 1 129 11 is_stmt 0 view .LVU122
 529 01ec 000052E3 		cmp	r2, #0	@ wave_word,
 530 01f0 0400001A 		bne	.L53		@,
 531              	.LVL32:
 532              	.L31:
 533              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 534              		.loc 1 123 28 discriminator 2 view .LVU123
 535 01f4 043083E2 		add	r3, r3, #4	@ n, n,
 536              	.LVL33:
 537              	@ armwave.c:123:     for(n = 0; n < npix; n += 4) {
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 538              		.loc 1 123 5 discriminator 2 view .LVU124
 539 01f8 03005CE1 		cmp	ip, r3	@ npix, n
 540 01fc F9FFFFCA 		bgt	.L36		@,
 541              	.LVL34:
 542              	.L27:
 543              	@ armwave.c:156: }
 138:armwave.c     **** 
 139:armwave.c     ****                     r = MIN(rr, 255);
 140:armwave.c     ****                     g = MIN(gg, 255);
 141:armwave.c     ****                     b = MIN(bb, 255);
 142:armwave.c     **** 
 143:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 144:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 145:armwave.c     **** 
 146:armwave.c     ****                     // Is there a better way?
 147:armwave.c     ****                     nsub = n + i;
 148:armwave.c     ****                     xx = nsub & 0xff;
 149:armwave.c     ****                     yy = nsub >> 8;
 150:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 151:armwave.c     ****                     *(out_buffer_base + offset) = word;
 152:armwave.c     ****                 }
 153:armwave.c     ****             }
 154:armwave.c     ****         } 
 155:armwave.c     ****     }
 156:armwave.c     **** }
 544              		.loc 1 156 1 view .LVU125
 545 0200 0CD08DE2 		add	sp, sp, #12	@,,
 546              		.cfi_remember_state
 547              		.cfi_def_cfa_offset 36
 548              		@ sp needed	@
 549 0204 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 550              	.LVL35:
 551              	.L53:
 552              		.cfi_restore_state
 131:armwave.c     ****                 wave_word >>= 8;
 553              		.loc 1 131 17 is_stmt 1 view .LVU126
 132:armwave.c     **** 
 554              		.loc 1 132 17 view .LVU127
 555              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 556              		.loc 1 134 19 is_stmt 0 view .LVU128
 557 0208 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 558              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 559              		.loc 1 132 27 view .LVU129
 560 020c 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 561              	.LVL36:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 562              		.loc 1 134 17 is_stmt 1 view .LVU130
 563              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 564              		.loc 1 134 19 is_stmt 0 view .LVU131
 565 0210 1900000A 		beq	.L32		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 135 21 is_stmt 1 view .LVU132
 567              	.LVL37:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 568              		.loc 1 136 21 view .LVU133
 137:armwave.c     **** 
 569              		.loc 1 137 21 view .LVU134
 139:armwave.c     ****                     g = MIN(gg, 255);
 570              		.loc 1 139 21 view .LVU135
 140:armwave.c     ****                     b = MIN(bb, 255);
 571              		.loc 1 140 21 view .LVU136
 141:armwave.c     **** 
 572              		.loc 1 141 21 view .LVU137
 144:armwave.c     **** 
 573              		.loc 1 144 21 view .LVU138
 147:armwave.c     ****                     xx = nsub & 0xff;
 574              		.loc 1 147 21 view .LVU139
 148:armwave.c     ****                     yy = nsub >> 8;
 575              		.loc 1 148 21 view .LVU140
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 576              		.loc 1 149 21 view .LVU141
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 577              		.loc 1 150 21 view .LVU142
 151:armwave.c     ****                 }
 578              		.loc 1 151 21 view .LVU143
 579              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 580              		.loc 1 137 55 is_stmt 0 view .LVU144
 581 0214 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 582              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 583              		.loc 1 136 55 view .LVU145
 584 0218 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 585              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 586              		.loc 1 137 24 view .LVU146
 587 021c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 588              	.LVL38:
 589              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 590              		.loc 1 141 25 view .LVU147
 591 0220 FF0054E3 		cmp	r4, #255	@ bb,
 592              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 593              		.loc 1 136 24 view .LVU148
 594 0224 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 595              	.LVL39:
 596              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 597              		.loc 1 141 25 view .LVU149
 598 0228 FF40A0A3 		movge	r4, #255	@ bb,
 599              	.LVL40:
 600              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 601              		.loc 1 135 55 view .LVU150
 602 022c 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 603              	.LVL41:
 604              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 605              		.loc 1 140 25 view .LVU151
 606 0230 FF0058E3 		cmp	r8, #255	@ gg,
 607 0234 FF80A0A3 		movge	r8, #255	@ gg,
 608              	.LVL42:
 609              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 610              		.loc 1 135 24 view .LVU152
 611 0238 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 612              	.LVL43:
 613              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 614              		.loc 1 144 56 view .LVU153
 615 023c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 616              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 617              		.loc 1 151 39 view .LVU154
 618 0240 480095E5 		ldr	r0, [r5, #72]	@ tmp372, g_armwave_state.target_width
 619              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 620              		.loc 1 144 44 view .LVU155
 621 0244 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 622              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 623              		.loc 1 139 25 view .LVU156
 624 0248 FF0056E3 		cmp	r6, #255	@ rr,
 625              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 626              		.loc 1 144 56 view .LVU157
 627 024c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 628              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 629              		.loc 1 148 24 view .LVU158
 630 0250 7370EFE6 		uxtb	r7, r3	@ xx, n
 631              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 632              		.loc 1 144 44 view .LVU159
 633 0254 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 634              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 635              		.loc 1 144 51 view .LVU160
 636 0258 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 637              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 139 25 view .LVU161
 639 025c FF60A0A3 		movge	r6, #255	@ rr,
 640              	.LVL44:
 641              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 642              		.loc 1 149 31 view .LVU162
 643 0260 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 644              	.LVL45:
 645              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 646              		.loc 1 151 39 view .LVU163
 647 0264 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 648              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 649              		.loc 1 144 62 view .LVU164
 650 0268 7660EFE6 		uxtb	r6, r6	@ rr, rr
 651              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 652              		.loc 1 151 49 view .LVU165
 653 026c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 654              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 655              		.loc 1 144 62 view .LVU166
 656 0270 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 657              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 658              		.loc 1 144 26 view .LVU167
 659 0274 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 660              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 661              		.loc 1 151 49 view .LVU168
 662 0278 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 663              	.LVL46:
 664              	.L32:
 131:armwave.c     ****                 wave_word >>= 8;
 665              		.loc 1 131 17 is_stmt 1 view .LVU169
 132:armwave.c     **** 
 666              		.loc 1 132 17 view .LVU170
 667              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 668              		.loc 1 134 19 is_stmt 0 view .LVU171
 669 027c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 670              	.LVL47:
 671              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 672              		.loc 1 132 27 view .LVU172
 673 0280 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 674              	.LVL48:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 134 17 is_stmt 1 view .LVU173
 676              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 134 19 is_stmt 0 view .LVU174
 678 0284 1C00000A 		beq	.L33		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 679              		.loc 1 135 21 is_stmt 1 view .LVU175
 680              	.LVL49:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 681              		.loc 1 136 21 view .LVU176
 137:armwave.c     **** 
 682              		.loc 1 137 21 view .LVU177
 139:armwave.c     ****                     g = MIN(gg, 255);
 683              		.loc 1 139 21 view .LVU178
 140:armwave.c     ****                     b = MIN(bb, 255);
 684              		.loc 1 140 21 view .LVU179
 141:armwave.c     **** 
 685              		.loc 1 141 21 view .LVU180
 144:armwave.c     **** 
 686              		.loc 1 144 21 view .LVU181
 147:armwave.c     ****                     xx = nsub & 0xff;
 687              		.loc 1 147 21 view .LVU182
 688              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 689              		.loc 1 137 55 is_stmt 0 view .LVU183
 690 0288 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 691              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 692              		.loc 1 136 55 view .LVU184
 693 028c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 694              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 695              		.loc 1 137 24 view .LVU185
 696 0290 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 697              	.LVL50:
 698              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 699              		.loc 1 141 25 view .LVU186
 700 0294 FF0054E3 		cmp	r4, #255	@ bb,
 701 0298 FF40A0A3 		movge	r4, #255	@ bb,
 702              	.LVL51:
 703              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 704              		.loc 1 135 55 view .LVU187
 705 029c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 706              	.LVL52:
 707              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 708              		.loc 1 136 24 view .LVU188
 709 02a0 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 710              	.LVL53:
 711              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 712              		.loc 1 144 44 view .LVU189
 713 02a4 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 714              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 715              		.loc 1 140 25 view .LVU190
 716 02a8 FF0057E3 		cmp	r7, #255	@ gg,
 717 02ac 016083E2 		add	r6, r3, #1	@ _158, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 718              		.loc 1 148 21 is_stmt 1 view .LVU191
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 719              		.loc 1 149 21 view .LVU192
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 720              		.loc 1 150 21 view .LVU193
 151:armwave.c     ****                 }
 721              		.loc 1 151 21 view .LVU194
 722              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 723              		.loc 1 144 44 is_stmt 0 view .LVU195
 724 02b0 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 725              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 726              		.loc 1 140 25 view .LVU196
 727 02b4 FF70A0A3 		movge	r7, #255	@ gg,
 728              	.LVL54:
 729              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 730              		.loc 1 144 44 view .LVU197
 731 02b8 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 732              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 733              		.loc 1 151 39 view .LVU198
 734 02bc 484095E5 		ldr	r4, [r5, #72]	@ tmp375, g_armwave_state.target_width
 735              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 736              		.loc 1 135 24 view .LVU199
 737 02c0 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 738              	.LVL55:
 739              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 740              		.loc 1 148 24 view .LVU200
 741 02c4 7600EFE6 		uxtb	r0, r6	@ xx, _158
 742              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 743              		.loc 1 139 25 view .LVU201
 744 02c8 FF005EE3 		cmp	lr, #255	@ rr,
 745              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 746              		.loc 1 144 56 view .LVU202
 747 02cc 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 748              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 749              		.loc 1 149 31 view .LVU203
 750 02d0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 751              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 752              		.loc 1 151 39 view .LVU204
 753 02d4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 754              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 755              		.loc 1 139 25 view .LVU205
 756 02d8 FFE0A0A3 		movge	lr, #255	@ rr,
 757              	.LVL56:
 758              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 759              		.loc 1 144 51 view .LVU206
 760 02dc 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 761              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 762              		.loc 1 144 56 view .LVU207
 763 02e0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 764              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 765              		.loc 1 144 51 view .LVU208
 766 02e4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 767              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 768              		.loc 1 144 62 view .LVU209
 769 02e8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 770              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 771              		.loc 1 151 49 view .LVU210
 772 02ec 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 773              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 774              		.loc 1 144 62 view .LVU211
 775 02f0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 776              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 777              		.loc 1 144 26 view .LVU212
 778 02f4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 779              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 780              		.loc 1 151 49 view .LVU213
 781 02f8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 782              	.LVL57:
 783              	.L33:
 131:armwave.c     ****                 wave_word >>= 8;
 784              		.loc 1 131 17 is_stmt 1 view .LVU214
 132:armwave.c     **** 
 785              		.loc 1 132 17 view .LVU215
 786              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 787              		.loc 1 134 19 is_stmt 0 view .LVU216
 788 02fc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 789              	@ armwave.c:132:                 wave_word >>= 8;
 132:armwave.c     **** 
 790              		.loc 1 132 27 view .LVU217
 791 0300 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 792              	.LVL58:
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 793              		.loc 1 134 17 is_stmt 1 view .LVU218
 794              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 795              		.loc 1 134 19 is_stmt 0 view .LVU219
 796 0304 1A00000A 		beq	.L34		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 797              		.loc 1 135 21 is_stmt 1 view .LVU220
 798              	.LVL59:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 799              		.loc 1 136 21 view .LVU221
 137:armwave.c     **** 
 800              		.loc 1 137 21 view .LVU222
 139:armwave.c     ****                     g = MIN(gg, 255);
 801              		.loc 1 139 21 view .LVU223
 140:armwave.c     ****                     b = MIN(bb, 255);
 802              		.loc 1 140 21 view .LVU224
 141:armwave.c     **** 
 803              		.loc 1 141 21 view .LVU225
 144:armwave.c     **** 
 804              		.loc 1 144 21 view .LVU226
 147:armwave.c     ****                     xx = nsub & 0xff;
 805              		.loc 1 147 21 view .LVU227
 806              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 807              		.loc 1 137 55 is_stmt 0 view .LVU228
 808 0308 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 809              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 810              		.loc 1 136 55 view .LVU229
 811 030c 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 812              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 813              		.loc 1 137 24 view .LVU230
 814 0310 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 815              	.LVL60:
 816              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 817              		.loc 1 135 55 view .LVU231
 818 0314 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 819              	.LVL61:
 820              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 821              		.loc 1 141 25 view .LVU232
 822 0318 FF0054E3 		cmp	r4, #255	@ bb,
 823              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 824              		.loc 1 136 24 view .LVU233
 825 031c 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 826              	.LVL62:
 827              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 828              		.loc 1 141 25 view .LVU234
 829 0320 FF40A0A3 		movge	r4, #255	@ bb,
 830              	.LVL63:
 831              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 832              		.loc 1 140 25 view .LVU235
 833 0324 FF0056E3 		cmp	r6, #255	@ gg,
 834 0328 FF60A0A3 		movge	r6, #255	@ gg,
 835              	.LVL64:
 140:armwave.c     ****                     b = MIN(bb, 255);
 836              		.loc 1 140 25 view .LVU236
 837 032c 027083E2 		add	r7, r3, #2	@ _66, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 838              		.loc 1 148 21 is_stmt 1 view .LVU237
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 839              		.loc 1 149 21 view .LVU238
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 840              		.loc 1 150 21 view .LVU239
 151:armwave.c     ****                 }
 841              		.loc 1 151 21 view .LVU240
 842              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 843              		.loc 1 135 24 is_stmt 0 view .LVU241
 844 0330 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 845              	.LVL65:
 846              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 847              		.loc 1 151 39 view .LVU242
 848 0334 480095E5 		ldr	r0, [r5, #72]	@ tmp376, g_armwave_state.target_width
 849              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 850              		.loc 1 139 25 view .LVU243
 851 0338 FF005EE3 		cmp	lr, #255	@ rr,
 852              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 853              		.loc 1 148 24 view .LVU244
 854 033c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 855              	.LVL66:
 856              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 857              		.loc 1 144 56 view .LVU245
 858 0340 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 859              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 860              		.loc 1 144 44 view .LVU246
 861 0344 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 862              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 863              		.loc 1 139 25 view .LVU247
 864 0348 FFE0A0A3 		movge	lr, #255	@ rr,
 865              	.LVL67:
 866              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 867              		.loc 1 149 31 view .LVU248
 868 034c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 869              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 870              		.loc 1 151 39 view .LVU249
 871 0350 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 872              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 873              		.loc 1 144 44 view .LVU250
 874 0354 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 875              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 876              		.loc 1 144 56 view .LVU251
 877 0358 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 878              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 879              		.loc 1 144 51 view .LVU252
 880 035c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 881              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 882              		.loc 1 144 62 view .LVU253
 883 0360 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 884              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 885              		.loc 1 151 49 view .LVU254
 886 0364 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 887              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 888              		.loc 1 144 62 view .LVU255
 889 0368 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 890              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 891              		.loc 1 144 26 view .LVU256
 892 036c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 893              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 894              		.loc 1 151 49 view .LVU257
 895 0370 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 896              	.L34:
 897              	.LVL68:
 131:armwave.c     ****                 wave_word >>= 8;
 898              		.loc 1 131 17 is_stmt 1 view .LVU258
 132:armwave.c     **** 
 899              		.loc 1 132 17 view .LVU259
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 900              		.loc 1 134 17 view .LVU260
 901              	@ armwave.c:134:                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 902              		.loc 1 134 19 is_stmt 0 view .LVU261
 903 0374 000052E3 		cmp	r2, #0	@ wave_word,
 904 0378 9DFFFF0A 		beq	.L31		@,
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 905              		.loc 1 135 21 is_stmt 1 view .LVU262
 906              	.LVL69:
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 907              		.loc 1 136 21 view .LVU263
 137:armwave.c     **** 
 908              		.loc 1 137 21 view .LVU264
 139:armwave.c     ****                     g = MIN(gg, 255);
 909              		.loc 1 139 21 view .LVU265
 140:armwave.c     ****                     b = MIN(bb, 255);
 910              		.loc 1 140 21 view .LVU266
 141:armwave.c     **** 
 911              		.loc 1 141 21 view .LVU267
 144:armwave.c     **** 
 912              		.loc 1 144 21 view .LVU268
 147:armwave.c     ****                     xx = nsub & 0xff;
 913              		.loc 1 147 21 view .LVU269
 914              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 915              		.loc 1 137 55 is_stmt 0 view .LVU270
 916 037c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 917              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 918              		.loc 1 136 55 view .LVU271
 919 0380 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 920              	@ armwave.c:137:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 137:armwave.c     **** 
 921              		.loc 1 137 24 view .LVU272
 922 0384 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 923              	.LVL70:
 924              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 925              		.loc 1 135 55 view .LVU273
 926 0388 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 927              	.LVL71:
 928              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 929              		.loc 1 141 25 view .LVU274
 930 038c FF005EE3 		cmp	lr, #255	@ bb,
 931              	@ armwave.c:136:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 932              		.loc 1 136 24 view .LVU275
 933 0390 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 934              	.LVL72:
 935              	@ armwave.c:141:                     b = MIN(bb, 255);
 141:armwave.c     **** 
 936              		.loc 1 141 25 view .LVU276
 937 0394 FFE0A0A3 		movge	lr, #255	@ bb,
 938              	.LVL73:
 939              	@ armwave.c:140:                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 940              		.loc 1 140 25 view .LVU277
 941 0398 FF0054E3 		cmp	r4, #255	@ gg,
 942 039c FF40A0A3 		movge	r4, #255	@ gg,
 943              	.LVL74:
 140:armwave.c     ****                     b = MIN(bb, 255);
 944              		.loc 1 140 25 view .LVU278
 945 03a0 036083E2 		add	r6, r3, #3	@ _59, n,
 148:armwave.c     ****                     yy = nsub >> 8;
 946              		.loc 1 148 21 is_stmt 1 view .LVU279
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 947              		.loc 1 149 21 view .LVU280
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 948              		.loc 1 150 21 view .LVU281
 151:armwave.c     ****                 }
 949              		.loc 1 151 21 view .LVU282
 950              	@ armwave.c:135:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 951              		.loc 1 135 24 is_stmt 0 view .LVU283
 952 03a4 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 953              	.LVL75:
 954              	@ armwave.c:150:                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 955              		.loc 1 150 39 view .LVU284
 956 03a8 487095E5 		ldr	r7, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 957              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 958              		.loc 1 139 25 view .LVU285
 959 03ac FF0052E3 		cmp	r2, #255	@ rr,
 960              	@ armwave.c:148:                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 961              		.loc 1 148 24 view .LVU286
 962 03b0 7680EFE6 		uxtb	r8, r6	@ xx, _59
 963              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 964              		.loc 1 144 56 view .LVU287
 965 03b4 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 966              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 967              		.loc 1 144 44 view .LVU288
 968 03b8 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 969              	@ armwave.c:139:                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 970              		.loc 1 139 25 view .LVU289
 971 03bc FF20A0A3 		movge	r2, #255	@ rr,
 972              	.LVL76:
 973              	@ armwave.c:149:                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 974              		.loc 1 149 31 view .LVU290
 975 03c0 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 976              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 977              		.loc 1 144 44 view .LVU291
 978 03c4 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 979              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 980              		.loc 1 144 56 view .LVU292
 981 03c8 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 982              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 983              		.loc 1 151 39 view .LVU293
 984 03cc 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 985              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 986              		.loc 1 144 51 view .LVU294
 987 03d0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 988              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 989              		.loc 1 144 62 view .LVU295
 990 03d4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 991              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 992              		.loc 1 151 49 view .LVU296
 993 03d8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 994              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 995              		.loc 1 144 62 view .LVU297
 996 03dc 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 997              	@ armwave.c:144:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 998              		.loc 1 144 26 view .LVU298
 999 03e0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 1000              	@ armwave.c:151:                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 1001              		.loc 1 151 49 view .LVU299
 1002 03e4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 1003 03e8 81FFFFEA 		b	.L31		@
 1004              	.LVL77:
 1005              	.L52:
 117:armwave.c     **** 
 1006              		.loc 1 117 5 is_stmt 1 discriminator 1 view .LVU300
 1007 03ec 10309FE5 		ldr	r3, .L54+4	@,
 1008 03f0 7520A0E3 		mov	r2, #117	@,
 1009 03f4 0C109FE5 		ldr	r1, .L54+8	@,
 1010              	.LVL78:
 117:armwave.c     **** 
 1011              		.loc 1 117 5 is_stmt 0 discriminator 1 view .LVU301
 1012 03f8 0C009FE5 		ldr	r0, .L54+12	@,
 1013              	.LVL79:
 117:armwave.c     **** 
 1014              		.loc 1 117 5 discriminator 1 view .LVU302
 1015 03fc FEFFFFEB 		bl	__assert_fail		@
 1016              	.LVL80:
 1017              	.L55:
 117:armwave.c     **** 
 1018              		.loc 1 117 5 discriminator 1 view .LVU303
 1019              		.align	2
 1020              	.L54:
 1021 0400 00000000 		.word	g_armwave_state
 1022 0404 00000000 		.word	.LANCHOR0
 1023 0408 48000000 		.word	.LC4
 1024 040c 54000000 		.word	.LC5
 1025              		.cfi_endproc
 1026              	.LFE60:
 1028              		.align	2
 1029              		.global	armwave_fill_pixbuf_scaled
 1030              		.syntax unified
 1031              		.arm
 1032              		.fpu vfp
 1034              	armwave_fill_pixbuf_scaled:
 1035              	.LVL81:
 1036              	.LFB61:
 157:armwave.c     **** 
 158:armwave.c     **** /*
 159:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 160:armwave.c     ****  * Rows are repeated as necessary.
 161:armwave.c     ****  */
 162:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 163:armwave.c     **** {
 1037              		.loc 1 163 1 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 8
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 164:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1041              		.loc 1 164 5 view .LVU305
 165:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 1042              		.loc 1 165 5 view .LVU306
 166:armwave.c     ****     uint8_t r, g, b, value, row;
 1043              		.loc 1 166 5 view .LVU307
 167:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1044              		.loc 1 167 5 view .LVU308
 1045              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1046              		.loc 1 163 1 is_stmt 0 view .LVU309
 1047 0410 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1048              		.cfi_def_cfa_offset 36
 1049              		.cfi_offset 4, -36
 1050              		.cfi_offset 5, -32
 1051              		.cfi_offset 6, -28
 1052              		.cfi_offset 7, -24
 1053              		.cfi_offset 8, -20
 1054              		.cfi_offset 9, -16
 1055              		.cfi_offset 10, -12
 1056              		.cfi_offset 11, -8
 1057              		.cfi_offset 14, -4
 1058              	@ armwave.c:171:     assert(out_buffer != NULL);
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 169:armwave.c     ****     uint32_t offset;
 170:armwave.c     **** 
 171:armwave.c     ****     assert(out_buffer != NULL);
 1059              		.loc 1 171 5 view .LVU310
 1060 0414 000050E3 		cmp	r0, #0	@ out_buffer
 1061              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1062              		.loc 1 167 15 view .LVU311
 1063 0418 34519FE5 		ldr	r5, .L81	@ tmp202,
 1064              	@ armwave.c:163: {
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1065              		.loc 1 163 1 view .LVU312
 1066 041c 0CD04DE2 		sub	sp, sp, #12	@,,
 1067              		.cfi_def_cfa_offset 48
 1068              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1069              		.loc 1 167 15 view .LVU313
 1070 0420 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1071              	.LVL82:
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1072              		.loc 1 168 5 is_stmt 1 view .LVU314
 169:armwave.c     **** 
 1073              		.loc 1 169 5 view .LVU315
 1074              		.loc 1 171 5 view .LVU316
 1075 0424 4500000A 		beq	.L78		@,
 172:armwave.c     **** 
 173:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1076              		.loc 1 173 5 view .LVU317
 1077              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 1078              		.loc 1 173 41 is_stmt 0 view .LVU318
 1079 0428 488095E5 		ldr	r8, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1080 042c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1081              	.LVL83:
 174:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1082              		.loc 1 174 5 is_stmt 1 view .LVU319
 175:armwave.c     **** 
 176:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1083              		.loc 1 176 5 view .LVU320
 1084              		.loc 1 176 5 is_stmt 0 view .LVU321
 1085 0430 000058E3 		cmp	r8, #0	@ npix,
 1086 0434 0B0000DA 		ble	.L56		@,
 1087              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 177:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 178:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 179:armwave.c     ****         // most normal waveforms.
 180:armwave.c     ****         wave_word = *base_32ptr++;
 181:armwave.c     **** 
 182:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 183:armwave.c     ****             for(w = 0; w < 4; w++) {
 184:armwave.c     ****                 value = wave_word & 0xff;
 185:armwave.c     ****                 wave_word >>= 8;
 186:armwave.c     **** 
 187:armwave.c     ****                 if(value != 0) {
 188:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 189:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1088              		.loc 1 189 52 view .LVU322
 1089 0438 FE35D5E1 		ldrsh	r3, [r5, #94]	@ _11, g_armwave_state.ch1_color.g
 1090              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1091              		.loc 1 188 52 view .LVU323
 1092 043c FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _7, g_armwave_state.ch1_color.r
 1093              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1094              		.loc 1 176 11 view .LVU324
 1095 0440 00E0A0E3 		mov	lr, #0	@ n,
 1096              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1097              		.loc 1 189 52 view .LVU325
 1098 0444 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1099              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1100              		.loc 1 190 52 view .LVU326
 1101 0448 F036D5E1 		ldrsh	r3, [r5, #96]	@ _14, g_armwave_state.ch1_color.b
 1102 044c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1103              	.LVL84:
 1104              	.L63:
 180:armwave.c     **** 
 1105              		.loc 1 180 9 is_stmt 1 view .LVU327
 1106              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 1107              		.loc 1 180 19 is_stmt 0 view .LVU328
 1108 0450 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1109              	.LVL85:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 1110              		.loc 1 182 9 is_stmt 1 view .LVU329
 1111              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 1112              		.loc 1 182 11 is_stmt 0 view .LVU330
 1113 0454 00005CE3 		cmp	ip, #0	@ wave_word,
 1114 0458 0400001A 		bne	.L79		@,
 1115              	.L59:
 1116              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1117              		.loc 1 176 28 view .LVU331
 1118 045c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1119              	.LVL86:
 1120              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1121              		.loc 1 176 5 view .LVU332
 1122 0460 0E0058E1 		cmp	r8, lr	@ npix, n
 1123 0464 F9FFFFCA 		bgt	.L63		@,
 1124              	.LVL87:
 1125              	.L56:
 1126              	@ armwave.c:212: }
 191:armwave.c     **** 
 192:armwave.c     ****                     r = MIN(rr, 255);
 193:armwave.c     ****                     g = MIN(gg, 255);
 194:armwave.c     ****                     b = MIN(bb, 255);
 195:armwave.c     **** 
 196:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 197:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 198:armwave.c     **** 
 199:armwave.c     ****                     // Do line scaling as necessary.
 200:armwave.c     ****                     nsub = n + w;
 201:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 202:armwave.c     ****                     xx = (nsub >> 8);
 203:armwave.c     **** 
 204:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 205:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 206:armwave.c     ****                         *(out_buffer_base + offset) = word;
 207:armwave.c     ****                     }
 208:armwave.c     ****                 }
 209:armwave.c     ****             }
 210:armwave.c     ****         }
 211:armwave.c     ****     }
 212:armwave.c     **** }
 1127              		.loc 1 212 1 view .LVU333
 1128 0468 0CD08DE2 		add	sp, sp, #12	@,,
 1129              		.cfi_remember_state
 1130              		.cfi_def_cfa_offset 36
 1131              		@ sp needed	@
 1132 046c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1133              	.LVL88:
 1134              	.L79:
 1135              		.cfi_restore_state
 1136              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1137              		.loc 1 187 19 view .LVU334
 1138 0470 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1139              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1140              		.loc 1 183 19 view .LVU335
 1141 0474 0090A0E3 		mov	r9, #0	@ w,
 1142              	.LVL89:
 184:armwave.c     ****                 wave_word >>= 8;
 1143              		.loc 1 184 17 is_stmt 1 view .LVU336
 185:armwave.c     **** 
 1144              		.loc 1 185 17 view .LVU337
 1145              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 1146              		.loc 1 185 27 is_stmt 0 view .LVU338
 1147 0478 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1148              	.LVL90:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1149              		.loc 1 187 17 is_stmt 1 view .LVU339
 1150              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1151              		.loc 1 187 19 is_stmt 0 view .LVU340
 1152 047c 0500001A 		bne	.L80		@,
 1153              	.L60:
 1154              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1155              		.loc 1 183 32 view .LVU341
 1156 0480 019089E2 		add	r9, r9, #1	@ w, w,
 1157              	.LVL91:
 1158              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 1159              		.loc 1 183 13 view .LVU342
 1160 0484 040059E3 		cmp	r9, #4	@ w,
 1161 0488 F3FFFF0A 		beq	.L59		@,
 184:armwave.c     ****                 wave_word >>= 8;
 1162              		.loc 1 184 17 is_stmt 1 view .LVU343
 1163              	.LVL92:
 185:armwave.c     **** 
 1164              		.loc 1 185 17 view .LVU344
 1165              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1166              		.loc 1 187 19 is_stmt 0 view .LVU345
 1167 048c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1168              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 1169              		.loc 1 185 27 view .LVU346
 1170 0490 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1171              	.LVL93:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1172              		.loc 1 187 17 is_stmt 1 view .LVU347
 1173              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1174              		.loc 1 187 19 is_stmt 0 view .LVU348
 1175 0494 F9FFFF0A 		beq	.L60		@,
 1176              	.L80:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1177              		.loc 1 188 21 is_stmt 1 view .LVU349
 1178              	.LVL94:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1179              		.loc 1 189 21 view .LVU350
 190:armwave.c     **** 
 1180              		.loc 1 190 21 view .LVU351
 192:armwave.c     ****                     g = MIN(gg, 255);
 1181              		.loc 1 192 21 view .LVU352
 193:armwave.c     ****                     b = MIN(bb, 255);
 1182              		.loc 1 193 21 view .LVU353
 194:armwave.c     **** 
 1183              		.loc 1 194 21 view .LVU354
 197:armwave.c     **** 
 1184              		.loc 1 197 21 view .LVU355
 1185              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1186              		.loc 1 190 55 is_stmt 0 view .LVU356
 1187 0498 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1188              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1189              		.loc 1 189 55 view .LVU357
 1190 049c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1191 04a0 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1192              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1193              		.loc 1 190 55 view .LVU358
 1194 04a4 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1195              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1196              		.loc 1 189 55 view .LVU359
 1197 04a8 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1198              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 1199              		.loc 1 190 24 view .LVU360
 1200 04ac 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1201              	.LVL95:
 1202              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1203              		.loc 1 188 55 view .LVU361
 1204 04b0 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1205              	.LVL96:
 1206              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1207              		.loc 1 189 24 view .LVU362
 1208 04b4 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1209              	.LVL97:
 1210              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 1211              		.loc 1 194 25 view .LVU363
 1212 04b8 FF0052E3 		cmp	r2, #255	@ bb,
 1213 04bc FF20A0A3 		movge	r2, #255	@ bb,
 1214              	.LVL98:
 1215              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 1216              		.loc 1 193 25 view .LVU364
 1217 04c0 FF0051E3 		cmp	r1, #255	@ gg,
 1218 04c4 FF10A0A3 		movge	r1, #255	@ gg,
 1219              	.LVL99:
 1220              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1221              		.loc 1 188 24 view .LVU365
 1222 04c8 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1223              	.LVL100:
 1224              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 1225              		.loc 1 192 25 view .LVU366
 1226 04cc FF0053E3 		cmp	r3, #255	@ rr,
 1227              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1228              		.loc 1 197 56 view .LVU367
 1229 04d0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1230              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 1231              		.loc 1 192 25 view .LVU368
 1232 04d4 FF30A0A3 		movge	r3, #255	@ rr,
 1233              	.LVL101:
 1234              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1235              		.loc 1 197 44 view .LVU369
 1236 04d8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1237              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1238              		.loc 1 197 56 view .LVU370
 1239 04dc 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1240              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1241              		.loc 1 201 57 view .LVU371
 1242 04e0 20A095E5 		ldr	r10, [r5, #32]	@ _28, g_armwave_state.vscale
 1243              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1244              		.loc 1 197 44 view .LVU372
 1245 04e4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1246              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1247              		.loc 1 197 51 view .LVU373
 1248 04e8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1249              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1250              		.loc 1 197 62 view .LVU374
 1251 04ec 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1252              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1253              		.loc 1 201 32 view .LVU375
 1254 04f0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1255              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1256              		.loc 1 197 62 view .LVU376
 1257 04f4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1258              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1259              		.loc 1 204 21 view .LVU377
 1260 04f8 00005AE3 		cmp	r10, #0	@ _28,
 1261              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 1262              		.loc 1 197 26 view .LVU378
 1263 04fc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1264              	.LVL102:
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1265              		.loc 1 200 21 is_stmt 1 view .LVU379
 201:armwave.c     ****                     xx = (nsub >> 8);
 1266              		.loc 1 201 21 view .LVU380
 1267              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 1268              		.loc 1 202 32 is_stmt 0 view .LVU381
 1269 0500 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1270              	.LVL103:
 1271              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 1272              		.loc 1 201 24 view .LVU382
 1273 0504 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1274              	.LVL104:
 202:armwave.c     **** 
 1275              		.loc 1 202 21 is_stmt 1 view .LVU383
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 204 21 view .LVU384
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1277              		.loc 1 204 21 is_stmt 0 view .LVU385
 1278 0508 DCFFFF0A 		beq	.L60		@,
 1279              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1280              		.loc 1 204 29 view .LVU386
 1281 050c 0030A0E3 		mov	r3, #0	@ row,
 1282              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1283              		.loc 1 204 38 view .LVU387
 1284 0510 0320A0E1 		mov	r2, r3	@ _35, row
 1285              	.LVL105:
 1286              	.L61:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1287              		.loc 1 205 25 is_stmt 1 discriminator 3 view .LVU388
 206:armwave.c     ****                     }
 1288              		.loc 1 206 25 discriminator 3 view .LVU389
 1289              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1290              		.loc 1 205 52 is_stmt 0 discriminator 3 view .LVU390
 1291 0514 481095E5 		ldr	r1, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1292              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1293              		.loc 1 205 45 discriminator 3 view .LVU391
 1294 0518 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1295              	.LVL106:
 1296              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1297              		.loc 1 204 67 discriminator 3 view .LVU392
 1298 051c 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1299              	.LVL107:
 1300              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 1301              		.loc 1 206 43 discriminator 3 view .LVU393
 1302 0520 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1303              	.LVL108:
 1304              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1305              		.loc 1 204 67 discriminator 3 view .LVU394
 1306 0524 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1307              	.LVL109:
 1308              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1309              		.loc 1 204 38 discriminator 3 view .LVU395
 1310 0528 0320A0E1 		mov	r2, r3	@ _35, row
 1311              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 1312              		.loc 1 206 53 discriminator 3 view .LVU396
 1313 052c 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1314              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1315              		.loc 1 204 21 discriminator 3 view .LVU397
 1316 0530 201095E5 		ldr	r1, [r5, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1317              	.LVL110:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1318              		.loc 1 204 21 discriminator 3 view .LVU398
 1319 0534 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1320 0538 F5FFFF3A 		bcc	.L61		@,
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1321              		.loc 1 204 21 discriminator 3 view .LVU399
 1322 053c CFFFFFEA 		b	.L60		@
 1323              	.LVL111:
 1324              	.L78:
 171:armwave.c     **** 
 1325              		.loc 1 171 5 is_stmt 1 discriminator 1 view .LVU400
 1326 0540 10309FE5 		ldr	r3, .L81+4	@,
 1327 0544 AB20A0E3 		mov	r2, #171	@,
 1328 0548 0C109FE5 		ldr	r1, .L81+8	@,
 1329 054c 0C009FE5 		ldr	r0, .L81+12	@,
 1330              	.LVL112:
 171:armwave.c     **** 
 1331              		.loc 1 171 5 is_stmt 0 discriminator 1 view .LVU401
 1332 0550 FEFFFFEB 		bl	__assert_fail		@
 1333              	.LVL113:
 1334              	.L82:
 1335              		.align	2
 1336              	.L81:
 1337 0554 00000000 		.word	g_armwave_state
 1338 0558 18000000 		.word	.LANCHOR0+24
 1339 055c 48000000 		.word	.LC4
 1340 0560 54000000 		.word	.LC5
 1341              		.cfi_endproc
 1342              	.LFE61:
 1344              		.align	2
 1345              		.global	armwave_setup_render
 1346              		.syntax unified
 1347              		.arm
 1348              		.fpu vfp
 1350              	armwave_setup_render:
 1351              	.LVL114:
 1352              	.LFB62:
 213:armwave.c     **** 
 214:armwave.c     **** /*
 215:armwave.c     ****  * Setup the renderer with passed parameters.
 216:armwave.c     ****  */
 217:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 218:armwave.c     **** {
 1353              		.loc 1 218 1 is_stmt 1 view -0
 1354              		.cfi_startproc
 1355              		@ args = 12, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 219:armwave.c     ****     uint32_t length, xx;
 1357              		.loc 1 219 5 view .LVU403
 220:armwave.c     ****     float points_per_pixel;
 1358              		.loc 1 220 5 view .LVU404
 221:armwave.c     **** 
 222:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1359              		.loc 1 222 5 view .LVU405
 1360              	@ armwave.c:218: {
 218:armwave.c     ****     uint32_t length, xx;
 1361              		.loc 1 218 1 is_stmt 0 view .LVU406
 1362 0564 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1363              		.cfi_def_cfa_offset 32
 1364              		.cfi_offset 4, -32
 1365              		.cfi_offset 5, -28
 1366              		.cfi_offset 6, -24
 1367              		.cfi_offset 7, -20
 1368              		.cfi_offset 8, -16
 1369              		.cfi_offset 9, -12
 1370              		.cfi_offset 10, -8
 1371              		.cfi_offset 14, -4
 1372 0568 028B2DED 		vpush.64	{d8}	@
 1373              		.cfi_def_cfa_offset 40
 1374              		.cfi_offset 80, -40
 1375              		.cfi_offset 81, -36
 1376 056c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1377 0570 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1378 0574 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1379 0578 10D04DE2 		sub	sp, sp, #16	@,,
 1380              		.cfi_def_cfa_offset 56
 1381              	@ armwave.c:218: {
 218:armwave.c     ****     uint32_t length, xx;
 1382              		.loc 1 218 1 view .LVU407
 1383 057c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1384 0580 38709DE5 		ldr	r7, [sp, #56]	@ target_width, target_width
 1385 0584 3C609DE5 		ldr	r6, [sp, #60]	@ target_height, target_height
 1386 0588 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1387              	@ armwave.c:222:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1388              		.loc 1 222 5 view .LVU408
 1389 058c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1390 0590 04708DE5 		str	r7, [sp, #4]	@ target_width,
 1391 0594 0230A0E1 		mov	r3, r2	@, waves_max
 1392              	.LVL115:
 1393              		.loc 1 222 5 view .LVU409
 1394 0598 08608DE5 		str	r6, [sp, #8]	@ target_height,
 1395 059c 0120A0E1 		mov	r2, r1	@, end_point
 1396              	.LVL116:
 1397              		.loc 1 222 5 view .LVU410
 1398 05a0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1399 05a4 0010A0E1 		mov	r1, r0	@, start_point
 1400              	.LVL117:
 1401              		.loc 1 222 5 view .LVU411
 1402 05a8 C8019FE5 		ldr	r0, .L106+4	@,
 1403              	.LVL118:
 1404              		.loc 1 222 5 view .LVU412
 1405 05ac FEFFFFEB 		bl	printf		@
 1406              	.LVL119:
 223:armwave.c     **** 
 224:armwave.c     ****     // TODO these asserts should instead raise PyExc
 225:armwave.c     ****     assert(start_point < end_point);
 1407              		.loc 1 225 5 is_stmt 1 view .LVU413
 1408 05b0 090055E1 		cmp	r5, r9	@ start_point, end_point
 1409 05b4 6900002A 		bcs	.L101		@,
 226:armwave.c     **** 
 227:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 228:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1410              		.loc 1 228 5 view .LVU414
 1411 05b8 013C46E2 		sub	r3, r6, #256	@ tmp154, target_height,
 1412 05bc 013CD3E3 		bics	r3, r3, #256	@ tmp233, tmp154,
 1413 05c0 4B00000A 		beq	.L85		@,
 1414              	@ armwave.c:228:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1415              		.loc 1 228 5 is_stmt 0 discriminator 1 view .LVU415
 1416 05c4 013B46E2 		sub	r3, r6, #1024	@ tmp156, target_height,
 1417 05c8 013BD3E3 		bics	r3, r3, #1024	@ tmp234, tmp156,
 1418 05cc 5400001A 		bne	.L102		@,
 229:armwave.c     **** 
 230:armwave.c     ****     if(target_height == 256) {
 231:armwave.c     ****         g_armwave_state.row_shift = 8;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 233:armwave.c     ****     } else if(target_height == 512) {
 1419              		.loc 1 233 12 is_stmt 1 view .LVU416
 234:armwave.c     ****         g_armwave_state.row_shift = 9;
 235:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 236:armwave.c     ****     } else if(target_height == 1024) {
 1420              		.loc 1 236 12 view .LVU417
 1421              	@ armwave.c:236:     } else if(target_height == 1024) {
 1422              		.loc 1 236 14 is_stmt 0 view .LVU418
 1423 05d0 010B56E3 		cmp	r6, #1024	@ target_height,
 1424              	@ armwave.c:237:         g_armwave_state.row_shift = 10;
 237:armwave.c     ****         g_armwave_state.row_shift = 10;
 1425              		.loc 1 237 35 view .LVU419
 1426 05d4 A0419FE5 		ldr	r4, .L106+8	@ tmp230,
 1427              	@ armwave.c:236:     } else if(target_height == 1024) {
 236:armwave.c     ****         g_armwave_state.row_shift = 10;
 1428              		.loc 1 236 14 view .LVU420
 1429 05d8 4D00000A 		beq	.L103		@,
 238:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 239:armwave.c     ****     } else if(target_height == 2048) {
 1430              		.loc 1 239 12 is_stmt 1 view .LVU421
 1431              	@ armwave.c:239:     } else if(target_height == 2048) {
 1432              		.loc 1 239 14 is_stmt 0 view .LVU422
 1433 05dc 020B56E3 		cmp	r6, #2048	@ target_height,
 240:armwave.c     ****         g_armwave_state.row_shift = 11;
 1434              		.loc 1 240 9 is_stmt 1 view .LVU423
 1435              	@ armwave.c:240:         g_armwave_state.row_shift = 11;
 1436              		.loc 1 240 35 is_stmt 0 view .LVU424
 1437 05e0 0B20A003 		moveq	r2, #11	@ tmp175,
 1438              	@ armwave.c:241:         g_armwave_state.row_mask = 0x7ff;
 241:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1439              		.loc 1 241 34 view .LVU425
 1440 05e4 94319F05 		ldreq	r3, .L106+12	@ tmp177,
 1441 05e8 F025C401 		strdeq	r2, [r4, #80]	@, tmp230,
 1442              	.L88:
 242:armwave.c     ****     } 
 243:armwave.c     **** 
 244:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 245:armwave.c     ****     g_armwave_state.xstride = target_height;
 1443              		.loc 1 245 5 is_stmt 1 view .LVU426
 1444              	@ armwave.c:250:     g_armwave_state.size = target_height * target_width;
 246:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 247:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 248:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 249:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 250:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1445              		.loc 1 250 42 is_stmt 0 view .LVU427
 1446 05ec 960700E0 		mul	r0, r6, r7	@ tmp185, target_height, target_width
 1447              	@ armwave.c:252:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 252:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1448              		.loc 1 252 68 view .LVU428
 1449 05f0 0734A0E1 		lsl	r3, r7, #8	@ _9, target_width,
 1450              	@ armwave.c:246:     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1451              		.loc 1 246 44 view .LVU429
 1452 05f4 26C4A0E1 		lsr	ip, r6, #8	@ tmp180, target_height,
 1453              	@ armwave.c:257:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 253:armwave.c     ****     g_armwave_state.target_width = target_width;
 254:armwave.c     ****     g_armwave_state.target_height = target_height;
 255:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 256:armwave.c     **** 
 257:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1454              		.loc 1 257 5 view .LVU430
 1455 05f8 0310A0E1 		mov	r1, r3	@, _9
 1456              	@ armwave.c:251:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 251:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1457              		.loc 1 251 37 view .LVU431
 1458 05fc 012CA0E3 		mov	r2, #256	@ tmp187,
 1459              	@ armwave.c:250:     g_armwave_state.size = target_height * target_width;
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1460              		.loc 1 250 26 view .LVU432
 1461 0600 440084E5 		str	r0, [r4, #68]	@ tmp185, g_armwave_state.size
 1462              	@ armwave.c:255:     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     **** 
 1463              		.loc 1 255 45 view .LVU433
 1464 0604 055049E0 		sub	r5, r9, r5	@ _10, end_point, start_point
 1465              	.LVL120:
 1466              	@ armwave.c:257:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1467              		.loc 1 257 5 view .LVU434
 1468 0608 74019FE5 		ldr	r0, .L106+16	@,
 1469              	@ armwave.c:252:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 1470              		.loc 1 252 34 view .LVU435
 1471 060c 403084E5 		str	r3, [r4, #64]	@ _9, g_armwave_state.ch_buff_size
 1472              	@ armwave.c:255:     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     **** 
 1473              		.loc 1 255 33 view .LVU436
 1474 0610 3C5084E5 		str	r5, [r4, #60]	@ _10, g_armwave_state.wave_length
 1475              	@ armwave.c:245:     g_armwave_state.xstride = target_height;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1476              		.loc 1 245 29 view .LVU437
 1477 0614 1C6084E5 		str	r6, [r4, #28]	@ target_height, g_armwave_state.xstride
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1478              		.loc 1 246 5 is_stmt 1 view .LVU438
 1479              	@ armwave.c:247:     g_armwave_state.wave_stride = wave_stride;
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1480              		.loc 1 247 33 is_stmt 0 view .LVU439
 1481 0618 24A084E5 		str	r10, [r4, #36]	@ wave_stride, g_armwave_state.wave_stride
 1482              	@ armwave.c:248:     g_armwave_state.waves_max = waves_max;
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1483              		.loc 1 248 31 view .LVU440
 1484 061c 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves_max
 1485              	@ armwave.c:249:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1486              		.loc 1 249 27 view .LVU441
 1487 0620 288084E5 		str	r8, [r4, #40]	@ waves_max, g_armwave_state.waves
 1488              	@ armwave.c:253:     g_armwave_state.target_width = target_width;
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 1489              		.loc 1 253 34 view .LVU442
 1490 0624 487084E5 		str	r7, [r4, #72]	@ target_width, g_armwave_state.target_width
 1491              	@ armwave.c:254:     g_armwave_state.target_height = target_height;
 254:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1492              		.loc 1 254 35 view .LVU443
 1493 0628 4C6084E5 		str	r6, [r4, #76]	@ target_height, g_armwave_state.target_height
 1494              	@ armwave.c:246:     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1495              		.loc 1 246 28 view .LVU444
 1496 062c 20C084E5 		str	ip, [r4, #32]	@ tmp180, g_armwave_state.vscale
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1497              		.loc 1 247 5 is_stmt 1 view .LVU445
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1498              		.loc 1 248 5 view .LVU446
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1499              		.loc 1 249 5 view .LVU447
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1500              		.loc 1 250 5 view .LVU448
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1501              		.loc 1 251 5 view .LVU449
 1502              	@ armwave.c:251:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1503              		.loc 1 251 37 is_stmt 0 view .LVU450
 1504 0630 302084E5 		str	r2, [r4, #48]	@ tmp187, g_armwave_state.bitdepth_height
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 1505              		.loc 1 252 5 is_stmt 1 view .LVU451
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 1506              		.loc 1 253 5 view .LVU452
 254:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1507              		.loc 1 254 5 view .LVU453
 255:armwave.c     **** 
 1508              		.loc 1 255 5 view .LVU454
 1509              		.loc 1 257 5 view .LVU455
 1510 0634 FEFFFFEB 		bl	printf		@
 1511              	.LVL121:
 258:armwave.c     **** 
 259:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 260:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 261:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 262:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1512              		.loc 1 262 5 view .LVU456
 1513              	@ armwave.c:264:     if(g_armwave_state.ch1_buffer != NULL)
 263:armwave.c     **** 
 264:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1514              		.loc 1 264 23 is_stmt 0 view .LVU457
 1515 0638 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1516              	@ armwave.c:262:     g_armwave_state.slice_height = 64;  
 262:armwave.c     **** 
 1517              		.loc 1 262 34 view .LVU458
 1518 063c 4030A0E3 		mov	r3, #64	@ tmp194,
 1519              	@ armwave.c:264:     if(g_armwave_state.ch1_buffer != NULL)
 1520              		.loc 1 264 7 view .LVU459
 1521 0640 000050E3 		cmp	r0, #0	@ _11,
 1522              	@ armwave.c:262:     g_armwave_state.slice_height = 64;  
 262:armwave.c     **** 
 1523              		.loc 1 262 34 view .LVU460
 1524 0644 343084E5 		str	r3, [r4, #52]	@ tmp194, g_armwave_state.slice_height
 1525              		.loc 1 264 5 is_stmt 1 view .LVU461
 1526              	@ armwave.c:264:     if(g_armwave_state.ch1_buffer != NULL)
 1527              		.loc 1 264 7 is_stmt 0 view .LVU462
 1528 0648 0000000A 		beq	.L90		@,
 265:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1529              		.loc 1 265 9 is_stmt 1 view .LVU463
 1530 064c FEFFFFEB 		bl	free		@
 1531              	.LVL122:
 1532              	.L90:
 266:armwave.c     **** 
 267:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1533              		.loc 1 267 5 view .LVU464
 1534              	@ armwave.c:267:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1535              		.loc 1 267 34 is_stmt 0 view .LVU465
 1536 0650 0110A0E3 		mov	r1, #1	@,
 1537 0654 400094E5 		ldr	r0, [r4, #64]	@, g_armwave_state.ch_buff_size
 1538 0658 FEFFFFEB 		bl	calloc		@
 1539              	.LVL123:
 1540              	@ armwave.c:269:     assert(g_armwave_state.ch1_buffer != NULL);
 268:armwave.c     **** 
 269:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1541              		.loc 1 269 5 view .LVU466
 1542 065c 000050E3 		cmp	r0, #0	@ tmp198,
 1543              	@ armwave.c:267:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 267:armwave.c     **** 
 1544              		.loc 1 267 32 view .LVU467
 1545 0660 040084E5 		str	r0, [r4, #4]	@ tmp198, g_armwave_state.ch1_buffer
 1546              		.loc 1 269 5 is_stmt 1 view .LVU468
 1547 0664 3300000A 		beq	.L104		@,
 270:armwave.c     **** 
 271:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 272:armwave.c     ****     length = end_point - start_point;
 1548              		.loc 1 272 5 view .LVU469
 1549              	.LVL124:
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1550              		.loc 1 273 5 view .LVU470
 1551              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 1552              		.loc 1 273 34 is_stmt 0 view .LVU471
 1553 0668 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1554              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 1555              		.loc 1 273 22 view .LVU472
 1556 066c 905A06EE 		vmov	s13, r5	@ int	@ _10, _10
 1557              	@ armwave.c:275:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 275:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1558              		.loc 1 275 40 view .LVU473
 1559 0670 8500A0E1 		lsl	r0, r5, #1	@, _10,
 1560              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1561              		.loc 1 273 34 view .LVU474
 1562 0674 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp206, target_width
 1563              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1564              		.loc 1 273 22 view .LVU475
 1565 0678 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp205, _10
 1566              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1567              		.loc 1 274 60 view .LVU476
 1568 067c 0D7AD4ED 		vldr.32	s15, [r4, #52]	@ int	@ tmp236, g_armwave_state.slice_height
 1569 0680 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp209, tmp236
 1570              	@ armwave.c:273:     points_per_pixel = length / ((float)(target_width));
 273:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1571              		.loc 1 273 22 view .LVU477
 1572 0684 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp205, tmp206
 1573              	.LVL125:
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1574              		.loc 1 274 5 is_stmt 1 view .LVU478
 1575              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1576              		.loc 1 274 60 is_stmt 0 view .LVU479
 1577 0688 887A67EE 		vmul.f32	s15, s15, s16	@ tmp211, tmp209, points_per_pixel
 1578              	@ armwave.c:274:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 274:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1579              		.loc 1 274 41 view .LVU480
 1580 068c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 1581 0690 0E7AC4ED 		vstr.32	s15, [r4, #56]	@ int	@ tmp212, g_armwave_state.slice_record_height
 1582              		.loc 1 275 5 is_stmt 1 view .LVU481
 1583              	@ armwave.c:275:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1584              		.loc 1 275 40 is_stmt 0 view .LVU482
 1585 0694 FEFFFFEB 		bl	malloc		@
 1586              	.LVL126:
 1587              	@ armwave.c:277:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 276:armwave.c     **** 
 277:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1588              		.loc 1 277 5 view .LVU483
 1589 0698 000050E3 		cmp	r0, #0	@ tmp214,
 1590              	@ armwave.c:275:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 275:armwave.c     **** 
 1591              		.loc 1 275 38 view .LVU484
 1592 069c 740084E5 		str	r0, [r4, #116]	@ tmp214, g_armwave_state.xcoord_to_xpixel
 1593              		.loc 1 277 5 is_stmt 1 view .LVU485
 1594 06a0 2900000A 		beq	.L105		@,
 1595              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 278:armwave.c     **** 
 279:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 280:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1596              		.loc 1 280 54 is_stmt 0 view .LVU486
 1597 06a4 327ADFED 		vldr.32	s15, .L106	@ tmp221,
 1598 06a8 020040E2 		sub	r0, r0, #2	@ ivtmp.89, tmp214,
 1599              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1600              		.loc 1 279 12 view .LVU487
 1601 06ac 0030A0E3 		mov	r3, #0	@ xx,
 1602              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1603              		.loc 1 280 54 view .LVU488
 1604 06b0 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp221, points_per_pixel
 1605              	.L93:
 1606              	.LVL127:
 1607              		.loc 1 280 9 is_stmt 1 discriminator 3 view .LVU489
 1608              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1609              		.loc 1 280 74 is_stmt 0 discriminator 3 view .LVU490
 1610 06b4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1611              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1612              		.loc 1 279 32 discriminator 3 view .LVU491
 1613 06b8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1614              	.LVL128:
 1615              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1616              		.loc 1 279 5 discriminator 3 view .LVU492
 1617 06bc 030055E1 		cmp	r5, r3	@ _10, xx
 1618              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1619              		.loc 1 280 74 discriminator 3 view .LVU493
 1620 06c0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp222, xx
 1621 06c4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp223, tmp222, _22
 1622              	@ armwave.c:280:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1623              		.loc 1 280 46 discriminator 3 view .LVU494
 1624 06c8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp224, tmp223
 1625 06cc 902A17EE 		vmov	r2, s15	@ int	@ tmp224, tmp224
 1626 06d0 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp224, MEM[base: _80, offset: 0B]
 1627              	@ armwave.c:279:     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1628              		.loc 1 279 5 discriminator 3 view .LVU495
 1629 06d4 F6FFFF1A 		bne	.L93		@,
 281:armwave.c     **** 
 282:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 283:armwave.c     ****     }
 284:armwave.c     **** 
 285:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1630              		.loc 1 285 5 is_stmt 1 view .LVU496
 1631              	@ armwave.c:285:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1632              		.loc 1 285 34 is_stmt 0 view .LVU497
 1633 06d8 440094E5 		ldr	r0, [r4, #68]	@ g_armwave_state.size, g_armwave_state.size
 1634 06dc 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1635 06e0 FEFFFFEB 		bl	malloc		@
 1636              	.LVL129:
 1637              	@ armwave.c:285:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1638              		.loc 1 285 32 view .LVU498
 1639 06e4 580084E5 		str	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 1640              	@ armwave.c:286: }
 286:armwave.c     **** }
 1641              		.loc 1 286 1 view .LVU499
 1642 06e8 10D08DE2 		add	sp, sp, #16	@,,
 1643              		.cfi_remember_state
 1644              		.cfi_def_cfa_offset 40
 1645              		@ sp needed	@
 1646 06ec 028BBDEC 		vldm	sp!, {d8}	@
 1647              		.cfi_restore 80
 1648              		.cfi_restore 81
 1649              		.cfi_def_cfa_offset 32
 1650              	.LVL130:
 1651              		.loc 1 286 1 view .LVU500
 1652 06f0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1653              	.LVL131:
 1654              	.L85:
 1655              		.cfi_restore_state
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 1656              		.loc 1 230 5 is_stmt 1 view .LVU501
 1657              	@ armwave.c:230:     if(target_height == 256) {
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 1658              		.loc 1 230 7 is_stmt 0 view .LVU502
 1659 06f4 010C56E3 		cmp	r6, #256	@ target_height,
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1660              		.loc 1 231 9 is_stmt 1 view .LVU503
 1661              	@ armwave.c:231:         g_armwave_state.row_shift = 8;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1662              		.loc 1 231 35 is_stmt 0 view .LVU504
 1663 06f8 7C409FE5 		ldr	r4, .L106+8	@ tmp230,
 1664              	@ armwave.c:235:         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1665              		.loc 1 235 34 view .LVU505
 1666 06fc 84309F15 		ldrne	r3, .L106+20	@ tmp169,
 1667              	@ armwave.c:232:         g_armwave_state.row_mask = 0x0ff;
 232:armwave.c     ****     } else if(target_height == 512) {
 1668              		.loc 1 232 34 view .LVU506
 1669 0700 0820A003 		moveq	r2, #8	@ tmp163,
 1670 0704 FF30A003 		moveq	r3, #255	@ tmp165,
 233:armwave.c     ****         g_armwave_state.row_shift = 9;
 1671              		.loc 1 233 12 is_stmt 1 view .LVU507
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1672              		.loc 1 234 9 view .LVU508
 1673              	@ armwave.c:234:         g_armwave_state.row_shift = 9;
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1674              		.loc 1 234 35 is_stmt 0 view .LVU509
 1675 0708 0920A013 		movne	r2, #9	@ tmp167,
 1676              	@ armwave.c:235:         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1677              		.loc 1 235 34 view .LVU510
 1678 070c F025C4E1 		strd	r2, [r4, #80]	@, tmp230,
 1679 0710 B5FFFFEA 		b	.L88		@
 1680              	.L103:
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1681              		.loc 1 237 9 is_stmt 1 view .LVU511
 1682              	@ armwave.c:238:         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1683              		.loc 1 238 34 is_stmt 0 view .LVU512
 1684 0714 70309FE5 		ldr	r3, .L106+24	@ tmp173,
 1685              	@ armwave.c:237:         g_armwave_state.row_shift = 10;
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1686              		.loc 1 237 35 view .LVU513
 1687 0718 0A20A0E3 		mov	r2, #10	@ tmp171,
 1688              	@ armwave.c:238:         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1689              		.loc 1 238 34 view .LVU514
 1690 071c F025C4E1 		strd	r2, [r4, #80]	@, tmp230,
 1691 0720 B1FFFFEA 		b	.L88		@
 1692              	.L102:
 228:armwave.c     **** 
 1693              		.loc 1 228 5 is_stmt 1 discriminator 2 view .LVU515
 1694 0724 64309FE5 		ldr	r3, .L106+28	@,
 1695 0728 E420A0E3 		mov	r2, #228	@,
 1696 072c 60109FE5 		ldr	r1, .L106+32	@,
 1697 0730 60009FE5 		ldr	r0, .L106+36	@,
 1698 0734 FEFFFFEB 		bl	__assert_fail		@
 1699              	.LVL132:
 1700              	.L104:
 269:armwave.c     **** 
 1701              		.loc 1 269 5 discriminator 1 view .LVU516
 1702 0738 50309FE5 		ldr	r3, .L106+28	@,
 1703 073c 58209FE5 		ldr	r2, .L106+40	@,
 1704 0740 4C109FE5 		ldr	r1, .L106+32	@,
 1705 0744 54009FE5 		ldr	r0, .L106+44	@,
 1706 0748 FEFFFFEB 		bl	__assert_fail		@
 1707              	.LVL133:
 1708              	.L105:
 277:armwave.c     **** 
 1709              		.loc 1 277 5 discriminator 1 view .LVU517
 1710 074c 3C309FE5 		ldr	r3, .L106+28	@,
 1711 0750 4C209FE5 		ldr	r2, .L106+48	@,
 1712 0754 38109FE5 		ldr	r1, .L106+32	@,
 1713 0758 48009FE5 		ldr	r0, .L106+52	@,
 1714 075c FEFFFFEB 		bl	__assert_fail		@
 1715              	.LVL134:
 1716              	.L101:
 225:armwave.c     **** 
 1717              		.loc 1 225 5 discriminator 1 view .LVU518
 1718 0760 28309FE5 		ldr	r3, .L106+28	@,
 1719 0764 E120A0E3 		mov	r2, #225	@,
 1720 0768 24109FE5 		ldr	r1, .L106+32	@,
 1721 076c 38009FE5 		ldr	r0, .L106+56	@,
 1722 0770 FEFFFFEB 		bl	__assert_fail		@
 1723              	.LVL135:
 1724              	.L107:
 1725              		.align	2
 1726              	.L106:
 1727 0774 0000803F 		.word	1065353216
 1728 0778 68000000 		.word	.LC6
 1729 077c 00000000 		.word	g_armwave_state
 1730 0780 FF070000 		.word	2047
 1731 0784 0C010000 		.word	.LC9
 1732 0788 FF010000 		.word	511
 1733 078c FF030000 		.word	1023
 1734 0790 34000000 		.word	.LANCHOR0+52
 1735 0794 48000000 		.word	.LC4
 1736 0798 AC000000 		.word	.LC8
 1737 079c 0D010000 		.word	269
 1738 07a0 20010000 		.word	.LC10
 1739 07a4 15010000 		.word	277
 1740 07a8 44010000 		.word	.LC11
 1741 07ac 94000000 		.word	.LC7
 1742              		.cfi_endproc
 1743              	.LFE62:
 1745              		.align	2
 1746              		.global	armwave_set_wave_pointer
 1747              		.syntax unified
 1748              		.arm
 1749              		.fpu vfp
 1751              	armwave_set_wave_pointer:
 1752              	.LVL136:
 1753              	.LFB63:
 287:armwave.c     **** 
 288:armwave.c     **** /*
 289:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 290:armwave.c     ****  * in the future.
 291:armwave.c     ****  */
 292:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 293:armwave.c     **** {
 1754              		.loc 1 293 1 view -0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1758              		.loc 1 294 5 view .LVU520
 1759 07b0 000050E3 		cmp	r0, #0	@ wave_buffer
 1760              		.loc 1 294 5 is_stmt 0 view .LVU521
 1761 07b4 0200000A 		beq	.L113		@,
 295:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1762              		.loc 1 295 5 is_stmt 1 view .LVU522
 1763              	@ armwave.c:295:     g_armwave_state.wave_buffer = wave_buffer;
 1764              		.loc 1 295 33 is_stmt 0 view .LVU523
 1765 07b8 1C309FE5 		ldr	r3, .L114	@ tmp116,
 1766 07bc 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1767 07c0 1EFF2FE1 		bx	lr	@
 1768              	.L113:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1769              		.loc 1 294 5 is_stmt 1 discriminator 1 view .LVU524
 1770              	@ armwave.c:293: {
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1771              		.loc 1 293 1 is_stmt 0 discriminator 1 view .LVU525
 1772 07c4 10402DE9 		push	{r4, lr}	@
 1773              		.cfi_def_cfa_offset 8
 1774              		.cfi_offset 4, -8
 1775              		.cfi_offset 14, -4
 1776              	@ armwave.c:294:     assert(wave_buffer != NULL);
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1777              		.loc 1 294 5 discriminator 1 view .LVU526
 1778 07c8 10309FE5 		ldr	r3, .L114+4	@,
 1779 07cc 10209FE5 		ldr	r2, .L114+8	@,
 1780 07d0 10109FE5 		ldr	r1, .L114+12	@,
 1781 07d4 10009FE5 		ldr	r0, .L114+16	@,
 1782              	.LVL137:
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1783              		.loc 1 294 5 discriminator 1 view .LVU527
 1784 07d8 FEFFFFEB 		bl	__assert_fail		@
 1785              	.LVL138:
 1786              	.L115:
 1787              		.align	2
 1788              	.L114:
 1789 07dc 00000000 		.word	g_armwave_state
 1790 07e0 4C000000 		.word	.LANCHOR0+76
 1791 07e4 26010000 		.word	294
 1792 07e8 48000000 		.word	.LC4
 1793 07ec 70010000 		.word	.LC12
 1794              		.cfi_endproc
 1795              	.LFE63:
 1797              		.align	2
 1798              		.global	armwave_set_wave_pointer_as_testbuf
 1799              		.syntax unified
 1800              		.arm
 1801              		.fpu vfp
 1803              	armwave_set_wave_pointer_as_testbuf:
 1804              	.LFB64:
 296:armwave.c     **** }
 297:armwave.c     **** 
 298:armwave.c     **** /*
 299:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 300:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 301:armwave.c     ****  */
 302:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 303:armwave.c     **** {
 1805              		.loc 1 303 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
 304:armwave.c     ****     g_armwave_state.wave_buffer = test_wave_buffer;
 1810              		.loc 1 304 5 view .LVU529
 1811              	@ armwave.c:304:     g_armwave_state.wave_buffer = test_wave_buffer;
 1812              		.loc 1 304 33 is_stmt 0 view .LVU530
 1813 07f0 0C209FE5 		ldr	r2, .L117	@ tmp112,
 1814 07f4 0C309FE5 		ldr	r3, .L117+4	@ tmp111,
 1815 07f8 002092E5 		ldr	r2, [r2]	@ test_wave_buffer, test_wave_buffer
 1816 07fc 142083E5 		str	r2, [r3, #20]	@ test_wave_buffer, g_armwave_state.wave_buffer
 1817              	@ armwave.c:305: }
 305:armwave.c     **** }
 1818              		.loc 1 305 1 view .LVU531
 1819 0800 1EFF2FE1 		bx	lr	@
 1820              	.L118:
 1821              		.align	2
 1822              	.L117:
 1823 0804 00000000 		.word	test_wave_buffer
 1824 0808 00000000 		.word	g_armwave_state
 1825              		.cfi_endproc
 1826              	.LFE64:
 1828              		.align	2
 1829              		.global	armwave_set_wave_pointer_u32
 1830              		.syntax unified
 1831              		.arm
 1832              		.fpu vfp
 1834              	armwave_set_wave_pointer_u32:
 1835              	.LVL139:
 1836              	.LFB65:
 306:armwave.c     **** 
 307:armwave.c     **** /*
 308:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 309:armwave.c     ****  * disjointed buffers in the future.
 310:armwave.c     ****  */
 311:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 312:armwave.c     **** {
 1837              		.loc 1 312 1 is_stmt 1 view -0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1841              		.loc 1 313 5 view .LVU533
 1842 080c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1843              		.loc 1 313 5 is_stmt 0 view .LVU534
 1844 0810 0200000A 		beq	.L124		@,
 314:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1845              		.loc 1 314 5 is_stmt 1 view .LVU535
 1846              	@ armwave.c:314:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1847              		.loc 1 314 33 is_stmt 0 view .LVU536
 1848 0814 1C309FE5 		ldr	r3, .L125	@ tmp117,
 1849 0818 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1850 081c 1EFF2FE1 		bx	lr	@
 1851              	.L124:
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1852              		.loc 1 313 5 is_stmt 1 discriminator 1 view .LVU537
 1853              	@ armwave.c:312: {
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1854              		.loc 1 312 1 is_stmt 0 discriminator 1 view .LVU538
 1855 0820 10402DE9 		push	{r4, lr}	@
 1856              		.cfi_def_cfa_offset 8
 1857              		.cfi_offset 4, -8
 1858              		.cfi_offset 14, -4
 1859              	@ armwave.c:313:     assert(wave_buffer_ptr != 0);
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1860              		.loc 1 313 5 discriminator 1 view .LVU539
 1861 0824 10309FE5 		ldr	r3, .L125+4	@,
 1862 0828 10209FE5 		ldr	r2, .L125+8	@,
 1863 082c 10109FE5 		ldr	r1, .L125+12	@,
 1864 0830 10009FE5 		ldr	r0, .L125+16	@,
 1865              	.LVL140:
 313:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1866              		.loc 1 313 5 discriminator 1 view .LVU540
 1867 0834 FEFFFFEB 		bl	__assert_fail		@
 1868              	.LVL141:
 1869              	.L126:
 1870              		.align	2
 1871              	.L125:
 1872 0838 00000000 		.word	g_armwave_state
 1873 083c 68000000 		.word	.LANCHOR0+104
 1874 0840 39010000 		.word	313
 1875 0844 48000000 		.word	.LC4
 1876 0848 84010000 		.word	.LC13
 1877              		.cfi_endproc
 1878              	.LFE65:
 1880              		.align	2
 1881              		.global	armwave_clear_buffer
 1882              		.syntax unified
 1883              		.arm
 1884              		.fpu vfp
 1886              	armwave_clear_buffer:
 1887              	.LVL142:
 1888              	.LFB66:
 315:armwave.c     **** }
 316:armwave.c     **** 
 317:armwave.c     **** /*
 318:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 319:armwave.c     ****  */
 320:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 321:armwave.c     **** {
 1889              		.loc 1 321 1 is_stmt 1 view -0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 322:armwave.c     ****     // Flags ignored, only one buffer cleared
 323:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1894              		.loc 1 323 5 view .LVU542
 1895 084c 0C309FE5 		ldr	r3, .L128	@ tmp113,
 1896 0850 0010A0E3 		mov	r1, #0	@,
 1897 0854 402093E5 		ldr	r2, [r3, #64]	@, g_armwave_state.ch_buff_size
 1898 0858 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1899              	.LVL143:
 1900              		.loc 1 323 5 is_stmt 0 view .LVU543
 1901 085c FEFFFFEA 		b	memset		@
 1902              	.LVL144:
 1903              	.L129:
 1904              		.align	2
 1905              	.L128:
 1906 0860 00000000 		.word	g_armwave_state
 1907              		.cfi_endproc
 1908              	.LFE66:
 1910              		.align	2
 1911              		.global	armwave_set_channel_colour
 1912              		.syntax unified
 1913              		.arm
 1914              		.fpu vfp
 1916              	armwave_set_channel_colour:
 1917              	.LVL145:
 1918              	.LFB67:
 324:armwave.c     **** }
 325:armwave.c     **** 
 326:armwave.c     **** /*
 327:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 328:armwave.c     ****  */
 329:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 330:armwave.c     **** {
 1919              		.loc 1 330 1 is_stmt 1 view -0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 331:armwave.c     ****     // Only 1ch supported for now
 332:armwave.c     ****     switch(ch) {
 1924              		.loc 1 332 5 view .LVU545
 1925 0864 010050E3 		cmp	r0, #1	@ ch,
 333:armwave.c     ****         case 1:
 334:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1926              		.loc 1 334 13 view .LVU546
 1927              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 1928              		.loc 1 334 41 is_stmt 0 view .LVU547
 1929 0868 0C009F05 		ldreq	r0, .L132	@ tmp117,
 1930              	.LVL146:
 1931              		.loc 1 334 41 view .LVU548
 1932 086c BC15C001 		strheq	r1, [r0, #92]	@ movhi	@ r, g_armwave_state.ch1_color.r
 335:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1933              		.loc 1 335 13 is_stmt 1 view .LVU549
 1934              	@ armwave.c:335:             g_armwave_state.ch1_color.g = g;
 1935              		.loc 1 335 41 is_stmt 0 view .LVU550
 1936 0870 BE25C001 		strheq	r2, [r0, #94]	@ movhi	@ g, g_armwave_state.ch1_color.g
 336:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1937              		.loc 1 336 13 is_stmt 1 view .LVU551
 1938              	@ armwave.c:336:             g_armwave_state.ch1_color.b = b;
 1939              		.loc 1 336 41 is_stmt 0 view .LVU552
 1940 0874 B036C001 		strheq	r3, [r0, #96]	@ movhi	@ b, g_armwave_state.ch1_color.b
 337:armwave.c     ****             break;
 1941              		.loc 1 337 13 is_stmt 1 view .LVU553
 1942              	@ armwave.c:339: }
 338:armwave.c     ****     }
 339:armwave.c     **** }
 1943              		.loc 1 339 1 is_stmt 0 view .LVU554
 1944 0878 1EFF2FE1 		bx	lr	@
 1945              	.L133:
 1946              		.align	2
 1947              	.L132:
 1948 087c 00000000 		.word	g_armwave_state
 1949              		.cfi_endproc
 1950              	.LFE67:
 1952              		.align	2
 1953              		.global	armwave_dump_ppm_debug
 1954              		.syntax unified
 1955              		.arm
 1956              		.fpu vfp
 1958              	armwave_dump_ppm_debug:
 1959              	.LVL147:
 1960              	.LFB68:
 340:armwave.c     **** 
 341:armwave.c     **** /*
 342:armwave.c     ****  * Dump a ppm of a buffer to a file.
 343:armwave.c     ****  */
 344:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 345:armwave.c     **** {
 1961              		.loc 1 345 1 is_stmt 1 view -0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 346:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1965              		.loc 1 346 5 view .LVU556
 1966              	@ armwave.c:345: {
 345:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1967              		.loc 1 345 1 is_stmt 0 view .LVU557
 1968 0880 0130A0E1 		mov	r3, r1	@ fn, fn
 1969 0884 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1970              		.cfi_def_cfa_offset 28
 1971              		.cfi_offset 4, -28
 1972              		.cfi_offset 5, -24
 1973              		.cfi_offset 6, -20
 1974              		.cfi_offset 7, -16
 1975              		.cfi_offset 8, -12
 1976              		.cfi_offset 9, -8
 1977              		.cfi_offset 14, -4
 1978 0888 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1979 088c 0CD04DE2 		sub	sp, sp, #12	@,,
 1980              		.cfi_def_cfa_offset 40
 1981              	@ armwave.c:346:     FILE *fp = fopen(fn, "wb");
 1982              		.loc 1 346 16 view .LVU558
 1983 0890 D4109FE5 		ldr	r1, .L146	@,
 1984              	.LVL148:
 1985              		.loc 1 346 16 view .LVU559
 1986 0894 0300A0E1 		mov	r0, r3	@, fn
 1987              	.LVL149:
 1988              		.loc 1 346 16 view .LVU560
 1989 0898 FEFFFFEB 		bl	fopen64		@
 1990              	.LVL150:
 1991              	@ armwave.c:353:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 347:armwave.c     ****     uint32_t data;
 348:armwave.c     ****     int xx, yy;
 349:armwave.c     **** 
 350:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 351:armwave.c     **** 
 352:armwave.c     ****     fputs("P3\n", fp);
 353:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1992              		.loc 1 353 5 view .LVU561
 1993 089c CC609FE5 		ldr	r6, .L146+4	@ tmp154,
 1994              	@ armwave.c:352:     fputs("P3\n", fp);
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1995              		.loc 1 352 5 view .LVU562
 1996 08a0 0320A0E3 		mov	r2, #3	@,
 1997 08a4 0110A0E3 		mov	r1, #1	@,
 1998              	@ armwave.c:346:     FILE *fp = fopen(fn, "wb");
 346:armwave.c     ****     uint32_t data;
 1999              		.loc 1 346 16 view .LVU563
 2000 08a8 0070A0E1 		mov	r7, r0	@ fp,
 2001              	.LVL151:
 347:armwave.c     ****     uint32_t data;
 2002              		.loc 1 347 5 is_stmt 1 view .LVU564
 348:armwave.c     **** 
 2003              		.loc 1 348 5 view .LVU565
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2004              		.loc 1 352 5 view .LVU566
 2005 08ac 0030A0E1 		mov	r3, r0	@, fp
 2006 08b0 BC009FE5 		ldr	r0, .L146+8	@,
 2007              	.LVL152:
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2008              		.loc 1 352 5 is_stmt 0 view .LVU567
 2009 08b4 FEFFFFEB 		bl	fwrite		@
 2010              	.LVL153:
 2011              		.loc 1 353 5 is_stmt 1 view .LVU568
 2012 08b8 D824C6E1 		ldrd	r2, [r6, #72]	@, tmp154,
 2013 08bc B4109FE5 		ldr	r1, .L146+12	@,
 2014 08c0 0700A0E1 		mov	r0, r7	@, fp
 2015 08c4 FEFFFFEB 		bl	fprintf		@
 2016              	.LVL154:
 354:armwave.c     ****     fputs("255\n", fp);
 2017              		.loc 1 354 5 view .LVU569
 2018 08c8 0420A0E3 		mov	r2, #4	@,
 2019 08cc 0730A0E1 		mov	r3, r7	@, fp
 2020 08d0 0110A0E3 		mov	r1, #1	@,
 2021 08d4 A0009FE5 		ldr	r0, .L146+16	@,
 2022 08d8 FEFFFFEB 		bl	fwrite		@
 2023              	.LVL155:
 355:armwave.c     **** 
 356:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2024              		.loc 1 356 5 view .LVU570
 2025              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2026              		.loc 1 356 37 is_stmt 0 view .LVU571
 2027 08dc 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 2028              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2029              		.loc 1 356 5 view .LVU572
 2030 08e0 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2031 08e4 1800000A 		beq	.L135		@,
 2032 08e8 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 2033              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 358:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 359:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 360:armwave.c     **** 
 361:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2034              		.loc 1 361 13 view .LVU573
 2035 08ec 8C909FE5 		ldr	r9, .L146+20	@ tmp156,
 2036              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2037              		.loc 1 356 12 view .LVU574
 2038 08f0 0050A0E3 		mov	r5, #0	@ yy,
 2039              	.LVL156:
 2040              	.L136:
 2041              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2042              		.loc 1 357 9 view .LVU575
 2043 08f4 000053E3 		cmp	r3, #0	@ _12,
 2044              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2045              		.loc 1 357 16 view .LVU576
 2046 08f8 0040A013 		movne	r4, #0	@ xx,
 2047              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2048              		.loc 1 357 9 view .LVU577
 2049 08fc 1600000A 		beq	.L145		@,
 2050              	.LVL157:
 2051              	.L137:
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2052              		.loc 1 358 13 is_stmt 1 discriminator 3 view .LVU578
 2053              	@ armwave.c:358:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2054              		.loc 1 358 29 is_stmt 0 discriminator 3 view .LVU579
 2055 0900 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2056              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2057              		.loc 1 361 13 discriminator 3 view .LVU580
 2058 0904 0910A0E1 		mov	r1, r9	@, tmp156
 2059 0908 0700A0E1 		mov	r0, r7	@, fp
 2060              	@ armwave.c:358:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2061              		.loc 1 358 18 discriminator 3 view .LVU581
 2062 090c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2063              	.LVL158:
 2064              		.loc 1 361 13 is_stmt 1 discriminator 3 view .LVU582
 2065              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2066              		.loc 1 357 58 is_stmt 0 discriminator 3 view .LVU583
 2067 0910 014084E2 		add	r4, r4, #1	@ xx, xx,
 2068              	.LVL159:
 2069              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2070              		.loc 1 361 81 discriminator 3 view .LVU584
 2071 0914 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2072              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2073              		.loc 1 361 61 discriminator 3 view .LVU585
 2074 0918 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2075              	@ armwave.c:361:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2076              		.loc 1 361 13 discriminator 3 view .LVU586
 2077 091c 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2078 0920 7330EFE6 		uxtb	r3, r3	@, tmp146
 2079 0924 00C08DE5 		str	ip, [sp]	@ tmp151,
 2080 0928 7220EFE6 		uxtb	r2, r2	@, data
 2081              	.LVL160:
 2082              		.loc 1 361 13 discriminator 3 view .LVU587
 2083 092c FEFFFFEB 		bl	fprintf		@
 2084              	.LVL161:
 2085              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2086              		.loc 1 357 41 discriminator 3 view .LVU588
 2087 0930 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 2088              	@ armwave.c:357:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2089              		.loc 1 357 9 discriminator 3 view .LVU589
 2090 0934 040053E1 		cmp	r3, r4	@ _12, xx
 2091 0938 F0FFFF8A 		bhi	.L137		@,
 2092 093c 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 2093              	.LVL162:
 2094              	.L138:
 2095              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2096              		.loc 1 356 55 discriminator 2 view .LVU590
 2097 0940 015085E2 		add	r5, r5, #1	@ yy, yy,
 2098              	.LVL163:
 2099              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2100              		.loc 1 356 5 discriminator 2 view .LVU591
 2101 0944 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2102 0948 E9FFFF3A 		bcc	.L136		@,
 2103              	.LVL164:
 2104              	.L135:
 362:armwave.c     ****         }
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     fclose(fp);
 2105              		.loc 1 365 5 is_stmt 1 view .LVU592
 2106 094c 0700A0E1 		mov	r0, r7	@, fp
 2107              	@ armwave.c:366: }
 366:armwave.c     **** }
 2108              		.loc 1 366 1 is_stmt 0 view .LVU593
 2109 0950 0CD08DE2 		add	sp, sp, #12	@,,
 2110              		.cfi_remember_state
 2111              		.cfi_def_cfa_offset 28
 2112              		@ sp needed	@
 2113 0954 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2114              		.cfi_restore 14
 2115              		.cfi_restore 9
 2116              		.cfi_restore 8
 2117              		.cfi_restore 7
 2118              		.cfi_restore 6
 2119              		.cfi_restore 5
 2120              		.cfi_restore 4
 2121              		.cfi_def_cfa_offset 0
 2122              	.LVL165:
 2123              	@ armwave.c:365:     fclose(fp);
 365:armwave.c     **** }
 2124              		.loc 1 365 5 view .LVU594
 2125 0958 FEFFFFEA 		b	fclose		@
 2126              	.LVL166:
 2127              	.L145:
 2128              		.cfi_restore_state
 2129              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2130              		.loc 1 356 55 view .LVU595
 2131 095c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2132              	.LVL167:
 2133              	@ armwave.c:356:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2134              		.loc 1 356 5 view .LVU596
 2135 0960 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2136 0964 F5FFFF8A 		bhi	.L138		@,
 2137 0968 F7FFFFEA 		b	.L135		@
 2138              	.L147:
 2139              		.align	2
 2140              	.L146:
 2141 096c 9C010000 		.word	.LC14
 2142 0970 00000000 		.word	g_armwave_state
 2143 0974 A0010000 		.word	.LC15
 2144 0978 A4010000 		.word	.LC16
 2145 097c AC010000 		.word	.LC17
 2146 0980 B4010000 		.word	.LC18
 2147              		.cfi_endproc
 2148              	.LFE68:
 2150              		.align	2
 2151              		.global	armwave_test_init
 2152              		.syntax unified
 2153              		.arm
 2154              		.fpu vfp
 2156              	armwave_test_init:
 2157              	.LVL168:
 2158              	.LFB69:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Initialise some test functionry.
 370:armwave.c     ****  */
 371:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 372:armwave.c     **** {
 2159              		.loc 1 372 1 is_stmt 1 view -0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 0, uses_anonymous_args = 0
 373:armwave.c     ****     test_create_gamma();
 2163              		.loc 1 373 5 view .LVU598
 2164              	.LBB10:
 2165              	.LBI10:
  45:armwave.c     **** {
 2166              		.loc 1 45 6 view .LVU599
  45:armwave.c     **** {
 2167              		.loc 1 45 6 is_stmt 0 view .LVU600
 2168              	.LBE10:
 2169              	@ armwave.c:372: {
 372:armwave.c     ****     test_create_gamma();
 2170              		.loc 1 372 1 view .LVU601
 2171 0984 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2172              		.cfi_def_cfa_offset 32
 2173              		.cfi_offset 4, -32
 2174              		.cfi_offset 5, -28
 2175              		.cfi_offset 6, -24
 2176              		.cfi_offset 7, -20
 2177              		.cfi_offset 8, -16
 2178              		.cfi_offset 9, -12
 2179              		.cfi_offset 10, -8
 2180              		.cfi_offset 14, -4
 2181 0988 068B2DED 		vpush.64	{d8, d9, d10}	@
 2182              		.cfi_def_cfa_offset 56
 2183              		.cfi_offset 80, -56
 2184              		.cfi_offset 81, -52
 2185              		.cfi_offset 82, -48
 2186              		.cfi_offset 83, -44
 2187              		.cfi_offset 84, -40
 2188              		.cfi_offset 85, -36
 2189 098c C0409FE5 		ldr	r4, .L152+20	@ ivtmp.103,
 2190              	.LBB13:
 2191              	.LBB11:
 2192              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2193              		.loc 1 51 32 view .LVU602
 2194 0990 2EAA9FED 		vldr.32	s20, .L152+16	@ tmp136,
 2195              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2196              		.loc 1 51 26 view .LVU603
 2197 0994 299B9FED 		vldr.64	d9, .L152	@ tmp151,
 2198              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2199              		.loc 1 51 49 view .LVU604
 2200 0998 2A8B9FED 		vldr.64	d8, .L152+8	@ tmp139,
 2201 099c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.103,
 2202              	.LBE11:
 2203              	.LBE13:
 2204              	@ armwave.c:372: {
 372:armwave.c     ****     test_create_gamma();
 2205              		.loc 1 372 1 view .LVU605
 2206 09a0 10D04DE2 		sub	sp, sp, #16	@,,
 2207              		.cfi_def_cfa_offset 72
 2208              	@ armwave.c:372: {
 372:armwave.c     ****     test_create_gamma();
 2209              		.loc 1 372 1 view .LVU606
 2210 09a4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2211 09a8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2212 09ac 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2213 09b0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2214 09b4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.103,
 2215 09b8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2216              	.LVL169:
 2217              	.L149:
 2218              	.LBB14:
 2219              	.LBB12:
  51:armwave.c     ****     }
 2220              		.loc 1 51 9 is_stmt 1 view .LVU607
 2221              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2222              		.loc 1 51 32 is_stmt 0 view .LVU608
 2223 09bc 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.103
 2224              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2225              		.loc 1 51 26 view .LVU609
 2226 09c0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2227              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2228              		.loc 1 51 32 view .LVU610
 2229 09c4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2230 09c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2231 09cc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2232              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2233              		.loc 1 51 26 view .LVU611
 2234 09d0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2235 09d4 FEFFFFEB 		bl	pow		@
 2236              	.LVL170:
 2237              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2238              		.loc 1 51 49 view .LVU612
 2239 09d8 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2240              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2241              		.loc 1 51 24 view .LVU613
 2242 09dc C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2243 09e0 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2244 09e4 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2245              	.LVL171:
 2246              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2247              		.loc 1 50 5 view .LVU614
 2248 09e8 0A0054E1 		cmp	r4, r10	@ ivtmp.103, _39
 2249 09ec F2FFFF1A 		bne	.L149		@,
 2250              	.LVL172:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2251              		.loc 1 50 5 view .LVU615
 2252              	.LBE12:
 2253              	.LBE14:
 374:armwave.c     **** 
 375:armwave.c     ****     // make ch1 yellowish by default
 376:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2254              		.loc 1 376 5 is_stmt 1 view .LVU616
 2255              	.LBB15:
 2256              	.LBI15:
 329:armwave.c     **** {
 2257              		.loc 1 329 6 view .LVU617
 2258              	.LBB16:
 332:armwave.c     ****         case 1:
 2259              		.loc 1 332 5 view .LVU618
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2260              		.loc 1 334 13 view .LVU619
 335:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2261              		.loc 1 335 13 view .LVU620
 2262              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2263              		.loc 1 334 41 is_stmt 0 view .LVU621
 2264 09f0 60C09FE5 		ldr	ip, .L152+24	@ tmp142,
 2265 09f4 60409FE5 		ldr	r4, .L152+28	@ tmp143,
 2266              	.LBE16:
 2267              	.LBE15:
 2268              	@ armwave.c:378:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 377:armwave.c     **** 
 378:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2269              		.loc 1 378 5 view .LVU622
 2270 09f8 0000A0E3 		mov	r0, #0	@ tmp147,
 2271              	.LBB20:
 2272              	.LBB17:
 2273              	@ armwave.c:336:             g_armwave_state.ch1_color.b = b;
 336:armwave.c     ****             break;
 2274              		.loc 1 336 41 view .LVU623
 2275 09fc FAE0A0E3 		mov	lr, #250	@ tmp146,
 2276              	.LBE17:
 2277              	.LBE20:
 2278              	@ armwave.c:378:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2279              		.loc 1 378 5 view .LVU624
 2280 0a00 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2281 0a04 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2282 0a08 00808DE5 		str	r8, [sp]	@ render_width,
 2283 0a0c 0610A0E1 		mov	r1, r6	@, tmp3
 2284 0a10 0720A0E1 		mov	r2, r7	@, nwaves
 2285              	.LBB21:
 2286              	.LBB18:
 2287              	@ armwave.c:334:             g_armwave_state.ch1_color.r = r;
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2288              		.loc 1 334 41 view .LVU625
 2289 0a14 5C408CE5 		str	r4, [ip, #92]	@ tmp143, MEM[(short int *)&g_armwave_state + 92B]
 336:armwave.c     ****             break;
 2290              		.loc 1 336 13 is_stmt 1 view .LVU626
 2291              	.LBE18:
 2292              	.LBE21:
 2293              	@ armwave.c:378:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2294              		.loc 1 378 5 is_stmt 0 view .LVU627
 2295 0a18 0630A0E1 		mov	r3, r6	@, wave_size
 2296              	.LBB22:
 2297              	.LBB19:
 2298              	@ armwave.c:336:             g_armwave_state.ch1_color.b = b;
 336:armwave.c     ****             break;
 2299              		.loc 1 336 41 view .LVU628
 2300 0a1c B0E6CCE1 		strh	lr, [ip, #96]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 337:armwave.c     ****     }
 2301              		.loc 1 337 13 is_stmt 1 view .LVU629
 2302              	.LVL173:
 337:armwave.c     ****     }
 2303              		.loc 1 337 13 is_stmt 0 view .LVU630
 2304              	.LBE19:
 2305              	.LBE22:
 2306              		.loc 1 378 5 is_stmt 1 view .LVU631
 2307 0a20 FEFFFFEB 		bl	armwave_setup_render		@
 2308              	.LVL174:
 379:armwave.c     **** 
 380:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2309              		.loc 1 380 5 view .LVU632
 2310 0a24 34109FE5 		ldr	r1, .L152+32	@,
 2311 0a28 34009FE5 		ldr	r0, .L152+36	@,
 2312              	@ armwave.c:381: }
 381:armwave.c     **** }
 2313              		.loc 1 381 1 is_stmt 0 view .LVU633
 2314 0a2c 10D08DE2 		add	sp, sp, #16	@,,
 2315              		.cfi_def_cfa_offset 56
 2316              		@ sp needed	@
 2317 0a30 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2318              		.cfi_restore 84
 2319              		.cfi_restore 85
 2320              		.cfi_restore 82
 2321              		.cfi_restore 83
 2322              		.cfi_restore 80
 2323              		.cfi_restore 81
 2324              		.cfi_def_cfa_offset 32
 2325 0a34 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2326              		.cfi_restore 14
 2327              		.cfi_restore 10
 2328              		.cfi_restore 9
 2329              		.cfi_restore 8
 2330              		.cfi_restore 7
 2331              		.cfi_restore 6
 2332              		.cfi_restore 5
 2333              		.cfi_restore 4
 2334              		.cfi_def_cfa_offset 0
 2335              	.LVL175:
 2336              	@ armwave.c:380:     printf("armwave version: %s\n", ARMWAVE_VER);
 380:armwave.c     **** }
 2337              		.loc 1 380 5 view .LVU634
 2338 0a38 FEFFFFEA 		b	printf		@
 2339              	.LVL176:
 2340              	.L153:
 2341 0a3c 0000A0E1 		.align	3
 2342              	.L152:
 2343 0a40 000000C0 		.word	-1073741824
 2344 0a44 CCCCEC3F 		.word	1072483532
 2345 0a48 00000000 		.word	0
 2346 0a4c 00E06F40 		.word	1081073664
 2347 0a50 00007F43 		.word	1132396544
 2348 0a54 FFFFFFFF 		.word	gamma_table-1
 2349 0a58 00000000 		.word	g_armwave_state
 2350 0a5c F609F406 		.word	116656630
 2351 0a60 00000000 		.word	.LC0
 2352 0a64 08000000 		.word	.LC1
 2353              		.cfi_endproc
 2354              	.LFE69:
 2356              		.global	__aeabi_uidiv
 2357              		.align	2
 2358              		.global	armwave_test_generate
 2359              		.syntax unified
 2360              		.arm
 2361              		.fpu vfp
 2363              	armwave_test_generate:
 2364              	.LFB70:
 382:armwave.c     **** 
 383:armwave.c     **** /*
 384:armwave.c     ****  * Fill buffers with test funtionry.
 385:armwave.c     ****  */
 386:armwave.c     **** void armwave_test_generate()
 387:armwave.c     **** {
 2365              		.loc 1 387 1 is_stmt 1 view -0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 0
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
 388:armwave.c     ****     uint32_t yy;
 2369              		.loc 1 388 5 view .LVU636
 389:armwave.c     **** 
 390:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2370              		.loc 1 390 5 view .LVU637
 2371              	@ armwave.c:387: {
 387:armwave.c     ****     uint32_t yy;
 2372              		.loc 1 387 1 is_stmt 0 view .LVU638
 2373 0a68 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2374              		.cfi_def_cfa_offset 24
 2375              		.cfi_offset 4, -24
 2376              		.cfi_offset 5, -20
 2377              		.cfi_offset 6, -16
 2378              		.cfi_offset 7, -12
 2379              		.cfi_offset 8, -8
 2380              		.cfi_offset 14, -4
 2381              	@ armwave.c:390:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2382              		.loc 1 390 5 view .LVU639
 2383 0a6c 0010A0E3 		mov	r1, #0	@,
 2384 0a70 5C509FE5 		ldr	r5, .L159	@ tmp142,
 2385 0a74 402095E5 		ldr	r2, [r5, #64]	@, g_armwave_state.ch_buff_size
 2386 0a78 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 2387 0a7c FEFFFFEB 		bl	memset		@
 2388              	.LVL177:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2389              		.loc 1 392 5 is_stmt 1 view .LVU640
 2390              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2391              		.loc 1 392 45 is_stmt 0 view .LVU641
 2392 0a80 346095E5 		ldr	r6, [r5, #52]	@ _8, g_armwave_state.slice_height
 2393              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2394              		.loc 1 392 5 view .LVU642
 2395 0a84 020B56E3 		cmp	r6, #2048	@ _8,
 2396 0a88 F081BD88 		pophi	{r4, r5, r6, r7, r8, pc}	@
 2397              	@ armwave.c:393:         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwav
 393:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2398              		.loc 1 393 9 view .LVU643
 2399 0a8c 44709FE5 		ldr	r7, .L159+4	@ tmp143,
 2400              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2401              		.loc 1 392 12 view .LVU644
 2402 0a90 0040A0E3 		mov	r4, #0	@ yy,
 2403              	.LVL178:
 2404              	.L156:
 2405              		.loc 1 393 9 is_stmt 1 discriminator 3 view .LVU645
 2406 0a94 940602E0 		mul	r2, r4, r6	@, yy, _8
 2407 0a98 383095E5 		ldr	r3, [r5, #56]	@, g_armwave_state.slice_record_height
 2408 0a9c 0410A0E1 		mov	r1, r4	@, yy
 2409 0aa0 0700A0E1 		mov	r0, r7	@, tmp143
 2410 0aa4 FEFFFFEB 		bl	printf		@
 2411              	.LVL179:
 394:armwave.c     **** 
 395:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2412              		.loc 1 395 9 discriminator 3 view .LVU646
 2413 0aa8 D403C5E1 		ldrd	r0, [r5, #52]	@, tmp142,
 2414 0aac 900400E0 		mul	r0, r0, r4	@, g_armwave_state.slice_height, yy
 2415 0ab0 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2416              	.LVL180:
 2417              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2418              		.loc 1 392 45 is_stmt 0 discriminator 3 view .LVU647
 2419 0ab4 346095E5 		ldr	r6, [r5, #52]	@ _8, g_armwave_state.slice_height
 2420              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2421              		.loc 1 392 28 discriminator 3 view .LVU648
 2422 0ab8 020BA0E3 		mov	r0, #2048	@,
 2423 0abc 0610A0E1 		mov	r1, r6	@, _8
 2424 0ac0 FEFFFFEB 		bl	__aeabi_uidiv		@
 2425              	.LVL181:
 2426              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2427              		.loc 1 392 63 discriminator 3 view .LVU649
 2428 0ac4 014084E2 		add	r4, r4, #1	@ yy, yy,
 2429              	.LVL182:
 2430              	@ armwave.c:392:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2431              		.loc 1 392 5 discriminator 3 view .LVU650
 2432 0ac8 040050E1 		cmp	r0, r4	@, yy
 2433 0acc F0FFFF8A 		bhi	.L156		@,
 2434 0ad0 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 2435              	.L160:
 2436              		.align	2
 2437              	.L159:
 2438 0ad4 00000000 		.word	g_armwave_state
 2439 0ad8 C4010000 		.word	.LC19
 2440              		.cfi_endproc
 2441              	.LFE70:
 2443              		.align	2
 2444              		.global	armwave_test_fill_outbuf
 2445              		.syntax unified
 2446              		.arm
 2447              		.fpu vfp
 2449              	armwave_test_fill_outbuf:
 2450              	.LFB71:
 396:armwave.c     ****     }
 397:armwave.c     **** }
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Render image to the local allocated buffer.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_test_fill_outbuf()
 403:armwave.c     **** {
 2451              		.loc 1 403 1 is_stmt 1 view -0
 2452              		.cfi_startproc
 2453              		@ args = 0, pretend = 0, frame = 8
 2454              		@ frame_needed = 0, uses_anonymous_args = 0
 404:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2455              		.loc 1 404 5 view .LVU652
 2456 0adc 40219FE5 		ldr	r2, .L185	@ tmp203,
 2457              	@ armwave.c:403: {
 403:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2458              		.loc 1 403 1 is_stmt 0 view .LVU653
 2459 0ae0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2460              		.cfi_def_cfa_offset 36
 2461              		.cfi_offset 4, -36
 2462              		.cfi_offset 5, -32
 2463              		.cfi_offset 6, -28
 2464              		.cfi_offset 7, -24
 2465              		.cfi_offset 8, -20
 2466              		.cfi_offset 9, -16
 2467              		.cfi_offset 10, -12
 2468              		.cfi_offset 11, -8
 2469              		.cfi_offset 14, -4
 2470 0ae4 0CD04DE2 		sub	sp, sp, #12	@,,
 2471              		.cfi_def_cfa_offset 48
 2472              	@ armwave.c:404:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2473              		.loc 1 404 5 view .LVU654
 2474 0ae8 588092E5 		ldr	r8, [r2, #88]	@ _1, g_armwave_state.out_pixbuf
 2475              	.LVL183:
 2476              	.LBB25:
 2477              	.LBI25:
 162:armwave.c     **** {
 2478              		.loc 1 162 6 is_stmt 1 view .LVU655
 2479              	.LBB26:
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2480              		.loc 1 164 5 view .LVU656
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 2481              		.loc 1 165 5 view .LVU657
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2482              		.loc 1 166 5 view .LVU658
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2483              		.loc 1 167 5 view .LVU659
 2484              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2485              		.loc 1 167 15 is_stmt 0 view .LVU660
 2486 0aec 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2487              	.LVL184:
 168:armwave.c     ****     uint32_t offset;
 2488              		.loc 1 168 5 is_stmt 1 view .LVU661
 169:armwave.c     **** 
 2489              		.loc 1 169 5 view .LVU662
 171:armwave.c     **** 
 2490              		.loc 1 171 5 view .LVU663
 2491 0af0 000058E3 		cmp	r8, #0	@ _1,
 2492 0af4 4500000A 		beq	.L183		@,
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2493              		.loc 1 173 5 view .LVU664
 2494              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2495              		.loc 1 173 41 is_stmt 0 view .LVU665
 2496 0af8 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2497 0afc 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2498              	.LVL185:
 174:armwave.c     **** 
 2499              		.loc 1 174 5 is_stmt 1 view .LVU666
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2500              		.loc 1 176 5 view .LVU667
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2501              		.loc 1 176 5 is_stmt 0 view .LVU668
 2502 0b00 000055E3 		cmp	r5, #0	@ npix,
 2503 0b04 0B0000DA 		ble	.L161		@,
 2504              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2505              		.loc 1 189 52 view .LVU669
 2506 0b08 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _24, g_armwave_state.ch1_color.g
 2507              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2508              		.loc 1 188 52 view .LVU670
 2509 0b0c FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _18, g_armwave_state.ch1_color.r
 2510              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2511              		.loc 1 176 11 view .LVU671
 2512 0b10 0010A0E3 		mov	r1, #0	@ n,
 2513              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2514              		.loc 1 189 52 view .LVU672
 2515 0b14 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2516              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2517              		.loc 1 190 52 view .LVU673
 2518 0b18 F036D2E1 		ldrsh	r3, [r2, #96]	@ _28, g_armwave_state.ch1_color.b
 2519 0b1c 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2520              	.LVL186:
 2521              	.L168:
 180:armwave.c     **** 
 2522              		.loc 1 180 9 is_stmt 1 view .LVU674
 2523              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2524              		.loc 1 180 19 is_stmt 0 view .LVU675
 2525 0b20 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2526              	.LVL187:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2527              		.loc 1 182 9 is_stmt 1 view .LVU676
 2528              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2529              		.loc 1 182 11 is_stmt 0 view .LVU677
 2530 0b24 000050E3 		cmp	r0, #0	@ wave_word,
 2531 0b28 0400001A 		bne	.L180		@,
 2532 0b2c 041081E2 		add	r1, r1, #4	@ n, n,
 2533              	.L164:
 2534              	.LVL188:
 2535              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2536              		.loc 1 176 5 view .LVU678
 2537 0b30 010055E1 		cmp	r5, r1	@ npix, n
 2538 0b34 F9FFFFCA 		bgt	.L168		@,
 2539              	.LVL189:
 2540              	.L161:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2541              		.loc 1 176 5 view .LVU679
 2542              	.LBE26:
 2543              	.LBE25:
 2544              	@ armwave.c:405: }
 405:armwave.c     **** }
 2545              		.loc 1 405 1 view .LVU680
 2546 0b38 0CD08DE2 		add	sp, sp, #12	@,,
 2547              		.cfi_remember_state
 2548              		.cfi_def_cfa_offset 36
 2549              		@ sp needed	@
 2550 0b3c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2551              	.LVL190:
 2552              	.L180:
 2553              		.cfi_restore_state
 2554              	.LBB28:
 2555              	.LBB27:
 2556              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2557              		.loc 1 187 19 view .LVU681
 2558 0b40 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2559              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2560              		.loc 1 182 11 view .LVU682
 2561 0b44 0160A0E1 		mov	r6, r1	@ ivtmp.115, n
 2562              	.LVL191:
 184:armwave.c     ****                 wave_word >>= 8;
 2563              		.loc 1 184 17 is_stmt 1 view .LVU683
 185:armwave.c     **** 
 2564              		.loc 1 185 17 view .LVU684
 2565              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2566              		.loc 1 185 27 is_stmt 0 view .LVU685
 2567 0b48 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2568              	.LVL192:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2569              		.loc 1 187 17 is_stmt 1 view .LVU686
 2570 0b4c 041081E2 		add	r1, r1, #4	@ n, ivtmp.115,
 2571              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2572              		.loc 1 187 19 is_stmt 0 view .LVU687
 2573 0b50 0500001A 		bne	.L184		@,
 2574              	.L165:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2575              		.loc 1 187 19 view .LVU688
 2576 0b54 016086E2 		add	r6, r6, #1	@ ivtmp.115, ivtmp.115,
 2577              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2578              		.loc 1 183 13 view .LVU689
 2579 0b58 060051E1 		cmp	r1, r6	@ n, ivtmp.115
 2580 0b5c F3FFFF0A 		beq	.L164		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2581              		.loc 1 184 17 is_stmt 1 view .LVU690
 2582              	.LVL193:
 185:armwave.c     **** 
 2583              		.loc 1 185 17 view .LVU691
 2584              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2585              		.loc 1 187 19 is_stmt 0 view .LVU692
 2586 0b60 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2587              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2588              		.loc 1 185 27 view .LVU693
 2589 0b64 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2590              	.LVL194:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2591              		.loc 1 187 17 is_stmt 1 view .LVU694
 2592              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2593              		.loc 1 187 19 is_stmt 0 view .LVU695
 2594 0b68 F9FFFF0A 		beq	.L165		@,
 2595              	.L184:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2596              		.loc 1 188 21 is_stmt 1 view .LVU696
 2597              	.LVL195:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2598              		.loc 1 189 21 view .LVU697
 190:armwave.c     **** 
 2599              		.loc 1 190 21 view .LVU698
 192:armwave.c     ****                     g = MIN(gg, 255);
 2600              		.loc 1 192 21 view .LVU699
 193:armwave.c     ****                     b = MIN(bb, 255);
 2601              		.loc 1 193 21 view .LVU700
 194:armwave.c     **** 
 2602              		.loc 1 194 21 view .LVU701
 197:armwave.c     **** 
 2603              		.loc 1 197 21 view .LVU702
 2604              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2605              		.loc 1 190 55 is_stmt 0 view .LVU703
 2606 0b6c 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 2607              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2608              		.loc 1 201 57 view .LVU704
 2609 0b70 20A092E5 		ldr	r10, [r2, #32]	@ _50, g_armwave_state.vscale
 2610              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2611              		.loc 1 201 32 view .LVU705
 2612 0b74 7670EFE6 		uxtb	r7, r6	@ ivtmp.115, ivtmp.115
 2613              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2614              		.loc 1 190 55 view .LVU706
 2615 0b78 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 2616              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2617              		.loc 1 189 55 view .LVU707
 2618 0b7c 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 2619              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2620              		.loc 1 201 24 view .LVU708
 2621 0b80 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.115
 2622              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2623              		.loc 1 189 55 view .LVU709
 2624 0b84 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 2625              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2626              		.loc 1 190 24 view .LVU710
 2627 0b88 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 2628              	.LVL196:
 2629              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2630              		.loc 1 188 55 view .LVU711
 2631 0b8c 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 2632              	.LVL197:
 2633              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2634              		.loc 1 189 24 view .LVU712
 2635 0b90 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 2636              	.LVL198:
 2637              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2638              		.loc 1 194 25 view .LVU713
 2639 0b94 FF005CE3 		cmp	ip, #255	@ bb,
 2640 0b98 FFC0A0A3 		movge	ip, #255	@ bb,
 2641              	.LVL199:
 2642              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 2643              		.loc 1 193 25 view .LVU714
 2644 0b9c FF0054E3 		cmp	r4, #255	@ gg,
 2645 0ba0 FF40A0A3 		movge	r4, #255	@ gg,
 2646              	.LVL200:
 2647              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2648              		.loc 1 188 24 view .LVU715
 2649 0ba4 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 2650              	.LVL201:
 2651              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2652              		.loc 1 192 25 view .LVU716
 2653 0ba8 FF005EE3 		cmp	lr, #255	@ rr,
 2654              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2655              		.loc 1 197 56 view .LVU717
 2656 0bac 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 2657              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2658              		.loc 1 192 25 view .LVU718
 2659 0bb0 FFE0A0A3 		movge	lr, #255	@ rr,
 2660              	.LVL202:
 2661              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2662              		.loc 1 197 44 view .LVU719
 2663 0bb4 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 2664 0bb8 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 2665              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2666              		.loc 1 197 56 view .LVU720
 2667 0bbc 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 2668              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2669              		.loc 1 197 51 view .LVU721
 2670 0bc0 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 2671              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2672              		.loc 1 197 62 view .LVU722
 2673 0bc4 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2674 0bc8 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 2675              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2676              		.loc 1 204 21 view .LVU723
 2677 0bcc 00005AE3 		cmp	r10, #0	@ _50,
 2678              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2679              		.loc 1 197 26 view .LVU724
 2680 0bd0 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 2681              	.LVL203:
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2682              		.loc 1 200 21 is_stmt 1 view .LVU725
 201:armwave.c     ****                     xx = (nsub >> 8);
 2683              		.loc 1 201 21 view .LVU726
 202:armwave.c     **** 
 2684              		.loc 1 202 21 view .LVU727
 2685              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 2686              		.loc 1 202 32 is_stmt 0 view .LVU728
 2687 0bd4 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.115,
 2688              	.LVL204:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2689              		.loc 1 204 21 is_stmt 1 view .LVU729
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2690              		.loc 1 204 21 is_stmt 0 view .LVU730
 2691 0bd8 DDFFFF0A 		beq	.L165		@,
 2692              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2693              		.loc 1 204 29 view .LVU731
 2694 0bdc 00C0A0E3 		mov	ip, #0	@ row,
 2695              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2696              		.loc 1 204 38 view .LVU732
 2697 0be0 0CE0A0E1 		mov	lr, ip	@ _54, row
 2698              	.LVL205:
 2699              	.L166:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2700              		.loc 1 205 25 is_stmt 1 view .LVU733
 206:armwave.c     ****                     }
 2701              		.loc 1 206 25 view .LVU734
 2702              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2703              		.loc 1 205 52 is_stmt 0 view .LVU735
 2704 0be4 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2705              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2706              		.loc 1 205 45 view .LVU736
 2707 0be8 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 2708              	.LVL206:
 2709              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2710              		.loc 1 204 67 view .LVU737
 2711 0bec 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 2712              	.LVL207:
 2713              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 2714              		.loc 1 206 43 view .LVU738
 2715 0bf0 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 2716              	.LVL208:
 2717              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2718              		.loc 1 204 67 view .LVU739
 2719 0bf4 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 2720              	.LVL209:
 2721              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2722              		.loc 1 204 38 view .LVU740
 2723 0bf8 0CE0A0E1 		mov	lr, ip	@ _54, row
 2724              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 2725              		.loc 1 206 53 view .LVU741
 2726 0bfc 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 2727              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2728              		.loc 1 204 21 view .LVU742
 2729 0c00 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2730              	.LVL210:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2731              		.loc 1 204 21 view .LVU743
 2732 0c04 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 2733 0c08 F5FFFF3A 		bcc	.L166		@,
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2734              		.loc 1 204 21 view .LVU744
 2735 0c0c D0FFFFEA 		b	.L165		@
 2736              	.LVL211:
 2737              	.L183:
 171:armwave.c     **** 
 2738              		.loc 1 171 5 is_stmt 1 view .LVU745
 2739 0c10 10309FE5 		ldr	r3, .L185+4	@,
 2740 0c14 AB20A0E3 		mov	r2, #171	@,
 2741 0c18 0C109FE5 		ldr	r1, .L185+8	@,
 2742 0c1c 0C009FE5 		ldr	r0, .L185+12	@,
 2743 0c20 FEFFFFEB 		bl	__assert_fail		@
 2744              	.LVL212:
 2745              	.L186:
 2746              		.align	2
 2747              	.L185:
 2748 0c24 00000000 		.word	g_armwave_state
 2749 0c28 18000000 		.word	.LANCHOR0+24
 2750 0c2c 48000000 		.word	.LC4
 2751 0c30 54000000 		.word	.LC5
 2752              	.LBE27:
 2753              	.LBE28:
 2754              		.cfi_endproc
 2755              	.LFE71:
 2757              		.align	2
 2758              		.global	armwave_test_dump_buffer_to_ppm
 2759              		.syntax unified
 2760              		.arm
 2761              		.fpu vfp
 2763              	armwave_test_dump_buffer_to_ppm:
 2764              	.LVL213:
 2765              	.LFB72:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 411:armwave.c     **** {
 2766              		.loc 1 411 1 view -0
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 0
 2769              		@ frame_needed = 0, uses_anonymous_args = 0
 2770              		@ link register save eliminated.
 412:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2771              		.loc 1 412 5 view .LVU747
 2772 0c34 08309FE5 		ldr	r3, .L188	@ tmp112,
 2773 0c38 0010A0E1 		mov	r1, r0	@, fn
 2774 0c3c 580093E5 		ldr	r0, [r3, #88]	@, g_armwave_state.out_pixbuf
 2775              	.LVL214:
 2776              		.loc 1 412 5 is_stmt 0 view .LVU748
 2777 0c40 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2778              	.LVL215:
 2779              	.L189:
 2780              		.loc 1 412 5 view .LVU749
 2781              		.align	2
 2782              	.L188:
 2783 0c44 00000000 		.word	g_armwave_state
 2784              		.cfi_endproc
 2785              	.LFE72:
 2787              		.align	2
 2788              		.global	armwave_test_fill_gdkbuf
 2789              		.syntax unified
 2790              		.arm
 2791              		.fpu vfp
 2793              	armwave_test_fill_gdkbuf:
 2794              	.LVL216:
 2795              	.LFB73:
 413:armwave.c     **** }
 414:armwave.c     **** 
 415:armwave.c     **** /*
 416:armwave.c     ****  * Render GDK buffer with test funtionry.
 417:armwave.c     ****  */
 418:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 419:armwave.c     **** {
 2796              		.loc 1 419 1 is_stmt 1 view -0
 2797              		.cfi_startproc
 2798              		@ args = 0, pretend = 0, frame = 8
 2799              		@ frame_needed = 0, uses_anonymous_args = 0
 420:armwave.c     ****     //PyObject *mv;
 421:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 422:armwave.c     **** 
 423:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 424:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2800              		.loc 1 424 5 view .LVU751
 2801              	@ armwave.c:424:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2802              		.loc 1 424 11 is_stmt 0 view .LVU752
 2803 0c48 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2804              	@ armwave.c:419: {
 419:armwave.c     ****     //PyObject *mv;
 2805              		.loc 1 419 1 view .LVU753
 2806 0c4c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2807              		.cfi_def_cfa_offset 36
 2808              		.cfi_offset 4, -36
 2809              		.cfi_offset 5, -32
 2810              		.cfi_offset 6, -28
 2811              		.cfi_offset 7, -24
 2812              		.cfi_offset 8, -20
 2813              		.cfi_offset 9, -16
 2814              		.cfi_offset 10, -12
 2815              		.cfi_offset 11, -8
 2816              		.cfi_offset 14, -4
 2817 0c50 0CD04DE2 		sub	sp, sp, #12	@,,
 2818              		.cfi_def_cfa_offset 48
 2819              	.LBB31:
 2820              	.LBB32:
 2821              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2822              		.loc 1 167 15 view .LVU754
 2823 0c54 38219FE5 		ldr	r2, .L214	@ tmp206,
 2824              	.LBE32:
 2825              	.LBE31:
 2826              	@ armwave.c:424:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2827              		.loc 1 424 11 view .LVU755
 2828 0c58 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2829              	.LVL217:
 425:armwave.c     ****     
 426:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2830              		.loc 1 427 5 is_stmt 1 view .LVU756
 2831              	.LBB35:
 2832              	.LBI31:
 162:armwave.c     **** {
 2833              		.loc 1 162 6 view .LVU757
 2834              	.LBB33:
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2835              		.loc 1 164 5 view .LVU758
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 2836              		.loc 1 165 5 view .LVU759
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2837              		.loc 1 166 5 view .LVU760
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2838              		.loc 1 167 5 view .LVU761
 2839              	@ armwave.c:171:     assert(out_buffer != NULL);
 171:armwave.c     **** 
 2840              		.loc 1 171 5 is_stmt 0 view .LVU762
 2841 0c5c 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2842              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2843              		.loc 1 167 15 view .LVU763
 2844 0c60 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2845              	.LVL218:
 168:armwave.c     ****     uint32_t offset;
 2846              		.loc 1 168 5 is_stmt 1 view .LVU764
 169:armwave.c     **** 
 2847              		.loc 1 169 5 view .LVU765
 171:armwave.c     **** 
 2848              		.loc 1 171 5 view .LVU766
 2849 0c64 4500000A 		beq	.L212		@,
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2850              		.loc 1 173 5 view .LVU767
 2851              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2852              		.loc 1 173 41 is_stmt 0 view .LVU768
 2853 0c68 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2854 0c6c 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2855              	.LVL219:
 174:armwave.c     **** 
 2856              		.loc 1 174 5 is_stmt 1 view .LVU769
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2857              		.loc 1 176 5 view .LVU770
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2858              		.loc 1 176 5 is_stmt 0 view .LVU771
 2859 0c70 000055E3 		cmp	r5, #0	@ npix,
 2860 0c74 0B0000DA 		ble	.L190		@,
 2861              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2862              		.loc 1 189 52 view .LVU772
 2863 0c78 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _26, g_armwave_state.ch1_color.g
 2864              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2865              		.loc 1 188 52 view .LVU773
 2866 0c7c FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _20, g_armwave_state.ch1_color.r
 2867              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2868              		.loc 1 176 11 view .LVU774
 2869 0c80 0010A0E3 		mov	r1, #0	@ n,
 2870              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2871              		.loc 1 189 52 view .LVU775
 2872 0c84 00308DE5 		str	r3, [sp]	@ _26, %sfp
 2873              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2874              		.loc 1 190 52 view .LVU776
 2875 0c88 F036D2E1 		ldrsh	r3, [r2, #96]	@ _30, g_armwave_state.ch1_color.b
 2876 0c8c 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 2877              	.LVL220:
 2878              	.L197:
 180:armwave.c     **** 
 2879              		.loc 1 180 9 is_stmt 1 view .LVU777
 2880              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2881              		.loc 1 180 19 is_stmt 0 view .LVU778
 2882 0c90 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 2883              	.LVL221:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2884              		.loc 1 182 9 is_stmt 1 view .LVU779
 2885              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2886              		.loc 1 182 11 is_stmt 0 view .LVU780
 2887 0c94 000050E3 		cmp	r0, #0	@ wave_word,
 2888 0c98 0400001A 		bne	.L209		@,
 2889 0c9c 041081E2 		add	r1, r1, #4	@ n, n,
 2890              	.L193:
 2891              	.LVL222:
 2892              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2893              		.loc 1 176 5 view .LVU781
 2894 0ca0 010055E1 		cmp	r5, r1	@ npix, n
 2895 0ca4 F9FFFFCA 		bgt	.L197		@,
 2896              	.LVL223:
 2897              	.L190:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2898              		.loc 1 176 5 view .LVU782
 2899              	.LBE33:
 2900              	.LBE35:
 2901              	@ armwave.c:428: }
 428:armwave.c     **** }
 2902              		.loc 1 428 1 view .LVU783
 2903 0ca8 0CD08DE2 		add	sp, sp, #12	@,,
 2904              		.cfi_remember_state
 2905              		.cfi_def_cfa_offset 36
 2906              		@ sp needed	@
 2907 0cac F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2908              	.LVL224:
 2909              	.L209:
 2910              		.cfi_restore_state
 2911              	.LBB36:
 2912              	.LBB34:
 2913              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2914              		.loc 1 187 19 view .LVU784
 2915 0cb0 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2916              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2917              		.loc 1 182 11 view .LVU785
 2918 0cb4 0160A0E1 		mov	r6, r1	@ ivtmp.131, n
 2919              	.LVL225:
 184:armwave.c     ****                 wave_word >>= 8;
 2920              		.loc 1 184 17 is_stmt 1 view .LVU786
 185:armwave.c     **** 
 2921              		.loc 1 185 17 view .LVU787
 2922              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2923              		.loc 1 185 27 is_stmt 0 view .LVU788
 2924 0cb8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2925              	.LVL226:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2926              		.loc 1 187 17 is_stmt 1 view .LVU789
 2927 0cbc 041081E2 		add	r1, r1, #4	@ n, ivtmp.131,
 2928              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2929              		.loc 1 187 19 is_stmt 0 view .LVU790
 2930 0cc0 0500001A 		bne	.L213		@,
 2931              	.L194:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2932              		.loc 1 187 19 view .LVU791
 2933 0cc4 016086E2 		add	r6, r6, #1	@ ivtmp.131, ivtmp.131,
 2934              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2935              		.loc 1 183 13 view .LVU792
 2936 0cc8 060051E1 		cmp	r1, r6	@ n, ivtmp.131
 2937 0ccc F3FFFF0A 		beq	.L193		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2938              		.loc 1 184 17 is_stmt 1 view .LVU793
 2939              	.LVL227:
 185:armwave.c     **** 
 2940              		.loc 1 185 17 view .LVU794
 2941              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2942              		.loc 1 187 19 is_stmt 0 view .LVU795
 2943 0cd0 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2944              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2945              		.loc 1 185 27 view .LVU796
 2946 0cd4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2947              	.LVL228:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2948              		.loc 1 187 17 is_stmt 1 view .LVU797
 2949              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2950              		.loc 1 187 19 is_stmt 0 view .LVU798
 2951 0cd8 F9FFFF0A 		beq	.L194		@,
 2952              	.L213:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2953              		.loc 1 188 21 is_stmt 1 view .LVU799
 2954              	.LVL229:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2955              		.loc 1 189 21 view .LVU800
 190:armwave.c     **** 
 2956              		.loc 1 190 21 view .LVU801
 192:armwave.c     ****                     g = MIN(gg, 255);
 2957              		.loc 1 192 21 view .LVU802
 193:armwave.c     ****                     b = MIN(bb, 255);
 2958              		.loc 1 193 21 view .LVU803
 194:armwave.c     **** 
 2959              		.loc 1 194 21 view .LVU804
 197:armwave.c     **** 
 2960              		.loc 1 197 21 view .LVU805
 2961              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2962              		.loc 1 190 55 is_stmt 0 view .LVU806
 2963 0cdc 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 2964              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2965              		.loc 1 201 57 view .LVU807
 2966 0ce0 20A092E5 		ldr	r10, [r2, #32]	@ _52, g_armwave_state.vscale
 2967              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2968              		.loc 1 201 32 view .LVU808
 2969 0ce4 7670EFE6 		uxtb	r7, r6	@ ivtmp.131, ivtmp.131
 2970              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2971              		.loc 1 190 55 view .LVU809
 2972 0ce8 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 2973              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2974              		.loc 1 189 55 view .LVU810
 2975 0cec 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 2976              	@ armwave.c:201:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 2977              		.loc 1 201 24 view .LVU811
 2978 0cf0 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.131
 2979              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2980              		.loc 1 189 55 view .LVU812
 2981 0cf4 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 2982              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2983              		.loc 1 190 24 view .LVU813
 2984 0cf8 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 2985              	.LVL230:
 2986              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2987              		.loc 1 188 55 view .LVU814
 2988 0cfc 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 2989              	.LVL231:
 2990              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2991              		.loc 1 189 24 view .LVU815
 2992 0d00 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 2993              	.LVL232:
 2994              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2995              		.loc 1 194 25 view .LVU816
 2996 0d04 FF005CE3 		cmp	ip, #255	@ bb,
 2997 0d08 FFC0A0A3 		movge	ip, #255	@ bb,
 2998              	.LVL233:
 2999              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 3000              		.loc 1 193 25 view .LVU817
 3001 0d0c FF0054E3 		cmp	r4, #255	@ gg,
 3002 0d10 FF40A0A3 		movge	r4, #255	@ gg,
 3003              	.LVL234:
 3004              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3005              		.loc 1 188 24 view .LVU818
 3006 0d14 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3007              	.LVL235:
 3008              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 3009              		.loc 1 192 25 view .LVU819
 3010 0d18 FF005EE3 		cmp	lr, #255	@ rr,
 3011              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3012              		.loc 1 197 56 view .LVU820
 3013 0d1c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3014              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 3015              		.loc 1 192 25 view .LVU821
 3016 0d20 FFE0A0A3 		movge	lr, #255	@ rr,
 3017              	.LVL236:
 3018              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3019              		.loc 1 197 44 view .LVU822
 3020 0d24 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3021 0d28 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3022              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3023              		.loc 1 197 56 view .LVU823
 3024 0d2c 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3025              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3026              		.loc 1 197 51 view .LVU824
 3027 0d30 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3028              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3029              		.loc 1 197 62 view .LVU825
 3030 0d34 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3031 0d38 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3032              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3033              		.loc 1 204 21 view .LVU826
 3034 0d3c 00005AE3 		cmp	r10, #0	@ _52,
 3035              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 3036              		.loc 1 197 26 view .LVU827
 3037 0d40 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3038              	.LVL237:
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3039              		.loc 1 200 21 is_stmt 1 view .LVU828
 201:armwave.c     ****                     xx = (nsub >> 8);
 3040              		.loc 1 201 21 view .LVU829
 202:armwave.c     **** 
 3041              		.loc 1 202 21 view .LVU830
 3042              	@ armwave.c:202:                     xx = (nsub >> 8);
 202:armwave.c     **** 
 3043              		.loc 1 202 32 is_stmt 0 view .LVU831
 3044 0d44 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.131,
 3045              	.LVL238:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3046              		.loc 1 204 21 is_stmt 1 view .LVU832
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3047              		.loc 1 204 21 is_stmt 0 view .LVU833
 3048 0d48 DDFFFF0A 		beq	.L194		@,
 3049              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3050              		.loc 1 204 29 view .LVU834
 3051 0d4c 00C0A0E3 		mov	ip, #0	@ row,
 3052              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3053              		.loc 1 204 38 view .LVU835
 3054 0d50 0CE0A0E1 		mov	lr, ip	@ _56, row
 3055              	.LVL239:
 3056              	.L195:
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3057              		.loc 1 205 25 is_stmt 1 view .LVU836
 206:armwave.c     ****                     }
 3058              		.loc 1 206 25 view .LVU837
 3059              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3060              		.loc 1 205 52 is_stmt 0 view .LVU838
 3061 0d54 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3062              	@ armwave.c:205:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3063              		.loc 1 205 45 view .LVU839
 3064 0d58 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3065              	.LVL240:
 3066              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3067              		.loc 1 204 67 view .LVU840
 3068 0d5c 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3069              	.LVL241:
 3070              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 3071              		.loc 1 206 43 view .LVU841
 3072 0d60 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3073              	.LVL242:
 3074              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3075              		.loc 1 204 67 view .LVU842
 3076 0d64 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3077              	.LVL243:
 3078              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3079              		.loc 1 204 38 view .LVU843
 3080 0d68 0CE0A0E1 		mov	lr, ip	@ _56, row
 3081              	@ armwave.c:206:                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 3082              		.loc 1 206 53 view .LVU844
 3083 0d6c 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3084              	@ armwave.c:204:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3085              		.loc 1 204 21 view .LVU845
 3086 0d70 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3087              	.LVL244:
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3088              		.loc 1 204 21 view .LVU846
 3089 0d74 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3090 0d78 F5FFFF3A 		bcc	.L195		@,
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3091              		.loc 1 204 21 view .LVU847
 3092 0d7c D0FFFFEA 		b	.L194		@
 3093              	.LVL245:
 3094              	.L212:
 171:armwave.c     **** 
 3095              		.loc 1 171 5 is_stmt 1 view .LVU848
 3096 0d80 10309FE5 		ldr	r3, .L214+4	@,
 3097 0d84 AB20A0E3 		mov	r2, #171	@,
 3098 0d88 0C109FE5 		ldr	r1, .L214+8	@,
 3099 0d8c 0C009FE5 		ldr	r0, .L214+12	@,
 3100              	.LVL246:
 171:armwave.c     **** 
 3101              		.loc 1 171 5 is_stmt 0 view .LVU849
 3102 0d90 FEFFFFEB 		bl	__assert_fail		@
 3103              	.LVL247:
 3104              	.L215:
 3105              		.align	2
 3106              	.L214:
 3107 0d94 00000000 		.word	g_armwave_state
 3108 0d98 18000000 		.word	.LANCHOR0+24
 3109 0d9c 48000000 		.word	.LC4
 3110 0da0 54000000 		.word	.LC5
 3111              	.LBE34:
 3112              	.LBE36:
 3113              		.cfi_endproc
 3114              	.LFE73:
 3116              		.align	2
 3117              		.global	armwave_test_buffer_alloc
 3118              		.syntax unified
 3119              		.arm
 3120              		.fpu vfp
 3122              	armwave_test_buffer_alloc:
 3123              	.LFB74:
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_buffer_alloc()
 434:armwave.c     **** {
 3124              		.loc 1 434 1 is_stmt 1 view -0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 435:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3128              		.loc 1 435 5 view .LVU851
 3129              	@ armwave.c:434: {
 434:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3130              		.loc 1 434 1 is_stmt 0 view .LVU852
 3131 0da4 70402DE9 		push	{r4, r5, r6, lr}	@
 3132              		.cfi_def_cfa_offset 16
 3133              		.cfi_offset 4, -16
 3134              		.cfi_offset 5, -12
 3135              		.cfi_offset 6, -8
 3136              		.cfi_offset 14, -4
 3137              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 3138              		.loc 1 435 23 view .LVU853
 3139 0da8 50409FE5 		ldr	r4, .L223	@ tmp130,
 3140 0dac 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3141              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 3142              		.loc 1 435 7 view .LVU854
 3143 0db0 000050E3 		cmp	r0, #0	@ _1,
 3144 0db4 0000000A 		beq	.L217		@,
 436:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3145              		.loc 1 436 9 is_stmt 1 view .LVU855
 3146 0db8 FEFFFFEB 		bl	free		@
 3147              	.LVL248:
 3148              	.L217:
 437:armwave.c     ****     }
 438:armwave.c     **** 
 439:armwave.c     ****     printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwave_
 3149              		.loc 1 439 5 view .LVU856
 3150 0dbc 2C2094E5 		ldr	r2, [r4, #44]	@, g_armwave_state.waves_max
 3151 0dc0 3C1094E5 		ldr	r1, [r4, #60]	@, g_armwave_state.wave_length
 3152 0dc4 38009FE5 		ldr	r0, .L223+4	@,
 3153 0dc8 FEFFFFEB 		bl	printf		@
 3154              	.LVL249:
 440:armwave.c     **** 
 441:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3155              		.loc 1 441 5 view .LVU857
 3156              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3157              		.loc 1 441 40 is_stmt 0 view .LVU858
 3158 0dcc 3C3094E5 		ldr	r3, [r4, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3159 0dd0 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3160 0dd4 0110A0E3 		mov	r1, #1	@,
 3161 0dd8 950305E0 		mul	r5, r5, r3	@ _6, g_armwave_state.waves_max, g_armwave_state.wave_length
 3162 0ddc 0500A0E1 		mov	r0, r5	@, _6
 3163 0de0 FEFFFFEB 		bl	calloc		@
 3164              	.LVL250:
 3165              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 442:armwave.c     **** 
 443:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3166              		.loc 1 443 7 view .LVU859
 3167 0de4 000050E3 		cmp	r0, #0	@ tmp127,
 3168              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 3169              		.loc 1 441 38 view .LVU860
 3170 0de8 180084E5 		str	r0, [r4, #24]	@ tmp127, g_armwave_state.test_wave_buffer
 3171              		.loc 1 443 5 is_stmt 1 view .LVU861
 3172              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 3173              		.loc 1 443 7 is_stmt 0 view .LVU862
 3174 0dec 7080BD18 		popne	{r4, r5, r6, pc}	@
 444:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3175              		.loc 1 444 9 is_stmt 1 view .LVU863
 3176 0df0 0510A0E1 		mov	r1, r5	@, _6
 3177 0df4 0C009FE5 		ldr	r0, .L223+8	@,
 3178              	@ armwave.c:447: }
 445:armwave.c     ****         return;
 446:armwave.c     ****     }
 447:armwave.c     **** }
 3179              		.loc 1 447 1 is_stmt 0 view .LVU864
 3180 0df8 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3181              		.cfi_restore 14
 3182              		.cfi_restore 6
 3183              		.cfi_restore 5
 3184              		.cfi_restore 4
 3185              		.cfi_def_cfa_offset 0
 3186              	@ armwave.c:444:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 444:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3187              		.loc 1 444 9 view .LVU865
 3188 0dfc FEFFFFEA 		b	printf		@
 3189              	.LVL251:
 3190              	.L224:
 3191              		.align	2
 3192              	.L223:
 3193 0e00 00000000 		.word	g_armwave_state
 3194 0e04 F4010000 		.word	.LC20
 3195 0e08 24020000 		.word	.LC21
 3196              		.cfi_endproc
 3197              	.LFE74:
 3199              		.align	2
 3200              		.global	armwave_fill_pixbuf_into_pybuffer
 3201              		.syntax unified
 3202              		.arm
 3203              		.fpu vfp
 3205              	armwave_fill_pixbuf_into_pybuffer:
 3206              	.LVL252:
 3207              	.LFB75:
 448:armwave.c     **** 
 449:armwave.c     **** /*
 450:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 451:armwave.c     ****  */
 452:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 453:armwave.c     **** {
 3208              		.loc 1 453 1 is_stmt 1 view -0
 3209              		.cfi_startproc
 3210              		@ args = 0, pretend = 0, frame = 48
 3211              		@ frame_needed = 0, uses_anonymous_args = 0
 454:armwave.c     ****     Py_buffer buffer;
 3212              		.loc 1 454 5 view .LVU867
 455:armwave.c     ****     int ret;
 3213              		.loc 1 455 5 view .LVU868
 456:armwave.c     **** 
 457:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3214              		.loc 1 457 5 view .LVU869
 3215              	@ armwave.c:453: {
 453:armwave.c     ****     Py_buffer buffer;
 3216              		.loc 1 453 1 is_stmt 0 view .LVU870
 3217 0e0c 10402DE9 		push	{r4, lr}	@
 3218              		.cfi_def_cfa_offset 8
 3219              		.cfi_offset 4, -8
 3220              		.cfi_offset 14, -4
 3221 0e10 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3222 0e14 30D04DE2 		sub	sp, sp, #48	@,,
 3223              		.cfi_def_cfa_offset 56
 3224              	@ armwave.c:457:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3225              		.loc 1 457 5 view .LVU871
 3226 0e18 64009FE5 		ldr	r0, .L229	@,
 3227              	.LVL253:
 3228              		.loc 1 457 5 view .LVU872
 3229 0e1c FEFFFFEB 		bl	puts		@
 3230              	.LVL254:
 458:armwave.c     **** 
 459:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3231              		.loc 1 459 5 is_stmt 1 view .LVU873
 3232              	@ armwave.c:459:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3233              		.loc 1 459 11 is_stmt 0 view .LVU874
 3234 0e20 0400A0E1 		mov	r0, r4	@, buf_obj
 3235 0e24 04108DE2 		add	r1, sp, #4	@ tmp128,,
 3236 0e28 0120A0E3 		mov	r2, #1	@,
 3237 0e2c FEFFFFEB 		bl	PyObject_GetBuffer		@
 3238              	.LVL255:
 460:armwave.c     **** 
 461:armwave.c     ****     if(ret != 0) {
 3239              		.loc 1 461 5 is_stmt 1 view .LVU875
 3240              	@ armwave.c:461:     if(ret != 0) {
 3241              		.loc 1 461 7 is_stmt 0 view .LVU876
 3242 0e30 000050E3 		cmp	r0, #0	@,
 3243 0e34 0900001A 		bne	.L228		@,
 462:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 463:armwave.c     ****         Py_RETURN_FALSE;
 464:armwave.c     ****     }
 465:armwave.c     **** 
 466:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 467:armwave.c     **** 
 468:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3244              		.loc 1 468 5 is_stmt 1 view .LVU877
 3245 0e38 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3246              	.LVL256:
 3247              		.loc 1 468 5 is_stmt 0 view .LVU878
 3248 0e3c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3249              	.LVL257:
 469:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3250              		.loc 1 469 5 is_stmt 1 view .LVU879
 3251 0e40 40009FE5 		ldr	r0, .L229+4	@,
 3252 0e44 FEFFFFEB 		bl	puts		@
 3253              	.LVL258:
 470:armwave.c     **** 
 471:armwave.c     ****     PyBuffer_Release(&buffer);
 3254              		.loc 1 471 5 view .LVU880
 3255 0e48 04008DE2 		add	r0, sp, #4	@ tmp129,,
 3256 0e4c FEFFFFEB 		bl	PyBuffer_Release		@
 3257              	.LVL259:
 472:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3258              		.loc 1 472 5 view .LVU881
 3259 0e50 34009FE5 		ldr	r0, .L229+8	@,
 3260 0e54 FEFFFFEB 		bl	puts		@
 3261              	.LVL260:
 3262              	@ armwave.c:473: }
 473:armwave.c     **** }
 3263              		.loc 1 473 1 is_stmt 0 view .LVU882
 3264 0e58 30D08DE2 		add	sp, sp, #48	@,,
 3265              		.cfi_remember_state
 3266              		.cfi_def_cfa_offset 8
 3267              		@ sp needed	@
 3268 0e5c 1080BDE8 		pop	{r4, pc}	@
 3269              	.LVL261:
 3270              	.L228:
 3271              		.cfi_restore_state
 462:armwave.c     ****         Py_RETURN_FALSE;
 3272              		.loc 1 462 9 is_stmt 1 view .LVU883
 3273 0e60 28009FE5 		ldr	r0, .L229+12	@,
 3274              	.LVL262:
 462:armwave.c     ****         Py_RETURN_FALSE;
 3275              		.loc 1 462 9 is_stmt 0 view .LVU884
 3276 0e64 FEFFFFEB 		bl	puts		@
 3277              	.LVL263:
 463:armwave.c     ****     }
 3278              		.loc 1 463 9 is_stmt 1 view .LVU885
 3279              	.LBB37:
 3280              	.LBI37:
 3281              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3282              		.loc 2 456 20 view .LVU886
 3283              	.LBB38:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3284              		.loc 2 458 21 view .LVU887
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3285              		.loc 2 459 5 view .LVU888
 3286              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3287              		.loc 2 459 18 is_stmt 0 view .LVU889
 3288 0e68 24309FE5 		ldr	r3, .L229+16	@ tmp119,
 3289              	.LBE38:
 3290              	.LBE37:
 3291              	@ armwave.c:463:         Py_RETURN_FALSE;
 463:armwave.c     ****     }
 3292              		.loc 1 463 9 view .LVU890
 3293 0e6c 0300A0E1 		mov	r0, r3	@ <retval>, tmp119
 3294              	.LBB40:
 3295              	.LBB39:
 3296              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3297              		.loc 2 459 18 view .LVU891
 3298 0e70 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct], MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3299 0e74 012082E2 		add	r2, r2, #1	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3300 0e78 002083E5 		str	r2, [r3]	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3301              	.LBE39:
 3302              	.LBE40:
 3303              	@ armwave.c:473: }
 3304              		.loc 1 473 1 view .LVU892
 3305 0e7c 30D08DE2 		add	sp, sp, #48	@,,
 3306              		.cfi_def_cfa_offset 8
 3307              		@ sp needed	@
 3308 0e80 1080BDE8 		pop	{r4, pc}	@
 3309              	.LVL264:
 3310              	.L230:
 3311              		.loc 1 473 1 view .LVU893
 3312              		.align	2
 3313              	.L229:
 3314 0e84 70020000 		.word	.LC22
 3315 0e88 F0020000 		.word	.LC24
 3316 0e8c 24030000 		.word	.LC25
 3317 0e90 9C020000 		.word	.LC23
 3318 0e94 00000000 		.word	_Py_FalseStruct
 3319              		.cfi_endproc
 3320              	.LFE75:
 3322              		.align	2
 3323              		.global	armwave_test_create_am_sine
 3324              		.syntax unified
 3325              		.arm
 3326              		.fpu vfp
 3328              	armwave_test_create_am_sine:
 3329              	.LVL265:
 3330              	.LFB76:
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Make a test AM waveform for render tests.
 477:armwave.c     ****  *
 478:armwave.c     ****  * @param   mod                 modulation depth
 479:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 480:armwave.c     ****  */
 481:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 482:armwave.c     **** {
 3331              		.loc 1 482 1 is_stmt 1 view -0
 3332              		.cfi_startproc
 3333              		@ args = 0, pretend = 0, frame = 8
 3334              		@ frame_needed = 0, uses_anonymous_args = 0
 483:armwave.c     ****     float v, noise, xnoise, mod_val;
 3335              		.loc 1 483 5 view .LVU895
 484:armwave.c     ****     int w, x;
 3336              		.loc 1 484 5 view .LVU896
 485:armwave.c     **** 
 486:armwave.c     ****     armwave_test_buffer_alloc();
 3337              		.loc 1 486 5 view .LVU897
 3338              	.LBB43:
 3339              	.LBI43:
 433:armwave.c     **** {
 3340              		.loc 1 433 6 view .LVU898
 3341              	.LBB44:
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3342              		.loc 1 435 5 view .LVU899
 3343              	.LBE44:
 3344              	.LBE43:
 3345              	@ armwave.c:482: {
 482:armwave.c     ****     float v, noise, xnoise, mod_val;
 3346              		.loc 1 482 1 is_stmt 0 view .LVU900
 3347 0e98 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3348              		.cfi_def_cfa_offset 20
 3349              		.cfi_offset 4, -20
 3350              		.cfi_offset 5, -16
 3351              		.cfi_offset 6, -12
 3352              		.cfi_offset 7, -8
 3353              		.cfi_offset 14, -4
 3354 0e9c 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3355              		.cfi_def_cfa_offset 76
 3356              		.cfi_offset 80, -76
 3357              		.cfi_offset 81, -72
 3358              		.cfi_offset 82, -68
 3359              		.cfi_offset 83, -64
 3360              		.cfi_offset 84, -60
 3361              		.cfi_offset 85, -56
 3362              		.cfi_offset 86, -52
 3363              		.cfi_offset 87, -48
 3364              		.cfi_offset 88, -44
 3365              		.cfi_offset 89, -40
 3366              		.cfi_offset 90, -36
 3367              		.cfi_offset 91, -32
 3368              		.cfi_offset 92, -28
 3369              		.cfi_offset 93, -24
 3370              	.LBB49:
 3371              	.LBB45:
 3372              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3373              		.loc 1 435 23 view .LVU901
 3374 0ea0 BC519FE5 		ldr	r5, .L262+32	@ tmp233,
 3375              	.LBE45:
 3376              	.LBE49:
 3377              	@ armwave.c:482: {
 482:armwave.c     ****     float v, noise, xnoise, mod_val;
 3378              		.loc 1 482 1 view .LVU902
 3379 0ea4 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3380 0ea8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3381              	.LBB50:
 3382              	.LBB46:
 3383              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3384              		.loc 1 435 23 view .LVU903
 3385 0eac 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3386              	.LBE46:
 3387              	.LBE50:
 3388              	@ armwave.c:482: {
 482:armwave.c     ****     float v, noise, xnoise, mod_val;
 3389              		.loc 1 482 1 view .LVU904
 3390 0eb0 0CD04DE2 		sub	sp, sp, #12	@,,
 3391              		.cfi_def_cfa_offset 88
 3392              	.LBB51:
 3393              	.LBB47:
 3394              	@ armwave.c:435:     if(g_armwave_state.test_wave_buffer != NULL) {
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3395              		.loc 1 435 7 view .LVU905
 3396 0eb4 000050E3 		cmp	r0, #0	@ _63,
 3397 0eb8 0000000A 		beq	.L232		@,
 436:armwave.c     ****     }
 3398              		.loc 1 436 9 is_stmt 1 view .LVU906
 3399 0ebc FEFFFFEB 		bl	free		@
 3400              	.LVL266:
 3401              	.L232:
 439:armwave.c     **** 
 3402              		.loc 1 439 5 view .LVU907
 3403 0ec0 2C2095E5 		ldr	r2, [r5, #44]	@, g_armwave_state.waves_max
 3404 0ec4 3C1095E5 		ldr	r1, [r5, #60]	@, g_armwave_state.wave_length
 3405 0ec8 98019FE5 		ldr	r0, .L262+36	@,
 3406 0ecc FEFFFFEB 		bl	printf		@
 3407              	.LVL267:
 441:armwave.c     **** 
 3408              		.loc 1 441 5 view .LVU908
 3409              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 3410              		.loc 1 441 40 is_stmt 0 view .LVU909
 3411 0ed0 3C3095E5 		ldr	r3, [r5, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3412 0ed4 2C4095E5 		ldr	r4, [r5, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3413 0ed8 0110A0E3 		mov	r1, #1	@,
 3414 0edc 940304E0 		mul	r4, r4, r3	@ _68, g_armwave_state.waves_max, g_armwave_state.wave_length
 3415 0ee0 0400A0E1 		mov	r0, r4	@, _68
 3416 0ee4 FEFFFFEB 		bl	calloc		@
 3417              	.LVL268:
 3418              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3419              		.loc 1 443 7 view .LVU910
 3420 0ee8 000050E3 		cmp	r0, #0	@ tmp177,
 3421              	@ armwave.c:441:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 441:armwave.c     **** 
 3422              		.loc 1 441 38 view .LVU911
 3423 0eec 180085E5 		str	r0, [r5, #24]	@ tmp177, g_armwave_state.test_wave_buffer
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3424              		.loc 1 443 5 is_stmt 1 view .LVU912
 3425              	@ armwave.c:443:     if(g_armwave_state.test_wave_buffer == NULL) {
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3426              		.loc 1 443 7 is_stmt 0 view .LVU913
 3427 0ef0 4F00000A 		beq	.L261		@,
 3428              	.L233:
 3429              	.LVL269:
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3430              		.loc 1 443 7 view .LVU914
 3431              	.LBE47:
 3432              	.LBE51:
 3433              	@ armwave.c:488:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     **** 
 488:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3434              		.loc 1 488 35 discriminator 1 view .LVU915
 3435 0ef4 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3436              	@ armwave.c:488:     for(w = 0; w < g_armwave_state.waves; w++) {
 3437              		.loc 1 488 5 discriminator 1 view .LVU916
 3438 0ef8 000052E3 		cmp	r2, #0	@ prephitmp_80,
 3439 0efc 4900000A 		beq	.L231		@,
 3440              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 489:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3441              		.loc 1 489 37 view .LVU917
 3442 0f00 4FDADFED 		vldr.32	s27, .L262	@ tmp184,
 3443              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3444              		.loc 1 489 17 view .LVU918
 3445 0f04 4FDA9FED 		vldr.32	s26, .L262+4	@ tmp186,
 3446              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 490:armwave.c     ****         //mod = 1.0f;
 491:armwave.c     **** 
 492:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****             noise *= noise;
 495:armwave.c     ****             noise *= noise;
 496:armwave.c     ****             noise *= noise;
 497:armwave.c     **** 
 498:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 499:armwave.c     ****                 noise = -noise;
 500:armwave.c     **** 
 501:armwave.c     ****             noise += 1.0f;
 502:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 504:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3447              		.loc 1 504 41 view .LVU919
 3448 0f08 4F8A9FED 		vldr.32	s16, .L262+8	@ tmp236,
 3449              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 505:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 506:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 + (v * 127), 0), 
 3450              		.loc 1 506 69 view .LVU920
 3451 0f0c 4FCA9FED 		vldr.32	s24, .L262+12	@ tmp237,
 3452 0f10 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3453 0f14 50719FE5 		ldr	r7, .L262+40	@ tmp235,
 3454              	@ armwave.c:488:     for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3455              		.loc 1 488 5 view .LVU921
 3456 0f18 0060A0E3 		mov	r6, #0	@ w,
 3457              	.LVL270:
 3458              	.L241:
 489:armwave.c     ****         //mod = 1.0f;
 3459              		.loc 1 489 9 is_stmt 1 view .LVU922
 3460              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 489:armwave.c     ****         //mod = 1.0f;
 3461              		.loc 1 489 28 is_stmt 0 view .LVU923
 3462 0f1c 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3463              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 489:armwave.c     ****         //mod = 1.0f;
 3464              		.loc 1 489 17 view .LVU924
 3465 0f20 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp186
 3466              	@ armwave.c:492:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3467              		.loc 1 492 9 view .LVU925
 3468 0f24 000053E3 		cmp	r3, #0	@ prephitmp_96,
 3469              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 489:armwave.c     ****         //mod = 1.0f;
 3470              		.loc 1 489 28 view .LVU926
 3471 0f28 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, w
 3472              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 489:armwave.c     ****         //mod = 1.0f;
 3473              		.loc 1 489 37 view .LVU927
 3474 0f2c AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp183, tmp182, tmp184
 3475              	@ armwave.c:489:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 489:armwave.c     ****         //mod = 1.0f;
 3476              		.loc 1 489 17 view .LVU928
 3477 0f30 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp183, mod
 3478              	.LVL271:
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3479              		.loc 1 492 9 is_stmt 1 view .LVU929
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3480              		.loc 1 492 9 is_stmt 0 view .LVU930
 3481 0f34 3800000A 		beq	.L235		@,
 3482 0f38 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp231, mod_val
 3483              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3484              		.loc 1 504 29 view .LVU931
 3485 0f3c 44BA9FED 		vldr.32	s22, .L262+16	@ tmp198,
 3486              	@ armwave.c:502:             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 3487              		.loc 1 502 20 view .LVU932
 3488 0f40 44AADFED 		vldr.32	s21, .L262+20	@ tmp204,
 3489              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3490              		.loc 1 506 71 view .LVU933
 3491 0f44 44AA9FED 		vldr.32	s20, .L262+24	@ tmp215,
 3492 0f48 448ADFED 		vldr.32	s17, .L262+28	@ tmp216,
 3493              	@ armwave.c:492:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3494              		.loc 1 492 15 view .LVU934
 3495 0f4c 0040A0E3 		mov	r4, #0	@ x,
 3496              	.LVL272:
 3497              	.L240:
 493:armwave.c     ****             noise *= noise;
 3498              		.loc 1 493 13 is_stmt 1 view .LVU935
 3499              	@ armwave.c:493:             noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****             noise *= noise;
 3500              		.loc 1 493 24 is_stmt 0 view .LVU936
 3501 0f50 FEFFFFEB 		bl	rand		@
 3502              	.LVL273:
 3503              	@ armwave.c:493:             noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****             noise *= noise;
 3504              		.loc 1 493 31 view .LVU937
 3505 0f54 7000FFE6 		uxth	r0, r0	@ tmp187,
 3506              	@ armwave.c:493:             noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****             noise *= noise;
 3507              		.loc 1 493 41 view .LVU938
 3508 0f58 900A07EE 		vmov	s15, r0	@ int	@ tmp187, tmp187
 3509 0f5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, tmp187
 3510              	@ armwave.c:493:             noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****             noise *= noise;
 3511              		.loc 1 493 20 view .LVU939
 3512 0f60 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp189, noise_fraction
 3513              	.LVL274:
 494:armwave.c     ****             noise *= noise;
 3514              		.loc 1 494 13 is_stmt 1 view .LVU940
 3515              	@ armwave.c:494:             noise *= noise;
 494:armwave.c     ****             noise *= noise;
 3516              		.loc 1 494 19 is_stmt 0 view .LVU941
 3517 0f64 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3518              	.LVL275:
 495:armwave.c     ****             noise *= noise;
 3519              		.loc 1 495 13 is_stmt 1 view .LVU942
 3520              	@ armwave.c:495:             noise *= noise;
 495:armwave.c     ****             noise *= noise;
 3521              		.loc 1 495 19 is_stmt 0 view .LVU943
 3522 0f68 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3523              	.LVL276:
 496:armwave.c     **** 
 3524              		.loc 1 496 13 is_stmt 1 view .LVU944
 3525              	@ armwave.c:496:             noise *= noise;
 496:armwave.c     **** 
 3526              		.loc 1 496 19 is_stmt 0 view .LVU945
 3527 0f6c A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3528              	.LVL277:
 498:armwave.c     ****                 noise = -noise;
 3529              		.loc 1 498 13 is_stmt 1 view .LVU946
 3530              	@ armwave.c:498:             if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                 noise = -noise;
 3531              		.loc 1 498 17 is_stmt 0 view .LVU947
 3532 0f70 FEFFFFEB 		bl	rand		@
 3533              	.LVL278:
 499:armwave.c     **** 
 3534              		.loc 1 499 17 is_stmt 1 view .LVU948
 3535              	@ armwave.c:498:             if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                 noise = -noise;
 3536              		.loc 1 498 15 is_stmt 0 view .LVU949
 3537 0f74 020910E3 		tst	r0, #32768	@,
 3538              	@ armwave.c:499:                 noise = -noise;
 499:armwave.c     **** 
 3539              		.loc 1 499 23 view .LVU950
 3540 0f78 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3541              	.LVL279:
 501:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3542              		.loc 1 501 13 is_stmt 1 view .LVU951
 502:armwave.c     **** 
 3543              		.loc 1 502 13 view .LVU952
 3544              	@ armwave.c:502:             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 3545              		.loc 1 502 23 is_stmt 0 view .LVU953
 3546 0f7c FEFFFFEB 		bl	rand		@
 3547              	.LVL280:
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3548              		.loc 1 504 13 is_stmt 1 view .LVU954
 3549              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3550              		.loc 1 504 41 is_stmt 0 view .LVU955
 3551 0f80 0F7A95ED 		vldr.32	s14, [r5, #60]	@ int	@ tmp243, g_armwave_state.wave_length
 3552              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3553              		.loc 1 504 29 view .LVU956
 3554 0f84 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3555              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3556              		.loc 1 504 41 view .LVU957
 3557 0f88 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp192, tmp243
 3558              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3559              		.loc 1 504 29 view .LVU958
 3560 0f8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, x
 3561              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3562              		.loc 1 504 41 view .LVU959
 3563 0f90 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp194, tmp236, tmp192
 3564              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3565              		.loc 1 504 29 view .LVU960
 3566 0f94 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp197, tmp196, tmp198
 3567              	@ armwave.c:502:             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 3568              		.loc 1 502 30 view .LVU961
 3569 0f98 7000FFE6 		uxth	r0, r0	@ tmp200,
 3570              	.LVL281:
 3571              	@ armwave.c:502:             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 3572              		.loc 1 502 40 view .LVU962
 3573 0f9c 100A07EE 		vmov	s14, r0	@ int	@ tmp200, tmp200
 3574 0fa0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp202, tmp200
 3575              	@ armwave.c:502:             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 3576              		.loc 1 502 20 view .LVU963
 3577 0fa4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp202, tmp204
 3578              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3579              		.loc 1 504 73 view .LVU964
 3580 0fa8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp205, tmp194, tmp197
 3581              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3582              		.loc 1 504 18 view .LVU965
 3583 0fac C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 3584 0fb0 FEFFFFEB 		bl	sin		@
 3585              	.LVL282:
 3586              		.loc 1 506 13 is_stmt 1 view .LVU966
 3587              	@ armwave.c:501:             noise += 1.0f;
 501:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3588              		.loc 1 501 19 is_stmt 0 view .LVU967
 3589 0fb4 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp236
 3590              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3591              		.loc 1 506 69 view .LVU968
 3592 0fb8 0020A0E3 		mov	r2, #0	@ iftmp.23_39,
 3593              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3594              		.loc 1 504 94 view .LVU969
 3595 0fbc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp211, noise
 3596              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3597              		.loc 1 504 83 view .LVU970
 3598 0fc0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp208, tmp231,
 3599              	.LVL283:
 3600              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3601              		.loc 1 504 94 view .LVU971
 3602 0fc4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp212, tmp208, tmp211
 3603              	@ armwave.c:504:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3604              		.loc 1 504 15 view .LVU972
 3605 0fc8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp212
 3606              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3607              		.loc 1 506 71 view .LVU973
 3608 0fcc 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp216
 3609 0fd0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp215
 3610 0fd4 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3611 0fd8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3612 0fdc 050000DA 		ble	.L237		@,
 3613              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3614              		.loc 1 506 69 discriminator 1 view .LVU974
 3615 0fe0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp237
 3616 0fe4 FF20A0E3 		mov	r2, #255	@ iftmp.23_39,
 3617 0fe8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3618 0fec E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp220, _26
 3619 0ff0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp220, %sfp
 3620 0ff4 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_39, %sfp
 3621              	.L237:
 3622              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3623              		.loc 1 506 37 discriminator 12 view .LVU975
 3624 0ff8 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3625              	@ armwave.c:506:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = MIN(MAX(128 
 3626              		.loc 1 506 69 discriminator 12 view .LVU976
 3627 0ffc 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3628 1000 931623E0 		mla	r3, r3, r6, r1	@ tmp226, g_armwave_state.wave_stride, w, test_wave_buffer
 3629 1004 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.23_39, *_31
 3630              	@ armwave.c:492:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3631              		.loc 1 492 39 discriminator 12 view .LVU977
 3632 1008 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3633              	@ armwave.c:492:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3634              		.loc 1 492 54 discriminator 12 view .LVU978
 3635 100c 014084E2 		add	r4, r4, #1	@ x, x,
 3636              	.LVL284:
 3637              	@ armwave.c:492:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3638              		.loc 1 492 9 discriminator 12 view .LVU979
 3639 1010 040053E1 		cmp	r3, r4	@ prephitmp_96, x
 3640 1014 CDFFFF8A 		bhi	.L240		@,
 3641 1018 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3642              	.LVL285:
 3643              	.L235:
 3644              	@ armwave.c:488:     for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3645              		.loc 1 488 44 discriminator 2 view .LVU980
 3646 101c 016086E2 		add	r6, r6, #1	@ w, w,
 3647              	.LVL286:
 3648              	@ armwave.c:488:     for(w = 0; w < g_armwave_state.waves; w++) {
 488:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3649              		.loc 1 488 5 discriminator 2 view .LVU981
 3650 1020 020056E1 		cmp	r6, r2	@ w, prephitmp_80
 3651 1024 BCFFFF3A 		bcc	.L241		@,
 3652              	.LVL287:
 3653              	.L231:
 3654              	@ armwave.c:509: }
 507:armwave.c     ****         }
 508:armwave.c     ****     }
 509:armwave.c     **** }
 3655              		.loc 1 509 1 view .LVU982
 3656 1028 0CD08DE2 		add	sp, sp, #12	@,,
 3657              		.cfi_remember_state
 3658              		.cfi_def_cfa_offset 76
 3659              		@ sp needed	@
 3660 102c 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3661              		.cfi_restore 92
 3662              		.cfi_restore 93
 3663              		.cfi_restore 90
 3664              		.cfi_restore 91
 3665              		.cfi_restore 88
 3666              		.cfi_restore 89
 3667              		.cfi_restore 86
 3668              		.cfi_restore 87
 3669              		.cfi_restore 84
 3670              		.cfi_restore 85
 3671              		.cfi_restore 82
 3672              		.cfi_restore 83
 3673              		.cfi_restore 80
 3674              		.cfi_restore 81
 3675              		.cfi_def_cfa_offset 20
 3676 1030 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 3677              	.L261:
 3678              		.cfi_restore_state
 3679              	.LBB52:
 3680              	.LBB48:
 444:armwave.c     ****         return;
 3681              		.loc 1 444 9 is_stmt 1 view .LVU983
 3682 1034 0410A0E1 		mov	r1, r4	@, _68
 3683 1038 30009FE5 		ldr	r0, .L262+44	@,
 3684 103c FEFFFFEB 		bl	printf		@
 3685              	.LVL288:
 445:armwave.c     ****     }
 3686              		.loc 1 445 9 view .LVU984
 3687 1040 ABFFFFEA 		b	.L233		@
 3688              	.L263:
 3689              		.align	2
 3690              	.L262:
 3691 1044 0000803C 		.word	1015021568
 3692 1048 0000003F 		.word	1056964608
 3693 104c 0000803F 		.word	1065353216
 3694 1050 00007F43 		.word	1132396544
 3695 1054 C3F5C840 		.word	1086911939
 3696 1058 38FFC74A 		.word	1254620984
 3697 105c 0000FE42 		.word	1123942400
 3698 1060 00000043 		.word	1124073472
 3699 1064 00000000 		.word	g_armwave_state
 3700 1068 F4010000 		.word	.LC20
 3701 106c 00000000 		.word	test_wave_buffer
 3702 1070 24020000 		.word	.LC21
 3703              	.LBE48:
 3704              	.LBE52:
 3705              		.cfi_endproc
 3706              	.LFE76:
 3708              		.align	2
 3709              		.global	armwave_test_create_square
 3710              		.syntax unified
 3711              		.arm
 3712              		.fpu vfp
 3714              	armwave_test_create_square:
 3715              	.LVL289:
 3716              	.LFB77:
 510:armwave.c     **** 
 511:armwave.c     **** /*
 512:armwave.c     ****  * Make a test square waveform.
 513:armwave.c     ****  *
 514:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 515:armwave.c     ****  */
 516:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 517:armwave.c     **** {
 3717              		.loc 1 517 1 view -0
 3718              		.cfi_startproc
 3719              		@ args = 0, pretend = 0, frame = 8
 3720              		@ frame_needed = 0, uses_anonymous_args = 0
 518:armwave.c     ****     uint8_t v;
 3721              		.loc 1 518 5 view .LVU986
 519:armwave.c     ****     float noise, xnoise;
 3722              		.loc 1 519 5 view .LVU987
 520:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3723              		.loc 1 520 5 view .LVU988
 521:armwave.c     ****     int w, x;
 3724              		.loc 1 521 5 view .LVU989
 522:armwave.c     **** 
 523:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3725              		.loc 1 523 5 view .LVU990
 3726              	@ armwave.c:517: {
 517:armwave.c     ****     uint8_t v;
 3727              		.loc 1 517 1 is_stmt 0 view .LVU991
 3728 1074 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 3729              		.cfi_def_cfa_offset 20
 3730              		.cfi_offset 4, -20
 3731              		.cfi_offset 5, -16
 3732              		.cfi_offset 6, -12
 3733              		.cfi_offset 7, -8
 3734              		.cfi_offset 14, -4
 3735 1078 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3736              		.cfi_def_cfa_offset 60
 3737              		.cfi_offset 80, -60
 3738              		.cfi_offset 81, -56
 3739              		.cfi_offset 82, -52
 3740              		.cfi_offset 83, -48
 3741              		.cfi_offset 84, -44
 3742              		.cfi_offset 85, -40
 3743              		.cfi_offset 86, -36
 3744              		.cfi_offset 87, -32
 3745              		.cfi_offset 88, -28
 3746              		.cfi_offset 89, -24
 3747              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 3748              		.loc 1 523 35 view .LVU992
 3749 107c 58519FE5 		ldr	r5, .L292+32	@ tmp179,
 3750 1080 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 3751              	@ armwave.c:517: {
 517:armwave.c     ****     uint8_t v;
 3752              		.loc 1 517 1 view .LVU993
 3753 1084 0CD04DE2 		sub	sp, sp, #12	@,,
 3754              		.cfi_def_cfa_offset 72
 3755              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 3756              		.loc 1 523 5 view .LVU994
 3757 1088 000052E3 		cmp	r2, #0	@ prephitmp_33,
 3758 108c 4700000A 		beq	.L264		@,
 3759 1090 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 3760              	@ armwave.c:520:     float level = 0.8f, new_level = 0.8f;
 520:armwave.c     ****     int w, x;
 3761              		.loc 1 520 11 view .LVU995
 3762 1094 48CA9FED 		vldr.32	s24, .L292	@ level,
 3763              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 524:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 528:armwave.c     ****             noise *= noise;
 529:armwave.c     **** 
 530:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 531:armwave.c     ****                 noise = -noise;
 532:armwave.c     **** 
 533:armwave.c     ****             //noise += 1.0f;
 534:armwave.c     **** 
 535:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 3764              		.loc 1 535 49 view .LVU996
 3765 1098 48AA9FED 		vldr.32	s20, .L292+4	@ tmp188,
 3766              	@ armwave.c:540:                 new_level = 0.2f;
 536:armwave.c     ****                 new_level = 0.2f;
 537:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 538:armwave.c     ****                 new_level = 0.8f;
 539:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 540:armwave.c     ****                 new_level = 0.2f;
 3767              		.loc 1 540 27 view .LVU997
 3768 109c 48AADFED 		vldr.32	s21, .L292+8	@ new_level,
 3769              	@ armwave.c:539:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 539:armwave.c     ****                 new_level = 0.2f;
 3770              		.loc 1 539 56 view .LVU998
 3771 10a0 488ADFED 		vldr.32	s17, .L292+12	@ tmp190,
 3772 10a4 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 3773 10a8 30719FE5 		ldr	r7, .L292+36	@ tmp187,
 3774              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3775              		.loc 1 523 11 view .LVU999
 3776 10ac 0060A0E3 		mov	r6, #0	@ w,
 3777              	.LVL290:
 3778              	.L266:
 3779              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3780              		.loc 1 524 9 view .LVU1000
 3781 10b0 000053E3 		cmp	r3, #0	@ prephitmp_70,
 3782 10b4 3A00000A 		beq	.L273		@,
 3783              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3784              		.loc 1 537 56 view .LVU1001
 3785 10b8 43BA9FED 		vldr.32	s22, .L292+16	@ tmp184,
 3786              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3787              		.loc 1 538 27 view .LVU1002
 3788 10bc 3EBADFED 		vldr.32	s23, .L292	@ new_level,
 3789              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 541:armwave.c     ****             } else {
 542:armwave.c     ****                 new_level = 0.8f;
 543:armwave.c     ****             }
 544:armwave.c     **** 
 545:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3790              		.loc 1 545 29 view .LVU1003
 3791 10c0 429A9FED 		vldr.32	s18, .L292+20	@ tmp161,
 3792              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3793              		.loc 1 524 15 view .LVU1004
 3794 10c4 0040A0E3 		mov	r4, #0	@ x,
 3795              	.LVL291:
 3796              	.L272:
 525:armwave.c     ****             noise *= noise;
 3797              		.loc 1 525 13 is_stmt 1 view .LVU1005
 3798              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3799              		.loc 1 525 24 is_stmt 0 view .LVU1006
 3800 10c8 FEFFFFEB 		bl	rand		@
 3801              	.LVL292:
 3802              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3803              		.loc 1 525 31 view .LVU1007
 3804 10cc 7000FFE6 		uxth	r0, r0	@ tmp148,
 3805              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3806              		.loc 1 525 41 view .LVU1008
 3807 10d0 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 3808 10d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 3809              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3810              		.loc 1 525 20 view .LVU1009
 3811 10d8 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 3812              	.LVL293:
 526:armwave.c     ****             noise *= noise;
 3813              		.loc 1 526 13 is_stmt 1 view .LVU1010
 3814              	@ armwave.c:526:             noise *= noise;
 526:armwave.c     ****             noise *= noise;
 3815              		.loc 1 526 19 is_stmt 0 view .LVU1011
 3816 10dc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3817              	.LVL294:
 527:armwave.c     ****             noise *= noise;
 3818              		.loc 1 527 13 is_stmt 1 view .LVU1012
 3819              	@ armwave.c:527:             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 3820              		.loc 1 527 19 is_stmt 0 view .LVU1013
 3821 10e0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3822              	.LVL295:
 528:armwave.c     **** 
 3823              		.loc 1 528 13 is_stmt 1 view .LVU1014
 3824              	@ armwave.c:528:             noise *= noise;
 528:armwave.c     **** 
 3825              		.loc 1 528 19 is_stmt 0 view .LVU1015
 3826 10e4 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3827              	.LVL296:
 530:armwave.c     ****                 noise = -noise;
 3828              		.loc 1 530 13 is_stmt 1 view .LVU1016
 3829              	@ armwave.c:530:             if((rand() & 0xff) > 0x7f)
 530:armwave.c     ****                 noise = -noise;
 3830              		.loc 1 530 17 is_stmt 0 view .LVU1017
 3831 10e8 FEFFFFEB 		bl	rand		@
 3832              	.LVL297:
 3833              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3834              		.loc 1 535 18 view .LVU1018
 3835 10ec 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3836 10f0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 3837              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3838              		.loc 1 535 49 view .LVU1019
 3839 10f4 0F7AD5ED 		vldr.32	s15, [r5, #60]	@ int	@ tmp196, g_armwave_state.wave_length
 3840 10f8 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp196
 3841 10fc 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp188
 3842              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3843              		.loc 1 535 15 view .LVU1020
 3844 1100 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 3845              	@ armwave.c:530:             if((rand() & 0xff) > 0x7f)
 530:armwave.c     ****                 noise = -noise;
 3846              		.loc 1 530 15 view .LVU1021
 3847 1104 800010E3 		tst	r0, #128	@,
 531:armwave.c     **** 
 3848              		.loc 1 531 17 is_stmt 1 view .LVU1022
 3849              	@ armwave.c:531:                 noise = -noise;
 531:armwave.c     **** 
 3850              		.loc 1 531 23 is_stmt 0 view .LVU1023
 3851 1108 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3852              	.LVL298:
 535:armwave.c     ****                 new_level = 0.2f;
 3853              		.loc 1 535 13 is_stmt 1 view .LVU1024
 3854              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3855              		.loc 1 535 15 is_stmt 0 view .LVU1025
 3856 110c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3857              	@ armwave.c:540:                 new_level = 0.2f;
 540:armwave.c     ****             } else {
 3858              		.loc 1 540 27 view .LVU1026
 3859 1110 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3860              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3861              		.loc 1 535 15 view .LVU1027
 3862 1114 090000CA 		bgt	.L268		@,
 537:armwave.c     ****                 new_level = 0.8f;
 3863              		.loc 1 537 20 is_stmt 1 view .LVU1028
 3864              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3865              		.loc 1 537 56 is_stmt 0 view .LVU1029
 3866 1118 8B6A67EE 		vmul.f32	s13, s15, s22	@ tmp156, _8, tmp184
 3867              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3868              		.loc 1 537 22 view .LVU1030
 3869 111c E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 3870 1120 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3871              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3872              		.loc 1 538 27 view .LVU1031
 3873 1124 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 3874              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3875              		.loc 1 537 22 view .LVU1032
 3876 1128 040000CA 		bgt	.L268		@,
 539:armwave.c     ****                 new_level = 0.2f;
 3877              		.loc 1 539 20 is_stmt 1 view .LVU1033
 3878              	@ armwave.c:539:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 539:armwave.c     ****                 new_level = 0.2f;
 3879              		.loc 1 539 56 is_stmt 0 view .LVU1034
 3880 112c A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp190
 3881              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3882              		.loc 1 538 27 view .LVU1035
 3883 1130 E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 3884 1134 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3885 1138 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 3886 113c 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 3887              	.L268:
 3888              	.LVL299:
 3889              		.loc 1 545 13 is_stmt 1 view .LVU1036
 3890              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 3891              		.loc 1 545 34 is_stmt 0 view .LVU1037
 3892 1140 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 3893              	.LVL300:
 3894              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 3895              		.loc 1 545 19 view .LVU1038
 3896 1144 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp190
 3897              	.LVL301:
 546:armwave.c     **** 
 547:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3898              		.loc 1 547 13 is_stmt 1 view .LVU1039
 3899              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3900              		.loc 1 547 27 is_stmt 0 view .LVU1040
 3901 1148 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 3902 114c C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 3903 1150 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3904              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3905              		.loc 1 547 17 view .LVU1041
 3906 1154 0020A0D3 		movle	r2, #0	@ iftmp.31_32,
 3907              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3908              		.loc 1 547 27 view .LVU1042
 3909 1158 080000DA 		ble	.L269		@,
 3910              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3911              		.loc 1 547 17 discriminator 1 view .LVU1043
 3912 115c 1C7A9FED 		vldr.32	s14, .L292+24	@ tmp164,
 3913 1160 C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 3914 1164 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3915              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3916              		.loc 1 547 60 discriminator 1 view .LVU1044
 3917 1168 1A7A9F4D 		vldrmi.32	s14, .L292+28	@ tmp166,
 3918              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3919              		.loc 1 547 17 discriminator 1 view .LVU1045
 3920 116c FF20A053 		movpl	r2, #255	@ iftmp.31_32,
 3921              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3922              		.loc 1 547 60 discriminator 1 view .LVU1046
 3923 1170 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 3924              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3925              		.loc 1 547 17 discriminator 1 view .LVU1047
 3926 1174 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 3927 1178 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 3928 117c 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.31_32, %sfp
 3929              	.L269:
 3930              	.LVL302:
 548:armwave.c     ****             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3931              		.loc 1 548 13 is_stmt 1 discriminator 12 view .LVU1048
 3932              	@ armwave.c:548:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3933              		.loc 1 548 37 is_stmt 0 discriminator 12 view .LVU1049
 3934 1180 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3935              	@ armwave.c:548:             test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3936              		.loc 1 548 69 discriminator 12 view .LVU1050
 3937 1184 001097E5 		ldr	r1, [r7]	@ test_wave_buffer, test_wave_buffer
 3938 1188 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, test_wave_buffer
 3939 118c 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.31_32, *_21
 3940              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3941              		.loc 1 524 39 discriminator 12 view .LVU1051
 3942 1190 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 3943              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3944              		.loc 1 524 54 discriminator 12 view .LVU1052
 3945 1194 014084E2 		add	r4, r4, #1	@ x, x,
 3946              	.LVL303:
 3947              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3948              		.loc 1 524 9 discriminator 12 view .LVU1053
 3949 1198 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 3950 119c C9FFFF8A 		bhi	.L272		@,
 3951 11a0 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 3952              	.LVL304:
 3953              	.L273:
 3954              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3955              		.loc 1 523 44 discriminator 2 view .LVU1054
 3956 11a4 016086E2 		add	r6, r6, #1	@ w, w,
 3957              	.LVL305:
 3958              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3959              		.loc 1 523 5 discriminator 2 view .LVU1055
 3960 11a8 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 3961 11ac BFFFFF3A 		bcc	.L266		@,
 3962              	.LVL306:
 3963              	.L264:
 3964              	@ armwave.c:551: }
 549:armwave.c     ****         }
 550:armwave.c     ****     }
 551:armwave.c     **** }
 3965              		.loc 1 551 1 view .LVU1056
 3966 11b0 0CD08DE2 		add	sp, sp, #12	@,,
 3967              		.cfi_def_cfa_offset 60
 3968              		@ sp needed	@
 3969 11b4 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 3970              		.cfi_restore 88
 3971              		.cfi_restore 89
 3972              		.cfi_restore 86
 3973              		.cfi_restore 87
 3974              		.cfi_restore 84
 3975              		.cfi_restore 85
 3976              		.cfi_restore 82
 3977              		.cfi_restore 83
 3978              		.cfi_restore 80
 3979              		.cfi_restore 81
 3980              		.cfi_def_cfa_offset 20
 3981 11b8 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 3982              	.L293:
 3983              		.align	2
 3984              	.L292:
 3985 11bc CDCC4C3F 		.word	1061997773
 3986 11c0 0000403F 		.word	1061158912
 3987 11c4 CDCC4C3E 		.word	1045220557
 3988 11c8 0000803E 		.word	1048576000
 3989 11cc 0000003F 		.word	1056964608
 3990 11d0 00004040 		.word	1077936128
 3991 11d4 0000803F 		.word	1065353216
 3992 11d8 00007F43 		.word	1132396544
 3993 11dc 00000000 		.word	g_armwave_state
 3994 11e0 00000000 		.word	test_wave_buffer
 3995              		.cfi_endproc
 3996              	.LFE77:
 3998              		.align	2
 3999              		.global	armwave_cleanup
 4000              		.syntax unified
 4001              		.arm
 4002              		.fpu vfp
 4004              	armwave_cleanup:
 4005              	.LFB78:
 552:armwave.c     **** 
 553:armwave.c     **** /*
 554:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 555:armwave.c     ****  */
 556:armwave.c     **** void armwave_cleanup()
 557:armwave.c     **** {
 4006              		.loc 1 557 1 is_stmt 1 view -0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
 558:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4010              		.loc 1 558 5 view .LVU1058
 4011              	@ armwave.c:557: {
 557:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4012              		.loc 1 557 1 is_stmt 0 view .LVU1059
 4013 11e4 10402DE9 		push	{r4, lr}	@
 4014              		.cfi_def_cfa_offset 8
 4015              		.cfi_offset 4, -8
 4016              		.cfi_offset 14, -4
 4017              	@ armwave.c:558:     free(g_armwave_state.out_pixbuf);
 4018              		.loc 1 558 25 view .LVU1060
 4019 11e8 34409FE5 		ldr	r4, .L296	@ tmp114,
 4020              	@ armwave.c:558:     free(g_armwave_state.out_pixbuf);
 4021              		.loc 1 558 5 view .LVU1061
 4022 11ec 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 4023 11f0 FEFFFFEB 		bl	free		@
 4024              	.LVL307:
 559:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4025              		.loc 1 559 5 is_stmt 1 view .LVU1062
 4026 11f4 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4027 11f8 FEFFFFEB 		bl	free		@
 4028              	.LVL308:
 560:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4029              		.loc 1 560 5 view .LVU1063
 4030 11fc 740094E5 		ldr	r0, [r4, #116]	@, g_armwave_state.xcoord_to_xpixel
 4031 1200 FEFFFFEB 		bl	free		@
 4032              	.LVL309:
 561:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4033              		.loc 1 561 5 view .LVU1064
 4034 1204 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4035 1208 FEFFFFEB 		bl	free		@
 4036              	.LVL310:
 562:armwave.c     **** 
 563:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4037              		.loc 1 563 5 view .LVU1065
 4038              	@ armwave.c:563:     g_armwave_state.out_pixbuf = NULL;
 4039              		.loc 1 563 32 is_stmt 0 view .LVU1066
 4040 120c 0030A0E3 		mov	r3, #0	@ tmp123,
 4041 1210 583084E5 		str	r3, [r4, #88]	@ tmp123, g_armwave_state.out_pixbuf
 564:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4042              		.loc 1 564 5 is_stmt 1 view .LVU1067
 4043              	@ armwave.c:564:     g_armwave_state.ch1_buffer = NULL;
 4044              		.loc 1 564 32 is_stmt 0 view .LVU1068
 4045 1214 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 565:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4046              		.loc 1 565 5 is_stmt 1 view .LVU1069
 4047              	@ armwave.c:565:     g_armwave_state.xcoord_to_xpixel = NULL;
 4048              		.loc 1 565 38 is_stmt 0 view .LVU1070
 4049 1218 743084E5 		str	r3, [r4, #116]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 566:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4050              		.loc 1 566 5 is_stmt 1 view .LVU1071
 4051              	@ armwave.c:566:     g_armwave_state.test_wave_buffer = NULL;
 4052              		.loc 1 566 38 is_stmt 0 view .LVU1072
 4053 121c 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4054              	@ armwave.c:567: }
 567:armwave.c     **** }
 4055              		.loc 1 567 1 view .LVU1073
 4056 1220 1080BDE8 		pop	{r4, pc}	@
 4057              	.L297:
 4058              		.align	2
 4059              	.L296:
 4060 1224 00000000 		.word	g_armwave_state
 4061              		.cfi_endproc
 4062              	.LFE78:
 4064              		.comm	gamma_table,256,4
 4065              		.comm	test_wave_buffer,4,4
 4066              		.comm	g_armwave_state,120,4
 4067              		.section	.rodata
 4068              		.align	2
 4069              		.set	.LANCHOR0,. + 0
 4072              	__PRETTY_FUNCTION__.17018:
 4073 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4073      6176655F 
 4073      66696C6C 
 4073      5F706978 
 4073      6275665F 
 4076              	__PRETTY_FUNCTION__.17049:
 4077 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4077      6176655F 
 4077      66696C6C 
 4077      5F706978 
 4077      6275665F 
 4078 0033 00       		.space	1
 4081              	__PRETTY_FUNCTION__.17071:
 4082 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4082      6176655F 
 4082      73657475 
 4082      705F7265 
 4082      6E646572 
 4083 0049 000000   		.space	3
 4086              	__PRETTY_FUNCTION__.17078:
 4087 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4087      6176655F 
 4087      7365745F 
 4087      77617665 
 4087      5F706F69 
 4088 0065 000000   		.space	3
 4091              	__PRETTY_FUNCTION__.17084:
 4092 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4092      6176655F 
 4092      7365745F 
 4092      77617665 
 4092      5F706F69 
 4093              		.section	.rodata.str1.4,"aMS",%progbits,1
 4094              		.align	2
 4095              	.LC0:
 4096 0000 76302E30 		.ascii	"v0.0.1\000"
 4096      2E3100
 4097 0007 00       		.space	1
 4098              	.LC1:
 4099 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4099      61766520 
 4099      76657273 
 4099      696F6E3A 
 4099      2025730A 
 4100 001d 000000   		.space	3
 4101              	.LC2:
 4102 0020 6368315F 		.ascii	"ch1_buffer=0x%08x\012\000"
 4102      62756666 
 4102      65723D30 
 4102      78253038 
 4102      780A00
 4103 0033 00       		.space	1
 4104              	.LC3:
 4105 0034 77617665 		.ascii	"wave_buffer=0x%08x\012\000"
 4105      5F627566 
 4105      6665723D 
 4105      30782530 
 4105      38780A00 
 4106              	.LC4:
 4107 0048 61726D77 		.ascii	"armwave.c\000"
 4107      6176652E 
 4107      6300
 4108 0052 0000     		.space	2
 4109              	.LC5:
 4110 0054 6F75745F 		.ascii	"out_buffer != NULL\000"
 4110      62756666 
 4110      65722021 
 4110      3D204E55 
 4110      4C4C00
 4111 0067 00       		.space	1
 4112              	.LC6:
 4113 0068 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4113      20653D25 
 4113      6420773D 
 4113      25642077 
 4113      733D2564 
 4114              	.LC7:
 4115 0094 73746172 		.ascii	"start_point < end_point\000"
 4115      745F706F 
 4115      696E7420 
 4115      3C20656E 
 4115      645F706F 
 4116              	.LC8:
 4117 00ac 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4117      65745F68 
 4117      65696768 
 4117      74203D3D 
 4117      20323536 
 4118 00df 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4118      68656967 
 4118      6874203D 
 4118      3D203130 
 4118      3234207C 
 4119 010b 00       		.space	1
 4120              	.LC9:
 4121 010c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4121      7566665F 
 4121      73697A65 
 4121      3D25640A 
 4121      00
 4122 011d 000000   		.space	3
 4123              	.LC10:
 4124 0120 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4124      6D776176 
 4124      655F7374 
 4124      6174652E 
 4124      6368315F 
 4125 0143 00       		.space	1
 4126              	.LC11:
 4127 0144 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4127      6D776176 
 4127      655F7374 
 4127      6174652E 
 4127      78636F6F 
 4128 016d 000000   		.space	3
 4129              	.LC12:
 4130 0170 77617665 		.ascii	"wave_buffer != NULL\000"
 4130      5F627566 
 4130      66657220 
 4130      213D204E 
 4130      554C4C00 
 4131              	.LC13:
 4132 0184 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4132      5F627566 
 4132      6665725F 
 4132      70747220 
 4132      213D2030 
 4133 0199 000000   		.space	3
 4134              	.LC14:
 4135 019c 776200   		.ascii	"wb\000"
 4136 019f 00       		.space	1
 4137              	.LC15:
 4138 01a0 50330A00 		.ascii	"P3\012\000"
 4139              	.LC16:
 4140 01a4 25642025 		.ascii	"%d %d\012\000"
 4140      640A00
 4141 01ab 00       		.space	1
 4142              	.LC17:
 4143 01ac 3235350A 		.ascii	"255\012\000"
 4143      00
 4144 01b1 000000   		.space	3
 4145              	.LC18:
 4146 01b4 25336420 		.ascii	"%3d %3d %3d\012\000"
 4146      25336420 
 4146      2533640A 
 4146      00
 4147 01c1 000000   		.space	3
 4148              	.LC19:
 4149 01c4 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4149      6176655F 
 4149      74657374 
 4149      5F67656E 
 4149      65726174 
 4150 01f2 0000     		.space	2
 4151              	.LC20:
 4152 01f4 61726D77 		.ascii	"armwave_test_buffer_alloc: length=%d max=%d\012\000"
 4152      6176655F 
 4152      74657374 
 4152      5F627566 
 4152      6665725F 
 4153 0221 000000   		.space	3
 4154              	.LC21:
 4155 0224 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4155      6176655F 
 4155      74657374 
 4155      5F627566 
 4155      6665725F 
 4156 0257 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4156      20627566 
 4156      66657220 
 4156      28256420 
 4156      62797465 
 4157 026f 00       		.space	1
 4158              	.LC22:
 4159 0270 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4159      6176655F 
 4159      66696C6C 
 4159      5F706978 
 4159      6275665F 
 4160 0299 000000   		.space	3
 4161              	.LC23:
 4162 029c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4162      6176655F 
 4162      66696C6C 
 4162      5F706978 
 4162      6275665F 
 4163 02cf 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4163      20666169 
 4163      6C65642C 
 4163      20726574 
 4163      75726E69 
 4164 02ee 0000     		.space	2
 4165              	.LC24:
 4166 02f0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4166      6176655F 
 4166      66696C6C 
 4166      5F706978 
 4166      6275665F 
 4167 0323 00       		.ascii	"\000"
 4168              	.LC25:
 4169 0324 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4169      6176655F 
 4169      66696C6C 
 4169      5F706978 
 4169      6275665F 
 4170              		.text
 4171              	.Letext0:
 4172              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4173              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4174              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4175              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4176              		.file 7 "/usr/include/stdio.h"
 4177              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4178              		.file 9 "/usr/include/errno.h"
 4179              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4180              		.file 11 "/usr/include/unistd.h"
 4181              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4182              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4183              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4184              		.file 15 "/usr/include/math.h"
 4185              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4186              		.file 17 "/usr/include/time.h"
 4187              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4188              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4189              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4190              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4191              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4192              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4193              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4194              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4195              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4196              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4197              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4198              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4199              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4200              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4201              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4202              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4203              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4204              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4205              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4206              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4207              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4208              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4209              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4210              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4211              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4212              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4213              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4214              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4215              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4216              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4217              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4218              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4219              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4220              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4221              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4222              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4223              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4224              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4225              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4226              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4227              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4228              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4229              		.file 60 "/usr/local/include/python3.8/context.h"
 4230              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4231              		.file 62 "/usr/local/include/python3.8/code.h"
 4232              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4233              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4234              		.file 65 "/usr/local/include/python3.8/import.h"
 4235              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4236              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4237              		.file 68 "armwave.h"
 4238              		.file 69 "/usr/include/stdlib.h"
 4239              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4240              		.file 71 "/usr/include/assert.h"
 4241              		.file 72 "<built-in>"
 4242              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
