   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0150A0E1 		mov	r5, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 54619FE5 		ldr	r6, .L21	@ tmp191,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241096E5 		ldr	r1, [r6, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403096E5 		ldr	r3, [r6, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044096E5 		ldr	r4, [r6, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp194, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 21008DE9 		stmib	sp, {r0, r5}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp195, tmp194,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp196, _5, tmp195
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 24019FE5 		ldr	r0, .L21+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp196,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp201, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp201,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141096E5 		ldr	r1, [r6, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383096E5 		ldr	r3, [r6, #56]	@ _91, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _91,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _91, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3B0000DA 		ble	.L11		@,
 317              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 318              		.loc 1 80 81 view .LVU52
 319 0108 343096E5 		ldr	r3, [r6, #52]	@ _15, g_armwave_state.wave_stride
 320 010c 000055E3 		cmp	r5, #0	@ height,
 321              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 322              		.loc 1 80 36 view .LVU53
 323 0110 14B096E5 		ldr	fp, [r6, #20]	@ _14, g_armwave_state.wave_buffer
 324              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 325              		.loc 1 103 51 view .LVU54
 326 0114 24E096E5 		ldr	lr, [r6, #36]	@ _64, g_armwave_state.cmp_x_bitdepth_scale
 327              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 328              		.loc 1 80 81 view .LVU55
 329 0118 24308DE5 		str	r3, [sp, #36]	@ _15, %sfp
 330              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 331              		.loc 1 103 116 view .LVU56
 332 011c 406096E5 		ldr	r6, [r6, #64]	@ _68, g_armwave_state.bitdepth_height
 333 0120 3400000A 		beq	.L11		@,
 334 0124 07B08BE0 		add	fp, fp, r7	@ ivtmp.52, _14, slice_y
 335 0128 00A06BE2 		rsb	r10, fp, #0	@ ivtmp.53, ivtmp.52
 336              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 337              		.loc 1 79 11 view .LVU57
 338 012c 0030A0E3 		mov	r3, #0	@ w,
 339 0130 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 340              	.LVL11:
 341              	.L14:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 342              		.loc 1 80 9 is_stmt 1 view .LVU58
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 343              		.loc 1 84 9 view .LVU59
 344              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 345              		.loc 1 79 11 is_stmt 0 view .LVU60
 346 0134 0B80A0E1 		mov	r8, fp	@ ivtmp.45, ivtmp.52
 347 0138 0030A0E3 		mov	r3, #0	@ ivtmp.46,
 348              	.LVL12:
 349              	.L13:
  87:armwave.c     **** 
 350              		.loc 1 87 13 is_stmt 1 view .LVU61
 351              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 352              		.loc 1 87 18 is_stmt 0 view .LVU62
 353 013c 041098E4 		ldr	r1, [r8], #4	@ word, MEM[base: _260, offset: 0B]
 354              	.LVL13:
  89:armwave.c     ****                 scale_value = word & 0xff;
 355              		.loc 1 89 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 356              		.loc 1 90 17 view .LVU64
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 357              		.loc 1 102 17 view .LVU65
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 107 17 view .LVU66
 359              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 360              		.loc 1 103 74 is_stmt 0 view .LVU67
 361 0140 23C8A0E1 		lsr	ip, r3, #16	@ tmp207, ivtmp.46,
 362              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 363              		.loc 1 103 34 view .LVU68
 364 0144 03308EE0 		add	r3, lr, r3	@ _89, _64, ivtmp.46
 365              	.LVL14:
 366              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 367              		.loc 1 90 29 view .LVU69
 368 0148 7120EFE6 		uxtb	r2, r1	@ scale_value, word
 369              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 107 47 view .LVU70
 371 014c 962C2CE0 		mla	ip, r6, ip, r2	@ tmp210, _68, tmp207, scale_value
 372              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 373              		.loc 1 108 22 view .LVU71
 374 0150 2124A0E1 		lsr	r2, r1, #8	@ word, word,
 375              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 376              		.loc 1 103 74 view .LVU72
 377 0154 2308A0E1 		lsr	r0, r3, #16	@ tmp215, _89,
 378              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 379              		.loc 1 90 29 view .LVU73
 380 0158 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 381              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 382              		.loc 1 107 47 view .LVU74
 383 015c 8CC0A0E1 		lsl	ip, ip, #1	@ tmp211, tmp210,
 384 0160 962020E0 		mla	r0, r6, r0, r2	@ tmp219, _68, tmp215, scale_value
 385              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 386              		.loc 1 103 34 view .LVU75
 387 0164 03308EE0 		add	r3, lr, r3	@ _113, _64, _89
 388              	@ armwave.c:108:                 word >>= 8;
 389              		.loc 1 108 22 view .LVU76
 390 0168 2128A0E1 		lsr	r2, r1, #16	@ word, word,
 391              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 392              		.loc 1 107 47 view .LVU77
 393 016c BC7094E1 		ldrh	r7, [r4, ip]	@ *_73, *_73
 394              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 395              		.loc 1 103 74 view .LVU78
 396 0170 2398A0E1 		lsr	r9, r3, #16	@ tmp224, _113,
 397              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 398              		.loc 1 90 29 view .LVU79
 399 0174 7220EFE6 		uxtb	r2, r2	@ scale_value, word
 400              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 401              		.loc 1 107 47 view .LVU80
 402 0178 8000A0E1 		lsl	r0, r0, #1	@ tmp220, tmp219,
 403              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 404              		.loc 1 103 34 view .LVU81
 405 017c 03308EE0 		add	r3, lr, r3	@ _137, _64, _113
 406              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 407              		.loc 1 107 47 view .LVU82
 408 0180 962922E0 		mla	r2, r6, r9, r2	@ tmp228, _68, tmp224, scale_value
 409 0184 017087E2 		add	r7, r7, #1	@ tmp214, *_73,
 410 0188 BC7084E1 		strh	r7, [r4, ip]	@ movhi	@ tmp214, *_73
 411              		.loc 1 108 17 is_stmt 1 view .LVU83
 412              	.LVL15:
  90:armwave.c     ****                 
 413              		.loc 1 90 17 view .LVU84
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 414              		.loc 1 102 17 view .LVU85
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 17 view .LVU86
 416              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 417              		.loc 1 103 74 is_stmt 0 view .LVU87
 418 018c 2378A0E1 		lsr	r7, r3, #16	@ tmp233, _137,
 419              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 420              		.loc 1 107 47 view .LVU88
 421 0190 B0C094E1 		ldrh	ip, [r4, r0]	@ *_97, *_97
 422              	@ armwave.c:108:                 word >>= 8;
 423              		.loc 1 108 22 view .LVU89
 424 0194 211CA0E1 		lsr	r1, r1, #24	@ word, word,
 425              	.LVL16:
 426              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 427              		.loc 1 107 47 view .LVU90
 428 0198 8220A0E1 		lsl	r2, r2, #1	@ tmp229, tmp228,
 429 019c 961721E0 		mla	r1, r6, r7, r1	@ tmp236, _68, tmp233, word
 430 01a0 01C08CE2 		add	ip, ip, #1	@ tmp223, *_97,
 431 01a4 B0C084E1 		strh	ip, [r4, r0]	@ movhi	@ tmp223, *_97
 432              		.loc 1 108 17 is_stmt 1 view .LVU91
 433              	.LVL17:
  90:armwave.c     ****                 
 434              		.loc 1 90 17 view .LVU92
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 435              		.loc 1 102 17 view .LVU93
 107:armwave.c     ****                 word >>= 8;
 436              		.loc 1 107 17 view .LVU94
 437              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 438              		.loc 1 107 47 is_stmt 0 view .LVU95
 439 01a8 B20094E1 		ldrh	r0, [r4, r2]	@ *_121, *_121
 440 01ac 8110A0E1 		lsl	r1, r1, #1	@ tmp237, tmp236,
 441 01b0 03308EE0 		add	r3, lr, r3	@ ivtmp.46, _64, _137
 442 01b4 010080E2 		add	r0, r0, #1	@ tmp232, *_121,
 443 01b8 B20084E1 		strh	r0, [r4, r2]	@ movhi	@ tmp232, *_121
 444              		.loc 1 108 17 is_stmt 1 view .LVU96
 445              	.LVL18:
  90:armwave.c     ****                 
 446              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 447              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 448              		.loc 1 107 17 view .LVU99
 449              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 450              		.loc 1 107 47 is_stmt 0 view .LVU100
 451 01bc B12094E1 		ldrh	r2, [r4, r1]	@ *_145, *_145
 452              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 453              		.loc 1 84 9 view .LVU101
 454 01c0 08008AE0 		add	r0, r10, r8	@ tmp241, ivtmp.53, ivtmp.45
 455 01c4 000055E1 		cmp	r5, r0	@ height, tmp241
 456              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 457              		.loc 1 107 47 view .LVU102
 458 01c8 012082E2 		add	r2, r2, #1	@ tmp240, *_145,
 459 01cc B12084E1 		strh	r2, [r4, r1]	@ movhi	@ tmp240, *_145
 460              		.loc 1 108 17 is_stmt 1 view .LVU103
 461              	.LVL19:
 462              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 463              		.loc 1 84 9 is_stmt 0 view .LVU104
 464 01d0 D9FFFF8A 		bhi	.L13		@,
 465              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 466              		.loc 1 79 44 view .LVU105
 467 01d4 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 468              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 469              		.loc 1 79 5 view .LVU106
 470 01d8 20209DE5 		ldr	r2, [sp, #32]	@ _91, %sfp
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 view .LVU107
 473 01dc 013083E2 		add	r3, r3, #1	@ w, w,
 474 01e0 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 475              	.LVL20:
 476              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 477              		.loc 1 79 5 view .LVU108
 478 01e4 020053E1 		cmp	r3, r2	@ w, _91
 479 01e8 24309DE5 		ldr	r3, [sp, #36]	@ _15, %sfp
 480              	.LVL21:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 481              		.loc 1 79 5 view .LVU109
 482 01ec 03B08BE0 		add	fp, fp, r3	@ ivtmp.52, ivtmp.52, _15
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 view .LVU110
 484 01f0 03A04AE0 		sub	r10, r10, r3	@ ivtmp.53, ivtmp.53, _15
 485 01f4 CEFFFF1A 		bne	.L14		@,
 486              	.LVL22:
 487              	.L11:
 488              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 489              		.loc 1 112 1 view .LVU111
 490 01f8 2CD08DE2 		add	sp, sp, #44	@,,
 491              		.cfi_def_cfa_offset 36
 492              		@ sp needed	@
 493 01fc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 494              	.LVL23:
 495              	.L22:
 496              		.loc 1 112 1 view .LVU112
 497              		.align	2
 498              	.L21:
 499 0200 00000000 		.word	g_armwave_state
 500 0204 20000000 		.word	.LC2
 501              		.cfi_endproc
 502              	.LFE59:
 504              		.align	2
 505              		.global	armwave_fill_pixbuf_scaled
 506              		.syntax unified
 507              		.arm
 508              		.fpu vfp
 510              	armwave_fill_pixbuf_scaled:
 511              	.LVL24:
 512              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 513              		.loc 1 119 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 24
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 517              		.loc 1 120 5 view .LVU114
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 518              		.loc 1 122 5 view .LVU115
 123:armwave.c     ****     uint8_t r, g, b;
 519              		.loc 1 123 5 view .LVU116
 124:armwave.c     ****     int value; 
 520              		.loc 1 124 5 view .LVU117
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 521              		.loc 1 126 5 view .LVU118
 522              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 523              		.loc 1 119 1 is_stmt 0 view .LVU119
 524 0208 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 525              		.cfi_def_cfa_offset 36
 526              		.cfi_offset 4, -36
 527              		.cfi_offset 5, -32
 528              		.cfi_offset 6, -28
 529              		.cfi_offset 7, -24
 530              		.cfi_offset 8, -20
 531              		.cfi_offset 9, -16
 532              		.cfi_offset 10, -12
 533              		.cfi_offset 11, -8
 534              		.cfi_offset 14, -4
 535              	@ armwave.c:130:     printf("output buffer: 0x%08x\n", out_buffer);
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 128:armwave.c     ****     uint32_t offset;
 129:armwave.c     **** 
 130:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 536              		.loc 1 130 5 view .LVU120
 537 020c 0010A0E1 		mov	r1, r0	@, out_buffer
 538              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 539              		.loc 1 126 15 view .LVU121
 540 0210 C8419FE5 		ldr	r4, .L46	@ tmp241,
 541              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 542              		.loc 1 119 1 view .LVU122
 543 0214 0050A0E1 		mov	r5, r0	@ out_buffer, out_buffer
 544 0218 24D04DE2 		sub	sp, sp, #36	@,,
 545              		.cfi_def_cfa_offset 72
 546              	@ armwave.c:130:     printf("output buffer: 0x%08x\n", out_buffer);
 547              		.loc 1 130 5 view .LVU123
 548 021c C0019FE5 		ldr	r0, .L46+4	@,
 549              	.LVL25:
 550              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 551              		.loc 1 126 15 view .LVU124
 552 0220 046094E5 		ldr	r6, [r4, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 553              	.LVL26:
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 554              		.loc 1 127 5 is_stmt 1 view .LVU125
 128:armwave.c     **** 
 555              		.loc 1 128 5 view .LVU126
 556              		.loc 1 130 5 view .LVU127
 557 0224 FEFFFFEB 		bl	printf		@
 558              	.LVL27:
 131:armwave.c     **** 
 132:armwave.c     ****     if(out_buffer == NULL)
 559              		.loc 1 132 5 view .LVU128
 560              	@ armwave.c:132:     if(out_buffer == NULL)
 561              		.loc 1 132 7 is_stmt 0 view .LVU129
 562 0228 000055E3 		cmp	r5, #0	@ out_buffer,
 563 022c 2900000A 		beq	.L23		@,
 133:armwave.c     ****         return;
 134:armwave.c     **** 
 135:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 564              		.loc 1 135 5 is_stmt 1 view .LVU130
 565              	@ armwave.c:135:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 566              		.loc 1 135 27 is_stmt 0 view .LVU131
 567 0230 583094E5 		ldr	r3, [r4, #88]	@ _1, g_armwave_state.target_width
 568              	@ armwave.c:138:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 136:armwave.c     ****     
 137:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%08x\n", \
 138:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 569              		.loc 1 138 38 view .LVU132
 570 0234 5C1094E5 		ldr	r1, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 571              	@ armwave.c:135:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 135:armwave.c     ****     
 572              		.loc 1 135 10 view .LVU133
 573 0238 407094E5 		ldr	r7, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 574              	@ armwave.c:137:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%0
 137:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 575              		.loc 1 137 5 view .LVU134
 576 023c 1C008DE2 		add	r0, sp, #28	@ tmp193,,
 577              	@ armwave.c:138:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 578              		.loc 1 138 38 view .LVU135
 579 0240 910301E0 		mul	r1, r1, r3	@ tmp189, g_armwave_state.target_height, _1
 580              	@ armwave.c:135:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 135:armwave.c     ****     
 581              		.loc 1 135 10 view .LVU136
 582 0244 970307E0 		mul	r7, r7, r3	@ npix, g_armwave_state.bitdepth_height, _1
 583              	.LVL28:
 137:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 584              		.loc 1 137 5 is_stmt 1 view .LVU137
 585 0248 0111A0E1 		lsl	r1, r1, #2	@, tmp189,
 586 024c 0720A0E1 		mov	r2, r7	@, npix
 587 0250 04008DE5 		str	r0, [sp, #4]	@ tmp193,
 588 0254 503094E5 		ldr	r3, [r4, #80]	@, g_armwave_state.ch_buff_size
 589 0258 00608DE5 		str	r6, [sp]	@ base_32ptr,
 590 025c 84019FE5 		ldr	r0, .L46+8	@,
 591 0260 FEFFFFEB 		bl	printf		@
 592              	.LVL29:
 139:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, &w);
 140:armwave.c     **** 
 141:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 142:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 593              		.loc 1 142 5 view .LVU138
 594              	@ armwave.c:142:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 595              		.loc 1 142 59 is_stmt 0 view .LVU139
 596 0264 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 597 0268 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 598              	@ armwave.c:142:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 599              		.loc 1 142 5 view .LVU140
 600 026c 0010A0E3 		mov	r1, #0	@,
 601 0270 0500A0E1 		mov	r0, r5	@, out_buffer
 602              	@ armwave.c:142:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 603              		.loc 1 142 59 view .LVU141
 604 0274 920302E0 		mul	r2, r2, r3	@ tmp196, g_armwave_state.target_height, g_armwave_state.target_width
 605              	@ armwave.c:142:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 606              		.loc 1 142 5 view .LVU142
 607 0278 0221A0E1 		lsl	r2, r2, #2	@, tmp196,
 608 027c FEFFFFEB 		bl	memset		@
 609              	.LVL30:
 143:armwave.c     **** 
 144:armwave.c     ****     printf("iter...\n");
 610              		.loc 1 144 5 is_stmt 1 view .LVU143
 611 0280 64019FE5 		ldr	r0, .L46+12	@,
 612 0284 FEFFFFEB 		bl	puts		@
 613              	.LVL31:
 145:armwave.c     **** 
 146:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 614              		.loc 1 146 5 view .LVU144
 615              		.loc 1 146 5 is_stmt 0 view .LVU145
 616 0288 000057E3 		cmp	r7, #0	@ npix,
 617 028c 510000DA 		ble	.L32		@,
 618              	@ armwave.c:156:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 148:armwave.c     ****         wave_word = *base_32ptr++;
 149:armwave.c     **** 
 150:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 151:armwave.c     ****             for(w = 0; w < 2; w++) {
 152:armwave.c     ****                 value = wave_word & 0xffff;
 153:armwave.c     ****                 wave_word >>= 16;
 154:armwave.c     **** 
 155:armwave.c     ****                 if(value != 0) {
 156:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 619              		.loc 1 156 52 view .LVU146
 620 0290 FC36D4E1 		ldrsh	r3, [r4, #108]	@ _18, g_armwave_state.ch1_color.r
 621              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 157:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 158:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 159:armwave.c     **** 
 160:armwave.c     ****                     r = MIN(rr, 255);
 161:armwave.c     ****                     g = MIN(gg, 255);
 162:armwave.c     ****                     b = MIN(bb, 255);
 163:armwave.c     **** 
 164:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 165:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 166:armwave.c     **** 
 167:armwave.c     ****                     // Plot the pixels
 168:armwave.c     ****                     nsub = n + w;
 169:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 622              		.loc 1 169 57 view .LVU147
 623 0294 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _38, g_armwave_state.vscale_frac
 624              	@ armwave.c:146:     for(n = 0; n < npix; n += 2) {
 146:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 625              		.loc 1 146 11 view .LVU148
 626 0298 0090A0E3 		mov	r9, #0	@ n,
 627              	@ armwave.c:156:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 156:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 628              		.loc 1 156 52 view .LVU149
 629 029c 0C308DE5 		str	r3, [sp, #12]	@ _18, %sfp
 630              	@ armwave.c:157:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 157:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 631              		.loc 1 157 52 view .LVU150
 632 02a0 FE36D4E1 		ldrsh	r3, [r4, #110]	@ _21, g_armwave_state.ch1_color.g
 633              	@ armwave.c:120:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 120:armwave.c     ****     // uint32_t ysub;
 634              		.loc 1 120 46 view .LVU151
 635 02a4 0910A0E1 		mov	r1, r9	@ painted, n
 636              	@ armwave.c:157:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 157:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 637              		.loc 1 157 52 view .LVU152
 638 02a8 10308DE5 		str	r3, [sp, #16]	@ _21, %sfp
 639              	@ armwave.c:158:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 158:armwave.c     **** 
 640              		.loc 1 158 52 view .LVU153
 641 02ac F037D4E1 		ldrsh	r3, [r4, #112]	@ _24, g_armwave_state.ch1_color.b
 642 02b0 14308DE5 		str	r3, [sp, #20]	@ _24, %sfp
 643              	.LVL32:
 644              	.L31:
 148:armwave.c     **** 
 645              		.loc 1 148 9 is_stmt 1 view .LVU154
 646              	@ armwave.c:148:         wave_word = *base_32ptr++;
 148:armwave.c     **** 
 647              		.loc 1 148 19 is_stmt 0 view .LVU155
 648 02b4 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_77, offset: 4294967292B]
 649              	.LVL33:
 150:armwave.c     ****             for(w = 0; w < 2; w++) {
 650              		.loc 1 150 9 is_stmt 1 view .LVU156
 651              	@ armwave.c:150:         if(COND_UNLIKELY(wave_word != 0)) {
 150:armwave.c     ****             for(w = 0; w < 2; w++) {
 652              		.loc 1 150 11 is_stmt 0 view .LVU157
 653 02b8 00005CE3 		cmp	ip, #0	@ wave_word,
 654              	@ armwave.c:151:             for(w = 0; w < 2; w++) {
 151:armwave.c     ****                 value = wave_word & 0xffff;
 655              		.loc 1 151 26 view .LVU158
 656 02bc 00A0A013 		movne	r10, #0	@ w.9_107,
 657              	@ armwave.c:150:         if(COND_UNLIKELY(wave_word != 0)) {
 150:armwave.c     ****             for(w = 0; w < 2; w++) {
 658              		.loc 1 150 11 view .LVU159
 659 02c0 3B00001A 		bne	.L30		@,
 660              	.L27:
 661              	@ armwave.c:146:     for(n = 0; n < npix; n += 2) {
 146:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 662              		.loc 1 146 28 discriminator 2 view .LVU160
 663 02c4 029089E2 		add	r9, r9, #2	@ n, n,
 664              	.LVL34:
 665              	@ armwave.c:146:     for(n = 0; n < npix; n += 2) {
 146:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 666              		.loc 1 146 5 discriminator 2 view .LVU161
 667 02c8 090057E1 		cmp	r7, r9	@ npix, n
 668 02cc F8FFFFCA 		bgt	.L31		@,
 669              	.LVL35:
 670              	.L26:
 170:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 171:armwave.c     ****                     xx = (nsub >> 8) / 2;
 172:armwave.c     **** 
 173:armwave.c     ****                     for(y = yy; y < ye; y++) {
 174:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 175:armwave.c     ****                         *(out_buffer_base + offset) = word;
 176:armwave.c     ****                         painted++;
 177:armwave.c     ****                     }
 178:armwave.c     ****                 }
 179:armwave.c     ****             }
 180:armwave.c     ****         }
 181:armwave.c     ****     }
 182:armwave.c     **** 
 183:armwave.c     ****     printf("done paint %d pixels...\n", painted);
 671              		.loc 1 183 5 is_stmt 1 view .LVU162
 672 02d0 18019FE5 		ldr	r0, .L46+16	@,
 673 02d4 FEFFFFEB 		bl	printf		@
 674              	.LVL36:
 675              	.L23:
 676              	@ armwave.c:184: }
 184:armwave.c     **** }
 677              		.loc 1 184 1 is_stmt 0 view .LVU163
 678 02d8 24D08DE2 		add	sp, sp, #36	@,,
 679              		.cfi_remember_state
 680              		.cfi_def_cfa_offset 36
 681              		@ sp needed	@
 682 02dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 683              	.LVL37:
 684              	.L45:
 685              		.cfi_restore_state
 156:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 686              		.loc 1 156 21 is_stmt 1 view .LVU164
 157:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 687              		.loc 1 157 21 view .LVU165
 158:armwave.c     **** 
 688              		.loc 1 158 21 view .LVU166
 160:armwave.c     ****                     g = MIN(gg, 255);
 689              		.loc 1 160 21 view .LVU167
 161:armwave.c     ****                     b = MIN(bb, 255);
 690              		.loc 1 161 21 view .LVU168
 162:armwave.c     **** 
 691              		.loc 1 162 21 view .LVU169
 165:armwave.c     **** 
 692              		.loc 1 165 21 view .LVU170
 693 02e0 0AE089E0 		add	lr, r9, r10	@ _154, n, w.9_107
 694              	@ armwave.c:158:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 158:armwave.c     **** 
 695              		.loc 1 158 55 is_stmt 0 view .LVU171
 696 02e4 14209DE5 		ldr	r2, [sp, #20]	@ _24, %sfp
 697              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 698              		.loc 1 169 32 view .LVU172
 699 02e8 7E00EFE6 		uxtb	r0, lr	@ _36, _154
 700              	@ armwave.c:170:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 701              		.loc 1 170 41 view .LVU173
 702 02ec 018080E2 		add	r8, r0, #1	@ tmp227, _36,
 703              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 704              		.loc 1 169 40 view .LVU174
 705 02f0 900A07EE 		vmov	s15, r0	@ int	@ _36, _36
 706              	@ armwave.c:170:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 707              		.loc 1 170 41 view .LVU175
 708 02f4 108A07EE 		vmov	s14, r8	@ int	@ tmp227, tmp227
 709              	@ armwave.c:157:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 157:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 157 55 view .LVU176
 711 02f8 10009DE5 		ldr	r0, [sp, #16]	@ _21, %sfp
 712              	@ armwave.c:158:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 158:armwave.c     **** 
 713              		.loc 1 158 55 view .LVU177
 714 02fc 930202E0 		mul	r2, r3, r2	@ tmp212, value, _24
 715              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 716              		.loc 1 169 40 view .LVU178
 717 0300 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, _36
 718              	@ armwave.c:170:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 719              		.loc 1 170 46 view .LVU179
 720 0304 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp228, tmp227
 721              	@ armwave.c:157:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 157:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 722              		.loc 1 157 55 view .LVU180
 723 0308 930000E0 		mul	r0, r3, r0	@ tmp216, value, _21
 724              	@ armwave.c:156:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 156:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 725              		.loc 1 156 55 view .LVU181
 726 030c 0C809DE5 		ldr	r8, [sp, #12]	@ _18, %sfp
 727              	@ armwave.c:158:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 158:armwave.c     **** 
 728              		.loc 1 158 24 view .LVU182
 729 0310 4224A0E1 		asr	r2, r2, #8	@ bb, tmp212,
 730              	.LVL38:
 731              	@ armwave.c:162:                     b = MIN(bb, 255);
 162:armwave.c     **** 
 732              		.loc 1 162 25 view .LVU183
 733 0314 FF0052E3 		cmp	r2, #255	@ bb,
 734              	@ armwave.c:156:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 156:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 735              		.loc 1 156 55 view .LVU184
 736 0318 930803E0 		mul	r3, r3, r8	@ tmp222, value, _18
 737              	.LVL39:
 738              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 169 40 view .LVU185
 740 031c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp226, tmp225, _38
 741              	@ armwave.c:170:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 742              		.loc 1 170 46 view .LVU186
 743 0320 267A27EE 		vmul.f32	s14, s14, s13	@ tmp229, tmp228, _38
 744              	@ armwave.c:157:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 157:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 745              		.loc 1 157 24 view .LVU187
 746 0324 4004A0E1 		asr	r0, r0, #8	@ gg, tmp216,
 747              	.LVL40:
 748              	@ armwave.c:162:                     b = MIN(bb, 255);
 162:armwave.c     **** 
 749              		.loc 1 162 25 view .LVU188
 750 0328 FF20A0A3 		movge	r2, #255	@ bb,
 751              	.LVL41:
 752              	@ armwave.c:161:                     g = MIN(gg, 255);
 161:armwave.c     ****                     b = MIN(bb, 255);
 753              		.loc 1 161 25 view .LVU189
 754 032c FF0050E3 		cmp	r0, #255	@ gg,
 755 0330 FF00A0A3 		movge	r0, #255	@ gg,
 756              	.LVL42:
 757              	@ armwave.c:156:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 156:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 758              		.loc 1 156 24 view .LVU190
 759 0334 4334A0E1 		asr	r3, r3, #8	@ rr, tmp222,
 760              	.LVL43:
 761              	@ armwave.c:160:                     r = MIN(rr, 255);
 160:armwave.c     ****                     g = MIN(gg, 255);
 762              		.loc 1 160 25 view .LVU191
 763 0338 FF0053E3 		cmp	r3, #255	@ rr,
 764              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 169 24 view .LVU192
 766 033c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp226
 767              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 768              		.loc 1 165 56 view .LVU193
 769 0340 0004A0E1 		lsl	r0, r0, #8	@ tmp217, gg,
 770              	@ armwave.c:160:                     r = MIN(rr, 255);
 160:armwave.c     ****                     g = MIN(gg, 255);
 771              		.loc 1 160 25 view .LVU194
 772 0344 FF30A0A3 		movge	r3, #255	@ rr,
 773              	.LVL44:
 774              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 775              		.loc 1 165 44 view .LVU195
 776 0348 0228A0E1 		lsl	r2, r2, #16	@ tmp213, bb,
 777              	@ armwave.c:171:                     xx = (nsub >> 8) / 2;
 171:armwave.c     **** 
 778              		.loc 1 171 32 view .LVU196
 779 034c 4EE4A0E1 		asr	lr, lr, #8	@ tmp230, _154,
 780              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 781              		.loc 1 165 44 view .LVU197
 782 0350 FF2802E2 		and	r2, r2, #16711680	@ tmp214, tmp213,
 783              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 784              		.loc 1 165 56 view .LVU198
 785 0354 7000FFE6 		uxth	r0, r0	@ tmp218, tmp217
 786              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 787              		.loc 1 165 51 view .LVU199
 788 0358 000082E1 		orr	r0, r2, r0	@ tmp220, tmp214, tmp218
 789              	@ armwave.c:169:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 790              		.loc 1 169 24 view .LVU200
 791 035c 90BA17EE 		vmov	fp, s15	@ int	@ yy, yy
 792              	@ armwave.c:170:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 793              		.loc 1 170 24 view .LVU201
 794 0360 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp229
 795              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 796              		.loc 1 165 62 view .LVU202
 797 0364 7330EFE6 		uxtb	r3, r3	@ rr, rr
 798              	@ armwave.c:171:                     xx = (nsub >> 8) / 2;
 171:armwave.c     **** 
 799              		.loc 1 171 38 view .LVU203
 800 0368 AEEF8EE0 		add	lr, lr, lr, lsr #31	@ tmp232, tmp230, tmp230,
 801              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 802              		.loc 1 165 62 view .LVU204
 803 036c 030080E1 		orr	r0, r0, r3	@ tmp224, tmp220, rr
 804              	@ armwave.c:165:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 165:armwave.c     **** 
 805              		.loc 1 165 26 view .LVU205
 806 0370 FF0480E3 		orr	r0, r0, #-16777216	@ word, tmp224,
 807              	.LVL45:
 168:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 808              		.loc 1 168 21 is_stmt 1 view .LVU206
 169:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 809              		.loc 1 169 21 view .LVU207
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 810              		.loc 1 170 21 view .LVU208
 811              	@ armwave.c:171:                     xx = (nsub >> 8) / 2;
 171:armwave.c     **** 
 812              		.loc 1 171 38 is_stmt 0 view .LVU209
 813 0374 CEE0A0E1 		asr	lr, lr, #1	@ xx, tmp232,
 814              	@ armwave.c:170:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 170:armwave.c     ****                     xx = (nsub >> 8) / 2;
 815              		.loc 1 170 24 view .LVU210
 816 0378 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 817              	.LVL46:
 171:armwave.c     **** 
 818              		.loc 1 171 21 is_stmt 1 view .LVU211
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 819              		.loc 1 173 21 view .LVU212
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 820              		.loc 1 173 21 is_stmt 0 view .LVU213
 821 037c 08005BE1 		cmp	fp, r8	@ yy, ye
 822 0380 0800002A 		bcs	.L28		@,
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 823              		.loc 1 173 21 view .LVU214
 824 0384 0B30A0E1 		mov	r3, fp	@ y, yy
 825              	.LVL47:
 826              	.L29:
 174:armwave.c     ****                         *(out_buffer_base + offset) = word;
 827              		.loc 1 174 25 is_stmt 1 discriminator 3 view .LVU215
 175:armwave.c     ****                         painted++;
 828              		.loc 1 175 25 discriminator 3 view .LVU216
 829              	@ armwave.c:174:                         offset = (xx + (y * g_armwave_state.target_width)); 
 174:armwave.c     ****                         *(out_buffer_base + offset) = word;
 830              		.loc 1 174 43 is_stmt 0 discriminator 3 view .LVU217
 831 0388 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 832              	@ armwave.c:175:                         *(out_buffer_base + offset) = word;
 175:armwave.c     ****                         painted++;
 833              		.loc 1 175 43 discriminator 3 view .LVU218
 834 038c 92E322E0 		mla	r2, r2, r3, lr	@ tmp237, g_armwave_state.target_width, y, xx
 835              	.LVL48:
 836              	@ armwave.c:173:                     for(y = yy; y < ye; y++) {
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 837              		.loc 1 173 42 discriminator 3 view .LVU219
 838 0390 013083E2 		add	r3, r3, #1	@ y, y,
 839              	.LVL49:
 840              	@ armwave.c:173:                     for(y = yy; y < ye; y++) {
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 841              		.loc 1 173 21 discriminator 3 view .LVU220
 842 0394 030058E1 		cmp	r8, r3	@ ye, y
 843              	@ armwave.c:175:                         *(out_buffer_base + offset) = word;
 175:armwave.c     ****                         painted++;
 844              		.loc 1 175 53 discriminator 3 view .LVU221
 845 0398 020185E7 		str	r0, [r5, r2, lsl #2]	@ word, *_49
 176:armwave.c     ****                     }
 846              		.loc 1 176 25 is_stmt 1 discriminator 3 view .LVU222
 847              	.LVL50:
 848              	@ armwave.c:173:                     for(y = yy; y < ye; y++) {
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 849              		.loc 1 173 21 is_stmt 0 discriminator 3 view .LVU223
 850 039c F9FFFF1A 		bne	.L29		@,
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 851              		.loc 1 173 21 discriminator 3 view .LVU224
 852 03a0 0B8048E0 		sub	r8, r8, fp	@ tmp238, ye, yy
 853              	.LVL51:
 173:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 854              		.loc 1 173 21 discriminator 3 view .LVU225
 855 03a4 081081E0 		add	r1, r1, r8	@ painted, painted, tmp238
 856              	.LVL52:
 857              	.L28:
 858              	@ armwave.c:151:             for(w = 0; w < 2; w++) {
 151:armwave.c     ****                 value = wave_word & 0xffff;
 859              		.loc 1 151 13 discriminator 2 view .LVU226
 860 03a8 01005AE3 		cmp	r10, #1	@ w.9_107,
 861 03ac 0600000A 		beq	.L44		@,
 862              	.LVL53:
 863              	.L33:
 151:armwave.c     ****                 value = wave_word & 0xffff;
 864              		.loc 1 151 13 discriminator 2 view .LVU227
 865 03b0 01A0A0E3 		mov	r10, #1	@ w.9_107,
 866              	.L30:
 152:armwave.c     ****                 wave_word >>= 16;
 867              		.loc 1 152 17 is_stmt 1 view .LVU228
 868              	@ armwave.c:152:                 value = wave_word & 0xffff;
 152:armwave.c     ****                 wave_word >>= 16;
 869              		.loc 1 152 23 is_stmt 0 view .LVU229
 870 03b4 7C30FFE6 		uxth	r3, ip	@ value, wave_word
 871              	.LVL54:
 153:armwave.c     **** 
 872              		.loc 1 153 17 is_stmt 1 view .LVU230
 873              	@ armwave.c:155:                 if(value != 0) {
 155:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 874              		.loc 1 155 19 is_stmt 0 view .LVU231
 875 03b8 000053E3 		cmp	r3, #0	@ value,
 876              	@ armwave.c:153:                 wave_word >>= 16;
 153:armwave.c     **** 
 877              		.loc 1 153 27 view .LVU232
 878 03bc 2CC8A0E1 		lsr	ip, ip, #16	@ wave_word, wave_word,
 879              	.LVL55:
 155:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 880              		.loc 1 155 17 is_stmt 1 view .LVU233
 881              	@ armwave.c:155:                 if(value != 0) {
 155:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 882              		.loc 1 155 19 is_stmt 0 view .LVU234
 883 03c0 C6FFFF1A 		bne	.L45		@,
 884              	@ armwave.c:151:             for(w = 0; w < 2; w++) {
 151:armwave.c     ****                 value = wave_word & 0xffff;
 885              		.loc 1 151 13 view .LVU235
 886 03c4 01005AE3 		cmp	r10, #1	@ w.9_107,
 887 03c8 F8FFFF1A 		bne	.L33		@,
 888              	.LVL56:
 889              	.L44:
 151:armwave.c     ****                 value = wave_word & 0xffff;
 890              		.loc 1 151 13 view .LVU236
 891 03cc 0230A0E3 		mov	r3, #2	@ tmp283,
 892 03d0 1C308DE5 		str	r3, [sp, #28]	@ tmp283, w
 893 03d4 BAFFFFEA 		b	.L27		@
 894              	.LVL57:
 895              	.L32:
 896              	@ armwave.c:120:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 120:armwave.c     ****     // uint32_t ysub;
 897              		.loc 1 120 46 view .LVU237
 898 03d8 0010A0E3 		mov	r1, #0	@ painted,
 899 03dc BBFFFFEA 		b	.L26		@
 900              	.L47:
 901              		.align	2
 902              	.L46:
 903 03e0 00000000 		.word	g_armwave_state
 904 03e4 78000000 		.word	.LC3
 905 03e8 90000000 		.word	.LC4
 906 03ec DC000000 		.word	.LC5
 907 03f0 E4000000 		.word	.LC6
 908              		.cfi_endproc
 909              	.LFE60:
 911              		.global	__aeabi_idiv
 912              		.align	2
 913              		.global	armwave_generate
 914              		.syntax unified
 915              		.arm
 916              		.fpu vfp
 918              	armwave_generate:
 919              	.LFB61:
 185:armwave.c     **** 
 186:armwave.c     **** /*
 187:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 188:armwave.c     ****  */
 189:armwave.c     **** void armwave_generate()
 190:armwave.c     **** {
 920              		.loc 1 190 1 is_stmt 1 view -0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 191:armwave.c     ****     uint32_t yy;
 924              		.loc 1 191 5 view .LVU239
 192:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 925              		.loc 1 192 5 view .LVU240
 926              	.LVL58:
 193:armwave.c     **** 
 194:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 927              		.loc 1 194 5 view .LVU241
 928              	@ armwave.c:190: {
 190:armwave.c     ****     uint32_t yy;
 929              		.loc 1 190 1 is_stmt 0 view .LVU242
 930 03f4 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 931              		.cfi_def_cfa_offset 20
 932              		.cfi_offset 4, -20
 933              		.cfi_offset 5, -16
 934              		.cfi_offset 6, -12
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937              	@ armwave.c:194:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 938              		.loc 1 194 5 view .LVU243
 939 03f8 0010A0E3 		mov	r1, #0	@,
 940              	@ armwave.c:194:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 941              		.loc 1 194 58 view .LVU244
 942 03fc 84509FE5 		ldr	r5, .L56	@ tmp154,
 943              	@ armwave.c:190: {
 190:armwave.c     ****     uint32_t yy;
 944              		.loc 1 190 1 view .LVU245
 945 0400 0CD04DE2 		sub	sp, sp, #12	@,,
 946              		.cfi_def_cfa_offset 32
 947              	@ armwave.c:194:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 948              		.loc 1 194 5 view .LVU246
 949 0404 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 950 0408 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 951 040c FEFFFFEB 		bl	memset		@
 952              	.LVL59:
 195:armwave.c     **** 
 196:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 953              		.loc 1 196 5 is_stmt 1 view .LVU247
 954              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 955              		.loc 1 196 68 is_stmt 0 view .LVU248
 956 0410 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 957              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 958              		.loc 1 196 51 view .LVU249
 959 0414 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 960 0418 0610A0E1 		mov	r1, r6	@, _13
 961 041c FEFFFFEB 		bl	__aeabi_idiv		@
 962              	.LVL60:
 963              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 964              		.loc 1 196 5 view .LVU250
 965 0420 000050E3 		cmp	r0, #0	@,
 966 0424 1500000A 		beq	.L48		@,
 967              	@ armwave.c:198:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 197:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 198:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 968              		.loc 1 198 9 view .LVU251
 969 0428 5C709FE5 		ldr	r7, .L56+4	@ tmp155,
 970              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 196:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 971              		.loc 1 196 12 view .LVU252
 972 042c 0040A0E3 		mov	r4, #0	@ yy,
 973              	.LVL61:
 974              	.L50:
 975              		.loc 1 198 9 is_stmt 1 discriminator 3 view .LVU253
 976 0430 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 977              	@ armwave.c:200:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 199:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 200:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 978              		.loc 1 200 48 is_stmt 0 discriminator 3 view .LVU254
 979 0434 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 980              	@ armwave.c:198:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 198:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 981              		.loc 1 198 9 discriminator 3 view .LVU255
 982 0438 0630A0E1 		mov	r3, r6	@, _13
 983 043c 0120A0E1 		mov	r2, r1	@, _5
 984              	@ armwave.c:200:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 985              		.loc 1 200 48 discriminator 3 view .LVU256
 986 0440 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 987              	@ armwave.c:198:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 198:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 988              		.loc 1 198 9 discriminator 3 view .LVU257
 989 0444 0700A0E1 		mov	r0, r7	@, tmp155
 990 0448 0410A0E1 		mov	r1, r4	@, yy
 991 044c 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 992 0450 00C08DE5 		str	ip, [sp]	@ tmp145,
 993 0454 FEFFFFEB 		bl	printf		@
 994              	.LVL62:
 201:armwave.c     **** 
 202:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 995              		.loc 1 202 9 is_stmt 1 discriminator 3 view .LVU258
 996              	@ armwave.c:202:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 997              		.loc 1 202 62 is_stmt 0 discriminator 3 view .LVU259
 998 0458 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 999              	@ armwave.c:202:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1000              		.loc 1 202 9 discriminator 3 view .LVU260
 1001 045c 940100E0 		mul	r0, r4, r1	@, yy,
 1002 0460 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1003              	.LVL63:
 203:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1004              		.loc 1 203 9 is_stmt 1 discriminator 3 view .LVU261
 204:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1005              		.loc 1 204 9 discriminator 3 view .LVU262
 1006              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 196:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1007              		.loc 1 196 68 is_stmt 0 discriminator 3 view .LVU263
 1008 0464 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1009              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 196:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1010              		.loc 1 196 51 discriminator 3 view .LVU264
 1011 0468 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1012 046c 0610A0E1 		mov	r1, r6	@, _13
 1013 0470 FEFFFFEB 		bl	__aeabi_idiv		@
 1014              	.LVL64:
 1015              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 196:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1016              		.loc 1 196 86 discriminator 3 view .LVU265
 1017 0474 014084E2 		add	r4, r4, #1	@ yy, yy,
 1018              	.LVL65:
 1019              	@ armwave.c:196:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 196:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1020              		.loc 1 196 5 discriminator 3 view .LVU266
 1021 0478 040050E1 		cmp	r0, r4	@, yy
 1022 047c EBFFFF8A 		bhi	.L50		@,
 1023              	.LVL66:
 1024              	.L48:
 1025              	@ armwave.c:213: }
 205:armwave.c     ****     }
 206:armwave.c     **** 
 207:armwave.c     ****     /*
 208:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 209:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 210:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 211:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 212:armwave.c     ****     */
 213:armwave.c     **** }
 1026              		.loc 1 213 1 view .LVU267
 1027 0480 0CD08DE2 		add	sp, sp, #12	@,,
 1028              		.cfi_def_cfa_offset 20
 1029              		@ sp needed	@
 1030 0484 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1031              	.L57:
 1032              		.align	2
 1033              	.L56:
 1034 0488 00000000 		.word	g_armwave_state
 1035 048c 00010000 		.word	.LC7
 1036              		.cfi_endproc
 1037              	.LFE61:
 1039              		.align	2
 1040              		.global	armwave_setup_render
 1041              		.syntax unified
 1042              		.arm
 1043              		.fpu vfp
 1045              	armwave_setup_render:
 1046              	.LVL67:
 1047              	.LFB62:
 214:armwave.c     **** 
 215:armwave.c     **** /*
 216:armwave.c     ****  * Setup the renderer with passed parameters.
 217:armwave.c     ****  */
 218:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 219:armwave.c     **** {
 1048              		.loc 1 219 1 is_stmt 1 view -0
 1049              		.cfi_startproc
 1050              		@ args = 12, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 220:armwave.c     ****     uint32_t length, xx;
 1052              		.loc 1 220 5 view .LVU269
 221:armwave.c     ****     float points_per_pixel;
 1053              		.loc 1 221 5 view .LVU270
 222:armwave.c     **** 
 223:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1054              		.loc 1 223 5 view .LVU271
 1055              	@ armwave.c:219: {
 219:armwave.c     ****     uint32_t length, xx;
 1056              		.loc 1 219 1 is_stmt 0 view .LVU272
 1057 0490 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1058              		.cfi_def_cfa_offset 28
 1059              		.cfi_offset 4, -28
 1060              		.cfi_offset 5, -24
 1061              		.cfi_offset 6, -20
 1062              		.cfi_offset 7, -16
 1063              		.cfi_offset 8, -12
 1064              		.cfi_offset 9, -8
 1065              		.cfi_offset 14, -4
 1066 0494 14D04DE2 		sub	sp, sp, #20	@,,
 1067              		.cfi_def_cfa_offset 48
 1068              	@ armwave.c:219: {
 219:armwave.c     ****     uint32_t length, xx;
 1069              		.loc 1 219 1 view .LVU273
 1070 0498 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1071 049c D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1072 04a0 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1073 04a4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1074              	@ armwave.c:223:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1075              		.loc 1 223 5 view .LVU274
 1076 04a8 00308DE5 		str	r3, [sp]	@ wave_stride,
 1077              	@ armwave.c:219: {
 219:armwave.c     ****     uint32_t length, xx;
 1078              		.loc 1 219 1 view .LVU275
 1079 04ac 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1080 04b0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1081              	@ armwave.c:223:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1082              		.loc 1 223 5 view .LVU276
 1083 04b4 F460CDE1 		strd	r6, [sp, #4]	@,,
 1084 04b8 0230A0E1 		mov	r3, r2	@, waves_max
 1085              	.LVL68:
 1086              		.loc 1 223 5 view .LVU277
 1087 04bc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1088 04c0 0120A0E1 		mov	r2, r1	@, end_point
 1089              	.LVL69:
 1090              		.loc 1 223 5 view .LVU278
 1091 04c4 0010A0E1 		mov	r1, r0	@, start_point
 1092              	.LVL70:
 1093              		.loc 1 223 5 view .LVU279
 1094 04c8 8C019FE5 		ldr	r0, .L68+12	@,
 1095              	.LVL71:
 1096              		.loc 1 223 5 view .LVU280
 1097 04cc FEFFFFEB 		bl	printf		@
 1098              	.LVL72:
 224:armwave.c     **** 
 225:armwave.c     ****     // TODO these asserts should instead raise PyExc
 226:armwave.c     ****     assert(start_point < end_point);
 1099              		.loc 1 226 5 is_stmt 1 view .LVU281
 1100 04d0 050054E1 		cmp	r4, r5	@ start_point, end_point
 1101 04d4 5100002A 		bcs	.L66		@,
 227:armwave.c     **** 
 228:armwave.c     ****     /*
 229:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 230:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 231:armwave.c     ****     if(target_height == 256) {
 232:armwave.c     ****         g_armwave_state.row_shift = 8;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 234:armwave.c     ****     } else if(target_height == 512) {
 235:armwave.c     ****         g_armwave_state.row_shift = 9;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 237:armwave.c     ****     } else if(target_height == 1024) {
 238:armwave.c     ****         g_armwave_state.row_shift = 10;
 239:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 240:armwave.c     ****     } else if(target_height == 2048) {
 241:armwave.c     ****         g_armwave_state.row_shift = 11;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 243:armwave.c     ****     }
 244:armwave.c     ****     */
 245:armwave.c     **** 
 246:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 247:armwave.c     ****     g_armwave_state.xstride = target_height;
 1102              		.loc 1 247 5 view .LVU282
 1103              	@ armwave.c:258:     g_armwave_state.wave_length = end_point - start_point;
 248:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 249:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 250:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 251:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 252:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 253:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 254:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 255:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 256:armwave.c     ****     g_armwave_state.target_width = target_width;
 257:armwave.c     ****     g_armwave_state.target_height = target_height;
 258:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1104              		.loc 1 258 45 is_stmt 0 view .LVU283
 1105 04d8 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1106              	.LVL73:
 1107              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 259:armwave.c     **** 
 260:armwave.c     ****     // Calculate compound scaler
 261:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 262:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1108              		.loc 1 262 48 view .LVU284
 1109 04dc 5B5A9FED 		vldr.32	s10, .L68	@ tmp187,
 1110 04e0 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1111              	@ armwave.c:248:     g_armwave_state.vscale_frac = target_height / 255.0f;
 248:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1112              		.loc 1 248 49 view .LVU285
 1113 04e4 5A7A9FED 		vldr.32	s14, .L68+4	@ tmp165,
 1114              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1115              		.loc 1 262 81 view .LVU286
 1116 04e8 5A6A9FED 		vldr.32	s12, .L68+8	@ tmp191,
 1117              	@ armwave.c:255:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 255:armwave.c     ****     g_armwave_state.target_width = target_width;
 1118              		.loc 1 255 90 view .LVU287
 1119 04ec 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1120              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1121              		.loc 1 262 48 view .LVU288
 1122 04f0 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1123              	@ armwave.c:248:     g_armwave_state.vscale_frac = target_height / 255.0f;
 248:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1124              		.loc 1 248 49 view .LVU289
 1125 04f4 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1126              	@ armwave.c:247:     g_armwave_state.xstride = target_height;
 247:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1127              		.loc 1 247 29 view .LVU290
 1128 04f8 60419FE5 		ldr	r4, .L68+16	@ tmp222,
 1129              	.LVL74:
 1130              	@ armwave.c:253:     g_armwave_state.size = target_height * target_width;
 253:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1131              		.loc 1 253 42 view .LVU291
 1132 04fc 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1133              	@ armwave.c:248:     g_armwave_state.vscale_frac = target_height / 255.0f;
 248:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1134              		.loc 1 248 49 view .LVU292
 1135 0500 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1136              	@ armwave.c:255:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 255:armwave.c     ****     g_armwave_state.target_width = target_width;
 1137              		.loc 1 255 95 view .LVU293
 1138 0504 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1139              	@ armwave.c:264:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 263:armwave.c     **** 
 264:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1140              		.loc 1 264 5 view .LVU294
 1141 0508 0128A0E3 		mov	r2, #65536	@ tmp194,
 1142              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 262:armwave.c     **** 
 1143              		.loc 1 262 48 view .LVU295
 1144 050c 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1145              	@ armwave.c:264:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1146              		.loc 1 264 5 view .LVU296
 1147 0510 04508DE5 		str	r5, [sp, #4]	@ _13,
 1148 0514 00608DE5 		str	r6, [sp]	@ target_width,
 1149              	@ armwave.c:255:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 255:armwave.c     ****     g_armwave_state.target_width = target_width;
 1150              		.loc 1 255 95 view .LVU297
 1151 0518 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1152              	@ armwave.c:247:     g_armwave_state.xstride = target_height;
 247:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1153              		.loc 1 247 29 view .LVU298
 1154 051c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 248:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1155              		.loc 1 248 5 is_stmt 1 view .LVU299
 1156              	@ armwave.c:250:     g_armwave_state.wave_stride = wave_stride;
 250:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1157              		.loc 1 250 33 is_stmt 0 view .LVU300
 1158 0520 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1159              	@ armwave.c:251:     g_armwave_state.waves_max = waves_max;
 251:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1160              		.loc 1 251 31 view .LVU301
 1161 0524 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1162              	@ armwave.c:252:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 252:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1163              		.loc 1 252 27 view .LVU302
 1164 0528 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1165              	@ armwave.c:257:     g_armwave_state.target_height = target_height;
 257:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1166              		.loc 1 257 35 view .LVU303
 1167 052c F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1168              	@ armwave.c:264:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1169              		.loc 1 264 5 view .LVU304
 1170 0530 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1171              	@ armwave.c:254:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 254:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1172              		.loc 1 254 37 view .LVU305
 1173 0534 022CA0E3 		mov	r2, #512	@ tmp175,
 1174              	@ armwave.c:253:     g_armwave_state.size = target_height * target_width;
 253:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1175              		.loc 1 253 26 view .LVU306
 1176 0538 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1177              	@ armwave.c:254:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 254:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1178              		.loc 1 254 37 view .LVU307
 1179 053c 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1180              	@ armwave.c:264:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1181              		.loc 1 264 5 view .LVU308
 1182 0540 0310A0E1 		mov	r1, r3	@, tmp180
 1183              	@ armwave.c:255:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 255:armwave.c     ****     g_armwave_state.target_width = target_width;
 1184              		.loc 1 255 34 view .LVU309
 1185 0544 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1186              	@ armwave.c:248:     g_armwave_state.vscale_frac = target_height / 255.0f;
 248:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1187              		.loc 1 248 49 view .LVU310
 1188 0548 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1189              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 262:armwave.c     **** 
 1190              		.loc 1 262 40 view .LVU311
 1191 054c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1192              	@ armwave.c:258:     g_armwave_state.wave_length = end_point - start_point;
 258:armwave.c     **** 
 1193              		.loc 1 258 33 view .LVU312
 1194 0550 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1195              	@ armwave.c:264:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1196              		.loc 1 264 5 view .LVU313
 1197 0554 08019FE5 		ldr	r0, .L68+20	@,
 1198              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 262:armwave.c     **** 
 1199              		.loc 1 262 40 view .LVU314
 1200 0558 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1201 055c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1202              	@ armwave.c:249:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 249:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1203              		.loc 1 249 30 view .LVU315
 1204 0560 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1205              	@ armwave.c:248:     g_armwave_state.vscale_frac = target_height / 255.0f;
 248:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1206              		.loc 1 248 33 view .LVU316
 1207 0564 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 249:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1208              		.loc 1 249 5 is_stmt 1 view .LVU317
 1209              	@ armwave.c:262:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 262:armwave.c     **** 
 1210              		.loc 1 262 81 is_stmt 0 view .LVU318
 1211 0568 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1212              	@ armwave.c:249:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 249:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1213              		.loc 1 249 30 view .LVU319
 1214 056c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 250:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1215              		.loc 1 250 5 is_stmt 1 view .LVU320
 251:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1216              		.loc 1 251 5 view .LVU321
 252:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1217              		.loc 1 252 5 view .LVU322
 253:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1218              		.loc 1 253 5 view .LVU323
 254:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1219              		.loc 1 254 5 view .LVU324
 255:armwave.c     ****     g_armwave_state.target_width = target_width;
 1220              		.loc 1 255 5 view .LVU325
 256:armwave.c     ****     g_armwave_state.target_height = target_height;
 1221              		.loc 1 256 5 view .LVU326
 257:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1222              		.loc 1 257 5 view .LVU327
 258:armwave.c     **** 
 1223              		.loc 1 258 5 view .LVU328
 261:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1224              		.loc 1 261 5 view .LVU329
 1225              	@ armwave.c:261:     g_armwave_state.cmp_x_bitdepth_scale = \
 261:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1226              		.loc 1 261 42 is_stmt 0 view .LVU330
 1227 0570 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1228 0574 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1229              	@ armwave.c:264:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1230              		.loc 1 264 5 view .LVU331
 1231 0578 903A17EE 		vmov	r3, s15	@ int	@, _20
 1232              	@ armwave.c:261:     g_armwave_state.cmp_x_bitdepth_scale = \
 261:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1233              		.loc 1 261 42 view .LVU332
 1234 057c 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1235              		.loc 1 264 5 is_stmt 1 view .LVU333
 1236 0580 0C20A0E1 		mov	r2, ip	@, tmp3
 1237 0584 FEFFFFEB 		bl	printf		@
 1238              	.LVL75:
 265:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 266:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 267:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 268:armwave.c     **** 
 269:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 270:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 271:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 272:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1239              		.loc 1 272 5 view .LVU334
 1240              	@ armwave.c:274:     if(g_armwave_state.ch1_buffer != NULL)
 273:armwave.c     **** 
 274:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1241              		.loc 1 274 23 is_stmt 0 view .LVU335
 1242 0588 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1243              	@ armwave.c:272:     g_armwave_state.slice_height = 64; // 64;  
 272:armwave.c     **** 
 1244              		.loc 1 272 34 view .LVU336
 1245 058c 4030A0E3 		mov	r3, #64	@ tmp196,
 1246              	@ armwave.c:274:     if(g_armwave_state.ch1_buffer != NULL)
 1247              		.loc 1 274 7 view .LVU337
 1248 0590 000050E3 		cmp	r0, #0	@ _21,
 1249              	@ armwave.c:272:     g_armwave_state.slice_height = 64; // 64;  
 272:armwave.c     **** 
 1250              		.loc 1 272 34 view .LVU338
 1251 0594 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1252              		.loc 1 274 5 is_stmt 1 view .LVU339
 1253              	@ armwave.c:274:     if(g_armwave_state.ch1_buffer != NULL)
 1254              		.loc 1 274 7 is_stmt 0 view .LVU340
 1255 0598 0000000A 		beq	.L60		@,
 275:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1256              		.loc 1 275 9 is_stmt 1 view .LVU341
 1257 059c FEFFFFEB 		bl	free		@
 1258              	.LVL76:
 1259              	.L60:
 276:armwave.c     **** 
 277:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1260              		.loc 1 277 5 view .LVU342
 1261              	@ armwave.c:277:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1262              		.loc 1 277 56 is_stmt 0 view .LVU343
 1263 05a0 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1264              	.LVL77:
 1265              	@ armwave.c:277:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1266              		.loc 1 277 34 view .LVU344
 1267 05a4 0110A0E3 		mov	r1, #1	@,
 1268 05a8 0800A0E1 		mov	r0, r8	@, _22
 1269 05ac FEFFFFEB 		bl	calloc		@
 1270              	.LVL78:
 1271              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer == NULL) {
 278:armwave.c     **** 
 279:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1272              		.loc 1 279 7 view .LVU345
 1273 05b0 000050E3 		cmp	r0, #0	@ tmp199,
 1274              	@ armwave.c:277:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 277:armwave.c     **** 
 1275              		.loc 1 277 34 view .LVU346
 1276 05b4 0070A0E1 		mov	r7, r0	@ tmp199,
 1277              	@ armwave.c:277:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 277:armwave.c     **** 
 1278              		.loc 1 277 32 view .LVU347
 1279 05b8 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1280              		.loc 1 279 5 is_stmt 1 view .LVU348
 1281              	@ armwave.c:279:     if(g_armwave_state.ch1_buffer == NULL) {
 1282              		.loc 1 279 7 is_stmt 0 view .LVU349
 1283 05bc 1C00000A 		beq	.L67		@,
 280:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 281:armwave.c     ****         exit(-1);
 282:armwave.c     ****     }
 283:armwave.c     **** 
 284:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 285:armwave.c     ****     length = end_point - start_point;
 1284              		.loc 1 285 5 is_stmt 1 view .LVU350
 1285              	.LVL79:
 286:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1286              		.loc 1 286 5 view .LVU351
 287:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1287              		.loc 1 287 5 view .LVU352
 1288              	@ armwave.c:286:     points_per_pixel = length / ((float)(target_width));
 286:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1289              		.loc 1 286 31 is_stmt 0 view .LVU353
 1290 05c0 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1291              	@ armwave.c:286:     points_per_pixel = length / ((float)(target_width));
 286:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1292              		.loc 1 286 34 view .LVU354
 1293 05c4 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1294              	@ armwave.c:287:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1295              		.loc 1 287 60 view .LVU355
 1296 05c8 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1297              	@ armwave.c:301:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 288:armwave.c     **** 
 289:armwave.c     ****     /*
 290:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 291:armwave.c     **** 
 292:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 293:armwave.c     **** 
 294:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 295:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 296:armwave.c     **** 
 297:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 298:armwave.c     ****     }
 299:armwave.c     ****     */
 300:armwave.c     **** 
 301:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1298              		.loc 1 301 34 view .LVU356
 1299 05cc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1300              	@ armwave.c:286:     points_per_pixel = length / ((float)(target_width));
 286:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1301              		.loc 1 286 31 view .LVU357
 1302 05d0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1303              	@ armwave.c:286:     points_per_pixel = length / ((float)(target_width));
 286:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1304              		.loc 1 286 34 view .LVU358
 1305 05d4 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1306              	@ armwave.c:287:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 287:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1307              		.loc 1 287 60 view .LVU359
 1308 05d8 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1309              	@ armwave.c:301:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1310              		.loc 1 301 34 view .LVU360
 1311 05dc 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1312              	@ armwave.c:286:     points_per_pixel = length / ((float)(target_width));
 286:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1313              		.loc 1 286 22 view .LVU361
 1314 05e0 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1315              	.LVL80:
 1316              	@ armwave.c:287:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 287:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1317              		.loc 1 287 60 view .LVU362
 1318 05e4 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1319              	@ armwave.c:287:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 287:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1320              		.loc 1 287 41 view .LVU363
 1321 05e8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1322 05ec 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1323              		.loc 1 301 5 is_stmt 1 view .LVU364
 1324              	@ armwave.c:301:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1325              		.loc 1 301 34 is_stmt 0 view .LVU365
 1326 05f0 FEFFFFEB 		bl	malloc		@
 1327              	.LVL81:
 1328              	@ armwave.c:303:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 302:armwave.c     **** 
 303:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1329              		.loc 1 303 5 view .LVU366
 1330 05f4 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1331 05f8 0710A0E1 		mov	r1, r7	@, tmp199
 1332 05fc 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1333 0600 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1334              	@ armwave.c:301:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 301:armwave.c     **** 
 1335              		.loc 1 301 34 view .LVU367
 1336 0604 00C0A0E1 		mov	ip, r0	@ tmp215,
 1337              	@ armwave.c:303:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1338              		.loc 1 303 5 view .LVU368
 1339 0608 0030A0E1 		mov	r3, r0	@, tmp215
 1340              	@ armwave.c:301:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 301:armwave.c     **** 
 1341              		.loc 1 301 32 view .LVU369
 1342 060c 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1343              		.loc 1 303 5 is_stmt 1 view .LVU370
 1344 0610 50009FE5 		ldr	r0, .L68+24	@,
 1345              	@ armwave.c:310: }
 304:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 305:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 306:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 307:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 308:armwave.c     **** 
 309:armwave.c     ****      //malloc_stats();
 310:armwave.c     **** }
 1346              		.loc 1 310 1 is_stmt 0 view .LVU371
 1347 0614 14D08DE2 		add	sp, sp, #20	@,,
 1348              		.cfi_remember_state
 1349              		.cfi_def_cfa_offset 28
 1350              		@ sp needed	@
 1351 0618 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1352              		.cfi_restore 14
 1353              		.cfi_restore 9
 1354              		.cfi_restore 8
 1355              		.cfi_restore 7
 1356              		.cfi_restore 6
 1357              		.cfi_restore 5
 1358              		.cfi_restore 4
 1359              		.cfi_def_cfa_offset 0
 1360              	.LVL82:
 1361              	@ armwave.c:303:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 303:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1362              		.loc 1 303 5 view .LVU372
 1363 061c FEFFFFEA 		b	printf		@
 1364              	.LVL83:
 1365              	.L66:
 1366              		.cfi_restore_state
 226:armwave.c     **** 
 1367              		.loc 1 226 5 is_stmt 1 discriminator 1 view .LVU373
 1368 0620 44309FE5 		ldr	r3, .L68+28	@,
 1369 0624 E220A0E3 		mov	r2, #226	@,
 1370 0628 40109FE5 		ldr	r1, .L68+32	@,
 1371 062c 40009FE5 		ldr	r0, .L68+36	@,
 1372 0630 FEFFFFEB 		bl	__assert_fail		@
 1373              	.LVL84:
 1374              	.L67:
 280:armwave.c     ****         exit(-1);
 1375              		.loc 1 280 9 view .LVU374
 1376 0634 3C309FE5 		ldr	r3, .L68+40	@ tmp202,
 1377 0638 0820A0E1 		mov	r2, r8	@, _22
 1378 063c 38109FE5 		ldr	r1, .L68+44	@,
 1379 0640 000093E5 		ldr	r0, [r3]	@, stderr
 1380 0644 FEFFFFEB 		bl	fprintf		@
 1381              	.LVL85:
 281:armwave.c     ****     }
 1382              		.loc 1 281 9 view .LVU375
 1383 0648 0000E0E3 		mvn	r0, #0	@,
 1384 064c FEFFFFEB 		bl	exit		@
 1385              	.LVL86:
 1386              	.L69:
 1387              		.align	2
 1388              	.L68:
 1389 0650 0000803F 		.word	1065353216
 1390 0654 00007F43 		.word	1132396544
 1391 0658 00008047 		.word	1199570944
 1392 065c 34010000 		.word	.LC8
 1393 0660 00000000 		.word	g_armwave_state
 1394 0664 84010000 		.word	.LC11
 1395 0668 28020000 		.word	.LC13
 1396 066c 00000000 		.word	.LANCHOR0
 1397 0670 60010000 		.word	.LC9
 1398 0674 6C010000 		.word	.LC10
 1399 0678 00000000 		.word	stderr
 1400 067c E4010000 		.word	.LC12
 1401              		.cfi_endproc
 1402              	.LFE62:
 1404              		.align	2
 1405              		.global	armwave_set_wave_pointer
 1406              		.syntax unified
 1407              		.arm
 1408              		.fpu vfp
 1410              	armwave_set_wave_pointer:
 1411              	.LVL87:
 1412              	.LFB63:
 311:armwave.c     **** 
 312:armwave.c     **** /*
 313:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 314:armwave.c     ****  * in the future.
 315:armwave.c     ****  */
 316:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 317:armwave.c     **** {
 1413              		.loc 1 317 1 view -0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 0
 1416              		@ frame_needed = 0, uses_anonymous_args = 0
 318:armwave.c     ****     assert(wave_buffer != NULL);
 1417              		.loc 1 318 5 view .LVU377
 1418 0680 000050E3 		cmp	r0, #0	@ wave_buffer
 1419              		.loc 1 318 5 is_stmt 0 view .LVU378
 1420 0684 0200000A 		beq	.L75		@,
 319:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1421              		.loc 1 319 5 is_stmt 1 view .LVU379
 1422              	@ armwave.c:319:     g_armwave_state.wave_buffer = wave_buffer;
 1423              		.loc 1 319 33 is_stmt 0 view .LVU380
 1424 0688 1C309FE5 		ldr	r3, .L76	@ tmp116,
 1425 068c 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1426 0690 1EFF2FE1 		bx	lr	@
 1427              	.L75:
 318:armwave.c     ****     assert(wave_buffer != NULL);
 1428              		.loc 1 318 5 is_stmt 1 discriminator 1 view .LVU381
 1429              	@ armwave.c:317: {
 317:armwave.c     ****     assert(wave_buffer != NULL);
 1430              		.loc 1 317 1 is_stmt 0 discriminator 1 view .LVU382
 1431 0694 10402DE9 		push	{r4, lr}	@
 1432              		.cfi_def_cfa_offset 8
 1433              		.cfi_offset 4, -8
 1434              		.cfi_offset 14, -4
 1435              	@ armwave.c:318:     assert(wave_buffer != NULL);
 318:armwave.c     ****     assert(wave_buffer != NULL);
 1436              		.loc 1 318 5 discriminator 1 view .LVU383
 1437 0698 10309FE5 		ldr	r3, .L76+4	@,
 1438 069c 10209FE5 		ldr	r2, .L76+8	@,
 1439 06a0 10109FE5 		ldr	r1, .L76+12	@,
 1440 06a4 10009FE5 		ldr	r0, .L76+16	@,
 1441              	.LVL88:
 318:armwave.c     ****     assert(wave_buffer != NULL);
 1442              		.loc 1 318 5 discriminator 1 view .LVU384
 1443 06a8 FEFFFFEB 		bl	__assert_fail		@
 1444              	.LVL89:
 1445              	.L77:
 1446              		.align	2
 1447              	.L76:
 1448 06ac 00000000 		.word	g_armwave_state
 1449 06b0 18000000 		.word	.LANCHOR0+24
 1450 06b4 3E010000 		.word	318
 1451 06b8 60010000 		.word	.LC9
 1452 06bc 4C020000 		.word	.LC14
 1453              		.cfi_endproc
 1454              	.LFE63:
 1456              		.align	2
 1457              		.global	armwave_set_wave_pointer_as_testbuf
 1458              		.syntax unified
 1459              		.arm
 1460              		.fpu vfp
 1462              	armwave_set_wave_pointer_as_testbuf:
 1463              	.LVL90:
 1464              	.LFB64:
 320:armwave.c     **** }
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 324:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 327:armwave.c     **** {
 1465              		.loc 1 327 1 is_stmt 1 view -0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 0
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 1469              		@ link register save eliminated.
 328:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1470              		.loc 1 328 5 view .LVU386
 1471              	@ armwave.c:328:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1472              		.loc 1 328 29 is_stmt 0 view .LVU387
 1473 06c0 24309FE5 		ldr	r3, .L81	@ tmp117,
 1474              	@ armwave.c:328:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1475              		.loc 1 328 7 view .LVU388
 1476 06c4 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1477 06c8 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1478 06cc 0400003A 		bcc	.L80		@,
 329:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 330:armwave.c     ****         return;
 331:armwave.c     ****     }
 332:armwave.c     **** 
 333:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1479              		.loc 1 333 5 is_stmt 1 view .LVU389
 1480              	@ armwave.c:333:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1481              		.loc 1 333 111 is_stmt 0 view .LVU390
 1482 06d0 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1483              	@ armwave.c:333:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1484              		.loc 1 333 68 view .LVU391
 1485 06d4 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1486 06d8 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1487              	.LVL91:
 1488              	@ armwave.c:333:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1489              		.loc 1 333 33 view .LVU392
 1490 06dc 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1491              	@ armwave.c:334: }
 334:armwave.c     **** }
 1492              		.loc 1 334 1 view .LVU393
 1493 06e0 1EFF2FE1 		bx	lr	@
 1494              	.LVL92:
 1495              	.L80:
 329:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1496              		.loc 1 329 9 is_stmt 1 view .LVU394
 1497 06e4 04009FE5 		ldr	r0, .L81+4	@,
 1498              	.LVL93:
 329:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1499              		.loc 1 329 9 is_stmt 0 view .LVU395
 1500 06e8 FEFFFFEA 		b	puts		@
 1501              	.LVL94:
 1502              	.L82:
 1503              		.align	2
 1504              	.L81:
 1505 06ec 00000000 		.word	g_armwave_state
 1506 06f0 60020000 		.word	.LC15
 1507              		.cfi_endproc
 1508              	.LFE64:
 1510              		.align	2
 1511              		.global	armwave_set_wave_pointer_u32
 1512              		.syntax unified
 1513              		.arm
 1514              		.fpu vfp
 1516              	armwave_set_wave_pointer_u32:
 1517              	.LVL95:
 1518              	.LFB65:
 335:armwave.c     **** 
 336:armwave.c     **** /*
 337:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 338:armwave.c     ****  * disjointed buffers in the future.
 339:armwave.c     ****  */
 340:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 341:armwave.c     **** {
 1519              		.loc 1 341 1 is_stmt 1 view -0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 0
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 342:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1523              		.loc 1 342 5 view .LVU397
 1524 06f4 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1525              		.loc 1 342 5 is_stmt 0 view .LVU398
 1526 06f8 0200000A 		beq	.L88		@,
 343:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1527              		.loc 1 343 5 is_stmt 1 view .LVU399
 1528              	@ armwave.c:343:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1529              		.loc 1 343 33 is_stmt 0 view .LVU400
 1530 06fc 1C309FE5 		ldr	r3, .L89	@ tmp117,
 1531 0700 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1532 0704 1EFF2FE1 		bx	lr	@
 1533              	.L88:
 342:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1534              		.loc 1 342 5 is_stmt 1 discriminator 1 view .LVU401
 1535              	@ armwave.c:341: {
 341:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1536              		.loc 1 341 1 is_stmt 0 discriminator 1 view .LVU402
 1537 0708 10402DE9 		push	{r4, lr}	@
 1538              		.cfi_def_cfa_offset 8
 1539              		.cfi_offset 4, -8
 1540              		.cfi_offset 14, -4
 1541              	@ armwave.c:342:     assert(wave_buffer_ptr != 0);
 342:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1542              		.loc 1 342 5 discriminator 1 view .LVU403
 1543 070c 10309FE5 		ldr	r3, .L89+4	@,
 1544 0710 10209FE5 		ldr	r2, .L89+8	@,
 1545 0714 10109FE5 		ldr	r1, .L89+12	@,
 1546 0718 10009FE5 		ldr	r0, .L89+16	@,
 1547              	.LVL96:
 342:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1548              		.loc 1 342 5 discriminator 1 view .LVU404
 1549 071c FEFFFFEB 		bl	__assert_fail		@
 1550              	.LVL97:
 1551              	.L90:
 1552              		.align	2
 1553              	.L89:
 1554 0720 00000000 		.word	g_armwave_state
 1555 0724 34000000 		.word	.LANCHOR0+52
 1556 0728 56010000 		.word	342
 1557 072c 60010000 		.word	.LC9
 1558 0730 9C020000 		.word	.LC16
 1559              		.cfi_endproc
 1560              	.LFE65:
 1562              		.align	2
 1563              		.global	armwave_clear_buffer
 1564              		.syntax unified
 1565              		.arm
 1566              		.fpu vfp
 1568              	armwave_clear_buffer:
 1569              	.LVL98:
 1570              	.LFB66:
 344:armwave.c     **** }
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 350:armwave.c     **** {
 1571              		.loc 1 350 1 is_stmt 1 view -0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 0
 1574              		@ frame_needed = 0, uses_anonymous_args = 0
 1575              		@ link register save eliminated.
 351:armwave.c     ****     // Flags ignored, only one buffer cleared
 352:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1576              		.loc 1 352 5 view .LVU406
 1577              	@ armwave.c:352:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1578              		.loc 1 352 58 is_stmt 0 view .LVU407
 1579 0734 0C309FE5 		ldr	r3, .L92	@ tmp114,
 1580              	@ armwave.c:352:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1581              		.loc 1 352 5 view .LVU408
 1582 0738 0010A0E3 		mov	r1, #0	@,
 1583 073c 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1584 0740 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1585              	.LVL99:
 1586              		.loc 1 352 5 view .LVU409
 1587 0744 FEFFFFEA 		b	memset		@
 1588              	.LVL100:
 1589              	.L93:
 1590              		.align	2
 1591              	.L92:
 1592 0748 00000000 		.word	g_armwave_state
 1593              		.cfi_endproc
 1594              	.LFE66:
 1596              		.align	2
 1597              		.global	armwave_set_channel_colour
 1598              		.syntax unified
 1599              		.arm
 1600              		.fpu vfp
 1602              	armwave_set_channel_colour:
 1603              	.LVL101:
 1604              	.LFB67:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 359:armwave.c     **** {
 1605              		.loc 1 359 1 is_stmt 1 view -0
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 0
 1608              		@ frame_needed = 0, uses_anonymous_args = 0
 1609              		@ link register save eliminated.
 360:armwave.c     ****     // Only 1ch supported for now
 361:armwave.c     ****     switch(ch) {
 1610              		.loc 1 361 5 view .LVU411
 1611 074c 010050E3 		cmp	r0, #1	@ ch,
 362:armwave.c     ****         case 1:
 363:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1612              		.loc 1 363 13 view .LVU412
 1613              	@ armwave.c:363:             g_armwave_state.ch1_color.r = r;
 1614              		.loc 1 363 41 is_stmt 0 view .LVU413
 1615 0750 0C009F05 		ldreq	r0, .L96	@ tmp117,
 1616              	.LVL102:
 1617              		.loc 1 363 41 view .LVU414
 1618 0754 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 364:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1619              		.loc 1 364 13 is_stmt 1 view .LVU415
 1620              	@ armwave.c:364:             g_armwave_state.ch1_color.g = g;
 1621              		.loc 1 364 41 is_stmt 0 view .LVU416
 1622 0758 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 365:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1623              		.loc 1 365 13 is_stmt 1 view .LVU417
 1624              	@ armwave.c:365:             g_armwave_state.ch1_color.b = b;
 1625              		.loc 1 365 41 is_stmt 0 view .LVU418
 1626 075c B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 366:armwave.c     ****             break;
 1627              		.loc 1 366 13 is_stmt 1 view .LVU419
 1628              	@ armwave.c:368: }
 367:armwave.c     ****     }
 368:armwave.c     **** }
 1629              		.loc 1 368 1 is_stmt 0 view .LVU420
 1630 0760 1EFF2FE1 		bx	lr	@
 1631              	.L97:
 1632              		.align	2
 1633              	.L96:
 1634 0764 00000000 		.word	g_armwave_state
 1635              		.cfi_endproc
 1636              	.LFE67:
 1638              		.align	2
 1639              		.global	armwave_dump_ppm_debug
 1640              		.syntax unified
 1641              		.arm
 1642              		.fpu vfp
 1644              	armwave_dump_ppm_debug:
 1645              	.LVL103:
 1646              	.LFB68:
 369:armwave.c     **** 
 370:armwave.c     **** /*
 371:armwave.c     ****  * Dump a ppm of a buffer to a file.
 372:armwave.c     ****  */
 373:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 374:armwave.c     **** {
 1647              		.loc 1 374 1 is_stmt 1 view -0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 375:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1651              		.loc 1 375 5 view .LVU422
 1652              	@ armwave.c:374: {
 374:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1653              		.loc 1 374 1 is_stmt 0 view .LVU423
 1654 0768 0130A0E1 		mov	r3, r1	@ fn, fn
 1655 076c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1656              		.cfi_def_cfa_offset 28
 1657              		.cfi_offset 4, -28
 1658              		.cfi_offset 5, -24
 1659              		.cfi_offset 6, -20
 1660              		.cfi_offset 7, -16
 1661              		.cfi_offset 8, -12
 1662              		.cfi_offset 9, -8
 1663              		.cfi_offset 14, -4
 1664 0770 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1665 0774 0CD04DE2 		sub	sp, sp, #12	@,,
 1666              		.cfi_def_cfa_offset 40
 1667              	@ armwave.c:375:     FILE *fp = fopen(fn, "wb");
 1668              		.loc 1 375 16 view .LVU424
 1669 0778 C4109FE5 		ldr	r1, .L106	@,
 1670              	.LVL104:
 1671              		.loc 1 375 16 view .LVU425
 1672 077c 0300A0E1 		mov	r0, r3	@, fn
 1673              	.LVL105:
 1674              		.loc 1 375 16 view .LVU426
 1675 0780 FEFFFFEB 		bl	fopen64		@
 1676              	.LVL106:
 1677              	@ armwave.c:382:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 376:armwave.c     ****     uint32_t data;
 377:armwave.c     ****     int xx, yy;
 378:armwave.c     **** 
 379:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 380:armwave.c     **** 
 381:armwave.c     ****     fputs("P3\n", fp);
 382:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1678              		.loc 1 382 5 view .LVU427
 1679 0784 BC609FE5 		ldr	r6, .L106+4	@ tmp150,
 1680              	@ armwave.c:381:     fputs("P3\n", fp);
 381:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1681              		.loc 1 381 5 view .LVU428
 1682 0788 0320A0E3 		mov	r2, #3	@,
 1683 078c 0110A0E3 		mov	r1, #1	@,
 1684              	@ armwave.c:375:     FILE *fp = fopen(fn, "wb");
 375:armwave.c     ****     uint32_t data;
 1685              		.loc 1 375 16 view .LVU429
 1686 0790 0070A0E1 		mov	r7, r0	@ fp,
 1687              	.LVL107:
 376:armwave.c     ****     uint32_t data;
 1688              		.loc 1 376 5 is_stmt 1 view .LVU430
 377:armwave.c     **** 
 1689              		.loc 1 377 5 view .LVU431
 381:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1690              		.loc 1 381 5 view .LVU432
 1691 0794 0030A0E1 		mov	r3, r0	@, fp
 1692 0798 AC009FE5 		ldr	r0, .L106+8	@,
 1693              	.LVL108:
 381:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1694              		.loc 1 381 5 is_stmt 0 view .LVU433
 1695 079c FEFFFFEB 		bl	fwrite		@
 1696              	.LVL109:
 1697              		.loc 1 382 5 is_stmt 1 view .LVU434
 1698 07a0 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1699 07a4 A4109FE5 		ldr	r1, .L106+12	@,
 1700 07a8 0700A0E1 		mov	r0, r7	@, fp
 1701 07ac FEFFFFEB 		bl	fprintf		@
 1702              	.LVL110:
 383:armwave.c     ****     fputs("255\n", fp);
 1703              		.loc 1 383 5 view .LVU435
 1704 07b0 0420A0E3 		mov	r2, #4	@,
 1705 07b4 0730A0E1 		mov	r3, r7	@, fp
 1706 07b8 0110A0E3 		mov	r1, #1	@,
 1707 07bc 90009FE5 		ldr	r0, .L106+16	@,
 1708 07c0 FEFFFFEB 		bl	fwrite		@
 1709              	.LVL111:
 384:armwave.c     **** 
 385:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1710              		.loc 1 385 5 view .LVU436
 1711              	@ armwave.c:385:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1712              		.loc 1 385 37 is_stmt 0 view .LVU437
 1713 07c4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1714              	@ armwave.c:385:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1715              		.loc 1 385 5 view .LVU438
 1716 07c8 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1717 07cc 180000DA 		ble	.L99		@,
 1718 07d0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1719              	@ armwave.c:390:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 387:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 388:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 389:armwave.c     **** 
 390:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1720              		.loc 1 390 13 view .LVU439
 1721 07d4 7C909FE5 		ldr	r9, .L106+20	@ tmp152,
 1722              	@ armwave.c:385:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1723              		.loc 1 385 12 view .LVU440
 1724 07d8 0050A0E3 		mov	r5, #0	@ yy,
 1725              	.LVL112:
 1726              	.L100:
 1727              	@ armwave.c:386:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1728              		.loc 1 386 9 view .LVU441
 1729 07dc 000053E3 		cmp	r3, #0	@ _13,
 1730              	@ armwave.c:386:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1731              		.loc 1 386 16 view .LVU442
 1732 07e0 0040A0C3 		movgt	r4, #0	@ xx,
 1733              	@ armwave.c:386:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1734              		.loc 1 386 9 view .LVU443
 1735 07e4 0F0000DA 		ble	.L102		@,
 1736              	.LVL113:
 1737              	.L101:
 387:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1738              		.loc 1 387 13 is_stmt 1 discriminator 3 view .LVU444
 1739              	@ armwave.c:387:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 387:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1740              		.loc 1 387 29 is_stmt 0 discriminator 3 view .LVU445
 1741 07e8 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1742              	@ armwave.c:390:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1743              		.loc 1 390 13 discriminator 3 view .LVU446
 1744 07ec 0910A0E1 		mov	r1, r9	@, tmp152
 1745 07f0 0700A0E1 		mov	r0, r7	@, fp
 1746              	@ armwave.c:387:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 387:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1747              		.loc 1 387 18 discriminator 3 view .LVU447
 1748 07f4 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1749              	.LVL114:
 1750              		.loc 1 390 13 is_stmt 1 discriminator 3 view .LVU448
 1751              	@ armwave.c:386:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1752              		.loc 1 386 58 is_stmt 0 discriminator 3 view .LVU449
 1753 07f8 014084E2 		add	r4, r4, #1	@ xx, xx,
 1754              	.LVL115:
 1755              	@ armwave.c:390:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1756              		.loc 1 390 81 discriminator 3 view .LVU450
 1757 07fc 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1758              	@ armwave.c:390:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1759              		.loc 1 390 61 discriminator 3 view .LVU451
 1760 0800 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1761              	@ armwave.c:390:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1762              		.loc 1 390 13 discriminator 3 view .LVU452
 1763 0804 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1764 0808 7330EFE6 		uxtb	r3, r3	@, tmp142
 1765 080c 00C08DE5 		str	ip, [sp]	@ tmp147,
 1766 0810 7220EFE6 		uxtb	r2, r2	@, data
 1767              	.LVL116:
 1768              		.loc 1 390 13 discriminator 3 view .LVU453
 1769 0814 FEFFFFEB 		bl	fprintf		@
 1770              	.LVL117:
 1771              	@ armwave.c:386:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1772              		.loc 1 386 41 discriminator 3 view .LVU454
 1773 0818 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1774              	@ armwave.c:386:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 386:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1775              		.loc 1 386 9 discriminator 3 view .LVU455
 1776 081c 040053E1 		cmp	r3, r4	@ _13, xx
 1777 0820 F0FFFFCA 		bgt	.L101		@,
 1778 0824 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1779              	.LVL118:
 1780              	.L102:
 1781              	@ armwave.c:385:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1782              		.loc 1 385 55 discriminator 2 view .LVU456
 1783 0828 015085E2 		add	r5, r5, #1	@ yy, yy,
 1784              	.LVL119:
 1785              	@ armwave.c:385:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 385:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1786              		.loc 1 385 5 discriminator 2 view .LVU457
 1787 082c 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1788 0830 E9FFFFBA 		blt	.L100		@,
 1789              	.LVL120:
 1790              	.L99:
 391:armwave.c     ****         }
 392:armwave.c     ****     }
 393:armwave.c     **** 
 394:armwave.c     ****     fclose(fp);
 1791              		.loc 1 394 5 is_stmt 1 view .LVU458
 1792 0834 0700A0E1 		mov	r0, r7	@, fp
 1793              	@ armwave.c:395: }
 395:armwave.c     **** }
 1794              		.loc 1 395 1 is_stmt 0 view .LVU459
 1795 0838 0CD08DE2 		add	sp, sp, #12	@,,
 1796              		.cfi_def_cfa_offset 28
 1797              		@ sp needed	@
 1798 083c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1799              		.cfi_restore 14
 1800              		.cfi_restore 9
 1801              		.cfi_restore 8
 1802              		.cfi_restore 7
 1803              		.cfi_restore 6
 1804              		.cfi_restore 5
 1805              		.cfi_restore 4
 1806              		.cfi_def_cfa_offset 0
 1807              	.LVL121:
 1808              	@ armwave.c:394:     fclose(fp);
 394:armwave.c     **** }
 1809              		.loc 1 394 5 view .LVU460
 1810 0840 FEFFFFEA 		b	fclose		@
 1811              	.LVL122:
 1812              	.L107:
 394:armwave.c     **** }
 1813              		.loc 1 394 5 view .LVU461
 1814              		.align	2
 1815              	.L106:
 1816 0844 B4020000 		.word	.LC17
 1817 0848 00000000 		.word	g_armwave_state
 1818 084c B8020000 		.word	.LC18
 1819 0850 BC020000 		.word	.LC19
 1820 0854 C4020000 		.word	.LC20
 1821 0858 CC020000 		.word	.LC21
 1822              		.cfi_endproc
 1823              	.LFE68:
 1825              		.align	2
 1826              		.global	armwave_test_init
 1827              		.syntax unified
 1828              		.arm
 1829              		.fpu vfp
 1831              	armwave_test_init:
 1832              	.LVL123:
 1833              	.LFB69:
 396:armwave.c     **** 
 397:armwave.c     **** /*
 398:armwave.c     ****  * Initialise some test functionry.
 399:armwave.c     ****  */
 400:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 401:armwave.c     **** {
 1834              		.loc 1 401 1 is_stmt 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 402:armwave.c     ****     test_create_gamma();
 1838              		.loc 1 402 5 view .LVU463
 1839              	.LBB12:
 1840              	.LBI12:
  34:armwave.c     **** {
 1841              		.loc 1 34 6 view .LVU464
  34:armwave.c     **** {
 1842              		.loc 1 34 6 is_stmt 0 view .LVU465
 1843              	.LBE12:
 1844              	@ armwave.c:401: {
 401:armwave.c     ****     test_create_gamma();
 1845              		.loc 1 401 1 view .LVU466
 1846 085c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1847              		.cfi_def_cfa_offset 32
 1848              		.cfi_offset 4, -32
 1849              		.cfi_offset 5, -28
 1850              		.cfi_offset 6, -24
 1851              		.cfi_offset 7, -20
 1852              		.cfi_offset 8, -16
 1853              		.cfi_offset 9, -12
 1854              		.cfi_offset 10, -8
 1855              		.cfi_offset 14, -4
 1856 0860 068B2DED 		vpush.64	{d8, d9, d10}	@
 1857              		.cfi_def_cfa_offset 56
 1858              		.cfi_offset 80, -56
 1859              		.cfi_offset 81, -52
 1860              		.cfi_offset 82, -48
 1861              		.cfi_offset 83, -44
 1862              		.cfi_offset 84, -40
 1863              		.cfi_offset 85, -36
 1864 0864 C0409FE5 		ldr	r4, .L112+20	@ ivtmp.87,
 1865              	.LBB15:
 1866              	.LBB13:
 1867              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1868              		.loc 1 40 32 view .LVU467
 1869 0868 2EAA9FED 		vldr.32	s20, .L112+16	@ tmp136,
 1870              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1871              		.loc 1 40 26 view .LVU468
 1872 086c 299B9FED 		vldr.64	d9, .L112	@ tmp151,
 1873              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1874              		.loc 1 40 49 view .LVU469
 1875 0870 2A8B9FED 		vldr.64	d8, .L112+8	@ tmp139,
 1876 0874 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.87,
 1877              	.LBE13:
 1878              	.LBE15:
 1879              	@ armwave.c:401: {
 401:armwave.c     ****     test_create_gamma();
 1880              		.loc 1 401 1 view .LVU470
 1881 0878 10D04DE2 		sub	sp, sp, #16	@,,
 1882              		.cfi_def_cfa_offset 72
 1883              	@ armwave.c:401: {
 401:armwave.c     ****     test_create_gamma();
 1884              		.loc 1 401 1 view .LVU471
 1885 087c 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1886 0880 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1887 0884 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1888 0888 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1889 088c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.87,
 1890 0890 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1891              	.LVL124:
 1892              	.L109:
 1893              	.LBB16:
 1894              	.LBB14:
  40:armwave.c     ****     }
 1895              		.loc 1 40 9 is_stmt 1 view .LVU472
 1896              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1897              		.loc 1 40 32 is_stmt 0 view .LVU473
 1898 0894 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.87
 1899              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1900              		.loc 1 40 26 view .LVU474
 1901 0898 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1902              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1903              		.loc 1 40 32 view .LVU475
 1904 089c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1905 08a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1906 08a4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1907              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1908              		.loc 1 40 26 view .LVU476
 1909 08a8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1910 08ac FEFFFFEB 		bl	pow		@
 1911              	.LVL125:
 1912              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1913              		.loc 1 40 49 view .LVU477
 1914 08b0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1915              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1916              		.loc 1 40 24 view .LVU478
 1917 08b4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1918 08b8 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1919 08bc 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1920              	.LVL126:
 1921              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1922              		.loc 1 39 5 view .LVU479
 1923 08c0 0A0054E1 		cmp	r4, r10	@ ivtmp.87, _39
 1924 08c4 F2FFFF1A 		bne	.L109		@,
 1925              	.LVL127:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1926              		.loc 1 39 5 view .LVU480
 1927              	.LBE14:
 1928              	.LBE16:
 403:armwave.c     **** 
 404:armwave.c     ****     // make ch1 yellowish by default
 405:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1929              		.loc 1 405 5 is_stmt 1 view .LVU481
 1930              	.LBB17:
 1931              	.LBI17:
 358:armwave.c     **** {
 1932              		.loc 1 358 6 view .LVU482
 1933              	.LBB18:
 361:armwave.c     ****         case 1:
 1934              		.loc 1 361 5 view .LVU483
 363:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1935              		.loc 1 363 13 view .LVU484
 364:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1936              		.loc 1 364 13 view .LVU485
 1937              	@ armwave.c:363:             g_armwave_state.ch1_color.r = r;
 363:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1938              		.loc 1 363 41 is_stmt 0 view .LVU486
 1939 08c8 60C09FE5 		ldr	ip, .L112+24	@ tmp142,
 1940 08cc 60409FE5 		ldr	r4, .L112+28	@ tmp143,
 1941              	.LBE18:
 1942              	.LBE17:
 1943              	@ armwave.c:407:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 406:armwave.c     **** 
 407:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1944              		.loc 1 407 5 view .LVU487
 1945 08d0 0000A0E3 		mov	r0, #0	@ tmp147,
 1946              	.LBB22:
 1947              	.LBB19:
 1948              	@ armwave.c:365:             g_armwave_state.ch1_color.b = b;
 365:armwave.c     ****             break;
 1949              		.loc 1 365 41 view .LVU488
 1950 08d4 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1951              	.LBE19:
 1952              	.LBE22:
 1953              	@ armwave.c:407:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1954              		.loc 1 407 5 view .LVU489
 1955 08d8 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1956 08dc 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1957 08e0 00808DE5 		str	r8, [sp]	@ render_width,
 1958 08e4 0610A0E1 		mov	r1, r6	@, tmp3
 1959 08e8 0720A0E1 		mov	r2, r7	@, nwaves
 1960              	.LBB23:
 1961              	.LBB20:
 1962              	@ armwave.c:363:             g_armwave_state.ch1_color.r = r;
 363:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1963              		.loc 1 363 41 view .LVU490
 1964 08ec 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 365:armwave.c     ****             break;
 1965              		.loc 1 365 13 is_stmt 1 view .LVU491
 1966              	.LBE20:
 1967              	.LBE23:
 1968              	@ armwave.c:407:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1969              		.loc 1 407 5 is_stmt 0 view .LVU492
 1970 08f0 0630A0E1 		mov	r3, r6	@, wave_size
 1971              	.LBB24:
 1972              	.LBB21:
 1973              	@ armwave.c:365:             g_armwave_state.ch1_color.b = b;
 365:armwave.c     ****             break;
 1974              		.loc 1 365 41 view .LVU493
 1975 08f4 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 366:armwave.c     ****     }
 1976              		.loc 1 366 13 is_stmt 1 view .LVU494
 1977              	.LVL128:
 366:armwave.c     ****     }
 1978              		.loc 1 366 13 is_stmt 0 view .LVU495
 1979              	.LBE21:
 1980              	.LBE24:
 1981              		.loc 1 407 5 is_stmt 1 view .LVU496
 1982 08f8 FEFFFFEB 		bl	armwave_setup_render		@
 1983              	.LVL129:
 408:armwave.c     **** 
 409:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1984              		.loc 1 409 5 view .LVU497
 1985 08fc 34109FE5 		ldr	r1, .L112+32	@,
 1986 0900 34009FE5 		ldr	r0, .L112+36	@,
 1987              	@ armwave.c:410: }
 410:armwave.c     **** }
 1988              		.loc 1 410 1 is_stmt 0 view .LVU498
 1989 0904 10D08DE2 		add	sp, sp, #16	@,,
 1990              		.cfi_def_cfa_offset 56
 1991              		@ sp needed	@
 1992 0908 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1993              		.cfi_restore 84
 1994              		.cfi_restore 85
 1995              		.cfi_restore 82
 1996              		.cfi_restore 83
 1997              		.cfi_restore 80
 1998              		.cfi_restore 81
 1999              		.cfi_def_cfa_offset 32
 2000 090c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2001              		.cfi_restore 14
 2002              		.cfi_restore 10
 2003              		.cfi_restore 9
 2004              		.cfi_restore 8
 2005              		.cfi_restore 7
 2006              		.cfi_restore 6
 2007              		.cfi_restore 5
 2008              		.cfi_restore 4
 2009              		.cfi_def_cfa_offset 0
 2010              	.LVL130:
 2011              	@ armwave.c:409:     printf("armwave version: %s\n", ARMWAVE_VER);
 409:armwave.c     **** }
 2012              		.loc 1 409 5 view .LVU499
 2013 0910 FEFFFFEA 		b	printf		@
 2014              	.LVL131:
 2015              	.L113:
 2016 0914 0000A0E1 		.align	3
 2017              	.L112:
 2018 0918 000000C0 		.word	-1073741824
 2019 091c CCCCEC3F 		.word	1072483532
 2020 0920 00000000 		.word	0
 2021 0924 00E06F40 		.word	1081073664
 2022 0928 00007F43 		.word	1132396544
 2023 092c FFFFFFFF 		.word	gamma_table-1
 2024 0930 00000000 		.word	g_armwave_state
 2025 0934 F609F406 		.word	116656630
 2026 0938 00000000 		.word	.LC0
 2027 093c 08000000 		.word	.LC1
 2028              		.cfi_endproc
 2029              	.LFE69:
 2031              		.align	2
 2032              		.global	armwave_test_fill_outbuf
 2033              		.syntax unified
 2034              		.arm
 2035              		.fpu vfp
 2037              	armwave_test_fill_outbuf:
 2038              	.LFB70:
 411:armwave.c     **** 
 412:armwave.c     **** /*
 413:armwave.c     ****  * Render image to the local allocated buffer.
 414:armwave.c     ****  */
 415:armwave.c     **** void armwave_test_fill_outbuf()
 416:armwave.c     **** {
 2039              		.loc 1 416 1 is_stmt 1 view -0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 0
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
 2043              		@ link register save eliminated.
 417:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2044              		.loc 1 417 5 view .LVU501
 2045 0940 04309FE5 		ldr	r3, .L115	@ tmp111,
 2046 0944 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2047 0948 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2048              	.LVL132:
 2049              	.L116:
 2050              		.align	2
 2051              	.L115:
 2052 094c 00000000 		.word	g_armwave_state
 2053              		.cfi_endproc
 2054              	.LFE70:
 2056              		.align	2
 2057              		.global	armwave_test_dump_buffer_to_ppm
 2058              		.syntax unified
 2059              		.arm
 2060              		.fpu vfp
 2062              	armwave_test_dump_buffer_to_ppm:
 2063              	.LVL133:
 2064              	.LFB71:
 418:armwave.c     **** }
 419:armwave.c     **** 
 420:armwave.c     **** /*
 421:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 422:armwave.c     ****  */
 423:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 424:armwave.c     **** {
 2065              		.loc 1 424 1 view -0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069              		@ link register save eliminated.
 425:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2070              		.loc 1 425 5 view .LVU503
 2071 0950 08309FE5 		ldr	r3, .L118	@ tmp112,
 2072 0954 0010A0E1 		mov	r1, r0	@, fn
 2073 0958 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2074              	.LVL134:
 2075              		.loc 1 425 5 is_stmt 0 view .LVU504
 2076 095c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2077              	.LVL135:
 2078              	.L119:
 2079              		.loc 1 425 5 view .LVU505
 2080              		.align	2
 2081              	.L118:
 2082 0960 00000000 		.word	g_armwave_state
 2083              		.cfi_endproc
 2084              	.LFE71:
 2086              		.align	2
 2087              		.global	armwave_test_fill_gdkbuf
 2088              		.syntax unified
 2089              		.arm
 2090              		.fpu vfp
 2092              	armwave_test_fill_gdkbuf:
 2093              	.LVL136:
 2094              	.LFB72:
 426:armwave.c     **** }
 427:armwave.c     **** 
 428:armwave.c     **** /*
 429:armwave.c     ****  * Render GDK buffer with test funtionry.
 430:armwave.c     ****  */
 431:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 432:armwave.c     **** {
 2095              		.loc 1 432 1 is_stmt 1 view -0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 0
 2098              		@ frame_needed = 0, uses_anonymous_args = 0
 2099              		@ link register save eliminated.
 433:armwave.c     ****     //PyObject *mv;
 434:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 435:armwave.c     **** 
 436:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 437:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2100              		.loc 1 437 5 view .LVU507
 438:armwave.c     ****     
 439:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 440:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2101              		.loc 1 440 5 view .LVU508
 2102              	@ armwave.c:437:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 437:armwave.c     ****     
 2103              		.loc 1 437 11 is_stmt 0 view .LVU509
 2104 0964 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2105              	@ armwave.c:440:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2106              		.loc 1 440 5 view .LVU510
 2107 0968 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2108              	.LVL137:
 2109              		.loc 1 440 5 view .LVU511
 2110 096c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2111              	.LVL138:
 2112              		.loc 1 440 5 view .LVU512
 2113              		.cfi_endproc
 2114              	.LFE72:
 2116              		.align	2
 2117              		.global	armwave_test_buffer_alloc
 2118              		.syntax unified
 2119              		.arm
 2120              		.fpu vfp
 2122              	armwave_test_buffer_alloc:
 2123              	.LVL139:
 2124              	.LFB73:
 441:armwave.c     **** }
 442:armwave.c     **** 
 443:armwave.c     **** /*
 444:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 445:armwave.c     ****  */
 446:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 447:armwave.c     **** {
 2125              		.loc 1 447 1 is_stmt 1 view -0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 0
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 448:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2129              		.loc 1 448 5 view .LVU514
 2130              	@ armwave.c:447: {
 447:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2131              		.loc 1 447 1 is_stmt 0 view .LVU515
 2132 0970 70402DE9 		push	{r4, r5, r6, lr}	@
 2133              		.cfi_def_cfa_offset 16
 2134              		.cfi_offset 4, -16
 2135              		.cfi_offset 5, -12
 2136              		.cfi_offset 6, -8
 2137              		.cfi_offset 14, -4
 2138              	@ armwave.c:447: {
 447:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2139              		.loc 1 447 1 view .LVU516
 2140 0974 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2141              	@ armwave.c:448:     if(g_armwave_state.test_wave_buffer != NULL) {
 2142              		.loc 1 448 23 view .LVU517
 2143 0978 44409FE5 		ldr	r4, .L128	@ tmp128,
 2144 097c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2145              	.LVL140:
 2146              	@ armwave.c:448:     if(g_armwave_state.test_wave_buffer != NULL) {
 2147              		.loc 1 448 7 view .LVU518
 2148 0980 000050E3 		cmp	r0, #0	@ _1,
 2149 0984 0000000A 		beq	.L122		@,
 449:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2150              		.loc 1 449 9 is_stmt 1 view .LVU519
 2151 0988 FEFFFFEB 		bl	free		@
 2152              	.LVL141:
 2153              	.L122:
 450:armwave.c     ****     }
 451:armwave.c     **** 
 452:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 453:armwave.c     **** 
 454:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2154              		.loc 1 454 5 view .LVU520
 2155              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2156              		.loc 1 454 75 is_stmt 0 view .LVU521
 2157 098c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2158 0990 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2159              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2160              		.loc 1 454 40 view .LVU522
 2161 0994 0610A0E1 		mov	r1, r6	@, nsets
 2162              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2163              		.loc 1 454 75 view .LVU523
 2164 0998 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2165              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2166              		.loc 1 454 40 view .LVU524
 2167 099c 0500A0E1 		mov	r0, r5	@, _4
 2168 09a0 FEFFFFEB 		bl	calloc		@
 2169              	.LVL142:
 2170              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer == NULL) {
 455:armwave.c     **** 
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2171              		.loc 1 456 7 view .LVU525
 2172 09a4 000050E3 		cmp	r0, #0	@ tmp124,
 2173              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 454:armwave.c     **** 
 2174              		.loc 1 454 38 view .LVU526
 2175 09a8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2176              		.loc 1 456 5 is_stmt 1 view .LVU527
 2177              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer == NULL) {
 2178              		.loc 1 456 7 is_stmt 0 view .LVU528
 2179 09ac 7080BD18 		popne	{r4, r5, r6, pc}	@
 457:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2180              		.loc 1 457 9 is_stmt 1 view .LVU529
 2181 09b0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2182 09b4 0620A0E1 		mov	r2, r6	@, nsets
 2183 09b8 08009FE5 		ldr	r0, .L128+4	@,
 2184              	@ armwave.c:461: }
 458:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 459:armwave.c     ****         return;
 460:armwave.c     ****     }
 461:armwave.c     **** }
 2185              		.loc 1 461 1 is_stmt 0 view .LVU530
 2186 09bc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2187              		.cfi_restore 14
 2188              		.cfi_restore 6
 2189              		.cfi_restore 5
 2190              		.cfi_restore 4
 2191              		.cfi_def_cfa_offset 0
 2192              	.LVL143:
 2193              	@ armwave.c:457:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 457:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2194              		.loc 1 457 9 view .LVU531
 2195 09c0 FEFFFFEA 		b	printf		@
 2196              	.LVL144:
 2197              	.L129:
 457:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2198              		.loc 1 457 9 view .LVU532
 2199              		.align	2
 2200              	.L128:
 2201 09c4 00000000 		.word	g_armwave_state
 2202 09c8 DC020000 		.word	.LC22
 2203              		.cfi_endproc
 2204              	.LFE73:
 2206              		.align	2
 2207              		.global	armwave_fill_pixbuf_into_pybuffer
 2208              		.syntax unified
 2209              		.arm
 2210              		.fpu vfp
 2212              	armwave_fill_pixbuf_into_pybuffer:
 2213              	.LVL145:
 2214              	.LFB74:
 462:armwave.c     **** 
 463:armwave.c     **** /*
 464:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 465:armwave.c     ****  */
 466:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 467:armwave.c     **** {
 2215              		.loc 1 467 1 is_stmt 1 view -0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 48
 2218              		@ frame_needed = 0, uses_anonymous_args = 0
 468:armwave.c     ****     Py_buffer buffer;
 2219              		.loc 1 468 5 view .LVU534
 469:armwave.c     ****     int ret;
 2220              		.loc 1 469 5 view .LVU535
 470:armwave.c     **** 
 471:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 472:armwave.c     **** 
 473:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2221              		.loc 1 473 5 view .LVU536
 2222              	@ armwave.c:467: {
 467:armwave.c     ****     Py_buffer buffer;
 2223              		.loc 1 467 1 is_stmt 0 view .LVU537
 2224 09cc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2225              		.cfi_def_cfa_offset 4
 2226              		.cfi_offset 14, -4
 2227 09d0 34D04DE2 		sub	sp, sp, #52	@,,
 2228              		.cfi_def_cfa_offset 56
 2229              	@ armwave.c:473:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2230              		.loc 1 473 11 view .LVU538
 2231 09d4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2232 09d8 0120A0E3 		mov	r2, #1	@,
 2233 09dc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2234              	.LVL146:
 474:armwave.c     **** 
 475:armwave.c     ****     if(ret != 0) {
 2235              		.loc 1 475 5 is_stmt 1 view .LVU539
 2236              	@ armwave.c:475:     if(ret != 0) {
 2237              		.loc 1 475 7 is_stmt 0 view .LVU540
 2238 09e0 000050E3 		cmp	r0, #0	@,
 2239 09e4 0A00001A 		bne	.L134		@,
 476:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 477:armwave.c     ****         Py_RETURN_FALSE;
 478:armwave.c     ****     }
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 481:armwave.c     **** 
 482:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2240              		.loc 1 482 5 is_stmt 1 view .LVU541
 2241 09e8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2242              	.LVL147:
 2243              		.loc 1 482 5 is_stmt 0 view .LVU542
 2244 09ec FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2245              	.LVL148:
 483:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 484:armwave.c     **** 
 485:armwave.c     ****     PyBuffer_Release(&buffer);
 2246              		.loc 1 485 5 is_stmt 1 view .LVU543
 2247 09f0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2248 09f4 FEFFFFEB 		bl	PyBuffer_Release		@
 2249              	.LVL149:
 486:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 487:armwave.c     **** 
 488:armwave.c     ****     Py_RETURN_TRUE;
 2250              		.loc 1 488 5 view .LVU544
 2251              	.LBB25:
 2252              	.LBI25:
 2253              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2254              		.loc 2 456 20 view .LVU545
 2255              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2256              		.loc 2 458 21 view .LVU546
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2257              		.loc 2 459 5 view .LVU547
 2258              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2259              		.loc 2 459 18 is_stmt 0 view .LVU548
 2260 09f8 38309FE5 		ldr	r3, .L135	@ tmp126,
 2261              	.LBE26:
 2262              	.LBE25:
 2263              	@ armwave.c:488:     Py_RETURN_TRUE;
 2264              		.loc 1 488 5 view .LVU549
 2265 09fc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2266              	.LBB28:
 2267              	.LBB27:
 2268              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2269              		.loc 2 459 18 view .LVU550
 2270 0a00 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2271 0a04 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2272 0a08 002083E5 		str	r2, [r3]	@ tmp128,
 2273              	.LBE27:
 2274              	.LBE28:
 2275              	@ armwave.c:489: }
 489:armwave.c     **** }
 2276              		.loc 1 489 1 view .LVU551
 2277 0a0c 34D08DE2 		add	sp, sp, #52	@,,
 2278              		.cfi_remember_state
 2279              		.cfi_def_cfa_offset 4
 2280              		@ sp needed	@
 2281 0a10 04F09DE4 		ldr	pc, [sp], #4	@
 2282              	.LVL150:
 2283              	.L134:
 2284              		.cfi_restore_state
 476:armwave.c     ****         Py_RETURN_FALSE;
 2285              		.loc 1 476 9 is_stmt 1 view .LVU552
 2286 0a14 20009FE5 		ldr	r0, .L135+4	@,
 2287              	.LVL151:
 476:armwave.c     ****         Py_RETURN_FALSE;
 2288              		.loc 1 476 9 is_stmt 0 view .LVU553
 2289 0a18 FEFFFFEB 		bl	puts		@
 2290              	.LVL152:
 477:armwave.c     ****     }
 2291              		.loc 1 477 9 is_stmt 1 view .LVU554
 2292              	.LBB29:
 2293              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2294              		.loc 2 456 20 view .LVU555
 2295              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2296              		.loc 2 458 21 view .LVU556
 2297              		.loc 2 459 5 view .LVU557
 2298              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2299              		.loc 2 459 18 is_stmt 0 view .LVU558
 2300 0a1c 1C309FE5 		ldr	r3, .L135+8	@ tmp120,
 2301              	.LBE30:
 2302              	.LBE29:
 2303              	@ armwave.c:477:         Py_RETURN_FALSE;
 477:armwave.c     ****     }
 2304              		.loc 1 477 9 view .LVU559
 2305 0a20 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2306              	.LBB32:
 2307              	.LBB31:
 2308              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2309              		.loc 2 459 18 view .LVU560
 2310 0a24 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2311 0a28 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2312 0a2c 002083E5 		str	r2, [r3]	@ tmp122,
 2313              	.LBE31:
 2314              	.LBE32:
 2315              	@ armwave.c:489: }
 2316              		.loc 1 489 1 view .LVU561
 2317 0a30 34D08DE2 		add	sp, sp, #52	@,,
 2318              		.cfi_def_cfa_offset 4
 2319              		@ sp needed	@
 2320 0a34 04F09DE4 		ldr	pc, [sp], #4	@
 2321              	.L136:
 2322              		.align	2
 2323              	.L135:
 2324 0a38 00000000 		.word	_Py_TrueStruct
 2325 0a3c 30030000 		.word	.LC23
 2326 0a40 00000000 		.word	_Py_FalseStruct
 2327              		.cfi_endproc
 2328              	.LFE74:
 2330              		.align	2
 2331              		.global	armwave_test_create_am_sine
 2332              		.syntax unified
 2333              		.arm
 2334              		.fpu vfp
 2336              	armwave_test_create_am_sine:
 2337              	.LVL153:
 2338              	.LFB75:
 490:armwave.c     **** 
 491:armwave.c     **** /*
 492:armwave.c     ****  * Make a test AM waveform for render tests.
 493:armwave.c     ****  *
 494:armwave.c     ****  * @param   mod                     modulation depth
 495:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 496:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 497:armwave.c     ****  */
 498:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 499:armwave.c     **** {
 2339              		.loc 1 499 1 is_stmt 1 view -0
 2340              		.cfi_startproc
 2341              		@ args = 0, pretend = 0, frame = 8
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     float v, noise, xnoise, mod_val;
 2343              		.loc 1 500 5 view .LVU563
 501:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2344              		.loc 1 501 5 view .LVU564
 2345              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 2346              		.loc 1 499 1 is_stmt 0 view .LVU565
 2347 0a44 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2348              		.cfi_def_cfa_offset 32
 2349              		.cfi_offset 4, -32
 2350              		.cfi_offset 5, -28
 2351              		.cfi_offset 6, -24
 2352              		.cfi_offset 7, -20
 2353              		.cfi_offset 8, -16
 2354              		.cfi_offset 9, -12
 2355              		.cfi_offset 10, -8
 2356              		.cfi_offset 14, -4
 2357              	@ armwave.c:501:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2358              		.loc 1 501 38 view .LVU566
 2359 0a48 7A7A9FED 		vldr.32	s14, .L168	@ tmp180,
 2360              	@ armwave.c:501:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2361              		.loc 1 501 55 view .LVU567
 2362 0a4c 00529FE5 		ldr	r5, .L168+28	@ tmp250,
 2363              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 2364              		.loc 1 499 1 view .LVU568
 2365 0a50 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2366              		.cfi_def_cfa_offset 80
 2367              		.cfi_offset 80, -80
 2368              		.cfi_offset 81, -76
 2369              		.cfi_offset 82, -72
 2370              		.cfi_offset 83, -68
 2371              		.cfi_offset 84, -64
 2372              		.cfi_offset 85, -60
 2373              		.cfi_offset 86, -56
 2374              		.cfi_offset 87, -52
 2375              		.cfi_offset 88, -48
 2376              		.cfi_offset 89, -44
 2377              		.cfi_offset 90, -40
 2378              		.cfi_offset 91, -36
 2379 0a54 0090A0E1 		mov	r9, r0	@ sets, sets
 2380              	@ armwave.c:501:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2381              		.loc 1 501 38 view .LVU569
 2382 0a58 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2383              	@ armwave.c:505:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 502:armwave.c     ****     int s, set_offset = 0;
 503:armwave.c     ****     int w, x;
 504:armwave.c     **** 
 505:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2384              		.loc 1 505 70 view .LVU570
 2385 0a5c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2386 0a60 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2387              	.LBB35:
 2388              	.LBB36:
 2389              	@ armwave.c:448:     if(g_armwave_state.test_wave_buffer != NULL) {
 448:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2390              		.loc 1 448 23 view .LVU571
 2391 0a64 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2392              	.LVL154:
 448:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2393              		.loc 1 448 23 view .LVU572
 2394              	.LBE36:
 2395              	.LBE35:
 2396              	@ armwave.c:501:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 501:armwave.c     ****     int s, set_offset = 0;
 2397              		.loc 1 501 38 view .LVU573
 2398 0a68 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2399              	@ armwave.c:505:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2400              		.loc 1 505 70 view .LVU574
 2401 0a6c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2402              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 2403              		.loc 1 499 1 view .LVU575
 2404 0a70 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2405              	.LBB40:
 2406              	.LBB37:
 2407              	@ armwave.c:448:     if(g_armwave_state.test_wave_buffer != NULL) {
 448:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2408              		.loc 1 448 7 view .LVU576
 2409 0a74 000050E3 		cmp	r0, #0	@ _82,
 2410              	.LBE37:
 2411              	.LBE40:
 2412              	@ armwave.c:499: {
 499:armwave.c     ****     float v, noise, xnoise, mod_val;
 2413              		.loc 1 499 1 view .LVU577
 2414 0a78 08D04DE2 		sub	sp, sp, #8	@,,
 2415              		.cfi_def_cfa_offset 88
 2416              	@ armwave.c:506:     g_armwave_state.test_wave_buffer_nsets = sets;
 506:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2417              		.loc 1 506 44 view .LVU578
 2418 0a7c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2419              	@ armwave.c:505:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 505:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2420              		.loc 1 505 45 view .LVU579
 2421 0a80 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2422              	@ armwave.c:501:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 501:armwave.c     ****     int s, set_offset = 0;
 2423              		.loc 1 501 38 view .LVU580
 2424 0a84 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2425              	@ armwave.c:501:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 501:armwave.c     ****     int s, set_offset = 0;
 2426              		.loc 1 501 11 view .LVU581
 2427 0a88 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2428              	.LVL155:
 502:armwave.c     ****     int w, x;
 2429              		.loc 1 502 5 is_stmt 1 view .LVU582
 503:armwave.c     **** 
 2430              		.loc 1 503 5 view .LVU583
 505:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2431              		.loc 1 505 5 view .LVU584
 2432              		.loc 1 506 5 view .LVU585
 507:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2433              		.loc 1 507 5 view .LVU586
 2434              	.LBB41:
 2435              	.LBI35:
 446:armwave.c     **** {
 2436              		.loc 1 446 6 view .LVU587
 2437              	.LBB38:
 448:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2438              		.loc 1 448 5 view .LVU588
 2439              	@ armwave.c:448:     if(g_armwave_state.test_wave_buffer != NULL) {
 448:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2440              		.loc 1 448 7 is_stmt 0 view .LVU589
 2441 0a8c 0000000A 		beq	.L138		@,
 449:armwave.c     ****     }
 2442              		.loc 1 449 9 is_stmt 1 view .LVU590
 2443 0a90 FEFFFFEB 		bl	free		@
 2444              	.LVL156:
 2445              	.L138:
 454:armwave.c     **** 
 2446              		.loc 1 454 5 view .LVU591
 2447              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 454:armwave.c     **** 
 2448              		.loc 1 454 75 is_stmt 0 view .LVU592
 2449 0a94 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2450 0a98 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2451              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 454:armwave.c     **** 
 2452              		.loc 1 454 40 view .LVU593
 2453 0a9c 0910A0E1 		mov	r1, r9	@, sets
 2454              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 454:armwave.c     **** 
 2455              		.loc 1 454 75 view .LVU594
 2456 0aa0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2457              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 454:armwave.c     **** 
 2458              		.loc 1 454 40 view .LVU595
 2459 0aa4 0400A0E1 		mov	r0, r4	@, _85
 2460 0aa8 FEFFFFEB 		bl	calloc		@
 2461              	.LVL157:
 2462              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer == NULL) {
 456:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2463              		.loc 1 456 7 view .LVU596
 2464 0aac 000050E3 		cmp	r0, #0	@ tmp191,
 2465              	@ armwave.c:454:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 454:armwave.c     **** 
 2466              		.loc 1 454 38 view .LVU597
 2467 0ab0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 456:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2468              		.loc 1 456 5 is_stmt 1 view .LVU598
 2469              	@ armwave.c:456:     if(g_armwave_state.test_wave_buffer == NULL) {
 456:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2470              		.loc 1 456 7 is_stmt 0 view .LVU599
 2471 0ab4 5A00000A 		beq	.L167		@,
 2472              	.L139:
 2473              	.LVL158:
 456:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2474              		.loc 1 456 7 view .LVU600
 2475              	.LBE38:
 2476              	.LBE41:
 2477              	@ armwave.c:509:     for(s = 0; s < sets; s++) {
 508:armwave.c     **** 
 509:armwave.c     ****     for(s = 0; s < sets; s++) {
 2478              		.loc 1 509 5 discriminator 1 view .LVU601
 2479 0ab8 000059E3 		cmp	r9, #0	@ sets,
 2480 0abc 550000DA 		ble	.L137		@,
 2481              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 510:armwave.c     ****         printf("Calculating test set %d\n", s);
 511:armwave.c     ****     
 512:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 513:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 514:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 515:armwave.c     **** 
 516:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 517:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 518:armwave.c     ****                 noise *= noise;
 519:armwave.c     ****                 noise *= noise;
 520:armwave.c     ****                 noise *= noise;
 521:armwave.c     **** 
 522:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 523:armwave.c     ****                     noise = -noise;
 524:armwave.c     **** 
 525:armwave.c     ****                 noise += 1.0f;
 526:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 527:armwave.c     **** 
 528:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2482              		.loc 1 528 45 view .LVU602
 2483 0ac0 5C8A9FED 		vldr.32	s16, .L168	@ tmp258,
 2484              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 529:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 530:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 531:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2485              		.loc 1 531 104 view .LVU603
 2486 0ac4 5CCA9FED 		vldr.32	s24, .L168+4	@ tmp259,
 2487              	@ armwave.c:509:     for(s = 0; s < sets; s++) {
 509:armwave.c     ****         printf("Calculating test set %d\n", s);
 2488              		.loc 1 509 5 view .LVU604
 2489 0ac8 0070A0E3 		mov	r7, #0	@ set_offset,
 2490              	@ armwave.c:510:         printf("Calculating test set %d\n", s);
 510:armwave.c     ****         printf("Calculating test set %d\n", s);
 2491              		.loc 1 510 9 view .LVU605
 2492 0acc 84A19FE5 		ldr	r10, .L168+32	@ tmp257,
 2493              	@ armwave.c:509:     for(s = 0; s < sets; s++) {
 509:armwave.c     ****         printf("Calculating test set %d\n", s);
 2494              		.loc 1 509 5 view .LVU606
 2495 0ad0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2496              	.LVL159:
 2497              	.L140:
 510:armwave.c     ****         printf("Calculating test set %d\n", s);
 2498              		.loc 1 510 9 is_stmt 1 view .LVU607
 2499 0ad4 0810A0E1 		mov	r1, r8	@, s
 2500 0ad8 0A00A0E1 		mov	r0, r10	@, tmp257
 2501 0adc FEFFFFEB 		bl	printf		@
 2502              	.LVL160:
 512:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2503              		.loc 1 512 9 view .LVU608
 2504              	@ armwave.c:512:         for(w = 0; w < g_armwave_state.waves; w++) {
 512:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2505              		.loc 1 512 39 is_stmt 0 view .LVU609
 2506 0ae0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2507              	@ armwave.c:512:         for(w = 0; w < g_armwave_state.waves; w++) {
 512:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2508              		.loc 1 512 9 view .LVU610
 2509 0ae4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2510 0ae8 450000DA 		ble	.L141		@,
 2511              	@ armwave.c:514:             mod_val = 0.5f + (_1_waves_mod * w);
 514:armwave.c     **** 
 2512              		.loc 1 514 21 view .LVU611
 2513 0aec 53CADFED 		vldr.32	s25, .L168+8	@ tmp200,
 2514              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2515              		.loc 1 528 33 view .LVU612
 2516 0af0 53BA9FED 		vldr.32	s22, .L168+12	@ tmp253,
 2517              	@ armwave.c:526:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 526:armwave.c     **** 
 2518              		.loc 1 526 24 view .LVU613
 2519 0af4 53AADFED 		vldr.32	s21, .L168+16	@ tmp254,
 2520 0af8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2521              	@ armwave.c:512:         for(w = 0; w < g_armwave_state.waves; w++) {
 512:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2522              		.loc 1 512 15 view .LVU614
 2523 0afc 0060A0E3 		mov	r6, #0	@ w,
 2524              	.LVL161:
 2525              	.L148:
 514:armwave.c     **** 
 2526              		.loc 1 514 13 is_stmt 1 view .LVU615
 2527              	@ armwave.c:514:             mod_val = 0.5f + (_1_waves_mod * w);
 514:armwave.c     **** 
 2528              		.loc 1 514 21 is_stmt 0 view .LVU616
 2529 0b00 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2530 0b04 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2531              	@ armwave.c:516:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2532              		.loc 1 516 13 view .LVU617
 2533 0b08 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2534              	@ armwave.c:514:             mod_val = 0.5f + (_1_waves_mod * w);
 514:armwave.c     **** 
 2535              		.loc 1 514 21 view .LVU618
 2536 0b0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2537 0b10 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2538              	.LVL162:
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2539              		.loc 1 516 13 is_stmt 1 view .LVU619
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2540              		.loc 1 516 13 is_stmt 0 view .LVU620
 2541 0b14 370000DA 		ble	.L142		@,
 2542 0b18 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2543              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2544              		.loc 1 531 113 view .LVU621
 2545 0b1c 4AAA9FED 		vldr.32	s20, .L168+20	@ tmp229,
 2546 0b20 4A8ADFED 		vldr.32	s17, .L168+24	@ tmp230,
 2547              	@ armwave.c:516:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2548              		.loc 1 516 19 view .LVU622
 2549 0b24 0040A0E3 		mov	r4, #0	@ x,
 2550              	.LVL163:
 2551              	.L147:
 517:armwave.c     ****                 noise *= noise;
 2552              		.loc 1 517 17 is_stmt 1 view .LVU623
 2553              	@ armwave.c:517:                 noise  = ((rand() & 0xffff) * noise_fraction);
 517:armwave.c     ****                 noise *= noise;
 2554              		.loc 1 517 28 is_stmt 0 view .LVU624
 2555 0b28 FEFFFFEB 		bl	rand		@
 2556              	.LVL164:
 2557              	@ armwave.c:517:                 noise  = ((rand() & 0xffff) * noise_fraction);
 517:armwave.c     ****                 noise *= noise;
 2558              		.loc 1 517 35 view .LVU625
 2559 0b2c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2560              	@ armwave.c:517:                 noise  = ((rand() & 0xffff) * noise_fraction);
 517:armwave.c     ****                 noise *= noise;
 2561              		.loc 1 517 45 view .LVU626
 2562 0b30 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2563 0b34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2564              	@ armwave.c:517:                 noise  = ((rand() & 0xffff) * noise_fraction);
 517:armwave.c     ****                 noise *= noise;
 2565              		.loc 1 517 24 view .LVU627
 2566 0b38 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2567              	.LVL165:
 518:armwave.c     ****                 noise *= noise;
 2568              		.loc 1 518 17 is_stmt 1 view .LVU628
 2569              	@ armwave.c:518:                 noise *= noise;
 518:armwave.c     ****                 noise *= noise;
 2570              		.loc 1 518 23 is_stmt 0 view .LVU629
 2571 0b3c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2572              	.LVL166:
 519:armwave.c     ****                 noise *= noise;
 2573              		.loc 1 519 17 is_stmt 1 view .LVU630
 2574              	@ armwave.c:519:                 noise *= noise;
 519:armwave.c     ****                 noise *= noise;
 2575              		.loc 1 519 23 is_stmt 0 view .LVU631
 2576 0b40 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2577              	.LVL167:
 520:armwave.c     **** 
 2578              		.loc 1 520 17 is_stmt 1 view .LVU632
 2579              	@ armwave.c:520:                 noise *= noise;
 520:armwave.c     **** 
 2580              		.loc 1 520 23 is_stmt 0 view .LVU633
 2581 0b44 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2582              	.LVL168:
 522:armwave.c     ****                     noise = -noise;
 2583              		.loc 1 522 17 is_stmt 1 view .LVU634
 2584              	@ armwave.c:522:                 if((rand() & 0xffff) > 0x7fff)
 522:armwave.c     ****                     noise = -noise;
 2585              		.loc 1 522 21 is_stmt 0 view .LVU635
 2586 0b48 FEFFFFEB 		bl	rand		@
 2587              	.LVL169:
 523:armwave.c     **** 
 2588              		.loc 1 523 21 is_stmt 1 view .LVU636
 2589              	@ armwave.c:522:                 if((rand() & 0xffff) > 0x7fff)
 522:armwave.c     ****                     noise = -noise;
 2590              		.loc 1 522 19 is_stmt 0 view .LVU637
 2591 0b4c 020910E3 		tst	r0, #32768	@,
 2592              	@ armwave.c:523:                     noise = -noise;
 523:armwave.c     **** 
 2593              		.loc 1 523 27 view .LVU638
 2594 0b50 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2595              	.LVL170:
 525:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2596              		.loc 1 525 17 is_stmt 1 view .LVU639
 526:armwave.c     **** 
 2597              		.loc 1 526 17 view .LVU640
 2598              	@ armwave.c:526:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 526:armwave.c     **** 
 2599              		.loc 1 526 27 is_stmt 0 view .LVU641
 2600 0b54 FEFFFFEB 		bl	rand		@
 2601              	.LVL171:
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2602              		.loc 1 528 17 is_stmt 1 view .LVU642
 2603              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2604              		.loc 1 528 45 is_stmt 0 view .LVU643
 2605 0b58 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2606              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2607              		.loc 1 528 33 view .LVU644
 2608 0b5c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2609              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2610              		.loc 1 528 45 view .LVU645
 2611 0b60 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2612              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2613              		.loc 1 528 33 view .LVU646
 2614 0b64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2615              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2616              		.loc 1 528 45 view .LVU647
 2617 0b68 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2618              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2619              		.loc 1 528 33 view .LVU648
 2620 0b6c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2621              	@ armwave.c:526:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 526:armwave.c     **** 
 2622              		.loc 1 526 34 view .LVU649
 2623 0b70 7000FFE6 		uxth	r0, r0	@ tmp214,
 2624              	.LVL172:
 2625              	@ armwave.c:526:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 526:armwave.c     **** 
 2626              		.loc 1 526 44 view .LVU650
 2627 0b74 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2628 0b78 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2629              	@ armwave.c:526:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 526:armwave.c     **** 
 2630              		.loc 1 526 24 view .LVU651
 2631 0b7c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2632              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2633              		.loc 1 528 77 view .LVU652
 2634 0b80 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2635              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2636              		.loc 1 528 22 view .LVU653
 2637 0b84 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2638 0b88 FEFFFFEB 		bl	sin		@
 2639              	.LVL173:
 2640              		.loc 1 531 17 is_stmt 1 view .LVU654
 2641              	@ armwave.c:525:                 noise += 1.0f;
 525:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2642              		.loc 1 525 23 is_stmt 0 view .LVU655
 2643 0b8c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2644              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2645              		.loc 1 531 104 view .LVU656
 2646 0b90 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2647              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2648              		.loc 1 528 98 view .LVU657
 2649 0b94 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2650              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2651              		.loc 1 528 87 view .LVU658
 2652 0b98 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2653              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2654              		.loc 1 528 98 view .LVU659
 2655 0b9c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2656              	@ armwave.c:528:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 528:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2657              		.loc 1 528 19 view .LVU660
 2658 0ba0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2659              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2660              		.loc 1 531 113 view .LVU661
 2661 0ba4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2662 0ba8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2663 0bac C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2664 0bb0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2665 0bb4 050000DA 		ble	.L144		@,
 2666              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2667              		.loc 1 531 104 discriminator 1 view .LVU662
 2668 0bb8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2669 0bbc FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2670 0bc0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2671 0bc4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2672 0bc8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2673 0bcc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2674              	.L144:
 2675              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2676              		.loc 1 531 57 discriminator 12 view .LVU663
 2677 0bd0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2678              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2679              		.loc 1 531 102 discriminator 12 view .LVU664
 2680 0bd4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2681 0bd8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2682 0bdc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2683              	@ armwave.c:516:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2684              		.loc 1 516 58 discriminator 12 view .LVU665
 2685 0be0 014084E2 		add	r4, r4, #1	@ x, x,
 2686              	.LVL174:
 2687              	@ armwave.c:531:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2688              		.loc 1 531 102 discriminator 12 view .LVU666
 2689 0be4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2690              	@ armwave.c:516:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2691              		.loc 1 516 43 discriminator 12 view .LVU667
 2692 0be8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2693              	@ armwave.c:516:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 516:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2694              		.loc 1 516 13 discriminator 12 view .LVU668
 2695 0bec 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2696 0bf0 CCFFFFCA 		bgt	.L147		@,
 2697 0bf4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2698              	.LVL175:
 2699              	.L142:
 2700              	@ armwave.c:512:         for(w = 0; w < g_armwave_state.waves; w++) {
 512:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2701              		.loc 1 512 48 discriminator 2 view .LVU669
 2702 0bf8 016086E2 		add	r6, r6, #1	@ w, w,
 2703              	.LVL176:
 2704              	@ armwave.c:512:         for(w = 0; w < g_armwave_state.waves; w++) {
 512:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2705              		.loc 1 512 9 discriminator 2 view .LVU670
 2706 0bfc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2707 0c00 BEFFFFBA 		blt	.L148		@,
 2708              	.LVL177:
 2709              	.L141:
 532:armwave.c     ****             }
 533:armwave.c     ****         }
 534:armwave.c     **** 
 535:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2710              		.loc 1 535 9 is_stmt 1 discriminator 2 view .LVU671
 2711              	@ armwave.c:535:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2712              		.loc 1 535 46 is_stmt 0 discriminator 2 view .LVU672
 2713 0c04 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2714              	@ armwave.c:509:     for(s = 0; s < sets; s++) {
 509:armwave.c     ****         printf("Calculating test set %d\n", s);
 2715              		.loc 1 509 27 discriminator 2 view .LVU673
 2716 0c08 018088E2 		add	r8, r8, #1	@ s, s,
 2717              	.LVL178:
 2718              	@ armwave.c:509:     for(s = 0; s < sets; s++) {
 509:armwave.c     ****         printf("Calculating test set %d\n", s);
 2719              		.loc 1 509 5 discriminator 2 view .LVU674
 2720 0c0c 080059E1 		cmp	r9, r8	@ sets, s
 2721              	@ armwave.c:535:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2722              		.loc 1 535 20 discriminator 2 view .LVU675
 2723 0c10 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2724              	.LVL179:
 2725              	@ armwave.c:509:     for(s = 0; s < sets; s++) {
 509:armwave.c     ****         printf("Calculating test set %d\n", s);
 2726              		.loc 1 509 5 discriminator 2 view .LVU676
 2727 0c14 AEFFFF1A 		bne	.L140		@,
 2728              	.LVL180:
 2729              	.L137:
 2730              	@ armwave.c:537: }
 536:armwave.c     ****     }
 537:armwave.c     **** }
 2731              		.loc 1 537 1 view .LVU677
 2732 0c18 08D08DE2 		add	sp, sp, #8	@,,
 2733              		.cfi_remember_state
 2734              		.cfi_def_cfa_offset 80
 2735              		@ sp needed	@
 2736 0c1c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2737              		.cfi_restore 90
 2738              		.cfi_restore 91
 2739              		.cfi_restore 88
 2740              		.cfi_restore 89
 2741              		.cfi_restore 86
 2742              		.cfi_restore 87
 2743              		.cfi_restore 84
 2744              		.cfi_restore 85
 2745              		.cfi_restore 82
 2746              		.cfi_restore 83
 2747              		.cfi_restore 80
 2748              		.cfi_restore 81
 2749              		.cfi_def_cfa_offset 32
 2750              	.LVL181:
 2751              		.loc 1 537 1 view .LVU678
 2752 0c20 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2753              	.LVL182:
 2754              	.L167:
 2755              		.cfi_restore_state
 2756              	.LBB42:
 2757              	.LBB39:
 457:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2758              		.loc 1 457 9 is_stmt 1 view .LVU679
 2759 0c24 940901E0 		mul	r1, r4, r9	@, _85, sets
 2760 0c28 0920A0E1 		mov	r2, r9	@, sets
 2761 0c2c 28009FE5 		ldr	r0, .L168+36	@,
 2762 0c30 FEFFFFEB 		bl	printf		@
 2763              	.LVL183:
 459:armwave.c     ****     }
 2764              		.loc 1 459 9 view .LVU680
 2765 0c34 9FFFFFEA 		b	.L139		@
 2766              	.L169:
 2767              		.align	2
 2768              	.L168:
 2769 0c38 0000803F 		.word	1065353216
 2770 0c3c 00007F43 		.word	1132396544
 2771 0c40 0000003F 		.word	1056964608
 2772 0c44 C3F5C840 		.word	1086911939
 2773 0c48 38FFC74A 		.word	1254620984
 2774 0c4c 0000FE42 		.word	1123942400
 2775 0c50 00000043 		.word	1124073472
 2776 0c54 00000000 		.word	g_armwave_state
 2777 0c58 84030000 		.word	.LC24
 2778 0c5c DC020000 		.word	.LC22
 2779              	.LBE39:
 2780              	.LBE42:
 2781              		.cfi_endproc
 2782              	.LFE75:
 2784              		.align	2
 2785              		.global	armwave_cleanup
 2786              		.syntax unified
 2787              		.arm
 2788              		.fpu vfp
 2790              	armwave_cleanup:
 2791              	.LFB76:
 538:armwave.c     **** 
 539:armwave.c     **** /*
 540:armwave.c     ****  * Make a test square waveform.
 541:armwave.c     ****  *
 542:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 543:armwave.c     ****  */
 544:armwave.c     **** #if 0
 545:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 546:armwave.c     **** {
 547:armwave.c     ****     uint8_t v;
 548:armwave.c     ****     float noise, xnoise;
 549:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 550:armwave.c     ****     int w, x;
 551:armwave.c     **** 
 552:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 554:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 555:armwave.c     ****             noise *= noise;
 556:armwave.c     ****             noise *= noise;
 557:armwave.c     ****             noise *= noise;
 558:armwave.c     **** 
 559:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 560:armwave.c     ****                 noise = -noise;
 561:armwave.c     **** 
 562:armwave.c     ****             //noise += 1.0f;
 563:armwave.c     **** 
 564:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 565:armwave.c     ****                 new_level = 0.2f;
 566:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 567:armwave.c     ****                 new_level = 0.8f;
 568:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 569:armwave.c     ****                 new_level = 0.2f;
 570:armwave.c     ****             } else {
 571:armwave.c     ****                 new_level = 0.8f;
 572:armwave.c     ****             }
 573:armwave.c     **** 
 574:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 575:armwave.c     **** 
 576:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 577:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 578:armwave.c     ****         }
 579:armwave.c     ****     }
 580:armwave.c     **** }
 581:armwave.c     **** #endif
 582:armwave.c     **** 
 583:armwave.c     **** /*
 584:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 585:armwave.c     ****  */
 586:armwave.c     **** void armwave_cleanup()
 587:armwave.c     **** {
 2792              		.loc 1 587 1 view -0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 0
 2795              		@ frame_needed = 0, uses_anonymous_args = 0
 588:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2796              		.loc 1 588 5 view .LVU682
 2797              	@ armwave.c:587: {
 587:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2798              		.loc 1 587 1 is_stmt 0 view .LVU683
 2799 0c60 10402DE9 		push	{r4, lr}	@
 2800              		.cfi_def_cfa_offset 8
 2801              		.cfi_offset 4, -8
 2802              		.cfi_offset 14, -4
 2803              	@ armwave.c:588:     free(g_armwave_state.out_pixbuf);
 2804              		.loc 1 588 25 view .LVU684
 2805 0c64 34409FE5 		ldr	r4, .L172	@ tmp114,
 2806              	@ armwave.c:588:     free(g_armwave_state.out_pixbuf);
 2807              		.loc 1 588 5 view .LVU685
 2808 0c68 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2809 0c6c FEFFFFEB 		bl	free		@
 2810              	.LVL184:
 589:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2811              		.loc 1 589 5 is_stmt 1 view .LVU686
 2812 0c70 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2813 0c74 FEFFFFEB 		bl	free		@
 2814              	.LVL185:
 590:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2815              		.loc 1 590 5 view .LVU687
 2816 0c78 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2817 0c7c FEFFFFEB 		bl	free		@
 2818              	.LVL186:
 591:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2819              		.loc 1 591 5 view .LVU688
 2820 0c80 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2821 0c84 FEFFFFEB 		bl	free		@
 2822              	.LVL187:
 592:armwave.c     **** 
 593:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2823              		.loc 1 593 5 view .LVU689
 2824              	@ armwave.c:593:     g_armwave_state.out_pixbuf = NULL;
 2825              		.loc 1 593 32 is_stmt 0 view .LVU690
 2826 0c88 0030A0E3 		mov	r3, #0	@ tmp123,
 2827 0c8c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 594:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2828              		.loc 1 594 5 is_stmt 1 view .LVU691
 2829              	@ armwave.c:594:     g_armwave_state.ch1_buffer = NULL;
 2830              		.loc 1 594 32 is_stmt 0 view .LVU692
 2831 0c90 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 595:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2832              		.loc 1 595 5 is_stmt 1 view .LVU693
 2833              	@ armwave.c:595:     g_armwave_state.xcoord_to_xpixel = NULL;
 2834              		.loc 1 595 38 is_stmt 0 view .LVU694
 2835 0c94 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 596:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2836              		.loc 1 596 5 is_stmt 1 view .LVU695
 2837              	@ armwave.c:596:     g_armwave_state.test_wave_buffer = NULL;
 2838              		.loc 1 596 38 is_stmt 0 view .LVU696
 2839 0c98 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2840              	@ armwave.c:597: }
 597:armwave.c     **** }
 2841              		.loc 1 597 1 view .LVU697
 2842 0c9c 1080BDE8 		pop	{r4, pc}	@
 2843              	.L173:
 2844              		.align	2
 2845              	.L172:
 2846 0ca0 00000000 		.word	g_armwave_state
 2847              		.cfi_endproc
 2848              	.LFE76:
 2850              		.comm	gamma_table,256,4
 2851              		.comm	g_armwave_state,136,4
 2852              		.section	.rodata
 2853              		.align	2
 2854              		.set	.LANCHOR0,. + 0
 2857              	__PRETTY_FUNCTION__.17125:
 2858 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2858      6176655F 
 2858      73657475 
 2858      705F7265 
 2858      6E646572 
 2859 0015 000000   		.space	3
 2862              	__PRETTY_FUNCTION__.17129:
 2863 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2863      6176655F 
 2863      7365745F 
 2863      77617665 
 2863      5F706F69 
 2864 0031 000000   		.space	3
 2867              	__PRETTY_FUNCTION__.17136:
 2868 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2868      6176655F 
 2868      7365745F 
 2868      77617665 
 2868      5F706F69 
 2869              		.section	.rodata.str1.4,"aMS",%progbits,1
 2870              		.align	2
 2871              	.LC0:
 2872 0000 76302E30 		.ascii	"v0.0.1\000"
 2872      2E3100
 2873 0007 00       		.space	1
 2874              	.LC1:
 2875 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2875      61766520 
 2875      76657273 
 2875      696F6E3A 
 2875      2025730A 
 2876 001d 000000   		.space	3
 2877              	.LC2:
 2878 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2878      78253038 
 2878      7820623D 
 2878      30782530 
 2878      38782063 
 2879 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2879      25642073 
 2879      63616C65 
 2879      3D256420 
 2879      62697464 
 2880 0077 00       		.space	1
 2881              	.LC3:
 2882 0078 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2882      75742062 
 2882      75666665 
 2882      723A2030 
 2882      78253038 
 2883 008f 00       		.space	1
 2884              	.LC4:
 2885 0090 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2885      65742025 
 2885      64206279 
 2885      7465732C 
 2885      206E7069 
 2886 00c3 30782530 		.ascii	"0x%08x, stack ~0x%08x\012\000"
 2886      38782C20 
 2886      73746163 
 2886      6B207E30 
 2886      78253038 
 2887 00da 0000     		.space	2
 2888              	.LC5:
 2889 00dc 69746572 		.ascii	"iter...\000"
 2889      2E2E2E00 
 2890              	.LC6:
 2891 00e4 646F6E65 		.ascii	"done paint %d pixels...\012\000"
 2891      20706169 
 2891      6E742025 
 2891      64207069 
 2891      78656C73 
 2892 00fd 000000   		.space	3
 2893              	.LC7:
 2894 0100 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2894      6176655F 
 2894      67656E65 
 2894      72617465 
 2894      3A20736C 
 2895 0131 00       		.ascii	"\000"
 2896 0132 0000     		.space	2
 2897              	.LC8:
 2898 0134 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2898      20653D25 
 2898      6420773D 
 2898      25642077 
 2898      733D2564 
 2899              	.LC9:
 2900 0160 61726D77 		.ascii	"armwave.c\000"
 2900      6176652E 
 2900      6300
 2901 016a 0000     		.space	2
 2902              	.LC10:
 2903 016c 73746172 		.ascii	"start_point < end_point\000"
 2903      745F706F 
 2903      696E7420 
 2903      3C20656E 
 2903      645F706F 
 2904              	.LC11:
 2905 0184 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2905      7566665F 
 2905      73697A65 
 2905      3D25642C 
 2905      20636D70 
 2906 01b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2906      5F776964 
 2906      74683D25 
 2906      642C2077 
 2906      6176655F 
 2907 01e1 000000   		.space	3
 2908              	.LC12:
 2909 01e4 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2909      6F632066 
 2909      61696C75 
 2909      72652061 
 2909      6C6C6F63 
 2910 0217 2E636831 		.ascii	".ch1_buffer)\012\000"
 2910      5F627566 
 2910      66657229 
 2910      0A00
 2911 0225 000000   		.space	3
 2912              	.LC13:
 2913 0228 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2913      3A203078 
 2913      25303878 
 2913      20307825 
 2913      30387820 
 2914              	.LC14:
 2915 024c 77617665 		.ascii	"wave_buffer != NULL\000"
 2915      5F627566 
 2915      66657220 
 2915      213D204E 
 2915      554C4C00 
 2916              	.LC15:
 2917 0260 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2917      6176655F 
 2917      7365745F 
 2917      77617665 
 2917      5F706F69 
 2918 0293 78636565 		.ascii	"xceeded\000"
 2918      64656400 
 2919 029b 00       		.space	1
 2920              	.LC16:
 2921 029c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2921      5F627566 
 2921      6665725F 
 2921      70747220 
 2921      213D2030 
 2922 02b1 000000   		.space	3
 2923              	.LC17:
 2924 02b4 776200   		.ascii	"wb\000"
 2925 02b7 00       		.space	1
 2926              	.LC18:
 2927 02b8 50330A00 		.ascii	"P3\012\000"
 2928              	.LC19:
 2929 02bc 25642025 		.ascii	"%d %d\012\000"
 2929      640A00
 2930 02c3 00       		.space	1
 2931              	.LC20:
 2932 02c4 3235350A 		.ascii	"255\012\000"
 2932      00
 2933 02c9 000000   		.space	3
 2934              	.LC21:
 2935 02cc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2935      25336420 
 2935      2533640A 
 2935      00
 2936 02d9 000000   		.space	3
 2937              	.LC22:
 2938 02dc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2938      6176655F 
 2938      74657374 
 2938      5F627566 
 2938      6665725F 
 2939 030f 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2939      20627566 
 2939      66657220 
 2939      28256420 
 2939      62797465 
 2940              	.LC23:
 2941 0330 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2941      6176655F 
 2941      66696C6C 
 2941      5F706978 
 2941      6275665F 
 2942 0363 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2942      20666169 
 2942      6C65642C 
 2942      20726574 
 2942      75726E69 
 2943 0382 0000     		.space	2
 2944              	.LC24:
 2945 0384 43616C63 		.ascii	"Calculating test set %d\012\000"
 2945      756C6174 
 2945      696E6720 
 2945      74657374 
 2945      20736574 
 2946              		.text
 2947              	.Letext0:
 2948              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2949              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2950              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2951              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2952              		.file 7 "/usr/include/stdio.h"
 2953              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2954              		.file 9 "/usr/include/errno.h"
 2955              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2956              		.file 11 "/usr/include/unistd.h"
 2957              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2958              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2959              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2960              		.file 15 "/usr/include/math.h"
 2961              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2962              		.file 17 "/usr/include/time.h"
 2963              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2964              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2965              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2966              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2967              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2968              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2969              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2970              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2971              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2972              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2973              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2974              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2975              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2976              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2977              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2978              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2979              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2980              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2981              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2982              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2983              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2984              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2985              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2986              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2987              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2988              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2989              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2990              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2991              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2992              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2993              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2994              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2995              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2996              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2997              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2998              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2999              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3000              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3001              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3002              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3003              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3004              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3005              		.file 60 "/usr/local/include/python3.8/context.h"
 3006              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3007              		.file 62 "/usr/local/include/python3.8/code.h"
 3008              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3009              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3010              		.file 65 "/usr/local/include/python3.8/import.h"
 3011              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3012              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3013              		.file 68 "/usr/include/malloc.h"
 3014              		.file 69 "armwave.h"
 3015              		.file 70 "/usr/include/stdlib.h"
 3016              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3017              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3018              		.file 73 "<built-in>"
 3019              		.file 74 "/usr/include/assert.h"
