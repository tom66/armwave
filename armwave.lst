   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 70819FE5 		ldr	r8, .L22	@ tmp194,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0090A0E1 		mov	r9, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241098E5 		ldr	r1, [r8, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403098E5 		ldr	r3, [r8, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044098E5 		ldr	r4, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 40019FE5 		ldr	r0, .L22+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp204,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383098E5 		ldr	r3, [r8, #56]	@ _82, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _82,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _82, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3E0000DA 		ble	.L12		@,
 317 0108 14A098E5 		ldr	r10, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 318 010c 343098E5 		ldr	r3, [r8, #52]	@ _266, g_armwave_state.wave_stride
 319 0110 09A08AE0 		add	r10, r10, r9	@ ivtmp.52, g_armwave_state.wave_buffer, slice_y
 320              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 103 51 view .LVU52
 322 0114 247098E5 		ldr	r7, [r8, #36]	@ _75, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 324              		.loc 1 103 116 view .LVU53
 325 0118 40E098E5 		ldr	lr, [r8, #64]	@ _79, g_armwave_state.bitdepth_height
 326 011c 00906AE2 		rsb	r9, r10, #0	@ ivtmp.53, ivtmp.52
 327              	.LVL11:
 328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 329              		.loc 1 79 11 view .LVU54
 330 0120 05C0A0E1 		mov	ip, r5	@ write_buffer, write_buffer
 331 0124 24308DE5 		str	r3, [sp, #36]	@ _266, %sfp
 332 0128 0030A0E3 		mov	r3, #0	@ w,
 333 012c 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 334              	.LVL12:
 335              	.L15:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 336              		.loc 1 80 9 is_stmt 1 view .LVU55
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 337              		.loc 1 84 9 view .LVU56
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 338              		.loc 1 84 9 is_stmt 0 view .LVU57
 339 0130 000056E3 		cmp	r6, #0	@ height,
 340 0134 2800000A 		beq	.L13		@,
 341 0138 0A80A0E1 		mov	r8, r10	@ ivtmp.45, ivtmp.52
 342 013c 0030A0E3 		mov	r3, #0	@ ivtmp.46,
 343              	.LVL13:
 344              	.L14:
  87:armwave.c     **** 
 345              		.loc 1 87 13 is_stmt 1 view .LVU58
 346              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 347              		.loc 1 87 18 is_stmt 0 view .LVU59
 348 0140 042098E4 		ldr	r2, [r8], #4	@ word, MEM[base: _275, offset: 0B]
 349              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 350              		.loc 1 89 13 is_stmt 1 view .LVU60
  90:armwave.c     ****                 
 351              		.loc 1 90 17 view .LVU61
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 102 17 view .LVU62
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 107 17 view .LVU63
 354              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 355              		.loc 1 103 74 is_stmt 0 view .LVU64
 356 0144 23C8A0E1 		lsr	ip, r3, #16	@ tmp211, ivtmp.46,
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 34 view .LVU65
 359 0148 033087E0 		add	r3, r7, r3	@ _102, _75, ivtmp.46
 360              	.LVL15:
 361              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 362              		.loc 1 90 29 view .LVU66
 363 014c 7210EFE6 		uxtb	r1, r2	@ scale_value, word
 364              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 107 47 view .LVU67
 366 0150 9E1C2CE0 		mla	ip, lr, ip, r1	@ tmp214, _79, tmp211, scale_value
 367              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 368              		.loc 1 108 22 view .LVU68
 369 0154 2214A0E1 		lsr	r1, r2, #8	@ word, word,
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 74 view .LVU69
 372 0158 2308A0E1 		lsr	r0, r3, #16	@ tmp219, _102,
 373              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 374              		.loc 1 90 29 view .LVU70
 375 015c 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU71
 378 0160 8CC0A0E1 		lsl	ip, ip, #1	@ tmp215, tmp214,
 379 0164 9E1020E0 		mla	r0, lr, r0, r1	@ tmp223, _79, tmp219, scale_value
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 34 view .LVU72
 382 0168 033087E0 		add	r3, r7, r3	@ _128, _75, _102
 383              	@ armwave.c:108:                 word >>= 8;
 384              		.loc 1 108 22 view .LVU73
 385 016c 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 386              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 387              		.loc 1 107 47 view .LVU74
 388 0170 BC5094E1 		ldrh	r5, [r4, ip]	@ *_85, *_85
 389              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 390              		.loc 1 103 74 view .LVU75
 391 0174 23B8A0E1 		lsr	fp, r3, #16	@ tmp228, _128,
 392              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 393              		.loc 1 90 29 view .LVU76
 394 0178 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 395              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 396              		.loc 1 107 47 view .LVU77
 397 017c 8000A0E1 		lsl	r0, r0, #1	@ tmp224, tmp223,
 398              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 399              		.loc 1 103 34 view .LVU78
 400 0180 033087E0 		add	r3, r7, r3	@ _154, _75, _128
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 view .LVU79
 403 0184 9E1B21E0 		mla	r1, lr, fp, r1	@ tmp232, _79, tmp228, scale_value
 404 0188 015085E2 		add	r5, r5, #1	@ tmp218, *_85,
 405 018c BC5084E1 		strh	r5, [r4, ip]	@ movhi	@ tmp218, *_85
 406              		.loc 1 108 17 is_stmt 1 view .LVU80
 407              	.LVL16:
  90:armwave.c     ****                 
 408              		.loc 1 90 17 view .LVU81
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 409              		.loc 1 102 17 view .LVU82
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 17 view .LVU83
 411              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 412              		.loc 1 103 74 is_stmt 0 view .LVU84
 413 0190 23C8A0E1 		lsr	ip, r3, #16	@ tmp237, _154,
 414              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 47 view .LVU85
 416 0194 B05094E1 		ldrh	r5, [r4, r0]	@ *_111, *_111
 417 0198 8110A0E1 		lsl	r1, r1, #1	@ tmp233, tmp232,
 418              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 419              		.loc 1 102 50 view .LVU86
 420 019c 9E0C0CE0 		mul	ip, lr, ip	@ tmp238, _79, tmp237
 421              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 422              		.loc 1 107 47 view .LVU87
 423 01a0 015085E2 		add	r5, r5, #1	@ tmp227, *_111,
 424 01a4 B05084E1 		strh	r5, [r4, r0]	@ movhi	@ tmp227, *_111
 425              		.loc 1 108 17 is_stmt 1 view .LVU88
 426              	.LVL17:
  90:armwave.c     ****                 
 427              		.loc 1 90 17 view .LVU89
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 428              		.loc 1 102 17 view .LVU90
 107:armwave.c     ****                 word >>= 8;
 429              		.loc 1 107 17 view .LVU91
 430              	@ armwave.c:108:                 word >>= 8;
 431              		.loc 1 108 22 is_stmt 0 view .LVU92
 432 01a8 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 433              	.LVL18:
 434              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 435              		.loc 1 107 47 view .LVU93
 436 01ac B10094E1 		ldrh	r0, [r4, r1]	@ *_137, *_137
 437 01b0 8220A0E1 		lsl	r2, r2, #1	@ tmp241, word,
 438              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 439              		.loc 1 102 30 view .LVU94
 440 01b4 8CC084E0 		add	ip, r4, ip, lsl #1	@ write_buffer, write_buffer_base, tmp238,
 441              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 442              		.loc 1 107 47 view .LVU95
 443 01b8 010080E2 		add	r0, r0, #1	@ tmp236, *_137,
 444 01bc B10084E1 		strh	r0, [r4, r1]	@ movhi	@ tmp236, *_137
 445              		.loc 1 108 17 is_stmt 1 view .LVU96
 446              	.LVL19:
  90:armwave.c     ****                 
 447              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 448              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 449              		.loc 1 107 17 view .LVU99
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 is_stmt 0 view .LVU100
 452 01c0 B2109CE1 		ldrh	r1, [ip, r2]	@ *_163, *_163
 453              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 454              		.loc 1 84 9 view .LVU101
 455 01c4 080089E0 		add	r0, r9, r8	@ tmp245, ivtmp.53, ivtmp.45
 456 01c8 000056E1 		cmp	r6, r0	@ height, tmp245
 457              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 458              		.loc 1 107 47 view .LVU102
 459 01cc 011081E2 		add	r1, r1, #1	@ tmp244, *_163,
 460 01d0 033087E0 		add	r3, r7, r3	@ ivtmp.46, _75, _154
 461              	.LVL20:
 107:armwave.c     ****                 word >>= 8;
 462              		.loc 1 107 47 view .LVU103
 463 01d4 B2108CE1 		strh	r1, [ip, r2]	@ movhi	@ tmp244, *_163
 464              		.loc 1 108 17 is_stmt 1 view .LVU104
 465              	.LVL21:
 466              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 467              		.loc 1 84 9 is_stmt 0 view .LVU105
 468 01d8 D8FFFF8A 		bhi	.L14		@,
 469              	.LVL22:
 470              	.L13:
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 discriminator 2 view .LVU106
 473 01dc 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 474              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 475              		.loc 1 79 5 discriminator 2 view .LVU107
 476 01e0 20209DE5 		ldr	r2, [sp, #32]	@ _82, %sfp
 477              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 478              		.loc 1 79 44 discriminator 2 view .LVU108
 479 01e4 013083E2 		add	r3, r3, #1	@ w, w,
 480 01e8 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 481              	.LVL23:
 482              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 discriminator 2 view .LVU109
 484 01ec 020053E1 		cmp	r3, r2	@ w, _82
 485 01f0 24309DE5 		ldr	r3, [sp, #36]	@ _266, %sfp
 486              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 487              		.loc 1 79 5 discriminator 2 view .LVU110
 488 01f4 03A08AE0 		add	r10, r10, r3	@ ivtmp.52, ivtmp.52, _266
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 79 5 discriminator 2 view .LVU111
 490 01f8 039049E0 		sub	r9, r9, r3	@ ivtmp.53, ivtmp.53, _266
 491 01fc CBFFFF1A 		bne	.L15		@,
 492 0200 0C50A0E1 		mov	r5, ip	@ write_buffer, write_buffer
 493              	.LVL25:
 494              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 495              		.loc 1 113 5 is_stmt 1 view .LVU112
 496              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 497              		.loc 1 113 40 is_stmt 0 view .LVU113
 498 0204 041045E0 		sub	r1, r5, r4	@ tmp246, write_buffer, write_buffer_base
 499              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 500              		.loc 1 113 5 view .LVU114
 501 0208 14009FE5 		ldr	r0, .L22+8	@,
 502 020c C110A0E1 		asr	r1, r1, #1	@, tmp246,
 503              	@ armwave.c:114: }
 114:armwave.c     **** }
 504              		.loc 1 114 1 view .LVU115
 505 0210 2CD08DE2 		add	sp, sp, #44	@,,
 506              		.cfi_def_cfa_offset 36
 507              		@ sp needed	@
 508 0214 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_restore 14
 510              		.cfi_restore 11
 511              		.cfi_restore 10
 512              		.cfi_restore 9
 513              		.cfi_restore 8
 514              		.cfi_restore 7
 515              		.cfi_restore 6
 516              		.cfi_restore 5
 517              		.cfi_restore 4
 518              		.cfi_def_cfa_offset 0
 519              	.LVL26:
 520              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 521              		.loc 1 113 5 view .LVU116
 522 0218 FEFFFFEA 		b	printf		@
 523              	.LVL27:
 524              	.L23:
 525              		.align	2
 526              	.L22:
 527 021c 00000000 		.word	g_armwave_state
 528 0220 20000000 		.word	.LC2
 529 0224 78000000 		.word	.LC3
 530              		.cfi_endproc
 531              	.LFE59:
 533              		.align	2
 534              		.global	armwave_fill_pixbuf_scaled
 535              		.syntax unified
 536              		.arm
 537              		.fpu vfp
 539              	armwave_fill_pixbuf_scaled:
 540              	.LVL28:
 541              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 542              		.loc 1 121 1 is_stmt 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 32
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 546              		.loc 1 122 5 view .LVU118
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 547              		.loc 1 124 5 view .LVU119
 125:armwave.c     ****     uint8_t r, g, b;
 548              		.loc 1 125 5 view .LVU120
 126:armwave.c     ****     int value; 
 549              		.loc 1 126 5 view .LVU121
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 128 5 view .LVU122
 551              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 552              		.loc 1 121 1 is_stmt 0 view .LVU123
 553 0228 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564 022c 34D04DE2 		sub	sp, sp, #52	@,,
 565              		.cfi_def_cfa_offset 88
 566              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 567              		.loc 1 128 15 view .LVU124
 568 0230 18A29FE5 		ldr	r10, .L46	@ tmp239,
 569              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 570              		.loc 1 121 1 view .LVU125
 571 0234 0090A0E1 		mov	r9, r0	@ out_buffer, out_buffer
 572              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 573              		.loc 1 132 5 view .LVU126
 574 0238 0010A0E1 		mov	r1, r0	@, out_buffer
 575              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 576              		.loc 1 128 15 view .LVU127
 577 023c 04509AE5 		ldr	r5, [r10, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 578              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 579              		.loc 1 132 5 view .LVU128
 580 0240 0C029FE5 		ldr	r0, .L46+4	@,
 581              	.LVL29:
 582              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 583              		.loc 1 128 15 view .LVU129
 584 0244 10508DE5 		str	r5, [sp, #16]	@ base_32ptr, %sfp
 585              	.LVL30:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 129 5 is_stmt 1 view .LVU130
 130:armwave.c     **** 
 587              		.loc 1 130 5 view .LVU131
 588              		.loc 1 132 5 view .LVU132
 589 0248 FEFFFFEB 		bl	printf		@
 590              	.LVL31:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 591              		.loc 1 134 5 view .LVU133
 592              	@ armwave.c:134:     if(out_buffer == NULL)
 593              		.loc 1 134 7 is_stmt 0 view .LVU134
 594 024c 000059E3 		cmp	r9, #0	@ out_buffer,
 595 0250 2600000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 596              		.loc 1 137 5 is_stmt 1 view .LVU135
 597              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 598              		.loc 1 137 27 is_stmt 0 view .LVU136
 599 0254 58309AE5 		ldr	r3, [r10, #88]	@ _1, g_armwave_state.target_width
 600              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack ~0
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 601              		.loc 1 140 38 view .LVU137
 602 0258 5C109AE5 		ldr	r1, [r10, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 603              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 604              		.loc 1 137 10 view .LVU138
 605 025c 40209AE5 		ldr	r2, [r10, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 606              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 607              		.loc 1 139 5 view .LVU139
 608 0260 2C008DE2 		add	r0, sp, #44	@ tmp189,,
 609              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 610              		.loc 1 140 38 view .LVU140
 611 0264 910301E0 		mul	r1, r1, r3	@ tmp185, g_armwave_state.target_height, _1
 612              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 613              		.loc 1 137 10 view .LVU141
 614 0268 920304E0 		mul	r4, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 615              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 616              		.loc 1 139 5 view .LVU142
 617 026c 0111A0E1 		lsl	r1, r1, #2	@, tmp185,
 618 0270 0420A0E1 		mov	r2, r4	@, npix
 619 0274 08008DE5 		str	r0, [sp, #8]	@ tmp189,
 620 0278 50309AE5 		ldr	r3, [r10, #80]	@, g_armwave_state.ch_buff_size
 621 027c 20028DE8 		stm	sp, {r5, r9}	@,,
 622 0280 D0019FE5 		ldr	r0, .L46+8	@,
 623              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 624              		.loc 1 137 10 view .LVU143
 625 0284 14408DE5 		str	r4, [sp, #20]	@ npix, %sfp
 626              	.LVL32:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 627              		.loc 1 139 5 is_stmt 1 view .LVU144
 628 0288 FEFFFFEB 		bl	printf		@
 629              	.LVL33:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 630              		.loc 1 144 5 view .LVU145
 631              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 632              		.loc 1 144 59 is_stmt 0 view .LVU146
 633 028c 58309AE5 		ldr	r3, [r10, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 634 0290 5C209AE5 		ldr	r2, [r10, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 635              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 636              		.loc 1 144 5 view .LVU147
 637 0294 0010A0E3 		mov	r1, #0	@,
 638 0298 0900A0E1 		mov	r0, r9	@, out_buffer
 639              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 640              		.loc 1 144 59 view .LVU148
 641 029c 920302E0 		mul	r2, r2, r3	@ tmp192, g_armwave_state.target_height, g_armwave_state.target_width
 642              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 643              		.loc 1 144 5 view .LVU149
 644 02a0 0221A0E1 		lsl	r2, r2, #2	@, tmp192,
 645 02a4 FEFFFFEB 		bl	memset		@
 646              	.LVL34:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 647              		.loc 1 146 5 is_stmt 1 view .LVU150
 648 02a8 AC019FE5 		ldr	r0, .L46+12	@,
 649 02ac FEFFFFEB 		bl	puts		@
 650              	.LVL35:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 651              		.loc 1 148 5 view .LVU151
 652              		.loc 1 148 5 is_stmt 0 view .LVU152
 653 02b0 000054E3 		cmp	r4, #0	@ npix,
 654 02b4 620000DA 		ble	.L33		@,
 655              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 656              		.loc 1 148 11 view .LVU153
 657 02b8 00B0A0E3 		mov	fp, #0	@ n,
 658              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 659              		.loc 1 122 46 view .LVU154
 660 02bc 18B08DE5 		str	fp, [sp, #24]	@ n, %sfp
 661              	.LVL36:
 662              	.L32:
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         //wave_word = 0x12345678;
 151:armwave.c     ****         wave_word = *base_32ptr++;
 663              		.loc 1 151 9 is_stmt 1 view .LVU155
 664              	@ armwave.c:151:         wave_word = *base_32ptr++;
 665              		.loc 1 151 19 is_stmt 0 view .LVU156
 666 02c0 10309DE5 		ldr	r3, [sp, #16]	@ base_32ptr, %sfp
 667 02c4 048093E4 		ldr	r8, [r3], #4	@ wave_word, MEM[base: base_32ptr_78, offset: 4294967292B]
 668              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 152:armwave.c     **** 
 153:armwave.c     ****         /*
 154:armwave.c     ****         if(n % 200 == 0) {
 155:armwave.c     ****            printf("%d\n", n);
 156:armwave.c     ****         }
 157:armwave.c     ****         */
 158:armwave.c     **** 
 159:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 669              		.loc 1 159 11 view .LVU157
 670 02c8 000058E3 		cmp	r8, #0	@ wave_word,
 671              	@ armwave.c:151:         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 672              		.loc 1 151 19 view .LVU158
 673 02cc 10308DE5 		str	r3, [sp, #16]	@ base_32ptr, %sfp
 674              	.LVL37:
 675              		.loc 1 159 9 is_stmt 1 view .LVU159
 676              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 677              		.loc 1 159 11 is_stmt 0 view .LVU160
 678 02d0 0800001A 		bne	.L44		@,
 679              	.LVL38:
 680              	.L28:
 681              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 682              		.loc 1 148 5 discriminator 2 view .LVU161
 683 02d4 14309DE5 		ldr	r3, [sp, #20]	@ npix, %sfp
 684              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 685              		.loc 1 148 28 discriminator 2 view .LVU162
 686 02d8 02B08BE2 		add	fp, fp, #2	@ n, n,
 687              	.LVL39:
 688              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 689              		.loc 1 148 5 discriminator 2 view .LVU163
 690 02dc 0B0053E1 		cmp	r3, fp	@ npix, n
 691 02e0 F6FFFFCA 		bgt	.L32		@,
 692              	.LVL40:
 693              	.L27:
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 161:armwave.c     ****                 value = wave_word & 0xffff;
 162:armwave.c     ****                 wave_word >>= 16;
 163:armwave.c     **** 
 164:armwave.c     ****                 if(value != 0) {
 165:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 166:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 167:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 168:armwave.c     **** 
 169:armwave.c     ****                     r = MIN(rr, 255);
 170:armwave.c     ****                     g = MIN(gg, 255);
 171:armwave.c     ****                     b = MIN(bb, 255);
 172:armwave.c     **** 
 173:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 174:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 175:armwave.c     **** 
 176:armwave.c     ****                     // Plot the pixels
 177:armwave.c     ****                     nsub = n + w;
 178:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 180:armwave.c     ****                     xx = (nsub >> 8) / 2;
 181:armwave.c     **** 
 182:armwave.c     ****                     for(y = yy; y < ye; y++) {
 183:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 184:armwave.c     ****                         printf("0x%08x,%d,%d,%d,%d\n", out_buffer_base, offset, xx, y, n);
 185:armwave.c     ****                         *(out_buffer_base + offset) = word;
 186:armwave.c     ****                         painted++;
 187:armwave.c     ****                     }
 188:armwave.c     ****                 }
 189:armwave.c     ****             }
 190:armwave.c     ****         }
 191:armwave.c     ****     }
 192:armwave.c     **** 
 193:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 694              		.loc 1 193 5 is_stmt 1 view .LVU164
 695 02e4 18109DE5 		ldr	r1, [sp, #24]	@, %sfp
 696 02e8 70019FE5 		ldr	r0, .L46+16	@,
 697 02ec FEFFFFEB 		bl	printf		@
 698              	.LVL41:
 699              	.L24:
 700              	@ armwave.c:194: }
 194:armwave.c     **** }
 701              		.loc 1 194 1 is_stmt 0 view .LVU165
 702 02f0 34D08DE2 		add	sp, sp, #52	@,,
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              		@ sp needed	@
 706 02f4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 707              	.LVL42:
 708              	.L44:
 709              		.cfi_restore_state
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 710              		.loc 1 160 13 is_stmt 1 view .LVU166
 711              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 712              		.loc 1 160 26 is_stmt 0 view .LVU167
 713 02f8 0020A0E3 		mov	r2, #0	@ _51,
 714              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 715              		.loc 1 160 19 view .LVU168
 716 02fc 2C208DE5 		str	r2, [sp, #44]	@ tmp264, w
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 717              		.loc 1 160 19 view .LVU169
 718 0300 20B08DE5 		str	fp, [sp, #32]	@ n, %sfp
 719 0304 030000EA 		b	.L31		@
 720              	.LVL43:
 721              	.L29:
 722              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 723              		.loc 1 160 32 discriminator 2 view .LVU170
 724 0308 012082E2 		add	r2, r2, #1	@ _51, _51,
 725              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 726              		.loc 1 160 13 discriminator 2 view .LVU171
 727 030c 010052E3 		cmp	r2, #1	@ _51,
 728              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 729              		.loc 1 160 32 discriminator 2 view .LVU172
 730 0310 2C208DE5 		str	r2, [sp, #44]	@ _51, w
 731              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 732              		.loc 1 160 13 discriminator 2 view .LVU173
 733 0314 480000CA 		bgt	.L45		@,
 734              	.L31:
 161:armwave.c     ****                 wave_word >>= 16;
 735              		.loc 1 161 17 is_stmt 1 view .LVU174
 736              	@ armwave.c:161:                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 737              		.loc 1 161 23 is_stmt 0 view .LVU175
 738 0318 7830FFE6 		uxth	r3, r8	@ value, wave_word
 739              	.LVL44:
 162:armwave.c     **** 
 740              		.loc 1 162 17 is_stmt 1 view .LVU176
 741              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 164 19 is_stmt 0 view .LVU177
 743 031c 000053E3 		cmp	r3, #0	@ value,
 744              	@ armwave.c:162:                 wave_word >>= 16;
 162:armwave.c     **** 
 745              		.loc 1 162 27 view .LVU178
 746 0320 2888A0E1 		lsr	r8, r8, #16	@ wave_word, wave_word,
 747              	.LVL45:
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 164 17 is_stmt 1 view .LVU179
 749              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 164 19 is_stmt 0 view .LVU180
 751 0324 F7FFFF0A 		beq	.L29		@,
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 165 21 is_stmt 1 view .LVU181
 753              	.LVL46:
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 166 21 view .LVU182
 167:armwave.c     **** 
 755              		.loc 1 167 21 view .LVU183
 169:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 169 21 view .LVU184
 170:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 170 21 view .LVU185
 171:armwave.c     **** 
 758              		.loc 1 171 21 view .LVU186
 174:armwave.c     **** 
 759              		.loc 1 174 21 view .LVU187
 760              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 761              		.loc 1 177 26 is_stmt 0 view .LVU188
 762 0328 20C09DE5 		ldr	ip, [sp, #32]	@ n, %sfp
 763              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 178 57 view .LVU189
 765 032c 0A6ADAED 		vldr.32	s13, [r10, #40]	@ _38, g_armwave_state.vscale_frac
 766              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 767              		.loc 1 177 26 view .LVU190
 768 0330 0C6082E0 		add	r6, r2, ip	@ nsub, _51, n
 769              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 166 52 view .LVU191
 771 0334 FE76DAE1 		ldrsh	r7, [r10, #110]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 772              	.LVL47:
 773              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 774              		.loc 1 178 32 view .LVU192
 775 0338 7610EFE6 		uxtb	r1, r6	@ _36, nsub
 776              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 777              		.loc 1 179 41 view .LVU193
 778 033c 010081E2 		add	r0, r1, #1	@ tmp226, _36,
 779              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 178 40 view .LVU194
 781 0340 901A07EE 		vmov	s15, r1	@ int	@ _36, _36
 782              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 783              		.loc 1 179 41 view .LVU195
 784 0344 100A07EE 		vmov	s14, r0	@ int	@ tmp226, tmp226
 785              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 786              		.loc 1 167 52 view .LVU196
 787 0348 F017DAE1 		ldrsh	r1, [r10, #112]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 788              	.LVL48:
 789              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 790              		.loc 1 165 52 view .LVU197
 791 034c FC06DAE1 		ldrsh	r0, [r10, #108]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 792              	.LVL49:
 793              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 794              		.loc 1 178 40 view .LVU198
 795 0350 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp224, _36
 796              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 797              		.loc 1 179 46 view .LVU199
 798 0354 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp227, tmp226
 799              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 800              		.loc 1 167 55 view .LVU200
 801 0358 930101E0 		mul	r1, r3, r1	@ tmp206, value, g_armwave_state.ch1_color.b
 802              	.LVL50:
 803              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 804              		.loc 1 166 55 view .LVU201
 805 035c 930707E0 		mul	r7, r3, r7	@ tmp212, value, g_armwave_state.ch1_color.g
 806              	.LVL51:
 807              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 808              		.loc 1 167 24 view .LVU202
 809 0360 4114A0E1 		asr	r1, r1, #8	@ bb, tmp206,
 810              	.LVL52:
 811              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 812              		.loc 1 165 55 view .LVU203
 813 0364 930003E0 		mul	r3, r3, r0	@ tmp220, value, g_armwave_state.ch1_color.r
 814              	.LVL53:
 815              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 816              		.loc 1 178 40 view .LVU204
 817 0368 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp225, tmp224, _38
 818              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 819              		.loc 1 179 46 view .LVU205
 820 036c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp228, tmp227, _38
 821              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 822              		.loc 1 166 24 view .LVU206
 823 0370 4774A0E1 		asr	r7, r7, #8	@ gg, tmp212,
 824              	.LVL54:
 825              	@ armwave.c:171:                     b = MIN(bb, 255);
 171:armwave.c     **** 
 826              		.loc 1 171 25 view .LVU207
 827 0374 FF0051E3 		cmp	r1, #255	@ bb,
 828 0378 FF10A0A3 		movge	r1, #255	@ bb,
 829              	.LVL55:
 830              	@ armwave.c:170:                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 831              		.loc 1 170 25 view .LVU208
 832 037c FF0057E3 		cmp	r7, #255	@ gg,
 833 0380 FF70A0A3 		movge	r7, #255	@ gg,
 834              	.LVL56:
 835              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 836              		.loc 1 165 24 view .LVU209
 837 0384 4334A0E1 		asr	r3, r3, #8	@ rr, tmp220,
 838              	.LVL57:
 839              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 840              		.loc 1 178 24 view .LVU210
 841 0388 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp225
 842              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 843              		.loc 1 179 24 view .LVU211
 844 038c C77ABCEE 		vcvt.u32.f32	s14, s14	@ ye, tmp228
 845              	@ armwave.c:169:                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 846              		.loc 1 169 25 view .LVU212
 847 0390 FF0053E3 		cmp	r3, #255	@ rr,
 848              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 849              		.loc 1 174 56 view .LVU213
 850 0394 0704A0E1 		lsl	r0, r7, #8	@ tmp213, gg,
 851              	@ armwave.c:169:                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 852              		.loc 1 169 25 view .LVU214
 853 0398 FF30A0A3 		movge	r3, #255	@ rr,
 854              	.LVL58:
 855              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 856              		.loc 1 174 44 view .LVU215
 857 039c 0178A0E1 		lsl	r7, r1, #16	@ tmp207, bb,
 858              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 859              		.loc 1 180 32 view .LVU216
 860 03a0 4664A0E1 		asr	r6, r6, #8	@ tmp229, nsub,
 861              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 862              		.loc 1 174 44 view .LVU217
 863 03a4 FF7807E2 		and	r7, r7, #16711680	@ tmp208, tmp207,
 864              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 182 21 view .LVU218
 866 03a8 904A17EE 		vmov	r4, s15	@ int	@ yy,
 867              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 868              		.loc 1 179 24 view .LVU219
 869 03ac 10BA17EE 		vmov	fp, s14	@ int	@ ye, ye
 870              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 871              		.loc 1 174 56 view .LVU220
 872 03b0 7010FFE6 		uxth	r1, r0	@ tmp214, tmp213
 873              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 874              		.loc 1 174 51 view .LVU221
 875 03b4 017087E1 		orr	r7, r7, r1	@ tmp216, tmp208, tmp214
 876              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 877              		.loc 1 174 62 view .LVU222
 878 03b8 7330EFE6 		uxtb	r3, r3	@ rr, rr
 879              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 880              		.loc 1 180 38 view .LVU223
 881 03bc A66F86E0 		add	r6, r6, r6, lsr #31	@ tmp231, tmp229, tmp229,
 882              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 883              		.loc 1 174 62 view .LVU224
 884 03c0 037087E1 		orr	r7, r7, r3	@ tmp222, tmp216, rr
 885              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 886              		.loc 1 182 21 view .LVU225
 887 03c4 0B0054E1 		cmp	r4, fp	@ yy, ye
 888              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 889              		.loc 1 178 24 view .LVU226
 890 03c8 077ACDED 		vstr.32	s15, [sp, #28]	@ int	@ yy, %sfp
 891              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 892              		.loc 1 174 26 view .LVU227
 893 03cc FF7487E3 		orr	r7, r7, #-16777216	@ word, tmp222,
 894              	.LVL59:
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 895              		.loc 1 177 21 is_stmt 1 view .LVU228
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 896              		.loc 1 178 21 view .LVU229
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 897              		.loc 1 179 21 view .LVU230
 180:armwave.c     **** 
 898              		.loc 1 180 21 view .LVU231
 899              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 900              		.loc 1 180 38 is_stmt 0 view .LVU232
 901 03d0 C660A0E1 		asr	r6, r6, #1	@ xx, tmp231,
 902              	.LVL60:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 903              		.loc 1 182 21 is_stmt 1 view .LVU233
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 904              		.loc 1 182 21 is_stmt 0 view .LVU234
 905 03d4 CBFFFF2A 		bcs	.L29		@,
 906 03d8 24808DE5 		str	r8, [sp, #36]	@ wave_word, %sfp
 907 03dc 0C80A0E1 		mov	r8, ip	@ n, n
 908              	.LVL61:
 909              	.L30:
 183:armwave.c     ****                         printf("0x%08x,%d,%d,%d,%d\n", out_buffer_base, offset, xx, y, n);
 910              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU235
 911              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%d,%d,%d,%d\n", out_buffer_base, offset, xx, y, n);
 912              		.loc 1 183 43 is_stmt 0 discriminator 3 view .LVU236
 913 03e0 58509AE5 		ldr	r5, [r10, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 914              	@ armwave.c:184:                         printf("0x%08x,%d,%d,%d,%d\n", out_buffer_base, offset, xx
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 915              		.loc 1 184 25 discriminator 3 view .LVU237
 916 03e4 10018DE8 		stm	sp, {r4, r8}	@,,
 917 03e8 0630A0E1 		mov	r3, r6	@, xx
 918              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%d,%d,%d,%d\n", out_buffer_base, offset, xx, y, n);
 919              		.loc 1 183 32 discriminator 3 view .LVU238
 920 03ec 956425E0 		mla	r5, r5, r4, r6	@ offset, g_armwave_state.target_width, y, xx
 921              	.LVL62:
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 922              		.loc 1 184 25 is_stmt 1 discriminator 3 view .LVU239
 923 03f0 0910A0E1 		mov	r1, r9	@, out_buffer
 924              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 925              		.loc 1 182 42 is_stmt 0 discriminator 3 view .LVU240
 926 03f4 014084E2 		add	r4, r4, #1	@ y, y,
 927              	.LVL63:
 928              	@ armwave.c:184:                         printf("0x%08x,%d,%d,%d,%d\n", out_buffer_base, offset, xx
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 929              		.loc 1 184 25 discriminator 3 view .LVU241
 930 03f8 0520A0E1 		mov	r2, r5	@, offset
 931 03fc 60009FE5 		ldr	r0, .L46+20	@,
 932 0400 FEFFFFEB 		bl	printf		@
 933              	.LVL64:
 185:armwave.c     ****                         painted++;
 934              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU242
 935              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 936              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU243
 937 0404 04005BE1 		cmp	fp, r4	@ ye, y
 938              	@ armwave.c:185:                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 939              		.loc 1 185 53 discriminator 3 view .LVU244
 940 0408 057189E7 		str	r7, [r9, r5, lsl #2]	@ word, *_49
 186:armwave.c     ****                     }
 941              		.loc 1 186 25 is_stmt 1 discriminator 3 view .LVU245
 942              	.LVL65:
 943              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 944              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU246
 945 040c F3FFFF1A 		bne	.L30		@,
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 946              		.loc 1 182 21 discriminator 3 view .LVU247
 947 0410 1C309DE5 		ldr	r3, [sp, #28]	@ yy, %sfp
 948 0414 2C209DE5 		ldr	r2, [sp, #44]	@ _51, w
 949 0418 03B04BE0 		sub	fp, fp, r3	@ tmp237, ye, yy
 950              	.LVL66:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 951              		.loc 1 182 21 discriminator 3 view .LVU248
 952 041c 18309DE5 		ldr	r3, [sp, #24]	@ painted, %sfp
 953              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 954              		.loc 1 160 32 view .LVU249
 955 0420 012082E2 		add	r2, r2, #1	@ _51, _51,
 956 0424 0B3083E0 		add	r3, r3, fp	@ painted, painted, tmp237
 957              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 958              		.loc 1 160 13 view .LVU250
 959 0428 010052E3 		cmp	r2, #1	@ _51,
 960 042c 24809DE5 		ldr	r8, [sp, #36]	@ wave_word, %sfp
 961 0430 18308DE5 		str	r3, [sp, #24]	@ painted, %sfp
 962              	.LVL67:
 963              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 964              		.loc 1 160 32 view .LVU251
 965 0434 2C208DE5 		str	r2, [sp, #44]	@ _51, w
 966              	.LVL68:
 967              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 968              		.loc 1 160 13 view .LVU252
 969 0438 B6FFFFDA 		ble	.L31		@,
 970              	.LVL69:
 971              	.L45:
 160:armwave.c     ****                 value = wave_word & 0xffff;
 972              		.loc 1 160 13 view .LVU253
 973 043c 20B09DE5 		ldr	fp, [sp, #32]	@ n, %sfp
 974 0440 A3FFFFEA 		b	.L28		@
 975              	.LVL70:
 976              	.L33:
 977              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 978              		.loc 1 122 46 view .LVU254
 979 0444 0030A0E3 		mov	r3, #0	@ painted,
 980 0448 18308DE5 		str	r3, [sp, #24]	@ painted, %sfp
 981 044c A4FFFFEA 		b	.L27		@
 982              	.L47:
 983              		.align	2
 984              	.L46:
 985 0450 00000000 		.word	g_armwave_state
 986 0454 84000000 		.word	.LC4
 987 0458 9C000000 		.word	.LC5
 988 045c FC000000 		.word	.LC6
 989 0460 18010000 		.word	.LC8
 990 0464 04010000 		.word	.LC7
 991              		.cfi_endproc
 992              	.LFE60:
 994              		.global	__aeabi_idiv
 995              		.align	2
 996              		.global	armwave_generate
 997              		.syntax unified
 998              		.arm
 999              		.fpu vfp
 1001              	armwave_generate:
 1002              	.LFB61:
 195:armwave.c     **** 
 196:armwave.c     **** /*
 197:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 198:armwave.c     ****  */
 199:armwave.c     **** void armwave_generate()
 200:armwave.c     **** {
 1003              		.loc 1 200 1 is_stmt 1 view -0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 201:armwave.c     ****     uint32_t yy;
 1007              		.loc 1 201 5 view .LVU256
 202:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 1008              		.loc 1 202 5 view .LVU257
 1009              	.LVL71:
 203:armwave.c     **** 
 204:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1010              		.loc 1 204 5 view .LVU258
 1011              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 1012              		.loc 1 200 1 is_stmt 0 view .LVU259
 1013 0468 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 1014              		.cfi_def_cfa_offset 20
 1015              		.cfi_offset 4, -20
 1016              		.cfi_offset 5, -16
 1017              		.cfi_offset 6, -12
 1018              		.cfi_offset 7, -8
 1019              		.cfi_offset 14, -4
 1020              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1021              		.loc 1 204 5 view .LVU260
 1022 046c 0010A0E3 		mov	r1, #0	@,
 1023              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1024              		.loc 1 204 58 view .LVU261
 1025 0470 84509FE5 		ldr	r5, .L56	@ tmp154,
 1026              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 1027              		.loc 1 200 1 view .LVU262
 1028 0474 0CD04DE2 		sub	sp, sp, #12	@,,
 1029              		.cfi_def_cfa_offset 32
 1030              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1031              		.loc 1 204 5 view .LVU263
 1032 0478 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 1033 047c 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1034 0480 FEFFFFEB 		bl	memset		@
 1035              	.LVL72:
 205:armwave.c     **** 
 206:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1036              		.loc 1 206 5 is_stmt 1 view .LVU264
 1037              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1038              		.loc 1 206 68 is_stmt 0 view .LVU265
 1039 0484 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1040              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1041              		.loc 1 206 51 view .LVU266
 1042 0488 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1043 048c 0610A0E1 		mov	r1, r6	@, _13
 1044 0490 FEFFFFEB 		bl	__aeabi_idiv		@
 1045              	.LVL73:
 1046              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1047              		.loc 1 206 5 view .LVU267
 1048 0494 000050E3 		cmp	r0, #0	@,
 1049 0498 1500000A 		beq	.L48		@,
 1050              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 208:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1051              		.loc 1 208 9 view .LVU268
 1052 049c 5C709FE5 		ldr	r7, .L56+4	@ tmp155,
 1053              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1054              		.loc 1 206 12 view .LVU269
 1055 04a0 0040A0E3 		mov	r4, #0	@ yy,
 1056              	.LVL74:
 1057              	.L50:
 1058              		.loc 1 208 9 is_stmt 1 discriminator 3 view .LVU270
 1059 04a4 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1060              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 209:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 210:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1061              		.loc 1 210 48 is_stmt 0 discriminator 3 view .LVU271
 1062 04a8 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1063              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1064              		.loc 1 208 9 discriminator 3 view .LVU272
 1065 04ac 0630A0E1 		mov	r3, r6	@, _13
 1066 04b0 0120A0E1 		mov	r2, r1	@, _5
 1067              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1068              		.loc 1 210 48 discriminator 3 view .LVU273
 1069 04b4 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1070              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1071              		.loc 1 208 9 discriminator 3 view .LVU274
 1072 04b8 0700A0E1 		mov	r0, r7	@, tmp155
 1073 04bc 0410A0E1 		mov	r1, r4	@, yy
 1074 04c0 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1075 04c4 00C08DE5 		str	ip, [sp]	@ tmp145,
 1076 04c8 FEFFFFEB 		bl	printf		@
 1077              	.LVL75:
 211:armwave.c     **** 
 212:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1078              		.loc 1 212 9 is_stmt 1 discriminator 3 view .LVU275
 1079              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1080              		.loc 1 212 62 is_stmt 0 discriminator 3 view .LVU276
 1081 04cc 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1082              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1083              		.loc 1 212 9 discriminator 3 view .LVU277
 1084 04d0 940100E0 		mul	r0, r4, r1	@, yy,
 1085 04d4 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1086              	.LVL76:
 213:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1087              		.loc 1 213 9 is_stmt 1 discriminator 3 view .LVU278
 214:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1088              		.loc 1 214 9 discriminator 3 view .LVU279
 1089              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1090              		.loc 1 206 68 is_stmt 0 discriminator 3 view .LVU280
 1091 04d8 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1092              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1093              		.loc 1 206 51 discriminator 3 view .LVU281
 1094 04dc 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1095 04e0 0610A0E1 		mov	r1, r6	@, _13
 1096 04e4 FEFFFFEB 		bl	__aeabi_idiv		@
 1097              	.LVL77:
 1098              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1099              		.loc 1 206 86 discriminator 3 view .LVU282
 1100 04e8 014084E2 		add	r4, r4, #1	@ yy, yy,
 1101              	.LVL78:
 1102              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1103              		.loc 1 206 5 discriminator 3 view .LVU283
 1104 04ec 040050E1 		cmp	r0, r4	@, yy
 1105 04f0 EBFFFF8A 		bhi	.L50		@,
 1106              	.LVL79:
 1107              	.L48:
 1108              	@ armwave.c:223: }
 215:armwave.c     ****     }
 216:armwave.c     **** 
 217:armwave.c     ****     /*
 218:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 219:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 220:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 221:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 222:armwave.c     ****     */
 223:armwave.c     **** }
 1109              		.loc 1 223 1 view .LVU284
 1110 04f4 0CD08DE2 		add	sp, sp, #12	@,,
 1111              		.cfi_def_cfa_offset 20
 1112              		@ sp needed	@
 1113 04f8 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1114              	.L57:
 1115              		.align	2
 1116              	.L56:
 1117 04fc 00000000 		.word	g_armwave_state
 1118 0500 34010000 		.word	.LC9
 1119              		.cfi_endproc
 1120              	.LFE61:
 1122              		.align	2
 1123              		.global	armwave_setup_render
 1124              		.syntax unified
 1125              		.arm
 1126              		.fpu vfp
 1128              	armwave_setup_render:
 1129              	.LVL80:
 1130              	.LFB62:
 224:armwave.c     **** 
 225:armwave.c     **** /*
 226:armwave.c     ****  * Setup the renderer with passed parameters.
 227:armwave.c     ****  */
 228:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 229:armwave.c     **** {
 1131              		.loc 1 229 1 is_stmt 1 view -0
 1132              		.cfi_startproc
 1133              		@ args = 12, pretend = 0, frame = 0
 1134              		@ frame_needed = 0, uses_anonymous_args = 0
 230:armwave.c     ****     uint32_t length, xx;
 1135              		.loc 1 230 5 view .LVU286
 231:armwave.c     ****     float points_per_pixel;
 1136              		.loc 1 231 5 view .LVU287
 232:armwave.c     **** 
 233:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1137              		.loc 1 233 5 view .LVU288
 1138              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1139              		.loc 1 229 1 is_stmt 0 view .LVU289
 1140 0504 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1141              		.cfi_def_cfa_offset 28
 1142              		.cfi_offset 4, -28
 1143              		.cfi_offset 5, -24
 1144              		.cfi_offset 6, -20
 1145              		.cfi_offset 7, -16
 1146              		.cfi_offset 8, -12
 1147              		.cfi_offset 9, -8
 1148              		.cfi_offset 14, -4
 1149 0508 14D04DE2 		sub	sp, sp, #20	@,,
 1150              		.cfi_def_cfa_offset 48
 1151              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1152              		.loc 1 229 1 view .LVU290
 1153 050c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1154 0510 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1155 0514 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1156 0518 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1157              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1158              		.loc 1 233 5 view .LVU291
 1159 051c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1160              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1161              		.loc 1 229 1 view .LVU292
 1162 0520 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1163 0524 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1164              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1165              		.loc 1 233 5 view .LVU293
 1166 0528 F460CDE1 		strd	r6, [sp, #4]	@,,
 1167 052c 0230A0E1 		mov	r3, r2	@, waves_max
 1168              	.LVL81:
 1169              		.loc 1 233 5 view .LVU294
 1170 0530 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1171 0534 0120A0E1 		mov	r2, r1	@, end_point
 1172              	.LVL82:
 1173              		.loc 1 233 5 view .LVU295
 1174 0538 0010A0E1 		mov	r1, r0	@, start_point
 1175              	.LVL83:
 1176              		.loc 1 233 5 view .LVU296
 1177 053c 8C019FE5 		ldr	r0, .L68+12	@,
 1178              	.LVL84:
 1179              		.loc 1 233 5 view .LVU297
 1180 0540 FEFFFFEB 		bl	printf		@
 1181              	.LVL85:
 234:armwave.c     **** 
 235:armwave.c     ****     // TODO these asserts should instead raise PyExc
 236:armwave.c     ****     assert(start_point < end_point);
 1182              		.loc 1 236 5 is_stmt 1 view .LVU298
 1183 0544 050054E1 		cmp	r4, r5	@ start_point, end_point
 1184 0548 5100002A 		bcs	.L66		@,
 237:armwave.c     **** 
 238:armwave.c     ****     /*
 239:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 240:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 241:armwave.c     ****     if(target_height == 256) {
 242:armwave.c     ****         g_armwave_state.row_shift = 8;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 244:armwave.c     ****     } else if(target_height == 512) {
 245:armwave.c     ****         g_armwave_state.row_shift = 9;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 247:armwave.c     ****     } else if(target_height == 1024) {
 248:armwave.c     ****         g_armwave_state.row_shift = 10;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 250:armwave.c     ****     } else if(target_height == 2048) {
 251:armwave.c     ****         g_armwave_state.row_shift = 11;
 252:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 253:armwave.c     ****     }
 254:armwave.c     ****     */
 255:armwave.c     **** 
 256:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 257:armwave.c     ****     g_armwave_state.xstride = target_height;
 1185              		.loc 1 257 5 view .LVU299
 1186              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 259:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 260:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 261:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 262:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 263:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 264:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 265:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 266:armwave.c     ****     g_armwave_state.target_width = target_width;
 267:armwave.c     ****     g_armwave_state.target_height = target_height;
 268:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1187              		.loc 1 268 45 is_stmt 0 view .LVU300
 1188 054c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1189              	.LVL86:
 1190              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 270:armwave.c     ****     // Calculate compound scaler
 271:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 272:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1191              		.loc 1 272 48 view .LVU301
 1192 0550 5B5A9FED 		vldr.32	s10, .L68	@ tmp187,
 1193 0554 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1194              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1195              		.loc 1 258 49 view .LVU302
 1196 0558 5A7A9FED 		vldr.32	s14, .L68+4	@ tmp165,
 1197              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1198              		.loc 1 272 81 view .LVU303
 1199 055c 5A6A9FED 		vldr.32	s12, .L68+8	@ tmp191,
 1200              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1201              		.loc 1 265 90 view .LVU304
 1202 0560 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1203              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1204              		.loc 1 272 48 view .LVU305
 1205 0564 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1206              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1207              		.loc 1 258 49 view .LVU306
 1208 0568 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1209              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1210              		.loc 1 257 29 view .LVU307
 1211 056c 60419FE5 		ldr	r4, .L68+16	@ tmp222,
 1212              	.LVL87:
 1213              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1214              		.loc 1 263 42 view .LVU308
 1215 0570 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1216              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1217              		.loc 1 258 49 view .LVU309
 1218 0574 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1219              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1220              		.loc 1 265 95 view .LVU310
 1221 0578 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1222              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 273:armwave.c     **** 
 274:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1223              		.loc 1 274 5 view .LVU311
 1224 057c 0128A0E3 		mov	r2, #65536	@ tmp194,
 1225              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1226              		.loc 1 272 48 view .LVU312
 1227 0580 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1228              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1229              		.loc 1 274 5 view .LVU313
 1230 0584 04508DE5 		str	r5, [sp, #4]	@ _13,
 1231 0588 00608DE5 		str	r6, [sp]	@ target_width,
 1232              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1233              		.loc 1 265 95 view .LVU314
 1234 058c 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1235              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1236              		.loc 1 257 29 view .LVU315
 1237 0590 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1238              		.loc 1 258 5 is_stmt 1 view .LVU316
 1239              	@ armwave.c:260:     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1240              		.loc 1 260 33 is_stmt 0 view .LVU317
 1241 0594 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1242              	@ armwave.c:261:     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1243              		.loc 1 261 31 view .LVU318
 1244 0598 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1245              	@ armwave.c:262:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1246              		.loc 1 262 27 view .LVU319
 1247 059c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1248              	@ armwave.c:267:     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1249              		.loc 1 267 35 view .LVU320
 1250 05a0 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1251              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1252              		.loc 1 274 5 view .LVU321
 1253 05a4 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1254              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1255              		.loc 1 264 37 view .LVU322
 1256 05a8 022CA0E3 		mov	r2, #512	@ tmp175,
 1257              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1258              		.loc 1 263 26 view .LVU323
 1259 05ac 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1260              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1261              		.loc 1 264 37 view .LVU324
 1262 05b0 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1263              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1264              		.loc 1 274 5 view .LVU325
 1265 05b4 0310A0E1 		mov	r1, r3	@, tmp180
 1266              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1267              		.loc 1 265 34 view .LVU326
 1268 05b8 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1269              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1270              		.loc 1 258 49 view .LVU327
 1271 05bc 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1272              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1273              		.loc 1 272 40 view .LVU328
 1274 05c0 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1275              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 268:armwave.c     **** 
 1276              		.loc 1 268 33 view .LVU329
 1277 05c4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1278              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1279              		.loc 1 274 5 view .LVU330
 1280 05c8 08019FE5 		ldr	r0, .L68+20	@,
 1281              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1282              		.loc 1 272 40 view .LVU331
 1283 05cc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1284 05d0 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1285              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1286              		.loc 1 259 30 view .LVU332
 1287 05d4 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1288              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1289              		.loc 1 258 33 view .LVU333
 1290 05d8 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1291              		.loc 1 259 5 is_stmt 1 view .LVU334
 1292              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1293              		.loc 1 272 81 is_stmt 0 view .LVU335
 1294 05dc 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1295              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1296              		.loc 1 259 30 view .LVU336
 1297 05e0 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1298              		.loc 1 260 5 is_stmt 1 view .LVU337
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1299              		.loc 1 261 5 view .LVU338
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1300              		.loc 1 262 5 view .LVU339
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1301              		.loc 1 263 5 view .LVU340
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1302              		.loc 1 264 5 view .LVU341
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1303              		.loc 1 265 5 view .LVU342
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 1304              		.loc 1 266 5 view .LVU343
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1305              		.loc 1 267 5 view .LVU344
 268:armwave.c     **** 
 1306              		.loc 1 268 5 view .LVU345
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1307              		.loc 1 271 5 view .LVU346
 1308              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1309              		.loc 1 271 42 is_stmt 0 view .LVU347
 1310 05e4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1311 05e8 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1312              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1313              		.loc 1 274 5 view .LVU348
 1314 05ec 903A17EE 		vmov	r3, s15	@ int	@, _20
 1315              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1316              		.loc 1 271 42 view .LVU349
 1317 05f0 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1318              		.loc 1 274 5 is_stmt 1 view .LVU350
 1319 05f4 0C20A0E1 		mov	r2, ip	@, tmp3
 1320 05f8 FEFFFFEB 		bl	printf		@
 1321              	.LVL88:
 275:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 276:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 277:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 278:armwave.c     **** 
 279:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 280:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 282:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1322              		.loc 1 282 5 view .LVU351
 1323              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 283:armwave.c     **** 
 284:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1324              		.loc 1 284 23 is_stmt 0 view .LVU352
 1325 05fc 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1326              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1327              		.loc 1 282 34 view .LVU353
 1328 0600 4030A0E3 		mov	r3, #64	@ tmp196,
 1329              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1330              		.loc 1 284 7 view .LVU354
 1331 0604 000050E3 		cmp	r0, #0	@ _21,
 1332              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1333              		.loc 1 282 34 view .LVU355
 1334 0608 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1335              		.loc 1 284 5 is_stmt 1 view .LVU356
 1336              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1337              		.loc 1 284 7 is_stmt 0 view .LVU357
 1338 060c 0000000A 		beq	.L60		@,
 285:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1339              		.loc 1 285 9 is_stmt 1 view .LVU358
 1340 0610 FEFFFFEB 		bl	free		@
 1341              	.LVL89:
 1342              	.L60:
 286:armwave.c     **** 
 287:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1343              		.loc 1 287 5 view .LVU359
 1344              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1345              		.loc 1 287 56 is_stmt 0 view .LVU360
 1346 0614 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1347              	.LVL90:
 1348              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1349              		.loc 1 287 34 view .LVU361
 1350 0618 0110A0E3 		mov	r1, #1	@,
 1351 061c 0800A0E1 		mov	r0, r8	@, _22
 1352 0620 FEFFFFEB 		bl	calloc		@
 1353              	.LVL91:
 1354              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 288:armwave.c     **** 
 289:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1355              		.loc 1 289 7 view .LVU362
 1356 0624 000050E3 		cmp	r0, #0	@ tmp199,
 1357              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1358              		.loc 1 287 34 view .LVU363
 1359 0628 0070A0E1 		mov	r7, r0	@ tmp199,
 1360              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1361              		.loc 1 287 32 view .LVU364
 1362 062c 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1363              		.loc 1 289 5 is_stmt 1 view .LVU365
 1364              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 1365              		.loc 1 289 7 is_stmt 0 view .LVU366
 1366 0630 1C00000A 		beq	.L67		@,
 290:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 291:armwave.c     ****         exit(-1);
 292:armwave.c     ****     }
 293:armwave.c     **** 
 294:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 295:armwave.c     ****     length = end_point - start_point;
 1367              		.loc 1 295 5 is_stmt 1 view .LVU367
 1368              	.LVL92:
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1369              		.loc 1 296 5 view .LVU368
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1370              		.loc 1 297 5 view .LVU369
 1371              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1372              		.loc 1 296 31 is_stmt 0 view .LVU370
 1373 0634 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1374              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1375              		.loc 1 296 34 view .LVU371
 1376 0638 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1377              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1378              		.loc 1 297 60 view .LVU372
 1379 063c 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1380              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 298:armwave.c     **** 
 299:armwave.c     ****     /*
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     **** 
 302:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 303:armwave.c     **** 
 304:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306:armwave.c     **** 
 307:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 308:armwave.c     ****     }
 309:armwave.c     ****     */
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1381              		.loc 1 311 34 view .LVU373
 1382 0640 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1383              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1384              		.loc 1 296 31 view .LVU374
 1385 0644 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1386              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1387              		.loc 1 296 34 view .LVU375
 1388 0648 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1389              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1390              		.loc 1 297 60 view .LVU376
 1391 064c E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1392              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1393              		.loc 1 311 34 view .LVU377
 1394 0650 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1395              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1396              		.loc 1 296 22 view .LVU378
 1397 0654 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1398              	.LVL93:
 1399              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1400              		.loc 1 297 60 view .LVU379
 1401 0658 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1402              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1403              		.loc 1 297 41 view .LVU380
 1404 065c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1405 0660 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1406              		.loc 1 311 5 is_stmt 1 view .LVU381
 1407              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1408              		.loc 1 311 34 is_stmt 0 view .LVU382
 1409 0664 FEFFFFEB 		bl	malloc		@
 1410              	.LVL94:
 1411              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1412              		.loc 1 313 5 view .LVU383
 1413 0668 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1414 066c 0710A0E1 		mov	r1, r7	@, tmp199
 1415 0670 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1416 0674 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1417              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1418              		.loc 1 311 34 view .LVU384
 1419 0678 00C0A0E1 		mov	ip, r0	@ tmp215,
 1420              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1421              		.loc 1 313 5 view .LVU385
 1422 067c 0030A0E1 		mov	r3, r0	@, tmp215
 1423              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1424              		.loc 1 311 32 view .LVU386
 1425 0680 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1426              		.loc 1 313 5 is_stmt 1 view .LVU387
 1427 0684 50009FE5 		ldr	r0, .L68+24	@,
 1428              	@ armwave.c:320: }
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****      //malloc_stats();
 320:armwave.c     **** }
 1429              		.loc 1 320 1 is_stmt 0 view .LVU388
 1430 0688 14D08DE2 		add	sp, sp, #20	@,,
 1431              		.cfi_remember_state
 1432              		.cfi_def_cfa_offset 28
 1433              		@ sp needed	@
 1434 068c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1435              		.cfi_restore 14
 1436              		.cfi_restore 9
 1437              		.cfi_restore 8
 1438              		.cfi_restore 7
 1439              		.cfi_restore 6
 1440              		.cfi_restore 5
 1441              		.cfi_restore 4
 1442              		.cfi_def_cfa_offset 0
 1443              	.LVL95:
 1444              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1445              		.loc 1 313 5 view .LVU389
 1446 0690 FEFFFFEA 		b	printf		@
 1447              	.LVL96:
 1448              	.L66:
 1449              		.cfi_restore_state
 236:armwave.c     **** 
 1450              		.loc 1 236 5 is_stmt 1 discriminator 1 view .LVU390
 1451 0694 44309FE5 		ldr	r3, .L68+28	@,
 1452 0698 EC20A0E3 		mov	r2, #236	@,
 1453 069c 40109FE5 		ldr	r1, .L68+32	@,
 1454 06a0 40009FE5 		ldr	r0, .L68+36	@,
 1455 06a4 FEFFFFEB 		bl	__assert_fail		@
 1456              	.LVL97:
 1457              	.L67:
 290:armwave.c     ****         exit(-1);
 1458              		.loc 1 290 9 view .LVU391
 1459 06a8 3C309FE5 		ldr	r3, .L68+40	@ tmp202,
 1460 06ac 0820A0E1 		mov	r2, r8	@, _22
 1461 06b0 38109FE5 		ldr	r1, .L68+44	@,
 1462 06b4 000093E5 		ldr	r0, [r3]	@, stderr
 1463 06b8 FEFFFFEB 		bl	fprintf		@
 1464              	.LVL98:
 291:armwave.c     ****     }
 1465              		.loc 1 291 9 view .LVU392
 1466 06bc 0000E0E3 		mvn	r0, #0	@,
 1467 06c0 FEFFFFEB 		bl	exit		@
 1468              	.LVL99:
 1469              	.L69:
 1470              		.align	2
 1471              	.L68:
 1472 06c4 0000803F 		.word	1065353216
 1473 06c8 00007F43 		.word	1132396544
 1474 06cc 00008047 		.word	1199570944
 1475 06d0 68010000 		.word	.LC10
 1476 06d4 00000000 		.word	g_armwave_state
 1477 06d8 B8010000 		.word	.LC13
 1478 06dc 5C020000 		.word	.LC15
 1479 06e0 00000000 		.word	.LANCHOR0
 1480 06e4 94010000 		.word	.LC11
 1481 06e8 A0010000 		.word	.LC12
 1482 06ec 00000000 		.word	stderr
 1483 06f0 18020000 		.word	.LC14
 1484              		.cfi_endproc
 1485              	.LFE62:
 1487              		.align	2
 1488              		.global	armwave_set_wave_pointer
 1489              		.syntax unified
 1490              		.arm
 1491              		.fpu vfp
 1493              	armwave_set_wave_pointer:
 1494              	.LVL100:
 1495              	.LFB63:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1496              		.loc 1 327 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1500              		.loc 1 328 5 view .LVU394
 1501 06f4 000050E3 		cmp	r0, #0	@ wave_buffer
 1502              		.loc 1 328 5 is_stmt 0 view .LVU395
 1503 06f8 0200000A 		beq	.L75		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1504              		.loc 1 329 5 is_stmt 1 view .LVU396
 1505              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1506              		.loc 1 329 33 is_stmt 0 view .LVU397
 1507 06fc 1C309FE5 		ldr	r3, .L76	@ tmp115,
 1508 0700 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1509 0704 1EFF2FE1 		bx	lr	@
 1510              	.L75:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1511              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU398
 1512              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1513              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU399
 1514 0708 10402DE9 		push	{r4, lr}	@
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 4, -8
 1517              		.cfi_offset 14, -4
 1518              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1519              		.loc 1 328 5 discriminator 1 view .LVU400
 1520 070c 522FA0E3 		mov	r2, #328	@,
 1521 0710 0C309FE5 		ldr	r3, .L76+4	@,
 1522 0714 0C109FE5 		ldr	r1, .L76+8	@,
 1523 0718 0C009FE5 		ldr	r0, .L76+12	@,
 1524              	.LVL101:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1525              		.loc 1 328 5 discriminator 1 view .LVU401
 1526 071c FEFFFFEB 		bl	__assert_fail		@
 1527              	.LVL102:
 1528              	.L77:
 1529              		.align	2
 1530              	.L76:
 1531 0720 00000000 		.word	g_armwave_state
 1532 0724 18000000 		.word	.LANCHOR0+24
 1533 0728 94010000 		.word	.LC11
 1534 072c 80020000 		.word	.LC16
 1535              		.cfi_endproc
 1536              	.LFE63:
 1538              		.align	2
 1539              		.global	armwave_set_wave_pointer_as_testbuf
 1540              		.syntax unified
 1541              		.arm
 1542              		.fpu vfp
 1544              	armwave_set_wave_pointer_as_testbuf:
 1545              	.LVL103:
 1546              	.LFB64:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1547              		.loc 1 337 1 is_stmt 1 view -0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1552              		.loc 1 338 5 view .LVU403
 1553              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1554              		.loc 1 338 29 is_stmt 0 view .LVU404
 1555 0730 24309FE5 		ldr	r3, .L81	@ tmp117,
 1556              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1557              		.loc 1 338 7 view .LVU405
 1558 0734 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1559 0738 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1560 073c 0400003A 		bcc	.L80		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1561              		.loc 1 343 5 is_stmt 1 view .LVU406
 1562              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1563              		.loc 1 343 111 is_stmt 0 view .LVU407
 1564 0740 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1565              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1566              		.loc 1 343 68 view .LVU408
 1567 0744 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1568 0748 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1569              	.LVL104:
 1570              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1571              		.loc 1 343 33 view .LVU409
 1572 074c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1573              	@ armwave.c:344: }
 344:armwave.c     **** }
 1574              		.loc 1 344 1 view .LVU410
 1575 0750 1EFF2FE1 		bx	lr	@
 1576              	.LVL105:
 1577              	.L80:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1578              		.loc 1 339 9 is_stmt 1 view .LVU411
 1579 0754 04009FE5 		ldr	r0, .L81+4	@,
 1580              	.LVL106:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1581              		.loc 1 339 9 is_stmt 0 view .LVU412
 1582 0758 FEFFFFEA 		b	puts		@
 1583              	.LVL107:
 1584              	.L82:
 1585              		.align	2
 1586              	.L81:
 1587 075c 00000000 		.word	g_armwave_state
 1588 0760 94020000 		.word	.LC17
 1589              		.cfi_endproc
 1590              	.LFE64:
 1592              		.align	2
 1593              		.global	armwave_set_wave_pointer_u32
 1594              		.syntax unified
 1595              		.arm
 1596              		.fpu vfp
 1598              	armwave_set_wave_pointer_u32:
 1599              	.LVL108:
 1600              	.LFB65:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1601              		.loc 1 351 1 is_stmt 1 view -0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 0
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1605              		.loc 1 352 5 view .LVU414
 1606 0764 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1607              		.loc 1 352 5 is_stmt 0 view .LVU415
 1608 0768 0200000A 		beq	.L88		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1609              		.loc 1 353 5 is_stmt 1 view .LVU416
 1610              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1611              		.loc 1 353 33 is_stmt 0 view .LVU417
 1612 076c 1C309FE5 		ldr	r3, .L89	@ tmp116,
 1613 0770 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1614 0774 1EFF2FE1 		bx	lr	@
 1615              	.L88:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1616              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU418
 1617              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1618              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU419
 1619 0778 10402DE9 		push	{r4, lr}	@
 1620              		.cfi_def_cfa_offset 8
 1621              		.cfi_offset 4, -8
 1622              		.cfi_offset 14, -4
 1623              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1624              		.loc 1 352 5 discriminator 1 view .LVU420
 1625 077c 162EA0E3 		mov	r2, #352	@,
 1626 0780 0C309FE5 		ldr	r3, .L89+4	@,
 1627 0784 0C109FE5 		ldr	r1, .L89+8	@,
 1628 0788 0C009FE5 		ldr	r0, .L89+12	@,
 1629              	.LVL109:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1630              		.loc 1 352 5 discriminator 1 view .LVU421
 1631 078c FEFFFFEB 		bl	__assert_fail		@
 1632              	.LVL110:
 1633              	.L90:
 1634              		.align	2
 1635              	.L89:
 1636 0790 00000000 		.word	g_armwave_state
 1637 0794 34000000 		.word	.LANCHOR0+52
 1638 0798 94010000 		.word	.LC11
 1639 079c D0020000 		.word	.LC18
 1640              		.cfi_endproc
 1641              	.LFE65:
 1643              		.align	2
 1644              		.global	armwave_clear_buffer
 1645              		.syntax unified
 1646              		.arm
 1647              		.fpu vfp
 1649              	armwave_clear_buffer:
 1650              	.LVL111:
 1651              	.LFB66:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1652              		.loc 1 360 1 is_stmt 1 view -0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1657              		.loc 1 362 5 view .LVU423
 1658              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1659              		.loc 1 362 58 is_stmt 0 view .LVU424
 1660 07a0 0C309FE5 		ldr	r3, .L92	@ tmp114,
 1661              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1662              		.loc 1 362 5 view .LVU425
 1663 07a4 0010A0E3 		mov	r1, #0	@,
 1664 07a8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1665 07ac 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1666              	.LVL112:
 1667              		.loc 1 362 5 view .LVU426
 1668 07b0 FEFFFFEA 		b	memset		@
 1669              	.LVL113:
 1670              	.L93:
 1671              		.align	2
 1672              	.L92:
 1673 07b4 00000000 		.word	g_armwave_state
 1674              		.cfi_endproc
 1675              	.LFE66:
 1677              		.align	2
 1678              		.global	armwave_set_channel_colour
 1679              		.syntax unified
 1680              		.arm
 1681              		.fpu vfp
 1683              	armwave_set_channel_colour:
 1684              	.LVL114:
 1685              	.LFB67:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1686              		.loc 1 369 1 is_stmt 1 view -0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 0
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1691              		.loc 1 371 5 view .LVU428
 1692 07b8 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1693              		.loc 1 373 13 view .LVU429
 1694              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1695              		.loc 1 373 41 is_stmt 0 view .LVU430
 1696 07bc 0C009F05 		ldreq	r0, .L96	@ tmp117,
 1697              	.LVL115:
 1698              		.loc 1 373 41 view .LVU431
 1699 07c0 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1700              		.loc 1 374 13 is_stmt 1 view .LVU432
 1701              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1702              		.loc 1 374 41 is_stmt 0 view .LVU433
 1703 07c4 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1704              		.loc 1 375 13 is_stmt 1 view .LVU434
 1705              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1706              		.loc 1 375 41 is_stmt 0 view .LVU435
 1707 07c8 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1708              		.loc 1 376 13 is_stmt 1 view .LVU436
 1709              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1710              		.loc 1 378 1 is_stmt 0 view .LVU437
 1711 07cc 1EFF2FE1 		bx	lr	@
 1712              	.L97:
 1713              		.align	2
 1714              	.L96:
 1715 07d0 00000000 		.word	g_armwave_state
 1716              		.cfi_endproc
 1717              	.LFE67:
 1719              		.align	2
 1720              		.global	armwave_dump_ppm_debug
 1721              		.syntax unified
 1722              		.arm
 1723              		.fpu vfp
 1725              	armwave_dump_ppm_debug:
 1726              	.LVL116:
 1727              	.LFB68:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1728              		.loc 1 384 1 is_stmt 1 view -0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 0
 1731              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1732              		.loc 1 385 5 view .LVU439
 1733              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1734              		.loc 1 384 1 is_stmt 0 view .LVU440
 1735 07d4 0130A0E1 		mov	r3, r1	@ fn, fn
 1736 07d8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1737              		.cfi_def_cfa_offset 28
 1738              		.cfi_offset 4, -28
 1739              		.cfi_offset 5, -24
 1740              		.cfi_offset 6, -20
 1741              		.cfi_offset 7, -16
 1742              		.cfi_offset 8, -12
 1743              		.cfi_offset 9, -8
 1744              		.cfi_offset 14, -4
 1745 07dc 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1746 07e0 0CD04DE2 		sub	sp, sp, #12	@,,
 1747              		.cfi_def_cfa_offset 40
 1748              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1749              		.loc 1 385 16 view .LVU441
 1750 07e4 C4109FE5 		ldr	r1, .L106	@,
 1751              	.LVL117:
 1752              		.loc 1 385 16 view .LVU442
 1753 07e8 0300A0E1 		mov	r0, r3	@, fn
 1754              	.LVL118:
 1755              		.loc 1 385 16 view .LVU443
 1756 07ec FEFFFFEB 		bl	fopen64		@
 1757              	.LVL119:
 1758              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1759              		.loc 1 392 5 view .LVU444
 1760 07f0 BC609FE5 		ldr	r6, .L106+4	@ tmp150,
 1761              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1762              		.loc 1 391 5 view .LVU445
 1763 07f4 0320A0E3 		mov	r2, #3	@,
 1764 07f8 0110A0E3 		mov	r1, #1	@,
 1765              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1766              		.loc 1 385 16 view .LVU446
 1767 07fc 0070A0E1 		mov	r7, r0	@ fp,
 1768              	.LVL120:
 386:armwave.c     ****     uint32_t data;
 1769              		.loc 1 386 5 is_stmt 1 view .LVU447
 387:armwave.c     **** 
 1770              		.loc 1 387 5 view .LVU448
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1771              		.loc 1 391 5 view .LVU449
 1772 0800 0030A0E1 		mov	r3, r0	@, fp
 1773 0804 AC009FE5 		ldr	r0, .L106+8	@,
 1774              	.LVL121:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1775              		.loc 1 391 5 is_stmt 0 view .LVU450
 1776 0808 FEFFFFEB 		bl	fwrite		@
 1777              	.LVL122:
 1778              		.loc 1 392 5 is_stmt 1 view .LVU451
 1779 080c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1780 0810 A4109FE5 		ldr	r1, .L106+12	@,
 1781 0814 0700A0E1 		mov	r0, r7	@, fp
 1782 0818 FEFFFFEB 		bl	fprintf		@
 1783              	.LVL123:
 393:armwave.c     ****     fputs("255\n", fp);
 1784              		.loc 1 393 5 view .LVU452
 1785 081c 0420A0E3 		mov	r2, #4	@,
 1786 0820 0730A0E1 		mov	r3, r7	@, fp
 1787 0824 0110A0E3 		mov	r1, #1	@,
 1788 0828 90009FE5 		ldr	r0, .L106+16	@,
 1789 082c FEFFFFEB 		bl	fwrite		@
 1790              	.LVL124:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1791              		.loc 1 395 5 view .LVU453
 1792              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1793              		.loc 1 395 37 is_stmt 0 view .LVU454
 1794 0830 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1795              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1796              		.loc 1 395 5 view .LVU455
 1797 0834 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1798 0838 180000DA 		ble	.L99		@,
 1799 083c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1800              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1801              		.loc 1 400 13 view .LVU456
 1802 0840 7C909FE5 		ldr	r9, .L106+20	@ tmp152,
 1803              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1804              		.loc 1 395 12 view .LVU457
 1805 0844 0050A0E3 		mov	r5, #0	@ yy,
 1806              	.LVL125:
 1807              	.L100:
 1808              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1809              		.loc 1 396 9 view .LVU458
 1810 0848 000053E3 		cmp	r3, #0	@ _13,
 1811              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1812              		.loc 1 396 16 view .LVU459
 1813 084c 0040A0C3 		movgt	r4, #0	@ xx,
 1814              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1815              		.loc 1 396 9 view .LVU460
 1816 0850 0F0000DA 		ble	.L102		@,
 1817              	.LVL126:
 1818              	.L101:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1819              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU461
 1820              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1821              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU462
 1822 0854 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1823              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1824              		.loc 1 400 13 discriminator 3 view .LVU463
 1825 0858 0910A0E1 		mov	r1, r9	@, tmp152
 1826 085c 0700A0E1 		mov	r0, r7	@, fp
 1827              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1828              		.loc 1 397 18 discriminator 3 view .LVU464
 1829 0860 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1830              	.LVL127:
 1831              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU465
 1832              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1833              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU466
 1834 0864 014084E2 		add	r4, r4, #1	@ xx, xx,
 1835              	.LVL128:
 1836              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1837              		.loc 1 400 81 discriminator 3 view .LVU467
 1838 0868 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1839              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1840              		.loc 1 400 61 discriminator 3 view .LVU468
 1841 086c 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1842              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1843              		.loc 1 400 13 discriminator 3 view .LVU469
 1844 0870 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1845 0874 7330EFE6 		uxtb	r3, r3	@, tmp142
 1846 0878 00C08DE5 		str	ip, [sp]	@ tmp147,
 1847 087c 7220EFE6 		uxtb	r2, r2	@, data
 1848              	.LVL129:
 1849              		.loc 1 400 13 discriminator 3 view .LVU470
 1850 0880 FEFFFFEB 		bl	fprintf		@
 1851              	.LVL130:
 1852              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1853              		.loc 1 396 41 discriminator 3 view .LVU471
 1854 0884 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1855              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1856              		.loc 1 396 9 discriminator 3 view .LVU472
 1857 0888 040053E1 		cmp	r3, r4	@ _13, xx
 1858 088c F0FFFFCA 		bgt	.L101		@,
 1859 0890 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1860              	.LVL131:
 1861              	.L102:
 1862              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1863              		.loc 1 395 55 discriminator 2 view .LVU473
 1864 0894 015085E2 		add	r5, r5, #1	@ yy, yy,
 1865              	.LVL132:
 1866              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1867              		.loc 1 395 5 discriminator 2 view .LVU474
 1868 0898 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1869 089c E9FFFFBA 		blt	.L100		@,
 1870              	.LVL133:
 1871              	.L99:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1872              		.loc 1 404 5 is_stmt 1 view .LVU475
 1873 08a0 0700A0E1 		mov	r0, r7	@, fp
 1874              	@ armwave.c:405: }
 405:armwave.c     **** }
 1875              		.loc 1 405 1 is_stmt 0 view .LVU476
 1876 08a4 0CD08DE2 		add	sp, sp, #12	@,,
 1877              		.cfi_def_cfa_offset 28
 1878              		@ sp needed	@
 1879 08a8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1880              		.cfi_restore 14
 1881              		.cfi_restore 9
 1882              		.cfi_restore 8
 1883              		.cfi_restore 7
 1884              		.cfi_restore 6
 1885              		.cfi_restore 5
 1886              		.cfi_restore 4
 1887              		.cfi_def_cfa_offset 0
 1888              	.LVL134:
 1889              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1890              		.loc 1 404 5 view .LVU477
 1891 08ac FEFFFFEA 		b	fclose		@
 1892              	.LVL135:
 1893              	.L107:
 404:armwave.c     **** }
 1894              		.loc 1 404 5 view .LVU478
 1895              		.align	2
 1896              	.L106:
 1897 08b0 E8020000 		.word	.LC19
 1898 08b4 00000000 		.word	g_armwave_state
 1899 08b8 EC020000 		.word	.LC20
 1900 08bc F0020000 		.word	.LC21
 1901 08c0 F8020000 		.word	.LC22
 1902 08c4 00030000 		.word	.LC23
 1903              		.cfi_endproc
 1904              	.LFE68:
 1906              		.align	2
 1907              		.global	armwave_test_init
 1908              		.syntax unified
 1909              		.arm
 1910              		.fpu vfp
 1912              	armwave_test_init:
 1913              	.LVL136:
 1914              	.LFB69:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1915              		.loc 1 411 1 is_stmt 1 view -0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 0
 1918              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1919              		.loc 1 412 5 view .LVU480
 1920              	.LBB12:
 1921              	.LBI12:
  34:armwave.c     **** {
 1922              		.loc 1 34 6 view .LVU481
  34:armwave.c     **** {
 1923              		.loc 1 34 6 is_stmt 0 view .LVU482
 1924              	.LBE12:
 1925              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1926              		.loc 1 411 1 view .LVU483
 1927 08c8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1928              		.cfi_def_cfa_offset 32
 1929              		.cfi_offset 4, -32
 1930              		.cfi_offset 5, -28
 1931              		.cfi_offset 6, -24
 1932              		.cfi_offset 7, -20
 1933              		.cfi_offset 8, -16
 1934              		.cfi_offset 9, -12
 1935              		.cfi_offset 10, -8
 1936              		.cfi_offset 14, -4
 1937 08cc 068B2DED 		vpush.64	{d8, d9, d10}	@
 1938              		.cfi_def_cfa_offset 56
 1939              		.cfi_offset 80, -56
 1940              		.cfi_offset 81, -52
 1941              		.cfi_offset 82, -48
 1942              		.cfi_offset 83, -44
 1943              		.cfi_offset 84, -40
 1944              		.cfi_offset 85, -36
 1945 08d0 BC409FE5 		ldr	r4, .L112+20	@ ivtmp.79,
 1946              	.LBB15:
 1947              	.LBB13:
 1948              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1949              		.loc 1 40 32 view .LVU484
 1950 08d4 2DAA9FED 		vldr.32	s20, .L112+16	@ tmp136,
 1951              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1952              		.loc 1 40 26 view .LVU485
 1953 08d8 289B9FED 		vldr.64	d9, .L112	@ tmp151,
 1954              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1955              		.loc 1 40 49 view .LVU486
 1956 08dc 298B9FED 		vldr.64	d8, .L112+8	@ tmp139,
 1957 08e0 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1958              	.LBE13:
 1959              	.LBE15:
 1960              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1961              		.loc 1 411 1 view .LVU487
 1962 08e4 10D04DE2 		sub	sp, sp, #16	@,,
 1963              		.cfi_def_cfa_offset 72
 1964              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1965              		.loc 1 411 1 view .LVU488
 1966 08e8 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1967 08ec 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1968 08f0 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1969 08f4 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1970 08f8 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1971 08fc 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1972              	.LVL137:
 1973              	.L109:
 1974              	.LBB16:
 1975              	.LBB14:
  40:armwave.c     ****     }
 1976              		.loc 1 40 9 is_stmt 1 view .LVU489
 1977              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1978              		.loc 1 40 32 is_stmt 0 view .LVU490
 1979 0900 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1980              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1981              		.loc 1 40 26 view .LVU491
 1982 0904 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1983              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1984              		.loc 1 40 32 view .LVU492
 1985 0908 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1986 090c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1987 0910 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1988              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1989              		.loc 1 40 26 view .LVU493
 1990 0914 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1991 0918 FEFFFFEB 		bl	pow		@
 1992              	.LVL138:
 1993              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1994              		.loc 1 40 49 view .LVU494
 1995 091c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1996              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1997              		.loc 1 40 24 view .LVU495
 1998 0920 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1999 0924 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2000 0928 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2001              	.LVL139:
 2002              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2003              		.loc 1 39 5 view .LVU496
 2004 092c 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 2005 0930 F2FFFF1A 		bne	.L109		@,
 2006              	.LVL140:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2007              		.loc 1 39 5 view .LVU497
 2008              	.LBE14:
 2009              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2010              		.loc 1 415 5 is_stmt 1 view .LVU498
 2011              	.LBB17:
 2012              	.LBI17:
 368:armwave.c     **** {
 2013              		.loc 1 368 6 view .LVU499
 2014              	.LBB18:
 371:armwave.c     ****         case 1:
 2015              		.loc 1 371 5 view .LVU500
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2016              		.loc 1 373 13 view .LVU501
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2017              		.loc 1 374 13 view .LVU502
 2018              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2019              		.loc 1 373 41 is_stmt 0 view .LVU503
 2020 0934 5CC09FE5 		ldr	ip, .L112+24	@ tmp142,
 2021 0938 5C409FE5 		ldr	r4, .L112+28	@ tmp143,
 2022              	.LBE18:
 2023              	.LBE17:
 2024              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2025              		.loc 1 417 5 view .LVU504
 2026 093c 0000A0E3 		mov	r0, #0	@ tmp147,
 2027              	.LBB22:
 2028              	.LBB19:
 2029              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 2030              		.loc 1 375 41 view .LVU505
 2031 0940 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2032              	.LBE19:
 2033              	.LBE22:
 2034              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2035              		.loc 1 417 5 view .LVU506
 2036 0944 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2037 0948 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2038 094c 00808DE5 		str	r8, [sp]	@ render_width,
 2039 0950 0610A0E1 		mov	r1, r6	@, tmp3
 2040 0954 0720A0E1 		mov	r2, r7	@, nwaves
 2041              	.LBB23:
 2042              	.LBB20:
 2043              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2044              		.loc 1 373 41 view .LVU507
 2045 0958 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 2046              		.loc 1 375 13 is_stmt 1 view .LVU508
 2047              	.LBE20:
 2048              	.LBE23:
 2049              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2050              		.loc 1 417 5 is_stmt 0 view .LVU509
 2051 095c 0630A0E1 		mov	r3, r6	@, wave_size
 2052              	.LBB24:
 2053              	.LBB21:
 2054              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 2055              		.loc 1 375 41 view .LVU510
 2056 0960 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 2057              		.loc 1 376 13 is_stmt 1 view .LVU511
 2058              	.LVL141:
 376:armwave.c     ****     }
 2059              		.loc 1 376 13 is_stmt 0 view .LVU512
 2060              	.LBE21:
 2061              	.LBE24:
 2062              		.loc 1 417 5 is_stmt 1 view .LVU513
 2063 0964 FEFFFFEB 		bl	armwave_setup_render		@
 2064              	.LVL142:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2065              		.loc 1 419 5 view .LVU514
 2066 0968 30109FE5 		ldr	r1, .L112+32	@,
 2067 096c 30009FE5 		ldr	r0, .L112+36	@,
 2068              	@ armwave.c:420: }
 420:armwave.c     **** }
 2069              		.loc 1 420 1 is_stmt 0 view .LVU515
 2070 0970 10D08DE2 		add	sp, sp, #16	@,,
 2071              		.cfi_def_cfa_offset 56
 2072              		@ sp needed	@
 2073 0974 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2074              		.cfi_restore 84
 2075              		.cfi_restore 85
 2076              		.cfi_restore 82
 2077              		.cfi_restore 83
 2078              		.cfi_restore 80
 2079              		.cfi_restore 81
 2080              		.cfi_def_cfa_offset 32
 2081 0978 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2082              		.cfi_restore 14
 2083              		.cfi_restore 10
 2084              		.cfi_restore 9
 2085              		.cfi_restore 8
 2086              		.cfi_restore 7
 2087              		.cfi_restore 6
 2088              		.cfi_restore 5
 2089              		.cfi_restore 4
 2090              		.cfi_def_cfa_offset 0
 2091              	.LVL143:
 2092              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 2093              		.loc 1 419 5 view .LVU516
 2094 097c FEFFFFEA 		b	printf		@
 2095              	.LVL144:
 2096              	.L113:
 2097              		.align	3
 2098              	.L112:
 2099 0980 000000C0 		.word	-1073741824
 2100 0984 CCCCEC3F 		.word	1072483532
 2101 0988 00000000 		.word	0
 2102 098c 00E06F40 		.word	1081073664
 2103 0990 00007F43 		.word	1132396544
 2104 0994 FFFFFFFF 		.word	gamma_table-1
 2105 0998 00000000 		.word	g_armwave_state
 2106 099c F609F406 		.word	116656630
 2107 09a0 00000000 		.word	.LC0
 2108 09a4 08000000 		.word	.LC1
 2109              		.cfi_endproc
 2110              	.LFE69:
 2112              		.align	2
 2113              		.global	armwave_test_fill_outbuf
 2114              		.syntax unified
 2115              		.arm
 2116              		.fpu vfp
 2118              	armwave_test_fill_outbuf:
 2119              	.LFB70:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Render image to the local allocated buffer.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_fill_outbuf()
 426:armwave.c     **** {
 2120              		.loc 1 426 1 is_stmt 1 view -0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 0
 2123              		@ frame_needed = 0, uses_anonymous_args = 0
 2124              		@ link register save eliminated.
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2125              		.loc 1 427 5 view .LVU518
 2126 09a8 04309FE5 		ldr	r3, .L115	@ tmp111,
 2127 09ac 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2128 09b0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2129              	.LVL145:
 2130              	.L116:
 2131              		.align	2
 2132              	.L115:
 2133 09b4 00000000 		.word	g_armwave_state
 2134              		.cfi_endproc
 2135              	.LFE70:
 2137              		.align	2
 2138              		.global	armwave_test_dump_buffer_to_ppm
 2139              		.syntax unified
 2140              		.arm
 2141              		.fpu vfp
 2143              	armwave_test_dump_buffer_to_ppm:
 2144              	.LVL146:
 2145              	.LFB71:
 428:armwave.c     **** }
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 434:armwave.c     **** {
 2146              		.loc 1 434 1 view -0
 2147              		.cfi_startproc
 2148              		@ args = 0, pretend = 0, frame = 0
 2149              		@ frame_needed = 0, uses_anonymous_args = 0
 2150              		@ link register save eliminated.
 435:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2151              		.loc 1 435 5 view .LVU520
 2152 09b8 08309FE5 		ldr	r3, .L118	@ tmp112,
 2153 09bc 0010A0E1 		mov	r1, r0	@, fn
 2154 09c0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2155              	.LVL147:
 2156              		.loc 1 435 5 is_stmt 0 view .LVU521
 2157 09c4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2158              	.LVL148:
 2159              	.L119:
 2160              		.loc 1 435 5 view .LVU522
 2161              		.align	2
 2162              	.L118:
 2163 09c8 00000000 		.word	g_armwave_state
 2164              		.cfi_endproc
 2165              	.LFE71:
 2167              		.align	2
 2168              		.global	armwave_test_fill_gdkbuf
 2169              		.syntax unified
 2170              		.arm
 2171              		.fpu vfp
 2173              	armwave_test_fill_gdkbuf:
 2174              	.LVL149:
 2175              	.LFB72:
 436:armwave.c     **** }
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Render GDK buffer with test funtionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 442:armwave.c     **** {
 2176              		.loc 1 442 1 is_stmt 1 view -0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 0, uses_anonymous_args = 0
 2180              		@ link register save eliminated.
 443:armwave.c     ****     //PyObject *mv;
 444:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 445:armwave.c     **** 
 446:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 447:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2181              		.loc 1 447 5 view .LVU524
 448:armwave.c     ****     
 449:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2182              		.loc 1 450 5 view .LVU525
 2183              	@ armwave.c:447:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 447:armwave.c     ****     
 2184              		.loc 1 447 11 is_stmt 0 view .LVU526
 2185 09cc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2186              	@ armwave.c:450:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2187              		.loc 1 450 5 view .LVU527
 2188 09d0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2189              	.LVL150:
 2190              		.loc 1 450 5 view .LVU528
 2191 09d4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2192              	.LVL151:
 2193              		.loc 1 450 5 view .LVU529
 2194              		.cfi_endproc
 2195              	.LFE72:
 2197              		.align	2
 2198              		.global	armwave_test_buffer_alloc
 2199              		.syntax unified
 2200              		.arm
 2201              		.fpu vfp
 2203              	armwave_test_buffer_alloc:
 2204              	.LVL152:
 2205              	.LFB73:
 451:armwave.c     **** }
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 457:armwave.c     **** {
 2206              		.loc 1 457 1 is_stmt 1 view -0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 458:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2210              		.loc 1 458 5 view .LVU531
 2211              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2212              		.loc 1 457 1 is_stmt 0 view .LVU532
 2213 09d8 70402DE9 		push	{r4, r5, r6, lr}	@
 2214              		.cfi_def_cfa_offset 16
 2215              		.cfi_offset 4, -16
 2216              		.cfi_offset 5, -12
 2217              		.cfi_offset 6, -8
 2218              		.cfi_offset 14, -4
 2219              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2220              		.loc 1 457 1 view .LVU533
 2221 09dc 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2222              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2223              		.loc 1 458 23 view .LVU534
 2224 09e0 44409FE5 		ldr	r4, .L128	@ tmp128,
 2225 09e4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2226              	.LVL153:
 2227              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2228              		.loc 1 458 7 view .LVU535
 2229 09e8 000050E3 		cmp	r0, #0	@ _1,
 2230 09ec 0000000A 		beq	.L122		@,
 459:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2231              		.loc 1 459 9 is_stmt 1 view .LVU536
 2232 09f0 FEFFFFEB 		bl	free		@
 2233              	.LVL154:
 2234              	.L122:
 460:armwave.c     ****     }
 461:armwave.c     **** 
 462:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 463:armwave.c     **** 
 464:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2235              		.loc 1 464 5 view .LVU537
 2236              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2237              		.loc 1 464 75 is_stmt 0 view .LVU538
 2238 09f4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2239 09f8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2240              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2241              		.loc 1 464 40 view .LVU539
 2242 09fc 0610A0E1 		mov	r1, r6	@, nsets
 2243              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2244              		.loc 1 464 75 view .LVU540
 2245 0a00 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2246              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2247              		.loc 1 464 40 view .LVU541
 2248 0a04 0500A0E1 		mov	r0, r5	@, _4
 2249 0a08 FEFFFFEB 		bl	calloc		@
 2250              	.LVL155:
 2251              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     **** 
 466:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2252              		.loc 1 466 7 view .LVU542
 2253 0a0c 000050E3 		cmp	r0, #0	@ tmp124,
 2254              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2255              		.loc 1 464 38 view .LVU543
 2256 0a10 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2257              		.loc 1 466 5 is_stmt 1 view .LVU544
 2258              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 2259              		.loc 1 466 7 is_stmt 0 view .LVU545
 2260 0a14 7080BD18 		popne	{r4, r5, r6, pc}	@
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2261              		.loc 1 467 9 is_stmt 1 view .LVU546
 2262 0a18 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2263 0a1c 0620A0E1 		mov	r2, r6	@, nsets
 2264 0a20 08009FE5 		ldr	r0, .L128+4	@,
 2265              	@ armwave.c:471: }
 468:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 469:armwave.c     ****         return;
 470:armwave.c     ****     }
 471:armwave.c     **** }
 2266              		.loc 1 471 1 is_stmt 0 view .LVU547
 2267 0a24 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2268              		.cfi_restore 14
 2269              		.cfi_restore 6
 2270              		.cfi_restore 5
 2271              		.cfi_restore 4
 2272              		.cfi_def_cfa_offset 0
 2273              	.LVL156:
 2274              	@ armwave.c:467:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2275              		.loc 1 467 9 view .LVU548
 2276 0a28 FEFFFFEA 		b	printf		@
 2277              	.LVL157:
 2278              	.L129:
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2279              		.loc 1 467 9 view .LVU549
 2280              		.align	2
 2281              	.L128:
 2282 0a2c 00000000 		.word	g_armwave_state
 2283 0a30 10030000 		.word	.LC24
 2284              		.cfi_endproc
 2285              	.LFE73:
 2287              		.align	2
 2288              		.global	armwave_fill_pixbuf_into_pybuffer
 2289              		.syntax unified
 2290              		.arm
 2291              		.fpu vfp
 2293              	armwave_fill_pixbuf_into_pybuffer:
 2294              	.LVL158:
 2295              	.LFB74:
 472:armwave.c     **** 
 473:armwave.c     **** /*
 474:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 475:armwave.c     ****  */
 476:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 477:armwave.c     **** {
 2296              		.loc 1 477 1 is_stmt 1 view -0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 48
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 478:armwave.c     ****     Py_buffer buffer;
 2300              		.loc 1 478 5 view .LVU551
 479:armwave.c     ****     int ret;
 2301              		.loc 1 479 5 view .LVU552
 480:armwave.c     **** 
 481:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 482:armwave.c     **** 
 483:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2302              		.loc 1 483 5 view .LVU553
 2303              	@ armwave.c:477: {
 477:armwave.c     ****     Py_buffer buffer;
 2304              		.loc 1 477 1 is_stmt 0 view .LVU554
 2305 0a34 04E02DE5 		str	lr, [sp, #-4]!	@,
 2306              		.cfi_def_cfa_offset 4
 2307              		.cfi_offset 14, -4
 2308 0a38 34D04DE2 		sub	sp, sp, #52	@,,
 2309              		.cfi_def_cfa_offset 56
 2310              	@ armwave.c:483:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2311              		.loc 1 483 11 view .LVU555
 2312 0a3c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2313 0a40 0120A0E3 		mov	r2, #1	@,
 2314 0a44 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2315              	.LVL159:
 484:armwave.c     **** 
 485:armwave.c     ****     if(ret != 0) {
 2316              		.loc 1 485 5 is_stmt 1 view .LVU556
 2317              	@ armwave.c:485:     if(ret != 0) {
 2318              		.loc 1 485 7 is_stmt 0 view .LVU557
 2319 0a48 000050E3 		cmp	r0, #0	@,
 2320 0a4c 0A00001A 		bne	.L134		@,
 486:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 487:armwave.c     ****         Py_RETURN_FALSE;
 488:armwave.c     ****     }
 489:armwave.c     **** 
 490:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 491:armwave.c     **** 
 492:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2321              		.loc 1 492 5 is_stmt 1 view .LVU558
 2322 0a50 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2323              	.LVL160:
 2324              		.loc 1 492 5 is_stmt 0 view .LVU559
 2325 0a54 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2326              	.LVL161:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     PyBuffer_Release(&buffer);
 2327              		.loc 1 495 5 is_stmt 1 view .LVU560
 2328 0a58 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2329 0a5c FEFFFFEB 		bl	PyBuffer_Release		@
 2330              	.LVL162:
 496:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 497:armwave.c     **** 
 498:armwave.c     ****     Py_RETURN_TRUE;
 2331              		.loc 1 498 5 view .LVU561
 2332              	.LBB25:
 2333              	.LBI25:
 2334              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2335              		.loc 2 456 20 view .LVU562
 2336              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2337              		.loc 2 458 21 view .LVU563
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2338              		.loc 2 459 5 view .LVU564
 2339              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2340              		.loc 2 459 18 is_stmt 0 view .LVU565
 2341 0a60 38309FE5 		ldr	r3, .L135	@ tmp126,
 2342              	.LBE26:
 2343              	.LBE25:
 2344              	@ armwave.c:498:     Py_RETURN_TRUE;
 2345              		.loc 1 498 5 view .LVU566
 2346 0a64 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2347              	.LBB28:
 2348              	.LBB27:
 2349              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2350              		.loc 2 459 18 view .LVU567
 2351 0a68 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2352 0a6c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2353 0a70 002083E5 		str	r2, [r3]	@ tmp128,
 2354              	.LBE27:
 2355              	.LBE28:
 2356              	@ armwave.c:499: }
 499:armwave.c     **** }
 2357              		.loc 1 499 1 view .LVU568
 2358 0a74 34D08DE2 		add	sp, sp, #52	@,,
 2359              		.cfi_remember_state
 2360              		.cfi_def_cfa_offset 4
 2361              		@ sp needed	@
 2362 0a78 04F09DE4 		ldr	pc, [sp], #4	@
 2363              	.LVL163:
 2364              	.L134:
 2365              		.cfi_restore_state
 486:armwave.c     ****         Py_RETURN_FALSE;
 2366              		.loc 1 486 9 is_stmt 1 view .LVU569
 2367 0a7c 20009FE5 		ldr	r0, .L135+4	@,
 2368              	.LVL164:
 486:armwave.c     ****         Py_RETURN_FALSE;
 2369              		.loc 1 486 9 is_stmt 0 view .LVU570
 2370 0a80 FEFFFFEB 		bl	puts		@
 2371              	.LVL165:
 487:armwave.c     ****     }
 2372              		.loc 1 487 9 is_stmt 1 view .LVU571
 2373              	.LBB29:
 2374              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2375              		.loc 2 456 20 view .LVU572
 2376              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2377              		.loc 2 458 21 view .LVU573
 2378              		.loc 2 459 5 view .LVU574
 2379              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2380              		.loc 2 459 18 is_stmt 0 view .LVU575
 2381 0a84 1C309FE5 		ldr	r3, .L135+8	@ tmp120,
 2382              	.LBE30:
 2383              	.LBE29:
 2384              	@ armwave.c:487:         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 2385              		.loc 1 487 9 view .LVU576
 2386 0a88 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2387              	.LBB32:
 2388              	.LBB31:
 2389              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2390              		.loc 2 459 18 view .LVU577
 2391 0a8c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2392 0a90 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2393 0a94 002083E5 		str	r2, [r3]	@ tmp122,
 2394              	.LBE31:
 2395              	.LBE32:
 2396              	@ armwave.c:499: }
 2397              		.loc 1 499 1 view .LVU578
 2398 0a98 34D08DE2 		add	sp, sp, #52	@,,
 2399              		.cfi_def_cfa_offset 4
 2400              		@ sp needed	@
 2401 0a9c 04F09DE4 		ldr	pc, [sp], #4	@
 2402              	.L136:
 2403              		.align	2
 2404              	.L135:
 2405 0aa0 00000000 		.word	_Py_TrueStruct
 2406 0aa4 64030000 		.word	.LC25
 2407 0aa8 00000000 		.word	_Py_FalseStruct
 2408              		.cfi_endproc
 2409              	.LFE74:
 2411              		.align	2
 2412              		.global	armwave_test_create_am_sine
 2413              		.syntax unified
 2414              		.arm
 2415              		.fpu vfp
 2417              	armwave_test_create_am_sine:
 2418              	.LVL166:
 2419              	.LFB75:
 500:armwave.c     **** 
 501:armwave.c     **** /*
 502:armwave.c     ****  * Make a test AM waveform for render tests.
 503:armwave.c     ****  *
 504:armwave.c     ****  * @param   mod                     modulation depth
 505:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 506:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 509:armwave.c     **** {
 2420              		.loc 1 509 1 is_stmt 1 view -0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 8
 2423              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     float v, noise, xnoise, mod_val;
 2424              		.loc 1 510 5 view .LVU580
 511:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2425              		.loc 1 511 5 view .LVU581
 2426              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2427              		.loc 1 509 1 is_stmt 0 view .LVU582
 2428 0aac F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2429              		.cfi_def_cfa_offset 32
 2430              		.cfi_offset 4, -32
 2431              		.cfi_offset 5, -28
 2432              		.cfi_offset 6, -24
 2433              		.cfi_offset 7, -20
 2434              		.cfi_offset 8, -16
 2435              		.cfi_offset 9, -12
 2436              		.cfi_offset 10, -8
 2437              		.cfi_offset 14, -4
 2438              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2439              		.loc 1 511 38 view .LVU583
 2440 0ab0 7A7A9FED 		vldr.32	s14, .L168	@ tmp180,
 2441              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2442              		.loc 1 511 55 view .LVU584
 2443 0ab4 00529FE5 		ldr	r5, .L168+28	@ tmp250,
 2444              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2445              		.loc 1 509 1 view .LVU585
 2446 0ab8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2447              		.cfi_def_cfa_offset 80
 2448              		.cfi_offset 80, -80
 2449              		.cfi_offset 81, -76
 2450              		.cfi_offset 82, -72
 2451              		.cfi_offset 83, -68
 2452              		.cfi_offset 84, -64
 2453              		.cfi_offset 85, -60
 2454              		.cfi_offset 86, -56
 2455              		.cfi_offset 87, -52
 2456              		.cfi_offset 88, -48
 2457              		.cfi_offset 89, -44
 2458              		.cfi_offset 90, -40
 2459              		.cfi_offset 91, -36
 2460 0abc 0090A0E1 		mov	r9, r0	@ sets, sets
 2461              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2462              		.loc 1 511 38 view .LVU586
 2463 0ac0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2464              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     int s, set_offset = 0;
 513:armwave.c     ****     int w, x;
 514:armwave.c     **** 
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2465              		.loc 1 515 70 view .LVU587
 2466 0ac4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2467 0ac8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2468              	.LBB35:
 2469              	.LBB36:
 2470              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2471              		.loc 1 458 23 view .LVU588
 2472 0acc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2473              	.LVL167:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2474              		.loc 1 458 23 view .LVU589
 2475              	.LBE36:
 2476              	.LBE35:
 2477              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2478              		.loc 1 511 38 view .LVU590
 2479 0ad0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2480              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2481              		.loc 1 515 70 view .LVU591
 2482 0ad4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2483              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2484              		.loc 1 509 1 view .LVU592
 2485 0ad8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2486              	.LBB40:
 2487              	.LBB37:
 2488              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2489              		.loc 1 458 7 view .LVU593
 2490 0adc 000050E3 		cmp	r0, #0	@ _82,
 2491              	.LBE37:
 2492              	.LBE40:
 2493              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2494              		.loc 1 509 1 view .LVU594
 2495 0ae0 08D04DE2 		sub	sp, sp, #8	@,,
 2496              		.cfi_def_cfa_offset 88
 2497              	@ armwave.c:516:     g_armwave_state.test_wave_buffer_nsets = sets;
 516:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2498              		.loc 1 516 44 view .LVU595
 2499 0ae4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2500              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2501              		.loc 1 515 45 view .LVU596
 2502 0ae8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2503              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2504              		.loc 1 511 38 view .LVU597
 2505 0aec 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2506              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2507              		.loc 1 511 11 view .LVU598
 2508 0af0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2509              	.LVL168:
 512:armwave.c     ****     int w, x;
 2510              		.loc 1 512 5 is_stmt 1 view .LVU599
 513:armwave.c     **** 
 2511              		.loc 1 513 5 view .LVU600
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2512              		.loc 1 515 5 view .LVU601
 2513              		.loc 1 516 5 view .LVU602
 517:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2514              		.loc 1 517 5 view .LVU603
 2515              	.LBB41:
 2516              	.LBI35:
 456:armwave.c     **** {
 2517              		.loc 1 456 6 view .LVU604
 2518              	.LBB38:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2519              		.loc 1 458 5 view .LVU605
 2520              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2521              		.loc 1 458 7 is_stmt 0 view .LVU606
 2522 0af4 0000000A 		beq	.L138		@,
 459:armwave.c     ****     }
 2523              		.loc 1 459 9 is_stmt 1 view .LVU607
 2524 0af8 FEFFFFEB 		bl	free		@
 2525              	.LVL169:
 2526              	.L138:
 464:armwave.c     **** 
 2527              		.loc 1 464 5 view .LVU608
 2528              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2529              		.loc 1 464 75 is_stmt 0 view .LVU609
 2530 0afc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2531 0b00 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2532              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2533              		.loc 1 464 40 view .LVU610
 2534 0b04 0910A0E1 		mov	r1, r9	@, sets
 2535              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2536              		.loc 1 464 75 view .LVU611
 2537 0b08 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2538              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2539              		.loc 1 464 40 view .LVU612
 2540 0b0c 0400A0E1 		mov	r0, r4	@, _85
 2541 0b10 FEFFFFEB 		bl	calloc		@
 2542              	.LVL170:
 2543              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2544              		.loc 1 466 7 view .LVU613
 2545 0b14 000050E3 		cmp	r0, #0	@ tmp191,
 2546              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2547              		.loc 1 464 38 view .LVU614
 2548 0b18 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2549              		.loc 1 466 5 is_stmt 1 view .LVU615
 2550              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2551              		.loc 1 466 7 is_stmt 0 view .LVU616
 2552 0b1c 5A00000A 		beq	.L167		@,
 2553              	.L139:
 2554              	.LVL171:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2555              		.loc 1 466 7 view .LVU617
 2556              	.LBE38:
 2557              	.LBE41:
 2558              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 518:armwave.c     **** 
 519:armwave.c     ****     for(s = 0; s < sets; s++) {
 2559              		.loc 1 519 5 discriminator 1 view .LVU618
 2560 0b20 000059E3 		cmp	r9, #0	@ sets,
 2561 0b24 550000DA 		ble	.L137		@,
 2562              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 521:armwave.c     ****     
 522:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 524:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 525:armwave.c     **** 
 526:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 527:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     ****                 noise *= noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 533:armwave.c     ****                     noise = -noise;
 534:armwave.c     **** 
 535:armwave.c     ****                 noise += 1.0f;
 536:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 537:armwave.c     **** 
 538:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2563              		.loc 1 538 45 view .LVU619
 2564 0b28 5C8A9FED 		vldr.32	s16, .L168	@ tmp258,
 2565              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 539:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 540:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 541:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2566              		.loc 1 541 104 view .LVU620
 2567 0b2c 5CCA9FED 		vldr.32	s24, .L168+4	@ tmp259,
 2568              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2569              		.loc 1 519 5 view .LVU621
 2570 0b30 0070A0E3 		mov	r7, #0	@ set_offset,
 2571              	@ armwave.c:520:         printf("Calculating test set %d\n", s);
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2572              		.loc 1 520 9 view .LVU622
 2573 0b34 84A19FE5 		ldr	r10, .L168+32	@ tmp257,
 2574              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2575              		.loc 1 519 5 view .LVU623
 2576 0b38 0780A0E1 		mov	r8, r7	@ s, set_offset
 2577              	.LVL172:
 2578              	.L140:
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2579              		.loc 1 520 9 is_stmt 1 view .LVU624
 2580 0b3c 0810A0E1 		mov	r1, r8	@, s
 2581 0b40 0A00A0E1 		mov	r0, r10	@, tmp257
 2582 0b44 FEFFFFEB 		bl	printf		@
 2583              	.LVL173:
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2584              		.loc 1 522 9 view .LVU625
 2585              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2586              		.loc 1 522 39 is_stmt 0 view .LVU626
 2587 0b48 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2588              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2589              		.loc 1 522 9 view .LVU627
 2590 0b4c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2591 0b50 450000DA 		ble	.L141		@,
 2592              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2593              		.loc 1 524 21 view .LVU628
 2594 0b54 53CADFED 		vldr.32	s25, .L168+8	@ tmp200,
 2595              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2596              		.loc 1 538 33 view .LVU629
 2597 0b58 53BA9FED 		vldr.32	s22, .L168+12	@ tmp253,
 2598              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2599              		.loc 1 536 24 view .LVU630
 2600 0b5c 53AADFED 		vldr.32	s21, .L168+16	@ tmp254,
 2601 0b60 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2602              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2603              		.loc 1 522 15 view .LVU631
 2604 0b64 0060A0E3 		mov	r6, #0	@ w,
 2605              	.LVL174:
 2606              	.L148:
 524:armwave.c     **** 
 2607              		.loc 1 524 13 is_stmt 1 view .LVU632
 2608              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2609              		.loc 1 524 21 is_stmt 0 view .LVU633
 2610 0b68 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2611 0b6c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2612              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2613              		.loc 1 526 13 view .LVU634
 2614 0b70 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2615              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2616              		.loc 1 524 21 view .LVU635
 2617 0b74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2618 0b78 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2619              	.LVL175:
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2620              		.loc 1 526 13 is_stmt 1 view .LVU636
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2621              		.loc 1 526 13 is_stmt 0 view .LVU637
 2622 0b7c 370000DA 		ble	.L142		@,
 2623 0b80 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2624              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2625              		.loc 1 541 113 view .LVU638
 2626 0b84 4AAA9FED 		vldr.32	s20, .L168+20	@ tmp229,
 2627 0b88 4A8ADFED 		vldr.32	s17, .L168+24	@ tmp230,
 2628              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2629              		.loc 1 526 19 view .LVU639
 2630 0b8c 0040A0E3 		mov	r4, #0	@ x,
 2631              	.LVL176:
 2632              	.L147:
 527:armwave.c     ****                 noise *= noise;
 2633              		.loc 1 527 17 is_stmt 1 view .LVU640
 2634              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2635              		.loc 1 527 28 is_stmt 0 view .LVU641
 2636 0b90 FEFFFFEB 		bl	rand		@
 2637              	.LVL177:
 2638              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2639              		.loc 1 527 35 view .LVU642
 2640 0b94 7000FFE6 		uxth	r0, r0	@ tmp201,
 2641              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2642              		.loc 1 527 45 view .LVU643
 2643 0b98 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2644 0b9c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2645              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2646              		.loc 1 527 24 view .LVU644
 2647 0ba0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2648              	.LVL178:
 528:armwave.c     ****                 noise *= noise;
 2649              		.loc 1 528 17 is_stmt 1 view .LVU645
 2650              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2651              		.loc 1 528 23 is_stmt 0 view .LVU646
 2652 0ba4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2653              	.LVL179:
 529:armwave.c     ****                 noise *= noise;
 2654              		.loc 1 529 17 is_stmt 1 view .LVU647
 2655              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 2656              		.loc 1 529 23 is_stmt 0 view .LVU648
 2657 0ba8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2658              	.LVL180:
 530:armwave.c     **** 
 2659              		.loc 1 530 17 is_stmt 1 view .LVU649
 2660              	@ armwave.c:530:                 noise *= noise;
 530:armwave.c     **** 
 2661              		.loc 1 530 23 is_stmt 0 view .LVU650
 2662 0bac A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2663              	.LVL181:
 532:armwave.c     ****                     noise = -noise;
 2664              		.loc 1 532 17 is_stmt 1 view .LVU651
 2665              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2666              		.loc 1 532 21 is_stmt 0 view .LVU652
 2667 0bb0 FEFFFFEB 		bl	rand		@
 2668              	.LVL182:
 533:armwave.c     **** 
 2669              		.loc 1 533 21 is_stmt 1 view .LVU653
 2670              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2671              		.loc 1 532 19 is_stmt 0 view .LVU654
 2672 0bb4 020910E3 		tst	r0, #32768	@,
 2673              	@ armwave.c:533:                     noise = -noise;
 533:armwave.c     **** 
 2674              		.loc 1 533 27 view .LVU655
 2675 0bb8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2676              	.LVL183:
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2677              		.loc 1 535 17 is_stmt 1 view .LVU656
 536:armwave.c     **** 
 2678              		.loc 1 536 17 view .LVU657
 2679              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2680              		.loc 1 536 27 is_stmt 0 view .LVU658
 2681 0bbc FEFFFFEB 		bl	rand		@
 2682              	.LVL184:
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2683              		.loc 1 538 17 is_stmt 1 view .LVU659
 2684              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2685              		.loc 1 538 45 is_stmt 0 view .LVU660
 2686 0bc0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2687              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2688              		.loc 1 538 33 view .LVU661
 2689 0bc4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2690              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2691              		.loc 1 538 45 view .LVU662
 2692 0bc8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2693              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2694              		.loc 1 538 33 view .LVU663
 2695 0bcc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2696              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2697              		.loc 1 538 45 view .LVU664
 2698 0bd0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2699              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2700              		.loc 1 538 33 view .LVU665
 2701 0bd4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2702              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2703              		.loc 1 536 34 view .LVU666
 2704 0bd8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2705              	.LVL185:
 2706              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2707              		.loc 1 536 44 view .LVU667
 2708 0bdc 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2709 0be0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2710              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2711              		.loc 1 536 24 view .LVU668
 2712 0be4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2713              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2714              		.loc 1 538 77 view .LVU669
 2715 0be8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2716              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2717              		.loc 1 538 22 view .LVU670
 2718 0bec C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2719 0bf0 FEFFFFEB 		bl	sin		@
 2720              	.LVL186:
 2721              		.loc 1 541 17 is_stmt 1 view .LVU671
 2722              	@ armwave.c:535:                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2723              		.loc 1 535 23 is_stmt 0 view .LVU672
 2724 0bf4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2725              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2726              		.loc 1 541 104 view .LVU673
 2727 0bf8 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2728              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2729              		.loc 1 538 98 view .LVU674
 2730 0bfc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2731              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2732              		.loc 1 538 87 view .LVU675
 2733 0c00 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2734              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2735              		.loc 1 538 98 view .LVU676
 2736 0c04 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2737              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2738              		.loc 1 538 19 view .LVU677
 2739 0c08 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2740              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2741              		.loc 1 541 113 view .LVU678
 2742 0c0c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2743 0c10 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2744 0c14 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2745 0c18 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2746 0c1c 050000DA 		ble	.L144		@,
 2747              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2748              		.loc 1 541 104 discriminator 1 view .LVU679
 2749 0c20 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2750 0c24 FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2751 0c28 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2752 0c2c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2753 0c30 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2754 0c34 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2755              	.L144:
 2756              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2757              		.loc 1 541 57 discriminator 12 view .LVU680
 2758 0c38 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2759              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2760              		.loc 1 541 102 discriminator 12 view .LVU681
 2761 0c3c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2762 0c40 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2763 0c44 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2764              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2765              		.loc 1 526 58 discriminator 12 view .LVU682
 2766 0c48 014084E2 		add	r4, r4, #1	@ x, x,
 2767              	.LVL187:
 2768              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2769              		.loc 1 541 102 discriminator 12 view .LVU683
 2770 0c4c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2771              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2772              		.loc 1 526 43 discriminator 12 view .LVU684
 2773 0c50 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2774              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2775              		.loc 1 526 13 discriminator 12 view .LVU685
 2776 0c54 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2777 0c58 CCFFFFCA 		bgt	.L147		@,
 2778 0c5c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2779              	.LVL188:
 2780              	.L142:
 2781              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2782              		.loc 1 522 48 discriminator 2 view .LVU686
 2783 0c60 016086E2 		add	r6, r6, #1	@ w, w,
 2784              	.LVL189:
 2785              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2786              		.loc 1 522 9 discriminator 2 view .LVU687
 2787 0c64 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2788 0c68 BEFFFFBA 		blt	.L148		@,
 2789              	.LVL190:
 2790              	.L141:
 542:armwave.c     ****             }
 543:armwave.c     ****         }
 544:armwave.c     **** 
 545:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2791              		.loc 1 545 9 is_stmt 1 discriminator 2 view .LVU688
 2792              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2793              		.loc 1 545 46 is_stmt 0 discriminator 2 view .LVU689
 2794 0c6c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2795              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2796              		.loc 1 519 27 discriminator 2 view .LVU690
 2797 0c70 018088E2 		add	r8, r8, #1	@ s, s,
 2798              	.LVL191:
 2799              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2800              		.loc 1 519 5 discriminator 2 view .LVU691
 2801 0c74 080059E1 		cmp	r9, r8	@ sets, s
 2802              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2803              		.loc 1 545 20 discriminator 2 view .LVU692
 2804 0c78 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2805              	.LVL192:
 2806              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2807              		.loc 1 519 5 discriminator 2 view .LVU693
 2808 0c7c AEFFFF1A 		bne	.L140		@,
 2809              	.LVL193:
 2810              	.L137:
 2811              	@ armwave.c:547: }
 546:armwave.c     ****     }
 547:armwave.c     **** }
 2812              		.loc 1 547 1 view .LVU694
 2813 0c80 08D08DE2 		add	sp, sp, #8	@,,
 2814              		.cfi_remember_state
 2815              		.cfi_def_cfa_offset 80
 2816              		@ sp needed	@
 2817 0c84 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2818              		.cfi_restore 90
 2819              		.cfi_restore 91
 2820              		.cfi_restore 88
 2821              		.cfi_restore 89
 2822              		.cfi_restore 86
 2823              		.cfi_restore 87
 2824              		.cfi_restore 84
 2825              		.cfi_restore 85
 2826              		.cfi_restore 82
 2827              		.cfi_restore 83
 2828              		.cfi_restore 80
 2829              		.cfi_restore 81
 2830              		.cfi_def_cfa_offset 32
 2831              	.LVL194:
 2832              		.loc 1 547 1 view .LVU695
 2833 0c88 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2834              	.LVL195:
 2835              	.L167:
 2836              		.cfi_restore_state
 2837              	.LBB42:
 2838              	.LBB39:
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2839              		.loc 1 467 9 is_stmt 1 view .LVU696
 2840 0c8c 940901E0 		mul	r1, r4, r9	@, _85, sets
 2841 0c90 0920A0E1 		mov	r2, r9	@, sets
 2842 0c94 28009FE5 		ldr	r0, .L168+36	@,
 2843 0c98 FEFFFFEB 		bl	printf		@
 2844              	.LVL196:
 469:armwave.c     ****     }
 2845              		.loc 1 469 9 view .LVU697
 2846 0c9c 9FFFFFEA 		b	.L139		@
 2847              	.L169:
 2848              		.align	2
 2849              	.L168:
 2850 0ca0 0000803F 		.word	1065353216
 2851 0ca4 00007F43 		.word	1132396544
 2852 0ca8 0000003F 		.word	1056964608
 2853 0cac C3F5C840 		.word	1086911939
 2854 0cb0 38FFC74A 		.word	1254620984
 2855 0cb4 0000FE42 		.word	1123942400
 2856 0cb8 00000043 		.word	1124073472
 2857 0cbc 00000000 		.word	g_armwave_state
 2858 0cc0 B8030000 		.word	.LC26
 2859 0cc4 10030000 		.word	.LC24
 2860              	.LBE39:
 2861              	.LBE42:
 2862              		.cfi_endproc
 2863              	.LFE75:
 2865              		.align	2
 2866              		.global	armwave_cleanup
 2867              		.syntax unified
 2868              		.arm
 2869              		.fpu vfp
 2871              	armwave_cleanup:
 2872              	.LFB76:
 548:armwave.c     **** 
 549:armwave.c     **** /*
 550:armwave.c     ****  * Make a test square waveform.
 551:armwave.c     ****  *
 552:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 553:armwave.c     ****  */
 554:armwave.c     **** #if 0
 555:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 556:armwave.c     **** {
 557:armwave.c     ****     uint8_t v;
 558:armwave.c     ****     float noise, xnoise;
 559:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 560:armwave.c     ****     int w, x;
 561:armwave.c     **** 
 562:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 563:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 564:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     ****             noise *= noise;
 568:armwave.c     **** 
 569:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 570:armwave.c     ****                 noise = -noise;
 571:armwave.c     **** 
 572:armwave.c     ****             //noise += 1.0f;
 573:armwave.c     **** 
 574:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 575:armwave.c     ****                 new_level = 0.2f;
 576:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 577:armwave.c     ****                 new_level = 0.8f;
 578:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 579:armwave.c     ****                 new_level = 0.2f;
 580:armwave.c     ****             } else {
 581:armwave.c     ****                 new_level = 0.8f;
 582:armwave.c     ****             }
 583:armwave.c     **** 
 584:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 585:armwave.c     **** 
 586:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 587:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 588:armwave.c     ****         }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 591:armwave.c     **** #endif
 592:armwave.c     **** 
 593:armwave.c     **** /*
 594:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 595:armwave.c     ****  */
 596:armwave.c     **** void armwave_cleanup()
 597:armwave.c     **** {
 2873              		.loc 1 597 1 view -0
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 0
 2876              		@ frame_needed = 0, uses_anonymous_args = 0
 598:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2877              		.loc 1 598 5 view .LVU699
 2878              	@ armwave.c:597: {
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2879              		.loc 1 597 1 is_stmt 0 view .LVU700
 2880 0cc8 10402DE9 		push	{r4, lr}	@
 2881              		.cfi_def_cfa_offset 8
 2882              		.cfi_offset 4, -8
 2883              		.cfi_offset 14, -4
 2884              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2885              		.loc 1 598 25 view .LVU701
 2886 0ccc 34409FE5 		ldr	r4, .L172	@ tmp114,
 2887              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2888              		.loc 1 598 5 view .LVU702
 2889 0cd0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2890 0cd4 FEFFFFEB 		bl	free		@
 2891              	.LVL197:
 599:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2892              		.loc 1 599 5 is_stmt 1 view .LVU703
 2893 0cd8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2894 0cdc FEFFFFEB 		bl	free		@
 2895              	.LVL198:
 600:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2896              		.loc 1 600 5 view .LVU704
 2897 0ce0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2898 0ce4 FEFFFFEB 		bl	free		@
 2899              	.LVL199:
 601:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2900              		.loc 1 601 5 view .LVU705
 2901 0ce8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2902 0cec FEFFFFEB 		bl	free		@
 2903              	.LVL200:
 602:armwave.c     **** 
 603:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2904              		.loc 1 603 5 view .LVU706
 2905              	@ armwave.c:603:     g_armwave_state.out_pixbuf = NULL;
 2906              		.loc 1 603 32 is_stmt 0 view .LVU707
 2907 0cf0 0030A0E3 		mov	r3, #0	@ tmp123,
 2908 0cf4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 604:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2909              		.loc 1 604 5 is_stmt 1 view .LVU708
 2910              	@ armwave.c:604:     g_armwave_state.ch1_buffer = NULL;
 2911              		.loc 1 604 32 is_stmt 0 view .LVU709
 2912 0cf8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 605:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2913              		.loc 1 605 5 is_stmt 1 view .LVU710
 2914              	@ armwave.c:605:     g_armwave_state.xcoord_to_xpixel = NULL;
 2915              		.loc 1 605 38 is_stmt 0 view .LVU711
 2916 0cfc 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 606:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2917              		.loc 1 606 5 is_stmt 1 view .LVU712
 2918              	@ armwave.c:606:     g_armwave_state.test_wave_buffer = NULL;
 2919              		.loc 1 606 38 is_stmt 0 view .LVU713
 2920 0d00 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2921              	@ armwave.c:607: }
 607:armwave.c     **** }
 2922              		.loc 1 607 1 view .LVU714
 2923 0d04 1080BDE8 		pop	{r4, pc}	@
 2924              	.L173:
 2925              		.align	2
 2926              	.L172:
 2927 0d08 00000000 		.word	g_armwave_state
 2928              		.cfi_endproc
 2929              	.LFE76:
 2931              		.comm	gamma_table,256,4
 2932              		.comm	g_armwave_state,136,4
 2933              		.section	.rodata
 2934              		.align	2
 2935              		.set	.LANCHOR0,. + 0
 2938              	__PRETTY_FUNCTION__.17125:
 2939 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2939      6176655F 
 2939      73657475 
 2939      705F7265 
 2939      6E646572 
 2940 0015 000000   		.space	3
 2943              	__PRETTY_FUNCTION__.17129:
 2944 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2944      6176655F 
 2944      7365745F 
 2944      77617665 
 2944      5F706F69 
 2945 0031 000000   		.space	3
 2948              	__PRETTY_FUNCTION__.17136:
 2949 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2949      6176655F 
 2949      7365745F 
 2949      77617665 
 2949      5F706F69 
 2950              		.section	.rodata.str1.4,"aMS",%progbits,1
 2951              		.align	2
 2952              	.LC0:
 2953 0000 76302E30 		.ascii	"v0.0.1\000"
 2953      2E3100
 2954 0007 00       		.space	1
 2955              	.LC1:
 2956 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2956      61766520 
 2956      76657273 
 2956      696F6E3A 
 2956      2025730A 
 2957 001d 000000   		.space	3
 2958              	.LC2:
 2959 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2959      78253038 
 2959      7820623D 
 2959      30782530 
 2959      38782063 
 2960 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2960      25642073 
 2960      63616C65 
 2960      3D256420 
 2960      62697464 
 2961 0077 00       		.space	1
 2962              	.LC3:
 2963 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 2963      6E643D25 
 2963      640A00
 2964 0083 00       		.space	1
 2965              	.LC4:
 2966 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2966      75742062 
 2966      75666665 
 2966      723A2030 
 2966      78253038 
 2967 009b 00       		.space	1
 2968              	.LC5:
 2969 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2969      65742025 
 2969      64206279 
 2969      7465732C 
 2969      206E7069 
 2970 00cf 30782530 		.ascii	"0x%08x, dest_buffer 0x%08x, stack ~0x%08x\012\000"
 2970      38782C20 
 2970      64657374 
 2970      5F627566 
 2970      66657220 
 2971 00fa 0000     		.space	2
 2972              	.LC6:
 2973 00fc 69746572 		.ascii	"iter...\000"
 2973      2E2E2E00 
 2974              	.LC7:
 2975 0104 30782530 		.ascii	"0x%08x,%d,%d,%d,%d\012\000"
 2975      38782C25 
 2975      642C2564 
 2975      2C25642C 
 2975      25640A00 
 2976              	.LC8:
 2977 0118 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 2977      6F6E6520 
 2977      7061696E 
 2977      74202564 
 2977      20706978 
 2978              	.LC9:
 2979 0134 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2979      6176655F 
 2979      67656E65 
 2979      72617465 
 2979      3A20736C 
 2980 0165 00       		.ascii	"\000"
 2981 0166 0000     		.space	2
 2982              	.LC10:
 2983 0168 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2983      20653D25 
 2983      6420773D 
 2983      25642077 
 2983      733D2564 
 2984              	.LC11:
 2985 0194 61726D77 		.ascii	"armwave.c\000"
 2985      6176652E 
 2985      6300
 2986 019e 0000     		.space	2
 2987              	.LC12:
 2988 01a0 73746172 		.ascii	"start_point < end_point\000"
 2988      745F706F 
 2988      696E7420 
 2988      3C20656E 
 2988      645F706F 
 2989              	.LC13:
 2990 01b8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2990      7566665F 
 2990      73697A65 
 2990      3D25642C 
 2990      20636D70 
 2991 01eb 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2991      5F776964 
 2991      74683D25 
 2991      642C2077 
 2991      6176655F 
 2992 0215 000000   		.space	3
 2993              	.LC14:
 2994 0218 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2994      6F632066 
 2994      61696C75 
 2994      72652061 
 2994      6C6C6F63 
 2995 024b 2E636831 		.ascii	".ch1_buffer)\012\000"
 2995      5F627566 
 2995      66657229 
 2995      0A00
 2996 0259 000000   		.space	3
 2997              	.LC15:
 2998 025c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2998      3A203078 
 2998      25303878 
 2998      20307825 
 2998      30387820 
 2999              	.LC16:
 3000 0280 77617665 		.ascii	"wave_buffer != NULL\000"
 3000      5F627566 
 3000      66657220 
 3000      213D204E 
 3000      554C4C00 
 3001              	.LC17:
 3002 0294 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3002      6176655F 
 3002      7365745F 
 3002      77617665 
 3002      5F706F69 
 3003 02c7 78636565 		.ascii	"xceeded\000"
 3003      64656400 
 3004 02cf 00       		.space	1
 3005              	.LC18:
 3006 02d0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3006      5F627566 
 3006      6665725F 
 3006      70747220 
 3006      213D2030 
 3007 02e5 000000   		.space	3
 3008              	.LC19:
 3009 02e8 776200   		.ascii	"wb\000"
 3010 02eb 00       		.space	1
 3011              	.LC20:
 3012 02ec 50330A00 		.ascii	"P3\012\000"
 3013              	.LC21:
 3014 02f0 25642025 		.ascii	"%d %d\012\000"
 3014      640A00
 3015 02f7 00       		.space	1
 3016              	.LC22:
 3017 02f8 3235350A 		.ascii	"255\012\000"
 3017      00
 3018 02fd 000000   		.space	3
 3019              	.LC23:
 3020 0300 25336420 		.ascii	"%3d %3d %3d\012\000"
 3020      25336420 
 3020      2533640A 
 3020      00
 3021 030d 000000   		.space	3
 3022              	.LC24:
 3023 0310 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3023      6176655F 
 3023      74657374 
 3023      5F627566 
 3023      6665725F 
 3024 0343 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3024      20627566 
 3024      66657220 
 3024      28256420 
 3024      62797465 
 3025              	.LC25:
 3026 0364 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3026      6176655F 
 3026      66696C6C 
 3026      5F706978 
 3026      6275665F 
 3027 0397 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3027      20666169 
 3027      6C65642C 
 3027      20726574 
 3027      75726E69 
 3028 03b6 0000     		.space	2
 3029              	.LC26:
 3030 03b8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3030      756C6174 
 3030      696E6720 
 3030      74657374 
 3030      20736574 
 3031              		.text
 3032              	.Letext0:
 3033              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3034              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3035              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3036              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3037              		.file 7 "/usr/include/stdio.h"
 3038              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3039              		.file 9 "/usr/include/errno.h"
 3040              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3041              		.file 11 "/usr/include/unistd.h"
 3042              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3043              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3044              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3045              		.file 15 "/usr/include/math.h"
 3046              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3047              		.file 17 "/usr/include/time.h"
 3048              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3049              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3050              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3051              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3052              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3053              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3054              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3055              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3056              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3057              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3058              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3059              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3060              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3061              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3062              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3063              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3064              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3065              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3066              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3067              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3068              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3069              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3070              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3071              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3072              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3073              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3074              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3075              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3076              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3077              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3078              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3079              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3080              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3081              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3082              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3083              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3084              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3085              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3086              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3087              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3088              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3089              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3090              		.file 60 "/usr/local/include/python3.8/context.h"
 3091              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3092              		.file 62 "/usr/local/include/python3.8/code.h"
 3093              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3094              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3095              		.file 65 "/usr/local/include/python3.8/import.h"
 3096              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3097              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3098              		.file 68 "/usr/include/malloc.h"
 3099              		.file 69 "armwave.h"
 3100              		.file 70 "/usr/include/stdlib.h"
 3101              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3102              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3103              		.file 73 "<built-in>"
 3104              		.file 74 "/usr/include/assert.h"
