   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 B0419FE5 		ldr	r4, .L27	@ tmp316,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 65 view .LVU35
 261 00b0 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 263              		.loc 1 71 130 view .LVU36
 264 00b4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 265              	.LVL7:
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0530A0E1 		mov	r3, r5	@, _1
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 8C019FE5 		ldr	r0, .L27+4	@,
 282              	.LVL8:
 283              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 284              		.loc 1 71 130 view .LVU42
 285 00d0 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 286              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 287              		.loc 1 73 5 view .LVU43
 288 00d4 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 23 view .LVU44
 291 00d8 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 292              	.LVL9:
 293              		.loc 1 73 5 is_stmt 1 view .LVU45
 294 00dc 00208DE5 		str	r2, [sp]	@ _7,
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 570000DA 		ble	.L11		@,
 303 00f4 000056E3 		cmp	r6, #0	@ height,
 304 00f8 5500000A 		beq	.L11		@,
 305 00fc 043047E2 		sub	r3, r7, #4	@ tmp315, slice_y,
 306 0100 14308DE5 		str	r3, [sp, #20]	@ tmp315, %sfp
 307              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 308              		.loc 1 78 11 view .LVU48
 309 0104 0030A0E3 		mov	r3, #0	@ w,
 310 0108 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 311              	.LVL11:
 312              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 313              		.loc 1 79 9 is_stmt 1 view .LVU49
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 314              		.loc 1 83 9 view .LVU50
 315              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 316              		.loc 1 79 64 is_stmt 0 view .LVU51
 317 010c 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 318 0110 10109DE5 		ldr	r1, [sp, #16]	@ w, %sfp
 319 0114 14009DE5 		ldr	r0, [sp, #20]	@ tmp315, %sfp
 320 0118 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 321 011c 930123E0 		mla	r3, r3, r1, r0	@ tmp230, g_armwave_state.wave_stride, w, tmp315
 322              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 323              		.loc 1 83 16 view .LVU52
 324 0120 0020A0E3 		mov	r2, #0	@ yy,
 325 0124 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 326              	.LVL12:
 327              	.L17:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  85:armwave.c     **** 
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 86 13 is_stmt 1 view .LVU53
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 100 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     **** 
 103:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 104:armwave.c     **** 
 105:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 105 17 view .LVU55
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 100 17 view .LVU56
 332              		.loc 1 105 17 view .LVU57
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 100 17 view .LVU58
 334              		.loc 1 105 17 view .LVU59
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 100 17 view .LVU60
 336              		.loc 1 105 17 view .LVU61
 337              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 338              		.loc 1 86 18 is_stmt 0 view .LVU62
 339 0128 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _184, offset: 0B]
 340              	.LVL13:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 341              		.loc 1 88 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 342              		.loc 1 90 17 view .LVU64
  93:armwave.c     ****                     continue;
 343              		.loc 1 93 17 view .LVU65
 344              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 345              		.loc 1 101 34 is_stmt 0 view .LVU66
 346 012c 01B082E2 		add	fp, r2, #1	@ tmp260, yy,
 347              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 348              		.loc 1 93 20 view .LVU67
 349 0130 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 350 0134 0110A003 		moveq	r1, #1	@ tmp233,
 351 0138 0010A013 		movne	r1, #0	@ tmp233,
 352              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 353              		.loc 1 93 19 view .LVU68
 354 013c FF0057E3 		cmp	r7, #255	@ scale_value,
 355 0140 01108103 		orreq	r1, r1, #1	@,, tmp238, tmp233
 356 0144 000051E3 		cmp	r1, #0	@ tmp238,
 357              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 358              		.loc 1 101 34 view .LVU69
 359 0148 02A082E2 		add	r10, r2, #2	@ tmp281, yy,
 360 014c 039082E2 		add	r9, r2, #3	@ tmp300, yy,
 361              	.LVL14:
 362              	@ armwave.c:106:                 word >>= 8;
 106:armwave.c     ****                 word >>= 8;
 363              		.loc 1 106 22 view .LVU70
 364 0150 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 365 0154 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 366              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 367              		.loc 1 93 19 view .LVU71
 368 0158 3400001A 		bne	.L20		@,
 369              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 370              		.loc 1 101 34 view .LVU72
 371 015c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 372              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 373              		.loc 1 93 20 view .LVU73
 374 0160 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 375 0164 01E0A003 		moveq	lr, #1	@ tmp253,
 376              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 377              		.loc 1 101 34 view .LVU74
 378 0168 910201E0 		mul	r1, r1, r2	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 379              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 380              		.loc 1 93 20 view .LVU75
 381 016c 00E0A013 		movne	lr, #0	@ tmp253,
 382              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 383              		.loc 1 93 19 view .LVU76
 384 0170 FF005CE3 		cmp	ip, #255	@ scale_value,
 385 0174 01E08E03 		orreq	lr, lr, #1	@,, tmp258, tmp253
 386 0178 00005EE3 		cmp	lr, #0	@ tmp258,
 387              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 388              		.loc 1 105 47 view .LVU77
 389 017c 40E094E5 		ldr	lr, [r4, #64]	@ tmp327, g_armwave_state.bitdepth_height
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 391              		.loc 1 101 74 view .LVU78
 392 0180 2114A0E1 		lsr	r1, r1, #8	@ tmp242, tmp240,
 393              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 394              		.loc 1 105 47 view .LVU79
 395 0184 9E7121E0 		mla	r1, lr, r1, r7	@ tmp246, tmp327, tmp242, scale_value
 396 0188 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_81, *_81
 397 018c 01E08EE2 		add	lr, lr, #1	@ tmp249, *_81,
 398 0190 01E0C5E7 		strb	lr, [r5, r1]	@ tmp249, *_81
 399              	.LVL15:
 400              		.loc 1 106 17 is_stmt 1 view .LVU80
  90:armwave.c     ****                 
 401              		.loc 1 90 17 view .LVU81
  93:armwave.c     ****                     continue;
 402              		.loc 1 93 17 view .LVU82
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 is_stmt 0 view .LVU83
 405 0194 2500001A 		bne	.L20		@,
 406              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 407              		.loc 1 101 34 view .LVU84
 408 0198 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 409              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 410              		.loc 1 101 99 view .LVU85
 411 019c 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 412              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 413              		.loc 1 93 20 view .LVU86
 414 01a0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 415              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 416              		.loc 1 101 34 view .LVU87
 417 01a4 9E0B0BE0 		mul	fp, lr, fp	@ tmp261, g_armwave_state.cmp_x_bitdepth_scale, tmp260
 418              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 419              		.loc 1 93 20 view .LVU88
 420 01a8 01E0A003 		moveq	lr, #1	@ tmp274,
 421 01ac 00E0A013 		movne	lr, #0	@ tmp274,
 422              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 423              		.loc 1 101 74 view .LVU89
 424 01b0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp263, tmp261,
 425              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 426              		.loc 1 93 19 view .LVU90
 427 01b4 FF0050E3 		cmp	r0, #255	@ scale_value,
 428 01b8 01E08E03 		orreq	lr, lr, #1	@,, tmp279, tmp274
 429              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 430              		.loc 1 105 47 view .LVU91
 431 01bc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp267, g_armwave_state.bitdepth_height, tmp263, scale_value
 432              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 433              		.loc 1 93 19 view .LVU92
 434 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 435              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 436              		.loc 1 105 47 view .LVU93
 437 01c4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_111, *_111
 438 01c8 011081E2 		add	r1, r1, #1	@ tmp270, *_111,
 439 01cc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp270, *_111
 440              		.loc 1 106 17 is_stmt 1 view .LVU94
 441              	.LVL16:
  90:armwave.c     ****                 
 442              		.loc 1 90 17 view .LVU95
  93:armwave.c     ****                     continue;
 443              		.loc 1 93 17 view .LVU96
 444              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 445              		.loc 1 93 19 is_stmt 0 view .LVU97
 446 01d0 1600001A 		bne	.L20		@,
 447              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 448              		.loc 1 101 34 view .LVU98
 449 01d4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 450              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 451              		.loc 1 101 99 view .LVU99
 452 01d8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 20 view .LVU100
 455 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 456              	.LVL17:
 457              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 458              		.loc 1 101 34 view .LVU101
 459 01e0 910A0AE0 		mul	r10, r1, r10	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 460              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 461              		.loc 1 93 20 view .LVU102
 462 01e4 0110A003 		moveq	r1, #1	@ tmp294,
 463 01e8 0010A013 		movne	r1, #0	@ tmp294,
 464              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 465              		.loc 1 101 74 view .LVU103
 466 01ec 2AA4A0E1 		lsr	r10, r10, #8	@ tmp284, tmp282,
 467              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 468              		.loc 1 93 19 view .LVU104
 469 01f0 FF0053E3 		cmp	r3, #255	@ word,
 470 01f4 01108103 		orreq	r1, r1, #1	@,, tmp299, tmp294
 471              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 472              		.loc 1 105 47 view .LVU105
 473 01f8 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp288, g_armwave_state.bitdepth_height, tmp284, scale_value
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 19 view .LVU106
 476 01fc 000051E3 		cmp	r1, #0	@ tmp299,
 477              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 478              		.loc 1 105 47 view .LVU107
 479 0200 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_141, *_141
 480 0204 011081E2 		add	r1, r1, #1	@ tmp291, *_141,
 481 0208 0010C5E7 		strb	r1, [r5, r0]	@ tmp291, *_141
 482              		.loc 1 106 17 is_stmt 1 view .LVU108
 483              	.LVL18:
  90:armwave.c     ****                 
 484              		.loc 1 90 17 view .LVU109
  93:armwave.c     ****                     continue;
 485              		.loc 1 93 17 view .LVU110
 486              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 487              		.loc 1 93 19 is_stmt 0 view .LVU111
 488 020c 0700001A 		bne	.L20		@,
 489              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 490              		.loc 1 101 34 view .LVU112
 491 0210 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 492              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 493              		.loc 1 101 99 view .LVU113
 494 0214 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 495              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 496              		.loc 1 101 34 view .LVU114
 497 0218 910909E0 		mul	r9, r1, r9	@ tmp302, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 498              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 499              		.loc 1 101 74 view .LVU115
 500 021c 2994A0E1 		lsr	r9, r9, #8	@ tmp304, tmp302,
 501              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 502              		.loc 1 105 47 view .LVU116
 503 0220 903923E0 		mla	r3, r0, r9, r3	@ tmp308, g_armwave_state.bitdepth_height, tmp304, word
 504 0224 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_171, *_171
 505 0228 011081E2 		add	r1, r1, #1	@ tmp311, *_171,
 506 022c 0310C5E7 		strb	r1, [r5, r3]	@ tmp311, *_171
 507              		.loc 1 106 17 is_stmt 1 view .LVU117
 508              	.LVL19:
 509              	.L20:
 510              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 511              		.loc 1 83 37 is_stmt 0 view .LVU118
 512 0230 042082E2 		add	r2, r2, #4	@ yy, yy,
 513              	.LVL20:
 514              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 515              		.loc 1 83 9 view .LVU119
 516 0234 020056E1 		cmp	r6, r2	@ height, yy
 517 0238 BAFFFF8A 		bhi	.L17		@,
 518              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 78 44 view .LVU120
 520 023c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 521              	.LVL21:
 522              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 78 5 view .LVU121
 524 0240 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 525              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 78 44 view .LVU122
 527 0244 012082E2 		add	r2, r2, #1	@ w, w,
 528              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 78 5 view .LVU123
 530 0248 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 531              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 78 44 view .LVU124
 533 024c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 534              	.LVL22:
 535              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 78 5 view .LVU125
 537 0250 ADFFFFBA 		blt	.L18		@,
 538              	.LVL23:
 539              	.L11:
 540              	@ armwave.c:110: }
 107:armwave.c     ****             }
 108:armwave.c     ****         }
 109:armwave.c     ****     }
 110:armwave.c     **** }
 541              		.loc 1 110 1 view .LVU126
 542 0254 1CD08DE2 		add	sp, sp, #28	@,,
 543              		.cfi_def_cfa_offset 36
 544              		@ sp needed	@
 545 0258 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 546              	.LVL24:
 547              	.L28:
 548              		.loc 1 110 1 view .LVU127
 549              		.align	2
 550              	.L27:
 551 025c 00000000 		.word	g_armwave_state
 552 0260 20000000 		.word	.LC2
 553              		.cfi_endproc
 554              	.LFE59:
 556              		.align	2
 557              		.global	armwave_fill_pixbuf_scaled
 558              		.syntax unified
 559              		.arm
 560              		.fpu vfp
 562              	armwave_fill_pixbuf_scaled:
 563              	.LVL25:
 564              	.LFB60:
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 115:armwave.c     ****  */
 116:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 117:armwave.c     **** {
 118:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 119:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 120:armwave.c     ****     uint8_t r, g, b, value;
 121:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 122:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 123:armwave.c     ****     uint32_t offset;
 124:armwave.c     **** 
 125:armwave.c     ****     assert(out_buffer != NULL);
 126:armwave.c     **** 
 127:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 128:armwave.c     **** 
 129:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 130:armwave.c     **** 
 131:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 132:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 133:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 134:armwave.c     ****         // most normal waveforms.
 135:armwave.c     ****         wave_word = *base_32ptr++;
 136:armwave.c     **** 
 137:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 138:armwave.c     ****             for(i = 0; i < 4; i++) {
 139:armwave.c     ****                 value = wave_word & 0xff;
 140:armwave.c     ****                 wave_word >>= 8;
 141:armwave.c     **** 
 142:armwave.c     ****                 if(value != 0) {
 143:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 144:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 145:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 146:armwave.c     **** 
 147:armwave.c     ****                     r = MIN(rr, 255);
 148:armwave.c     ****                     g = MIN(gg, 255);
 149:armwave.c     ****                     b = MIN(bb, 255);
 150:armwave.c     **** 
 151:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 152:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 153:armwave.c     **** 
 154:armwave.c     ****                     // Is there a better way?
 155:armwave.c     ****                     nsub = n + i;
 156:armwave.c     ****                     xx = nsub & 0xff;
 157:armwave.c     ****                     yy = nsub >> 8;
 158:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 159:armwave.c     ****                     *(out_buffer_base + offset) = word;
 160:armwave.c     ****                 }
 161:armwave.c     ****             }
 162:armwave.c     ****         } 
 163:armwave.c     ****     }
 164:armwave.c     **** }
 165:armwave.c     **** #endif
 166:armwave.c     **** 
 167:armwave.c     **** /*
 168:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 169:armwave.c     ****  * Rows are repeated as necessary.
 170:armwave.c     ****  */
 171:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 172:armwave.c     **** {
 565              		.loc 1 172 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 569              		.loc 1 173 5 view .LVU129
 174:armwave.c     ****     // uint32_t ysub;
 175:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 570              		.loc 1 175 5 view .LVU130
 176:armwave.c     ****     uint8_t r, g, b, value; 
 571              		.loc 1 176 5 view .LVU131
 177:armwave.c     ****     // uint8_t row;
 178:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 572              		.loc 1 178 5 view .LVU132
 573              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 574              		.loc 1 172 1 is_stmt 0 view .LVU133
 575 0264 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 576              		.cfi_def_cfa_offset 36
 577              		.cfi_offset 4, -36
 578              		.cfi_offset 5, -32
 579              		.cfi_offset 6, -28
 580              		.cfi_offset 7, -24
 581              		.cfi_offset 8, -20
 582              		.cfi_offset 9, -16
 583              		.cfi_offset 10, -12
 584              		.cfi_offset 11, -8
 585              		.cfi_offset 14, -4
 586              	@ armwave.c:182:     assert(out_buffer != NULL);
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 180:armwave.c     ****     uint32_t offset;
 181:armwave.c     **** 
 182:armwave.c     ****     assert(out_buffer != NULL);
 587              		.loc 1 182 5 view .LVU134
 588 0268 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 589              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 590              		.loc 1 178 15 view .LVU135
 591 026c 5C519FE5 		ldr	r5, .L51	@ tmp221,
 592              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 593              		.loc 1 172 1 view .LVU136
 594 0270 0CD04DE2 		sub	sp, sp, #12	@,,
 595              		.cfi_def_cfa_offset 48
 596              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 597              		.loc 1 178 15 view .LVU137
 598 0274 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 599              	.LVL26:
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 600              		.loc 1 179 5 is_stmt 1 view .LVU138
 180:armwave.c     **** 
 601              		.loc 1 180 5 view .LVU139
 602              		.loc 1 182 5 view .LVU140
 603 0278 4F00000A 		beq	.L48		@,
 183:armwave.c     **** 
 184:armwave.c     ****     // we don't really want to be doing this
 185:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 604              		.loc 1 185 5 view .LVU141
 605              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 606              		.loc 1 185 59 is_stmt 0 view .LVU142
 607 027c 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 608 0280 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 609              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 185 5 view .LVU143
 611 0284 0110A0E3 		mov	r1, #1	@,
 612              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 185 59 view .LVU144
 614 0288 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 615              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 185 5 view .LVU145
 617 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 618 0290 FEFFFFEB 		bl	memset		@
 619              	.LVL27:
 186:armwave.c     **** 
 187:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 620              		.loc 1 187 5 is_stmt 1 view .LVU146
 621              	@ armwave.c:187:     npix = g_armwave_state.target_width * 256; 
 622              		.loc 1 187 10 is_stmt 0 view .LVU147
 623 0294 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 624 0298 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 625              	.LVL28:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 189:armwave.c     **** 
 190:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 626              		.loc 1 190 5 is_stmt 1 view .LVU148
 627              		.loc 1 190 5 is_stmt 0 view .LVU149
 628 029c 000058E3 		cmp	r8, #0	@ npix,
 629 02a0 0C0000DA 		ble	.L29		@,
 630              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 192:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 193:armwave.c     ****         // most normal waveforms.
 194:armwave.c     ****         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 196:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 199:armwave.c     ****                 wave_word >>= 8;
 200:armwave.c     **** 
 201:armwave.c     ****                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 631              		.loc 1 203 52 view .LVU150
 632 02a4 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 633              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 202 52 view .LVU151
 635 02a8 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 636              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 206:armwave.c     ****                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 209:armwave.c     **** 
 210:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 211:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 213:armwave.c     ****                     // Do line scaling as necessary.
 214:armwave.c     ****                     /*
 215:armwave.c     ****                     nsub = n + w;
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 217:armwave.c     ****                     xx = (nsub >> 8);
 218:armwave.c     **** 
 219:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 220:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 223:armwave.c     ****                     */
 224:armwave.c     **** 
 225:armwave.c     ****                     nsub = n + w;
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 637              		.loc 1 226 57 view .LVU152
 638 02ac 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 639              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 640              		.loc 1 203 52 view .LVU153
 641 02b0 00308DE5 		str	r3, [sp]	@ _15, %sfp
 642              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 643              		.loc 1 204 52 view .LVU154
 644 02b4 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 645              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 646              		.loc 1 190 11 view .LVU155
 647 02b8 0010A0E3 		mov	r1, #0	@ n,
 648              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 204 52 view .LVU156
 650 02bc 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 651              	.LVL29:
 652              	.L36:
 194:armwave.c     **** 
 653              		.loc 1 194 9 is_stmt 1 view .LVU157
 654              	@ armwave.c:194:         wave_word = *base_32ptr++;
 194:armwave.c     **** 
 655              		.loc 1 194 19 is_stmt 0 view .LVU158
 656 02c0 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 657              	.LVL30:
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 658              		.loc 1 196 9 is_stmt 1 view .LVU159
 659              	@ armwave.c:196:         if(COND_UNLIKELY(wave_word != 0)) {
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 660              		.loc 1 196 11 is_stmt 0 view .LVU160
 661 02c4 000053E3 		cmp	r3, #0	@ wave_word,
 662 02c8 0400001A 		bne	.L49		@,
 663              	.L32:
 664              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 190 28 view .LVU161
 666 02cc 041081E2 		add	r1, r1, #4	@ n, n,
 667              	.LVL31:
 668              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 669              		.loc 1 190 5 view .LVU162
 670 02d0 010058E1 		cmp	r8, r1	@ npix, n
 671 02d4 F9FFFFCA 		bgt	.L36		@,
 672              	.LVL32:
 673              	.L29:
 674              	@ armwave.c:238: }
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 229:armwave.c     **** 
 230:armwave.c     ****                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 234:armwave.c     ****                 }
 235:armwave.c     ****             }
 236:armwave.c     ****         }
 237:armwave.c     ****     }
 238:armwave.c     **** }
 675              		.loc 1 238 1 view .LVU163
 676 02d8 0CD08DE2 		add	sp, sp, #12	@,,
 677              		.cfi_remember_state
 678              		.cfi_def_cfa_offset 36
 679              		@ sp needed	@
 680 02dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 681              	.LVL33:
 682              	.L49:
 683              		.cfi_restore_state
 684              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 685              		.loc 1 201 19 view .LVU164
 686 02e0 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 687              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 688              		.loc 1 197 19 view .LVU165
 689 02e4 0070A0E3 		mov	r7, #0	@ w,
 690              	.LVL34:
 198:armwave.c     ****                 wave_word >>= 8;
 691              		.loc 1 198 17 is_stmt 1 view .LVU166
 199:armwave.c     **** 
 692              		.loc 1 199 17 view .LVU167
 693              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 694              		.loc 1 199 27 is_stmt 0 view .LVU168
 695 02e8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 696              	.LVL35:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 201 17 is_stmt 1 view .LVU169
 698              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 699              		.loc 1 201 19 is_stmt 0 view .LVU170
 700 02ec 0500001A 		bne	.L50		@,
 701              	.L33:
 702              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 197 32 view .LVU171
 704 02f0 017087E2 		add	r7, r7, #1	@ w, w,
 705              	.LVL36:
 706              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 707              		.loc 1 197 13 view .LVU172
 708 02f4 040057E3 		cmp	r7, #4	@ w,
 709 02f8 F3FFFF0A 		beq	.L32		@,
 198:armwave.c     ****                 wave_word >>= 8;
 710              		.loc 1 198 17 is_stmt 1 view .LVU173
 711              	.LVL37:
 199:armwave.c     **** 
 712              		.loc 1 199 17 view .LVU174
 713              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 201 19 is_stmt 0 view .LVU175
 715 02fc FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 716              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 717              		.loc 1 199 27 view .LVU176
 718 0300 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 719              	.LVL38:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 201 17 is_stmt 1 view .LVU177
 721              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 722              		.loc 1 201 19 is_stmt 0 view .LVU178
 723 0304 F9FFFF0A 		beq	.L33		@,
 724              	.L50:
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 725              		.loc 1 202 21 is_stmt 1 view .LVU179
 726              	.LVL39:
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 727              		.loc 1 203 21 view .LVU180
 204:armwave.c     **** 
 728              		.loc 1 204 21 view .LVU181
 206:armwave.c     ****                     g = MIN(gg, 255);
 729              		.loc 1 206 21 view .LVU182
 207:armwave.c     ****                     b = MIN(bb, 255);
 730              		.loc 1 207 21 view .LVU183
 208:armwave.c     **** 
 731              		.loc 1 208 21 view .LVU184
 211:armwave.c     **** 
 732              		.loc 1 211 21 view .LVU185
 733              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 734              		.loc 1 204 55 is_stmt 0 view .LVU186
 735 0308 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 736 030c 07E081E0 		add	lr, r1, r7	@ _126, n, w
 737 0310 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 738              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 226 32 view .LVU187
 740 0314 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 741              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 742              		.loc 1 227 41 view .LVU188
 743 0318 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 744              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 745              		.loc 1 226 40 view .LVU189
 746 031c 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 747              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 748              		.loc 1 227 41 view .LVU190
 749 0320 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 750              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 203 55 view .LVU191
 752 0324 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 753              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 754              		.loc 1 204 24 view .LVU192
 755 0328 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 756              	.LVL40:
 757              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 226 40 view .LVU193
 759 032c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 760              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 227 46 view .LVU194
 762 0330 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 763              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 764              		.loc 1 203 55 view .LVU195
 765 0334 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 766              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 202 55 view .LVU196
 768 0338 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 769              	.LVL41:
 770              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 771              		.loc 1 208 25 view .LVU197
 772 033c FF005AE3 		cmp	r10, #255	@ bb,
 773              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 203 24 view .LVU198
 775 0340 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 776              	.LVL42:
 777              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 226 40 view .LVU199
 779 0344 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 780              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 781              		.loc 1 227 46 view .LVU200
 782 0348 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 783              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 784              		.loc 1 202 24 view .LVU201
 785 034c 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 786              	.LVL43:
 787              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 788              		.loc 1 208 25 view .LVU202
 789 0350 FFA0A0A3 		movge	r10, #255	@ bb,
 790              	.LVL44:
 791              	@ armwave.c:207:                     g = MIN(gg, 255);
 207:armwave.c     ****                     b = MIN(bb, 255);
 792              		.loc 1 207 25 view .LVU203
 793 0354 FF005CE3 		cmp	ip, #255	@ gg,
 794 0358 FFC0A0A3 		movge	ip, #255	@ gg,
 795              	.LVL45:
 796              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 797              		.loc 1 206 25 view .LVU204
 798 035c FF0050E3 		cmp	r0, #255	@ rr,
 799              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 800              		.loc 1 211 56 view .LVU205
 801 0360 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 802              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 226 24 view .LVU206
 804 0364 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 805              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 806              		.loc 1 206 25 view .LVU207
 807 0368 FF00A0A3 		movge	r0, #255	@ rr,
 808              	.LVL46:
 809              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 810              		.loc 1 211 44 view .LVU208
 811 036c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 812 0370 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 813              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 814              		.loc 1 211 56 view .LVU209
 815 0374 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 816              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 817              		.loc 1 211 51 view .LVU210
 818 0378 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 819              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 820              		.loc 1 211 62 view .LVU211
 821 037c 7000EFE6 		uxtb	r0, r0	@ rr, rr
 822 0380 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 823              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 226 24 view .LVU212
 825 0384 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 826              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 827              		.loc 1 227 24 view .LVU213
 828 0388 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 829              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 830              		.loc 1 211 26 view .LVU214
 831 038c FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 832              	.LVL47:
 225:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 833              		.loc 1 225 21 is_stmt 1 view .LVU215
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 834              		.loc 1 226 21 view .LVU216
 227:armwave.c     ****                     xx = (nsub >> 8);
 835              		.loc 1 227 21 view .LVU217
 836              	@ armwave.c:228:                     xx = (nsub >> 8);
 228:armwave.c     **** 
 837              		.loc 1 228 32 is_stmt 0 view .LVU218
 838 0390 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 839              	.LVL48:
 840              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 841              		.loc 1 227 24 view .LVU219
 842 0394 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 843              	.LVL49:
 228:armwave.c     **** 
 844              		.loc 1 228 21 is_stmt 1 view .LVU220
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 230 21 view .LVU221
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 230 21 is_stmt 0 view .LVU222
 847 0398 090052E1 		cmp	r2, r9	@ yy, ye
 848 039c D3FFFF2A 		bcs	.L33		@,
 849              	.LVL50:
 850              	.L34:
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 851              		.loc 1 231 25 is_stmt 1 discriminator 3 view .LVU223
 232:armwave.c     ****                     }
 852              		.loc 1 232 25 discriminator 3 view .LVU224
 853              	@ armwave.c:231:                         offset = (xx + (y * g_armwave_state.target_width)); 
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 854              		.loc 1 231 43 is_stmt 0 discriminator 3 view .LVU225
 855 03a0 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 856              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 857              		.loc 1 232 43 discriminator 3 view .LVU226
 858 03a4 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 859              	.LVL51:
 860              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 230 42 discriminator 3 view .LVU227
 862 03a8 012082E2 		add	r2, r2, #1	@ yy, yy,
 863              	.LVL52:
 864              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 230 21 discriminator 3 view .LVU228
 866 03ac 020059E1 		cmp	r9, r2	@ ye, yy
 867              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 868              		.loc 1 232 53 discriminator 3 view .LVU229
 869 03b0 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 870              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 230 21 discriminator 3 view .LVU230
 872 03b4 F9FFFF1A 		bne	.L34		@,
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 230 21 discriminator 3 view .LVU231
 874 03b8 CCFFFFEA 		b	.L33		@
 875              	.LVL53:
 876              	.L48:
 182:armwave.c     **** 
 877              		.loc 1 182 5 is_stmt 1 discriminator 1 view .LVU232
 878 03bc 10309FE5 		ldr	r3, .L51+4	@,
 879 03c0 B620A0E3 		mov	r2, #182	@,
 880 03c4 0C109FE5 		ldr	r1, .L51+8	@,
 881 03c8 0C009FE5 		ldr	r0, .L51+12	@,
 882              	.LVL54:
 182:armwave.c     **** 
 883              		.loc 1 182 5 is_stmt 0 discriminator 1 view .LVU233
 884 03cc FEFFFFEB 		bl	__assert_fail		@
 885              	.LVL55:
 886              	.L52:
 887              		.align	2
 888              	.L51:
 889 03d0 00000000 		.word	g_armwave_state
 890 03d4 00000000 		.word	.LANCHOR0
 891 03d8 5C000000 		.word	.LC3
 892 03dc 68000000 		.word	.LC4
 893              		.cfi_endproc
 894              	.LFE60:
 896              		.align	2
 897              		.global	armwave_generate
 898              		.syntax unified
 899              		.arm
 900              		.fpu vfp
 902              	armwave_generate:
 903              	.LFB61:
 239:armwave.c     **** 
 240:armwave.c     **** /*
 241:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 242:armwave.c     ****  */
 243:armwave.c     **** void armwave_generate()
 244:armwave.c     **** {
 904              		.loc 1 244 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 0
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 245:armwave.c     ****     uint32_t yy;
 908              		.loc 1 245 5 view .LVU235
 246:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 909              		.loc 1 246 5 view .LVU236
 910              	.LVL56:
 247:armwave.c     **** 
 248:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 911              		.loc 1 248 5 view .LVU237
 912              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 913              		.loc 1 244 1 is_stmt 0 view .LVU238
 914 03e0 10402DE9 		push	{r4, lr}	@
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 918              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 919              		.loc 1 248 5 view .LVU239
 920 03e4 0010A0E3 		mov	r1, #0	@,
 921              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 922              		.loc 1 248 58 view .LVU240
 923 03e8 18409FE5 		ldr	r4, .L55	@ tmp115,
 924              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 925              		.loc 1 248 5 view .LVU241
 926 03ec 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 927 03f0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 928 03f4 FEFFFFEB 		bl	memset		@
 929              	.LVL57:
 249:armwave.c     **** 
 250:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 251:armwave.c     ****     for(yy = 0; yy < 1; yy++) {
 930              		.loc 1 251 5 is_stmt 1 view .LVU242
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 253:armwave.c     **** 
 254:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 931              		.loc 1 254 9 view .LVU243
 932 03f8 481094E5 		ldr	r1, [r4, #72]	@, g_armwave_state.slice_record_height
 933 03fc 0000A0E3 		mov	r0, #0	@,
 934              	@ armwave.c:260: }
 255:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 256:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 257:armwave.c     ****     }
 258:armwave.c     **** 
 259:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 260:armwave.c     **** }
 935              		.loc 1 260 1 is_stmt 0 view .LVU244
 936 0400 1040BDE8 		pop	{r4, lr}	@
 937              		.cfi_restore 14
 938              		.cfi_restore 4
 939              		.cfi_def_cfa_offset 0
 940              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 254:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 941              		.loc 1 254 9 view .LVU245
 942 0404 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 943              	.LVL58:
 944              	.L56:
 945              		.align	2
 946              	.L55:
 947 0408 00000000 		.word	g_armwave_state
 948              		.cfi_endproc
 949              	.LFE61:
 951              		.align	2
 952              		.global	armwave_setup_render
 953              		.syntax unified
 954              		.arm
 955              		.fpu vfp
 957              	armwave_setup_render:
 958              	.LVL59:
 959              	.LFB62:
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Setup the renderer with passed parameters.
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 266:armwave.c     **** {
 960              		.loc 1 266 1 is_stmt 1 view -0
 961              		.cfi_startproc
 962              		@ args = 12, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t length, xx;
 964              		.loc 1 267 5 view .LVU247
 268:armwave.c     ****     float points_per_pixel;
 965              		.loc 1 268 5 view .LVU248
 269:armwave.c     **** 
 270:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 966              		.loc 1 270 5 view .LVU249
 967              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 968              		.loc 1 266 1 is_stmt 0 view .LVU250
 969 040c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 970              		.cfi_def_cfa_offset 28
 971              		.cfi_offset 4, -28
 972              		.cfi_offset 5, -24
 973              		.cfi_offset 6, -20
 974              		.cfi_offset 7, -16
 975              		.cfi_offset 8, -12
 976              		.cfi_offset 9, -8
 977              		.cfi_offset 14, -4
 978 0410 028B2DED 		vpush.64	{d8}	@
 979              		.cfi_def_cfa_offset 36
 980              		.cfi_offset 80, -36
 981              		.cfi_offset 81, -32
 982 0414 0040A0E1 		mov	r4, r0	@ start_point, start_point
 983 0418 0150A0E1 		mov	r5, r1	@ end_point, end_point
 984 041c 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 985 0420 14D04DE2 		sub	sp, sp, #20	@,,
 986              		.cfi_def_cfa_offset 56
 987              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 988              		.loc 1 266 1 view .LVU251
 989 0424 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 990 0428 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 991 042c 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 992              	@ armwave.c:270:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 993              		.loc 1 270 5 view .LVU252
 994 0430 00308DE5 		str	r3, [sp]	@ wave_stride,
 995 0434 F460CDE1 		strd	r6, [sp, #4]	@,,
 996 0438 0230A0E1 		mov	r3, r2	@, waves_max
 997              	.LVL60:
 998              		.loc 1 270 5 view .LVU253
 999 043c 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1000 0440 0120A0E1 		mov	r2, r1	@, end_point
 1001              	.LVL61:
 1002              		.loc 1 270 5 view .LVU254
 1003 0444 0010A0E1 		mov	r1, r0	@, start_point
 1004              	.LVL62:
 1005              		.loc 1 270 5 view .LVU255
 1006 0448 CC019FE5 		ldr	r0, .L71+12	@,
 1007              	.LVL63:
 1008              		.loc 1 270 5 view .LVU256
 1009 044c FEFFFFEB 		bl	printf		@
 1010              	.LVL64:
 271:armwave.c     **** 
 272:armwave.c     ****     // TODO these asserts should instead raise PyExc
 273:armwave.c     ****     assert(start_point < end_point);
 1011              		.loc 1 273 5 is_stmt 1 view .LVU257
 1012 0450 050054E1 		cmp	r4, r5	@ start_point, end_point
 1013 0454 5E00002A 		bcs	.L68		@,
 274:armwave.c     **** 
 275:armwave.c     ****     /*
 276:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 277:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 278:armwave.c     **** 
 279:armwave.c     ****     if(target_height == 256) {
 280:armwave.c     ****         g_armwave_state.row_shift = 8;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 282:armwave.c     ****     } else if(target_height == 512) {
 283:armwave.c     ****         g_armwave_state.row_shift = 9;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 285:armwave.c     ****     } else if(target_height == 1024) {
 286:armwave.c     ****         g_armwave_state.row_shift = 10;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 288:armwave.c     ****     } else if(target_height == 2048) {
 289:armwave.c     ****         g_armwave_state.row_shift = 11;
 290:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 291:armwave.c     ****     }
 292:armwave.c     ****     */
 293:armwave.c     **** 
 294:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 295:armwave.c     ****     g_armwave_state.xstride = target_height;
 1014              		.loc 1 295 5 view .LVU258
 1015              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1016              		.loc 1 306 45 is_stmt 0 view .LVU259
 1017 0458 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1018              	.LVL65:
 1019              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1020              		.loc 1 296 49 view .LVU260
 1021 045c 6B6A9FED 		vldr.32	s12, .L71	@ tmp175,
 1022              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 308:armwave.c     ****     // Calculate compound scaler
 309:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1023              		.loc 1 310 48 view .LVU261
 1024 0460 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1025              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1026              		.loc 1 310 79 view .LVU262
 1027 0464 6A6ADFED 		vldr.32	s13, .L71+4	@ tmp199,
 1028              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1029              		.loc 1 303 90 view .LVU263
 1030 0468 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1031              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1032              		.loc 1 295 29 view .LVU264
 1033 046c AC419FE5 		ldr	r4, .L71+16	@ tmp242,
 1034              	.LVL66:
 1035              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1036              		.loc 1 310 48 view .LVU265
 1037 0470 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1038              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1039              		.loc 1 296 49 view .LVU266
 1040 0474 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1041              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1042              		.loc 1 301 42 view .LVU267
 1043 0478 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1044              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1045              		.loc 1 303 74 view .LVU268
 1046 047c 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1047              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1048              		.loc 1 296 49 view .LVU269
 1049 0480 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1050              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1051              		.loc 1 310 48 view .LVU270
 1052 0484 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1053              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1054              		.loc 1 303 74 view .LVU271
 1055 0488 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1056              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1057              		.loc 1 295 29 view .LVU272
 1058 048c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1059              		.loc 1 296 5 is_stmt 1 view .LVU273
 1060              	@ armwave.c:305:     g_armwave_state.target_height = target_height;
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1061              		.loc 1 305 35 is_stmt 0 view .LVU274
 1062 0490 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1063              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1064              		.loc 1 310 48 view .LVU275
 1065 0494 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1066              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1067              		.loc 1 312 5 view .LVU276
 1068 0498 0310A0E1 		mov	r1, r3	@, tmp190
 1069              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1070              		.loc 1 301 26 view .LVU277
 1071 049c 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1072              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1073              		.loc 1 302 37 view .LVU278
 1074 04a0 017CA0E3 		mov	r7, #256	@ tmp185,
 1075              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1076              		.loc 1 303 34 view .LVU279
 1077 04a4 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1078              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1079              		.loc 1 312 5 view .LVU280
 1080 04a8 74019FE5 		ldr	r0, .L71+20	@,
 1081              	@ armwave.c:298:     g_armwave_state.wave_stride = wave_stride;
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1082              		.loc 1 298 33 view .LVU281
 1083 04ac 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1084              	@ armwave.c:299:     g_armwave_state.waves_max = waves_max;
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1085              		.loc 1 299 31 view .LVU282
 1086 04b0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1087              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1088              		.loc 1 310 48 view .LVU283
 1089 04b4 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1090              	@ armwave.c:300:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1091              		.loc 1 300 27 view .LVU284
 1092 04b8 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1093              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 306:armwave.c     **** 
 1094              		.loc 1 306 33 view .LVU285
 1095 04bc 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1096              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1097              		.loc 1 302 37 view .LVU286
 1098 04c0 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1099              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1100              		.loc 1 296 49 view .LVU287
 1101 04c4 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1102              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1103              		.loc 1 310 79 view .LVU288
 1104 04c8 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1105              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1106              		.loc 1 309 42 view .LVU289
 1107 04cc E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1108              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1109              		.loc 1 296 33 view .LVU290
 1110 04d0 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1111              		.loc 1 297 5 is_stmt 1 view .LVU291
 1112              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1113              		.loc 1 309 42 is_stmt 0 view .LVU292
 1114 04d4 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1115              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1116              		.loc 1 297 30 view .LVU293
 1117 04d8 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1118              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1119              		.loc 1 312 5 view .LVU294
 1120 04dc 0C30A0E1 		mov	r3, ip	@, _19
 1121 04e0 0C20A0E1 		mov	r2, ip	@, tmp3
 1122              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1123              		.loc 1 309 42 view .LVU295
 1124 04e4 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1125              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1126              		.loc 1 297 30 view .LVU296
 1127 04e8 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1128              		.loc 1 298 5 is_stmt 1 view .LVU297
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1129              		.loc 1 299 5 view .LVU298
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1130              		.loc 1 300 5 view .LVU299
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1131              		.loc 1 301 5 view .LVU300
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1132              		.loc 1 302 5 view .LVU301
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1133              		.loc 1 303 5 view .LVU302
 304:armwave.c     ****     g_armwave_state.target_height = target_height;
 1134              		.loc 1 304 5 view .LVU303
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1135              		.loc 1 305 5 view .LVU304
 306:armwave.c     **** 
 1136              		.loc 1 306 5 view .LVU305
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1137              		.loc 1 309 5 view .LVU306
 1138              		.loc 1 312 5 view .LVU307
 1139 04ec FEFFFFEB 		bl	printf		@
 1140              	.LVL67:
 313:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 314:armwave.c     **** 
 315:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 316:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 317:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 318:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1141              		.loc 1 318 5 view .LVU308
 1142              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 319:armwave.c     **** 
 320:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1143              		.loc 1 320 23 is_stmt 0 view .LVU309
 1144 04f0 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1145              	@ armwave.c:318:     g_armwave_state.slice_height = 256; // 64;  
 318:armwave.c     **** 
 1146              		.loc 1 318 34 view .LVU310
 1147 04f4 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1148              		.loc 1 320 5 is_stmt 1 view .LVU311
 1149              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 1150              		.loc 1 320 7 is_stmt 0 view .LVU312
 1151 04f8 000050E3 		cmp	r0, #0	@ _20,
 1152 04fc 0000000A 		beq	.L59		@,
 321:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1153              		.loc 1 321 9 is_stmt 1 view .LVU313
 1154 0500 FEFFFFEB 		bl	free		@
 1155              	.LVL68:
 1156              	.L59:
 322:armwave.c     **** 
 323:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1157              		.loc 1 323 5 view .LVU314
 1158              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1159              		.loc 1 323 34 is_stmt 0 view .LVU315
 1160 0504 0110A0E3 		mov	r1, #1	@,
 1161 0508 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1162 050c FEFFFFEB 		bl	calloc		@
 1163              	.LVL69:
 1164              	@ armwave.c:325:     assert(g_armwave_state.ch1_buffer != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1165              		.loc 1 325 5 view .LVU316
 1166 0510 000050E3 		cmp	r0, #0	@ _23,
 1167              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1168              		.loc 1 323 34 view .LVU317
 1169 0514 0070A0E1 		mov	r7, r0	@ _23,
 1170              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1171              		.loc 1 323 32 view .LVU318
 1172 0518 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1173              		.loc 1 325 5 is_stmt 1 view .LVU319
 1174 051c 3600000A 		beq	.L69		@,
 326:armwave.c     **** 
 327:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 328:armwave.c     ****     length = end_point - start_point;
 1175              		.loc 1 328 5 view .LVU320
 1176              	.LVL70:
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1177              		.loc 1 329 5 view .LVU321
 1178              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1179              		.loc 1 329 34 is_stmt 0 view .LVU322
 1180 0520 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1181              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1182              		.loc 1 329 22 view .LVU323
 1183 0524 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1184              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1185              		.loc 1 330 60 view .LVU324
 1186 0528 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1187              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1188              		.loc 1 331 40 view .LVU325
 1189 052c 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1190              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1191              		.loc 1 329 34 view .LVU326
 1192 0530 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1193              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1194              		.loc 1 329 22 view .LVU327
 1195 0534 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1196              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1197              		.loc 1 330 60 view .LVU328
 1198 0538 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1199              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1200              		.loc 1 329 22 view .LVU329
 1201 053c A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1202              	.LVL71:
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1203              		.loc 1 330 5 is_stmt 1 view .LVU330
 1204              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1205              		.loc 1 330 60 is_stmt 0 view .LVU331
 1206 0540 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1207              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1208              		.loc 1 330 41 view .LVU332
 1209 0544 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1210 0548 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1211              		.loc 1 331 5 is_stmt 1 view .LVU333
 1212              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1213              		.loc 1 331 40 is_stmt 0 view .LVU334
 1214 054c FEFFFFEB 		bl	malloc		@
 1215              	.LVL72:
 1216              	@ armwave.c:333:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 332:armwave.c     **** 
 333:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1217              		.loc 1 333 5 view .LVU335
 1218 0550 000050E3 		cmp	r0, #0	@ _31,
 1219              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1220              		.loc 1 331 40 view .LVU336
 1221 0554 0060A0E1 		mov	r6, r0	@ _31,
 1222              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1223              		.loc 1 331 38 view .LVU337
 1224 0558 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1225              		.loc 1 333 5 is_stmt 1 view .LVU338
 1226 055c 2100000A 		beq	.L70		@,
 1227              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334:armwave.c     **** 
 335:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1228              		.loc 1 336 54 is_stmt 0 view .LVU339
 1229 0560 2C7ADFED 		vldr.32	s15, .L71+8	@ tmp230,
 1230 0564 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1231              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1232              		.loc 1 335 12 view .LVU340
 1233 0568 0030A0E3 		mov	r3, #0	@ xx,
 1234              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1235              		.loc 1 336 54 view .LVU341
 1236 056c 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1237              	.L62:
 1238              	.LVL73:
 1239              		.loc 1 336 9 is_stmt 1 discriminator 3 view .LVU342
 1240              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1241              		.loc 1 336 74 is_stmt 0 discriminator 3 view .LVU343
 1242 0570 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1243              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1244              		.loc 1 335 32 discriminator 3 view .LVU344
 1245 0574 013083E2 		add	r3, r3, #1	@ xx, xx,
 1246              	.LVL74:
 1247              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1248              		.loc 1 335 5 discriminator 3 view .LVU345
 1249 0578 030055E1 		cmp	r5, r3	@ _13, xx
 1250              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1251              		.loc 1 336 74 discriminator 3 view .LVU346
 1252 057c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1253 0580 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1254              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1255              		.loc 1 336 46 discriminator 3 view .LVU347
 1256 0584 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1257 0588 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1258 058c B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1259              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1260              		.loc 1 335 5 discriminator 3 view .LVU348
 1261 0590 F6FFFF1A 		bne	.L62		@,
 337:armwave.c     **** 
 338:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 339:armwave.c     ****     }
 340:armwave.c     **** 
 341:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1262              		.loc 1 341 5 is_stmt 1 view .LVU349
 1263              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1264              		.loc 1 341 34 is_stmt 0 view .LVU350
 1265 0594 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1266 0598 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1267 059c FEFFFFEB 		bl	malloc		@
 1268              	.LVL75:
 1269              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 342:armwave.c     **** 
 343:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1270              		.loc 1 343 5 view .LVU351
 1271 05a0 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1272 05a4 0620A0E1 		mov	r2, r6	@, _31
 1273 05a8 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1274 05ac 0710A0E1 		mov	r1, r7	@, _23
 1275              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1276              		.loc 1 341 34 view .LVU352
 1277 05b0 00C0A0E1 		mov	ip, r0	@ tmp237,
 1278              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1279              		.loc 1 343 5 view .LVU353
 1280 05b4 0030A0E1 		mov	r3, r0	@, tmp237
 1281              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1282              		.loc 1 341 32 view .LVU354
 1283 05b8 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1284              		.loc 1 343 5 is_stmt 1 view .LVU355
 1285 05bc 64009FE5 		ldr	r0, .L71+24	@,
 1286 05c0 FEFFFFEB 		bl	printf		@
 1287              	.LVL76:
 344:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 345:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 346:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 348:armwave.c     **** 
 349:armwave.c     ****     malloc_stats();
 1288              		.loc 1 349 5 view .LVU356
 1289              	@ armwave.c:350: }
 350:armwave.c     **** }
 1290              		.loc 1 350 1 is_stmt 0 view .LVU357
 1291 05c4 14D08DE2 		add	sp, sp, #20	@,,
 1292              		.cfi_remember_state
 1293              		.cfi_def_cfa_offset 36
 1294              		@ sp needed	@
 1295 05c8 028BBDEC 		vldm	sp!, {d8}	@
 1296              		.cfi_restore 80
 1297              		.cfi_restore 81
 1298              		.cfi_def_cfa_offset 28
 1299              	.LVL77:
 1300              		.loc 1 350 1 view .LVU358
 1301 05cc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1302              		.cfi_restore 14
 1303              		.cfi_restore 9
 1304              		.cfi_restore 8
 1305              		.cfi_restore 7
 1306              		.cfi_restore 6
 1307              		.cfi_restore 5
 1308              		.cfi_restore 4
 1309              		.cfi_def_cfa_offset 0
 1310              	.LVL78:
 1311              	@ armwave.c:349:     malloc_stats();
 349:armwave.c     **** }
 1312              		.loc 1 349 5 view .LVU359
 1313 05d0 FEFFFFEA 		b	malloc_stats		@
 1314              	.LVL79:
 1315              	.L68:
 1316              		.cfi_restore_state
 273:armwave.c     **** 
 1317              		.loc 1 273 5 is_stmt 1 discriminator 1 view .LVU360
 1318 05d4 50309FE5 		ldr	r3, .L71+28	@,
 1319 05d8 50209FE5 		ldr	r2, .L71+32	@,
 1320 05dc 50109FE5 		ldr	r1, .L71+36	@,
 1321 05e0 50009FE5 		ldr	r0, .L71+40	@,
 1322 05e4 FEFFFFEB 		bl	__assert_fail		@
 1323              	.LVL80:
 1324              	.L70:
 333:armwave.c     **** 
 1325              		.loc 1 333 5 discriminator 1 view .LVU361
 1326 05e8 3C309FE5 		ldr	r3, .L71+28	@,
 1327 05ec 48209FE5 		ldr	r2, .L71+44	@,
 1328 05f0 3C109FE5 		ldr	r1, .L71+36	@,
 1329 05f4 44009FE5 		ldr	r0, .L71+48	@,
 1330 05f8 FEFFFFEB 		bl	__assert_fail		@
 1331              	.LVL81:
 1332              	.L69:
 325:armwave.c     **** 
 1333              		.loc 1 325 5 discriminator 1 view .LVU362
 1334 05fc 28309FE5 		ldr	r3, .L71+28	@,
 1335 0600 3C209FE5 		ldr	r2, .L71+52	@,
 1336 0604 28109FE5 		ldr	r1, .L71+36	@,
 1337 0608 38009FE5 		ldr	r0, .L71+56	@,
 1338 060c FEFFFFEB 		bl	__assert_fail		@
 1339              	.LVL82:
 1340              	.L72:
 1341              		.align	2
 1342              	.L71:
 1343 0610 00007F43 		.word	1132396544
 1344 0614 00008043 		.word	1132462080
 1345 0618 0000803F 		.word	1065353216
 1346 061c 7C000000 		.word	.LC5
 1347 0620 00000000 		.word	g_armwave_state
 1348 0624 C0000000 		.word	.LC7
 1349 0628 44010000 		.word	.LC10
 1350 062c 1C000000 		.word	.LANCHOR0+28
 1351 0630 11010000 		.word	273
 1352 0634 5C000000 		.word	.LC3
 1353 0638 A8000000 		.word	.LC6
 1354 063c 4D010000 		.word	333
 1355 0640 18010000 		.word	.LC9
 1356 0644 45010000 		.word	325
 1357 0648 F4000000 		.word	.LC8
 1358              		.cfi_endproc
 1359              	.LFE62:
 1361              		.align	2
 1362              		.global	armwave_set_wave_pointer
 1363              		.syntax unified
 1364              		.arm
 1365              		.fpu vfp
 1367              	armwave_set_wave_pointer:
 1368              	.LVL83:
 1369              	.LFB63:
 351:armwave.c     **** 
 352:armwave.c     **** /*
 353:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 354:armwave.c     ****  * in the future.
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 357:armwave.c     **** {
 1370              		.loc 1 357 1 view -0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1374              		.loc 1 358 5 view .LVU364
 1375 064c 000050E3 		cmp	r0, #0	@ wave_buffer
 1376              		.loc 1 358 5 is_stmt 0 view .LVU365
 1377 0650 0200000A 		beq	.L78		@,
 359:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1378              		.loc 1 359 5 is_stmt 1 view .LVU366
 1379              	@ armwave.c:359:     g_armwave_state.wave_buffer = wave_buffer;
 1380              		.loc 1 359 33 is_stmt 0 view .LVU367
 1381 0654 1C309FE5 		ldr	r3, .L79	@ tmp116,
 1382 0658 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1383 065c 1EFF2FE1 		bx	lr	@
 1384              	.L78:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1385              		.loc 1 358 5 is_stmt 1 discriminator 1 view .LVU368
 1386              	@ armwave.c:357: {
 357:armwave.c     ****     assert(wave_buffer != NULL);
 1387              		.loc 1 357 1 is_stmt 0 discriminator 1 view .LVU369
 1388 0660 10402DE9 		push	{r4, lr}	@
 1389              		.cfi_def_cfa_offset 8
 1390              		.cfi_offset 4, -8
 1391              		.cfi_offset 14, -4
 1392              	@ armwave.c:358:     assert(wave_buffer != NULL);
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1393              		.loc 1 358 5 discriminator 1 view .LVU370
 1394 0664 10309FE5 		ldr	r3, .L79+4	@,
 1395 0668 10209FE5 		ldr	r2, .L79+8	@,
 1396 066c 10109FE5 		ldr	r1, .L79+12	@,
 1397 0670 10009FE5 		ldr	r0, .L79+16	@,
 1398              	.LVL84:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1399              		.loc 1 358 5 discriminator 1 view .LVU371
 1400 0674 FEFFFFEB 		bl	__assert_fail		@
 1401              	.LVL85:
 1402              	.L80:
 1403              		.align	2
 1404              	.L79:
 1405 0678 00000000 		.word	g_armwave_state
 1406 067c 34000000 		.word	.LANCHOR0+52
 1407 0680 66010000 		.word	358
 1408 0684 5C000000 		.word	.LC3
 1409 0688 68010000 		.word	.LC11
 1410              		.cfi_endproc
 1411              	.LFE63:
 1413              		.align	2
 1414              		.global	armwave_set_wave_pointer_as_testbuf
 1415              		.syntax unified
 1416              		.arm
 1417              		.fpu vfp
 1419              	armwave_set_wave_pointer_as_testbuf:
 1420              	.LVL86:
 1421              	.LFB64:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 364:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 365:armwave.c     ****  */
 366:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 367:armwave.c     **** {
 1422              		.loc 1 367 1 is_stmt 1 view -0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
 368:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1427              		.loc 1 368 5 view .LVU373
 1428              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1429              		.loc 1 368 29 is_stmt 0 view .LVU374
 1430 068c 24309FE5 		ldr	r3, .L84	@ tmp117,
 1431              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1432              		.loc 1 368 7 view .LVU375
 1433 0690 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1434 0694 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1435 0698 0400003A 		bcc	.L83		@,
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 370:armwave.c     ****         return;
 371:armwave.c     ****     }
 372:armwave.c     **** 
 373:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1436              		.loc 1 373 5 is_stmt 1 view .LVU376
 1437              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1438              		.loc 1 373 111 is_stmt 0 view .LVU377
 1439 069c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1440              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1441              		.loc 1 373 68 view .LVU378
 1442 06a0 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1443 06a4 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1444              	.LVL87:
 1445              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1446              		.loc 1 373 33 view .LVU379
 1447 06a8 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1448              	@ armwave.c:374: }
 374:armwave.c     **** }
 1449              		.loc 1 374 1 view .LVU380
 1450 06ac 1EFF2FE1 		bx	lr	@
 1451              	.LVL88:
 1452              	.L83:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1453              		.loc 1 369 9 is_stmt 1 view .LVU381
 1454 06b0 04009FE5 		ldr	r0, .L84+4	@,
 1455              	.LVL89:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1456              		.loc 1 369 9 is_stmt 0 view .LVU382
 1457 06b4 FEFFFFEA 		b	puts		@
 1458              	.LVL90:
 1459              	.L85:
 1460              		.align	2
 1461              	.L84:
 1462 06b8 00000000 		.word	g_armwave_state
 1463 06bc 7C010000 		.word	.LC12
 1464              		.cfi_endproc
 1465              	.LFE64:
 1467              		.align	2
 1468              		.global	armwave_set_wave_pointer_u32
 1469              		.syntax unified
 1470              		.arm
 1471              		.fpu vfp
 1473              	armwave_set_wave_pointer_u32:
 1474              	.LVL91:
 1475              	.LFB65:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 378:armwave.c     ****  * disjointed buffers in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 381:armwave.c     **** {
 1476              		.loc 1 381 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1480              		.loc 1 382 5 view .LVU384
 1481 06c0 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1482              		.loc 1 382 5 is_stmt 0 view .LVU385
 1483 06c4 0200000A 		beq	.L91		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1484              		.loc 1 383 5 is_stmt 1 view .LVU386
 1485              	@ armwave.c:383:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1486              		.loc 1 383 33 is_stmt 0 view .LVU387
 1487 06c8 1C309FE5 		ldr	r3, .L92	@ tmp117,
 1488 06cc 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1489 06d0 1EFF2FE1 		bx	lr	@
 1490              	.L91:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1491              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU388
 1492              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1493              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU389
 1494 06d4 10402DE9 		push	{r4, lr}	@
 1495              		.cfi_def_cfa_offset 8
 1496              		.cfi_offset 4, -8
 1497              		.cfi_offset 14, -4
 1498              	@ armwave.c:382:     assert(wave_buffer_ptr != 0);
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1499              		.loc 1 382 5 discriminator 1 view .LVU390
 1500 06d8 10309FE5 		ldr	r3, .L92+4	@,
 1501 06dc 10209FE5 		ldr	r2, .L92+8	@,
 1502 06e0 10109FE5 		ldr	r1, .L92+12	@,
 1503 06e4 10009FE5 		ldr	r0, .L92+16	@,
 1504              	.LVL92:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1505              		.loc 1 382 5 discriminator 1 view .LVU391
 1506 06e8 FEFFFFEB 		bl	__assert_fail		@
 1507              	.LVL93:
 1508              	.L93:
 1509              		.align	2
 1510              	.L92:
 1511 06ec 00000000 		.word	g_armwave_state
 1512 06f0 50000000 		.word	.LANCHOR0+80
 1513 06f4 7E010000 		.word	382
 1514 06f8 5C000000 		.word	.LC3
 1515 06fc B8010000 		.word	.LC13
 1516              		.cfi_endproc
 1517              	.LFE65:
 1519              		.align	2
 1520              		.global	armwave_clear_buffer
 1521              		.syntax unified
 1522              		.arm
 1523              		.fpu vfp
 1525              	armwave_clear_buffer:
 1526              	.LVL94:
 1527              	.LFB66:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 390:armwave.c     **** {
 1528              		.loc 1 390 1 is_stmt 1 view -0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 1532              		@ link register save eliminated.
 391:armwave.c     ****     // Flags ignored, only one buffer cleared
 392:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1533              		.loc 1 392 5 view .LVU393
 1534              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1535              		.loc 1 392 58 is_stmt 0 view .LVU394
 1536 0700 0C309FE5 		ldr	r3, .L95	@ tmp114,
 1537              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1538              		.loc 1 392 5 view .LVU395
 1539 0704 0010A0E3 		mov	r1, #0	@,
 1540 0708 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1541 070c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1542              	.LVL95:
 1543              		.loc 1 392 5 view .LVU396
 1544 0710 FEFFFFEA 		b	memset		@
 1545              	.LVL96:
 1546              	.L96:
 1547              		.align	2
 1548              	.L95:
 1549 0714 00000000 		.word	g_armwave_state
 1550              		.cfi_endproc
 1551              	.LFE66:
 1553              		.align	2
 1554              		.global	armwave_set_channel_colour
 1555              		.syntax unified
 1556              		.arm
 1557              		.fpu vfp
 1559              	armwave_set_channel_colour:
 1560              	.LVL97:
 1561              	.LFB67:
 393:armwave.c     **** }
 394:armwave.c     **** 
 395:armwave.c     **** /*
 396:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 397:armwave.c     ****  */
 398:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 399:armwave.c     **** {
 1562              		.loc 1 399 1 is_stmt 1 view -0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              		@ link register save eliminated.
 400:armwave.c     ****     // Only 1ch supported for now
 401:armwave.c     ****     switch(ch) {
 1567              		.loc 1 401 5 view .LVU398
 1568 0718 010050E3 		cmp	r0, #1	@ ch,
 402:armwave.c     ****         case 1:
 403:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1569              		.loc 1 403 13 view .LVU399
 1570              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 1571              		.loc 1 403 41 is_stmt 0 view .LVU400
 1572 071c 0C009F05 		ldreq	r0, .L99	@ tmp117,
 1573              	.LVL98:
 1574              		.loc 1 403 41 view .LVU401
 1575 0720 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1576              		.loc 1 404 13 is_stmt 1 view .LVU402
 1577              	@ armwave.c:404:             g_armwave_state.ch1_color.g = g;
 1578              		.loc 1 404 41 is_stmt 0 view .LVU403
 1579 0724 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 405:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1580              		.loc 1 405 13 is_stmt 1 view .LVU404
 1581              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 1582              		.loc 1 405 41 is_stmt 0 view .LVU405
 1583 0728 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 406:armwave.c     ****             break;
 1584              		.loc 1 406 13 is_stmt 1 view .LVU406
 1585              	@ armwave.c:408: }
 407:armwave.c     ****     }
 408:armwave.c     **** }
 1586              		.loc 1 408 1 is_stmt 0 view .LVU407
 1587 072c 1EFF2FE1 		bx	lr	@
 1588              	.L100:
 1589              		.align	2
 1590              	.L99:
 1591 0730 00000000 		.word	g_armwave_state
 1592              		.cfi_endproc
 1593              	.LFE67:
 1595              		.align	2
 1596              		.global	armwave_dump_ppm_debug
 1597              		.syntax unified
 1598              		.arm
 1599              		.fpu vfp
 1601              	armwave_dump_ppm_debug:
 1602              	.LVL99:
 1603              	.LFB68:
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Dump a ppm of a buffer to a file.
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 414:armwave.c     **** {
 1604              		.loc 1 414 1 is_stmt 1 view -0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 0
 1607              		@ frame_needed = 0, uses_anonymous_args = 0
 415:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1608              		.loc 1 415 5 view .LVU409
 1609              	@ armwave.c:414: {
 414:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1610              		.loc 1 414 1 is_stmt 0 view .LVU410
 1611 0734 0130A0E1 		mov	r3, r1	@ fn, fn
 1612 0738 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1613              		.cfi_def_cfa_offset 28
 1614              		.cfi_offset 4, -28
 1615              		.cfi_offset 5, -24
 1616              		.cfi_offset 6, -20
 1617              		.cfi_offset 7, -16
 1618              		.cfi_offset 8, -12
 1619              		.cfi_offset 9, -8
 1620              		.cfi_offset 14, -4
 1621 073c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1622 0740 0CD04DE2 		sub	sp, sp, #12	@,,
 1623              		.cfi_def_cfa_offset 40
 1624              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 1625              		.loc 1 415 16 view .LVU411
 1626 0744 C4109FE5 		ldr	r1, .L109	@,
 1627              	.LVL100:
 1628              		.loc 1 415 16 view .LVU412
 1629 0748 0300A0E1 		mov	r0, r3	@, fn
 1630              	.LVL101:
 1631              		.loc 1 415 16 view .LVU413
 1632 074c FEFFFFEB 		bl	fopen64		@
 1633              	.LVL102:
 1634              	@ armwave.c:422:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 416:armwave.c     ****     uint32_t data;
 417:armwave.c     ****     int xx, yy;
 418:armwave.c     **** 
 419:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 420:armwave.c     **** 
 421:armwave.c     ****     fputs("P3\n", fp);
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1635              		.loc 1 422 5 view .LVU414
 1636 0750 BC609FE5 		ldr	r6, .L109+4	@ tmp150,
 1637              	@ armwave.c:421:     fputs("P3\n", fp);
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1638              		.loc 1 421 5 view .LVU415
 1639 0754 0320A0E3 		mov	r2, #3	@,
 1640 0758 0110A0E3 		mov	r1, #1	@,
 1641              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 415:armwave.c     ****     uint32_t data;
 1642              		.loc 1 415 16 view .LVU416
 1643 075c 0070A0E1 		mov	r7, r0	@ fp,
 1644              	.LVL103:
 416:armwave.c     ****     uint32_t data;
 1645              		.loc 1 416 5 is_stmt 1 view .LVU417
 417:armwave.c     **** 
 1646              		.loc 1 417 5 view .LVU418
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1647              		.loc 1 421 5 view .LVU419
 1648 0760 0030A0E1 		mov	r3, r0	@, fp
 1649 0764 AC009FE5 		ldr	r0, .L109+8	@,
 1650              	.LVL104:
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1651              		.loc 1 421 5 is_stmt 0 view .LVU420
 1652 0768 FEFFFFEB 		bl	fwrite		@
 1653              	.LVL105:
 1654              		.loc 1 422 5 is_stmt 1 view .LVU421
 1655 076c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1656 0770 A4109FE5 		ldr	r1, .L109+12	@,
 1657 0774 0700A0E1 		mov	r0, r7	@, fp
 1658 0778 FEFFFFEB 		bl	fprintf		@
 1659              	.LVL106:
 423:armwave.c     ****     fputs("255\n", fp);
 1660              		.loc 1 423 5 view .LVU422
 1661 077c 0420A0E3 		mov	r2, #4	@,
 1662 0780 0730A0E1 		mov	r3, r7	@, fp
 1663 0784 0110A0E3 		mov	r1, #1	@,
 1664 0788 90009FE5 		ldr	r0, .L109+16	@,
 1665 078c FEFFFFEB 		bl	fwrite		@
 1666              	.LVL107:
 424:armwave.c     **** 
 425:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1667              		.loc 1 425 5 view .LVU423
 1668              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1669              		.loc 1 425 37 is_stmt 0 view .LVU424
 1670 0790 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1671              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1672              		.loc 1 425 5 view .LVU425
 1673 0794 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1674 0798 180000DA 		ble	.L102		@,
 1675 079c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1676              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 429:armwave.c     **** 
 430:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1677              		.loc 1 430 13 view .LVU426
 1678 07a0 7C909FE5 		ldr	r9, .L109+20	@ tmp152,
 1679              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1680              		.loc 1 425 12 view .LVU427
 1681 07a4 0050A0E3 		mov	r5, #0	@ yy,
 1682              	.LVL108:
 1683              	.L103:
 1684              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1685              		.loc 1 426 9 view .LVU428
 1686 07a8 000053E3 		cmp	r3, #0	@ _13,
 1687              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1688              		.loc 1 426 16 view .LVU429
 1689 07ac 0040A0C3 		movgt	r4, #0	@ xx,
 1690              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1691              		.loc 1 426 9 view .LVU430
 1692 07b0 0F0000DA 		ble	.L105		@,
 1693              	.LVL109:
 1694              	.L104:
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1695              		.loc 1 427 13 is_stmt 1 discriminator 3 view .LVU431
 1696              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1697              		.loc 1 427 29 is_stmt 0 discriminator 3 view .LVU432
 1698 07b4 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1699              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1700              		.loc 1 430 13 discriminator 3 view .LVU433
 1701 07b8 0910A0E1 		mov	r1, r9	@, tmp152
 1702 07bc 0700A0E1 		mov	r0, r7	@, fp
 1703              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1704              		.loc 1 427 18 discriminator 3 view .LVU434
 1705 07c0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1706              	.LVL110:
 1707              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU435
 1708              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1709              		.loc 1 426 58 is_stmt 0 discriminator 3 view .LVU436
 1710 07c4 014084E2 		add	r4, r4, #1	@ xx, xx,
 1711              	.LVL111:
 1712              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1713              		.loc 1 430 81 discriminator 3 view .LVU437
 1714 07c8 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1715              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1716              		.loc 1 430 61 discriminator 3 view .LVU438
 1717 07cc 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1718              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1719              		.loc 1 430 13 discriminator 3 view .LVU439
 1720 07d0 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1721 07d4 7330EFE6 		uxtb	r3, r3	@, tmp142
 1722 07d8 00C08DE5 		str	ip, [sp]	@ tmp147,
 1723 07dc 7220EFE6 		uxtb	r2, r2	@, data
 1724              	.LVL112:
 1725              		.loc 1 430 13 discriminator 3 view .LVU440
 1726 07e0 FEFFFFEB 		bl	fprintf		@
 1727              	.LVL113:
 1728              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1729              		.loc 1 426 41 discriminator 3 view .LVU441
 1730 07e4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1731              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1732              		.loc 1 426 9 discriminator 3 view .LVU442
 1733 07e8 040053E1 		cmp	r3, r4	@ _13, xx
 1734 07ec F0FFFFCA 		bgt	.L104		@,
 1735 07f0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1736              	.LVL114:
 1737              	.L105:
 1738              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1739              		.loc 1 425 55 discriminator 2 view .LVU443
 1740 07f4 015085E2 		add	r5, r5, #1	@ yy, yy,
 1741              	.LVL115:
 1742              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1743              		.loc 1 425 5 discriminator 2 view .LVU444
 1744 07f8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1745 07fc E9FFFFBA 		blt	.L103		@,
 1746              	.LVL116:
 1747              	.L102:
 431:armwave.c     ****         }
 432:armwave.c     ****     }
 433:armwave.c     **** 
 434:armwave.c     ****     fclose(fp);
 1748              		.loc 1 434 5 is_stmt 1 view .LVU445
 1749 0800 0700A0E1 		mov	r0, r7	@, fp
 1750              	@ armwave.c:435: }
 435:armwave.c     **** }
 1751              		.loc 1 435 1 is_stmt 0 view .LVU446
 1752 0804 0CD08DE2 		add	sp, sp, #12	@,,
 1753              		.cfi_def_cfa_offset 28
 1754              		@ sp needed	@
 1755 0808 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1756              		.cfi_restore 14
 1757              		.cfi_restore 9
 1758              		.cfi_restore 8
 1759              		.cfi_restore 7
 1760              		.cfi_restore 6
 1761              		.cfi_restore 5
 1762              		.cfi_restore 4
 1763              		.cfi_def_cfa_offset 0
 1764              	.LVL117:
 1765              	@ armwave.c:434:     fclose(fp);
 434:armwave.c     **** }
 1766              		.loc 1 434 5 view .LVU447
 1767 080c FEFFFFEA 		b	fclose		@
 1768              	.LVL118:
 1769              	.L110:
 434:armwave.c     **** }
 1770              		.loc 1 434 5 view .LVU448
 1771              		.align	2
 1772              	.L109:
 1773 0810 D0010000 		.word	.LC14
 1774 0814 00000000 		.word	g_armwave_state
 1775 0818 D4010000 		.word	.LC15
 1776 081c D8010000 		.word	.LC16
 1777 0820 E0010000 		.word	.LC17
 1778 0824 E8010000 		.word	.LC18
 1779              		.cfi_endproc
 1780              	.LFE68:
 1782              		.align	2
 1783              		.global	armwave_test_init
 1784              		.syntax unified
 1785              		.arm
 1786              		.fpu vfp
 1788              	armwave_test_init:
 1789              	.LVL119:
 1790              	.LFB69:
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Initialise some test functionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 441:armwave.c     **** {
 1791              		.loc 1 441 1 is_stmt 1 view -0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 442:armwave.c     ****     test_create_gamma();
 1795              		.loc 1 442 5 view .LVU450
 1796              	.LBB12:
 1797              	.LBI12:
  34:armwave.c     **** {
 1798              		.loc 1 34 6 view .LVU451
  34:armwave.c     **** {
 1799              		.loc 1 34 6 is_stmt 0 view .LVU452
 1800              	.LBE12:
 1801              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 1802              		.loc 1 441 1 view .LVU453
 1803 0828 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1804              		.cfi_def_cfa_offset 32
 1805              		.cfi_offset 4, -32
 1806              		.cfi_offset 5, -28
 1807              		.cfi_offset 6, -24
 1808              		.cfi_offset 7, -20
 1809              		.cfi_offset 8, -16
 1810              		.cfi_offset 9, -12
 1811              		.cfi_offset 10, -8
 1812              		.cfi_offset 14, -4
 1813 082c 068B2DED 		vpush.64	{d8, d9, d10}	@
 1814              		.cfi_def_cfa_offset 56
 1815              		.cfi_offset 80, -56
 1816              		.cfi_offset 81, -52
 1817              		.cfi_offset 82, -48
 1818              		.cfi_offset 83, -44
 1819              		.cfi_offset 84, -40
 1820              		.cfi_offset 85, -36
 1821 0830 BC409FE5 		ldr	r4, .L115+20	@ ivtmp.79,
 1822              	.LBB15:
 1823              	.LBB13:
 1824              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1825              		.loc 1 40 32 view .LVU454
 1826 0834 2DAA9FED 		vldr.32	s20, .L115+16	@ tmp136,
 1827              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1828              		.loc 1 40 26 view .LVU455
 1829 0838 289B9FED 		vldr.64	d9, .L115	@ tmp151,
 1830              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1831              		.loc 1 40 49 view .LVU456
 1832 083c 298B9FED 		vldr.64	d8, .L115+8	@ tmp139,
 1833 0840 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1834              	.LBE13:
 1835              	.LBE15:
 1836              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 1837              		.loc 1 441 1 view .LVU457
 1838 0844 10D04DE2 		sub	sp, sp, #16	@,,
 1839              		.cfi_def_cfa_offset 72
 1840              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 1841              		.loc 1 441 1 view .LVU458
 1842 0848 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1843 084c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1844 0850 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1845 0854 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1846 0858 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1847 085c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1848              	.LVL120:
 1849              	.L112:
 1850              	.LBB16:
 1851              	.LBB14:
  40:armwave.c     ****     }
 1852              		.loc 1 40 9 is_stmt 1 view .LVU459
 1853              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1854              		.loc 1 40 32 is_stmt 0 view .LVU460
 1855 0860 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1856              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1857              		.loc 1 40 26 view .LVU461
 1858 0864 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1859              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1860              		.loc 1 40 32 view .LVU462
 1861 0868 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1862 086c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1863 0870 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1864              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1865              		.loc 1 40 26 view .LVU463
 1866 0874 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1867 0878 FEFFFFEB 		bl	pow		@
 1868              	.LVL121:
 1869              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1870              		.loc 1 40 49 view .LVU464
 1871 087c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1872              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1873              		.loc 1 40 24 view .LVU465
 1874 0880 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1875 0884 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1876 0888 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1877              	.LVL122:
 1878              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1879              		.loc 1 39 5 view .LVU466
 1880 088c 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1881 0890 F2FFFF1A 		bne	.L112		@,
 1882              	.LVL123:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1883              		.loc 1 39 5 view .LVU467
 1884              	.LBE14:
 1885              	.LBE16:
 443:armwave.c     **** 
 444:armwave.c     ****     // make ch1 yellowish by default
 445:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1886              		.loc 1 445 5 is_stmt 1 view .LVU468
 1887              	.LBB17:
 1888              	.LBI17:
 398:armwave.c     **** {
 1889              		.loc 1 398 6 view .LVU469
 1890              	.LBB18:
 401:armwave.c     ****         case 1:
 1891              		.loc 1 401 5 view .LVU470
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1892              		.loc 1 403 13 view .LVU471
 404:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1893              		.loc 1 404 13 view .LVU472
 1894              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1895              		.loc 1 403 41 is_stmt 0 view .LVU473
 1896 0894 5CC09FE5 		ldr	ip, .L115+24	@ tmp142,
 1897 0898 5C409FE5 		ldr	r4, .L115+28	@ tmp143,
 1898              	.LBE18:
 1899              	.LBE17:
 1900              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 446:armwave.c     **** 
 447:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1901              		.loc 1 447 5 view .LVU474
 1902 089c 0000A0E3 		mov	r0, #0	@ tmp147,
 1903              	.LBB22:
 1904              	.LBB19:
 1905              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 1906              		.loc 1 405 41 view .LVU475
 1907 08a0 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1908              	.LBE19:
 1909              	.LBE22:
 1910              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1911              		.loc 1 447 5 view .LVU476
 1912 08a4 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1913 08a8 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1914 08ac 00808DE5 		str	r8, [sp]	@ render_width,
 1915 08b0 0610A0E1 		mov	r1, r6	@, tmp3
 1916 08b4 0720A0E1 		mov	r2, r7	@, nwaves
 1917              	.LBB23:
 1918              	.LBB20:
 1919              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1920              		.loc 1 403 41 view .LVU477
 1921 08b8 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 405:armwave.c     ****             break;
 1922              		.loc 1 405 13 is_stmt 1 view .LVU478
 1923              	.LBE20:
 1924              	.LBE23:
 1925              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1926              		.loc 1 447 5 is_stmt 0 view .LVU479
 1927 08bc 0630A0E1 		mov	r3, r6	@, wave_size
 1928              	.LBB24:
 1929              	.LBB21:
 1930              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 1931              		.loc 1 405 41 view .LVU480
 1932 08c0 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 406:armwave.c     ****     }
 1933              		.loc 1 406 13 is_stmt 1 view .LVU481
 1934              	.LVL124:
 406:armwave.c     ****     }
 1935              		.loc 1 406 13 is_stmt 0 view .LVU482
 1936              	.LBE21:
 1937              	.LBE24:
 1938              		.loc 1 447 5 is_stmt 1 view .LVU483
 1939 08c4 FEFFFFEB 		bl	armwave_setup_render		@
 1940              	.LVL125:
 448:armwave.c     **** 
 449:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1941              		.loc 1 449 5 view .LVU484
 1942 08c8 30109FE5 		ldr	r1, .L115+32	@,
 1943 08cc 30009FE5 		ldr	r0, .L115+36	@,
 1944              	@ armwave.c:450: }
 450:armwave.c     **** }
 1945              		.loc 1 450 1 is_stmt 0 view .LVU485
 1946 08d0 10D08DE2 		add	sp, sp, #16	@,,
 1947              		.cfi_def_cfa_offset 56
 1948              		@ sp needed	@
 1949 08d4 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1950              		.cfi_restore 84
 1951              		.cfi_restore 85
 1952              		.cfi_restore 82
 1953              		.cfi_restore 83
 1954              		.cfi_restore 80
 1955              		.cfi_restore 81
 1956              		.cfi_def_cfa_offset 32
 1957 08d8 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1958              		.cfi_restore 14
 1959              		.cfi_restore 10
 1960              		.cfi_restore 9
 1961              		.cfi_restore 8
 1962              		.cfi_restore 7
 1963              		.cfi_restore 6
 1964              		.cfi_restore 5
 1965              		.cfi_restore 4
 1966              		.cfi_def_cfa_offset 0
 1967              	.LVL126:
 1968              	@ armwave.c:449:     printf("armwave version: %s\n", ARMWAVE_VER);
 449:armwave.c     **** }
 1969              		.loc 1 449 5 view .LVU486
 1970 08dc FEFFFFEA 		b	printf		@
 1971              	.LVL127:
 1972              	.L116:
 1973              		.align	3
 1974              	.L115:
 1975 08e0 000000C0 		.word	-1073741824
 1976 08e4 CCCCEC3F 		.word	1072483532
 1977 08e8 00000000 		.word	0
 1978 08ec 00E06F40 		.word	1081073664
 1979 08f0 00007F43 		.word	1132396544
 1980 08f4 FFFFFFFF 		.word	gamma_table-1
 1981 08f8 00000000 		.word	g_armwave_state
 1982 08fc F609F406 		.word	116656630
 1983 0900 00000000 		.word	.LC0
 1984 0904 08000000 		.word	.LC1
 1985              		.cfi_endproc
 1986              	.LFE69:
 1988              		.align	2
 1989              		.global	armwave_test_fill_outbuf
 1990              		.syntax unified
 1991              		.arm
 1992              		.fpu vfp
 1994              	armwave_test_fill_outbuf:
 1995              	.LFB70:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Render image to the local allocated buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_fill_outbuf()
 456:armwave.c     **** {
 1996              		.loc 1 456 1 is_stmt 1 view -0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 2000              		@ link register save eliminated.
 457:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2001              		.loc 1 457 5 view .LVU488
 2002 0908 04309FE5 		ldr	r3, .L118	@ tmp111,
 2003 090c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2004 0910 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2005              	.LVL128:
 2006              	.L119:
 2007              		.align	2
 2008              	.L118:
 2009 0914 00000000 		.word	g_armwave_state
 2010              		.cfi_endproc
 2011              	.LFE70:
 2013              		.align	2
 2014              		.global	armwave_test_dump_buffer_to_ppm
 2015              		.syntax unified
 2016              		.arm
 2017              		.fpu vfp
 2019              	armwave_test_dump_buffer_to_ppm:
 2020              	.LVL129:
 2021              	.LFB71:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 464:armwave.c     **** {
 2022              		.loc 1 464 1 view -0
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 0
 2025              		@ frame_needed = 0, uses_anonymous_args = 0
 2026              		@ link register save eliminated.
 465:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2027              		.loc 1 465 5 view .LVU490
 2028 0918 08309FE5 		ldr	r3, .L121	@ tmp112,
 2029 091c 0010A0E1 		mov	r1, r0	@, fn
 2030 0920 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2031              	.LVL130:
 2032              		.loc 1 465 5 is_stmt 0 view .LVU491
 2033 0924 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2034              	.LVL131:
 2035              	.L122:
 2036              		.loc 1 465 5 view .LVU492
 2037              		.align	2
 2038              	.L121:
 2039 0928 00000000 		.word	g_armwave_state
 2040              		.cfi_endproc
 2041              	.LFE71:
 2043              		.align	2
 2044              		.global	armwave_test_fill_gdkbuf
 2045              		.syntax unified
 2046              		.arm
 2047              		.fpu vfp
 2049              	armwave_test_fill_gdkbuf:
 2050              	.LVL132:
 2051              	.LFB72:
 466:armwave.c     **** }
 467:armwave.c     **** 
 468:armwave.c     **** /*
 469:armwave.c     ****  * Render GDK buffer with test funtionry.
 470:armwave.c     ****  */
 471:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 472:armwave.c     **** {
 2052              		.loc 1 472 1 is_stmt 1 view -0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056              		@ link register save eliminated.
 473:armwave.c     ****     //PyObject *mv;
 474:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 475:armwave.c     **** 
 476:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 477:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2057              		.loc 1 477 5 view .LVU494
 478:armwave.c     ****     
 479:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2058              		.loc 1 480 5 view .LVU495
 2059              	@ armwave.c:477:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 477:armwave.c     ****     
 2060              		.loc 1 477 11 is_stmt 0 view .LVU496
 2061 092c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2062              	@ armwave.c:480:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2063              		.loc 1 480 5 view .LVU497
 2064 0930 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2065              	.LVL133:
 2066              		.loc 1 480 5 view .LVU498
 2067 0934 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2068              	.LVL134:
 2069              		.loc 1 480 5 view .LVU499
 2070              		.cfi_endproc
 2071              	.LFE72:
 2073              		.align	2
 2074              		.global	armwave_test_buffer_alloc
 2075              		.syntax unified
 2076              		.arm
 2077              		.fpu vfp
 2079              	armwave_test_buffer_alloc:
 2080              	.LVL135:
 2081              	.LFB73:
 481:armwave.c     **** }
 482:armwave.c     **** 
 483:armwave.c     **** /*
 484:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 485:armwave.c     ****  */
 486:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 487:armwave.c     **** {
 2082              		.loc 1 487 1 is_stmt 1 view -0
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 0
 2085              		@ frame_needed = 0, uses_anonymous_args = 0
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2086              		.loc 1 488 5 view .LVU501
 2087              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2088              		.loc 1 487 1 is_stmt 0 view .LVU502
 2089 0938 70402DE9 		push	{r4, r5, r6, lr}	@
 2090              		.cfi_def_cfa_offset 16
 2091              		.cfi_offset 4, -16
 2092              		.cfi_offset 5, -12
 2093              		.cfi_offset 6, -8
 2094              		.cfi_offset 14, -4
 2095              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2096              		.loc 1 487 1 view .LVU503
 2097 093c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2098              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2099              		.loc 1 488 23 view .LVU504
 2100 0940 44409FE5 		ldr	r4, .L131	@ tmp128,
 2101 0944 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2102              	.LVL136:
 2103              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2104              		.loc 1 488 7 view .LVU505
 2105 0948 000050E3 		cmp	r0, #0	@ _1,
 2106 094c 0000000A 		beq	.L125		@,
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2107              		.loc 1 489 9 is_stmt 1 view .LVU506
 2108 0950 FEFFFFEB 		bl	free		@
 2109              	.LVL137:
 2110              	.L125:
 490:armwave.c     ****     }
 491:armwave.c     **** 
 492:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 493:armwave.c     **** 
 494:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2111              		.loc 1 494 5 view .LVU507
 2112              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2113              		.loc 1 494 75 is_stmt 0 view .LVU508
 2114 0954 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2115 0958 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2116              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2117              		.loc 1 494 40 view .LVU509
 2118 095c 0610A0E1 		mov	r1, r6	@, nsets
 2119              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2120              		.loc 1 494 75 view .LVU510
 2121 0960 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2122              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2123              		.loc 1 494 40 view .LVU511
 2124 0964 0500A0E1 		mov	r0, r5	@, _4
 2125 0968 FEFFFFEB 		bl	calloc		@
 2126              	.LVL138:
 2127              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 495:armwave.c     **** 
 496:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2128              		.loc 1 496 7 view .LVU512
 2129 096c 000050E3 		cmp	r0, #0	@ tmp124,
 2130              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2131              		.loc 1 494 38 view .LVU513
 2132 0970 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2133              		.loc 1 496 5 is_stmt 1 view .LVU514
 2134              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 2135              		.loc 1 496 7 is_stmt 0 view .LVU515
 2136 0974 7080BD18 		popne	{r4, r5, r6, pc}	@
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2137              		.loc 1 497 9 is_stmt 1 view .LVU516
 2138 0978 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2139 097c 0620A0E1 		mov	r2, r6	@, nsets
 2140 0980 08009FE5 		ldr	r0, .L131+4	@,
 2141              	@ armwave.c:501: }
 498:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 499:armwave.c     ****         return;
 500:armwave.c     ****     }
 501:armwave.c     **** }
 2142              		.loc 1 501 1 is_stmt 0 view .LVU517
 2143 0984 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2144              		.cfi_restore 14
 2145              		.cfi_restore 6
 2146              		.cfi_restore 5
 2147              		.cfi_restore 4
 2148              		.cfi_def_cfa_offset 0
 2149              	.LVL139:
 2150              	@ armwave.c:497:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2151              		.loc 1 497 9 view .LVU518
 2152 0988 FEFFFFEA 		b	printf		@
 2153              	.LVL140:
 2154              	.L132:
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2155              		.loc 1 497 9 view .LVU519
 2156              		.align	2
 2157              	.L131:
 2158 098c 00000000 		.word	g_armwave_state
 2159 0990 F8010000 		.word	.LC19
 2160              		.cfi_endproc
 2161              	.LFE73:
 2163              		.align	2
 2164              		.global	armwave_fill_pixbuf_into_pybuffer
 2165              		.syntax unified
 2166              		.arm
 2167              		.fpu vfp
 2169              	armwave_fill_pixbuf_into_pybuffer:
 2170              	.LVL141:
 2171              	.LFB74:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 505:armwave.c     ****  */
 506:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 507:armwave.c     **** {
 2172              		.loc 1 507 1 is_stmt 1 view -0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 48
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
 508:armwave.c     ****     Py_buffer buffer;
 2176              		.loc 1 508 5 view .LVU521
 509:armwave.c     ****     int ret;
 2177              		.loc 1 509 5 view .LVU522
 510:armwave.c     **** 
 511:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 512:armwave.c     **** 
 513:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2178              		.loc 1 513 5 view .LVU523
 2179              	@ armwave.c:507: {
 507:armwave.c     ****     Py_buffer buffer;
 2180              		.loc 1 507 1 is_stmt 0 view .LVU524
 2181 0994 04E02DE5 		str	lr, [sp, #-4]!	@,
 2182              		.cfi_def_cfa_offset 4
 2183              		.cfi_offset 14, -4
 2184 0998 34D04DE2 		sub	sp, sp, #52	@,,
 2185              		.cfi_def_cfa_offset 56
 2186              	@ armwave.c:513:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2187              		.loc 1 513 11 view .LVU525
 2188 099c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2189 09a0 0120A0E3 		mov	r2, #1	@,
 2190 09a4 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2191              	.LVL142:
 514:armwave.c     **** 
 515:armwave.c     ****     if(ret != 0) {
 2192              		.loc 1 515 5 is_stmt 1 view .LVU526
 2193              	@ armwave.c:515:     if(ret != 0) {
 2194              		.loc 1 515 7 is_stmt 0 view .LVU527
 2195 09a8 000050E3 		cmp	r0, #0	@,
 2196 09ac 0A00001A 		bne	.L137		@,
 516:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 517:armwave.c     ****         Py_RETURN_FALSE;
 518:armwave.c     ****     }
 519:armwave.c     **** 
 520:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 521:armwave.c     **** 
 522:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2197              		.loc 1 522 5 is_stmt 1 view .LVU528
 2198 09b0 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2199              	.LVL143:
 2200              		.loc 1 522 5 is_stmt 0 view .LVU529
 2201 09b4 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2202              	.LVL144:
 523:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 524:armwave.c     **** 
 525:armwave.c     ****     PyBuffer_Release(&buffer);
 2203              		.loc 1 525 5 is_stmt 1 view .LVU530
 2204 09b8 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2205 09bc FEFFFFEB 		bl	PyBuffer_Release		@
 2206              	.LVL145:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     Py_RETURN_TRUE;
 2207              		.loc 1 528 5 view .LVU531
 2208              	.LBB25:
 2209              	.LBI25:
 2210              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2211              		.loc 2 456 20 view .LVU532
 2212              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2213              		.loc 2 458 21 view .LVU533
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2214              		.loc 2 459 5 view .LVU534
 2215              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2216              		.loc 2 459 18 is_stmt 0 view .LVU535
 2217 09c0 38309FE5 		ldr	r3, .L138	@ tmp126,
 2218              	.LBE26:
 2219              	.LBE25:
 2220              	@ armwave.c:528:     Py_RETURN_TRUE;
 2221              		.loc 1 528 5 view .LVU536
 2222 09c4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2223              	.LBB28:
 2224              	.LBB27:
 2225              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2226              		.loc 2 459 18 view .LVU537
 2227 09c8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2228 09cc 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2229 09d0 002083E5 		str	r2, [r3]	@ tmp128,
 2230              	.LBE27:
 2231              	.LBE28:
 2232              	@ armwave.c:529: }
 529:armwave.c     **** }
 2233              		.loc 1 529 1 view .LVU538
 2234 09d4 34D08DE2 		add	sp, sp, #52	@,,
 2235              		.cfi_remember_state
 2236              		.cfi_def_cfa_offset 4
 2237              		@ sp needed	@
 2238 09d8 04F09DE4 		ldr	pc, [sp], #4	@
 2239              	.LVL146:
 2240              	.L137:
 2241              		.cfi_restore_state
 516:armwave.c     ****         Py_RETURN_FALSE;
 2242              		.loc 1 516 9 is_stmt 1 view .LVU539
 2243 09dc 20009FE5 		ldr	r0, .L138+4	@,
 2244              	.LVL147:
 516:armwave.c     ****         Py_RETURN_FALSE;
 2245              		.loc 1 516 9 is_stmt 0 view .LVU540
 2246 09e0 FEFFFFEB 		bl	puts		@
 2247              	.LVL148:
 517:armwave.c     ****     }
 2248              		.loc 1 517 9 is_stmt 1 view .LVU541
 2249              	.LBB29:
 2250              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2251              		.loc 2 456 20 view .LVU542
 2252              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2253              		.loc 2 458 21 view .LVU543
 2254              		.loc 2 459 5 view .LVU544
 2255              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2256              		.loc 2 459 18 is_stmt 0 view .LVU545
 2257 09e4 1C309FE5 		ldr	r3, .L138+8	@ tmp120,
 2258              	.LBE30:
 2259              	.LBE29:
 2260              	@ armwave.c:517:         Py_RETURN_FALSE;
 517:armwave.c     ****     }
 2261              		.loc 1 517 9 view .LVU546
 2262 09e8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2263              	.LBB32:
 2264              	.LBB31:
 2265              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2266              		.loc 2 459 18 view .LVU547
 2267 09ec 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2268 09f0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2269 09f4 002083E5 		str	r2, [r3]	@ tmp122,
 2270              	.LBE31:
 2271              	.LBE32:
 2272              	@ armwave.c:529: }
 2273              		.loc 1 529 1 view .LVU548
 2274 09f8 34D08DE2 		add	sp, sp, #52	@,,
 2275              		.cfi_def_cfa_offset 4
 2276              		@ sp needed	@
 2277 09fc 04F09DE4 		ldr	pc, [sp], #4	@
 2278              	.L139:
 2279              		.align	2
 2280              	.L138:
 2281 0a00 00000000 		.word	_Py_TrueStruct
 2282 0a04 4C020000 		.word	.LC20
 2283 0a08 00000000 		.word	_Py_FalseStruct
 2284              		.cfi_endproc
 2285              	.LFE74:
 2287              		.align	2
 2288              		.global	armwave_test_create_am_sine
 2289              		.syntax unified
 2290              		.arm
 2291              		.fpu vfp
 2293              	armwave_test_create_am_sine:
 2294              	.LVL149:
 2295              	.LFB75:
 530:armwave.c     **** 
 531:armwave.c     **** /*
 532:armwave.c     ****  * Make a test AM waveform for render tests.
 533:armwave.c     ****  *
 534:armwave.c     ****  * @param   mod                     modulation depth
 535:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 536:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 537:armwave.c     ****  */
 538:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 539:armwave.c     **** {
 2296              		.loc 1 539 1 is_stmt 1 view -0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 8
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2300              		.loc 1 540 5 view .LVU550
 541:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2301              		.loc 1 541 5 view .LVU551
 2302              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2303              		.loc 1 539 1 is_stmt 0 view .LVU552
 2304 0a0c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2305              		.cfi_def_cfa_offset 32
 2306              		.cfi_offset 4, -32
 2307              		.cfi_offset 5, -28
 2308              		.cfi_offset 6, -24
 2309              		.cfi_offset 7, -20
 2310              		.cfi_offset 8, -16
 2311              		.cfi_offset 9, -12
 2312              		.cfi_offset 10, -8
 2313              		.cfi_offset 14, -4
 2314              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2315              		.loc 1 541 38 view .LVU553
 2316 0a10 7A7A9FED 		vldr.32	s14, .L171	@ tmp180,
 2317              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2318              		.loc 1 541 55 view .LVU554
 2319 0a14 00529FE5 		ldr	r5, .L171+28	@ tmp250,
 2320              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2321              		.loc 1 539 1 view .LVU555
 2322 0a18 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2323              		.cfi_def_cfa_offset 80
 2324              		.cfi_offset 80, -80
 2325              		.cfi_offset 81, -76
 2326              		.cfi_offset 82, -72
 2327              		.cfi_offset 83, -68
 2328              		.cfi_offset 84, -64
 2329              		.cfi_offset 85, -60
 2330              		.cfi_offset 86, -56
 2331              		.cfi_offset 87, -52
 2332              		.cfi_offset 88, -48
 2333              		.cfi_offset 89, -44
 2334              		.cfi_offset 90, -40
 2335              		.cfi_offset 91, -36
 2336 0a1c 0090A0E1 		mov	r9, r0	@ sets, sets
 2337              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2338              		.loc 1 541 38 view .LVU556
 2339 0a20 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2340              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 542:armwave.c     ****     int s, set_offset = 0;
 543:armwave.c     ****     int w, x;
 544:armwave.c     **** 
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2341              		.loc 1 545 70 view .LVU557
 2342 0a24 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2343 0a28 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2344              	.LBB35:
 2345              	.LBB36:
 2346              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2347              		.loc 1 488 23 view .LVU558
 2348 0a2c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2349              	.LVL150:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2350              		.loc 1 488 23 view .LVU559
 2351              	.LBE36:
 2352              	.LBE35:
 2353              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2354              		.loc 1 541 38 view .LVU560
 2355 0a30 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2356              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2357              		.loc 1 545 70 view .LVU561
 2358 0a34 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2359              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2360              		.loc 1 539 1 view .LVU562
 2361 0a38 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2362              	.LBB40:
 2363              	.LBB37:
 2364              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2365              		.loc 1 488 7 view .LVU563
 2366 0a3c 000050E3 		cmp	r0, #0	@ _82,
 2367              	.LBE37:
 2368              	.LBE40:
 2369              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2370              		.loc 1 539 1 view .LVU564
 2371 0a40 08D04DE2 		sub	sp, sp, #8	@,,
 2372              		.cfi_def_cfa_offset 88
 2373              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_nsets = sets;
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2374              		.loc 1 546 44 view .LVU565
 2375 0a44 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2376              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2377              		.loc 1 545 45 view .LVU566
 2378 0a48 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2379              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2380              		.loc 1 541 38 view .LVU567
 2381 0a4c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2382              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2383              		.loc 1 541 11 view .LVU568
 2384 0a50 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2385              	.LVL151:
 542:armwave.c     ****     int w, x;
 2386              		.loc 1 542 5 is_stmt 1 view .LVU569
 543:armwave.c     **** 
 2387              		.loc 1 543 5 view .LVU570
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2388              		.loc 1 545 5 view .LVU571
 2389              		.loc 1 546 5 view .LVU572
 547:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2390              		.loc 1 547 5 view .LVU573
 2391              	.LBB41:
 2392              	.LBI35:
 486:armwave.c     **** {
 2393              		.loc 1 486 6 view .LVU574
 2394              	.LBB38:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2395              		.loc 1 488 5 view .LVU575
 2396              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2397              		.loc 1 488 7 is_stmt 0 view .LVU576
 2398 0a54 0000000A 		beq	.L141		@,
 489:armwave.c     ****     }
 2399              		.loc 1 489 9 is_stmt 1 view .LVU577
 2400 0a58 FEFFFFEB 		bl	free		@
 2401              	.LVL152:
 2402              	.L141:
 494:armwave.c     **** 
 2403              		.loc 1 494 5 view .LVU578
 2404              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2405              		.loc 1 494 75 is_stmt 0 view .LVU579
 2406 0a5c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2407 0a60 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2408              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2409              		.loc 1 494 40 view .LVU580
 2410 0a64 0910A0E1 		mov	r1, r9	@, sets
 2411              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2412              		.loc 1 494 75 view .LVU581
 2413 0a68 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2414              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2415              		.loc 1 494 40 view .LVU582
 2416 0a6c 0400A0E1 		mov	r0, r4	@, _85
 2417 0a70 FEFFFFEB 		bl	calloc		@
 2418              	.LVL153:
 2419              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2420              		.loc 1 496 7 view .LVU583
 2421 0a74 000050E3 		cmp	r0, #0	@ tmp191,
 2422              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2423              		.loc 1 494 38 view .LVU584
 2424 0a78 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2425              		.loc 1 496 5 is_stmt 1 view .LVU585
 2426              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2427              		.loc 1 496 7 is_stmt 0 view .LVU586
 2428 0a7c 5A00000A 		beq	.L170		@,
 2429              	.L142:
 2430              	.LVL154:
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2431              		.loc 1 496 7 view .LVU587
 2432              	.LBE38:
 2433              	.LBE41:
 2434              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 548:armwave.c     **** 
 549:armwave.c     ****     for(s = 0; s < sets; s++) {
 2435              		.loc 1 549 5 discriminator 1 view .LVU588
 2436 0a80 000059E3 		cmp	r9, #0	@ sets,
 2437 0a84 550000DA 		ble	.L140		@,
 2438              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 551:armwave.c     ****     
 552:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 554:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 556:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     **** 
 562:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 noise += 1.0f;
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 568:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2439              		.loc 1 568 45 view .LVU589
 2440 0a88 5C8A9FED 		vldr.32	s16, .L171	@ tmp258,
 2441              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 570:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 571:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2442              		.loc 1 571 104 view .LVU590
 2443 0a8c 5CCA9FED 		vldr.32	s24, .L171+4	@ tmp259,
 2444              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2445              		.loc 1 549 5 view .LVU591
 2446 0a90 0070A0E3 		mov	r7, #0	@ set_offset,
 2447              	@ armwave.c:550:         printf("Calculating test set %d\n", s);
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2448              		.loc 1 550 9 view .LVU592
 2449 0a94 84A19FE5 		ldr	r10, .L171+32	@ tmp257,
 2450              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2451              		.loc 1 549 5 view .LVU593
 2452 0a98 0780A0E1 		mov	r8, r7	@ s, set_offset
 2453              	.LVL155:
 2454              	.L143:
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2455              		.loc 1 550 9 is_stmt 1 view .LVU594
 2456 0a9c 0810A0E1 		mov	r1, r8	@, s
 2457 0aa0 0A00A0E1 		mov	r0, r10	@, tmp257
 2458 0aa4 FEFFFFEB 		bl	printf		@
 2459              	.LVL156:
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2460              		.loc 1 552 9 view .LVU595
 2461              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2462              		.loc 1 552 39 is_stmt 0 view .LVU596
 2463 0aa8 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2464              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2465              		.loc 1 552 9 view .LVU597
 2466 0aac 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2467 0ab0 450000DA 		ble	.L144		@,
 2468              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2469              		.loc 1 554 21 view .LVU598
 2470 0ab4 53CADFED 		vldr.32	s25, .L171+8	@ tmp200,
 2471              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2472              		.loc 1 568 33 view .LVU599
 2473 0ab8 53BA9FED 		vldr.32	s22, .L171+12	@ tmp253,
 2474              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2475              		.loc 1 566 24 view .LVU600
 2476 0abc 53AADFED 		vldr.32	s21, .L171+16	@ tmp254,
 2477 0ac0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2478              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2479              		.loc 1 552 15 view .LVU601
 2480 0ac4 0060A0E3 		mov	r6, #0	@ w,
 2481              	.LVL157:
 2482              	.L151:
 554:armwave.c     **** 
 2483              		.loc 1 554 13 is_stmt 1 view .LVU602
 2484              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2485              		.loc 1 554 21 is_stmt 0 view .LVU603
 2486 0ac8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2487 0acc 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2488              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2489              		.loc 1 556 13 view .LVU604
 2490 0ad0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2491              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2492              		.loc 1 554 21 view .LVU605
 2493 0ad4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2494 0ad8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2495              	.LVL158:
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2496              		.loc 1 556 13 is_stmt 1 view .LVU606
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2497              		.loc 1 556 13 is_stmt 0 view .LVU607
 2498 0adc 370000DA 		ble	.L145		@,
 2499 0ae0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2500              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2501              		.loc 1 571 113 view .LVU608
 2502 0ae4 4AAA9FED 		vldr.32	s20, .L171+20	@ tmp229,
 2503 0ae8 4A8ADFED 		vldr.32	s17, .L171+24	@ tmp230,
 2504              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2505              		.loc 1 556 19 view .LVU609
 2506 0aec 0040A0E3 		mov	r4, #0	@ x,
 2507              	.LVL159:
 2508              	.L150:
 557:armwave.c     ****                 noise *= noise;
 2509              		.loc 1 557 17 is_stmt 1 view .LVU610
 2510              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2511              		.loc 1 557 28 is_stmt 0 view .LVU611
 2512 0af0 FEFFFFEB 		bl	rand		@
 2513              	.LVL160:
 2514              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2515              		.loc 1 557 35 view .LVU612
 2516 0af4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2517              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2518              		.loc 1 557 45 view .LVU613
 2519 0af8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2520 0afc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2521              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2522              		.loc 1 557 24 view .LVU614
 2523 0b00 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2524              	.LVL161:
 558:armwave.c     ****                 noise *= noise;
 2525              		.loc 1 558 17 is_stmt 1 view .LVU615
 2526              	@ armwave.c:558:                 noise *= noise;
 558:armwave.c     ****                 noise *= noise;
 2527              		.loc 1 558 23 is_stmt 0 view .LVU616
 2528 0b04 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2529              	.LVL162:
 559:armwave.c     ****                 noise *= noise;
 2530              		.loc 1 559 17 is_stmt 1 view .LVU617
 2531              	@ armwave.c:559:                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 2532              		.loc 1 559 23 is_stmt 0 view .LVU618
 2533 0b08 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2534              	.LVL163:
 560:armwave.c     **** 
 2535              		.loc 1 560 17 is_stmt 1 view .LVU619
 2536              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     **** 
 2537              		.loc 1 560 23 is_stmt 0 view .LVU620
 2538 0b0c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2539              	.LVL164:
 562:armwave.c     ****                     noise = -noise;
 2540              		.loc 1 562 17 is_stmt 1 view .LVU621
 2541              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2542              		.loc 1 562 21 is_stmt 0 view .LVU622
 2543 0b10 FEFFFFEB 		bl	rand		@
 2544              	.LVL165:
 563:armwave.c     **** 
 2545              		.loc 1 563 21 is_stmt 1 view .LVU623
 2546              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2547              		.loc 1 562 19 is_stmt 0 view .LVU624
 2548 0b14 020910E3 		tst	r0, #32768	@,
 2549              	@ armwave.c:563:                     noise = -noise;
 563:armwave.c     **** 
 2550              		.loc 1 563 27 view .LVU625
 2551 0b18 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2552              	.LVL166:
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2553              		.loc 1 565 17 is_stmt 1 view .LVU626
 566:armwave.c     **** 
 2554              		.loc 1 566 17 view .LVU627
 2555              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2556              		.loc 1 566 27 is_stmt 0 view .LVU628
 2557 0b1c FEFFFFEB 		bl	rand		@
 2558              	.LVL167:
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2559              		.loc 1 568 17 is_stmt 1 view .LVU629
 2560              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2561              		.loc 1 568 45 is_stmt 0 view .LVU630
 2562 0b20 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2563              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2564              		.loc 1 568 33 view .LVU631
 2565 0b24 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2566              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2567              		.loc 1 568 45 view .LVU632
 2568 0b28 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2569              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2570              		.loc 1 568 33 view .LVU633
 2571 0b2c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2572              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2573              		.loc 1 568 45 view .LVU634
 2574 0b30 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2575              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2576              		.loc 1 568 33 view .LVU635
 2577 0b34 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2578              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2579              		.loc 1 566 34 view .LVU636
 2580 0b38 7000FFE6 		uxth	r0, r0	@ tmp214,
 2581              	.LVL168:
 2582              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2583              		.loc 1 566 44 view .LVU637
 2584 0b3c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2585 0b40 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2586              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2587              		.loc 1 566 24 view .LVU638
 2588 0b44 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2589              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2590              		.loc 1 568 77 view .LVU639
 2591 0b48 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2592              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2593              		.loc 1 568 22 view .LVU640
 2594 0b4c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2595 0b50 FEFFFFEB 		bl	sin		@
 2596              	.LVL169:
 2597              		.loc 1 571 17 is_stmt 1 view .LVU641
 2598              	@ armwave.c:565:                 noise += 1.0f;
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2599              		.loc 1 565 23 is_stmt 0 view .LVU642
 2600 0b54 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2601              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2602              		.loc 1 571 104 view .LVU643
 2603 0b58 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2604              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2605              		.loc 1 568 98 view .LVU644
 2606 0b5c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2607              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2608              		.loc 1 568 87 view .LVU645
 2609 0b60 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2610              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2611              		.loc 1 568 98 view .LVU646
 2612 0b64 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2613              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2614              		.loc 1 568 19 view .LVU647
 2615 0b68 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2616              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2617              		.loc 1 571 113 view .LVU648
 2618 0b6c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2619 0b70 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2620 0b74 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2621 0b78 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2622 0b7c 050000DA 		ble	.L147		@,
 2623              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2624              		.loc 1 571 104 discriminator 1 view .LVU649
 2625 0b80 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2626 0b84 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2627 0b88 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2628 0b8c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2629 0b90 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2630 0b94 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2631              	.L147:
 2632              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2633              		.loc 1 571 57 discriminator 12 view .LVU650
 2634 0b98 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2635              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2636              		.loc 1 571 102 discriminator 12 view .LVU651
 2637 0b9c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2638 0ba0 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2639 0ba4 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2640              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2641              		.loc 1 556 58 discriminator 12 view .LVU652
 2642 0ba8 014084E2 		add	r4, r4, #1	@ x, x,
 2643              	.LVL170:
 2644              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2645              		.loc 1 571 102 discriminator 12 view .LVU653
 2646 0bac 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2647              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2648              		.loc 1 556 43 discriminator 12 view .LVU654
 2649 0bb0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2650              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2651              		.loc 1 556 13 discriminator 12 view .LVU655
 2652 0bb4 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2653 0bb8 CCFFFFCA 		bgt	.L150		@,
 2654 0bbc 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2655              	.LVL171:
 2656              	.L145:
 2657              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2658              		.loc 1 552 48 discriminator 2 view .LVU656
 2659 0bc0 016086E2 		add	r6, r6, #1	@ w, w,
 2660              	.LVL172:
 2661              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2662              		.loc 1 552 9 discriminator 2 view .LVU657
 2663 0bc4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2664 0bc8 BEFFFFBA 		blt	.L151		@,
 2665              	.LVL173:
 2666              	.L144:
 572:armwave.c     ****             }
 573:armwave.c     ****         }
 574:armwave.c     **** 
 575:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2667              		.loc 1 575 9 is_stmt 1 discriminator 2 view .LVU658
 2668              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2669              		.loc 1 575 46 is_stmt 0 discriminator 2 view .LVU659
 2670 0bcc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2671              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2672              		.loc 1 549 27 discriminator 2 view .LVU660
 2673 0bd0 018088E2 		add	r8, r8, #1	@ s, s,
 2674              	.LVL174:
 2675              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2676              		.loc 1 549 5 discriminator 2 view .LVU661
 2677 0bd4 080059E1 		cmp	r9, r8	@ sets, s
 2678              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2679              		.loc 1 575 20 discriminator 2 view .LVU662
 2680 0bd8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2681              	.LVL175:
 2682              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2683              		.loc 1 549 5 discriminator 2 view .LVU663
 2684 0bdc AEFFFF1A 		bne	.L143		@,
 2685              	.LVL176:
 2686              	.L140:
 2687              	@ armwave.c:577: }
 576:armwave.c     ****     }
 577:armwave.c     **** }
 2688              		.loc 1 577 1 view .LVU664
 2689 0be0 08D08DE2 		add	sp, sp, #8	@,,
 2690              		.cfi_remember_state
 2691              		.cfi_def_cfa_offset 80
 2692              		@ sp needed	@
 2693 0be4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2694              		.cfi_restore 90
 2695              		.cfi_restore 91
 2696              		.cfi_restore 88
 2697              		.cfi_restore 89
 2698              		.cfi_restore 86
 2699              		.cfi_restore 87
 2700              		.cfi_restore 84
 2701              		.cfi_restore 85
 2702              		.cfi_restore 82
 2703              		.cfi_restore 83
 2704              		.cfi_restore 80
 2705              		.cfi_restore 81
 2706              		.cfi_def_cfa_offset 32
 2707              	.LVL177:
 2708              		.loc 1 577 1 view .LVU665
 2709 0be8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2710              	.LVL178:
 2711              	.L170:
 2712              		.cfi_restore_state
 2713              	.LBB42:
 2714              	.LBB39:
 497:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2715              		.loc 1 497 9 is_stmt 1 view .LVU666
 2716 0bec 940901E0 		mul	r1, r4, r9	@, _85, sets
 2717 0bf0 0920A0E1 		mov	r2, r9	@, sets
 2718 0bf4 28009FE5 		ldr	r0, .L171+36	@,
 2719 0bf8 FEFFFFEB 		bl	printf		@
 2720              	.LVL179:
 499:armwave.c     ****     }
 2721              		.loc 1 499 9 view .LVU667
 2722 0bfc 9FFFFFEA 		b	.L142		@
 2723              	.L172:
 2724              		.align	2
 2725              	.L171:
 2726 0c00 0000803F 		.word	1065353216
 2727 0c04 00007F43 		.word	1132396544
 2728 0c08 0000003F 		.word	1056964608
 2729 0c0c C3F5C840 		.word	1086911939
 2730 0c10 38FFC74A 		.word	1254620984
 2731 0c14 0000FE42 		.word	1123942400
 2732 0c18 00000043 		.word	1124073472
 2733 0c1c 00000000 		.word	g_armwave_state
 2734 0c20 A0020000 		.word	.LC21
 2735 0c24 F8010000 		.word	.LC19
 2736              	.LBE39:
 2737              	.LBE42:
 2738              		.cfi_endproc
 2739              	.LFE75:
 2741              		.align	2
 2742              		.global	armwave_cleanup
 2743              		.syntax unified
 2744              		.arm
 2745              		.fpu vfp
 2747              	armwave_cleanup:
 2748              	.LFB76:
 578:armwave.c     **** 
 579:armwave.c     **** /*
 580:armwave.c     ****  * Make a test square waveform.
 581:armwave.c     ****  *
 582:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 583:armwave.c     ****  */
 584:armwave.c     **** #if 0
 585:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 586:armwave.c     **** {
 587:armwave.c     ****     uint8_t v;
 588:armwave.c     ****     float noise, xnoise;
 589:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 590:armwave.c     ****     int w, x;
 591:armwave.c     **** 
 592:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 593:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 594:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 595:armwave.c     ****             noise *= noise;
 596:armwave.c     ****             noise *= noise;
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     **** 
 599:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 600:armwave.c     ****                 noise = -noise;
 601:armwave.c     **** 
 602:armwave.c     ****             //noise += 1.0f;
 603:armwave.c     **** 
 604:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 605:armwave.c     ****                 new_level = 0.2f;
 606:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 607:armwave.c     ****                 new_level = 0.8f;
 608:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 609:armwave.c     ****                 new_level = 0.2f;
 610:armwave.c     ****             } else {
 611:armwave.c     ****                 new_level = 0.8f;
 612:armwave.c     ****             }
 613:armwave.c     **** 
 614:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 615:armwave.c     **** 
 616:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 617:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 618:armwave.c     ****         }
 619:armwave.c     ****     }
 620:armwave.c     **** }
 621:armwave.c     **** #endif
 622:armwave.c     **** 
 623:armwave.c     **** /*
 624:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 625:armwave.c     ****  */
 626:armwave.c     **** void armwave_cleanup()
 627:armwave.c     **** {
 2749              		.loc 1 627 1 view -0
 2750              		.cfi_startproc
 2751              		@ args = 0, pretend = 0, frame = 0
 2752              		@ frame_needed = 0, uses_anonymous_args = 0
 628:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2753              		.loc 1 628 5 view .LVU669
 2754              	@ armwave.c:627: {
 627:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2755              		.loc 1 627 1 is_stmt 0 view .LVU670
 2756 0c28 10402DE9 		push	{r4, lr}	@
 2757              		.cfi_def_cfa_offset 8
 2758              		.cfi_offset 4, -8
 2759              		.cfi_offset 14, -4
 2760              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 2761              		.loc 1 628 25 view .LVU671
 2762 0c2c 34409FE5 		ldr	r4, .L175	@ tmp114,
 2763              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 2764              		.loc 1 628 5 view .LVU672
 2765 0c30 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2766 0c34 FEFFFFEB 		bl	free		@
 2767              	.LVL180:
 629:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2768              		.loc 1 629 5 is_stmt 1 view .LVU673
 2769 0c38 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2770 0c3c FEFFFFEB 		bl	free		@
 2771              	.LVL181:
 630:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2772              		.loc 1 630 5 view .LVU674
 2773 0c40 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2774 0c44 FEFFFFEB 		bl	free		@
 2775              	.LVL182:
 631:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2776              		.loc 1 631 5 view .LVU675
 2777 0c48 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2778 0c4c FEFFFFEB 		bl	free		@
 2779              	.LVL183:
 632:armwave.c     **** 
 633:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2780              		.loc 1 633 5 view .LVU676
 2781              	@ armwave.c:633:     g_armwave_state.out_pixbuf = NULL;
 2782              		.loc 1 633 32 is_stmt 0 view .LVU677
 2783 0c50 0030A0E3 		mov	r3, #0	@ tmp123,
 2784 0c54 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 634:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2785              		.loc 1 634 5 is_stmt 1 view .LVU678
 2786              	@ armwave.c:634:     g_armwave_state.ch1_buffer = NULL;
 2787              		.loc 1 634 32 is_stmt 0 view .LVU679
 2788 0c58 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 635:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2789              		.loc 1 635 5 is_stmt 1 view .LVU680
 2790              	@ armwave.c:635:     g_armwave_state.xcoord_to_xpixel = NULL;
 2791              		.loc 1 635 38 is_stmt 0 view .LVU681
 2792 0c5c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 636:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2793              		.loc 1 636 5 is_stmt 1 view .LVU682
 2794              	@ armwave.c:636:     g_armwave_state.test_wave_buffer = NULL;
 2795              		.loc 1 636 38 is_stmt 0 view .LVU683
 2796 0c60 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2797              	@ armwave.c:637: }
 637:armwave.c     **** }
 2798              		.loc 1 637 1 view .LVU684
 2799 0c64 1080BDE8 		pop	{r4, pc}	@
 2800              	.L176:
 2801              		.align	2
 2802              	.L175:
 2803 0c68 00000000 		.word	g_armwave_state
 2804              		.cfi_endproc
 2805              	.LFE76:
 2807              		.comm	gamma_table,256,4
 2808              		.comm	g_armwave_state,136,4
 2809              		.section	.rodata
 2810              		.align	2
 2811              		.set	.LANCHOR0,. + 0
 2814              	__PRETTY_FUNCTION__.17095:
 2815 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 2815      6176655F 
 2815      66696C6C 
 2815      5F706978 
 2815      6275665F 
 2816 001b 00       		.space	1
 2819              	__PRETTY_FUNCTION__.17125:
 2820 001c 61726D77 		.ascii	"armwave_setup_render\000"
 2820      6176655F 
 2820      73657475 
 2820      705F7265 
 2820      6E646572 
 2821 0031 000000   		.space	3
 2824              	__PRETTY_FUNCTION__.17132:
 2825 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2825      6176655F 
 2825      7365745F 
 2825      77617665 
 2825      5F706F69 
 2826 004d 000000   		.space	3
 2829              	__PRETTY_FUNCTION__.17139:
 2830 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2830      6176655F 
 2830      7365745F 
 2830      77617665 
 2830      5F706F69 
 2831              		.section	.rodata.str1.4,"aMS",%progbits,1
 2832              		.align	2
 2833              	.LC0:
 2834 0000 76302E30 		.ascii	"v0.0.1\000"
 2834      2E3100
 2835 0007 00       		.space	1
 2836              	.LC1:
 2837 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2837      61766520 
 2837      76657273 
 2837      696F6E3A 
 2837      2025730A 
 2838 001d 000000   		.space	3
 2839              	.LC2:
 2840 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2840      78253038 
 2840      7820623D 
 2840      30782530 
 2840      38782063 
 2841 0053 6768743D 		.ascii	"ght=%d\012\000"
 2841      25640A00 
 2842 005b 00       		.space	1
 2843              	.LC3:
 2844 005c 61726D77 		.ascii	"armwave.c\000"
 2844      6176652E 
 2844      6300
 2845 0066 0000     		.space	2
 2846              	.LC4:
 2847 0068 6F75745F 		.ascii	"out_buffer != NULL\000"
 2847      62756666 
 2847      65722021 
 2847      3D204E55 
 2847      4C4C00
 2848 007b 00       		.space	1
 2849              	.LC5:
 2850 007c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2850      20653D25 
 2850      6420773D 
 2850      25642077 
 2850      733D2564 
 2851              	.LC6:
 2852 00a8 73746172 		.ascii	"start_point < end_point\000"
 2852      745F706F 
 2852      696E7420 
 2852      3C20656E 
 2852      645F706F 
 2853              	.LC7:
 2854 00c0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 2854      7566665F 
 2854      73697A65 
 2854      3D25642C 
 2854      20636D70 
 2855 00f2 00       		.ascii	"\000"
 2856 00f3 00       		.space	1
 2857              	.LC8:
 2858 00f4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2858      6D776176 
 2858      655F7374 
 2858      6174652E 
 2858      6368315F 
 2859 0117 00       		.space	1
 2860              	.LC9:
 2861 0118 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2861      6D776176 
 2861      655F7374 
 2861      6174652E 
 2861      78636F6F 
 2862 0141 000000   		.space	3
 2863              	.LC10:
 2864 0144 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2864      3A203078 
 2864      25303878 
 2864      20307825 
 2864      30387820 
 2865              	.LC11:
 2866 0168 77617665 		.ascii	"wave_buffer != NULL\000"
 2866      5F627566 
 2866      66657220 
 2866      213D204E 
 2866      554C4C00 
 2867              	.LC12:
 2868 017c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2868      6176655F 
 2868      7365745F 
 2868      77617665 
 2868      5F706F69 
 2869 01af 78636565 		.ascii	"xceeded\000"
 2869      64656400 
 2870 01b7 00       		.space	1
 2871              	.LC13:
 2872 01b8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2872      5F627566 
 2872      6665725F 
 2872      70747220 
 2872      213D2030 
 2873 01cd 000000   		.space	3
 2874              	.LC14:
 2875 01d0 776200   		.ascii	"wb\000"
 2876 01d3 00       		.space	1
 2877              	.LC15:
 2878 01d4 50330A00 		.ascii	"P3\012\000"
 2879              	.LC16:
 2880 01d8 25642025 		.ascii	"%d %d\012\000"
 2880      640A00
 2881 01df 00       		.space	1
 2882              	.LC17:
 2883 01e0 3235350A 		.ascii	"255\012\000"
 2883      00
 2884 01e5 000000   		.space	3
 2885              	.LC18:
 2886 01e8 25336420 		.ascii	"%3d %3d %3d\012\000"
 2886      25336420 
 2886      2533640A 
 2886      00
 2887 01f5 000000   		.space	3
 2888              	.LC19:
 2889 01f8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2889      6176655F 
 2889      74657374 
 2889      5F627566 
 2889      6665725F 
 2890 022b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2890      20627566 
 2890      66657220 
 2890      28256420 
 2890      62797465 
 2891              	.LC20:
 2892 024c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2892      6176655F 
 2892      66696C6C 
 2892      5F706978 
 2892      6275665F 
 2893 027f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2893      20666169 
 2893      6C65642C 
 2893      20726574 
 2893      75726E69 
 2894 029e 0000     		.space	2
 2895              	.LC21:
 2896 02a0 43616C63 		.ascii	"Calculating test set %d\012\000"
 2896      756C6174 
 2896      696E6720 
 2896      74657374 
 2896      20736574 
 2897              		.text
 2898              	.Letext0:
 2899              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2900              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2901              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2902              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2903              		.file 7 "/usr/include/stdio.h"
 2904              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2905              		.file 9 "/usr/include/errno.h"
 2906              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2907              		.file 11 "/usr/include/unistd.h"
 2908              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2909              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2910              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2911              		.file 15 "/usr/include/math.h"
 2912              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2913              		.file 17 "/usr/include/time.h"
 2914              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2915              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2916              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2917              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2918              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2919              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2920              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2921              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2922              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2923              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2924              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2925              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2926              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2927              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2928              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2929              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2930              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2931              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2932              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2933              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2934              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2935              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2936              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2937              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2938              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2939              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2940              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2941              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2942              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2943              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2944              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2945              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2946              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2947              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2948              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2949              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2950              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2951              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2952              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2953              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2954              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2955              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2956              		.file 60 "/usr/local/include/python3.8/context.h"
 2957              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2958              		.file 62 "/usr/local/include/python3.8/code.h"
 2959              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2960              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2961              		.file 65 "/usr/local/include/python3.8/import.h"
 2962              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2963              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2964              		.file 68 "/usr/include/malloc.h"
 2965              		.file 69 "armwave.h"
 2966              		.file 70 "/usr/include/stdlib.h"
 2967              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 2968              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2969              		.file 73 "<built-in>"
 2970              		.file 74 "/usr/include/assert.h"
 2971              		.file 75 "/usr/include/string.h"
