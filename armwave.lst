   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU139
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 180 5 view .LVU140
 181:armwave.c     ****     uint32_t offset;
 587              		.loc 1 181 5 view .LVU141
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 183 5 view .LVU142
 589              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 173 1 is_stmt 0 view .LVU143
 591 026c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 592              		.cfi_def_cfa_offset 40
 593              		.cfi_offset 3, -40
 594              		.cfi_offset 4, -36
 595              		.cfi_offset 5, -32
 596              		.cfi_offset 6, -28
 597              		.cfi_offset 7, -24
 598              		.cfi_offset 8, -20
 599              		.cfi_offset 9, -16
 600              		.cfi_offset 10, -12
 601              		.cfi_offset 11, -8
 602              		.cfi_offset 14, -4
 603              	@ armwave.c:183:     assert(out_buffer != NULL);
 604              		.loc 1 183 5 view .LVU144
 605 0270 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 606 0274 4600000A 		beq	.L41		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 607              		.loc 1 186 5 is_stmt 1 view .LVU145
 608              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 609              		.loc 1 186 45 is_stmt 0 view .LVU146
 610 0278 28419FE5 		ldr	r4, .L42	@ tmp227,
 611              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 612              		.loc 1 186 5 view .LVU147
 613 027c 0010A0E3 		mov	r1, #0	@,
 614              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 615              		.loc 1 186 59 view .LVU148
 616 0280 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 617 0284 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 618 0288 920302E0 		mul	r2, r2, r3	@ tmp181, g_armwave_state.target_height, g_armwave_state.target_width
 619              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 620              		.loc 1 186 5 view .LVU149
 621 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp181,
 622 0290 FEFFFFEB 		bl	memset		@
 623              	.LVL22:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 188 5 is_stmt 1 view .LVU150
 625              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 626              		.loc 1 188 10 is_stmt 0 view .LVU151
 627 0294 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 628 0298 408094E5 		ldr	r8, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 629 029c 980308E0 		mul	r8, r8, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 630              	.LVL23:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     **** #if 0
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 195:armwave.c     ****         // most normal waveforms.
 196:armwave.c     ****         wave_word = *base_32ptr++;
 197:armwave.c     **** 
 198:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 199:armwave.c     ****             for(w = 0; w < 2; w++) {
 200:armwave.c     ****                 value = wave_word & 0xffff;
 201:armwave.c     ****                 wave_word >>= 16;
 202:armwave.c     **** 
 203:armwave.c     ****                 if(value != 0) {
 204:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 205:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 206:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 207:armwave.c     **** 
 208:armwave.c     ****                     r = MIN(rr, 255);
 209:armwave.c     ****                     g = MIN(gg, 255);
 210:armwave.c     ****                     b = MIN(bb, 255);
 211:armwave.c     **** 
 212:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 213:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 214:armwave.c     **** 
 215:armwave.c     ****                     // Plot the pixels
 216:armwave.c     ****                     nsub = n + (w * 2);
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** #endif
 230:armwave.c     **** 
 231:armwave.c     ****     for(n = 0; n < (npix / 2); n += 1) {
 631              		.loc 1 231 5 is_stmt 1 view .LVU152
 632              		.loc 1 231 5 is_stmt 0 view .LVU153
 633 02a0 010058E3 		cmp	r8, #1	@ npix,
 634              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 635              		.loc 1 231 26 view .LVU154
 636 02a4 A88F88E0 		add	r8, r8, r8, lsr #31	@ tmp194, npix, npix,
 637              	.LVL24:
 638              		.loc 1 231 26 view .LVU155
 639 02a8 C880A0E1 		asr	r8, r8, #1	@ _76, tmp194,
 640              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 641              		.loc 1 231 5 view .LVU156
 642 02ac F88FBDD8 		pople	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 643 02b0 047094E5 		ldr	r7, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 644              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 232:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 233:armwave.c     ****         value = wave_word & 0xffff;
 234:armwave.c     **** 
 235:armwave.c     ****         if(value != 0) {
 236:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 645              		.loc 1 236 44 view .LVU157
 646 02b4 FCB6D4E1 		ldrsh	fp, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 647              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 237 44 view .LVU158
 649 02b8 FEA6D4E1 		ldrsh	r10, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 650              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 651              		.loc 1 238 44 view .LVU159
 652 02bc F097D4E1 		ldrsh	r9, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 653              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 239:armwave.c     **** 
 240:armwave.c     ****             r = MIN(rr, 255);
 241:armwave.c     ****             g = MIN(gg, 255);
 242:armwave.c     ****             b = MIN(bb, 255);
 243:armwave.c     **** 
 244:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 246:armwave.c     **** 
 247:armwave.c     ****             // Plot the pixels
 248:armwave.c     ****             nsub = n + (w * 2);
 249:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 654              		.loc 1 249 49 view .LVU160
 655 02c0 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _36, g_armwave_state.vscale_frac
 656 02c4 027047E2 		sub	r7, r7, #2	@ ivtmp.52, g_armwave_state.ch1_buffer,
 657              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 658              		.loc 1 231 11 view .LVU161
 659 02c8 00E0A0E3 		mov	lr, #0	@ n,
 660 02cc 020000EA 		b	.L34		@
 661              	.LVL25:
 662              	.L32:
 663              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 664              		.loc 1 231 34 view .LVU162
 665 02d0 01E08EE2 		add	lr, lr, #1	@ n, n,
 666              	.LVL26:
 667              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 668              		.loc 1 231 5 view .LVU163
 669 02d4 08005EE1 		cmp	lr, r8	@ n, _76
 670 02d8 F88FBDA8 		popge	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 671              	.LVL27:
 672              	.L34:
 232:armwave.c     ****         value = wave_word & 0xffff;
 673              		.loc 1 232 9 is_stmt 1 view .LVU164
 233:armwave.c     **** 
 674              		.loc 1 233 9 view .LVU165
 675              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 676              		.loc 1 233 15 is_stmt 0 view .LVU166
 677 02dc B230F7E1 		ldrh	r3, [r7, #2]!	@ MEM[base: _127, offset: 0B], MEM[base: _127, offset: 0B]
 678              	.LVL28:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 679              		.loc 1 235 9 is_stmt 1 view .LVU167
 680              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 681              		.loc 1 235 11 is_stmt 0 view .LVU168
 682 02e0 FF3013E2 		ands	r3, r3, #255	@ value, MEM[base: _127, offset: 0B],
 683              	.LVL29:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 684              		.loc 1 235 11 view .LVU169
 685 02e4 F9FFFF0A 		beq	.L32		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 686              		.loc 1 236 13 is_stmt 1 view .LVU170
 687              	.LVL30:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 688              		.loc 1 237 13 view .LVU171
 238:armwave.c     **** 
 689              		.loc 1 238 13 view .LVU172
 240:armwave.c     ****             g = MIN(gg, 255);
 690              		.loc 1 240 13 view .LVU173
 241:armwave.c     ****             b = MIN(bb, 255);
 691              		.loc 1 241 13 view .LVU174
 242:armwave.c     **** 
 692              		.loc 1 242 13 view .LVU175
 245:armwave.c     **** 
 693              		.loc 1 245 13 view .LVU176
 694 02e8 00108EE2 		add	r1, lr, #0	@ _123, n,
 695              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 696              		.loc 1 238 47 is_stmt 0 view .LVU177
 697 02ec 830960E1 		smulbb	r0, r3, r9	@ tmp205, value, _20
 698              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 699              		.loc 1 249 24 view .LVU178
 700 02f0 7120EFE6 		uxtb	r2, r1	@ _34, _123
 701              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 250:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 702              		.loc 1 250 33 view .LVU179
 703 02f4 01C082E2 		add	ip, r2, #1	@ tmp220, _34,
 704              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 705              		.loc 1 249 32 view .LVU180
 706 02f8 902A07EE 		vmov	s15, r2	@ int	@ _34, _34
 707              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 708              		.loc 1 250 33 view .LVU181
 709 02fc 10CA07EE 		vmov	s14, ip	@ int	@ tmp220, tmp220
 710              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 711              		.loc 1 237 47 view .LVU182
 712 0300 830A65E1 		smulbb	r5, r3, r10	@ tmp209, value, _17
 713              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 714              		.loc 1 236 47 view .LVU183
 715 0304 830B63E1 		smulbb	r3, r3, fp	@ tmp215, value, _13
 716              	.LVL31:
 717              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 718              		.loc 1 249 32 view .LVU184
 719 0308 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp218, _34
 720              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 721              		.loc 1 250 38 view .LVU185
 722 030c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp221, tmp220
 723              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 724              		.loc 1 236 16 view .LVU186
 725 0310 4324A0E1 		asr	r2, r3, #8	@ rr, tmp215,
 726              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 727              		.loc 1 238 16 view .LVU187
 728 0314 4004A0E1 		asr	r0, r0, #8	@ bb, tmp205,
 729              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 730              		.loc 1 242 17 view .LVU188
 731 0318 FF0050E3 		cmp	r0, #255	@ bb,
 732              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 733              		.loc 1 237 16 view .LVU189
 734 031c 4554A0E1 		asr	r5, r5, #8	@ gg, tmp209,
 735              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 736              		.loc 1 242 17 view .LVU190
 737 0320 FF00A0A3 		movge	r0, #255	@ bb,
 738              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 739              		.loc 1 241 17 view .LVU191
 740 0324 FF0055E3 		cmp	r5, #255	@ gg,
 741              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 742              		.loc 1 249 32 view .LVU192
 743 0328 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp219, tmp218, _36
 744              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 745              		.loc 1 250 38 view .LVU193
 746 032c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp222, tmp221, _36
 747              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 748              		.loc 1 241 17 view .LVU194
 749 0330 FF50A0A3 		movge	r5, #255	@ gg,
 750              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 751              		.loc 1 245 36 view .LVU195
 752 0334 00C8A0E1 		lsl	ip, r0, #16	@ tmp206, bb,
 753              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 754              		.loc 1 240 17 view .LVU196
 755 0338 FF0052E3 		cmp	r2, #255	@ rr,
 756              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 757              		.loc 1 245 48 view .LVU197
 758 033c 0554A0E1 		lsl	r5, r5, #8	@ tmp210, gg,
 759              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 760              		.loc 1 240 17 view .LVU198
 761 0340 FF20A0A3 		movge	r2, #255	@ rr,
 762              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 763              		.loc 1 245 36 view .LVU199
 764 0344 FFC80CE2 		and	ip, ip, #16711680	@ tmp207, tmp206,
 765              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 766              		.loc 1 249 16 view .LVU200
 767 0348 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp219
 768              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 769              		.loc 1 245 48 view .LVU201
 770 034c 7550FFE6 		uxth	r5, r5	@ tmp211, tmp210
 771              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 772              		.loc 1 245 43 view .LVU202
 773 0350 05C08CE1 		orr	ip, ip, r5	@ tmp213, tmp207, tmp211
 774              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 775              		.loc 1 245 54 view .LVU203
 776 0354 7220EFE6 		uxtb	r2, r2	@ rr, rr
 777 0358 02208CE1 		orr	r2, ip, r2	@ tmp217, tmp213, rr
 778              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 779              		.loc 1 245 18 view .LVU204
 780 035c FFC482E3 		orr	ip, r2, #-16777216	@ word, tmp217,
 781              	.LVL32:
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 782              		.loc 1 248 13 is_stmt 1 view .LVU205
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 783              		.loc 1 249 13 view .LVU206
 784              	@ armwave.c:251:             xx = (nsub >> 8);
 251:armwave.c     ****             xx = (nsub >> 8);
 785              		.loc 1 251 24 is_stmt 0 view .LVU207
 786 0360 4114A0E1 		asr	r1, r1, #8	@ xx, _123,
 787              	.LVL33:
 788              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 789              		.loc 1 249 16 view .LVU208
 790 0364 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 791              	.LVL34:
 250:armwave.c     ****             xx = (nsub >> 8);
 792              		.loc 1 250 13 is_stmt 1 view .LVU209
 793              	@ armwave.c:250:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 250:armwave.c     ****             xx = (nsub >> 8);
 794              		.loc 1 250 16 is_stmt 0 view .LVU210
 795 0368 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp222
 796 036c 900A17EE 		vmov	r0, s15	@ int	@ ye, ye
 797              	.LVL35:
 798              		.loc 1 251 13 is_stmt 1 view .LVU211
 252:armwave.c     **** 
 253:armwave.c     ****             for(y = yy; y < ye; y++) {
 799              		.loc 1 253 13 view .LVU212
 800              		.loc 1 253 13 is_stmt 0 view .LVU213
 801 0370 000053E1 		cmp	r3, r0	@ yy, ye
 802 0374 D5FFFF2A 		bcs	.L32		@,
 803              	.LVL36:
 804              	.L33:
 254:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 805              		.loc 1 254 17 is_stmt 1 discriminator 3 view .LVU214
 255:armwave.c     ****                 *(out_buffer_base + offset) = word;
 806              		.loc 1 255 17 discriminator 3 view .LVU215
 807              	@ armwave.c:254:                 offset = (xx + (y * g_armwave_state.target_width)); 
 254:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 808              		.loc 1 254 35 is_stmt 0 discriminator 3 view .LVU216
 809 0378 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 810              	@ armwave.c:255:                 *(out_buffer_base + offset) = word;
 811              		.loc 1 255 35 discriminator 3 view .LVU217
 812 037c 921322E0 		mla	r2, r2, r3, r1	@ tmp226, g_armwave_state.target_width, yy, xx
 813              	.LVL37:
 814              	@ armwave.c:253:             for(y = yy; y < ye; y++) {
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 815              		.loc 1 253 34 discriminator 3 view .LVU218
 816 0380 013083E2 		add	r3, r3, #1	@ yy, yy,
 817              	.LVL38:
 818              	@ armwave.c:253:             for(y = yy; y < ye; y++) {
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 819              		.loc 1 253 13 discriminator 3 view .LVU219
 820 0384 030050E1 		cmp	r0, r3	@ ye, yy
 821              	@ armwave.c:255:                 *(out_buffer_base + offset) = word;
 822              		.loc 1 255 45 discriminator 3 view .LVU220
 823 0388 02C186E7 		str	ip, [r6, r2, lsl #2]	@ word, *_46
 824              	@ armwave.c:253:             for(y = yy; y < ye; y++) {
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 825              		.loc 1 253 13 discriminator 3 view .LVU221
 826 038c F9FFFF1A 		bne	.L33		@,
 253:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 827              		.loc 1 253 13 discriminator 3 view .LVU222
 828 0390 CEFFFFEA 		b	.L32		@
 829              	.LVL39:
 830              	.L41:
 183:armwave.c     **** 
 831              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU223
 832 0394 10309FE5 		ldr	r3, .L42+4	@,
 833 0398 B720A0E3 		mov	r2, #183	@,
 834 039c 0C109FE5 		ldr	r1, .L42+8	@,
 835 03a0 0C009FE5 		ldr	r0, .L42+12	@,
 836              	.LVL40:
 183:armwave.c     **** 
 837              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU224
 838 03a4 FEFFFFEB 		bl	__assert_fail		@
 839              	.LVL41:
 840              	.L43:
 183:armwave.c     **** 
 841              		.loc 1 183 5 discriminator 1 view .LVU225
 842              		.align	2
 843              	.L42:
 844 03a8 00000000 		.word	g_armwave_state
 845 03ac 00000000 		.word	.LANCHOR0
 846 03b0 20000000 		.word	.LC2
 847 03b4 2C000000 		.word	.LC3
 848              		.cfi_endproc
 849              	.LFE60:
 851              		.global	__aeabi_idiv
 852              		.align	2
 853              		.global	armwave_generate
 854              		.syntax unified
 855              		.arm
 856              		.fpu vfp
 858              	armwave_generate:
 859              	.LFB61:
 256:armwave.c     ****             }
 257:armwave.c     ****         }
 258:armwave.c     ****     }
 259:armwave.c     **** }
 260:armwave.c     **** 
 261:armwave.c     **** /*
 262:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 263:armwave.c     ****  */
 264:armwave.c     **** void armwave_generate()
 265:armwave.c     **** {
 860              		.loc 1 265 1 is_stmt 1 view -0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 16
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 266:armwave.c     ****     uint32_t yy;
 864              		.loc 1 266 5 view .LVU227
 267:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 865              		.loc 1 267 5 view .LVU228
 866              	.LVL42:
 268:armwave.c     **** 
 269:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 867              		.loc 1 269 5 view .LVU229
 868              	@ armwave.c:265: {
 265:armwave.c     ****     uint32_t yy;
 869              		.loc 1 265 1 is_stmt 0 view .LVU230
 870 03b8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 871              		.cfi_def_cfa_offset 36
 872              		.cfi_offset 4, -36
 873              		.cfi_offset 5, -32
 874              		.cfi_offset 6, -28
 875              		.cfi_offset 7, -24
 876              		.cfi_offset 8, -20
 877              		.cfi_offset 9, -16
 878              		.cfi_offset 10, -12
 879              		.cfi_offset 11, -8
 880              		.cfi_offset 14, -4
 881              	@ armwave.c:269:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 882              		.loc 1 269 5 view .LVU231
 883 03bc 0010A0E3 		mov	r1, #0	@,
 884              	@ armwave.c:269:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 885              		.loc 1 269 58 view .LVU232
 886 03c0 14829FE5 		ldr	r8, .L63	@ tmp342,
 887              	@ armwave.c:265: {
 265:armwave.c     ****     uint32_t yy;
 888              		.loc 1 265 1 view .LVU233
 889 03c4 14D04DE2 		sub	sp, sp, #20	@,,
 890              		.cfi_def_cfa_offset 56
 891              	@ armwave.c:269:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 892              		.loc 1 269 5 view .LVU234
 893 03c8 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 894 03cc 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 895 03d0 FEFFFFEB 		bl	memset		@
 896              	.LVL43:
 270:armwave.c     **** 
 271:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 897              		.loc 1 271 5 is_stmt 1 view .LVU235
 898              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 899              		.loc 1 271 68 is_stmt 0 view .LVU236
 900 03d4 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 901              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 902              		.loc 1 271 38 view .LVU237
 903 03d8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 904              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 905              		.loc 1 271 51 view .LVU238
 906 03dc 0310A0E1 		mov	r1, r3	@, _35
 907 03e0 0500A0E1 		mov	r0, r5	@, prephitmp_229
 908              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 909              		.loc 1 271 68 view .LVU239
 910 03e4 00308DE5 		str	r3, [sp]	@ _35, %sfp
 911              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 912              		.loc 1 271 51 view .LVU240
 913 03e8 FEFFFFEB 		bl	__aeabi_idiv		@
 914              	.LVL44:
 915              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 916              		.loc 1 271 5 view .LVU241
 917 03ec 000050E3 		cmp	r0, #0	@,
 918 03f0 7700000A 		beq	.L44		@,
 919 03f4 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 920              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 921              		.loc 1 271 12 view .LVU242
 922 03f8 0030A0E3 		mov	r3, #0	@ yy,
 923 03fc 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 924              	.LVL45:
 925              	.L53:
 272:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 273:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 274:armwave.c     **** 
 275:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 926              		.loc 1 275 9 is_stmt 1 discriminator 3 view .LVU243
 927 0400 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 928              	.LBB10:
 929              	.LBB11:
 930              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 931              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU244
 932 0404 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 933              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 934              		.loc 1 79 5 discriminator 3 view .LVU245
 935 0408 000054E3 		cmp	r4, #0	@ prephitmp_239,
 936              	.LBE11:
 937              	.LBE10:
 938              	@ armwave.c:275:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 939              		.loc 1 275 9 discriminator 3 view .LVU246
 940 040c 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 941              	.LVL46:
 942              	.LBB13:
 943              	.LBI10:
  62:armwave.c     **** {
 944              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU247
 945              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 946              		.loc 1 64 5 discriminator 3 view .LVU248
  65:armwave.c     ****     uint8_t *wave_base;
 947              		.loc 1 65 5 discriminator 3 view .LVU249
  66:armwave.c     ****     uint8_t *write_buffer_base;
 948              		.loc 1 66 5 discriminator 3 view .LVU250
  67:armwave.c     ****     uint8_t *write_buffer;
 949              		.loc 1 67 5 discriminator 3 view .LVU251
  68:armwave.c     **** 
 950              		.loc 1 68 5 discriminator 3 view .LVU252
  71:armwave.c     **** 
 951              		.loc 1 71 5 discriminator 3 view .LVU253
 952              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 953              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU254
 954 0410 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 955              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 956              		.loc 1 71 40 discriminator 3 view .LVU255
 957 0414 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 958              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 959              		.loc 1 71 65 discriminator 3 view .LVU256
 960 0418 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 961              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 962              		.loc 1 71 105 discriminator 3 view .LVU257
 963 041c 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 964              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 965              		.loc 1 71 52 discriminator 3 view .LVU258
 966 0420 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 967 0424 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 968              	.LVL47:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 969              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU259
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 970              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU260
 971 0428 610000DA 		ble	.L46		@,
 972              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 973              		.loc 1 79 11 view .LVU261
 974 042c 0070A0E3 		mov	r7, #0	@ w,
 975 0430 043042E2 		sub	r3, r2, #4	@ _32, _5,
 976 0434 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 977              	.LVL48:
 978              	.L52:
  80:armwave.c     **** 
 979              		.loc 1 80 9 is_stmt 1 view .LVU262
 980              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 981              		.loc 1 84 9 is_stmt 0 view .LVU263
 982 0438 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 983              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 984              		.loc 1 80 64 view .LVU264
 985 043c 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 986              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 987              		.loc 1 84 9 view .LVU265
 988 0440 000052E3 		cmp	r2, #0	@ _35,
 989              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 990              		.loc 1 80 36 view .LVU266
 991 0444 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 992              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 993              		.loc 1 80 64 view .LVU267
 994 0448 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 995              	.LVL49:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 996              		.loc 1 84 9 is_stmt 1 view .LVU268
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 997              		.loc 1 84 9 is_stmt 0 view .LVU269
 998 044c 5200000A 		beq	.L47		@,
 999 0450 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 1000 0454 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 1001              	.LVL50:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1002              		.loc 1 84 9 view .LVU270
 1003 0458 036082E0 		add	r6, r2, r3	@ ivtmp.59, _24, tmp248
 1004              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1005              		.loc 1 84 16 view .LVU271
 1006 045c 00C0A0E3 		mov	ip, #0	@ yy,
 1007              	.LVL51:
 1008              	.L51:
  87:armwave.c     **** 
 1009              		.loc 1 87 13 is_stmt 1 view .LVU272
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1010              		.loc 1 101 17 view .LVU273
 106:armwave.c     ****                 word >>= 8;
 1011              		.loc 1 106 17 view .LVU274
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1012              		.loc 1 101 17 view .LVU275
 106:armwave.c     ****                 word >>= 8;
 1013              		.loc 1 106 17 view .LVU276
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1014              		.loc 1 101 17 view .LVU277
 106:armwave.c     ****                 word >>= 8;
 1015              		.loc 1 106 17 view .LVU278
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1016              		.loc 1 101 17 view .LVU279
 106:armwave.c     ****                 word >>= 8;
 1017              		.loc 1 106 17 view .LVU280
 1018              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1019              		.loc 1 87 18 is_stmt 0 view .LVU281
 1020 0460 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 1021              	.LVL52:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1022              		.loc 1 89 13 is_stmt 1 view .LVU282
  91:armwave.c     ****                 
 1023              		.loc 1 91 17 view .LVU283
  94:armwave.c     ****                     continue;
 1024              		.loc 1 94 17 view .LVU284
 1025              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1026              		.loc 1 102 34 is_stmt 0 view .LVU285
 1027 0464 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 1028              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1029              		.loc 1 94 20 view .LVU286
 1030 0468 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1031 046c 0120A003 		moveq	r2, #1	@ tmp250,
 1032 0470 0020A013 		movne	r2, #0	@ tmp250,
 1033              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1034              		.loc 1 94 19 view .LVU287
 1035 0474 FF0059E3 		cmp	r9, #255	@ scale_value,
 1036 0478 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 1037              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1038              		.loc 1 107 22 view .LVU288
 1039 047c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1040              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1041              		.loc 1 94 19 view .LVU289
 1042 0480 000052E3 		cmp	r2, #0	@ tmp255,
 1043              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1044              		.loc 1 102 34 view .LVU290
 1045 0484 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1046              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1047              		.loc 1 106 47 view .LVU291
 1048 0488 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1049              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1050              		.loc 1 107 22 view .LVU292
 1051 048c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1052 0490 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1053              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1054              		.loc 1 94 19 view .LVU293
 1055 0494 3B00001A 		bne	.L55		@,
 1056              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1057              		.loc 1 102 34 view .LVU294
 1058 0498 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1059              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1060              		.loc 1 106 47 view .LVU295
 1061 049c 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1062              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1063              		.loc 1 94 20 view .LVU296
 1064 04a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1065              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1066              		.loc 1 102 34 view .LVU297
 1067 04a4 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1068              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1069              		.loc 1 106 47 view .LVU298
 1070 04a8 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1071              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1072              		.loc 1 102 74 view .LVU299
 1073 04ac 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1074              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1075              		.loc 1 106 47 view .LVU300
 1076 04b0 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1077              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1078              		.loc 1 94 20 view .LVU301
 1079 04b4 01B0A003 		moveq	fp, #1	@ tmp271,
 1080 04b8 00B0A013 		movne	fp, #0	@ tmp271,
 1081              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1082              		.loc 1 94 19 view .LVU302
 1083 04bc FF0054E3 		cmp	r4, #255	@ scale_value,
 1084 04c0 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1085 04c4 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1086              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1087              		.loc 1 106 47 view .LVU303
 1088 04c8 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1089              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1090              		.loc 1 94 19 view .LVU304
 1091 04cc 000054E3 		cmp	r4, #0	@ tmp276,
 1092              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1093              		.loc 1 106 47 view .LVU305
 1094 04d0 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1095 04d4 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1096              	.LVL53:
 107:armwave.c     ****             }
 1097              		.loc 1 107 17 is_stmt 1 view .LVU306
  91:armwave.c     ****                 
 1098              		.loc 1 91 17 view .LVU307
  94:armwave.c     ****                     continue;
 1099              		.loc 1 94 17 view .LVU308
 1100              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1101              		.loc 1 94 19 is_stmt 0 view .LVU309
 1102 04d8 2A00001A 		bne	.L55		@,
 1103              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1104              		.loc 1 102 34 view .LVU310
 1105 04dc 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1106              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1107              		.loc 1 102 99 view .LVU311
 1108 04e0 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 20 view .LVU312
 1111 04e4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 34 view .LVU313
 1114 04e8 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1115              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1116              		.loc 1 94 20 view .LVU314
 1117 04ec FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1118 04f0 0120A003 		moveq	r2, #1	@ tmp293,
 1119              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1120              		.loc 1 102 74 view .LVU315
 1121 04f4 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1122              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1123              		.loc 1 94 20 view .LVU316
 1124 04f8 0020A013 		movne	r2, #0	@ tmp293,
 1125              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1126              		.loc 1 106 47 view .LVU317
 1127 04fc 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1128 0500 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1129              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1130              		.loc 1 94 19 view .LVU318
 1131 0504 FF005EE3 		cmp	lr, #255	@ scale_value,
 1132 0508 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1133 050c 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1134              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1135              		.loc 1 106 47 view .LVU319
 1136 0510 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1137              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1138              		.loc 1 94 19 view .LVU320
 1139 0514 00005EE3 		cmp	lr, #0	@ tmp298,
 1140              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1141              		.loc 1 106 47 view .LVU321
 1142 0518 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1143 051c 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1144              		.loc 1 107 17 is_stmt 1 view .LVU322
 1145              	.LVL54:
  91:armwave.c     ****                 
 1146              		.loc 1 91 17 view .LVU323
  94:armwave.c     ****                     continue;
 1147              		.loc 1 94 17 view .LVU324
 1148              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1149              		.loc 1 94 19 is_stmt 0 view .LVU325
 1150 0520 1800001A 		bne	.L55		@,
 1151              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1152              		.loc 1 102 34 view .LVU326
 1153 0524 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1154              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1155              		.loc 1 94 20 view .LVU327
 1156 0528 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1157              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 47 view .LVU328
 1159 052c 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1160              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1161              		.loc 1 102 34 view .LVU329
 1162 0530 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1163              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1164              		.loc 1 102 99 view .LVU330
 1165 0534 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1166              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1167              		.loc 1 102 74 view .LVU331
 1168 0538 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1169              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1170              		.loc 1 106 47 view .LVU332
 1171 053c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1172              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1173              		.loc 1 94 20 view .LVU333
 1174 0540 01E0A003 		moveq	lr, #1	@ tmp314,
 1175 0544 00E0A013 		movne	lr, #0	@ tmp314,
 1176              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1177              		.loc 1 94 19 view .LVU334
 1178 0548 FF0053E3 		cmp	r3, #255	@ word,
 1179 054c 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1180              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1181              		.loc 1 106 47 view .LVU335
 1182 0550 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1183              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1184              		.loc 1 94 19 view .LVU336
 1185 0554 00005EE3 		cmp	lr, #0	@ tmp319,
 1186              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1187              		.loc 1 106 47 view .LVU337
 1188 0558 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1189 055c 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1190              		.loc 1 107 17 is_stmt 1 view .LVU338
 1191              	.LVL55:
  91:armwave.c     ****                 
 1192              		.loc 1 91 17 view .LVU339
  94:armwave.c     ****                     continue;
 1193              		.loc 1 94 17 view .LVU340
 1194              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1195              		.loc 1 94 19 is_stmt 0 view .LVU341
 1196 0560 0800001A 		bne	.L55		@,
 1197              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1198              		.loc 1 102 34 view .LVU342
 1199 0564 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1200 0568 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1201              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1202              		.loc 1 102 99 view .LVU343
 1203 056c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1204              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1205              		.loc 1 102 34 view .LVU344
 1206 0570 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1207              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1208              		.loc 1 102 74 view .LVU345
 1209 0574 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1210              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1211              		.loc 1 106 47 view .LVU346
 1212 0578 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1213 057c 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1214 0580 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1215 0584 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1216              		.loc 1 107 17 is_stmt 1 view .LVU347
 1217              	.LVL56:
 1218              	.L55:
 1219              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1220              		.loc 1 84 9 is_stmt 0 view .LVU348
 1221 0588 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1222              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1223              		.loc 1 84 37 view .LVU349
 1224 058c 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1225              	.LVL57:
 1226              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1227              		.loc 1 84 9 view .LVU350
 1228 0590 0C0053E1 		cmp	r3, ip	@ _35, yy
 1229 0594 B1FFFF8A 		bhi	.L51		@,
 1230 0598 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1231              	.LVL58:
 1232              	.L47:
 1233              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1234              		.loc 1 79 44 view .LVU351
 1235 059c 017087E2 		add	r7, r7, #1	@ w, w,
 1236              	.LVL59:
 1237              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1238              		.loc 1 79 5 view .LVU352
 1239 05a0 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1240 05a4 A3FFFFBA 		blt	.L52		@,
 1241 05a8 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1242 05ac 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1243 05b0 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1244              	.LVL60:
 1245              	.L46:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1246              		.loc 1 79 5 view .LVU353
 1247              	.LBE12:
 1248              	.LBE13:
 276:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1249              		.loc 1 276 9 is_stmt 1 discriminator 3 view .LVU354
 277:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1250              		.loc 1 277 9 discriminator 3 view .LVU355
 1251              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1252              		.loc 1 271 51 is_stmt 0 discriminator 3 view .LVU356
 1253 05b4 00109DE5 		ldr	r1, [sp]	@, %sfp
 1254              	.LVL61:
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1255              		.loc 1 271 51 discriminator 3 view .LVU357
 1256 05b8 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1257 05bc FEFFFFEB 		bl	__aeabi_idiv		@
 1258              	.LVL62:
 1259              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1260              		.loc 1 271 86 discriminator 3 view .LVU358
 1261 05c0 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1262 05c4 013083E2 		add	r3, r3, #1	@ yy, yy,
 1263 05c8 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1264              	.LVL63:
 1265              	@ armwave.c:271:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 271:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1266              		.loc 1 271 5 discriminator 3 view .LVU359
 1267 05cc 030050E1 		cmp	r0, r3	@, yy
 1268 05d0 8AFFFF8A 		bhi	.L53		@,
 1269              	.LVL64:
 1270              	.L44:
 1271              	@ armwave.c:281: }
 278:armwave.c     ****     }
 279:armwave.c     **** 
 280:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 281:armwave.c     **** }
 1272              		.loc 1 281 1 view .LVU360
 1273 05d4 14D08DE2 		add	sp, sp, #20	@,,
 1274              		.cfi_def_cfa_offset 36
 1275              		@ sp needed	@
 1276 05d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1277              	.L64:
 1278              		.align	2
 1279              	.L63:
 1280 05dc 00000000 		.word	g_armwave_state
 1281              		.cfi_endproc
 1282              	.LFE61:
 1284              		.align	2
 1285              		.global	armwave_setup_render
 1286              		.syntax unified
 1287              		.arm
 1288              		.fpu vfp
 1290              	armwave_setup_render:
 1291              	.LVL65:
 1292              	.LFB62:
 282:armwave.c     **** 
 283:armwave.c     **** /*
 284:armwave.c     ****  * Setup the renderer with passed parameters.
 285:armwave.c     ****  */
 286:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 287:armwave.c     **** {
 1293              		.loc 1 287 1 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 12, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 288:armwave.c     ****     uint32_t length, xx;
 1297              		.loc 1 288 5 view .LVU362
 289:armwave.c     ****     float points_per_pixel;
 1298              		.loc 1 289 5 view .LVU363
 290:armwave.c     **** 
 291:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1299              		.loc 1 291 5 view .LVU364
 1300              	@ armwave.c:287: {
 287:armwave.c     ****     uint32_t length, xx;
 1301              		.loc 1 287 1 is_stmt 0 view .LVU365
 1302 05e0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1303              		.cfi_def_cfa_offset 28
 1304              		.cfi_offset 4, -28
 1305              		.cfi_offset 5, -24
 1306              		.cfi_offset 6, -20
 1307              		.cfi_offset 7, -16
 1308              		.cfi_offset 8, -12
 1309              		.cfi_offset 9, -8
 1310              		.cfi_offset 14, -4
 1311 05e4 028B2DED 		vpush.64	{d8}	@
 1312              		.cfi_def_cfa_offset 36
 1313              		.cfi_offset 80, -36
 1314              		.cfi_offset 81, -32
 1315 05e8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1316 05ec 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1317 05f0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1318 05f4 14D04DE2 		sub	sp, sp, #20	@,,
 1319              		.cfi_def_cfa_offset 56
 1320              	@ armwave.c:287: {
 287:armwave.c     ****     uint32_t length, xx;
 1321              		.loc 1 287 1 view .LVU366
 1322 05f8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1323 05fc D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1324 0600 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1325              	@ armwave.c:291:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1326              		.loc 1 291 5 view .LVU367
 1327 0604 00308DE5 		str	r3, [sp]	@ wave_stride,
 1328 0608 F460CDE1 		strd	r6, [sp, #4]	@,,
 1329 060c 0230A0E1 		mov	r3, r2	@, waves_max
 1330              	.LVL66:
 1331              		.loc 1 291 5 view .LVU368
 1332 0610 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1333 0614 0120A0E1 		mov	r2, r1	@, end_point
 1334              	.LVL67:
 1335              		.loc 1 291 5 view .LVU369
 1336 0618 0010A0E1 		mov	r1, r0	@, start_point
 1337              	.LVL68:
 1338              		.loc 1 291 5 view .LVU370
 1339 061c E0019FE5 		ldr	r0, .L79+12	@,
 1340              	.LVL69:
 1341              		.loc 1 291 5 view .LVU371
 1342 0620 FEFFFFEB 		bl	printf		@
 1343              	.LVL70:
 292:armwave.c     **** 
 293:armwave.c     ****     // TODO these asserts should instead raise PyExc
 294:armwave.c     ****     assert(start_point < end_point);
 1344              		.loc 1 294 5 is_stmt 1 view .LVU372
 1345 0624 050054E1 		cmp	r4, r5	@ start_point, end_point
 1346 0628 6300002A 		bcs	.L76		@,
 295:armwave.c     **** 
 296:armwave.c     ****     /*
 297:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 298:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 299:armwave.c     ****     if(target_height == 256) {
 300:armwave.c     ****         g_armwave_state.row_shift = 8;
 301:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 302:armwave.c     ****     } else if(target_height == 512) {
 303:armwave.c     ****         g_armwave_state.row_shift = 9;
 304:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 305:armwave.c     ****     } else if(target_height == 1024) {
 306:armwave.c     ****         g_armwave_state.row_shift = 10;
 307:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 308:armwave.c     ****     } else if(target_height == 2048) {
 309:armwave.c     ****         g_armwave_state.row_shift = 11;
 310:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 311:armwave.c     ****     }
 312:armwave.c     ****     */
 313:armwave.c     **** 
 314:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 315:armwave.c     ****     g_armwave_state.xstride = target_height;
 1347              		.loc 1 315 5 view .LVU373
 1348              	@ armwave.c:326:     g_armwave_state.wave_length = end_point - start_point;
 316:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 318:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 319:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 320:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 321:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 322:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 323:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 325:armwave.c     ****     g_armwave_state.target_height = target_height;
 326:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1349              		.loc 1 326 45 is_stmt 0 view .LVU374
 1350 062c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1351              	.LVL71:
 1352              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1353              		.loc 1 316 49 view .LVU375
 1354 0630 706A9FED 		vldr.32	s12, .L79	@ tmp175,
 1355              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 327:armwave.c     **** 
 328:armwave.c     ****     // Calculate compound scaler
 329:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 330:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1356              		.loc 1 330 48 view .LVU376
 1357 0634 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1358              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1359              		.loc 1 330 79 view .LVU377
 1360 0638 6F6ADFED 		vldr.32	s13, .L79+4	@ tmp199,
 1361              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1362              		.loc 1 323 90 view .LVU378
 1363 063c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1364              	@ armwave.c:315:     g_armwave_state.xstride = target_height;
 315:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1365              		.loc 1 315 29 view .LVU379
 1366 0640 C0419FE5 		ldr	r4, .L79+16	@ tmp243,
 1367              	.LVL72:
 1368              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1369              		.loc 1 330 48 view .LVU380
 1370 0644 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1371              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1372              		.loc 1 316 49 view .LVU381
 1373 0648 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1374              	@ armwave.c:321:     g_armwave_state.size = target_height * target_width;
 321:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1375              		.loc 1 321 42 view .LVU382
 1376 064c 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1377              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1378              		.loc 1 323 95 view .LVU383
 1379 0650 833383E0 		add	r3, r3, r3, lsl #7	@ tmp189, tmp186, tmp186,
 1380              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1381              		.loc 1 316 49 view .LVU384
 1382 0654 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1383              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1384              		.loc 1 330 48 view .LVU385
 1385 0658 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1386              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 331:armwave.c     **** 
 332:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1387              		.loc 1 332 5 view .LVU386
 1388 065c 0128A0E3 		mov	r2, #65536	@ tmp202,
 1389 0660 04508DE5 		str	r5, [sp, #4]	@ _13,
 1390 0664 00608DE5 		str	r6, [sp]	@ target_width,
 1391              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 330:armwave.c     **** 
 1392              		.loc 1 330 48 view .LVU387
 1393 0668 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1394              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1395              		.loc 1 323 95 view .LVU388
 1396 066c 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1397              	@ armwave.c:315:     g_armwave_state.xstride = target_height;
 315:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1398              		.loc 1 315 29 view .LVU389
 1399 0670 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1400              		.loc 1 316 5 is_stmt 1 view .LVU390
 1401              	@ armwave.c:318:     g_armwave_state.wave_stride = wave_stride;
 318:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1402              		.loc 1 318 33 is_stmt 0 view .LVU391
 1403 0674 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1404              	@ armwave.c:319:     g_armwave_state.waves_max = waves_max;
 319:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1405              		.loc 1 319 31 view .LVU392
 1406 0678 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1407              	@ armwave.c:320:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 320:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1408              		.loc 1 320 27 view .LVU393
 1409 067c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1410              	@ armwave.c:325:     g_armwave_state.target_height = target_height;
 325:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1411              		.loc 1 325 35 view .LVU394
 1412 0680 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1413              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1414              		.loc 1 332 5 view .LVU395
 1415 0684 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1416              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 330:armwave.c     **** 
 1417              		.loc 1 330 48 view .LVU396
 1418 0688 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1419              	@ armwave.c:322:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 322:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1420              		.loc 1 322 37 view .LVU397
 1421 068c 022CA0E3 		mov	r2, #512	@ tmp185,
 1422              	@ armwave.c:321:     g_armwave_state.size = target_height * target_width;
 321:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1423              		.loc 1 321 26 view .LVU398
 1424 0690 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1425              	@ armwave.c:322:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 322:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1426              		.loc 1 322 37 view .LVU399
 1427 0694 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1428              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1429              		.loc 1 332 5 view .LVU400
 1430 0698 0310A0E1 		mov	r1, r3	@, tmp190
 1431              	@ armwave.c:323:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1432              		.loc 1 323 34 view .LVU401
 1433 069c 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1434              	@ armwave.c:326:     g_armwave_state.wave_length = end_point - start_point;
 326:armwave.c     **** 
 1435              		.loc 1 326 33 view .LVU402
 1436 06a0 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1437              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1438              		.loc 1 332 5 view .LVU403
 1439 06a4 60019FE5 		ldr	r0, .L79+20	@,
 1440              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1441              		.loc 1 316 49 view .LVU404
 1442 06a8 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1443              	@ armwave.c:330:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 330:armwave.c     **** 
 1444              		.loc 1 330 79 view .LVU405
 1445 06ac A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1446              	@ armwave.c:329:     g_armwave_state.cmp_x_bitdepth_scale = \
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1447              		.loc 1 329 42 view .LVU406
 1448 06b0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1449              	@ armwave.c:316:     g_armwave_state.vscale_frac = target_height / 255.0f;
 316:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1450              		.loc 1 316 33 view .LVU407
 1451 06b4 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 317:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1452              		.loc 1 317 5 is_stmt 1 view .LVU408
 1453              	@ armwave.c:329:     g_armwave_state.cmp_x_bitdepth_scale = \
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1454              		.loc 1 329 42 is_stmt 0 view .LVU409
 1455 06b8 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1456              	@ armwave.c:317:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 317:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1457              		.loc 1 317 30 view .LVU410
 1458 06bc C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1459              	@ armwave.c:332:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1460              		.loc 1 332 5 view .LVU411
 1461 06c0 0C30A0E1 		mov	r3, ip	@, _19
 1462 06c4 0C20A0E1 		mov	r2, ip	@, tmp3
 1463              	@ armwave.c:329:     g_armwave_state.cmp_x_bitdepth_scale = \
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1464              		.loc 1 329 42 view .LVU412
 1465 06c8 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1466              	@ armwave.c:317:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 317:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1467              		.loc 1 317 30 view .LVU413
 1468 06cc 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 318:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1469              		.loc 1 318 5 is_stmt 1 view .LVU414
 319:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1470              		.loc 1 319 5 view .LVU415
 320:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1471              		.loc 1 320 5 view .LVU416
 321:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1472              		.loc 1 321 5 view .LVU417
 322:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1473              		.loc 1 322 5 view .LVU418
 323:armwave.c     ****     g_armwave_state.target_width = target_width;
 1474              		.loc 1 323 5 view .LVU419
 324:armwave.c     ****     g_armwave_state.target_height = target_height;
 1475              		.loc 1 324 5 view .LVU420
 325:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1476              		.loc 1 325 5 view .LVU421
 326:armwave.c     **** 
 1477              		.loc 1 326 5 view .LVU422
 329:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1478              		.loc 1 329 5 view .LVU423
 1479              		.loc 1 332 5 view .LVU424
 1480 06d0 FEFFFFEB 		bl	printf		@
 1481              	.LVL73:
 333:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 334:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 335:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 336:armwave.c     **** 
 337:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 338:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 339:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 340:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1482              		.loc 1 340 5 view .LVU425
 1483              	@ armwave.c:342:     if(g_armwave_state.ch1_buffer != NULL)
 341:armwave.c     **** 
 342:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1484              		.loc 1 342 23 is_stmt 0 view .LVU426
 1485 06d4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1486              	@ armwave.c:340:     g_armwave_state.slice_height = 256; // 64;  
 340:armwave.c     **** 
 1487              		.loc 1 340 34 view .LVU427
 1488 06d8 013CA0E3 		mov	r3, #256	@ tmp204,
 1489              	@ armwave.c:342:     if(g_armwave_state.ch1_buffer != NULL)
 1490              		.loc 1 342 7 view .LVU428
 1491 06dc 000050E3 		cmp	r0, #0	@ _20,
 1492              	@ armwave.c:340:     g_armwave_state.slice_height = 256; // 64;  
 340:armwave.c     **** 
 1493              		.loc 1 340 34 view .LVU429
 1494 06e0 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1495              		.loc 1 342 5 is_stmt 1 view .LVU430
 1496              	@ armwave.c:342:     if(g_armwave_state.ch1_buffer != NULL)
 1497              		.loc 1 342 7 is_stmt 0 view .LVU431
 1498 06e4 0000000A 		beq	.L67		@,
 343:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1499              		.loc 1 343 9 is_stmt 1 view .LVU432
 1500 06e8 FEFFFFEB 		bl	free		@
 1501              	.LVL74:
 1502              	.L67:
 344:armwave.c     **** 
 345:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1503              		.loc 1 345 5 view .LVU433
 1504              	@ armwave.c:345:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1505              		.loc 1 345 34 is_stmt 0 view .LVU434
 1506 06ec 0110A0E3 		mov	r1, #1	@,
 1507 06f0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1508 06f4 FEFFFFEB 		bl	calloc		@
 1509              	.LVL75:
 1510              	@ armwave.c:347:     assert(g_armwave_state.ch1_buffer != NULL);
 346:armwave.c     **** 
 347:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1511              		.loc 1 347 5 view .LVU435
 1512 06f8 000050E3 		cmp	r0, #0	@ _23,
 1513              	@ armwave.c:345:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 345:armwave.c     **** 
 1514              		.loc 1 345 34 view .LVU436
 1515 06fc 0070A0E1 		mov	r7, r0	@ _23,
 1516              	@ armwave.c:345:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 345:armwave.c     **** 
 1517              		.loc 1 345 32 view .LVU437
 1518 0700 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1519              		.loc 1 347 5 is_stmt 1 view .LVU438
 1520 0704 3600000A 		beq	.L77		@,
 348:armwave.c     **** 
 349:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 350:armwave.c     ****     length = end_point - start_point;
 1521              		.loc 1 350 5 view .LVU439
 1522              	.LVL76:
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1523              		.loc 1 351 5 view .LVU440
 1524              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 1525              		.loc 1 351 34 is_stmt 0 view .LVU441
 1526 0708 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1527              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 1528              		.loc 1 351 22 view .LVU442
 1529 070c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1530              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1531              		.loc 1 352 60 view .LVU443
 1532 0710 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1533              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 353:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1534              		.loc 1 353 40 view .LVU444
 1535 0714 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1536              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1537              		.loc 1 351 34 view .LVU445
 1538 0718 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1539              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1540              		.loc 1 351 22 view .LVU446
 1541 071c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1542              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1543              		.loc 1 352 60 view .LVU447
 1544 0720 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1545              	@ armwave.c:351:     points_per_pixel = length / ((float)(target_width));
 351:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1546              		.loc 1 351 22 view .LVU448
 1547 0724 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1548              	.LVL77:
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1549              		.loc 1 352 5 is_stmt 1 view .LVU449
 1550              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1551              		.loc 1 352 60 is_stmt 0 view .LVU450
 1552 0728 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1553              	@ armwave.c:352:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 352:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1554              		.loc 1 352 41 view .LVU451
 1555 072c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1556 0730 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1557              		.loc 1 353 5 is_stmt 1 view .LVU452
 1558              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1559              		.loc 1 353 40 is_stmt 0 view .LVU453
 1560 0734 FEFFFFEB 		bl	malloc		@
 1561              	.LVL78:
 1562              	@ armwave.c:355:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 354:armwave.c     **** 
 355:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1563              		.loc 1 355 5 view .LVU454
 1564 0738 000050E3 		cmp	r0, #0	@ _31,
 1565              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 353:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1566              		.loc 1 353 40 view .LVU455
 1567 073c 0060A0E1 		mov	r6, r0	@ _31,
 1568              	@ armwave.c:353:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 353:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1569              		.loc 1 353 38 view .LVU456
 1570 0740 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1571              		.loc 1 355 5 is_stmt 1 view .LVU457
 1572 0744 2100000A 		beq	.L78		@,
 1573              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 356:armwave.c     **** 
 357:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 358:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 358 54 is_stmt 0 view .LVU458
 1575 0748 2C7ADFED 		vldr.32	s15, .L79+8	@ tmp231,
 1576 074c 020040E2 		sub	r0, r0, #2	@ ivtmp.71, _31,
 1577              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1578              		.loc 1 357 12 view .LVU459
 1579 0750 0030A0E3 		mov	r3, #0	@ xx,
 1580              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1581              		.loc 1 358 54 view .LVU460
 1582 0754 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1583              	.L70:
 1584              	.LVL79:
 1585              		.loc 1 358 9 is_stmt 1 discriminator 3 view .LVU461
 1586              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1587              		.loc 1 358 74 is_stmt 0 discriminator 3 view .LVU462
 1588 0758 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1589              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1590              		.loc 1 357 32 discriminator 3 view .LVU463
 1591 075c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1592              	.LVL80:
 1593              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1594              		.loc 1 357 5 discriminator 3 view .LVU464
 1595 0760 030055E1 		cmp	r5, r3	@ _13, xx
 1596              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1597              		.loc 1 358 74 discriminator 3 view .LVU465
 1598 0764 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1599 0768 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1600              	@ armwave.c:358:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1601              		.loc 1 358 46 discriminator 3 view .LVU466
 1602 076c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1603 0770 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1604 0774 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1605              	@ armwave.c:357:     for(xx = 0; xx < length; xx++) {
 357:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1606              		.loc 1 357 5 discriminator 3 view .LVU467
 1607 0778 F6FFFF1A 		bne	.L70		@,
 359:armwave.c     **** 
 360:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 361:armwave.c     ****     }
 362:armwave.c     **** 
 363:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1608              		.loc 1 363 5 is_stmt 1 view .LVU468
 1609              	@ armwave.c:363:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1610              		.loc 1 363 34 is_stmt 0 view .LVU469
 1611 077c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1612 0780 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1613 0784 FEFFFFEB 		bl	malloc		@
 1614              	.LVL81:
 1615              	@ armwave.c:365:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 364:armwave.c     **** 
 365:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1616              		.loc 1 365 5 view .LVU470
 1617 0788 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1618 078c 0620A0E1 		mov	r2, r6	@, _31
 1619 0790 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1620 0794 0710A0E1 		mov	r1, r7	@, _23
 1621              	@ armwave.c:363:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 363:armwave.c     **** 
 1622              		.loc 1 363 34 view .LVU471
 1623 0798 00C0A0E1 		mov	ip, r0	@ tmp238,
 1624              	@ armwave.c:365:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1625              		.loc 1 365 5 view .LVU472
 1626 079c 0030A0E1 		mov	r3, r0	@, tmp238
 1627              	@ armwave.c:363:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 363:armwave.c     **** 
 1628              		.loc 1 363 32 view .LVU473
 1629 07a0 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1630              		.loc 1 365 5 is_stmt 1 view .LVU474
 1631 07a4 64009FE5 		ldr	r0, .L79+24	@,
 1632 07a8 FEFFFFEB 		bl	printf		@
 1633              	.LVL82:
 366:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 367:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 368:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 369:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 370:armwave.c     **** 
 371:armwave.c     ****     malloc_stats();
 1634              		.loc 1 371 5 view .LVU475
 1635              	@ armwave.c:372: }
 372:armwave.c     **** }
 1636              		.loc 1 372 1 is_stmt 0 view .LVU476
 1637 07ac 14D08DE2 		add	sp, sp, #20	@,,
 1638              		.cfi_remember_state
 1639              		.cfi_def_cfa_offset 36
 1640              		@ sp needed	@
 1641 07b0 028BBDEC 		vldm	sp!, {d8}	@
 1642              		.cfi_restore 80
 1643              		.cfi_restore 81
 1644              		.cfi_def_cfa_offset 28
 1645              	.LVL83:
 1646              		.loc 1 372 1 view .LVU477
 1647 07b4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1648              		.cfi_restore 14
 1649              		.cfi_restore 9
 1650              		.cfi_restore 8
 1651              		.cfi_restore 7
 1652              		.cfi_restore 6
 1653              		.cfi_restore 5
 1654              		.cfi_restore 4
 1655              		.cfi_def_cfa_offset 0
 1656              	.LVL84:
 1657              	@ armwave.c:371:     malloc_stats();
 371:armwave.c     **** }
 1658              		.loc 1 371 5 view .LVU478
 1659 07b8 FEFFFFEA 		b	malloc_stats		@
 1660              	.LVL85:
 1661              	.L76:
 1662              		.cfi_restore_state
 294:armwave.c     **** 
 1663              		.loc 1 294 5 is_stmt 1 discriminator 1 view .LVU479
 1664 07bc 50309FE5 		ldr	r3, .L79+28	@,
 1665 07c0 50209FE5 		ldr	r2, .L79+32	@,
 1666 07c4 50109FE5 		ldr	r1, .L79+36	@,
 1667 07c8 50009FE5 		ldr	r0, .L79+40	@,
 1668 07cc FEFFFFEB 		bl	__assert_fail		@
 1669              	.LVL86:
 1670              	.L78:
 355:armwave.c     **** 
 1671              		.loc 1 355 5 discriminator 1 view .LVU480
 1672 07d0 3C309FE5 		ldr	r3, .L79+28	@,
 1673 07d4 48209FE5 		ldr	r2, .L79+44	@,
 1674 07d8 3C109FE5 		ldr	r1, .L79+36	@,
 1675 07dc 44009FE5 		ldr	r0, .L79+48	@,
 1676 07e0 FEFFFFEB 		bl	__assert_fail		@
 1677              	.LVL87:
 1678              	.L77:
 347:armwave.c     **** 
 1679              		.loc 1 347 5 discriminator 1 view .LVU481
 1680 07e4 28309FE5 		ldr	r3, .L79+28	@,
 1681 07e8 3C209FE5 		ldr	r2, .L79+52	@,
 1682 07ec 28109FE5 		ldr	r1, .L79+36	@,
 1683 07f0 38009FE5 		ldr	r0, .L79+56	@,
 1684 07f4 FEFFFFEB 		bl	__assert_fail		@
 1685              	.LVL88:
 1686              	.L80:
 1687              		.align	2
 1688              	.L79:
 1689 07f8 00007F43 		.word	1132396544
 1690 07fc 00008047 		.word	1199570944
 1691 0800 0000803F 		.word	1065353216
 1692 0804 40000000 		.word	.LC4
 1693 0808 00000000 		.word	g_armwave_state
 1694 080c 84000000 		.word	.LC6
 1695 0810 34010000 		.word	.LC9
 1696 0814 1C000000 		.word	.LANCHOR0+28
 1697 0818 26010000 		.word	294
 1698 081c 20000000 		.word	.LC2
 1699 0820 6C000000 		.word	.LC5
 1700 0824 63010000 		.word	355
 1701 0828 08010000 		.word	.LC8
 1702 082c 5B010000 		.word	347
 1703 0830 E4000000 		.word	.LC7
 1704              		.cfi_endproc
 1705              	.LFE62:
 1707              		.align	2
 1708              		.global	armwave_set_wave_pointer
 1709              		.syntax unified
 1710              		.arm
 1711              		.fpu vfp
 1713              	armwave_set_wave_pointer:
 1714              	.LVL89:
 1715              	.LFB63:
 373:armwave.c     **** 
 374:armwave.c     **** /*
 375:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 376:armwave.c     ****  * in the future.
 377:armwave.c     ****  */
 378:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 379:armwave.c     **** {
 1716              		.loc 1 379 1 view -0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1720              		.loc 1 380 5 view .LVU483
 1721 0834 000050E3 		cmp	r0, #0	@ wave_buffer
 1722              		.loc 1 380 5 is_stmt 0 view .LVU484
 1723 0838 0200000A 		beq	.L86		@,
 381:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1724              		.loc 1 381 5 is_stmt 1 view .LVU485
 1725              	@ armwave.c:381:     g_armwave_state.wave_buffer = wave_buffer;
 1726              		.loc 1 381 33 is_stmt 0 view .LVU486
 1727 083c 1C309FE5 		ldr	r3, .L87	@ tmp115,
 1728 0840 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1729 0844 1EFF2FE1 		bx	lr	@
 1730              	.L86:
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1731              		.loc 1 380 5 is_stmt 1 discriminator 1 view .LVU487
 1732              	@ armwave.c:379: {
 379:armwave.c     ****     assert(wave_buffer != NULL);
 1733              		.loc 1 379 1 is_stmt 0 discriminator 1 view .LVU488
 1734 0848 10402DE9 		push	{r4, lr}	@
 1735              		.cfi_def_cfa_offset 8
 1736              		.cfi_offset 4, -8
 1737              		.cfi_offset 14, -4
 1738              	@ armwave.c:380:     assert(wave_buffer != NULL);
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1739              		.loc 1 380 5 discriminator 1 view .LVU489
 1740 084c 5F2FA0E3 		mov	r2, #380	@,
 1741 0850 0C309FE5 		ldr	r3, .L87+4	@,
 1742 0854 0C109FE5 		ldr	r1, .L87+8	@,
 1743 0858 0C009FE5 		ldr	r0, .L87+12	@,
 1744              	.LVL90:
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1745              		.loc 1 380 5 discriminator 1 view .LVU490
 1746 085c FEFFFFEB 		bl	__assert_fail		@
 1747              	.LVL91:
 1748              	.L88:
 1749              		.align	2
 1750              	.L87:
 1751 0860 00000000 		.word	g_armwave_state
 1752 0864 34000000 		.word	.LANCHOR0+52
 1753 0868 20000000 		.word	.LC2
 1754 086c 58010000 		.word	.LC10
 1755              		.cfi_endproc
 1756              	.LFE63:
 1758              		.align	2
 1759              		.global	armwave_set_wave_pointer_as_testbuf
 1760              		.syntax unified
 1761              		.arm
 1762              		.fpu vfp
 1764              	armwave_set_wave_pointer_as_testbuf:
 1765              	.LVL92:
 1766              	.LFB64:
 382:armwave.c     **** }
 383:armwave.c     **** 
 384:armwave.c     **** /*
 385:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 386:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 387:armwave.c     ****  */
 388:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 389:armwave.c     **** {
 1767              		.loc 1 389 1 is_stmt 1 view -0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              		@ link register save eliminated.
 390:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1772              		.loc 1 390 5 view .LVU492
 1773              	@ armwave.c:390:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1774              		.loc 1 390 29 is_stmt 0 view .LVU493
 1775 0870 24309FE5 		ldr	r3, .L92	@ tmp117,
 1776              	@ armwave.c:390:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1777              		.loc 1 390 7 view .LVU494
 1778 0874 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1779 0878 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1780 087c 0400003A 		bcc	.L91		@,
 391:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 392:armwave.c     ****         return;
 393:armwave.c     ****     }
 394:armwave.c     **** 
 395:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1781              		.loc 1 395 5 is_stmt 1 view .LVU495
 1782              	@ armwave.c:395:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1783              		.loc 1 395 111 is_stmt 0 view .LVU496
 1784 0880 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1785              	@ armwave.c:395:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1786              		.loc 1 395 68 view .LVU497
 1787 0884 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1788 0888 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1789              	.LVL93:
 1790              	@ armwave.c:395:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1791              		.loc 1 395 33 view .LVU498
 1792 088c 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1793              	@ armwave.c:396: }
 396:armwave.c     **** }
 1794              		.loc 1 396 1 view .LVU499
 1795 0890 1EFF2FE1 		bx	lr	@
 1796              	.LVL94:
 1797              	.L91:
 391:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1798              		.loc 1 391 9 is_stmt 1 view .LVU500
 1799 0894 04009FE5 		ldr	r0, .L92+4	@,
 1800              	.LVL95:
 391:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1801              		.loc 1 391 9 is_stmt 0 view .LVU501
 1802 0898 FEFFFFEA 		b	puts		@
 1803              	.LVL96:
 1804              	.L93:
 1805              		.align	2
 1806              	.L92:
 1807 089c 00000000 		.word	g_armwave_state
 1808 08a0 6C010000 		.word	.LC11
 1809              		.cfi_endproc
 1810              	.LFE64:
 1812              		.align	2
 1813              		.global	armwave_set_wave_pointer_u32
 1814              		.syntax unified
 1815              		.arm
 1816              		.fpu vfp
 1818              	armwave_set_wave_pointer_u32:
 1819              	.LVL97:
 1820              	.LFB65:
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 400:armwave.c     ****  * disjointed buffers in the future.
 401:armwave.c     ****  */
 402:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 403:armwave.c     **** {
 1821              		.loc 1 403 1 is_stmt 1 view -0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1825              		.loc 1 404 5 view .LVU503
 1826 08a4 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1827              		.loc 1 404 5 is_stmt 0 view .LVU504
 1828 08a8 0200000A 		beq	.L99		@,
 405:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1829              		.loc 1 405 5 is_stmt 1 view .LVU505
 1830              	@ armwave.c:405:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1831              		.loc 1 405 33 is_stmt 0 view .LVU506
 1832 08ac 1C309FE5 		ldr	r3, .L100	@ tmp116,
 1833 08b0 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1834 08b4 1EFF2FE1 		bx	lr	@
 1835              	.L99:
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1836              		.loc 1 404 5 is_stmt 1 discriminator 1 view .LVU507
 1837              	@ armwave.c:403: {
 403:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1838              		.loc 1 403 1 is_stmt 0 discriminator 1 view .LVU508
 1839 08b8 10402DE9 		push	{r4, lr}	@
 1840              		.cfi_def_cfa_offset 8
 1841              		.cfi_offset 4, -8
 1842              		.cfi_offset 14, -4
 1843              	@ armwave.c:404:     assert(wave_buffer_ptr != 0);
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1844              		.loc 1 404 5 discriminator 1 view .LVU509
 1845 08bc 652FA0E3 		mov	r2, #404	@,
 1846 08c0 0C309FE5 		ldr	r3, .L100+4	@,
 1847 08c4 0C109FE5 		ldr	r1, .L100+8	@,
 1848 08c8 0C009FE5 		ldr	r0, .L100+12	@,
 1849              	.LVL98:
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1850              		.loc 1 404 5 discriminator 1 view .LVU510
 1851 08cc FEFFFFEB 		bl	__assert_fail		@
 1852              	.LVL99:
 1853              	.L101:
 1854              		.align	2
 1855              	.L100:
 1856 08d0 00000000 		.word	g_armwave_state
 1857 08d4 50000000 		.word	.LANCHOR0+80
 1858 08d8 20000000 		.word	.LC2
 1859 08dc A8010000 		.word	.LC12
 1860              		.cfi_endproc
 1861              	.LFE65:
 1863              		.align	2
 1864              		.global	armwave_clear_buffer
 1865              		.syntax unified
 1866              		.arm
 1867              		.fpu vfp
 1869              	armwave_clear_buffer:
 1870              	.LVL100:
 1871              	.LFB66:
 406:armwave.c     **** }
 407:armwave.c     **** 
 408:armwave.c     **** /*
 409:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 410:armwave.c     ****  */
 411:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 412:armwave.c     **** {
 1872              		.loc 1 412 1 is_stmt 1 view -0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              		@ link register save eliminated.
 413:armwave.c     ****     // Flags ignored, only one buffer cleared
 414:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1877              		.loc 1 414 5 view .LVU512
 1878              	@ armwave.c:414:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1879              		.loc 1 414 58 is_stmt 0 view .LVU513
 1880 08e0 0C309FE5 		ldr	r3, .L103	@ tmp114,
 1881              	@ armwave.c:414:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1882              		.loc 1 414 5 view .LVU514
 1883 08e4 0010A0E3 		mov	r1, #0	@,
 1884 08e8 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1885 08ec 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1886              	.LVL101:
 1887              		.loc 1 414 5 view .LVU515
 1888 08f0 FEFFFFEA 		b	memset		@
 1889              	.LVL102:
 1890              	.L104:
 1891              		.align	2
 1892              	.L103:
 1893 08f4 00000000 		.word	g_armwave_state
 1894              		.cfi_endproc
 1895              	.LFE66:
 1897              		.align	2
 1898              		.global	armwave_set_channel_colour
 1899              		.syntax unified
 1900              		.arm
 1901              		.fpu vfp
 1903              	armwave_set_channel_colour:
 1904              	.LVL103:
 1905              	.LFB67:
 415:armwave.c     **** }
 416:armwave.c     **** 
 417:armwave.c     **** /*
 418:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 419:armwave.c     ****  */
 420:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 421:armwave.c     **** {
 1906              		.loc 1 421 1 is_stmt 1 view -0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 422:armwave.c     ****     // Only 1ch supported for now
 423:armwave.c     ****     switch(ch) {
 1911              		.loc 1 423 5 view .LVU517
 1912 08f8 010050E3 		cmp	r0, #1	@ ch,
 424:armwave.c     ****         case 1:
 425:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1913              		.loc 1 425 13 view .LVU518
 1914              	@ armwave.c:425:             g_armwave_state.ch1_color.r = r;
 1915              		.loc 1 425 41 is_stmt 0 view .LVU519
 1916 08fc 0C009F05 		ldreq	r0, .L107	@ tmp117,
 1917              	.LVL104:
 1918              		.loc 1 425 41 view .LVU520
 1919 0900 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 426:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1920              		.loc 1 426 13 is_stmt 1 view .LVU521
 1921              	@ armwave.c:426:             g_armwave_state.ch1_color.g = g;
 1922              		.loc 1 426 41 is_stmt 0 view .LVU522
 1923 0904 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 427:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1924              		.loc 1 427 13 is_stmt 1 view .LVU523
 1925              	@ armwave.c:427:             g_armwave_state.ch1_color.b = b;
 1926              		.loc 1 427 41 is_stmt 0 view .LVU524
 1927 0908 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 428:armwave.c     ****             break;
 1928              		.loc 1 428 13 is_stmt 1 view .LVU525
 1929              	@ armwave.c:430: }
 429:armwave.c     ****     }
 430:armwave.c     **** }
 1930              		.loc 1 430 1 is_stmt 0 view .LVU526
 1931 090c 1EFF2FE1 		bx	lr	@
 1932              	.L108:
 1933              		.align	2
 1934              	.L107:
 1935 0910 00000000 		.word	g_armwave_state
 1936              		.cfi_endproc
 1937              	.LFE67:
 1939              		.align	2
 1940              		.global	armwave_dump_ppm_debug
 1941              		.syntax unified
 1942              		.arm
 1943              		.fpu vfp
 1945              	armwave_dump_ppm_debug:
 1946              	.LVL105:
 1947              	.LFB68:
 431:armwave.c     **** 
 432:armwave.c     **** /*
 433:armwave.c     ****  * Dump a ppm of a buffer to a file.
 434:armwave.c     ****  */
 435:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 436:armwave.c     **** {
 1948              		.loc 1 436 1 is_stmt 1 view -0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 437:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1952              		.loc 1 437 5 view .LVU528
 1953              	@ armwave.c:436: {
 436:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1954              		.loc 1 436 1 is_stmt 0 view .LVU529
 1955 0914 0130A0E1 		mov	r3, r1	@ fn, fn
 1956 0918 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1957              		.cfi_def_cfa_offset 28
 1958              		.cfi_offset 4, -28
 1959              		.cfi_offset 5, -24
 1960              		.cfi_offset 6, -20
 1961              		.cfi_offset 7, -16
 1962              		.cfi_offset 8, -12
 1963              		.cfi_offset 9, -8
 1964              		.cfi_offset 14, -4
 1965 091c 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1966 0920 0CD04DE2 		sub	sp, sp, #12	@,,
 1967              		.cfi_def_cfa_offset 40
 1968              	@ armwave.c:437:     FILE *fp = fopen(fn, "wb");
 1969              		.loc 1 437 16 view .LVU530
 1970 0924 C4109FE5 		ldr	r1, .L117	@,
 1971              	.LVL106:
 1972              		.loc 1 437 16 view .LVU531
 1973 0928 0300A0E1 		mov	r0, r3	@, fn
 1974              	.LVL107:
 1975              		.loc 1 437 16 view .LVU532
 1976 092c FEFFFFEB 		bl	fopen64		@
 1977              	.LVL108:
 1978              	@ armwave.c:444:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 438:armwave.c     ****     uint32_t data;
 439:armwave.c     ****     int xx, yy;
 440:armwave.c     **** 
 441:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 442:armwave.c     **** 
 443:armwave.c     ****     fputs("P3\n", fp);
 444:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1979              		.loc 1 444 5 view .LVU533
 1980 0930 BC609FE5 		ldr	r6, .L117+4	@ tmp150,
 1981              	@ armwave.c:443:     fputs("P3\n", fp);
 443:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1982              		.loc 1 443 5 view .LVU534
 1983 0934 0320A0E3 		mov	r2, #3	@,
 1984 0938 0110A0E3 		mov	r1, #1	@,
 1985              	@ armwave.c:437:     FILE *fp = fopen(fn, "wb");
 437:armwave.c     ****     uint32_t data;
 1986              		.loc 1 437 16 view .LVU535
 1987 093c 0070A0E1 		mov	r7, r0	@ fp,
 1988              	.LVL109:
 438:armwave.c     ****     uint32_t data;
 1989              		.loc 1 438 5 is_stmt 1 view .LVU536
 439:armwave.c     **** 
 1990              		.loc 1 439 5 view .LVU537
 443:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1991              		.loc 1 443 5 view .LVU538
 1992 0940 0030A0E1 		mov	r3, r0	@, fp
 1993 0944 AC009FE5 		ldr	r0, .L117+8	@,
 1994              	.LVL110:
 443:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1995              		.loc 1 443 5 is_stmt 0 view .LVU539
 1996 0948 FEFFFFEB 		bl	fwrite		@
 1997              	.LVL111:
 1998              		.loc 1 444 5 is_stmt 1 view .LVU540
 1999 094c D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2000 0950 A4109FE5 		ldr	r1, .L117+12	@,
 2001 0954 0700A0E1 		mov	r0, r7	@, fp
 2002 0958 FEFFFFEB 		bl	fprintf		@
 2003              	.LVL112:
 445:armwave.c     ****     fputs("255\n", fp);
 2004              		.loc 1 445 5 view .LVU541
 2005 095c 0420A0E3 		mov	r2, #4	@,
 2006 0960 0730A0E1 		mov	r3, r7	@, fp
 2007 0964 0110A0E3 		mov	r1, #1	@,
 2008 0968 90009FE5 		ldr	r0, .L117+16	@,
 2009 096c FEFFFFEB 		bl	fwrite		@
 2010              	.LVL113:
 446:armwave.c     **** 
 447:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2011              		.loc 1 447 5 view .LVU542
 2012              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2013              		.loc 1 447 37 is_stmt 0 view .LVU543
 2014 0970 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2015              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2016              		.loc 1 447 5 view .LVU544
 2017 0974 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2018 0978 180000DA 		ble	.L110		@,
 2019 097c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2020              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 450:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 451:armwave.c     **** 
 452:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2021              		.loc 1 452 13 view .LVU545
 2022 0980 7C909FE5 		ldr	r9, .L117+20	@ tmp152,
 2023              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 447:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2024              		.loc 1 447 12 view .LVU546
 2025 0984 0050A0E3 		mov	r5, #0	@ yy,
 2026              	.LVL114:
 2027              	.L111:
 2028              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2029              		.loc 1 448 9 view .LVU547
 2030 0988 000053E3 		cmp	r3, #0	@ _13,
 2031              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2032              		.loc 1 448 16 view .LVU548
 2033 098c 0040A0C3 		movgt	r4, #0	@ xx,
 2034              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2035              		.loc 1 448 9 view .LVU549
 2036 0990 0F0000DA 		ble	.L113		@,
 2037              	.LVL115:
 2038              	.L112:
 449:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2039              		.loc 1 449 13 is_stmt 1 discriminator 3 view .LVU550
 2040              	@ armwave.c:449:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 449:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2041              		.loc 1 449 29 is_stmt 0 discriminator 3 view .LVU551
 2042 0994 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2043              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2044              		.loc 1 452 13 discriminator 3 view .LVU552
 2045 0998 0910A0E1 		mov	r1, r9	@, tmp152
 2046 099c 0700A0E1 		mov	r0, r7	@, fp
 2047              	@ armwave.c:449:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 449:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2048              		.loc 1 449 18 discriminator 3 view .LVU553
 2049 09a0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2050              	.LVL116:
 2051              		.loc 1 452 13 is_stmt 1 discriminator 3 view .LVU554
 2052              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2053              		.loc 1 448 58 is_stmt 0 discriminator 3 view .LVU555
 2054 09a4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2055              	.LVL117:
 2056              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2057              		.loc 1 452 81 discriminator 3 view .LVU556
 2058 09a8 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2059              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2060              		.loc 1 452 61 discriminator 3 view .LVU557
 2061 09ac 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2062              	@ armwave.c:452:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2063              		.loc 1 452 13 discriminator 3 view .LVU558
 2064 09b0 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2065 09b4 7330EFE6 		uxtb	r3, r3	@, tmp142
 2066 09b8 00C08DE5 		str	ip, [sp]	@ tmp147,
 2067 09bc 7220EFE6 		uxtb	r2, r2	@, data
 2068              	.LVL118:
 2069              		.loc 1 452 13 discriminator 3 view .LVU559
 2070 09c0 FEFFFFEB 		bl	fprintf		@
 2071              	.LVL119:
 2072              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2073              		.loc 1 448 41 discriminator 3 view .LVU560
 2074 09c4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2075              	@ armwave.c:448:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2076              		.loc 1 448 9 discriminator 3 view .LVU561
 2077 09c8 040053E1 		cmp	r3, r4	@ _13, xx
 2078 09cc F0FFFFCA 		bgt	.L112		@,
 2079 09d0 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2080              	.LVL120:
 2081              	.L113:
 2082              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 447:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2083              		.loc 1 447 55 discriminator 2 view .LVU562
 2084 09d4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2085              	.LVL121:
 2086              	@ armwave.c:447:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 447:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2087              		.loc 1 447 5 discriminator 2 view .LVU563
 2088 09d8 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2089 09dc E9FFFFBA 		blt	.L111		@,
 2090              	.LVL122:
 2091              	.L110:
 453:armwave.c     ****         }
 454:armwave.c     ****     }
 455:armwave.c     **** 
 456:armwave.c     ****     fclose(fp);
 2092              		.loc 1 456 5 is_stmt 1 view .LVU564
 2093 09e0 0700A0E1 		mov	r0, r7	@, fp
 2094              	@ armwave.c:457: }
 457:armwave.c     **** }
 2095              		.loc 1 457 1 is_stmt 0 view .LVU565
 2096 09e4 0CD08DE2 		add	sp, sp, #12	@,,
 2097              		.cfi_def_cfa_offset 28
 2098              		@ sp needed	@
 2099 09e8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2100              		.cfi_restore 14
 2101              		.cfi_restore 9
 2102              		.cfi_restore 8
 2103              		.cfi_restore 7
 2104              		.cfi_restore 6
 2105              		.cfi_restore 5
 2106              		.cfi_restore 4
 2107              		.cfi_def_cfa_offset 0
 2108              	.LVL123:
 2109              	@ armwave.c:456:     fclose(fp);
 456:armwave.c     **** }
 2110              		.loc 1 456 5 view .LVU566
 2111 09ec FEFFFFEA 		b	fclose		@
 2112              	.LVL124:
 2113              	.L118:
 456:armwave.c     **** }
 2114              		.loc 1 456 5 view .LVU567
 2115              		.align	2
 2116              	.L117:
 2117 09f0 C0010000 		.word	.LC13
 2118 09f4 00000000 		.word	g_armwave_state
 2119 09f8 C4010000 		.word	.LC14
 2120 09fc C8010000 		.word	.LC15
 2121 0a00 D0010000 		.word	.LC16
 2122 0a04 D8010000 		.word	.LC17
 2123              		.cfi_endproc
 2124              	.LFE68:
 2126              		.align	2
 2127              		.global	armwave_test_init
 2128              		.syntax unified
 2129              		.arm
 2130              		.fpu vfp
 2132              	armwave_test_init:
 2133              	.LVL125:
 2134              	.LFB69:
 458:armwave.c     **** 
 459:armwave.c     **** /*
 460:armwave.c     ****  * Initialise some test functionry.
 461:armwave.c     ****  */
 462:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 463:armwave.c     **** {
 2135              		.loc 1 463 1 is_stmt 1 view -0
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 0
 2138              		@ frame_needed = 0, uses_anonymous_args = 0
 464:armwave.c     ****     test_create_gamma();
 2139              		.loc 1 464 5 view .LVU569
 2140              	.LBB18:
 2141              	.LBI18:
  34:armwave.c     **** {
 2142              		.loc 1 34 6 view .LVU570
  34:armwave.c     **** {
 2143              		.loc 1 34 6 is_stmt 0 view .LVU571
 2144              	.LBE18:
 2145              	@ armwave.c:463: {
 463:armwave.c     ****     test_create_gamma();
 2146              		.loc 1 463 1 view .LVU572
 2147 0a08 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2148              		.cfi_def_cfa_offset 32
 2149              		.cfi_offset 4, -32
 2150              		.cfi_offset 5, -28
 2151              		.cfi_offset 6, -24
 2152              		.cfi_offset 7, -20
 2153              		.cfi_offset 8, -16
 2154              		.cfi_offset 9, -12
 2155              		.cfi_offset 10, -8
 2156              		.cfi_offset 14, -4
 2157 0a0c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2158              		.cfi_def_cfa_offset 56
 2159              		.cfi_offset 80, -56
 2160              		.cfi_offset 81, -52
 2161              		.cfi_offset 82, -48
 2162              		.cfi_offset 83, -44
 2163              		.cfi_offset 84, -40
 2164              		.cfi_offset 85, -36
 2165 0a10 BC409FE5 		ldr	r4, .L123+20	@ ivtmp.85,
 2166              	.LBB21:
 2167              	.LBB19:
 2168              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2169              		.loc 1 40 32 view .LVU573
 2170 0a14 2DAA9FED 		vldr.32	s20, .L123+16	@ tmp136,
 2171              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2172              		.loc 1 40 26 view .LVU574
 2173 0a18 289B9FED 		vldr.64	d9, .L123	@ tmp151,
 2174              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2175              		.loc 1 40 49 view .LVU575
 2176 0a1c 298B9FED 		vldr.64	d8, .L123+8	@ tmp139,
 2177 0a20 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.85,
 2178              	.LBE19:
 2179              	.LBE21:
 2180              	@ armwave.c:463: {
 463:armwave.c     ****     test_create_gamma();
 2181              		.loc 1 463 1 view .LVU576
 2182 0a24 10D04DE2 		sub	sp, sp, #16	@,,
 2183              		.cfi_def_cfa_offset 72
 2184              	@ armwave.c:463: {
 463:armwave.c     ****     test_create_gamma();
 2185              		.loc 1 463 1 view .LVU577
 2186 0a28 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2187 0a2c 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2188 0a30 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2189 0a34 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2190 0a38 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.85,
 2191 0a3c 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2192              	.LVL126:
 2193              	.L120:
 2194              	.LBB22:
 2195              	.LBB20:
  40:armwave.c     ****     }
 2196              		.loc 1 40 9 is_stmt 1 view .LVU578
 2197              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2198              		.loc 1 40 32 is_stmt 0 view .LVU579
 2199 0a40 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.85
 2200              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2201              		.loc 1 40 26 view .LVU580
 2202 0a44 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2203              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2204              		.loc 1 40 32 view .LVU581
 2205 0a48 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2206 0a4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2207 0a50 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2208              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2209              		.loc 1 40 26 view .LVU582
 2210 0a54 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2211 0a58 FEFFFFEB 		bl	pow		@
 2212              	.LVL127:
 2213              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2214              		.loc 1 40 49 view .LVU583
 2215 0a5c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2216              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2217              		.loc 1 40 24 view .LVU584
 2218 0a60 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2219 0a64 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2220 0a68 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2221              	.LVL128:
 2222              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2223              		.loc 1 39 5 view .LVU585
 2224 0a6c 0A0054E1 		cmp	r4, r10	@ ivtmp.85, _39
 2225 0a70 F2FFFF1A 		bne	.L120		@,
 2226              	.LVL129:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2227              		.loc 1 39 5 view .LVU586
 2228              	.LBE20:
 2229              	.LBE22:
 465:armwave.c     **** 
 466:armwave.c     ****     // make ch1 yellowish by default
 467:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2230              		.loc 1 467 5 is_stmt 1 view .LVU587
 2231              	.LBB23:
 2232              	.LBI23:
 420:armwave.c     **** {
 2233              		.loc 1 420 6 view .LVU588
 2234              	.LBB24:
 423:armwave.c     ****         case 1:
 2235              		.loc 1 423 5 view .LVU589
 425:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2236              		.loc 1 425 13 view .LVU590
 426:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2237              		.loc 1 426 13 view .LVU591
 2238              	@ armwave.c:425:             g_armwave_state.ch1_color.r = r;
 425:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2239              		.loc 1 425 41 is_stmt 0 view .LVU592
 2240 0a74 5CC09FE5 		ldr	ip, .L123+24	@ tmp142,
 2241 0a78 5C409FE5 		ldr	r4, .L123+28	@ tmp143,
 2242              	.LBE24:
 2243              	.LBE23:
 2244              	@ armwave.c:469:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 468:armwave.c     **** 
 469:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2245              		.loc 1 469 5 view .LVU593
 2246 0a7c 0000A0E3 		mov	r0, #0	@ tmp147,
 2247              	.LBB28:
 2248              	.LBB25:
 2249              	@ armwave.c:427:             g_armwave_state.ch1_color.b = b;
 427:armwave.c     ****             break;
 2250              		.loc 1 427 41 view .LVU594
 2251 0a80 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2252              	.LBE25:
 2253              	.LBE28:
 2254              	@ armwave.c:469:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2255              		.loc 1 469 5 view .LVU595
 2256 0a84 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2257 0a88 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2258 0a8c 00808DE5 		str	r8, [sp]	@ render_width,
 2259 0a90 0610A0E1 		mov	r1, r6	@, tmp3
 2260 0a94 0720A0E1 		mov	r2, r7	@, nwaves
 2261              	.LBB29:
 2262              	.LBB26:
 2263              	@ armwave.c:425:             g_armwave_state.ch1_color.r = r;
 425:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2264              		.loc 1 425 41 view .LVU596
 2265 0a98 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 427:armwave.c     ****             break;
 2266              		.loc 1 427 13 is_stmt 1 view .LVU597
 2267              	.LBE26:
 2268              	.LBE29:
 2269              	@ armwave.c:469:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2270              		.loc 1 469 5 is_stmt 0 view .LVU598
 2271 0a9c 0630A0E1 		mov	r3, r6	@, wave_size
 2272              	.LBB30:
 2273              	.LBB27:
 2274              	@ armwave.c:427:             g_armwave_state.ch1_color.b = b;
 427:armwave.c     ****             break;
 2275              		.loc 1 427 41 view .LVU599
 2276 0aa0 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 428:armwave.c     ****     }
 2277              		.loc 1 428 13 is_stmt 1 view .LVU600
 2278              	.LVL130:
 428:armwave.c     ****     }
 2279              		.loc 1 428 13 is_stmt 0 view .LVU601
 2280              	.LBE27:
 2281              	.LBE30:
 2282              		.loc 1 469 5 is_stmt 1 view .LVU602
 2283 0aa4 FEFFFFEB 		bl	armwave_setup_render		@
 2284              	.LVL131:
 470:armwave.c     **** 
 471:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2285              		.loc 1 471 5 view .LVU603
 2286 0aa8 30109FE5 		ldr	r1, .L123+32	@,
 2287 0aac 30009FE5 		ldr	r0, .L123+36	@,
 2288              	@ armwave.c:472: }
 472:armwave.c     **** }
 2289              		.loc 1 472 1 is_stmt 0 view .LVU604
 2290 0ab0 10D08DE2 		add	sp, sp, #16	@,,
 2291              		.cfi_def_cfa_offset 56
 2292              		@ sp needed	@
 2293 0ab4 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2294              		.cfi_restore 84
 2295              		.cfi_restore 85
 2296              		.cfi_restore 82
 2297              		.cfi_restore 83
 2298              		.cfi_restore 80
 2299              		.cfi_restore 81
 2300              		.cfi_def_cfa_offset 32
 2301 0ab8 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2302              		.cfi_restore 14
 2303              		.cfi_restore 10
 2304              		.cfi_restore 9
 2305              		.cfi_restore 8
 2306              		.cfi_restore 7
 2307              		.cfi_restore 6
 2308              		.cfi_restore 5
 2309              		.cfi_restore 4
 2310              		.cfi_def_cfa_offset 0
 2311              	.LVL132:
 2312              	@ armwave.c:471:     printf("armwave version: %s\n", ARMWAVE_VER);
 471:armwave.c     **** }
 2313              		.loc 1 471 5 view .LVU605
 2314 0abc FEFFFFEA 		b	printf		@
 2315              	.LVL133:
 2316              	.L124:
 2317              		.align	3
 2318              	.L123:
 2319 0ac0 000000C0 		.word	-1073741824
 2320 0ac4 CCCCEC3F 		.word	1072483532
 2321 0ac8 00000000 		.word	0
 2322 0acc 00E06F40 		.word	1081073664
 2323 0ad0 00007F43 		.word	1132396544
 2324 0ad4 FFFFFFFF 		.word	gamma_table-1
 2325 0ad8 00000000 		.word	g_armwave_state
 2326 0adc F609F406 		.word	116656630
 2327 0ae0 00000000 		.word	.LC0
 2328 0ae4 08000000 		.word	.LC1
 2329              		.cfi_endproc
 2330              	.LFE69:
 2332              		.align	2
 2333              		.global	armwave_test_fill_outbuf
 2334              		.syntax unified
 2335              		.arm
 2336              		.fpu vfp
 2338              	armwave_test_fill_outbuf:
 2339              	.LFB70:
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Render image to the local allocated buffer.
 476:armwave.c     ****  */
 477:armwave.c     **** void armwave_test_fill_outbuf()
 478:armwave.c     **** {
 2340              		.loc 1 478 1 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 2344              		@ link register save eliminated.
 479:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2345              		.loc 1 479 5 view .LVU607
 2346 0ae8 04309FE5 		ldr	r3, .L126	@ tmp111,
 2347 0aec 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2348 0af0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2349              	.LVL134:
 2350              	.L127:
 2351              		.align	2
 2352              	.L126:
 2353 0af4 00000000 		.word	g_armwave_state
 2354              		.cfi_endproc
 2355              	.LFE70:
 2357              		.align	2
 2358              		.global	armwave_test_dump_buffer_to_ppm
 2359              		.syntax unified
 2360              		.arm
 2361              		.fpu vfp
 2363              	armwave_test_dump_buffer_to_ppm:
 2364              	.LVL135:
 2365              	.LFB71:
 480:armwave.c     **** }
 481:armwave.c     **** 
 482:armwave.c     **** /*
 483:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 484:armwave.c     ****  */
 485:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 486:armwave.c     **** {
 2366              		.loc 1 486 1 view -0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 2370              		@ link register save eliminated.
 487:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2371              		.loc 1 487 5 view .LVU609
 2372 0af8 08309FE5 		ldr	r3, .L129	@ tmp112,
 2373 0afc 0010A0E1 		mov	r1, r0	@, fn
 2374 0b00 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2375              	.LVL136:
 2376              		.loc 1 487 5 is_stmt 0 view .LVU610
 2377 0b04 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2378              	.LVL137:
 2379              	.L130:
 2380              		.loc 1 487 5 view .LVU611
 2381              		.align	2
 2382              	.L129:
 2383 0b08 00000000 		.word	g_armwave_state
 2384              		.cfi_endproc
 2385              	.LFE71:
 2387              		.align	2
 2388              		.global	armwave_test_fill_gdkbuf
 2389              		.syntax unified
 2390              		.arm
 2391              		.fpu vfp
 2393              	armwave_test_fill_gdkbuf:
 2394              	.LVL138:
 2395              	.LFB72:
 488:armwave.c     **** }
 489:armwave.c     **** 
 490:armwave.c     **** /*
 491:armwave.c     ****  * Render GDK buffer with test funtionry.
 492:armwave.c     ****  */
 493:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 494:armwave.c     **** {
 2396              		.loc 1 494 1 is_stmt 1 view -0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 2400              		@ link register save eliminated.
 495:armwave.c     ****     //PyObject *mv;
 496:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 497:armwave.c     **** 
 498:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 499:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2401              		.loc 1 499 5 view .LVU613
 500:armwave.c     ****     
 501:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 502:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2402              		.loc 1 502 5 view .LVU614
 2403              	@ armwave.c:499:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 499:armwave.c     ****     
 2404              		.loc 1 499 11 is_stmt 0 view .LVU615
 2405 0b0c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2406              	@ armwave.c:502:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2407              		.loc 1 502 5 view .LVU616
 2408 0b10 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2409              	.LVL139:
 2410              		.loc 1 502 5 view .LVU617
 2411 0b14 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2412              	.LVL140:
 2413              		.loc 1 502 5 view .LVU618
 2414              		.cfi_endproc
 2415              	.LFE72:
 2417              		.align	2
 2418              		.global	armwave_test_buffer_alloc
 2419              		.syntax unified
 2420              		.arm
 2421              		.fpu vfp
 2423              	armwave_test_buffer_alloc:
 2424              	.LVL141:
 2425              	.LFB73:
 503:armwave.c     **** }
 504:armwave.c     **** 
 505:armwave.c     **** /*
 506:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 509:armwave.c     **** {
 2426              		.loc 1 509 1 is_stmt 1 view -0
 2427              		.cfi_startproc
 2428              		@ args = 0, pretend = 0, frame = 0
 2429              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2430              		.loc 1 510 5 view .LVU620
 2431              	@ armwave.c:509: {
 509:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2432              		.loc 1 509 1 is_stmt 0 view .LVU621
 2433 0b18 70402DE9 		push	{r4, r5, r6, lr}	@
 2434              		.cfi_def_cfa_offset 16
 2435              		.cfi_offset 4, -16
 2436              		.cfi_offset 5, -12
 2437              		.cfi_offset 6, -8
 2438              		.cfi_offset 14, -4
 2439              	@ armwave.c:509: {
 509:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2440              		.loc 1 509 1 view .LVU622
 2441 0b1c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2442              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 2443              		.loc 1 510 23 view .LVU623
 2444 0b20 44409FE5 		ldr	r4, .L139	@ tmp128,
 2445 0b24 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2446              	.LVL142:
 2447              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 2448              		.loc 1 510 7 view .LVU624
 2449 0b28 000050E3 		cmp	r0, #0	@ _1,
 2450 0b2c 0000000A 		beq	.L133		@,
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2451              		.loc 1 511 9 is_stmt 1 view .LVU625
 2452 0b30 FEFFFFEB 		bl	free		@
 2453              	.LVL143:
 2454              	.L133:
 512:armwave.c     ****     }
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 515:armwave.c     **** 
 516:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2455              		.loc 1 516 5 view .LVU626
 2456              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2457              		.loc 1 516 75 is_stmt 0 view .LVU627
 2458 0b34 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2459 0b38 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2460              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2461              		.loc 1 516 40 view .LVU628
 2462 0b3c 0610A0E1 		mov	r1, r6	@, nsets
 2463              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2464              		.loc 1 516 75 view .LVU629
 2465 0b40 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2466              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2467              		.loc 1 516 40 view .LVU630
 2468 0b44 0500A0E1 		mov	r0, r5	@, _4
 2469 0b48 FEFFFFEB 		bl	calloc		@
 2470              	.LVL144:
 2471              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 517:armwave.c     **** 
 518:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2472              		.loc 1 518 7 view .LVU631
 2473 0b4c 000050E3 		cmp	r0, #0	@ tmp124,
 2474              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2475              		.loc 1 516 38 view .LVU632
 2476 0b50 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2477              		.loc 1 518 5 is_stmt 1 view .LVU633
 2478              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 2479              		.loc 1 518 7 is_stmt 0 view .LVU634
 2480 0b54 7080BD18 		popne	{r4, r5, r6, pc}	@
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2481              		.loc 1 519 9 is_stmt 1 view .LVU635
 2482 0b58 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2483 0b5c 0620A0E1 		mov	r2, r6	@, nsets
 2484 0b60 08009FE5 		ldr	r0, .L139+4	@,
 2485              	@ armwave.c:523: }
 520:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 521:armwave.c     ****         return;
 522:armwave.c     ****     }
 523:armwave.c     **** }
 2486              		.loc 1 523 1 is_stmt 0 view .LVU636
 2487 0b64 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2488              		.cfi_restore 14
 2489              		.cfi_restore 6
 2490              		.cfi_restore 5
 2491              		.cfi_restore 4
 2492              		.cfi_def_cfa_offset 0
 2493              	.LVL145:
 2494              	@ armwave.c:519:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2495              		.loc 1 519 9 view .LVU637
 2496 0b68 FEFFFFEA 		b	printf		@
 2497              	.LVL146:
 2498              	.L140:
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2499              		.loc 1 519 9 view .LVU638
 2500              		.align	2
 2501              	.L139:
 2502 0b6c 00000000 		.word	g_armwave_state
 2503 0b70 E8010000 		.word	.LC18
 2504              		.cfi_endproc
 2505              	.LFE73:
 2507              		.align	2
 2508              		.global	armwave_fill_pixbuf_into_pybuffer
 2509              		.syntax unified
 2510              		.arm
 2511              		.fpu vfp
 2513              	armwave_fill_pixbuf_into_pybuffer:
 2514              	.LVL147:
 2515              	.LFB74:
 524:armwave.c     **** 
 525:armwave.c     **** /*
 526:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 527:armwave.c     ****  */
 528:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 529:armwave.c     **** {
 2516              		.loc 1 529 1 is_stmt 1 view -0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 48
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 530:armwave.c     ****     Py_buffer buffer;
 2520              		.loc 1 530 5 view .LVU640
 531:armwave.c     ****     int ret;
 2521              		.loc 1 531 5 view .LVU641
 532:armwave.c     **** 
 533:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 534:armwave.c     **** 
 535:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2522              		.loc 1 535 5 view .LVU642
 2523              	@ armwave.c:529: {
 529:armwave.c     ****     Py_buffer buffer;
 2524              		.loc 1 529 1 is_stmt 0 view .LVU643
 2525 0b74 04E02DE5 		str	lr, [sp, #-4]!	@,
 2526              		.cfi_def_cfa_offset 4
 2527              		.cfi_offset 14, -4
 2528 0b78 34D04DE2 		sub	sp, sp, #52	@,,
 2529              		.cfi_def_cfa_offset 56
 2530              	@ armwave.c:535:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2531              		.loc 1 535 11 view .LVU644
 2532 0b7c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2533 0b80 0120A0E3 		mov	r2, #1	@,
 2534 0b84 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2535              	.LVL148:
 536:armwave.c     **** 
 537:armwave.c     ****     if(ret != 0) {
 2536              		.loc 1 537 5 is_stmt 1 view .LVU645
 2537              	@ armwave.c:537:     if(ret != 0) {
 2538              		.loc 1 537 7 is_stmt 0 view .LVU646
 2539 0b88 000050E3 		cmp	r0, #0	@,
 2540 0b8c 0A00001A 		bne	.L145		@,
 538:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 539:armwave.c     ****         Py_RETURN_FALSE;
 540:armwave.c     ****     }
 541:armwave.c     **** 
 542:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 543:armwave.c     **** 
 544:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2541              		.loc 1 544 5 is_stmt 1 view .LVU647
 2542 0b90 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2543              	.LVL149:
 2544              		.loc 1 544 5 is_stmt 0 view .LVU648
 2545 0b94 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2546              	.LVL150:
 545:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 546:armwave.c     **** 
 547:armwave.c     ****     PyBuffer_Release(&buffer);
 2547              		.loc 1 547 5 is_stmt 1 view .LVU649
 2548 0b98 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2549 0b9c FEFFFFEB 		bl	PyBuffer_Release		@
 2550              	.LVL151:
 548:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 549:armwave.c     **** 
 550:armwave.c     ****     Py_RETURN_TRUE;
 2551              		.loc 1 550 5 view .LVU650
 2552              	.LBB31:
 2553              	.LBI31:
 2554              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2555              		.loc 2 456 20 view .LVU651
 2556              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2557              		.loc 2 458 21 view .LVU652
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2558              		.loc 2 459 5 view .LVU653
 2559              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2560              		.loc 2 459 18 is_stmt 0 view .LVU654
 2561 0ba0 38309FE5 		ldr	r3, .L146	@ tmp126,
 2562              	.LBE32:
 2563              	.LBE31:
 2564              	@ armwave.c:550:     Py_RETURN_TRUE;
 2565              		.loc 1 550 5 view .LVU655
 2566 0ba4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2567              	.LBB34:
 2568              	.LBB33:
 2569              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2570              		.loc 2 459 18 view .LVU656
 2571 0ba8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2572 0bac 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2573 0bb0 002083E5 		str	r2, [r3]	@ tmp128,
 2574              	.LBE33:
 2575              	.LBE34:
 2576              	@ armwave.c:551: }
 551:armwave.c     **** }
 2577              		.loc 1 551 1 view .LVU657
 2578 0bb4 34D08DE2 		add	sp, sp, #52	@,,
 2579              		.cfi_remember_state
 2580              		.cfi_def_cfa_offset 4
 2581              		@ sp needed	@
 2582 0bb8 04F09DE4 		ldr	pc, [sp], #4	@
 2583              	.LVL152:
 2584              	.L145:
 2585              		.cfi_restore_state
 538:armwave.c     ****         Py_RETURN_FALSE;
 2586              		.loc 1 538 9 is_stmt 1 view .LVU658
 2587 0bbc 20009FE5 		ldr	r0, .L146+4	@,
 2588              	.LVL153:
 538:armwave.c     ****         Py_RETURN_FALSE;
 2589              		.loc 1 538 9 is_stmt 0 view .LVU659
 2590 0bc0 FEFFFFEB 		bl	puts		@
 2591              	.LVL154:
 539:armwave.c     ****     }
 2592              		.loc 1 539 9 is_stmt 1 view .LVU660
 2593              	.LBB35:
 2594              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2595              		.loc 2 456 20 view .LVU661
 2596              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2597              		.loc 2 458 21 view .LVU662
 2598              		.loc 2 459 5 view .LVU663
 2599              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2600              		.loc 2 459 18 is_stmt 0 view .LVU664
 2601 0bc4 1C309FE5 		ldr	r3, .L146+8	@ tmp120,
 2602              	.LBE36:
 2603              	.LBE35:
 2604              	@ armwave.c:539:         Py_RETURN_FALSE;
 539:armwave.c     ****     }
 2605              		.loc 1 539 9 view .LVU665
 2606 0bc8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2607              	.LBB38:
 2608              	.LBB37:
 2609              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2610              		.loc 2 459 18 view .LVU666
 2611 0bcc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2612 0bd0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2613 0bd4 002083E5 		str	r2, [r3]	@ tmp122,
 2614              	.LBE37:
 2615              	.LBE38:
 2616              	@ armwave.c:551: }
 2617              		.loc 1 551 1 view .LVU667
 2618 0bd8 34D08DE2 		add	sp, sp, #52	@,,
 2619              		.cfi_def_cfa_offset 4
 2620              		@ sp needed	@
 2621 0bdc 04F09DE4 		ldr	pc, [sp], #4	@
 2622              	.L147:
 2623              		.align	2
 2624              	.L146:
 2625 0be0 00000000 		.word	_Py_TrueStruct
 2626 0be4 3C020000 		.word	.LC19
 2627 0be8 00000000 		.word	_Py_FalseStruct
 2628              		.cfi_endproc
 2629              	.LFE74:
 2631              		.align	2
 2632              		.global	armwave_test_create_am_sine
 2633              		.syntax unified
 2634              		.arm
 2635              		.fpu vfp
 2637              	armwave_test_create_am_sine:
 2638              	.LVL155:
 2639              	.LFB75:
 552:armwave.c     **** 
 553:armwave.c     **** /*
 554:armwave.c     ****  * Make a test AM waveform for render tests.
 555:armwave.c     ****  *
 556:armwave.c     ****  * @param   mod                     modulation depth
 557:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 558:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 559:armwave.c     ****  */
 560:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 561:armwave.c     **** {
 2640              		.loc 1 561 1 is_stmt 1 view -0
 2641              		.cfi_startproc
 2642              		@ args = 0, pretend = 0, frame = 8
 2643              		@ frame_needed = 0, uses_anonymous_args = 0
 562:armwave.c     ****     float v, noise, xnoise, mod_val;
 2644              		.loc 1 562 5 view .LVU669
 563:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2645              		.loc 1 563 5 view .LVU670
 2646              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2647              		.loc 1 561 1 is_stmt 0 view .LVU671
 2648 0bec F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2649              		.cfi_def_cfa_offset 32
 2650              		.cfi_offset 4, -32
 2651              		.cfi_offset 5, -28
 2652              		.cfi_offset 6, -24
 2653              		.cfi_offset 7, -20
 2654              		.cfi_offset 8, -16
 2655              		.cfi_offset 9, -12
 2656              		.cfi_offset 10, -8
 2657              		.cfi_offset 14, -4
 2658              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2659              		.loc 1 563 38 view .LVU672
 2660 0bf0 7A7A9FED 		vldr.32	s14, .L179	@ tmp180,
 2661              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2662              		.loc 1 563 55 view .LVU673
 2663 0bf4 00529FE5 		ldr	r5, .L179+28	@ tmp250,
 2664              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2665              		.loc 1 561 1 view .LVU674
 2666 0bf8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2667              		.cfi_def_cfa_offset 80
 2668              		.cfi_offset 80, -80
 2669              		.cfi_offset 81, -76
 2670              		.cfi_offset 82, -72
 2671              		.cfi_offset 83, -68
 2672              		.cfi_offset 84, -64
 2673              		.cfi_offset 85, -60
 2674              		.cfi_offset 86, -56
 2675              		.cfi_offset 87, -52
 2676              		.cfi_offset 88, -48
 2677              		.cfi_offset 89, -44
 2678              		.cfi_offset 90, -40
 2679              		.cfi_offset 91, -36
 2680 0bfc 0090A0E1 		mov	r9, r0	@ sets, sets
 2681              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2682              		.loc 1 563 38 view .LVU675
 2683 0c00 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2684              	@ armwave.c:567:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 564:armwave.c     ****     int s, set_offset = 0;
 565:armwave.c     ****     int w, x;
 566:armwave.c     **** 
 567:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2685              		.loc 1 567 70 view .LVU676
 2686 0c04 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2687 0c08 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2688              	.LBB41:
 2689              	.LBB42:
 2690              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2691              		.loc 1 510 23 view .LVU677
 2692 0c0c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2693              	.LVL156:
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2694              		.loc 1 510 23 view .LVU678
 2695              	.LBE42:
 2696              	.LBE41:
 2697              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 563:armwave.c     ****     int s, set_offset = 0;
 2698              		.loc 1 563 38 view .LVU679
 2699 0c10 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2700              	@ armwave.c:567:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2701              		.loc 1 567 70 view .LVU680
 2702 0c14 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2703              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2704              		.loc 1 561 1 view .LVU681
 2705 0c18 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2706              	.LBB46:
 2707              	.LBB43:
 2708              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2709              		.loc 1 510 7 view .LVU682
 2710 0c1c 000050E3 		cmp	r0, #0	@ _82,
 2711              	.LBE43:
 2712              	.LBE46:
 2713              	@ armwave.c:561: {
 561:armwave.c     ****     float v, noise, xnoise, mod_val;
 2714              		.loc 1 561 1 view .LVU683
 2715 0c20 08D04DE2 		sub	sp, sp, #8	@,,
 2716              		.cfi_def_cfa_offset 88
 2717              	@ armwave.c:568:     g_armwave_state.test_wave_buffer_nsets = sets;
 568:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2718              		.loc 1 568 44 view .LVU684
 2719 0c24 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2720              	@ armwave.c:567:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 567:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2721              		.loc 1 567 45 view .LVU685
 2722 0c28 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2723              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 563:armwave.c     ****     int s, set_offset = 0;
 2724              		.loc 1 563 38 view .LVU686
 2725 0c2c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2726              	@ armwave.c:563:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 563:armwave.c     ****     int s, set_offset = 0;
 2727              		.loc 1 563 11 view .LVU687
 2728 0c30 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2729              	.LVL157:
 564:armwave.c     ****     int w, x;
 2730              		.loc 1 564 5 is_stmt 1 view .LVU688
 565:armwave.c     **** 
 2731              		.loc 1 565 5 view .LVU689
 567:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2732              		.loc 1 567 5 view .LVU690
 2733              		.loc 1 568 5 view .LVU691
 569:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2734              		.loc 1 569 5 view .LVU692
 2735              	.LBB47:
 2736              	.LBI41:
 508:armwave.c     **** {
 2737              		.loc 1 508 6 view .LVU693
 2738              	.LBB44:
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2739              		.loc 1 510 5 view .LVU694
 2740              	@ armwave.c:510:     if(g_armwave_state.test_wave_buffer != NULL) {
 510:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2741              		.loc 1 510 7 is_stmt 0 view .LVU695
 2742 0c34 0000000A 		beq	.L149		@,
 511:armwave.c     ****     }
 2743              		.loc 1 511 9 is_stmt 1 view .LVU696
 2744 0c38 FEFFFFEB 		bl	free		@
 2745              	.LVL158:
 2746              	.L149:
 516:armwave.c     **** 
 2747              		.loc 1 516 5 view .LVU697
 2748              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2749              		.loc 1 516 75 is_stmt 0 view .LVU698
 2750 0c3c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2751 0c40 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2752              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2753              		.loc 1 516 40 view .LVU699
 2754 0c44 0910A0E1 		mov	r1, r9	@, sets
 2755              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2756              		.loc 1 516 75 view .LVU700
 2757 0c48 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2758              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2759              		.loc 1 516 40 view .LVU701
 2760 0c4c 0400A0E1 		mov	r0, r4	@, _85
 2761 0c50 FEFFFFEB 		bl	calloc		@
 2762              	.LVL159:
 2763              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2764              		.loc 1 518 7 view .LVU702
 2765 0c54 000050E3 		cmp	r0, #0	@ tmp191,
 2766              	@ armwave.c:516:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 516:armwave.c     **** 
 2767              		.loc 1 516 38 view .LVU703
 2768 0c58 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2769              		.loc 1 518 5 is_stmt 1 view .LVU704
 2770              	@ armwave.c:518:     if(g_armwave_state.test_wave_buffer == NULL) {
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2771              		.loc 1 518 7 is_stmt 0 view .LVU705
 2772 0c5c 5A00000A 		beq	.L178		@,
 2773              	.L150:
 2774              	.LVL160:
 518:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2775              		.loc 1 518 7 view .LVU706
 2776              	.LBE44:
 2777              	.LBE47:
 2778              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 570:armwave.c     **** 
 571:armwave.c     ****     for(s = 0; s < sets; s++) {
 2779              		.loc 1 571 5 discriminator 1 view .LVU707
 2780 0c60 000059E3 		cmp	r9, #0	@ sets,
 2781 0c64 550000DA 		ble	.L148		@,
 2782              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 573:armwave.c     ****     
 574:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 576:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 577:armwave.c     **** 
 578:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 580:armwave.c     ****                 noise *= noise;
 581:armwave.c     ****                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 583:armwave.c     **** 
 584:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 585:armwave.c     ****                     noise = -noise;
 586:armwave.c     **** 
 587:armwave.c     ****                 noise += 1.0f;
 588:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 590:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2783              		.loc 1 590 45 view .LVU708
 2784 0c68 5C8A9FED 		vldr.32	s16, .L179	@ tmp258,
 2785              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 592:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 593:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2786              		.loc 1 593 104 view .LVU709
 2787 0c6c 5CCA9FED 		vldr.32	s24, .L179+4	@ tmp259,
 2788              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 2789              		.loc 1 571 5 view .LVU710
 2790 0c70 0070A0E3 		mov	r7, #0	@ set_offset,
 2791              	@ armwave.c:572:         printf("Calculating test set %d\n", s);
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 2792              		.loc 1 572 9 view .LVU711
 2793 0c74 84A19FE5 		ldr	r10, .L179+32	@ tmp257,
 2794              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 2795              		.loc 1 571 5 view .LVU712
 2796 0c78 0780A0E1 		mov	r8, r7	@ s, set_offset
 2797              	.LVL161:
 2798              	.L151:
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 2799              		.loc 1 572 9 is_stmt 1 view .LVU713
 2800 0c7c 0810A0E1 		mov	r1, r8	@, s
 2801 0c80 0A00A0E1 		mov	r0, r10	@, tmp257
 2802 0c84 FEFFFFEB 		bl	printf		@
 2803              	.LVL162:
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2804              		.loc 1 574 9 view .LVU714
 2805              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2806              		.loc 1 574 39 is_stmt 0 view .LVU715
 2807 0c88 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2808              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2809              		.loc 1 574 9 view .LVU716
 2810 0c8c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2811 0c90 450000DA 		ble	.L152		@,
 2812              	@ armwave.c:576:             mod_val = 0.5f + (_1_waves_mod * w);
 576:armwave.c     **** 
 2813              		.loc 1 576 21 view .LVU717
 2814 0c94 53CADFED 		vldr.32	s25, .L179+8	@ tmp200,
 2815              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2816              		.loc 1 590 33 view .LVU718
 2817 0c98 53BA9FED 		vldr.32	s22, .L179+12	@ tmp253,
 2818              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2819              		.loc 1 588 24 view .LVU719
 2820 0c9c 53AADFED 		vldr.32	s21, .L179+16	@ tmp254,
 2821 0ca0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2822              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2823              		.loc 1 574 15 view .LVU720
 2824 0ca4 0060A0E3 		mov	r6, #0	@ w,
 2825              	.LVL163:
 2826              	.L159:
 576:armwave.c     **** 
 2827              		.loc 1 576 13 is_stmt 1 view .LVU721
 2828              	@ armwave.c:576:             mod_val = 0.5f + (_1_waves_mod * w);
 576:armwave.c     **** 
 2829              		.loc 1 576 21 is_stmt 0 view .LVU722
 2830 0ca8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2831 0cac 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2832              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2833              		.loc 1 578 13 view .LVU723
 2834 0cb0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2835              	@ armwave.c:576:             mod_val = 0.5f + (_1_waves_mod * w);
 576:armwave.c     **** 
 2836              		.loc 1 576 21 view .LVU724
 2837 0cb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2838 0cb8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2839              	.LVL164:
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2840              		.loc 1 578 13 is_stmt 1 view .LVU725
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2841              		.loc 1 578 13 is_stmt 0 view .LVU726
 2842 0cbc 370000DA 		ble	.L153		@,
 2843 0cc0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2844              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2845              		.loc 1 593 113 view .LVU727
 2846 0cc4 4AAA9FED 		vldr.32	s20, .L179+20	@ tmp229,
 2847 0cc8 4A8ADFED 		vldr.32	s17, .L179+24	@ tmp230,
 2848              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2849              		.loc 1 578 19 view .LVU728
 2850 0ccc 0040A0E3 		mov	r4, #0	@ x,
 2851              	.LVL165:
 2852              	.L158:
 579:armwave.c     ****                 noise *= noise;
 2853              		.loc 1 579 17 is_stmt 1 view .LVU729
 2854              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2855              		.loc 1 579 28 is_stmt 0 view .LVU730
 2856 0cd0 FEFFFFEB 		bl	rand		@
 2857              	.LVL166:
 2858              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2859              		.loc 1 579 35 view .LVU731
 2860 0cd4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2861              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2862              		.loc 1 579 45 view .LVU732
 2863 0cd8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2864 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2865              	@ armwave.c:579:                 noise  = ((rand() & 0xffff) * noise_fraction);
 579:armwave.c     ****                 noise *= noise;
 2866              		.loc 1 579 24 view .LVU733
 2867 0ce0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2868              	.LVL167:
 580:armwave.c     ****                 noise *= noise;
 2869              		.loc 1 580 17 is_stmt 1 view .LVU734
 2870              	@ armwave.c:580:                 noise *= noise;
 580:armwave.c     ****                 noise *= noise;
 2871              		.loc 1 580 23 is_stmt 0 view .LVU735
 2872 0ce4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2873              	.LVL168:
 581:armwave.c     ****                 noise *= noise;
 2874              		.loc 1 581 17 is_stmt 1 view .LVU736
 2875              	@ armwave.c:581:                 noise *= noise;
 581:armwave.c     ****                 noise *= noise;
 2876              		.loc 1 581 23 is_stmt 0 view .LVU737
 2877 0ce8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2878              	.LVL169:
 582:armwave.c     **** 
 2879              		.loc 1 582 17 is_stmt 1 view .LVU738
 2880              	@ armwave.c:582:                 noise *= noise;
 582:armwave.c     **** 
 2881              		.loc 1 582 23 is_stmt 0 view .LVU739
 2882 0cec A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2883              	.LVL170:
 584:armwave.c     ****                     noise = -noise;
 2884              		.loc 1 584 17 is_stmt 1 view .LVU740
 2885              	@ armwave.c:584:                 if((rand() & 0xffff) > 0x7fff)
 584:armwave.c     ****                     noise = -noise;
 2886              		.loc 1 584 21 is_stmt 0 view .LVU741
 2887 0cf0 FEFFFFEB 		bl	rand		@
 2888              	.LVL171:
 585:armwave.c     **** 
 2889              		.loc 1 585 21 is_stmt 1 view .LVU742
 2890              	@ armwave.c:584:                 if((rand() & 0xffff) > 0x7fff)
 584:armwave.c     ****                     noise = -noise;
 2891              		.loc 1 584 19 is_stmt 0 view .LVU743
 2892 0cf4 020910E3 		tst	r0, #32768	@,
 2893              	@ armwave.c:585:                     noise = -noise;
 585:armwave.c     **** 
 2894              		.loc 1 585 27 view .LVU744
 2895 0cf8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2896              	.LVL172:
 587:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2897              		.loc 1 587 17 is_stmt 1 view .LVU745
 588:armwave.c     **** 
 2898              		.loc 1 588 17 view .LVU746
 2899              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2900              		.loc 1 588 27 is_stmt 0 view .LVU747
 2901 0cfc FEFFFFEB 		bl	rand		@
 2902              	.LVL173:
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2903              		.loc 1 590 17 is_stmt 1 view .LVU748
 2904              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2905              		.loc 1 590 45 is_stmt 0 view .LVU749
 2906 0d00 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2907              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2908              		.loc 1 590 33 view .LVU750
 2909 0d04 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2910              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2911              		.loc 1 590 45 view .LVU751
 2912 0d08 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2913              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2914              		.loc 1 590 33 view .LVU752
 2915 0d0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2916              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2917              		.loc 1 590 45 view .LVU753
 2918 0d10 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2919              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2920              		.loc 1 590 33 view .LVU754
 2921 0d14 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2922              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2923              		.loc 1 588 34 view .LVU755
 2924 0d18 7000FFE6 		uxth	r0, r0	@ tmp214,
 2925              	.LVL174:
 2926              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2927              		.loc 1 588 44 view .LVU756
 2928 0d1c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2929 0d20 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2930              	@ armwave.c:588:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 588:armwave.c     **** 
 2931              		.loc 1 588 24 view .LVU757
 2932 0d24 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2933              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2934              		.loc 1 590 77 view .LVU758
 2935 0d28 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2936              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2937              		.loc 1 590 22 view .LVU759
 2938 0d2c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2939 0d30 FEFFFFEB 		bl	sin		@
 2940              	.LVL175:
 2941              		.loc 1 593 17 is_stmt 1 view .LVU760
 2942              	@ armwave.c:587:                 noise += 1.0f;
 587:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2943              		.loc 1 587 23 is_stmt 0 view .LVU761
 2944 0d34 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2945              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2946              		.loc 1 593 104 view .LVU762
 2947 0d38 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2948              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2949              		.loc 1 590 98 view .LVU763
 2950 0d3c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2951              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2952              		.loc 1 590 87 view .LVU764
 2953 0d40 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2954              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2955              		.loc 1 590 98 view .LVU765
 2956 0d44 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2957              	@ armwave.c:590:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 590:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2958              		.loc 1 590 19 view .LVU766
 2959 0d48 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2960              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2961              		.loc 1 593 113 view .LVU767
 2962 0d4c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2963 0d50 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2964 0d54 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2965 0d58 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2966 0d5c 050000DA 		ble	.L155		@,
 2967              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2968              		.loc 1 593 104 discriminator 1 view .LVU768
 2969 0d60 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2970 0d64 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2971 0d68 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2972 0d6c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2973 0d70 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2974 0d74 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2975              	.L155:
 2976              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2977              		.loc 1 593 57 discriminator 12 view .LVU769
 2978 0d78 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2979              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2980              		.loc 1 593 102 discriminator 12 view .LVU770
 2981 0d7c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2982 0d80 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2983 0d84 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2984              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2985              		.loc 1 578 58 discriminator 12 view .LVU771
 2986 0d88 014084E2 		add	r4, r4, #1	@ x, x,
 2987              	.LVL176:
 2988              	@ armwave.c:593:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2989              		.loc 1 593 102 discriminator 12 view .LVU772
 2990 0d8c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2991              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2992              		.loc 1 578 43 discriminator 12 view .LVU773
 2993 0d90 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2994              	@ armwave.c:578:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 578:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2995              		.loc 1 578 13 discriminator 12 view .LVU774
 2996 0d94 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2997 0d98 CCFFFFCA 		bgt	.L158		@,
 2998 0d9c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2999              	.LVL177:
 3000              	.L153:
 3001              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3002              		.loc 1 574 48 discriminator 2 view .LVU775
 3003 0da0 016086E2 		add	r6, r6, #1	@ w, w,
 3004              	.LVL178:
 3005              	@ armwave.c:574:         for(w = 0; w < g_armwave_state.waves; w++) {
 574:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3006              		.loc 1 574 9 discriminator 2 view .LVU776
 3007 0da4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3008 0da8 BEFFFFBA 		blt	.L159		@,
 3009              	.LVL179:
 3010              	.L152:
 594:armwave.c     ****             }
 595:armwave.c     ****         }
 596:armwave.c     **** 
 597:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3011              		.loc 1 597 9 is_stmt 1 discriminator 2 view .LVU777
 3012              	@ armwave.c:597:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3013              		.loc 1 597 46 is_stmt 0 discriminator 2 view .LVU778
 3014 0dac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3015              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 3016              		.loc 1 571 27 discriminator 2 view .LVU779
 3017 0db0 018088E2 		add	r8, r8, #1	@ s, s,
 3018              	.LVL180:
 3019              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 3020              		.loc 1 571 5 discriminator 2 view .LVU780
 3021 0db4 080059E1 		cmp	r9, r8	@ sets, s
 3022              	@ armwave.c:597:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3023              		.loc 1 597 20 discriminator 2 view .LVU781
 3024 0db8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3025              	.LVL181:
 3026              	@ armwave.c:571:     for(s = 0; s < sets; s++) {
 571:armwave.c     ****         printf("Calculating test set %d\n", s);
 3027              		.loc 1 571 5 discriminator 2 view .LVU782
 3028 0dbc AEFFFF1A 		bne	.L151		@,
 3029              	.LVL182:
 3030              	.L148:
 3031              	@ armwave.c:599: }
 598:armwave.c     ****     }
 599:armwave.c     **** }
 3032              		.loc 1 599 1 view .LVU783
 3033 0dc0 08D08DE2 		add	sp, sp, #8	@,,
 3034              		.cfi_remember_state
 3035              		.cfi_def_cfa_offset 80
 3036              		@ sp needed	@
 3037 0dc4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3038              		.cfi_restore 90
 3039              		.cfi_restore 91
 3040              		.cfi_restore 88
 3041              		.cfi_restore 89
 3042              		.cfi_restore 86
 3043              		.cfi_restore 87
 3044              		.cfi_restore 84
 3045              		.cfi_restore 85
 3046              		.cfi_restore 82
 3047              		.cfi_restore 83
 3048              		.cfi_restore 80
 3049              		.cfi_restore 81
 3050              		.cfi_def_cfa_offset 32
 3051              	.LVL183:
 3052              		.loc 1 599 1 view .LVU784
 3053 0dc8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3054              	.LVL184:
 3055              	.L178:
 3056              		.cfi_restore_state
 3057              	.LBB48:
 3058              	.LBB45:
 519:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3059              		.loc 1 519 9 is_stmt 1 view .LVU785
 3060 0dcc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3061 0dd0 0920A0E1 		mov	r2, r9	@, sets
 3062 0dd4 28009FE5 		ldr	r0, .L179+36	@,
 3063 0dd8 FEFFFFEB 		bl	printf		@
 3064              	.LVL185:
 521:armwave.c     ****     }
 3065              		.loc 1 521 9 view .LVU786
 3066 0ddc 9FFFFFEA 		b	.L150		@
 3067              	.L180:
 3068              		.align	2
 3069              	.L179:
 3070 0de0 0000803F 		.word	1065353216
 3071 0de4 00007F43 		.word	1132396544
 3072 0de8 0000003F 		.word	1056964608
 3073 0dec C3F5C840 		.word	1086911939
 3074 0df0 38FFC74A 		.word	1254620984
 3075 0df4 0000FE42 		.word	1123942400
 3076 0df8 00000043 		.word	1124073472
 3077 0dfc 00000000 		.word	g_armwave_state
 3078 0e00 90020000 		.word	.LC20
 3079 0e04 E8010000 		.word	.LC18
 3080              	.LBE45:
 3081              	.LBE48:
 3082              		.cfi_endproc
 3083              	.LFE75:
 3085              		.align	2
 3086              		.global	armwave_cleanup
 3087              		.syntax unified
 3088              		.arm
 3089              		.fpu vfp
 3091              	armwave_cleanup:
 3092              	.LFB76:
 600:armwave.c     **** 
 601:armwave.c     **** /*
 602:armwave.c     ****  * Make a test square waveform.
 603:armwave.c     ****  *
 604:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 605:armwave.c     ****  */
 606:armwave.c     **** #if 0
 607:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 608:armwave.c     **** {
 609:armwave.c     ****     uint8_t v;
 610:armwave.c     ****     float noise, xnoise;
 611:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 612:armwave.c     ****     int w, x;
 613:armwave.c     **** 
 614:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 615:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 616:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 617:armwave.c     ****             noise *= noise;
 618:armwave.c     ****             noise *= noise;
 619:armwave.c     ****             noise *= noise;
 620:armwave.c     **** 
 621:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 622:armwave.c     ****                 noise = -noise;
 623:armwave.c     **** 
 624:armwave.c     ****             //noise += 1.0f;
 625:armwave.c     **** 
 626:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 627:armwave.c     ****                 new_level = 0.2f;
 628:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 629:armwave.c     ****                 new_level = 0.8f;
 630:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 631:armwave.c     ****                 new_level = 0.2f;
 632:armwave.c     ****             } else {
 633:armwave.c     ****                 new_level = 0.8f;
 634:armwave.c     ****             }
 635:armwave.c     **** 
 636:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 637:armwave.c     **** 
 638:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 639:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 640:armwave.c     ****         }
 641:armwave.c     ****     }
 642:armwave.c     **** }
 643:armwave.c     **** #endif
 644:armwave.c     **** 
 645:armwave.c     **** /*
 646:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 647:armwave.c     ****  */
 648:armwave.c     **** void armwave_cleanup()
 649:armwave.c     **** {
 3093              		.loc 1 649 1 view -0
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 0
 3096              		@ frame_needed = 0, uses_anonymous_args = 0
 650:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3097              		.loc 1 650 5 view .LVU788
 3098              	@ armwave.c:649: {
 649:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3099              		.loc 1 649 1 is_stmt 0 view .LVU789
 3100 0e08 10402DE9 		push	{r4, lr}	@
 3101              		.cfi_def_cfa_offset 8
 3102              		.cfi_offset 4, -8
 3103              		.cfi_offset 14, -4
 3104              	@ armwave.c:650:     free(g_armwave_state.out_pixbuf);
 3105              		.loc 1 650 25 view .LVU790
 3106 0e0c 34409FE5 		ldr	r4, .L183	@ tmp114,
 3107              	@ armwave.c:650:     free(g_armwave_state.out_pixbuf);
 3108              		.loc 1 650 5 view .LVU791
 3109 0e10 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3110 0e14 FEFFFFEB 		bl	free		@
 3111              	.LVL186:
 651:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3112              		.loc 1 651 5 is_stmt 1 view .LVU792
 3113 0e18 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3114 0e1c FEFFFFEB 		bl	free		@
 3115              	.LVL187:
 652:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3116              		.loc 1 652 5 view .LVU793
 3117 0e20 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3118 0e24 FEFFFFEB 		bl	free		@
 3119              	.LVL188:
 653:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3120              		.loc 1 653 5 view .LVU794
 3121 0e28 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3122 0e2c FEFFFFEB 		bl	free		@
 3123              	.LVL189:
 654:armwave.c     **** 
 655:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3124              		.loc 1 655 5 view .LVU795
 3125              	@ armwave.c:655:     g_armwave_state.out_pixbuf = NULL;
 3126              		.loc 1 655 32 is_stmt 0 view .LVU796
 3127 0e30 0030A0E3 		mov	r3, #0	@ tmp123,
 3128 0e34 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 656:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3129              		.loc 1 656 5 is_stmt 1 view .LVU797
 3130              	@ armwave.c:656:     g_armwave_state.ch1_buffer = NULL;
 3131              		.loc 1 656 32 is_stmt 0 view .LVU798
 3132 0e38 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 657:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3133              		.loc 1 657 5 is_stmt 1 view .LVU799
 3134              	@ armwave.c:657:     g_armwave_state.xcoord_to_xpixel = NULL;
 3135              		.loc 1 657 38 is_stmt 0 view .LVU800
 3136 0e3c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 658:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3137              		.loc 1 658 5 is_stmt 1 view .LVU801
 3138              	@ armwave.c:658:     g_armwave_state.test_wave_buffer = NULL;
 3139              		.loc 1 658 38 is_stmt 0 view .LVU802
 3140 0e40 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3141              	@ armwave.c:659: }
 659:armwave.c     **** }
 3142              		.loc 1 659 1 view .LVU803
 3143 0e44 1080BDE8 		pop	{r4, pc}	@
 3144              	.L184:
 3145              		.align	2
 3146              	.L183:
 3147 0e48 00000000 		.word	g_armwave_state
 3148              		.cfi_endproc
 3149              	.LFE76:
 3151              		.comm	gamma_table,256,4
 3152              		.comm	g_armwave_state,136,4
 3153              		.section	.rodata
 3154              		.align	2
 3155              		.set	.LANCHOR0,. + 0
 3158              	__PRETTY_FUNCTION__.17096:
 3159 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3159      6176655F 
 3159      66696C6C 
 3159      5F706978 
 3159      6275665F 
 3160 001b 00       		.space	1
 3163              	__PRETTY_FUNCTION__.17123:
 3164 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3164      6176655F 
 3164      73657475 
 3164      705F7265 
 3164      6E646572 
 3165 0031 000000   		.space	3
 3168              	__PRETTY_FUNCTION__.17130:
 3169 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3169      6176655F 
 3169      7365745F 
 3169      77617665 
 3169      5F706F69 
 3170 004d 000000   		.space	3
 3173              	__PRETTY_FUNCTION__.17137:
 3174 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3174      6176655F 
 3174      7365745F 
 3174      77617665 
 3174      5F706F69 
 3175              		.section	.rodata.str1.4,"aMS",%progbits,1
 3176              		.align	2
 3177              	.LC0:
 3178 0000 76302E30 		.ascii	"v0.0.1\000"
 3178      2E3100
 3179 0007 00       		.space	1
 3180              	.LC1:
 3181 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3181      61766520 
 3181      76657273 
 3181      696F6E3A 
 3181      2025730A 
 3182 001d 000000   		.space	3
 3183              	.LC2:
 3184 0020 61726D77 		.ascii	"armwave.c\000"
 3184      6176652E 
 3184      6300
 3185 002a 0000     		.space	2
 3186              	.LC3:
 3187 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3187      62756666 
 3187      65722021 
 3187      3D204E55 
 3187      4C4C00
 3188 003f 00       		.space	1
 3189              	.LC4:
 3190 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3190      20653D25 
 3190      6420773D 
 3190      25642077 
 3190      733D2564 
 3191              	.LC5:
 3192 006c 73746172 		.ascii	"start_point < end_point\000"
 3192      745F706F 
 3192      696E7420 
 3192      3C20656E 
 3192      645F706F 
 3193              	.LC6:
 3194 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3194      7566665F 
 3194      73697A65 
 3194      3D25642C 
 3194      20636D70 
 3195 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3195      5F776964 
 3195      74683D25 
 3195      642C2077 
 3195      6176655F 
 3196 00e1 000000   		.space	3
 3197              	.LC7:
 3198 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3198      6D776176 
 3198      655F7374 
 3198      6174652E 
 3198      6368315F 
 3199 0107 00       		.space	1
 3200              	.LC8:
 3201 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3201      6D776176 
 3201      655F7374 
 3201      6174652E 
 3201      78636F6F 
 3202 0131 000000   		.space	3
 3203              	.LC9:
 3204 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3204      3A203078 
 3204      25303878 
 3204      20307825 
 3204      30387820 
 3205              	.LC10:
 3206 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3206      5F627566 
 3206      66657220 
 3206      213D204E 
 3206      554C4C00 
 3207              	.LC11:
 3208 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3208      6176655F 
 3208      7365745F 
 3208      77617665 
 3208      5F706F69 
 3209 019f 78636565 		.ascii	"xceeded\000"
 3209      64656400 
 3210 01a7 00       		.space	1
 3211              	.LC12:
 3212 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3212      5F627566 
 3212      6665725F 
 3212      70747220 
 3212      213D2030 
 3213 01bd 000000   		.space	3
 3214              	.LC13:
 3215 01c0 776200   		.ascii	"wb\000"
 3216 01c3 00       		.space	1
 3217              	.LC14:
 3218 01c4 50330A00 		.ascii	"P3\012\000"
 3219              	.LC15:
 3220 01c8 25642025 		.ascii	"%d %d\012\000"
 3220      640A00
 3221 01cf 00       		.space	1
 3222              	.LC16:
 3223 01d0 3235350A 		.ascii	"255\012\000"
 3223      00
 3224 01d5 000000   		.space	3
 3225              	.LC17:
 3226 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3226      25336420 
 3226      2533640A 
 3226      00
 3227 01e5 000000   		.space	3
 3228              	.LC18:
 3229 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3229      6176655F 
 3229      74657374 
 3229      5F627566 
 3229      6665725F 
 3230 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3230      20627566 
 3230      66657220 
 3230      28256420 
 3230      62797465 
 3231              	.LC19:
 3232 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3232      6176655F 
 3232      66696C6C 
 3232      5F706978 
 3232      6275665F 
 3233 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3233      20666169 
 3233      6C65642C 
 3233      20726574 
 3233      75726E69 
 3234 028e 0000     		.space	2
 3235              	.LC20:
 3236 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3236      756C6174 
 3236      696E6720 
 3236      74657374 
 3236      20736574 
 3237              		.text
 3238              	.Letext0:
 3239              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3240              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3241              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3242              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3243              		.file 7 "/usr/include/stdio.h"
 3244              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3245              		.file 9 "/usr/include/errno.h"
 3246              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3247              		.file 11 "/usr/include/unistd.h"
 3248              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3249              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3250              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3251              		.file 15 "/usr/include/math.h"
 3252              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3253              		.file 17 "/usr/include/time.h"
 3254              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3255              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3256              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3257              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3258              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3259              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3260              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3261              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3262              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3263              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3264              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3265              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3266              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3267              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3268              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3269              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3270              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3271              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3272              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3273              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3274              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3275              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3276              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3277              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3278              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3279              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3280              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3281              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3282              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3283              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3284              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3285              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3286              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3287              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3288              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3289              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3290              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3291              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3292              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3293              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3294              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3295              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3296              		.file 60 "/usr/local/include/python3.8/context.h"
 3297              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3298              		.file 62 "/usr/local/include/python3.8/code.h"
 3299              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3300              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3301              		.file 65 "/usr/local/include/python3.8/import.h"
 3302              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3303              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3304              		.file 68 "/usr/include/malloc.h"
 3305              		.file 69 "armwave.h"
 3306              		.file 70 "/usr/include/stdlib.h"
 3307              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3308              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3309              		.file 73 "<built-in>"
 3310              		.file 74 "/usr/include/assert.h"
